
Dashbaord2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a930  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  0800aae0  0800aae0  0000bae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac28  0800ac28  0000c060  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac28  0800ac28  0000bc28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac30  0800ac30  0000c060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac30  0800ac30  0000bc30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ac34  0800ac34  0000bc34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800ac38  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d74  20000060  0800ac98  0000c060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001dd4  0800ac98  0000cdd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002673c  00000000  00000000  0000c090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004959  00000000  00000000  000327cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002088  00000000  00000000  00037128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000196e  00000000  00000000  000391b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dd75  00000000  00000000  0003ab1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023eae  00000000  00000000  00068893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00124626  00000000  00000000  0008c741  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b0d67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f48  00000000  00000000  001b0dac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  001b9cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800aac8 	.word	0x0800aac8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	0800aac8 	.word	0x0800aac8

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000204:	f000 b96a 	b.w	80004dc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	460c      	mov	r4, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14e      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022c:	4694      	mov	ip, r2
 800022e:	458c      	cmp	ip, r1
 8000230:	4686      	mov	lr, r0
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	d962      	bls.n	80002fe <__udivmoddi4+0xde>
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0320 	rsb	r3, r2, #32
 800023e:	4091      	lsls	r1, r2
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	fa0c fc02 	lsl.w	ip, ip, r2
 8000248:	4319      	orrs	r1, r3
 800024a:	fa00 fe02 	lsl.w	lr, r0, r2
 800024e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000252:	fa1f f68c 	uxth.w	r6, ip
 8000256:	fbb1 f4f7 	udiv	r4, r1, r7
 800025a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025e:	fb07 1114 	mls	r1, r7, r4, r1
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	fb04 f106 	mul.w	r1, r4, r6
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000276:	f080 8112 	bcs.w	800049e <__udivmoddi4+0x27e>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 810f 	bls.w	800049e <__udivmoddi4+0x27e>
 8000280:	3c02      	subs	r4, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a59      	subs	r1, r3, r1
 8000286:	fa1f f38e 	uxth.w	r3, lr
 800028a:	fbb1 f0f7 	udiv	r0, r1, r7
 800028e:	fb07 1110 	mls	r1, r7, r0, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb00 f606 	mul.w	r6, r0, r6
 800029a:	429e      	cmp	r6, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x94>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002a6:	f080 80fc 	bcs.w	80004a2 <__udivmoddi4+0x282>
 80002aa:	429e      	cmp	r6, r3
 80002ac:	f240 80f9 	bls.w	80004a2 <__udivmoddi4+0x282>
 80002b0:	4463      	add	r3, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	1b9b      	subs	r3, r3, r6
 80002b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11d      	cbz	r5, 80002c6 <__udivmoddi4+0xa6>
 80002be:	40d3      	lsrs	r3, r2
 80002c0:	2200      	movs	r2, #0
 80002c2:	e9c5 3200 	strd	r3, r2, [r5]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d905      	bls.n	80002da <__udivmoddi4+0xba>
 80002ce:	b10d      	cbz	r5, 80002d4 <__udivmoddi4+0xb4>
 80002d0:	e9c5 0100 	strd	r0, r1, [r5]
 80002d4:	2100      	movs	r1, #0
 80002d6:	4608      	mov	r0, r1
 80002d8:	e7f5      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d146      	bne.n	8000370 <__udivmoddi4+0x150>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xcc>
 80002e6:	4290      	cmp	r0, r2
 80002e8:	f0c0 80f0 	bcc.w	80004cc <__udivmoddi4+0x2ac>
 80002ec:	1a86      	subs	r6, r0, r2
 80002ee:	eb64 0303 	sbc.w	r3, r4, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d0e6      	beq.n	80002c6 <__udivmoddi4+0xa6>
 80002f8:	e9c5 6300 	strd	r6, r3, [r5]
 80002fc:	e7e3      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x204>
 8000304:	eba1 040c 	sub.w	r4, r1, ip
 8000308:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800030c:	fa1f f78c 	uxth.w	r7, ip
 8000310:	2101      	movs	r1, #1
 8000312:	fbb4 f6f8 	udiv	r6, r4, r8
 8000316:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031a:	fb08 4416 	mls	r4, r8, r6, r4
 800031e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000322:	fb07 f006 	mul.w	r0, r7, r6
 8000326:	4298      	cmp	r0, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x11c>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x11a>
 8000334:	4298      	cmp	r0, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 800033a:	4626      	mov	r6, r4
 800033c:	1a1c      	subs	r4, r3, r0
 800033e:	fa1f f38e 	uxth.w	r3, lr
 8000342:	fbb4 f0f8 	udiv	r0, r4, r8
 8000346:	fb08 4410 	mls	r4, r8, r0, r4
 800034a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034e:	fb00 f707 	mul.w	r7, r0, r7
 8000352:	429f      	cmp	r7, r3
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x148>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x146>
 8000360:	429f      	cmp	r7, r3
 8000362:	f200 80b0 	bhi.w	80004c6 <__udivmoddi4+0x2a6>
 8000366:	4620      	mov	r0, r4
 8000368:	1bdb      	subs	r3, r3, r7
 800036a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0x9c>
 8000370:	f1c1 0620 	rsb	r6, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 f706 	lsr.w	r7, r2, r6
 800037a:	431f      	orrs	r7, r3
 800037c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000380:	fa04 f301 	lsl.w	r3, r4, r1
 8000384:	ea43 030c 	orr.w	r3, r3, ip
 8000388:	40f4      	lsrs	r4, r6
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	0c38      	lsrs	r0, r7, #16
 8000390:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000394:	fbb4 fef0 	udiv	lr, r4, r0
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	fb00 441e 	mls	r4, r0, lr, r4
 80003a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a4:	fb0e f90c 	mul.w	r9, lr, ip
 80003a8:	45a1      	cmp	r9, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x1a6>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003b6:	f080 8084 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80003ba:	45a1      	cmp	r9, r4
 80003bc:	f240 8081 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80003c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	eba4 0409 	sub.w	r4, r4, r9
 80003ca:	fa1f f983 	uxth.w	r9, r3
 80003ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d2:	fb00 4413 	mls	r4, r0, r3, r4
 80003d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003da:	fb03 fc0c 	mul.w	ip, r3, ip
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x1d2>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003e8:	d267      	bcs.n	80004ba <__udivmoddi4+0x29a>
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d965      	bls.n	80004ba <__udivmoddi4+0x29a>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	443c      	add	r4, r7
 80003f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f6:	fba0 9302 	umull	r9, r3, r0, r2
 80003fa:	eba4 040c 	sub.w	r4, r4, ip
 80003fe:	429c      	cmp	r4, r3
 8000400:	46ce      	mov	lr, r9
 8000402:	469c      	mov	ip, r3
 8000404:	d351      	bcc.n	80004aa <__udivmoddi4+0x28a>
 8000406:	d04e      	beq.n	80004a6 <__udivmoddi4+0x286>
 8000408:	b155      	cbz	r5, 8000420 <__udivmoddi4+0x200>
 800040a:	ebb8 030e 	subs.w	r3, r8, lr
 800040e:	eb64 040c 	sbc.w	r4, r4, ip
 8000412:	fa04 f606 	lsl.w	r6, r4, r6
 8000416:	40cb      	lsrs	r3, r1
 8000418:	431e      	orrs	r6, r3
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c5 6400 	strd	r6, r4, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	e750      	b.n	80002c6 <__udivmoddi4+0xa6>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f103 	lsr.w	r1, r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa24 f303 	lsr.w	r3, r4, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	430c      	orrs	r4, r1
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000440:	fa1f f78c 	uxth.w	r7, ip
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3110 	mls	r1, r8, r0, r3
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000452:	fb00 f107 	mul.w	r1, r0, r7
 8000456:	4299      	cmp	r1, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x24c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000462:	d22c      	bcs.n	80004be <__udivmoddi4+0x29e>
 8000464:	4299      	cmp	r1, r3
 8000466:	d92a      	bls.n	80004be <__udivmoddi4+0x29e>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb3 f1f8 	udiv	r1, r3, r8
 8000474:	fb08 3311 	mls	r3, r8, r1, r3
 8000478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047c:	fb01 f307 	mul.w	r3, r1, r7
 8000480:	42a3      	cmp	r3, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x276>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800048c:	d213      	bcs.n	80004b6 <__udivmoddi4+0x296>
 800048e:	42a3      	cmp	r3, r4
 8000490:	d911      	bls.n	80004b6 <__udivmoddi4+0x296>
 8000492:	3902      	subs	r1, #2
 8000494:	4464      	add	r4, ip
 8000496:	1ae4      	subs	r4, r4, r3
 8000498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049c:	e739      	b.n	8000312 <__udivmoddi4+0xf2>
 800049e:	4604      	mov	r4, r0
 80004a0:	e6f0      	b.n	8000284 <__udivmoddi4+0x64>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e706      	b.n	80002b4 <__udivmoddi4+0x94>
 80004a6:	45c8      	cmp	r8, r9
 80004a8:	d2ae      	bcs.n	8000408 <__udivmoddi4+0x1e8>
 80004aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7a8      	b.n	8000408 <__udivmoddi4+0x1e8>
 80004b6:	4631      	mov	r1, r6
 80004b8:	e7ed      	b.n	8000496 <__udivmoddi4+0x276>
 80004ba:	4603      	mov	r3, r0
 80004bc:	e799      	b.n	80003f2 <__udivmoddi4+0x1d2>
 80004be:	4630      	mov	r0, r6
 80004c0:	e7d4      	b.n	800046c <__udivmoddi4+0x24c>
 80004c2:	46d6      	mov	lr, sl
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1a6>
 80004c6:	4463      	add	r3, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e74d      	b.n	8000368 <__udivmoddi4+0x148>
 80004cc:	4606      	mov	r6, r0
 80004ce:	4623      	mov	r3, r4
 80004d0:	4608      	mov	r0, r1
 80004d2:	e70f      	b.n	80002f4 <__udivmoddi4+0xd4>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	e730      	b.n	800033c <__udivmoddi4+0x11c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <TCAL9538RSVR_INIT>:
*/



uint8_t TCAL9538RSVR_INIT(TCAL9538RSVR *dev, I2C_HandleTypeDef *i2cHandle, uint8_t hardwareAddress, uint8_t direction_bitMask, uint8_t interrupt_bitMask)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b086      	sub	sp, #24
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	4611      	mov	r1, r2
 80004ec:	461a      	mov	r2, r3
 80004ee:	460b      	mov	r3, r1
 80004f0:	71fb      	strb	r3, [r7, #7]
 80004f2:	4613      	mov	r3, r2
 80004f4:	71bb      	strb	r3, [r7, #6]
	uint8_t errNum = 0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef status;
	dev->input = direction_bitMask;
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	79ba      	ldrb	r2, [r7, #6]
 80004fe:	719a      	strb	r2, [r3, #6]


    dev->i2cHandle = i2cHandle;
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	68ba      	ldr	r2, [r7, #8]
 8000504:	601a      	str	r2, [r3, #0]
    dev->portValues = 0;
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	2200      	movs	r2, #0
 800050a:	715a      	strb	r2, [r3, #5]
    // hardware address should be from 0-3
    // (A0 = GND, A1 = GND) == 0
    hardwareAddress &= 0b00000011;
 800050c:	79fb      	ldrb	r3, [r7, #7]
 800050e:	f003 0303 	and.w	r3, r3, #3
 8000512:	71fb      	strb	r3, [r7, #7]
    dev->deviceAddress = TCAL9538RSVR_ADDR | (hardwareAddress<<1);
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	005b      	lsls	r3, r3, #1
 8000518:	b25b      	sxtb	r3, r3
 800051a:	f063 031f 	orn	r3, r3, #31
 800051e:	b25b      	sxtb	r3, r3
 8000520:	b2da      	uxtb	r2, r3
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	711a      	strb	r2, [r3, #4]
    uint8_t hold_bitMask = direction_bitMask;
 8000526:	79bb      	ldrb	r3, [r7, #6]
 8000528:	757b      	strb	r3, [r7, #21]

    status = TCAL9538RSVR_SetDirection(dev, &hold_bitMask);
 800052a:	f107 0315 	add.w	r3, r7, #21
 800052e:	4619      	mov	r1, r3
 8000530:	68f8      	ldr	r0, [r7, #12]
 8000532:	f000 f83b 	bl	80005ac <TCAL9538RSVR_SetDirection>
 8000536:	4603      	mov	r3, r0
 8000538:	75bb      	strb	r3, [r7, #22]
    errNum += (status != HAL_OK);
 800053a:	7dbb      	ldrb	r3, [r7, #22]
 800053c:	2b00      	cmp	r3, #0
 800053e:	bf14      	ite	ne
 8000540:	2301      	movne	r3, #1
 8000542:	2300      	moveq	r3, #0
 8000544:	b2db      	uxtb	r3, r3
 8000546:	461a      	mov	r2, r3
 8000548:	7dfb      	ldrb	r3, [r7, #23]
 800054a:	4413      	add	r3, r2
 800054c:	75fb      	strb	r3, [r7, #23]

    status = TCAL9538RSVR_SetInterrupts(dev, interrupt_bitMask);
 800054e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000552:	4619      	mov	r1, r3
 8000554:	68f8      	ldr	r0, [r7, #12]
 8000556:	f000 f838 	bl	80005ca <TCAL9538RSVR_SetInterrupts>
 800055a:	4603      	mov	r3, r0
 800055c:	75bb      	strb	r3, [r7, #22]
    errNum += (status != HAL_OK);
 800055e:	7dbb      	ldrb	r3, [r7, #22]
 8000560:	2b00      	cmp	r3, #0
 8000562:	bf14      	ite	ne
 8000564:	2301      	movne	r3, #1
 8000566:	2300      	moveq	r3, #0
 8000568:	b2db      	uxtb	r3, r3
 800056a:	461a      	mov	r2, r3
 800056c:	7dfb      	ldrb	r3, [r7, #23]
 800056e:	4413      	add	r3, r2
 8000570:	75fb      	strb	r3, [r7, #23]

    if (direction_bitMask == 0xFF) {
 8000572:	79bb      	ldrb	r3, [r7, #6]
 8000574:	2bff      	cmp	r3, #255	@ 0xff
 8000576:	d114      	bne.n	80005a2 <TCAL9538RSVR_INIT+0xc2>
        uint8_t full = 0xFF;
 8000578:	23ff      	movs	r3, #255	@ 0xff
 800057a:	753b      	strb	r3, [r7, #20]
        status = TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_GPIO_INVERSION, &full);
 800057c:	f107 0314 	add.w	r3, r7, #20
 8000580:	461a      	mov	r2, r3
 8000582:	2102      	movs	r1, #2
 8000584:	68f8      	ldr	r0, [r7, #12]
 8000586:	f000 f894 	bl	80006b2 <TCAL9538RSVR_WriteRegister>
 800058a:	4603      	mov	r3, r0
 800058c:	75bb      	strb	r3, [r7, #22]
        errNum += (status != HAL_OK);
 800058e:	7dbb      	ldrb	r3, [r7, #22]
 8000590:	2b00      	cmp	r3, #0
 8000592:	bf14      	ite	ne
 8000594:	2301      	movne	r3, #1
 8000596:	2300      	moveq	r3, #0
 8000598:	b2db      	uxtb	r3, r3
 800059a:	461a      	mov	r2, r3
 800059c:	7dfb      	ldrb	r3, [r7, #23]
 800059e:	4413      	add	r3, r2
 80005a0:	75fb      	strb	r3, [r7, #23]
    }

    return (errNum);
 80005a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3718      	adds	r7, #24
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}

080005ac <TCAL9538RSVR_SetDirection>:
 * @param uint8_t : bitMask -> '1' is input
 * 					default is input
 * @retval HAL_StatusTypeDef : HAL_Status
 */
HAL_StatusTypeDef TCAL9538RSVR_SetDirection(TCAL9538RSVR* dev, uint8_t* bitMask)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_DIR_CONFIG, bitMask);
 80005b6:	683a      	ldr	r2, [r7, #0]
 80005b8:	2103      	movs	r1, #3
 80005ba:	6878      	ldr	r0, [r7, #4]
 80005bc:	f000 f879 	bl	80006b2 <TCAL9538RSVR_WriteRegister>
 80005c0:	4603      	mov	r3, r0
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}

080005ca <TCAL9538RSVR_SetInterrupts>:
 * @brief Sets interrupt register
 * @param uint8_t : bitMask -> '0' will enable interrupts for that pin
 * @retval HAL_StatusTypeDef : HAL_Status
 */
HAL_StatusTypeDef TCAL9538RSVR_SetInterrupts(TCAL9538RSVR* dev, uint8_t bitMask)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	b082      	sub	sp, #8
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
 80005d2:	460b      	mov	r3, r1
 80005d4:	70fb      	strb	r3, [r7, #3]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_INT_CONFIG, &bitMask);
 80005d6:	1cfb      	adds	r3, r7, #3
 80005d8:	461a      	mov	r2, r3
 80005da:	2145      	movs	r1, #69	@ 0x45
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f000 f868 	bl	80006b2 <TCAL9538RSVR_WriteRegister>
 80005e2:	4603      	mov	r3, r0
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <TCAL9538RSVR_HandleInterrupt>:
 * @brief Handles interrupt and returns pin# that triggered
 * 			stores triggered pin in dev->triggeredInterrupt
 * @retval uint8_t : errNum
 */
HAL_StatusTypeDef TCAL9538RSVR_HandleInterrupt(TCAL9538RSVR* dev)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
    uint8_t errNum = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status;
    uint8_t triggeredInterrupts = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	737b      	strb	r3, [r7, #13]


    // read interrupt status register, puts a bit mask of the pin that triggered the interrupt in intPinBitMask
    status = TCAL9538RSVR_ReadRegister(dev, TCAL9538RSVR_INT_STATUS, &triggeredInterrupts);
 80005fc:	f107 030d 	add.w	r3, r7, #13
 8000600:	461a      	mov	r2, r3
 8000602:	2146      	movs	r1, #70	@ 0x46
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f000 f837 	bl	8000678 <TCAL9538RSVR_ReadRegister>
 800060a:	4603      	mov	r3, r0
 800060c:	73bb      	strb	r3, [r7, #14]
    errNum += (status != HAL_OK);
 800060e:	7bbb      	ldrb	r3, [r7, #14]
 8000610:	2b00      	cmp	r3, #0
 8000612:	bf14      	ite	ne
 8000614:	2301      	movne	r3, #1
 8000616:	2300      	moveq	r3, #0
 8000618:	b2db      	uxtb	r3, r3
 800061a:	461a      	mov	r2, r3
 800061c:	7bfb      	ldrb	r3, [r7, #15]
 800061e:	4413      	add	r3, r2
 8000620:	73fb      	strb	r3, [r7, #15]

    // Read updated input values
    status = TCAL9538RSVR_ReadInput(dev, &dev->portValues);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	3305      	adds	r3, #5
 8000626:	4619      	mov	r1, r3
 8000628:	6878      	ldr	r0, [r7, #4]
 800062a:	f000 f807 	bl	800063c <TCAL9538RSVR_ReadInput>
 800062e:	4603      	mov	r3, r0
 8000630:	73bb      	strb	r3, [r7, #14]


    return (errNum);
 8000632:	7bfb      	ldrb	r3, [r7, #15]
}
 8000634:	4618      	mov	r0, r3
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <TCAL9538RSVR_ReadInput>:




HAL_StatusTypeDef TCAL9538RSVR_ReadInput(TCAL9538RSVR* dev, uint8_t *data)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_ReadRegister(dev, TCAL9538RSVR_GPIO_INPUT, data);
 8000646:	683a      	ldr	r2, [r7, #0]
 8000648:	2100      	movs	r1, #0
 800064a:	6878      	ldr	r0, [r7, #4]
 800064c:	f000 f814 	bl	8000678 <TCAL9538RSVR_ReadRegister>
 8000650:	4603      	mov	r3, r0
}
 8000652:	4618      	mov	r0, r3
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}

0800065a <TCAL9538RSVR_SetOutput>:
HAL_StatusTypeDef TCAL9538RSVR_SetOutput(TCAL9538RSVR* dev, uint8_t *data)
{
 800065a:	b580      	push	{r7, lr}
 800065c:	b082      	sub	sp, #8
 800065e:	af00      	add	r7, sp, #0
 8000660:	6078      	str	r0, [r7, #4]
 8000662:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_GPIO_OUTPUT, data);
 8000664:	683a      	ldr	r2, [r7, #0]
 8000666:	2101      	movs	r1, #1
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f000 f822 	bl	80006b2 <TCAL9538RSVR_WriteRegister>
 800066e:	4603      	mov	r3, r0
}
 8000670:	4618      	mov	r0, r3
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <TCAL9538RSVR_ReadRegister>:

//low level functions
HAL_StatusTypeDef TCAL9538RSVR_ReadRegister(TCAL9538RSVR *dev, uint8_t reg, uint8_t *data)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af04      	add	r7, sp, #16
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	460b      	mov	r3, r1
 8000682:	607a      	str	r2, [r7, #4]
 8000684:	72fb      	strb	r3, [r7, #11]
    return(HAL_I2C_Mem_Read(dev->i2cHandle, dev->deviceAddress, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY));
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	6818      	ldr	r0, [r3, #0]
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	791b      	ldrb	r3, [r3, #4]
 800068e:	4619      	mov	r1, r3
 8000690:	7afb      	ldrb	r3, [r7, #11]
 8000692:	b29a      	uxth	r2, r3
 8000694:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000698:	9302      	str	r3, [sp, #8]
 800069a:	2301      	movs	r3, #1
 800069c:	9301      	str	r3, [sp, #4]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	2301      	movs	r3, #1
 80006a4:	f003 fe4e 	bl	8004344 <HAL_I2C_Mem_Read>
 80006a8:	4603      	mov	r3, r0
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3710      	adds	r7, #16
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <TCAL9538RSVR_WriteRegister>:
HAL_StatusTypeDef TCAL9538RSVR_WriteRegister(TCAL9538RSVR *dev, uint8_t reg, uint8_t *data)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b088      	sub	sp, #32
 80006b6:	af04      	add	r7, sp, #16
 80006b8:	60f8      	str	r0, [r7, #12]
 80006ba:	460b      	mov	r3, r1
 80006bc:	607a      	str	r2, [r7, #4]
 80006be:	72fb      	strb	r3, [r7, #11]
    return(HAL_I2C_Mem_Write(dev->i2cHandle, dev->deviceAddress, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY));
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	6818      	ldr	r0, [r3, #0]
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	791b      	ldrb	r3, [r3, #4]
 80006c8:	4619      	mov	r1, r3
 80006ca:	7afb      	ldrb	r3, [r7, #11]
 80006cc:	b29a      	uxth	r2, r3
 80006ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006d2:	9302      	str	r3, [sp, #8]
 80006d4:	2301      	movs	r3, #1
 80006d6:	9301      	str	r3, [sp, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	9300      	str	r3, [sp, #0]
 80006dc:	2301      	movs	r3, #1
 80006de:	f003 fd1d 	bl	800411c <HAL_I2C_Mem_Write>
 80006e2:	4603      	mov	r3, r0
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	3710      	adds	r7, #16
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <Update_CAN_Message1>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Update_CAN_Message1(uint8_t flags[8], uint8_t* Input1, uint8_t* Input2)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b087      	sub	sp, #28
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]

	static uint8_t prev_input1 = 0;
	static uint8_t prev_input2 = 0;


	flags[3] = 0;
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	3303      	adds	r3, #3
 80006fc:	2200      	movs	r2, #0
 80006fe:	701a      	strb	r2, [r3, #0]
	flags[4] = 0;
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	3304      	adds	r3, #4
 8000704:	2200      	movs	r2, #0
 8000706:	701a      	strb	r2, [r3, #0]


	// Detect rising edges for each flag
	uint8_t risingEdges_flag1 = (~prev_input1) & *Input1;
 8000708:	4b54      	ldr	r3, [pc, #336]	@ (800085c <Update_CAN_Message1+0x170>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	b25b      	sxtb	r3, r3
 800070e:	43db      	mvns	r3, r3
 8000710:	b25a      	sxtb	r2, r3
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	b25b      	sxtb	r3, r3
 8000718:	4013      	ands	r3, r2
 800071a:	b25b      	sxtb	r3, r3
 800071c:	75fb      	strb	r3, [r7, #23]
	uint8_t risingEdges_flag2 = (~prev_input2) & *Input2;
 800071e:	4b50      	ldr	r3, [pc, #320]	@ (8000860 <Update_CAN_Message1+0x174>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	b25b      	sxtb	r3, r3
 8000724:	43db      	mvns	r3, r3
 8000726:	b25a      	sxtb	r2, r3
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	b25b      	sxtb	r3, r3
 800072e:	4013      	ands	r3, r2
 8000730:	b25b      	sxtb	r3, r3
 8000732:	75bb      	strb	r3, [r7, #22]


	flags[1] ^= CHECK_BIT(risingEdges_flag2, 4) << 0; // Main
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	3301      	adds	r3, #1
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	b25a      	sxtb	r2, r3
 800073c:	7dbb      	ldrb	r3, [r7, #22]
 800073e:	f003 0310 	and.w	r3, r3, #16
 8000742:	2b00      	cmp	r3, #0
 8000744:	bf14      	ite	ne
 8000746:	2301      	movne	r3, #1
 8000748:	2300      	moveq	r3, #0
 800074a:	b2db      	uxtb	r3, r3
 800074c:	b25b      	sxtb	r3, r3
 800074e:	4053      	eors	r3, r2
 8000750:	b25a      	sxtb	r2, r3
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	3301      	adds	r3, #1
 8000756:	b2d2      	uxtb	r2, r2
 8000758:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag2, 5) << 1; // Break
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	3301      	adds	r3, #1
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	b25a      	sxtb	r2, r3
 8000762:	7dbb      	ldrb	r3, [r7, #22]
 8000764:	111b      	asrs	r3, r3, #4
 8000766:	b25b      	sxtb	r3, r3
 8000768:	f003 0302 	and.w	r3, r3, #2
 800076c:	b25b      	sxtb	r3, r3
 800076e:	4053      	eors	r3, r2
 8000770:	b25a      	sxtb	r2, r3
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	3301      	adds	r3, #1
 8000776:	b2d2      	uxtb	r2, r2
 8000778:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag2, 0) << 2; // Mode
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	3301      	adds	r3, #1
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	b25a      	sxtb	r2, r3
 8000782:	7dbb      	ldrb	r3, [r7, #22]
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	b25b      	sxtb	r3, r3
 8000788:	f003 0304 	and.w	r3, r3, #4
 800078c:	b25b      	sxtb	r3, r3
 800078e:	4053      	eors	r3, r2
 8000790:	b25a      	sxtb	r2, r3
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	3301      	adds	r3, #1
 8000796:	b2d2      	uxtb	r2, r2
 8000798:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag1, 5) << 3; // MC
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	3301      	adds	r3, #1
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	b25a      	sxtb	r2, r3
 80007a2:	7dfb      	ldrb	r3, [r7, #23]
 80007a4:	109b      	asrs	r3, r3, #2
 80007a6:	b25b      	sxtb	r3, r3
 80007a8:	f003 0308 	and.w	r3, r3, #8
 80007ac:	b25b      	sxtb	r3, r3
 80007ae:	4053      	eors	r3, r2
 80007b0:	b25a      	sxtb	r2, r3
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	3301      	adds	r3, #1
 80007b6:	b2d2      	uxtb	r2, r2
 80007b8:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag1, 6) << 4; // Array
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	3301      	adds	r3, #1
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	b25a      	sxtb	r2, r3
 80007c2:	7dfb      	ldrb	r3, [r7, #23]
 80007c4:	109b      	asrs	r3, r3, #2
 80007c6:	b25b      	sxtb	r3, r3
 80007c8:	f003 0310 	and.w	r3, r3, #16
 80007cc:	b25b      	sxtb	r3, r3
 80007ce:	4053      	eors	r3, r2
 80007d0:	b25a      	sxtb	r2, r3
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	3301      	adds	r3, #1
 80007d6:	b2d2      	uxtb	r2, r2
 80007d8:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag1, 4) << 5; // Extra 1
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	3301      	adds	r3, #1
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	b25a      	sxtb	r2, r3
 80007e2:	7dfb      	ldrb	r3, [r7, #23]
 80007e4:	005b      	lsls	r3, r3, #1
 80007e6:	b25b      	sxtb	r3, r3
 80007e8:	f003 0320 	and.w	r3, r3, #32
 80007ec:	b25b      	sxtb	r3, r3
 80007ee:	4053      	eors	r3, r2
 80007f0:	b25a      	sxtb	r2, r3
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	3301      	adds	r3, #1
 80007f6:	b2d2      	uxtb	r2, r2
 80007f8:	701a      	strb	r2, [r3, #0]


	//flags[2] |= CHECK_BIT(outputPortState, 2) << 0; // Blinkers
	//flags[2] |= CHECK_BIT(outputPortState, 0) << 1; // Left Turn Signal
	//flags[2] |= CHECK_BIT(outputPortState, 1) << 2; // Right Turn Signal
	flags[2] ^= CHECK_BIT(risingEdges_flag1, 7) << 3; //?
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	3302      	adds	r3, #2
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	b25a      	sxtb	r2, r3
 8000802:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000806:	111b      	asrs	r3, r3, #4
 8000808:	b25b      	sxtb	r3, r3
 800080a:	f003 0308 	and.w	r3, r3, #8
 800080e:	b25b      	sxtb	r3, r3
 8000810:	4053      	eors	r3, r2
 8000812:	b25a      	sxtb	r2, r3
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	3302      	adds	r3, #2
 8000818:	b2d2      	uxtb	r2, r2
 800081a:	701a      	strb	r2, [r3, #0]

	cc_enable ^= CHECK_BIT(risingEdges_flag2, 1);
 800081c:	7dbb      	ldrb	r3, [r7, #22]
 800081e:	f003 0302 	and.w	r3, r3, #2
 8000822:	2b00      	cmp	r3, #0
 8000824:	bf14      	ite	ne
 8000826:	2301      	movne	r3, #1
 8000828:	2300      	moveq	r3, #0
 800082a:	b2db      	uxtb	r3, r3
 800082c:	b25a      	sxtb	r2, r3
 800082e:	4b0d      	ldr	r3, [pc, #52]	@ (8000864 <Update_CAN_Message1+0x178>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	b25b      	sxtb	r3, r3
 8000834:	4053      	eors	r3, r2
 8000836:	b25b      	sxtb	r3, r3
 8000838:	b2da      	uxtb	r2, r3
 800083a:	4b0a      	ldr	r3, [pc, #40]	@ (8000864 <Update_CAN_Message1+0x178>)
 800083c:	701a      	strb	r2, [r3, #0]

	prev_input1 = *Input1;
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	781a      	ldrb	r2, [r3, #0]
 8000842:	4b06      	ldr	r3, [pc, #24]	@ (800085c <Update_CAN_Message1+0x170>)
 8000844:	701a      	strb	r2, [r3, #0]
	prev_input2 = *Input2;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	781a      	ldrb	r2, [r3, #0]
 800084a:	4b05      	ldr	r3, [pc, #20]	@ (8000860 <Update_CAN_Message1+0x174>)
 800084c:	701a      	strb	r2, [r3, #0]

}
 800084e:	bf00      	nop
 8000850:	371c      	adds	r7, #28
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	2000029d 	.word	0x2000029d
 8000860:	2000029e 	.word	0x2000029e
 8000864:	20000285 	.word	0x20000285

08000868 <HAL_GPIO_EXTI_Callback>:
	 * */
}

// GPIO Expander Interrupt Handler
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	80fb      	strh	r3, [r7, #6]
	GPIO_Interrupt_Triggered = 1;
 8000872:	4b04      	ldr	r3, [pc, #16]	@ (8000884 <HAL_GPIO_EXTI_Callback+0x1c>)
 8000874:	2201      	movs	r2, #1
 8000876:	701a      	strb	r2, [r3, #0]
}
 8000878:	bf00      	nop
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	20000284 	.word	0x20000284

08000888 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800088e:	f001 f824 	bl	80018da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000892:	f000 f883 	bl	800099c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000896:	f000 faa9 	bl	8000dec <MX_GPIO_Init>
  MX_DMA_Init();
 800089a:	f000 fa89 	bl	8000db0 <MX_DMA_Init>
  MX_ADC1_Init();
 800089e:	f000 f8c3 	bl	8000a28 <MX_ADC1_Init>
  MX_I2C4_Init();
 80008a2:	f000 fa15 	bl	8000cd0 <MX_I2C4_Init>
  MX_CAN1_Init();
 80008a6:	f000 f9a7 	bl	8000bf8 <MX_CAN1_Init>
  MX_CAN2_Init();
 80008aa:	f000 f9db 	bl	8000c64 <MX_CAN2_Init>
  MX_UART4_Init();
 80008ae:	f000 fa4f 	bl	8000d50 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  if (TCAL9538RSVR_INIT(&U5, &hi2c4, 0b10, 0xFF, 0x00) != HAL_OK) { Error_Handler(); } // inputs
 80008b2:	2300      	movs	r3, #0
 80008b4:	9300      	str	r3, [sp, #0]
 80008b6:	23ff      	movs	r3, #255	@ 0xff
 80008b8:	2202      	movs	r2, #2
 80008ba:	4925      	ldr	r1, [pc, #148]	@ (8000950 <main+0xc8>)
 80008bc:	4825      	ldr	r0, [pc, #148]	@ (8000954 <main+0xcc>)
 80008be:	f7ff fe0f 	bl	80004e0 <TCAL9538RSVR_INIT>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <main+0x44>
 80008c8:	f000 fcde 	bl	8001288 <Error_Handler>
  //if (TCAL9538RSVR_INIT(&U16, &hi2c4, 0b01, 0b00111111, 0b11000000) != HAL_OK) { Error_Handler(); }
  if (TCAL9538RSVR_INIT(&U7, &hi2c4, 0x00, 0b00000000, 0b00000000) != HAL_OK) { Error_Handler(); } // output
 80008cc:	2300      	movs	r3, #0
 80008ce:	9300      	str	r3, [sp, #0]
 80008d0:	2300      	movs	r3, #0
 80008d2:	2200      	movs	r2, #0
 80008d4:	491e      	ldr	r1, [pc, #120]	@ (8000950 <main+0xc8>)
 80008d6:	4820      	ldr	r0, [pc, #128]	@ (8000958 <main+0xd0>)
 80008d8:	f7ff fe02 	bl	80004e0 <TCAL9538RSVR_INIT>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <main+0x5e>
 80008e2:	f000 fcd1 	bl	8001288 <Error_Handler>

  // set outputs to low to start
  TCAL9538RSVR_SetOutput(&U7, &outputPortState);
 80008e6:	491d      	ldr	r1, [pc, #116]	@ (800095c <main+0xd4>)
 80008e8:	481b      	ldr	r0, [pc, #108]	@ (8000958 <main+0xd0>)
 80008ea:	f7ff feb6 	bl	800065a <TCAL9538RSVR_SetOutput>

  HAL_CAN_Start(&hcan1);
 80008ee:	481c      	ldr	r0, [pc, #112]	@ (8000960 <main+0xd8>)
 80008f0:	f002 fcfb 	bl	80032ea <HAL_CAN_Start>

  //HAL_UART_Receive_IT(&huart4, &uart_rx, 1); // enables uart interrupt, it will call the interrupt when one byte is recieved
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80008f4:	f007 f8d4 	bl	8007aa0 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of CAN_Mutex */
  CAN_MutexHandle = osSemaphoreNew(1, 1, &CAN_Mutex_attributes);
 80008f8:	4a1a      	ldr	r2, [pc, #104]	@ (8000964 <main+0xdc>)
 80008fa:	2101      	movs	r1, #1
 80008fc:	2001      	movs	r0, #1
 80008fe:	f007 f9c6 	bl	8007c8e <osSemaphoreNew>
 8000902:	4603      	mov	r3, r0
 8000904:	4a18      	ldr	r2, [pc, #96]	@ (8000968 <main+0xe0>)
 8000906:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HeartBeat */
  HeartBeatHandle = osThreadNew(StartTask01, NULL, &HeartBeat_attributes);
 8000908:	4a18      	ldr	r2, [pc, #96]	@ (800096c <main+0xe4>)
 800090a:	2100      	movs	r1, #0
 800090c:	4818      	ldr	r0, [pc, #96]	@ (8000970 <main+0xe8>)
 800090e:	f007 f911 	bl	8007b34 <osThreadNew>
 8000912:	4603      	mov	r3, r0
 8000914:	4a17      	ldr	r2, [pc, #92]	@ (8000974 <main+0xec>)
 8000916:	6013      	str	r3, [r2, #0]

  /* creation of Critical_Inputs */
  Critical_InputsHandle = osThreadNew(StartTask02, NULL, &Critical_Inputs_attributes);
 8000918:	4a17      	ldr	r2, [pc, #92]	@ (8000978 <main+0xf0>)
 800091a:	2100      	movs	r1, #0
 800091c:	4817      	ldr	r0, [pc, #92]	@ (800097c <main+0xf4>)
 800091e:	f007 f909 	bl	8007b34 <osThreadNew>
 8000922:	4603      	mov	r3, r0
 8000924:	4a16      	ldr	r2, [pc, #88]	@ (8000980 <main+0xf8>)
 8000926:	6013      	str	r3, [r2, #0]

  /* creation of ReadIOExpander */
  ReadIOExpanderHandle = osThreadNew(StartTask03, NULL, &ReadIOExpander_attributes);
 8000928:	4a16      	ldr	r2, [pc, #88]	@ (8000984 <main+0xfc>)
 800092a:	2100      	movs	r1, #0
 800092c:	4816      	ldr	r0, [pc, #88]	@ (8000988 <main+0x100>)
 800092e:	f007 f901 	bl	8007b34 <osThreadNew>
 8000932:	4603      	mov	r3, r0
 8000934:	4a15      	ldr	r2, [pc, #84]	@ (800098c <main+0x104>)
 8000936:	6013      	str	r3, [r2, #0]

  /* creation of Outputs_Control */
  Outputs_ControlHandle = osThreadNew(StartTask04, NULL, &Outputs_Control_attributes);
 8000938:	4a15      	ldr	r2, [pc, #84]	@ (8000990 <main+0x108>)
 800093a:	2100      	movs	r1, #0
 800093c:	4815      	ldr	r0, [pc, #84]	@ (8000994 <main+0x10c>)
 800093e:	f007 f8f9 	bl	8007b34 <osThreadNew>
 8000942:	4603      	mov	r3, r0
 8000944:	4a14      	ldr	r2, [pc, #80]	@ (8000998 <main+0x110>)
 8000946:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000948:	f007 f8ce 	bl	8007ae8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800094c:	bf00      	nop
 800094e:	e7fd      	b.n	800094c <main+0xc4>
 8000950:	2000017c 	.word	0x2000017c
 8000954:	2000026c 	.word	0x2000026c
 8000958:	2000027c 	.word	0x2000027c
 800095c:	20000286 	.word	0x20000286
 8000960:	2000012c 	.word	0x2000012c
 8000964:	0800abd0 	.word	0x0800abd0
 8000968:	20000268 	.word	0x20000268
 800096c:	0800ab40 	.word	0x0800ab40
 8000970:	08000f09 	.word	0x08000f09
 8000974:	20000258 	.word	0x20000258
 8000978:	0800ab64 	.word	0x0800ab64
 800097c:	08000f49 	.word	0x08000f49
 8000980:	2000025c 	.word	0x2000025c
 8000984:	0800ab88 	.word	0x0800ab88
 8000988:	080010bd 	.word	0x080010bd
 800098c:	20000260 	.word	0x20000260
 8000990:	0800abac 	.word	0x0800abac
 8000994:	080011b5 	.word	0x080011b5
 8000998:	20000264 	.word	0x20000264

0800099c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b096      	sub	sp, #88	@ 0x58
 80009a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	2244      	movs	r2, #68	@ 0x44
 80009a8:	2100      	movs	r1, #0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f009 ffb0 	bl	800a910 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b0:	463b      	mov	r3, r7
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
 80009bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009be:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80009c2:	f004 f941 	bl	8004c48 <HAL_PWREx_ControlVoltageScaling>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009cc:	f000 fc5c 	bl	8001288 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80009d0:	2310      	movs	r3, #16
 80009d2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009d4:	2301      	movs	r3, #1
 80009d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80009dc:	2360      	movs	r3, #96	@ 0x60
 80009de:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009e0:	2300      	movs	r3, #0
 80009e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	4618      	mov	r0, r3
 80009ea:	f004 f983 	bl	8004cf4 <HAL_RCC_OscConfig>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80009f4:	f000 fc48 	bl	8001288 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f8:	230f      	movs	r3, #15
 80009fa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80009fc:	2300      	movs	r3, #0
 80009fe:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a00:	2300      	movs	r3, #0
 8000a02:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a04:	2300      	movs	r3, #0
 8000a06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a0c:	463b      	mov	r3, r7
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4618      	mov	r0, r3
 8000a12:	f004 fd89 	bl	8005528 <HAL_RCC_ClockConfig>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000a1c:	f000 fc34 	bl	8001288 <Error_Handler>
  }
}
 8000a20:	bf00      	nop
 8000a22:	3758      	adds	r7, #88	@ 0x58
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08a      	sub	sp, #40	@ 0x28
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
 8000a48:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a4a:	4b68      	ldr	r3, [pc, #416]	@ (8000bec <MX_ADC1_Init+0x1c4>)
 8000a4c:	4a68      	ldr	r2, [pc, #416]	@ (8000bf0 <MX_ADC1_Init+0x1c8>)
 8000a4e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a50:	4b66      	ldr	r3, [pc, #408]	@ (8000bec <MX_ADC1_Init+0x1c4>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a56:	4b65      	ldr	r3, [pc, #404]	@ (8000bec <MX_ADC1_Init+0x1c4>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a5c:	4b63      	ldr	r3, [pc, #396]	@ (8000bec <MX_ADC1_Init+0x1c4>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a62:	4b62      	ldr	r3, [pc, #392]	@ (8000bec <MX_ADC1_Init+0x1c4>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000a68:	4b60      	ldr	r3, [pc, #384]	@ (8000bec <MX_ADC1_Init+0x1c4>)
 8000a6a:	2208      	movs	r2, #8
 8000a6c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a6e:	4b5f      	ldr	r3, [pc, #380]	@ (8000bec <MX_ADC1_Init+0x1c4>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a74:	4b5d      	ldr	r3, [pc, #372]	@ (8000bec <MX_ADC1_Init+0x1c4>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 10;
 8000a7a:	4b5c      	ldr	r3, [pc, #368]	@ (8000bec <MX_ADC1_Init+0x1c4>)
 8000a7c:	220a      	movs	r2, #10
 8000a7e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a80:	4b5a      	ldr	r3, [pc, #360]	@ (8000bec <MX_ADC1_Init+0x1c4>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a88:	4b58      	ldr	r3, [pc, #352]	@ (8000bec <MX_ADC1_Init+0x1c4>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a8e:	4b57      	ldr	r3, [pc, #348]	@ (8000bec <MX_ADC1_Init+0x1c4>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a94:	4b55      	ldr	r3, [pc, #340]	@ (8000bec <MX_ADC1_Init+0x1c4>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a9c:	4b53      	ldr	r3, [pc, #332]	@ (8000bec <MX_ADC1_Init+0x1c4>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000aa2:	4b52      	ldr	r3, [pc, #328]	@ (8000bec <MX_ADC1_Init+0x1c4>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000aaa:	4850      	ldr	r0, [pc, #320]	@ (8000bec <MX_ADC1_Init+0x1c4>)
 8000aac:	f001 f984 	bl	8001db8 <HAL_ADC_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000ab6:	f000 fbe7 	bl	8001288 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4849      	ldr	r0, [pc, #292]	@ (8000bec <MX_ADC1_Init+0x1c4>)
 8000ac6:	f002 fa65 	bl	8002f94 <HAL_ADCEx_MultiModeConfigChannel>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000ad0:	f000 fbda 	bl	8001288 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ad4:	4b47      	ldr	r3, [pc, #284]	@ (8000bf4 <MX_ADC1_Init+0x1cc>)
 8000ad6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ad8:	2306      	movs	r3, #6
 8000ada:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000adc:	2300      	movs	r3, #0
 8000ade:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ae0:	237f      	movs	r3, #127	@ 0x7f
 8000ae2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ae4:	2304      	movs	r3, #4
 8000ae6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	4619      	mov	r1, r3
 8000af0:	483e      	ldr	r0, [pc, #248]	@ (8000bec <MX_ADC1_Init+0x1c4>)
 8000af2:	f001 fbe7 	bl	80022c4 <HAL_ADC_ConfigChannel>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000afc:	f000 fbc4 	bl	8001288 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b00:	230c      	movs	r3, #12
 8000b02:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	4619      	mov	r1, r3
 8000b08:	4838      	ldr	r0, [pc, #224]	@ (8000bec <MX_ADC1_Init+0x1c4>)
 8000b0a:	f001 fbdb 	bl	80022c4 <HAL_ADC_ConfigChannel>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8000b14:	f000 fbb8 	bl	8001288 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000b18:	2312      	movs	r3, #18
 8000b1a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4832      	ldr	r0, [pc, #200]	@ (8000bec <MX_ADC1_Init+0x1c4>)
 8000b22:	f001 fbcf 	bl	80022c4 <HAL_ADC_ConfigChannel>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8000b2c:	f000 fbac 	bl	8001288 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000b30:	2318      	movs	r3, #24
 8000b32:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	4619      	mov	r1, r3
 8000b38:	482c      	ldr	r0, [pc, #176]	@ (8000bec <MX_ADC1_Init+0x1c4>)
 8000b3a:	f001 fbc3 	bl	80022c4 <HAL_ADC_ConfigChannel>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 8000b44:	f000 fba0 	bl	8001288 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000b48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b4c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	4619      	mov	r1, r3
 8000b52:	4826      	ldr	r0, [pc, #152]	@ (8000bec <MX_ADC1_Init+0x1c4>)
 8000b54:	f001 fbb6 	bl	80022c4 <HAL_ADC_ConfigChannel>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_ADC1_Init+0x13a>
  {
    Error_Handler();
 8000b5e:	f000 fb93 	bl	8001288 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000b62:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000b66:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b68:	1d3b      	adds	r3, r7, #4
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	481f      	ldr	r0, [pc, #124]	@ (8000bec <MX_ADC1_Init+0x1c4>)
 8000b6e:	f001 fba9 	bl	80022c4 <HAL_ADC_ConfigChannel>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8000b78:	f000 fb86 	bl	8001288 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000b7c:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8000b80:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b82:	1d3b      	adds	r3, r7, #4
 8000b84:	4619      	mov	r1, r3
 8000b86:	4819      	ldr	r0, [pc, #100]	@ (8000bec <MX_ADC1_Init+0x1c4>)
 8000b88:	f001 fb9c 	bl	80022c4 <HAL_ADC_ConfigChannel>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 8000b92:	f000 fb79 	bl	8001288 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000b96:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8000b9a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4812      	ldr	r0, [pc, #72]	@ (8000bec <MX_ADC1_Init+0x1c4>)
 8000ba2:	f001 fb8f 	bl	80022c4 <HAL_ADC_ConfigChannel>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_ADC1_Init+0x188>
  {
    Error_Handler();
 8000bac:	f000 fb6c 	bl	8001288 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000bb0:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8000bb4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	4619      	mov	r1, r3
 8000bba:	480c      	ldr	r0, [pc, #48]	@ (8000bec <MX_ADC1_Init+0x1c4>)
 8000bbc:	f001 fb82 	bl	80022c4 <HAL_ADC_ConfigChannel>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_ADC1_Init+0x1a2>
  {
    Error_Handler();
 8000bc6:	f000 fb5f 	bl	8001288 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000bca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000bce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bd0:	1d3b      	adds	r3, r7, #4
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4805      	ldr	r0, [pc, #20]	@ (8000bec <MX_ADC1_Init+0x1c4>)
 8000bd6:	f001 fb75 	bl	80022c4 <HAL_ADC_ConfigChannel>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_ADC1_Init+0x1bc>
  {
    Error_Handler();
 8000be0:	f000 fb52 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000be4:	bf00      	nop
 8000be6:	3728      	adds	r7, #40	@ 0x28
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	2000007c 	.word	0x2000007c
 8000bf0:	50040000 	.word	0x50040000
 8000bf4:	04300002 	.word	0x04300002

08000bf8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000bfc:	4b17      	ldr	r3, [pc, #92]	@ (8000c5c <MX_CAN1_Init+0x64>)
 8000bfe:	4a18      	ldr	r2, [pc, #96]	@ (8000c60 <MX_CAN1_Init+0x68>)
 8000c00:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8000c02:	4b16      	ldr	r3, [pc, #88]	@ (8000c5c <MX_CAN1_Init+0x64>)
 8000c04:	2202      	movs	r2, #2
 8000c06:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000c08:	4b14      	ldr	r3, [pc, #80]	@ (8000c5c <MX_CAN1_Init+0x64>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c0e:	4b13      	ldr	r3, [pc, #76]	@ (8000c5c <MX_CAN1_Init+0x64>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000c14:	4b11      	ldr	r3, [pc, #68]	@ (8000c5c <MX_CAN1_Init+0x64>)
 8000c16:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000c1a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c5c <MX_CAN1_Init+0x64>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000c22:	4b0e      	ldr	r3, [pc, #56]	@ (8000c5c <MX_CAN1_Init+0x64>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000c28:	4b0c      	ldr	r3, [pc, #48]	@ (8000c5c <MX_CAN1_Init+0x64>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c5c <MX_CAN1_Init+0x64>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000c34:	4b09      	ldr	r3, [pc, #36]	@ (8000c5c <MX_CAN1_Init+0x64>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000c3a:	4b08      	ldr	r3, [pc, #32]	@ (8000c5c <MX_CAN1_Init+0x64>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000c40:	4b06      	ldr	r3, [pc, #24]	@ (8000c5c <MX_CAN1_Init+0x64>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000c46:	4805      	ldr	r0, [pc, #20]	@ (8000c5c <MX_CAN1_Init+0x64>)
 8000c48:	f002 fa54 	bl	80030f4 <HAL_CAN_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000c52:	f000 fb19 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	2000012c 	.word	0x2000012c
 8000c60:	40006400 	.word	0x40006400

08000c64 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000c68:	4b17      	ldr	r3, [pc, #92]	@ (8000cc8 <MX_CAN2_Init+0x64>)
 8000c6a:	4a18      	ldr	r2, [pc, #96]	@ (8000ccc <MX_CAN2_Init+0x68>)
 8000c6c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 2;
 8000c6e:	4b16      	ldr	r3, [pc, #88]	@ (8000cc8 <MX_CAN2_Init+0x64>)
 8000c70:	2202      	movs	r2, #2
 8000c72:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000c74:	4b14      	ldr	r3, [pc, #80]	@ (8000cc8 <MX_CAN2_Init+0x64>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c7a:	4b13      	ldr	r3, [pc, #76]	@ (8000cc8 <MX_CAN2_Init+0x64>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000c80:	4b11      	ldr	r3, [pc, #68]	@ (8000cc8 <MX_CAN2_Init+0x64>)
 8000c82:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000c86:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000c88:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc8 <MX_CAN2_Init+0x64>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc8 <MX_CAN2_Init+0x64>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000c94:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc8 <MX_CAN2_Init+0x64>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc8 <MX_CAN2_Init+0x64>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000ca0:	4b09      	ldr	r3, [pc, #36]	@ (8000cc8 <MX_CAN2_Init+0x64>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000ca6:	4b08      	ldr	r3, [pc, #32]	@ (8000cc8 <MX_CAN2_Init+0x64>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000cac:	4b06      	ldr	r3, [pc, #24]	@ (8000cc8 <MX_CAN2_Init+0x64>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000cb2:	4805      	ldr	r0, [pc, #20]	@ (8000cc8 <MX_CAN2_Init+0x64>)
 8000cb4:	f002 fa1e 	bl	80030f4 <HAL_CAN_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 8000cbe:	f000 fae3 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000154 	.word	0x20000154
 8000ccc:	40006800 	.word	0x40006800

08000cd0 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000cd4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d44 <MX_I2C4_Init+0x74>)
 8000cd6:	4a1c      	ldr	r2, [pc, #112]	@ (8000d48 <MX_I2C4_Init+0x78>)
 8000cd8:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00100D14;
 8000cda:	4b1a      	ldr	r3, [pc, #104]	@ (8000d44 <MX_I2C4_Init+0x74>)
 8000cdc:	4a1b      	ldr	r2, [pc, #108]	@ (8000d4c <MX_I2C4_Init+0x7c>)
 8000cde:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000ce0:	4b18      	ldr	r3, [pc, #96]	@ (8000d44 <MX_I2C4_Init+0x74>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ce6:	4b17      	ldr	r3, [pc, #92]	@ (8000d44 <MX_I2C4_Init+0x74>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cec:	4b15      	ldr	r3, [pc, #84]	@ (8000d44 <MX_I2C4_Init+0x74>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000cf2:	4b14      	ldr	r3, [pc, #80]	@ (8000d44 <MX_I2C4_Init+0x74>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cf8:	4b12      	ldr	r3, [pc, #72]	@ (8000d44 <MX_I2C4_Init+0x74>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cfe:	4b11      	ldr	r3, [pc, #68]	@ (8000d44 <MX_I2C4_Init+0x74>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d04:	4b0f      	ldr	r3, [pc, #60]	@ (8000d44 <MX_I2C4_Init+0x74>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000d0a:	480e      	ldr	r0, [pc, #56]	@ (8000d44 <MX_I2C4_Init+0x74>)
 8000d0c:	f003 f96a 	bl	8003fe4 <HAL_I2C_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000d16:	f000 fab7 	bl	8001288 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4809      	ldr	r0, [pc, #36]	@ (8000d44 <MX_I2C4_Init+0x74>)
 8000d1e:	f003 feed 	bl	8004afc <HAL_I2CEx_ConfigAnalogFilter>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000d28:	f000 faae 	bl	8001288 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4805      	ldr	r0, [pc, #20]	@ (8000d44 <MX_I2C4_Init+0x74>)
 8000d30:	f003 ff2f 	bl	8004b92 <HAL_I2CEx_ConfigDigitalFilter>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000d3a:	f000 faa5 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	2000017c 	.word	0x2000017c
 8000d48:	40008400 	.word	0x40008400
 8000d4c:	00100d14 	.word	0x00100d14

08000d50 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000d54:	4b14      	ldr	r3, [pc, #80]	@ (8000da8 <MX_UART4_Init+0x58>)
 8000d56:	4a15      	ldr	r2, [pc, #84]	@ (8000dac <MX_UART4_Init+0x5c>)
 8000d58:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000d5a:	4b13      	ldr	r3, [pc, #76]	@ (8000da8 <MX_UART4_Init+0x58>)
 8000d5c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000d60:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000d62:	4b11      	ldr	r3, [pc, #68]	@ (8000da8 <MX_UART4_Init+0x58>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000d68:	4b0f      	ldr	r3, [pc, #60]	@ (8000da8 <MX_UART4_Init+0x58>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000da8 <MX_UART4_Init+0x58>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000d74:	4b0c      	ldr	r3, [pc, #48]	@ (8000da8 <MX_UART4_Init+0x58>)
 8000d76:	220c      	movs	r2, #12
 8000d78:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000da8 <MX_UART4_Init+0x58>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d80:	4b09      	ldr	r3, [pc, #36]	@ (8000da8 <MX_UART4_Init+0x58>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d86:	4b08      	ldr	r3, [pc, #32]	@ (8000da8 <MX_UART4_Init+0x58>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d8c:	4b06      	ldr	r3, [pc, #24]	@ (8000da8 <MX_UART4_Init+0x58>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000d92:	4805      	ldr	r0, [pc, #20]	@ (8000da8 <MX_UART4_Init+0x58>)
 8000d94:	f005 fdae 	bl	80068f4 <HAL_UART_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000d9e:	f000 fa73 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	200001d0 	.word	0x200001d0
 8000dac:	40004c00 	.word	0x40004c00

08000db0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000db6:	4b0c      	ldr	r3, [pc, #48]	@ (8000de8 <MX_DMA_Init+0x38>)
 8000db8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000dba:	4a0b      	ldr	r2, [pc, #44]	@ (8000de8 <MX_DMA_Init+0x38>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6493      	str	r3, [r2, #72]	@ 0x48
 8000dc2:	4b09      	ldr	r3, [pc, #36]	@ (8000de8 <MX_DMA_Init+0x38>)
 8000dc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2105      	movs	r1, #5
 8000dd2:	200b      	movs	r0, #11
 8000dd4:	f002 fc8a 	bl	80036ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000dd8:	200b      	movs	r0, #11
 8000dda:	f002 fca3 	bl	8003724 <HAL_NVIC_EnableIRQ>

}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40021000 	.word	0x40021000

08000dec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b088      	sub	sp, #32
 8000df0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df2:	f107 030c 	add.w	r3, r7, #12
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]
 8000dfc:	609a      	str	r2, [r3, #8]
 8000dfe:	60da      	str	r2, [r3, #12]
 8000e00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e02:	4b3e      	ldr	r3, [pc, #248]	@ (8000efc <MX_GPIO_Init+0x110>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e06:	4a3d      	ldr	r2, [pc, #244]	@ (8000efc <MX_GPIO_Init+0x110>)
 8000e08:	f043 0304 	orr.w	r3, r3, #4
 8000e0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e0e:	4b3b      	ldr	r3, [pc, #236]	@ (8000efc <MX_GPIO_Init+0x110>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e12:	f003 0304 	and.w	r3, r3, #4
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	4b38      	ldr	r3, [pc, #224]	@ (8000efc <MX_GPIO_Init+0x110>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e1e:	4a37      	ldr	r2, [pc, #220]	@ (8000efc <MX_GPIO_Init+0x110>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e26:	4b35      	ldr	r3, [pc, #212]	@ (8000efc <MX_GPIO_Init+0x110>)
 8000e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e32:	4b32      	ldr	r3, [pc, #200]	@ (8000efc <MX_GPIO_Init+0x110>)
 8000e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e36:	4a31      	ldr	r2, [pc, #196]	@ (8000efc <MX_GPIO_Init+0x110>)
 8000e38:	f043 0302 	orr.w	r3, r3, #2
 8000e3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e3e:	4b2f      	ldr	r3, [pc, #188]	@ (8000efc <MX_GPIO_Init+0x110>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	603b      	str	r3, [r7, #0]
 8000e48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8000e50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e54:	f003 f87c 	bl	8003f50 <HAL_GPIO_WritePin>
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin
                          |OK_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Backlight_PWM_GPIO_Port, Backlight_PWM_Pin, GPIO_PIN_RESET);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2110      	movs	r1, #16
 8000e5c:	4828      	ldr	r0, [pc, #160]	@ (8000f00 <MX_GPIO_Init+0x114>)
 8000e5e:	f003 f877 	bl	8003f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, C_D_Pin|WR_Pin|RD_Pin|Parallel_CS_Pin
 8000e62:	2200      	movs	r2, #0
 8000e64:	f241 0117 	movw	r1, #4119	@ 0x1017
 8000e68:	4826      	ldr	r0, [pc, #152]	@ (8000f04 <MX_GPIO_Init+0x118>)
 8000e6a:	f003 f871 	bl	8003f50 <HAL_GPIO_WritePin>
                          |D_C_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Alert1_Pin */
  GPIO_InitStruct.Pin = Alert1_Pin;
 8000e6e:	2304      	movs	r3, #4
 8000e70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e72:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000e76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Alert1_GPIO_Port, &GPIO_InitStruct);
 8000e7c:	f107 030c 	add.w	r3, r7, #12
 8000e80:	4619      	mov	r1, r3
 8000e82:	481f      	ldr	r0, [pc, #124]	@ (8000f00 <MX_GPIO_Init+0x114>)
 8000e84:	f002 fed2 	bl	8003c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin D5_Pin D6_Pin D7_Pin
                           OK_LED_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8000e88:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8000e8c:	60fb      	str	r3, [r7, #12]
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin
                          |OK_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9a:	f107 030c 	add.w	r3, r7, #12
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ea4:	f002 fec2 	bl	8003c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : Backlight_PWM_Pin */
  GPIO_InitStruct.Pin = Backlight_PWM_Pin;
 8000ea8:	2310      	movs	r3, #16
 8000eaa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eac:	2301      	movs	r3, #1
 8000eae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Backlight_PWM_GPIO_Port, &GPIO_InitStruct);
 8000eb8:	f107 030c 	add.w	r3, r7, #12
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4810      	ldr	r0, [pc, #64]	@ (8000f00 <MX_GPIO_Init+0x114>)
 8000ec0:	f002 feb4 	bl	8003c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : C_D_Pin WR_Pin RD_Pin Parallel_CS_Pin
                           D_C_Pin */
  GPIO_InitStruct.Pin = C_D_Pin|WR_Pin|RD_Pin|Parallel_CS_Pin
 8000ec4:	f241 0317 	movw	r3, #4119	@ 0x1017
 8000ec8:	60fb      	str	r3, [r7, #12]
                          |D_C_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed6:	f107 030c 	add.w	r3, r7, #12
 8000eda:	4619      	mov	r1, r3
 8000edc:	4809      	ldr	r0, [pc, #36]	@ (8000f04 <MX_GPIO_Init+0x118>)
 8000ede:	f002 fea5 	bl	8003c2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2105      	movs	r1, #5
 8000ee6:	2008      	movs	r0, #8
 8000ee8:	f002 fc00 	bl	80036ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000eec:	2008      	movs	r0, #8
 8000eee:	f002 fc19 	bl	8003724 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ef2:	bf00      	nop
 8000ef4:	3720      	adds	r7, #32
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40021000 	.word	0x40021000
 8000f00:	48000800 	.word	0x48000800
 8000f04:	48000400 	.word	0x48000400

08000f08 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, OK_LED_Pin);
 8000f10:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f18:	f003 f832 	bl	8003f80 <HAL_GPIO_TogglePin>
    osDelay(500);
 8000f1c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f20:	f006 fe9a 	bl	8007c58 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, OK_LED_Pin);
 8000f24:	bf00      	nop
 8000f26:	e7f3      	b.n	8000f10 <StartTask01+0x8>

08000f28 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END 5 */
}

/* USER CODE BEGIN Header_StartTask02 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	dma_flag = 1;
 8000f30:	4b04      	ldr	r3, [pc, #16]	@ (8000f44 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	701a      	strb	r2, [r3, #0]
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	2000029c 	.word	0x2000029c

08000f48 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000f48:	b5b0      	push	{r4, r5, r7, lr}
 8000f4a:	b092      	sub	sp, #72	@ 0x48
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */

	uint16_t adc_var_avg = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

	int HAL_CAN_BUSY = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	643b      	str	r3, [r7, #64]	@ 0x40
	uint64_t messages_sent = 0;
 8000f5a:	f04f 0200 	mov.w	r2, #0
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	static uint8_t update_cc = 0;

	CAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData[8] = { 0 };
 8000f66:	2300      	movs	r3, #0
 8000f68:	613b      	str	r3, [r7, #16]
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
	uint32_t TxMailbox = { 0 };
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]

	TxHeader.IDE = CAN_ID_STD; // Standard ID (not extended)
 8000f72:	2300      	movs	r3, #0
 8000f74:	623b      	str	r3, [r7, #32]
	TxHeader.StdId = 0x0; // 11 bit Identifier
 8000f76:	2300      	movs	r3, #0
 8000f78:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR = CAN_RTR_DATA; // Std RTR Data frame
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	627b      	str	r3, [r7, #36]	@ 0x24
	TxHeader.DLC = 8; // 8 bytes being transmitted
 8000f7e:	2308      	movs	r3, #8
 8000f80:	62bb      	str	r3, [r7, #40]	@ 0x28
	TxData[0] = 1;
 8000f82:	2301      	movs	r3, #1
 8000f84:	743b      	strb	r3, [r7, #16]
	uint8_t adc_data[2];



  	  // Transmit over CAN
  	  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000f86:	f107 030c 	add.w	r3, r7, #12
 8000f8a:	f107 0210 	add.w	r2, r7, #16
 8000f8e:	f107 0118 	add.w	r1, r7, #24
 8000f92:	4843      	ldr	r0, [pc, #268]	@ (80010a0 <StartTask02+0x158>)
 8000f94:	f002 f9ed 	bl	8003372 <HAL_CAN_AddTxMessage>


  for (;;)
  {

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 8000f98:	220a      	movs	r2, #10
 8000f9a:	4942      	ldr	r1, [pc, #264]	@ (80010a4 <StartTask02+0x15c>)
 8000f9c:	4842      	ldr	r0, [pc, #264]	@ (80010a8 <StartTask02+0x160>)
 8000f9e:	f001 f85f 	bl	8002060 <HAL_ADC_Start_DMA>
	// Start ADC with DMA
	while (!(dma_flag));
 8000fa2:	bf00      	nop
 8000fa4:	4b41      	ldr	r3, [pc, #260]	@ (80010ac <StartTask02+0x164>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d0fa      	beq.n	8000fa4 <StartTask02+0x5c>

	// Stop ADC with DMA
	HAL_ADC_Stop_DMA(&hadc1);
 8000fae:	483e      	ldr	r0, [pc, #248]	@ (80010a8 <StartTask02+0x160>)
 8000fb0:	f001 f912 	bl	80021d8 <HAL_ADC_Stop_DMA>
	dma_flag = 0;
 8000fb4:	4b3d      	ldr	r3, [pc, #244]	@ (80010ac <StartTask02+0x164>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]
	adc_var_avg = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	// Copy ADC buffer and compute average
	for (int i = 0; i < ADC_BUF_LEN; i++)
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8000fc4:	e00b      	b.n	8000fde <StartTask02+0x96>
	{
		adc_var_avg += adc_buf[i];
 8000fc6:	4a37      	ldr	r2, [pc, #220]	@ (80010a4 <StartTask02+0x15c>)
 8000fc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fca:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000fce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000fd2:	4413      	add	r3, r2
 8000fd4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	for (int i = 0; i < ADC_BUF_LEN; i++)
 8000fd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fda:	3301      	adds	r3, #1
 8000fdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8000fde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fe0:	2b09      	cmp	r3, #9
 8000fe2:	ddf0      	ble.n	8000fc6 <StartTask02+0x7e>
	}
	adc_var_avg /= ADC_BUF_LEN;
 8000fe4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000fe8:	4a31      	ldr	r2, [pc, #196]	@ (80010b0 <StartTask02+0x168>)
 8000fea:	fba2 2303 	umull	r2, r3, r2, r3
 8000fee:	08db      	lsrs	r3, r3, #3
 8000ff0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46


	adc_data[0] = adc_var_avg & 0xFF;
 8000ff4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	723b      	strb	r3, [r7, #8]
	adc_data[1] = (adc_var_avg >> 8) & 0x0F;
 8000ffc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001000:	0a1b      	lsrs	r3, r3, #8
 8001002:	b29b      	uxth	r3, r3
 8001004:	b2db      	uxtb	r3, r3
 8001006:	f003 030f 	and.w	r3, r3, #15
 800100a:	b2db      	uxtb	r3, r3
 800100c:	727b      	strb	r3, [r7, #9]

	if (cc_enable)
 800100e:	4b29      	ldr	r3, [pc, #164]	@ (80010b4 <StartTask02+0x16c>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d00b      	beq.n	800102e <StartTask02+0xe6>
	{
		if (update_cc)
 8001016:	4b28      	ldr	r3, [pc, #160]	@ (80010b8 <StartTask02+0x170>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d00e      	beq.n	800103c <StartTask02+0xf4>
		{
			TxData[5] = adc_data[0];
 800101e:	7a3b      	ldrb	r3, [r7, #8]
 8001020:	757b      	strb	r3, [r7, #21]
			TxData[6] = adc_data[1];
 8001022:	7a7b      	ldrb	r3, [r7, #9]
 8001024:	75bb      	strb	r3, [r7, #22]
			update_cc = 0;
 8001026:	4b24      	ldr	r3, [pc, #144]	@ (80010b8 <StartTask02+0x170>)
 8001028:	2200      	movs	r2, #0
 800102a:	701a      	strb	r2, [r3, #0]
 800102c:	e006      	b.n	800103c <StartTask02+0xf4>
		}
	}
	else
	{
		TxData[5] = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	757b      	strb	r3, [r7, #21]
		TxData[6] = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	75bb      	strb	r3, [r7, #22]
		update_cc = 1;
 8001036:	4b20      	ldr	r3, [pc, #128]	@ (80010b8 <StartTask02+0x170>)
 8001038:	2201      	movs	r2, #1
 800103a:	701a      	strb	r2, [r3, #0]
	}


	TxData[0] = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	743b      	strb	r3, [r7, #16]
	TxData[1] = adc_data[0];
 8001040:	7a3b      	ldrb	r3, [r7, #8]
 8001042:	747b      	strb	r3, [r7, #17]
	TxData[2] = adc_data[1];
 8001044:	7a7b      	ldrb	r3, [r7, #9]
 8001046:	74bb      	strb	r3, [r7, #18]
	//Update_CAN_Message1(TxData, &U5.portValues, &U16.portValues);
    // Wait until the ADC DMA completes
	  // Send CAN messages
	  while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
 8001048:	bf00      	nop
 800104a:	4815      	ldr	r0, [pc, #84]	@ (80010a0 <StartTask02+0x158>)
 800104c:	f002 fa61 	bl	8003512 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d0f9      	beq.n	800104a <StartTask02+0x102>
	  HAL_StatusTypeDef status;
	  status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8001056:	f107 030c 	add.w	r3, r7, #12
 800105a:	f107 0210 	add.w	r2, r7, #16
 800105e:	f107 0118 	add.w	r1, r7, #24
 8001062:	480f      	ldr	r0, [pc, #60]	@ (80010a0 <StartTask02+0x158>)
 8001064:	f002 f985 	bl	8003372 <HAL_CAN_AddTxMessage>
 8001068:	4603      	mov	r3, r0
 800106a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	  messages_sent++;
 800106e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001072:	1c54      	adds	r4, r2, #1
 8001074:	f143 0500 	adc.w	r5, r3, #0
 8001078:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
	  if (status == HAL_ERROR)
 800107c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001080:	2b01      	cmp	r3, #1
 8001082:	d102      	bne.n	800108a <StartTask02+0x142>
	  {
		  Error_Handler();
 8001084:	f000 f900 	bl	8001288 <Error_Handler>
 8001088:	e006      	b.n	8001098 <StartTask02+0x150>
	  }
	  else if (status == HAL_BUSY)
 800108a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800108e:	2b02      	cmp	r3, #2
 8001090:	d102      	bne.n	8001098 <StartTask02+0x150>
	  {
		  HAL_CAN_BUSY++;
 8001092:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001094:	3301      	adds	r3, #1
 8001096:	643b      	str	r3, [r7, #64]	@ 0x40
	  }
    osDelay(1);
 8001098:	2001      	movs	r0, #1
 800109a:	f006 fddd 	bl	8007c58 <osDelay>
  {
 800109e:	e77b      	b.n	8000f98 <StartTask02+0x50>
 80010a0:	2000012c 	.word	0x2000012c
 80010a4:	20000288 	.word	0x20000288
 80010a8:	2000007c 	.word	0x2000007c
 80010ac:	2000029c 	.word	0x2000029c
 80010b0:	cccccccd 	.word	0xcccccccd
 80010b4:	20000285 	.word	0x20000285
 80010b8:	2000029f 	.word	0x2000029f

080010bc <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 80010bc:	b5b0      	push	{r4, r5, r7, lr}
 80010be:	b090      	sub	sp, #64	@ 0x40
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */

	int debounce_count = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int HAL_CAN_BUSY = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint64_t messages_sent = 0;
 80010cc:	f04f 0200 	mov.w	r2, #0
 80010d0:	f04f 0300 	mov.w	r3, #0
 80010d4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

	CAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData[8] = { 0 };
 80010d8:	2300      	movs	r3, #0
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	2300      	movs	r3, #0
 80010de:	613b      	str	r3, [r7, #16]
	uint32_t TxMailbox = { 0 };
 80010e0:	2300      	movs	r3, #0
 80010e2:	60bb      	str	r3, [r7, #8]

	TxHeader.IDE = CAN_ID_STD; // Standard ID (not extended)
 80010e4:	2300      	movs	r3, #0
 80010e6:	61fb      	str	r3, [r7, #28]
	TxHeader.StdId = 0x7FF; // 11 bit Identifier !!Change!!
 80010e8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80010ec:	617b      	str	r3, [r7, #20]
	TxHeader.RTR = CAN_RTR_DATA; // Std RTR Data frame
 80010ee:	2300      	movs	r3, #0
 80010f0:	623b      	str	r3, [r7, #32]
	TxHeader.DLC = 8; // 8 bytes being transmitted
 80010f2:	2308      	movs	r3, #8
 80010f4:	627b      	str	r3, [r7, #36]	@ 0x24
	TxData[0] = 1;
 80010f6:	2301      	movs	r3, #1
 80010f8:	733b      	strb	r3, [r7, #12]

	Update_CAN_Message1(TxData, &U5.portValues, &U16.portValues);
 80010fa:	f107 030c 	add.w	r3, r7, #12
 80010fe:	4a28      	ldr	r2, [pc, #160]	@ (80011a0 <StartTask03+0xe4>)
 8001100:	4928      	ldr	r1, [pc, #160]	@ (80011a4 <StartTask03+0xe8>)
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff faf2 	bl	80006ec <Update_CAN_Message1>

	/* Infinite loop */
	for(;;)
	{
	  // Read TCAL Input and update flags
	  if (GPIO_Interrupt_Triggered)
 8001108:	4b27      	ldr	r3, [pc, #156]	@ (80011a8 <StartTask03+0xec>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d018      	beq.n	8001142 <StartTask03+0x86>
	  {
		  if (debounce_count++ <= 2) {continue;}
 8001110:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001112:	1c5a      	adds	r2, r3, #1
 8001114:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001116:	2b02      	cmp	r3, #2
 8001118:	dd3f      	ble.n	800119a <StartTask03+0xde>
		  if (TCAL9538RSVR_HandleInterrupt(&U5) != HAL_OK){ Error_Handler(); }
 800111a:	4824      	ldr	r0, [pc, #144]	@ (80011ac <StartTask03+0xf0>)
 800111c:	f7ff fa66 	bl	80005ec <TCAL9538RSVR_HandleInterrupt>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <StartTask03+0x6e>
 8001126:	f000 f8af 	bl	8001288 <Error_Handler>
		  //if (TCAL9538RSVR_HandleInterrupt(&U16) != HAL_OK){ Error_Handler(); }


		  Update_CAN_Message1(TxData, &U5.portValues, &U16.portValues);
 800112a:	f107 030c 	add.w	r3, r7, #12
 800112e:	4a1c      	ldr	r2, [pc, #112]	@ (80011a0 <StartTask03+0xe4>)
 8001130:	491c      	ldr	r1, [pc, #112]	@ (80011a4 <StartTask03+0xe8>)
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff fada 	bl	80006ec <Update_CAN_Message1>
		  GPIO_Interrupt_Triggered = 0;
 8001138:	4b1b      	ldr	r3, [pc, #108]	@ (80011a8 <StartTask03+0xec>)
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]
		  debounce_count = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  }

	  // Send CAN messages
	  while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
 8001142:	bf00      	nop
 8001144:	481a      	ldr	r0, [pc, #104]	@ (80011b0 <StartTask03+0xf4>)
 8001146:	f002 f9e4 	bl	8003512 <HAL_CAN_GetTxMailboxesFreeLevel>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d0f9      	beq.n	8001144 <StartTask03+0x88>
	  HAL_StatusTypeDef status;
	  status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8001150:	f107 0308 	add.w	r3, r7, #8
 8001154:	f107 020c 	add.w	r2, r7, #12
 8001158:	f107 0114 	add.w	r1, r7, #20
 800115c:	4814      	ldr	r0, [pc, #80]	@ (80011b0 <StartTask03+0xf4>)
 800115e:	f002 f908 	bl	8003372 <HAL_CAN_AddTxMessage>
 8001162:	4603      	mov	r3, r0
 8001164:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	  messages_sent++;
 8001168:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800116c:	1c54      	adds	r4, r2, #1
 800116e:	f143 0500 	adc.w	r5, r3, #0
 8001172:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30
	  if (status == HAL_ERROR)
 8001176:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800117a:	2b01      	cmp	r3, #1
 800117c:	d102      	bne.n	8001184 <StartTask03+0xc8>
	  {
		  Error_Handler();
 800117e:	f000 f883 	bl	8001288 <Error_Handler>
 8001182:	e006      	b.n	8001192 <StartTask03+0xd6>
	  }
	  else if (status == HAL_BUSY)
 8001184:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001188:	2b02      	cmp	r3, #2
 800118a:	d102      	bne.n	8001192 <StartTask03+0xd6>
	  {
		  HAL_CAN_BUSY++;
 800118c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800118e:	3301      	adds	r3, #1
 8001190:	63bb      	str	r3, [r7, #56]	@ 0x38
	  }
	  osDelay(1);
 8001192:	2001      	movs	r0, #1
 8001194:	f006 fd60 	bl	8007c58 <osDelay>
 8001198:	e7b6      	b.n	8001108 <StartTask03+0x4c>
		  if (debounce_count++ <= 2) {continue;}
 800119a:	bf00      	nop
	{
 800119c:	e7b4      	b.n	8001108 <StartTask03+0x4c>
 800119e:	bf00      	nop
 80011a0:	20000279 	.word	0x20000279
 80011a4:	20000271 	.word	0x20000271
 80011a8:	20000284 	.word	0x20000284
 80011ac:	2000026c 	.word	0x2000026c
 80011b0:	2000012c 	.word	0x2000012c

080011b4 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */

  uint32_t lastBlinkTime = HAL_GetTick();
 80011bc:	f000 fbba 	bl	8001934 <HAL_GetTick>
 80011c0:	6178      	str	r0, [r7, #20]
  const uint32_t blinkInterval = 500;
 80011c2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80011c6:	613b      	str	r3, [r7, #16]

    // blinking logic needs to be done here now
    // use lightState variable to see what should be turned on and then 
    // update outputPortState

    uint32_t currentTick = HAL_GetTick();
 80011c8:	f000 fbb4 	bl	8001934 <HAL_GetTick>
 80011cc:	60f8      	str	r0, [r7, #12]

    if (currentTick - lastBlinkTime > blinkInterval)
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d230      	bcs.n	800123c <StartTask04+0x88>
    {
      lastBlinkTime = currentTick;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	617b      	str	r3, [r7, #20]
      if (lightState == LIGHTS_LEFT)
 80011de:	4b1e      	ldr	r3, [pc, #120]	@ (8001258 <StartTask04+0xa4>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d107      	bne.n	80011f6 <StartTask04+0x42>
        outputPortState ^= OUTPUT_FL_LIGHT_CTRL;
 80011e6:	4b1d      	ldr	r3, [pc, #116]	@ (800125c <StartTask04+0xa8>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	f083 0310 	eor.w	r3, r3, #16
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	4b1a      	ldr	r3, [pc, #104]	@ (800125c <StartTask04+0xa8>)
 80011f2:	701a      	strb	r2, [r3, #0]
 80011f4:	e022      	b.n	800123c <StartTask04+0x88>
      else if (lightState == LIGHTS_RIGHT)
 80011f6:	4b18      	ldr	r3, [pc, #96]	@ (8001258 <StartTask04+0xa4>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d107      	bne.n	800120e <StartTask04+0x5a>
        outputPortState ^= OUTPUT_FR_LIGHT_CTRL;
 80011fe:	4b17      	ldr	r3, [pc, #92]	@ (800125c <StartTask04+0xa8>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	f083 0320 	eor.w	r3, r3, #32
 8001206:	b2da      	uxtb	r2, r3
 8001208:	4b14      	ldr	r3, [pc, #80]	@ (800125c <StartTask04+0xa8>)
 800120a:	701a      	strb	r2, [r3, #0]
 800120c:	e016      	b.n	800123c <StartTask04+0x88>
      else if (lightState == LIGHTS_HAZARD)
 800120e:	4b12      	ldr	r3, [pc, #72]	@ (8001258 <StartTask04+0xa4>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b03      	cmp	r3, #3
 8001214:	d107      	bne.n	8001226 <StartTask04+0x72>
        outputPortState ^= (OUTPUT_FL_LIGHT_CTRL | OUTPUT_FR_LIGHT_CTRL);
 8001216:	4b11      	ldr	r3, [pc, #68]	@ (800125c <StartTask04+0xa8>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 800121e:	b2da      	uxtb	r2, r3
 8001220:	4b0e      	ldr	r3, [pc, #56]	@ (800125c <StartTask04+0xa8>)
 8001222:	701a      	strb	r2, [r3, #0]
 8001224:	e00a      	b.n	800123c <StartTask04+0x88>
      else if (lightState == LIGHTS_NONE)
 8001226:	4b0c      	ldr	r3, [pc, #48]	@ (8001258 <StartTask04+0xa4>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d106      	bne.n	800123c <StartTask04+0x88>
        outputPortState &= ~(OUTPUT_FL_LIGHT_CTRL | OUTPUT_FR_LIGHT_CTRL);
 800122e:	4b0b      	ldr	r3, [pc, #44]	@ (800125c <StartTask04+0xa8>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001236:	b2da      	uxtb	r2, r3
 8001238:	4b08      	ldr	r3, [pc, #32]	@ (800125c <StartTask04+0xa8>)
 800123a:	701a      	strb	r2, [r3, #0]
    }

    if(TCAL9538RSVR_SetOutput(&U7, &outputPortState) != HAL_OK)
 800123c:	4907      	ldr	r1, [pc, #28]	@ (800125c <StartTask04+0xa8>)
 800123e:	4808      	ldr	r0, [pc, #32]	@ (8001260 <StartTask04+0xac>)
 8001240:	f7ff fa0b 	bl	800065a <TCAL9538RSVR_SetOutput>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <StartTask04+0x9a>
    {
    	Error_Handler();
 800124a:	f000 f81d 	bl	8001288 <Error_Handler>
    }

    osDelay(1);
 800124e:	2001      	movs	r0, #1
 8001250:	f006 fd02 	bl	8007c58 <osDelay>
  {
 8001254:	e7b8      	b.n	80011c8 <StartTask04+0x14>
 8001256:	bf00      	nop
 8001258:	20000287 	.word	0x20000287
 800125c:	20000286 	.word	0x20000286
 8001260:	2000027c 	.word	0x2000027c

08001264 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a04      	ldr	r2, [pc, #16]	@ (8001284 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d101      	bne.n	800127a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001276:	f000 fb49 	bl	800190c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40000400 	.word	0x40000400

08001288 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800128c:	b672      	cpsid	i
}
 800128e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001290:	bf00      	nop
 8001292:	e7fd      	b.n	8001290 <Error_Handler+0x8>

08001294 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129a:	4b11      	ldr	r3, [pc, #68]	@ (80012e0 <HAL_MspInit+0x4c>)
 800129c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800129e:	4a10      	ldr	r2, [pc, #64]	@ (80012e0 <HAL_MspInit+0x4c>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80012a6:	4b0e      	ldr	r3, [pc, #56]	@ (80012e0 <HAL_MspInit+0x4c>)
 80012a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b2:	4b0b      	ldr	r3, [pc, #44]	@ (80012e0 <HAL_MspInit+0x4c>)
 80012b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012b6:	4a0a      	ldr	r2, [pc, #40]	@ (80012e0 <HAL_MspInit+0x4c>)
 80012b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80012be:	4b08      	ldr	r3, [pc, #32]	@ (80012e0 <HAL_MspInit+0x4c>)
 80012c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012c6:	603b      	str	r3, [r7, #0]
 80012c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012ca:	2200      	movs	r2, #0
 80012cc:	210f      	movs	r1, #15
 80012ce:	f06f 0001 	mvn.w	r0, #1
 80012d2:	f002 fa0b 	bl	80036ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40021000 	.word	0x40021000

080012e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b0ac      	sub	sp, #176	@ 0xb0
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012fc:	f107 0310 	add.w	r3, r7, #16
 8001300:	228c      	movs	r2, #140	@ 0x8c
 8001302:	2100      	movs	r1, #0
 8001304:	4618      	mov	r0, r3
 8001306:	f009 fb03 	bl	800a910 <memset>
  if(hadc->Instance==ADC1)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a35      	ldr	r2, [pc, #212]	@ (80013e4 <HAL_ADC_MspInit+0x100>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d163      	bne.n	80013dc <HAL_ADC_MspInit+0xf8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001314:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001318:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800131a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800131e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001322:	f107 0310 	add.w	r3, r7, #16
 8001326:	4618      	mov	r0, r3
 8001328:	f004 fb54 	bl	80059d4 <HAL_RCCEx_PeriphCLKConfig>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8001332:	f7ff ffa9 	bl	8001288 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001336:	4b2c      	ldr	r3, [pc, #176]	@ (80013e8 <HAL_ADC_MspInit+0x104>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133a:	4a2b      	ldr	r2, [pc, #172]	@ (80013e8 <HAL_ADC_MspInit+0x104>)
 800133c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001340:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001342:	4b29      	ldr	r3, [pc, #164]	@ (80013e8 <HAL_ADC_MspInit+0x104>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001346:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800134e:	4b26      	ldr	r3, [pc, #152]	@ (80013e8 <HAL_ADC_MspInit+0x104>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001352:	4a25      	ldr	r2, [pc, #148]	@ (80013e8 <HAL_ADC_MspInit+0x104>)
 8001354:	f043 0304 	orr.w	r3, r3, #4
 8001358:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800135a:	4b23      	ldr	r3, [pc, #140]	@ (80013e8 <HAL_ADC_MspInit+0x104>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135e:	f003 0304 	and.w	r3, r3, #4
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001366:	2301      	movs	r3, #1
 8001368:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800136c:	2303      	movs	r3, #3
 800136e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001378:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800137c:	4619      	mov	r1, r3
 800137e:	481b      	ldr	r0, [pc, #108]	@ (80013ec <HAL_ADC_MspInit+0x108>)
 8001380:	f002 fc54 	bl	8003c2c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001384:	4b1a      	ldr	r3, [pc, #104]	@ (80013f0 <HAL_ADC_MspInit+0x10c>)
 8001386:	4a1b      	ldr	r2, [pc, #108]	@ (80013f4 <HAL_ADC_MspInit+0x110>)
 8001388:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800138a:	4b19      	ldr	r3, [pc, #100]	@ (80013f0 <HAL_ADC_MspInit+0x10c>)
 800138c:	2200      	movs	r2, #0
 800138e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001390:	4b17      	ldr	r3, [pc, #92]	@ (80013f0 <HAL_ADC_MspInit+0x10c>)
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001396:	4b16      	ldr	r3, [pc, #88]	@ (80013f0 <HAL_ADC_MspInit+0x10c>)
 8001398:	2200      	movs	r2, #0
 800139a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800139c:	4b14      	ldr	r3, [pc, #80]	@ (80013f0 <HAL_ADC_MspInit+0x10c>)
 800139e:	2280      	movs	r2, #128	@ 0x80
 80013a0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013a2:	4b13      	ldr	r3, [pc, #76]	@ (80013f0 <HAL_ADC_MspInit+0x10c>)
 80013a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013a8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013aa:	4b11      	ldr	r3, [pc, #68]	@ (80013f0 <HAL_ADC_MspInit+0x10c>)
 80013ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013b0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80013b2:	4b0f      	ldr	r3, [pc, #60]	@ (80013f0 <HAL_ADC_MspInit+0x10c>)
 80013b4:	2220      	movs	r2, #32
 80013b6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80013b8:	4b0d      	ldr	r3, [pc, #52]	@ (80013f0 <HAL_ADC_MspInit+0x10c>)
 80013ba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013be:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80013c0:	480b      	ldr	r0, [pc, #44]	@ (80013f0 <HAL_ADC_MspInit+0x10c>)
 80013c2:	f002 f9bd 	bl	8003740 <HAL_DMA_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <HAL_ADC_MspInit+0xec>
    {
      Error_Handler();
 80013cc:	f7ff ff5c 	bl	8001288 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a07      	ldr	r2, [pc, #28]	@ (80013f0 <HAL_ADC_MspInit+0x10c>)
 80013d4:	651a      	str	r2, [r3, #80]	@ 0x50
 80013d6:	4a06      	ldr	r2, [pc, #24]	@ (80013f0 <HAL_ADC_MspInit+0x10c>)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80013dc:	bf00      	nop
 80013de:	37b0      	adds	r7, #176	@ 0xb0
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	50040000 	.word	0x50040000
 80013e8:	40021000 	.word	0x40021000
 80013ec:	48000800 	.word	0x48000800
 80013f0:	200000e4 	.word	0x200000e4
 80013f4:	40020008 	.word	0x40020008

080013f8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08c      	sub	sp, #48	@ 0x30
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	f107 031c 	add.w	r3, r7, #28
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a4e      	ldr	r2, [pc, #312]	@ (8001550 <HAL_CAN_MspInit+0x158>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d143      	bne.n	80014a2 <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800141a:	4b4e      	ldr	r3, [pc, #312]	@ (8001554 <HAL_CAN_MspInit+0x15c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	3301      	adds	r3, #1
 8001420:	4a4c      	ldr	r2, [pc, #304]	@ (8001554 <HAL_CAN_MspInit+0x15c>)
 8001422:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001424:	4b4b      	ldr	r3, [pc, #300]	@ (8001554 <HAL_CAN_MspInit+0x15c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d10b      	bne.n	8001444 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800142c:	4b4a      	ldr	r3, [pc, #296]	@ (8001558 <HAL_CAN_MspInit+0x160>)
 800142e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001430:	4a49      	ldr	r2, [pc, #292]	@ (8001558 <HAL_CAN_MspInit+0x160>)
 8001432:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001436:	6593      	str	r3, [r2, #88]	@ 0x58
 8001438:	4b47      	ldr	r3, [pc, #284]	@ (8001558 <HAL_CAN_MspInit+0x160>)
 800143a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800143c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001440:	61bb      	str	r3, [r7, #24]
 8001442:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001444:	4b44      	ldr	r3, [pc, #272]	@ (8001558 <HAL_CAN_MspInit+0x160>)
 8001446:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001448:	4a43      	ldr	r2, [pc, #268]	@ (8001558 <HAL_CAN_MspInit+0x160>)
 800144a:	f043 0302 	orr.w	r3, r3, #2
 800144e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001450:	4b41      	ldr	r3, [pc, #260]	@ (8001558 <HAL_CAN_MspInit+0x160>)
 8001452:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	617b      	str	r3, [r7, #20]
 800145a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800145c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001460:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001462:	2302      	movs	r3, #2
 8001464:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001466:	2301      	movs	r3, #1
 8001468:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146a:	2303      	movs	r3, #3
 800146c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800146e:	2309      	movs	r3, #9
 8001470:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001472:	f107 031c 	add.w	r3, r7, #28
 8001476:	4619      	mov	r1, r3
 8001478:	4838      	ldr	r0, [pc, #224]	@ (800155c <HAL_CAN_MspInit+0x164>)
 800147a:	f002 fbd7 	bl	8003c2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800147e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001484:	2302      	movs	r3, #2
 8001486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148c:	2303      	movs	r3, #3
 800148e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001490:	2309      	movs	r3, #9
 8001492:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001494:	f107 031c 	add.w	r3, r7, #28
 8001498:	4619      	mov	r1, r3
 800149a:	4830      	ldr	r0, [pc, #192]	@ (800155c <HAL_CAN_MspInit+0x164>)
 800149c:	f002 fbc6 	bl	8003c2c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80014a0:	e051      	b.n	8001546 <HAL_CAN_MspInit+0x14e>
  else if(hcan->Instance==CAN2)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a2e      	ldr	r2, [pc, #184]	@ (8001560 <HAL_CAN_MspInit+0x168>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d14c      	bne.n	8001546 <HAL_CAN_MspInit+0x14e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80014ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001558 <HAL_CAN_MspInit+0x160>)
 80014ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014b0:	4a29      	ldr	r2, [pc, #164]	@ (8001558 <HAL_CAN_MspInit+0x160>)
 80014b2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80014b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80014b8:	4b27      	ldr	r3, [pc, #156]	@ (8001558 <HAL_CAN_MspInit+0x160>)
 80014ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014bc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80014c0:	613b      	str	r3, [r7, #16]
 80014c2:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80014c4:	4b23      	ldr	r3, [pc, #140]	@ (8001554 <HAL_CAN_MspInit+0x15c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	3301      	adds	r3, #1
 80014ca:	4a22      	ldr	r2, [pc, #136]	@ (8001554 <HAL_CAN_MspInit+0x15c>)
 80014cc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80014ce:	4b21      	ldr	r3, [pc, #132]	@ (8001554 <HAL_CAN_MspInit+0x15c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d10b      	bne.n	80014ee <HAL_CAN_MspInit+0xf6>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80014d6:	4b20      	ldr	r3, [pc, #128]	@ (8001558 <HAL_CAN_MspInit+0x160>)
 80014d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014da:	4a1f      	ldr	r2, [pc, #124]	@ (8001558 <HAL_CAN_MspInit+0x160>)
 80014dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80014e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80014e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001558 <HAL_CAN_MspInit+0x160>)
 80014e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001558 <HAL_CAN_MspInit+0x160>)
 80014f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f2:	4a19      	ldr	r2, [pc, #100]	@ (8001558 <HAL_CAN_MspInit+0x160>)
 80014f4:	f043 0302 	orr.w	r3, r3, #2
 80014f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014fa:	4b17      	ldr	r3, [pc, #92]	@ (8001558 <HAL_CAN_MspInit+0x160>)
 80014fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001506:	2320      	movs	r3, #32
 8001508:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150a:	2302      	movs	r3, #2
 800150c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800150e:	2301      	movs	r3, #1
 8001510:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001512:	2303      	movs	r3, #3
 8001514:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_CAN2;
 8001516:	2303      	movs	r3, #3
 8001518:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151a:	f107 031c 	add.w	r3, r7, #28
 800151e:	4619      	mov	r1, r3
 8001520:	480e      	ldr	r0, [pc, #56]	@ (800155c <HAL_CAN_MspInit+0x164>)
 8001522:	f002 fb83 	bl	8003c2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001526:	2340      	movs	r3, #64	@ 0x40
 8001528:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152a:	2302      	movs	r3, #2
 800152c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001532:	2303      	movs	r3, #3
 8001534:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN2;
 8001536:	2308      	movs	r3, #8
 8001538:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153a:	f107 031c 	add.w	r3, r7, #28
 800153e:	4619      	mov	r1, r3
 8001540:	4806      	ldr	r0, [pc, #24]	@ (800155c <HAL_CAN_MspInit+0x164>)
 8001542:	f002 fb73 	bl	8003c2c <HAL_GPIO_Init>
}
 8001546:	bf00      	nop
 8001548:	3730      	adds	r7, #48	@ 0x30
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40006400 	.word	0x40006400
 8001554:	200002a0 	.word	0x200002a0
 8001558:	40021000 	.word	0x40021000
 800155c:	48000400 	.word	0x48000400
 8001560:	40006800 	.word	0x40006800

08001564 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b0ac      	sub	sp, #176	@ 0xb0
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800157c:	f107 0310 	add.w	r3, r7, #16
 8001580:	228c      	movs	r2, #140	@ 0x8c
 8001582:	2100      	movs	r1, #0
 8001584:	4618      	mov	r0, r3
 8001586:	f009 f9c3 	bl	800a910 <memset>
  if(hi2c->Instance==I2C4)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a22      	ldr	r2, [pc, #136]	@ (8001618 <HAL_I2C_MspInit+0xb4>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d13c      	bne.n	800160e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001594:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001598:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 800159a:	2300      	movs	r3, #0
 800159c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800159e:	f107 0310 	add.w	r3, r7, #16
 80015a2:	4618      	mov	r0, r3
 80015a4:	f004 fa16 	bl	80059d4 <HAL_RCCEx_PeriphCLKConfig>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80015ae:	f7ff fe6b 	bl	8001288 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b2:	4b1a      	ldr	r3, [pc, #104]	@ (800161c <HAL_I2C_MspInit+0xb8>)
 80015b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b6:	4a19      	ldr	r2, [pc, #100]	@ (800161c <HAL_I2C_MspInit+0xb8>)
 80015b8:	f043 0302 	orr.w	r3, r3, #2
 80015bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015be:	4b17      	ldr	r3, [pc, #92]	@ (800161c <HAL_I2C_MspInit+0xb8>)
 80015c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PB10     ------> I2C4_SCL
    PB11     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80015ca:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80015ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015d2:	2312      	movs	r3, #18
 80015d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015de:	2303      	movs	r3, #3
 80015e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 80015e4:	2303      	movs	r3, #3
 80015e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ea:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80015ee:	4619      	mov	r1, r3
 80015f0:	480b      	ldr	r0, [pc, #44]	@ (8001620 <HAL_I2C_MspInit+0xbc>)
 80015f2:	f002 fb1b 	bl	8003c2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80015f6:	4b09      	ldr	r3, [pc, #36]	@ (800161c <HAL_I2C_MspInit+0xb8>)
 80015f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015fa:	4a08      	ldr	r2, [pc, #32]	@ (800161c <HAL_I2C_MspInit+0xb8>)
 80015fc:	f043 0302 	orr.w	r3, r3, #2
 8001600:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001602:	4b06      	ldr	r3, [pc, #24]	@ (800161c <HAL_I2C_MspInit+0xb8>)
 8001604:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 800160e:	bf00      	nop
 8001610:	37b0      	adds	r7, #176	@ 0xb0
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40008400 	.word	0x40008400
 800161c:	40021000 	.word	0x40021000
 8001620:	48000400 	.word	0x48000400

08001624 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b0ac      	sub	sp, #176	@ 0xb0
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800163c:	f107 0310 	add.w	r3, r7, #16
 8001640:	228c      	movs	r2, #140	@ 0x8c
 8001642:	2100      	movs	r1, #0
 8001644:	4618      	mov	r0, r3
 8001646:	f009 f963 	bl	800a910 <memset>
  if(huart->Instance==UART4)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a25      	ldr	r2, [pc, #148]	@ (80016e4 <HAL_UART_MspInit+0xc0>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d143      	bne.n	80016dc <HAL_UART_MspInit+0xb8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001654:	2308      	movs	r3, #8
 8001656:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001658:	2300      	movs	r3, #0
 800165a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800165c:	f107 0310 	add.w	r3, r7, #16
 8001660:	4618      	mov	r0, r3
 8001662:	f004 f9b7 	bl	80059d4 <HAL_RCCEx_PeriphCLKConfig>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800166c:	f7ff fe0c 	bl	8001288 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001670:	4b1d      	ldr	r3, [pc, #116]	@ (80016e8 <HAL_UART_MspInit+0xc4>)
 8001672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001674:	4a1c      	ldr	r2, [pc, #112]	@ (80016e8 <HAL_UART_MspInit+0xc4>)
 8001676:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800167a:	6593      	str	r3, [r2, #88]	@ 0x58
 800167c:	4b1a      	ldr	r3, [pc, #104]	@ (80016e8 <HAL_UART_MspInit+0xc4>)
 800167e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001680:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001688:	4b17      	ldr	r3, [pc, #92]	@ (80016e8 <HAL_UART_MspInit+0xc4>)
 800168a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168c:	4a16      	ldr	r2, [pc, #88]	@ (80016e8 <HAL_UART_MspInit+0xc4>)
 800168e:	f043 0304 	orr.w	r3, r3, #4
 8001692:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001694:	4b14      	ldr	r3, [pc, #80]	@ (80016e8 <HAL_UART_MspInit+0xc4>)
 8001696:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001698:	f003 0304 	and.w	r3, r3, #4
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016a0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80016a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a8:	2302      	movs	r3, #2
 80016aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b4:	2303      	movs	r3, #3
 80016b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80016ba:	2308      	movs	r3, #8
 80016bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80016c4:	4619      	mov	r1, r3
 80016c6:	4809      	ldr	r0, [pc, #36]	@ (80016ec <HAL_UART_MspInit+0xc8>)
 80016c8:	f002 fab0 	bl	8003c2c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80016cc:	2200      	movs	r2, #0
 80016ce:	2105      	movs	r1, #5
 80016d0:	2034      	movs	r0, #52	@ 0x34
 80016d2:	f002 f80b 	bl	80036ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80016d6:	2034      	movs	r0, #52	@ 0x34
 80016d8:	f002 f824 	bl	8003724 <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 80016dc:	bf00      	nop
 80016de:	37b0      	adds	r7, #176	@ 0xb0
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40004c00 	.word	0x40004c00
 80016e8:	40021000 	.word	0x40021000
 80016ec:	48000800 	.word	0x48000800

080016f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08e      	sub	sp, #56	@ 0x38
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80016f8:	2300      	movs	r3, #0
 80016fa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80016fe:	4b34      	ldr	r3, [pc, #208]	@ (80017d0 <HAL_InitTick+0xe0>)
 8001700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001702:	4a33      	ldr	r2, [pc, #204]	@ (80017d0 <HAL_InitTick+0xe0>)
 8001704:	f043 0302 	orr.w	r3, r3, #2
 8001708:	6593      	str	r3, [r2, #88]	@ 0x58
 800170a:	4b31      	ldr	r3, [pc, #196]	@ (80017d0 <HAL_InitTick+0xe0>)
 800170c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001716:	f107 0210 	add.w	r2, r7, #16
 800171a:	f107 0314 	add.w	r3, r7, #20
 800171e:	4611      	mov	r1, r2
 8001720:	4618      	mov	r0, r3
 8001722:	f004 f8c5 	bl	80058b0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001726:	6a3b      	ldr	r3, [r7, #32]
 8001728:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800172a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800172c:	2b00      	cmp	r3, #0
 800172e:	d103      	bne.n	8001738 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001730:	f004 f892 	bl	8005858 <HAL_RCC_GetPCLK1Freq>
 8001734:	6378      	str	r0, [r7, #52]	@ 0x34
 8001736:	e004      	b.n	8001742 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001738:	f004 f88e 	bl	8005858 <HAL_RCC_GetPCLK1Freq>
 800173c:	4603      	mov	r3, r0
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001742:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001744:	4a23      	ldr	r2, [pc, #140]	@ (80017d4 <HAL_InitTick+0xe4>)
 8001746:	fba2 2303 	umull	r2, r3, r2, r3
 800174a:	0c9b      	lsrs	r3, r3, #18
 800174c:	3b01      	subs	r3, #1
 800174e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001750:	4b21      	ldr	r3, [pc, #132]	@ (80017d8 <HAL_InitTick+0xe8>)
 8001752:	4a22      	ldr	r2, [pc, #136]	@ (80017dc <HAL_InitTick+0xec>)
 8001754:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8001756:	4b20      	ldr	r3, [pc, #128]	@ (80017d8 <HAL_InitTick+0xe8>)
 8001758:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800175c:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 800175e:	4a1e      	ldr	r2, [pc, #120]	@ (80017d8 <HAL_InitTick+0xe8>)
 8001760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001762:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001764:	4b1c      	ldr	r3, [pc, #112]	@ (80017d8 <HAL_InitTick+0xe8>)
 8001766:	2200      	movs	r2, #0
 8001768:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800176a:	4b1b      	ldr	r3, [pc, #108]	@ (80017d8 <HAL_InitTick+0xe8>)
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001770:	4b19      	ldr	r3, [pc, #100]	@ (80017d8 <HAL_InitTick+0xe8>)
 8001772:	2200      	movs	r2, #0
 8001774:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8001776:	4818      	ldr	r0, [pc, #96]	@ (80017d8 <HAL_InitTick+0xe8>)
 8001778:	f004 fdf6 	bl	8006368 <HAL_TIM_Base_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001782:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001786:	2b00      	cmp	r3, #0
 8001788:	d11b      	bne.n	80017c2 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 800178a:	4813      	ldr	r0, [pc, #76]	@ (80017d8 <HAL_InitTick+0xe8>)
 800178c:	f004 fe4e 	bl	800642c <HAL_TIM_Base_Start_IT>
 8001790:	4603      	mov	r3, r0
 8001792:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001796:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800179a:	2b00      	cmp	r3, #0
 800179c:	d111      	bne.n	80017c2 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800179e:	201d      	movs	r0, #29
 80017a0:	f001 ffc0 	bl	8003724 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b0f      	cmp	r3, #15
 80017a8:	d808      	bhi.n	80017bc <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 80017aa:	2200      	movs	r2, #0
 80017ac:	6879      	ldr	r1, [r7, #4]
 80017ae:	201d      	movs	r0, #29
 80017b0:	f001 ff9c 	bl	80036ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017b4:	4a0a      	ldr	r2, [pc, #40]	@ (80017e0 <HAL_InitTick+0xf0>)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6013      	str	r3, [r2, #0]
 80017ba:	e002      	b.n	80017c2 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80017c2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3738      	adds	r7, #56	@ 0x38
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40021000 	.word	0x40021000
 80017d4:	431bde83 	.word	0x431bde83
 80017d8:	200002a4 	.word	0x200002a4
 80017dc:	40000400 	.word	0x40000400
 80017e0:	20000004 	.word	0x20000004

080017e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017e8:	bf00      	nop
 80017ea:	e7fd      	b.n	80017e8 <NMI_Handler+0x4>

080017ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017f0:	bf00      	nop
 80017f2:	e7fd      	b.n	80017f0 <HardFault_Handler+0x4>

080017f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f8:	bf00      	nop
 80017fa:	e7fd      	b.n	80017f8 <MemManage_Handler+0x4>

080017fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001800:	bf00      	nop
 8001802:	e7fd      	b.n	8001800 <BusFault_Handler+0x4>

08001804 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001808:	bf00      	nop
 800180a:	e7fd      	b.n	8001808 <UsageFault_Handler+0x4>

0800180c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Alert1_Pin);
 800181e:	2004      	movs	r0, #4
 8001820:	f002 fbc8 	bl	8003fb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}

08001828 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800182c:	4802      	ldr	r0, [pc, #8]	@ (8001838 <DMA1_Channel1_IRQHandler+0x10>)
 800182e:	f002 f91e 	bl	8003a6e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	200000e4 	.word	0x200000e4

0800183c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001840:	4802      	ldr	r0, [pc, #8]	@ (800184c <TIM3_IRQHandler+0x10>)
 8001842:	f004 fe63 	bl	800650c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	200002a4 	.word	0x200002a4

08001850 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001854:	4802      	ldr	r0, [pc, #8]	@ (8001860 <UART4_IRQHandler+0x10>)
 8001856:	f005 f89b 	bl	8006990 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	200001d0 	.word	0x200001d0

08001864 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001868:	4b06      	ldr	r3, [pc, #24]	@ (8001884 <SystemInit+0x20>)
 800186a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800186e:	4a05      	ldr	r2, [pc, #20]	@ (8001884 <SystemInit+0x20>)
 8001870:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001874:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001888:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800188c:	f7ff ffea 	bl	8001864 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001890:	480c      	ldr	r0, [pc, #48]	@ (80018c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001892:	490d      	ldr	r1, [pc, #52]	@ (80018c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001894:	4a0d      	ldr	r2, [pc, #52]	@ (80018cc <LoopForever+0xe>)
  movs r3, #0
 8001896:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001898:	e002      	b.n	80018a0 <LoopCopyDataInit>

0800189a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800189a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800189c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800189e:	3304      	adds	r3, #4

080018a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018a4:	d3f9      	bcc.n	800189a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018a6:	4a0a      	ldr	r2, [pc, #40]	@ (80018d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018a8:	4c0a      	ldr	r4, [pc, #40]	@ (80018d4 <LoopForever+0x16>)
  movs r3, #0
 80018aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018ac:	e001      	b.n	80018b2 <LoopFillZerobss>

080018ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018b0:	3204      	adds	r2, #4

080018b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018b4:	d3fb      	bcc.n	80018ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018b6:	f009 f889 	bl	800a9cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018ba:	f7fe ffe5 	bl	8000888 <main>

080018be <LoopForever>:

LoopForever:
    b LoopForever
 80018be:	e7fe      	b.n	80018be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018c0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80018c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018c8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80018cc:	0800ac38 	.word	0x0800ac38
  ldr r2, =_sbss
 80018d0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80018d4:	20001dd4 	.word	0x20001dd4

080018d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018d8:	e7fe      	b.n	80018d8 <ADC1_2_IRQHandler>

080018da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018e0:	2300      	movs	r3, #0
 80018e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018e4:	2003      	movs	r0, #3
 80018e6:	f001 fef6 	bl	80036d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018ea:	200f      	movs	r0, #15
 80018ec:	f7ff ff00 	bl	80016f0 <HAL_InitTick>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d002      	beq.n	80018fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	71fb      	strb	r3, [r7, #7]
 80018fa:	e001      	b.n	8001900 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018fc:	f7ff fcca 	bl	8001294 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001900:	79fb      	ldrb	r3, [r7, #7]
}
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
	...

0800190c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001910:	4b06      	ldr	r3, [pc, #24]	@ (800192c <HAL_IncTick+0x20>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	461a      	mov	r2, r3
 8001916:	4b06      	ldr	r3, [pc, #24]	@ (8001930 <HAL_IncTick+0x24>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4413      	add	r3, r2
 800191c:	4a04      	ldr	r2, [pc, #16]	@ (8001930 <HAL_IncTick+0x24>)
 800191e:	6013      	str	r3, [r2, #0]
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	20000008 	.word	0x20000008
 8001930:	200002f0 	.word	0x200002f0

08001934 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return uwTick;
 8001938:	4b03      	ldr	r3, [pc, #12]	@ (8001948 <HAL_GetTick+0x14>)
 800193a:	681b      	ldr	r3, [r3, #0]
}
 800193c:	4618      	mov	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	200002f0 	.word	0x200002f0

0800194c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	431a      	orrs	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	609a      	str	r2, [r3, #8]
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
 800197a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	431a      	orrs	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	609a      	str	r2, [r3, #8]
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b087      	sub	sp, #28
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
 80019c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	3360      	adds	r3, #96	@ 0x60
 80019c6:	461a      	mov	r2, r3
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4413      	add	r3, r2
 80019ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	4b08      	ldr	r3, [pc, #32]	@ (80019f8 <LL_ADC_SetOffset+0x44>)
 80019d6:	4013      	ands	r3, r2
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	430a      	orrs	r2, r1
 80019e2:	4313      	orrs	r3, r2
 80019e4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80019ec:	bf00      	nop
 80019ee:	371c      	adds	r7, #28
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	03fff000 	.word	0x03fff000

080019fc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	3360      	adds	r3, #96	@ 0x60
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	4413      	add	r3, r2
 8001a12:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b087      	sub	sp, #28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	3360      	adds	r3, #96	@ 0x60
 8001a38:	461a      	mov	r2, r3
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	4413      	add	r3, r2
 8001a40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a52:	bf00      	nop
 8001a54:	371c      	adds	r7, #28
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
 8001a66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	695b      	ldr	r3, [r3, #20]
 8001a6c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	431a      	orrs	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	615a      	str	r2, [r3, #20]
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d101      	bne.n	8001a9c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e000      	b.n	8001a9e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b087      	sub	sp, #28
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	60f8      	str	r0, [r7, #12]
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	3330      	adds	r3, #48	@ 0x30
 8001aba:	461a      	mov	r2, r3
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	0a1b      	lsrs	r3, r3, #8
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	f003 030c 	and.w	r3, r3, #12
 8001ac6:	4413      	add	r3, r2
 8001ac8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	f003 031f 	and.w	r3, r3, #31
 8001ad4:	211f      	movs	r1, #31
 8001ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	401a      	ands	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	0e9b      	lsrs	r3, r3, #26
 8001ae2:	f003 011f 	and.w	r1, r3, #31
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	f003 031f 	and.w	r3, r3, #31
 8001aec:	fa01 f303 	lsl.w	r3, r1, r3
 8001af0:	431a      	orrs	r2, r3
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001af6:	bf00      	nop
 8001af8:	371c      	adds	r7, #28
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b087      	sub	sp, #28
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	60f8      	str	r0, [r7, #12]
 8001b0a:	60b9      	str	r1, [r7, #8]
 8001b0c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	3314      	adds	r3, #20
 8001b12:	461a      	mov	r2, r3
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	0e5b      	lsrs	r3, r3, #25
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	f003 0304 	and.w	r3, r3, #4
 8001b1e:	4413      	add	r3, r2
 8001b20:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	0d1b      	lsrs	r3, r3, #20
 8001b2a:	f003 031f 	and.w	r3, r3, #31
 8001b2e:	2107      	movs	r1, #7
 8001b30:	fa01 f303 	lsl.w	r3, r1, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	401a      	ands	r2, r3
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	0d1b      	lsrs	r3, r3, #20
 8001b3c:	f003 031f 	and.w	r3, r3, #31
 8001b40:	6879      	ldr	r1, [r7, #4]
 8001b42:	fa01 f303 	lsl.w	r3, r1, r3
 8001b46:	431a      	orrs	r2, r3
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b4c:	bf00      	nop
 8001b4e:	371c      	adds	r7, #28
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b70:	43db      	mvns	r3, r3
 8001b72:	401a      	ands	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f003 0318 	and.w	r3, r3, #24
 8001b7a:	4908      	ldr	r1, [pc, #32]	@ (8001b9c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b7c:	40d9      	lsrs	r1, r3
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	400b      	ands	r3, r1
 8001b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b86:	431a      	orrs	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b8e:	bf00      	nop
 8001b90:	3714      	adds	r7, #20
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	0007ffff 	.word	0x0007ffff

08001ba0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f003 031f 	and.w	r3, r3, #31
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001bcc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	6093      	str	r3, [r2, #8]
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001bf0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001bf4:	d101      	bne.n	8001bfa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e000      	b.n	8001bfc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001c18:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c1c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001c44:	d101      	bne.n	8001c4a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c46:	2301      	movs	r3, #1
 8001c48:	e000      	b.n	8001c4c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c68:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c6c:	f043 0201 	orr.w	r2, r3, #1
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c90:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c94:	f043 0202 	orr.w	r2, r3, #2
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d101      	bne.n	8001cc0 <LL_ADC_IsEnabled+0x18>
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e000      	b.n	8001cc2 <LL_ADC_IsEnabled+0x1a>
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d101      	bne.n	8001ce6 <LL_ADC_IsDisableOngoing+0x18>
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <LL_ADC_IsDisableOngoing+0x1a>
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d04:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d08:	f043 0204 	orr.w	r2, r3, #4
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d2c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d30:	f043 0210 	orr.w	r2, r3, #16
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f003 0304 	and.w	r3, r3, #4
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	d101      	bne.n	8001d5c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e000      	b.n	8001d5e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d7a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d7e:	f043 0220 	orr.w	r2, r3, #32
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 0308 	and.w	r3, r3, #8
 8001da2:	2b08      	cmp	r3, #8
 8001da4:	d101      	bne.n	8001daa <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001da6:	2301      	movs	r3, #1
 8001da8:	e000      	b.n	8001dac <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001db8:	b590      	push	{r4, r7, lr}
 8001dba:	b089      	sub	sp, #36	@ 0x24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e133      	b.n	800203a <HAL_ADC_Init+0x282>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d109      	bne.n	8001df4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f7ff fa7f 	bl	80012e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff fef1 	bl	8001be0 <LL_ADC_IsDeepPowerDownEnabled>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d004      	beq.n	8001e0e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff fed7 	bl	8001bbc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff ff0c 	bl	8001c30 <LL_ADC_IsInternalRegulatorEnabled>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d115      	bne.n	8001e4a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff fef0 	bl	8001c08 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e28:	4b86      	ldr	r3, [pc, #536]	@ (8002044 <HAL_ADC_Init+0x28c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	099b      	lsrs	r3, r3, #6
 8001e2e:	4a86      	ldr	r2, [pc, #536]	@ (8002048 <HAL_ADC_Init+0x290>)
 8001e30:	fba2 2303 	umull	r2, r3, r2, r3
 8001e34:	099b      	lsrs	r3, r3, #6
 8001e36:	3301      	adds	r3, #1
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e3c:	e002      	b.n	8001e44 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	3b01      	subs	r3, #1
 8001e42:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1f9      	bne.n	8001e3e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff feee 	bl	8001c30 <LL_ADC_IsInternalRegulatorEnabled>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10d      	bne.n	8001e76 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e5e:	f043 0210 	orr.w	r2, r3, #16
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e6a:	f043 0201 	orr.w	r2, r3, #1
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff ff62 	bl	8001d44 <LL_ADC_REG_IsConversionOngoing>
 8001e80:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e86:	f003 0310 	and.w	r3, r3, #16
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f040 80cc 	bne.w	8002028 <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f040 80c8 	bne.w	8002028 <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e9c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001ea0:	f043 0202 	orr.w	r2, r3, #2
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff fefb 	bl	8001ca8 <LL_ADC_IsEnabled>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d115      	bne.n	8001ee4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001eb8:	4864      	ldr	r0, [pc, #400]	@ (800204c <HAL_ADC_Init+0x294>)
 8001eba:	f7ff fef5 	bl	8001ca8 <LL_ADC_IsEnabled>
 8001ebe:	4604      	mov	r4, r0
 8001ec0:	4863      	ldr	r0, [pc, #396]	@ (8002050 <HAL_ADC_Init+0x298>)
 8001ec2:	f7ff fef1 	bl	8001ca8 <LL_ADC_IsEnabled>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	431c      	orrs	r4, r3
 8001eca:	4862      	ldr	r0, [pc, #392]	@ (8002054 <HAL_ADC_Init+0x29c>)
 8001ecc:	f7ff feec 	bl	8001ca8 <LL_ADC_IsEnabled>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	4323      	orrs	r3, r4
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d105      	bne.n	8001ee4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	4619      	mov	r1, r3
 8001ede:	485e      	ldr	r0, [pc, #376]	@ (8002058 <HAL_ADC_Init+0x2a0>)
 8001ee0:	f7ff fd34 	bl	800194c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	7e5b      	ldrb	r3, [r3, #25]
 8001ee8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001eee:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001ef4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001efa:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f02:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f04:	4313      	orrs	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d106      	bne.n	8001f20 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f16:	3b01      	subs	r3, #1
 8001f18:	045b      	lsls	r3, r3, #17
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d009      	beq.n	8001f3c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f2c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f34:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68da      	ldr	r2, [r3, #12]
 8001f42:	4b46      	ldr	r3, [pc, #280]	@ (800205c <HAL_ADC_Init+0x2a4>)
 8001f44:	4013      	ands	r3, r2
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	6812      	ldr	r2, [r2, #0]
 8001f4a:	69b9      	ldr	r1, [r7, #24]
 8001f4c:	430b      	orrs	r3, r1
 8001f4e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff ff1c 	bl	8001d92 <LL_ADC_INJ_IsConversionOngoing>
 8001f5a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d140      	bne.n	8001fe4 <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d13d      	bne.n	8001fe4 <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	7e1b      	ldrb	r3, [r3, #24]
 8001f70:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f72:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f7a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f8a:	f023 0306 	bic.w	r3, r3, #6
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	6812      	ldr	r2, [r2, #0]
 8001f92:	69b9      	ldr	r1, [r7, #24]
 8001f94:	430b      	orrs	r3, r1
 8001f96:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d118      	bne.n	8001fd4 <HAL_ADC_Init+0x21c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001fac:	f023 0304 	bic.w	r3, r3, #4
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001fb8:	4311      	orrs	r1, r2
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001fbe:	4311      	orrs	r1, r2
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f042 0201 	orr.w	r2, r2, #1
 8001fd0:	611a      	str	r2, [r3, #16]
 8001fd2:	e007      	b.n	8001fe4 <HAL_ADC_Init+0x22c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	691a      	ldr	r2, [r3, #16]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 0201 	bic.w	r2, r2, #1
 8001fe2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d10c      	bne.n	8002006 <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff2:	f023 010f 	bic.w	r1, r3, #15
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	1e5a      	subs	r2, r3, #1
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	430a      	orrs	r2, r1
 8002002:	631a      	str	r2, [r3, #48]	@ 0x30
 8002004:	e007      	b.n	8002016 <HAL_ADC_Init+0x25e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 020f 	bic.w	r2, r2, #15
 8002014:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800201a:	f023 0303 	bic.w	r3, r3, #3
 800201e:	f043 0201 	orr.w	r2, r3, #1
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	659a      	str	r2, [r3, #88]	@ 0x58
 8002026:	e007      	b.n	8002038 <HAL_ADC_Init+0x280>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800202c:	f043 0210 	orr.w	r2, r3, #16
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002038:	7ffb      	ldrb	r3, [r7, #31]
}
 800203a:	4618      	mov	r0, r3
 800203c:	3724      	adds	r7, #36	@ 0x24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd90      	pop	{r4, r7, pc}
 8002042:	bf00      	nop
 8002044:	20000000 	.word	0x20000000
 8002048:	053e2d63 	.word	0x053e2d63
 800204c:	50040000 	.word	0x50040000
 8002050:	50040100 	.word	0x50040100
 8002054:	50040200 	.word	0x50040200
 8002058:	50040300 	.word	0x50040300
 800205c:	fff0c007 	.word	0xfff0c007

08002060 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800206c:	4853      	ldr	r0, [pc, #332]	@ (80021bc <HAL_ADC_Start_DMA+0x15c>)
 800206e:	f7ff fd97 	bl	8001ba0 <LL_ADC_GetMultimode>
 8002072:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff fe63 	bl	8001d44 <LL_ADC_REG_IsConversionOngoing>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	f040 8093 	bne.w	80021ac <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800208c:	2b01      	cmp	r3, #1
 800208e:	d101      	bne.n	8002094 <HAL_ADC_Start_DMA+0x34>
 8002090:	2302      	movs	r3, #2
 8002092:	e08e      	b.n	80021b2 <HAL_ADC_Start_DMA+0x152>
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a47      	ldr	r2, [pc, #284]	@ (80021c0 <HAL_ADC_Start_DMA+0x160>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d008      	beq.n	80020b8 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d005      	beq.n	80020b8 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	2b05      	cmp	r3, #5
 80020b0:	d002      	beq.n	80020b8 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	2b09      	cmp	r3, #9
 80020b6:	d172      	bne.n	800219e <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f000 fdcb 	bl	8002c54 <ADC_Enable>
 80020be:	4603      	mov	r3, r0
 80020c0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80020c2:	7dfb      	ldrb	r3, [r7, #23]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d165      	bne.n	8002194 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020cc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80020d0:	f023 0301 	bic.w	r3, r3, #1
 80020d4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a38      	ldr	r2, [pc, #224]	@ (80021c4 <HAL_ADC_Start_DMA+0x164>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d002      	beq.n	80020ec <HAL_ADC_Start_DMA+0x8c>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	e000      	b.n	80020ee <HAL_ADC_Start_DMA+0x8e>
 80020ec:	4b36      	ldr	r3, [pc, #216]	@ (80021c8 <HAL_ADC_Start_DMA+0x168>)
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	6812      	ldr	r2, [r2, #0]
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d002      	beq.n	80020fc <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d105      	bne.n	8002108 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002100:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800210c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d006      	beq.n	8002122 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002118:	f023 0206 	bic.w	r2, r3, #6
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002120:	e002      	b.n	8002128 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800212c:	4a27      	ldr	r2, [pc, #156]	@ (80021cc <HAL_ADC_Start_DMA+0x16c>)
 800212e:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002134:	4a26      	ldr	r2, [pc, #152]	@ (80021d0 <HAL_ADC_Start_DMA+0x170>)
 8002136:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800213c:	4a25      	ldr	r2, [pc, #148]	@ (80021d4 <HAL_ADC_Start_DMA+0x174>)
 800213e:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	221c      	movs	r2, #28
 8002146:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	685a      	ldr	r2, [r3, #4]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f042 0210 	orr.w	r2, r2, #16
 800215e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68da      	ldr	r2, [r3, #12]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f042 0201 	orr.w	r2, r2, #1
 800216e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	3340      	adds	r3, #64	@ 0x40
 800217a:	4619      	mov	r1, r3
 800217c:	68ba      	ldr	r2, [r7, #8]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f001 fb96 	bl	80038b0 <HAL_DMA_Start_IT>
 8002184:	4603      	mov	r3, r0
 8002186:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff fdb1 	bl	8001cf4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002192:	e00d      	b.n	80021b0 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      if (tmp_hal_status == HAL_OK)
 800219c:	e008      	b.n	80021b0 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80021aa:	e001      	b.n	80021b0 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80021ac:	2302      	movs	r3, #2
 80021ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80021b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	50040300 	.word	0x50040300
 80021c0:	50040200 	.word	0x50040200
 80021c4:	50040100 	.word	0x50040100
 80021c8:	50040000 	.word	0x50040000
 80021cc:	08002e1f 	.word	0x08002e1f
 80021d0:	08002ef7 	.word	0x08002ef7
 80021d4:	08002f13 	.word	0x08002f13

080021d8 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d101      	bne.n	80021ee <HAL_ADC_Stop_DMA+0x16>
 80021ea:	2302      	movs	r3, #2
 80021ec:	e051      	b.n	8002292 <HAL_ADC_Stop_DMA+0xba>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80021f6:	2103      	movs	r1, #3
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 fc6f 	bl	8002adc <ADC_ConversionStop>
 80021fe:	4603      	mov	r3, r0
 8002200:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002202:	7bfb      	ldrb	r3, [r7, #15]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d13f      	bne.n	8002288 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68da      	ldr	r2, [r3, #12]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f022 0201 	bic.w	r2, r2, #1
 8002216:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800221c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d10f      	bne.n	8002246 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800222a:	4618      	mov	r0, r3
 800222c:	f001 fba0 	bl	8003970 <HAL_DMA_Abort>
 8002230:	4603      	mov	r3, r0
 8002232:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002234:	7bfb      	ldrb	r3, [r7, #15]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d005      	beq.n	8002246 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800223e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	659a      	str	r2, [r3, #88]	@ 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	685a      	ldr	r2, [r3, #4]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f022 0210 	bic.w	r2, r2, #16
 8002254:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8002256:	7bfb      	ldrb	r3, [r7, #15]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d105      	bne.n	8002268 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 fd7f 	bl	8002d60 <ADC_Disable>
 8002262:	4603      	mov	r3, r0
 8002264:	73fb      	strb	r3, [r7, #15]
 8002266:	e002      	b.n	800226e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 fd79 	bl	8002d60 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800226e:	7bfb      	ldrb	r3, [r7, #15]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d109      	bne.n	8002288 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002278:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800227c:	f023 0301 	bic.w	r3, r3, #1
 8002280:	f043 0201 	orr.w	r2, r3, #1
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002290:	7bfb      	ldrb	r3, [r7, #15]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800229a:	b480      	push	{r7}
 800229c:	b083      	sub	sp, #12
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
	...

080022c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b0b6      	sub	sp, #216	@ 0xd8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022ce:	2300      	movs	r3, #0
 80022d0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d101      	bne.n	80022e6 <HAL_ADC_ConfigChannel+0x22>
 80022e2:	2302      	movs	r3, #2
 80022e4:	e3e3      	b.n	8002aae <HAL_ADC_ConfigChannel+0x7ea>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff fd26 	bl	8001d44 <LL_ADC_REG_IsConversionOngoing>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f040 83c4 	bne.w	8002a88 <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	2b05      	cmp	r3, #5
 800230e:	d824      	bhi.n	800235a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	3b02      	subs	r3, #2
 8002316:	2b03      	cmp	r3, #3
 8002318:	d81b      	bhi.n	8002352 <HAL_ADC_ConfigChannel+0x8e>
 800231a:	a201      	add	r2, pc, #4	@ (adr r2, 8002320 <HAL_ADC_ConfigChannel+0x5c>)
 800231c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002320:	08002331 	.word	0x08002331
 8002324:	08002339 	.word	0x08002339
 8002328:	08002341 	.word	0x08002341
 800232c:	08002349 	.word	0x08002349
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002330:	230c      	movs	r3, #12
 8002332:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002336:	e010      	b.n	800235a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002338:	2312      	movs	r3, #18
 800233a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800233e:	e00c      	b.n	800235a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002340:	2318      	movs	r3, #24
 8002342:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002346:	e008      	b.n	800235a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002348:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800234c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002350:	e003      	b.n	800235a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002352:	2306      	movs	r3, #6
 8002354:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002358:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6818      	ldr	r0, [r3, #0]
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	461a      	mov	r2, r3
 8002364:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002368:	f7ff fb9f 	bl	8001aaa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff fce7 	bl	8001d44 <LL_ADC_REG_IsConversionOngoing>
 8002376:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff fd07 	bl	8001d92 <LL_ADC_INJ_IsConversionOngoing>
 8002384:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002388:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800238c:	2b00      	cmp	r3, #0
 800238e:	f040 81bf 	bne.w	8002710 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002392:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002396:	2b00      	cmp	r3, #0
 8002398:	f040 81ba 	bne.w	8002710 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80023a4:	d10f      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6818      	ldr	r0, [r3, #0]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2200      	movs	r2, #0
 80023b0:	4619      	mov	r1, r3
 80023b2:	f7ff fba6 	bl	8001b02 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff fb4d 	bl	8001a5e <LL_ADC_SetSamplingTimeCommonConfig>
 80023c4:	e00e      	b.n	80023e4 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6818      	ldr	r0, [r3, #0]
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	6819      	ldr	r1, [r3, #0]
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	461a      	mov	r2, r3
 80023d4:	f7ff fb95 	bl	8001b02 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2100      	movs	r1, #0
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff fb3d 	bl	8001a5e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	695a      	ldr	r2, [r3, #20]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	08db      	lsrs	r3, r3, #3
 80023f0:	f003 0303 	and.w	r3, r3, #3
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	2b04      	cmp	r3, #4
 8002404:	d00a      	beq.n	800241c <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6818      	ldr	r0, [r3, #0]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	6919      	ldr	r1, [r3, #16]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002416:	f7ff facd 	bl	80019b4 <LL_ADC_SetOffset>
 800241a:	e179      	b.n	8002710 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2100      	movs	r1, #0
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff faea 	bl	80019fc <LL_ADC_GetOffsetChannel>
 8002428:	4603      	mov	r3, r0
 800242a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10a      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x184>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2100      	movs	r1, #0
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff fadf 	bl	80019fc <LL_ADC_GetOffsetChannel>
 800243e:	4603      	mov	r3, r0
 8002440:	0e9b      	lsrs	r3, r3, #26
 8002442:	f003 021f 	and.w	r2, r3, #31
 8002446:	e01e      	b.n	8002486 <HAL_ADC_ConfigChannel+0x1c2>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2100      	movs	r1, #0
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff fad4 	bl	80019fc <LL_ADC_GetOffsetChannel>
 8002454:	4603      	mov	r3, r0
 8002456:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800245e:	fa93 f3a3 	rbit	r3, r3
 8002462:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002466:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800246a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800246e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002476:	2320      	movs	r3, #32
 8002478:	e004      	b.n	8002484 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 800247a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800247e:	fab3 f383 	clz	r3, r3
 8002482:	b2db      	uxtb	r3, r3
 8002484:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800248e:	2b00      	cmp	r3, #0
 8002490:	d105      	bne.n	800249e <HAL_ADC_ConfigChannel+0x1da>
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	0e9b      	lsrs	r3, r3, #26
 8002498:	f003 031f 	and.w	r3, r3, #31
 800249c:	e018      	b.n	80024d0 <HAL_ADC_ConfigChannel+0x20c>
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80024aa:	fa93 f3a3 	rbit	r3, r3
 80024ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80024b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80024b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80024ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80024c2:	2320      	movs	r3, #32
 80024c4:	e004      	b.n	80024d0 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80024c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80024ca:	fab3 f383 	clz	r3, r3
 80024ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d106      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2200      	movs	r2, #0
 80024da:	2100      	movs	r1, #0
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff faa3 	bl	8001a28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2101      	movs	r1, #1
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff fa87 	bl	80019fc <LL_ADC_GetOffsetChannel>
 80024ee:	4603      	mov	r3, r0
 80024f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d10a      	bne.n	800250e <HAL_ADC_ConfigChannel+0x24a>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2101      	movs	r1, #1
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff fa7c 	bl	80019fc <LL_ADC_GetOffsetChannel>
 8002504:	4603      	mov	r3, r0
 8002506:	0e9b      	lsrs	r3, r3, #26
 8002508:	f003 021f 	and.w	r2, r3, #31
 800250c:	e01e      	b.n	800254c <HAL_ADC_ConfigChannel+0x288>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2101      	movs	r1, #1
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff fa71 	bl	80019fc <LL_ADC_GetOffsetChannel>
 800251a:	4603      	mov	r3, r0
 800251c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002520:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002524:	fa93 f3a3 	rbit	r3, r3
 8002528:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800252c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002530:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002534:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 800253c:	2320      	movs	r3, #32
 800253e:	e004      	b.n	800254a <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002540:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002544:	fab3 f383 	clz	r3, r3
 8002548:	b2db      	uxtb	r3, r3
 800254a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002554:	2b00      	cmp	r3, #0
 8002556:	d105      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x2a0>
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	0e9b      	lsrs	r3, r3, #26
 800255e:	f003 031f 	and.w	r3, r3, #31
 8002562:	e018      	b.n	8002596 <HAL_ADC_ConfigChannel+0x2d2>
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002570:	fa93 f3a3 	rbit	r3, r3
 8002574:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002578:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800257c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002580:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002584:	2b00      	cmp	r3, #0
 8002586:	d101      	bne.n	800258c <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002588:	2320      	movs	r3, #32
 800258a:	e004      	b.n	8002596 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 800258c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002590:	fab3 f383 	clz	r3, r3
 8002594:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002596:	429a      	cmp	r2, r3
 8002598:	d106      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2200      	movs	r2, #0
 80025a0:	2101      	movs	r1, #1
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff fa40 	bl	8001a28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2102      	movs	r1, #2
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff fa24 	bl	80019fc <LL_ADC_GetOffsetChannel>
 80025b4:	4603      	mov	r3, r0
 80025b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d10a      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x310>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2102      	movs	r1, #2
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff fa19 	bl	80019fc <LL_ADC_GetOffsetChannel>
 80025ca:	4603      	mov	r3, r0
 80025cc:	0e9b      	lsrs	r3, r3, #26
 80025ce:	f003 021f 	and.w	r2, r3, #31
 80025d2:	e01e      	b.n	8002612 <HAL_ADC_ConfigChannel+0x34e>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2102      	movs	r1, #2
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff fa0e 	bl	80019fc <LL_ADC_GetOffsetChannel>
 80025e0:	4603      	mov	r3, r0
 80025e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80025ea:	fa93 f3a3 	rbit	r3, r3
 80025ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80025f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80025f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80025fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002602:	2320      	movs	r3, #32
 8002604:	e004      	b.n	8002610 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002606:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800260a:	fab3 f383 	clz	r3, r3
 800260e:	b2db      	uxtb	r3, r3
 8002610:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800261a:	2b00      	cmp	r3, #0
 800261c:	d105      	bne.n	800262a <HAL_ADC_ConfigChannel+0x366>
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	0e9b      	lsrs	r3, r3, #26
 8002624:	f003 031f 	and.w	r3, r3, #31
 8002628:	e014      	b.n	8002654 <HAL_ADC_ConfigChannel+0x390>
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002630:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002632:	fa93 f3a3 	rbit	r3, r3
 8002636:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002638:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800263a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800263e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002646:	2320      	movs	r3, #32
 8002648:	e004      	b.n	8002654 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800264a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800264e:	fab3 f383 	clz	r3, r3
 8002652:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002654:	429a      	cmp	r2, r3
 8002656:	d106      	bne.n	8002666 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2200      	movs	r2, #0
 800265e:	2102      	movs	r1, #2
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff f9e1 	bl	8001a28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2103      	movs	r1, #3
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff f9c5 	bl	80019fc <LL_ADC_GetOffsetChannel>
 8002672:	4603      	mov	r3, r0
 8002674:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002678:	2b00      	cmp	r3, #0
 800267a:	d10a      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x3ce>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2103      	movs	r1, #3
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff f9ba 	bl	80019fc <LL_ADC_GetOffsetChannel>
 8002688:	4603      	mov	r3, r0
 800268a:	0e9b      	lsrs	r3, r3, #26
 800268c:	f003 021f 	and.w	r2, r3, #31
 8002690:	e017      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x3fe>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2103      	movs	r1, #3
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff f9af 	bl	80019fc <LL_ADC_GetOffsetChannel>
 800269e:	4603      	mov	r3, r0
 80026a0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80026a4:	fa93 f3a3 	rbit	r3, r3
 80026a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80026aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026ac:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80026ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d101      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80026b4:	2320      	movs	r3, #32
 80026b6:	e003      	b.n	80026c0 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80026b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026ba:	fab3 f383 	clz	r3, r3
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d105      	bne.n	80026da <HAL_ADC_ConfigChannel+0x416>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	0e9b      	lsrs	r3, r3, #26
 80026d4:	f003 031f 	and.w	r3, r3, #31
 80026d8:	e011      	b.n	80026fe <HAL_ADC_ConfigChannel+0x43a>
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80026e2:	fa93 f3a3 	rbit	r3, r3
 80026e6:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80026e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80026ea:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80026ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80026f2:	2320      	movs	r3, #32
 80026f4:	e003      	b.n	80026fe <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80026f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026f8:	fab3 f383 	clz	r3, r3
 80026fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026fe:	429a      	cmp	r2, r3
 8002700:	d106      	bne.n	8002710 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2200      	movs	r2, #0
 8002708:	2103      	movs	r1, #3
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff f98c 	bl	8001a28 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff fac7 	bl	8001ca8 <LL_ADC_IsEnabled>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	f040 813f 	bne.w	80029a0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6818      	ldr	r0, [r3, #0]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	6819      	ldr	r1, [r3, #0]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	461a      	mov	r2, r3
 8002730:	f7ff fa12 	bl	8001b58 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	4a8e      	ldr	r2, [pc, #568]	@ (8002974 <HAL_ADC_ConfigChannel+0x6b0>)
 800273a:	4293      	cmp	r3, r2
 800273c:	f040 8130 	bne.w	80029a0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10b      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x4a4>
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	0e9b      	lsrs	r3, r3, #26
 8002756:	3301      	adds	r3, #1
 8002758:	f003 031f 	and.w	r3, r3, #31
 800275c:	2b09      	cmp	r3, #9
 800275e:	bf94      	ite	ls
 8002760:	2301      	movls	r3, #1
 8002762:	2300      	movhi	r3, #0
 8002764:	b2db      	uxtb	r3, r3
 8002766:	e019      	b.n	800279c <HAL_ADC_ConfigChannel+0x4d8>
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002770:	fa93 f3a3 	rbit	r3, r3
 8002774:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002776:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002778:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800277a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800277c:	2b00      	cmp	r3, #0
 800277e:	d101      	bne.n	8002784 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002780:	2320      	movs	r3, #32
 8002782:	e003      	b.n	800278c <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002784:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002786:	fab3 f383 	clz	r3, r3
 800278a:	b2db      	uxtb	r3, r3
 800278c:	3301      	adds	r3, #1
 800278e:	f003 031f 	and.w	r3, r3, #31
 8002792:	2b09      	cmp	r3, #9
 8002794:	bf94      	ite	ls
 8002796:	2301      	movls	r3, #1
 8002798:	2300      	movhi	r3, #0
 800279a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800279c:	2b00      	cmp	r3, #0
 800279e:	d079      	beq.n	8002894 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d107      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x4f8>
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	0e9b      	lsrs	r3, r3, #26
 80027b2:	3301      	adds	r3, #1
 80027b4:	069b      	lsls	r3, r3, #26
 80027b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027ba:	e015      	b.n	80027e8 <HAL_ADC_ConfigChannel+0x524>
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80027c4:	fa93 f3a3 	rbit	r3, r3
 80027c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80027ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027cc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80027ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80027d4:	2320      	movs	r3, #32
 80027d6:	e003      	b.n	80027e0 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80027d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027da:	fab3 f383 	clz	r3, r3
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	3301      	adds	r3, #1
 80027e2:	069b      	lsls	r3, r3, #26
 80027e4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d109      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x544>
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	0e9b      	lsrs	r3, r3, #26
 80027fa:	3301      	adds	r3, #1
 80027fc:	f003 031f 	and.w	r3, r3, #31
 8002800:	2101      	movs	r1, #1
 8002802:	fa01 f303 	lsl.w	r3, r1, r3
 8002806:	e017      	b.n	8002838 <HAL_ADC_ConfigChannel+0x574>
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002810:	fa93 f3a3 	rbit	r3, r3
 8002814:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002816:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002818:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800281a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800281c:	2b00      	cmp	r3, #0
 800281e:	d101      	bne.n	8002824 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002820:	2320      	movs	r3, #32
 8002822:	e003      	b.n	800282c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002824:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002826:	fab3 f383 	clz	r3, r3
 800282a:	b2db      	uxtb	r3, r3
 800282c:	3301      	adds	r3, #1
 800282e:	f003 031f 	and.w	r3, r3, #31
 8002832:	2101      	movs	r1, #1
 8002834:	fa01 f303 	lsl.w	r3, r1, r3
 8002838:	ea42 0103 	orr.w	r1, r2, r3
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002844:	2b00      	cmp	r3, #0
 8002846:	d10a      	bne.n	800285e <HAL_ADC_ConfigChannel+0x59a>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	0e9b      	lsrs	r3, r3, #26
 800284e:	3301      	adds	r3, #1
 8002850:	f003 021f 	and.w	r2, r3, #31
 8002854:	4613      	mov	r3, r2
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	4413      	add	r3, r2
 800285a:	051b      	lsls	r3, r3, #20
 800285c:	e018      	b.n	8002890 <HAL_ADC_ConfigChannel+0x5cc>
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002866:	fa93 f3a3 	rbit	r3, r3
 800286a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800286c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800286e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002876:	2320      	movs	r3, #32
 8002878:	e003      	b.n	8002882 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800287a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800287c:	fab3 f383 	clz	r3, r3
 8002880:	b2db      	uxtb	r3, r3
 8002882:	3301      	adds	r3, #1
 8002884:	f003 021f 	and.w	r2, r3, #31
 8002888:	4613      	mov	r3, r2
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	4413      	add	r3, r2
 800288e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002890:	430b      	orrs	r3, r1
 8002892:	e080      	b.n	8002996 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800289c:	2b00      	cmp	r3, #0
 800289e:	d107      	bne.n	80028b0 <HAL_ADC_ConfigChannel+0x5ec>
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	0e9b      	lsrs	r3, r3, #26
 80028a6:	3301      	adds	r3, #1
 80028a8:	069b      	lsls	r3, r3, #26
 80028aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028ae:	e015      	b.n	80028dc <HAL_ADC_ConfigChannel+0x618>
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028b8:	fa93 f3a3 	rbit	r3, r3
 80028bc:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80028be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80028c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80028c8:	2320      	movs	r3, #32
 80028ca:	e003      	b.n	80028d4 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80028cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028ce:	fab3 f383 	clz	r3, r3
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	3301      	adds	r3, #1
 80028d6:	069b      	lsls	r3, r3, #26
 80028d8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d109      	bne.n	80028fc <HAL_ADC_ConfigChannel+0x638>
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	0e9b      	lsrs	r3, r3, #26
 80028ee:	3301      	adds	r3, #1
 80028f0:	f003 031f 	and.w	r3, r3, #31
 80028f4:	2101      	movs	r1, #1
 80028f6:	fa01 f303 	lsl.w	r3, r1, r3
 80028fa:	e017      	b.n	800292c <HAL_ADC_ConfigChannel+0x668>
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	fa93 f3a3 	rbit	r3, r3
 8002908:	61bb      	str	r3, [r7, #24]
  return result;
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800290e:	6a3b      	ldr	r3, [r7, #32]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d101      	bne.n	8002918 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002914:	2320      	movs	r3, #32
 8002916:	e003      	b.n	8002920 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002918:	6a3b      	ldr	r3, [r7, #32]
 800291a:	fab3 f383 	clz	r3, r3
 800291e:	b2db      	uxtb	r3, r3
 8002920:	3301      	adds	r3, #1
 8002922:	f003 031f 	and.w	r3, r3, #31
 8002926:	2101      	movs	r1, #1
 8002928:	fa01 f303 	lsl.w	r3, r1, r3
 800292c:	ea42 0103 	orr.w	r1, r2, r3
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002938:	2b00      	cmp	r3, #0
 800293a:	d10d      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x694>
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	0e9b      	lsrs	r3, r3, #26
 8002942:	3301      	adds	r3, #1
 8002944:	f003 021f 	and.w	r2, r3, #31
 8002948:	4613      	mov	r3, r2
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	4413      	add	r3, r2
 800294e:	3b1e      	subs	r3, #30
 8002950:	051b      	lsls	r3, r3, #20
 8002952:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002956:	e01d      	b.n	8002994 <HAL_ADC_ConfigChannel+0x6d0>
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	fa93 f3a3 	rbit	r3, r3
 8002964:	60fb      	str	r3, [r7, #12]
  return result;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d103      	bne.n	8002978 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002970:	2320      	movs	r3, #32
 8002972:	e005      	b.n	8002980 <HAL_ADC_ConfigChannel+0x6bc>
 8002974:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	fab3 f383 	clz	r3, r3
 800297e:	b2db      	uxtb	r3, r3
 8002980:	3301      	adds	r3, #1
 8002982:	f003 021f 	and.w	r2, r3, #31
 8002986:	4613      	mov	r3, r2
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	4413      	add	r3, r2
 800298c:	3b1e      	subs	r3, #30
 800298e:	051b      	lsls	r3, r3, #20
 8002990:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002994:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800299a:	4619      	mov	r1, r3
 800299c:	f7ff f8b1 	bl	8001b02 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	4b44      	ldr	r3, [pc, #272]	@ (8002ab8 <HAL_ADC_ConfigChannel+0x7f4>)
 80029a6:	4013      	ands	r3, r2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d07a      	beq.n	8002aa2 <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029ac:	4843      	ldr	r0, [pc, #268]	@ (8002abc <HAL_ADC_ConfigChannel+0x7f8>)
 80029ae:	f7fe fff3 	bl	8001998 <LL_ADC_GetCommonPathInternalCh>
 80029b2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a41      	ldr	r2, [pc, #260]	@ (8002ac0 <HAL_ADC_ConfigChannel+0x7fc>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d12c      	bne.n	8002a1a <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80029c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d126      	bne.n	8002a1a <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a3c      	ldr	r2, [pc, #240]	@ (8002ac4 <HAL_ADC_ConfigChannel+0x800>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d004      	beq.n	80029e0 <HAL_ADC_ConfigChannel+0x71c>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a3b      	ldr	r2, [pc, #236]	@ (8002ac8 <HAL_ADC_ConfigChannel+0x804>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d15d      	bne.n	8002a9c <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029e4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80029e8:	4619      	mov	r1, r3
 80029ea:	4834      	ldr	r0, [pc, #208]	@ (8002abc <HAL_ADC_ConfigChannel+0x7f8>)
 80029ec:	f7fe ffc1 	bl	8001972 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029f0:	4b36      	ldr	r3, [pc, #216]	@ (8002acc <HAL_ADC_ConfigChannel+0x808>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	099b      	lsrs	r3, r3, #6
 80029f6:	4a36      	ldr	r2, [pc, #216]	@ (8002ad0 <HAL_ADC_ConfigChannel+0x80c>)
 80029f8:	fba2 2303 	umull	r2, r3, r2, r3
 80029fc:	099b      	lsrs	r3, r3, #6
 80029fe:	1c5a      	adds	r2, r3, #1
 8002a00:	4613      	mov	r3, r2
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	4413      	add	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002a0a:	e002      	b.n	8002a12 <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1f9      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a18:	e040      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a2d      	ldr	r2, [pc, #180]	@ (8002ad4 <HAL_ADC_ConfigChannel+0x810>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d118      	bne.n	8002a56 <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d112      	bne.n	8002a56 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a23      	ldr	r2, [pc, #140]	@ (8002ac4 <HAL_ADC_ConfigChannel+0x800>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d004      	beq.n	8002a44 <HAL_ADC_ConfigChannel+0x780>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a22      	ldr	r2, [pc, #136]	@ (8002ac8 <HAL_ADC_ConfigChannel+0x804>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d12d      	bne.n	8002aa0 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a48:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	481b      	ldr	r0, [pc, #108]	@ (8002abc <HAL_ADC_ConfigChannel+0x7f8>)
 8002a50:	f7fe ff8f 	bl	8001972 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a54:	e024      	b.n	8002aa0 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a1f      	ldr	r2, [pc, #124]	@ (8002ad8 <HAL_ADC_ConfigChannel+0x814>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d120      	bne.n	8002aa2 <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d11a      	bne.n	8002aa2 <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a14      	ldr	r2, [pc, #80]	@ (8002ac4 <HAL_ADC_ConfigChannel+0x800>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d115      	bne.n	8002aa2 <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a7a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a7e:	4619      	mov	r1, r3
 8002a80:	480e      	ldr	r0, [pc, #56]	@ (8002abc <HAL_ADC_ConfigChannel+0x7f8>)
 8002a82:	f7fe ff76 	bl	8001972 <LL_ADC_SetCommonPathInternalCh>
 8002a86:	e00c      	b.n	8002aa2 <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a8c:	f043 0220 	orr.w	r2, r3, #32
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002a9a:	e002      	b.n	8002aa2 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a9c:	bf00      	nop
 8002a9e:	e000      	b.n	8002aa2 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002aa0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002aaa:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	37d8      	adds	r7, #216	@ 0xd8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	80080000 	.word	0x80080000
 8002abc:	50040300 	.word	0x50040300
 8002ac0:	c7520000 	.word	0xc7520000
 8002ac4:	50040000 	.word	0x50040000
 8002ac8:	50040200 	.word	0x50040200
 8002acc:	20000000 	.word	0x20000000
 8002ad0:	053e2d63 	.word	0x053e2d63
 8002ad4:	cb840000 	.word	0xcb840000
 8002ad8:	80000001 	.word	0x80000001

08002adc <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b088      	sub	sp, #32
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff f926 	bl	8001d44 <LL_ADC_REG_IsConversionOngoing>
 8002af8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff f947 	bl	8001d92 <LL_ADC_INJ_IsConversionOngoing>
 8002b04:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d103      	bne.n	8002b14 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f000 8098 	beq.w	8002c44 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d02a      	beq.n	8002b78 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	7e5b      	ldrb	r3, [r3, #25]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d126      	bne.n	8002b78 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	7e1b      	ldrb	r3, [r3, #24]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d122      	bne.n	8002b78 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002b32:	2301      	movs	r3, #1
 8002b34:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002b36:	e014      	b.n	8002b62 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	4a45      	ldr	r2, [pc, #276]	@ (8002c50 <ADC_ConversionStop+0x174>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d90d      	bls.n	8002b5c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b44:	f043 0210 	orr.w	r2, r3, #16
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b50:	f043 0201 	orr.w	r2, r3, #1
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e074      	b.n	8002c46 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	3301      	adds	r3, #1
 8002b60:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b6c:	2b40      	cmp	r3, #64	@ 0x40
 8002b6e:	d1e3      	bne.n	8002b38 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2240      	movs	r2, #64	@ 0x40
 8002b76:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d014      	beq.n	8002ba8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff f8de 	bl	8001d44 <LL_ADC_REG_IsConversionOngoing>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00c      	beq.n	8002ba8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff f89b 	bl	8001cce <LL_ADC_IsDisableOngoing>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d104      	bne.n	8002ba8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff f8ba 	bl	8001d1c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d014      	beq.n	8002bd8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7ff f8ed 	bl	8001d92 <LL_ADC_INJ_IsConversionOngoing>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00c      	beq.n	8002bd8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff f883 	bl	8001cce <LL_ADC_IsDisableOngoing>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d104      	bne.n	8002bd8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7ff f8c9 	bl	8001d6a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d005      	beq.n	8002bea <ADC_ConversionStop+0x10e>
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	2b03      	cmp	r3, #3
 8002be2:	d105      	bne.n	8002bf0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002be4:	230c      	movs	r3, #12
 8002be6:	617b      	str	r3, [r7, #20]
        break;
 8002be8:	e005      	b.n	8002bf6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002bea:	2308      	movs	r3, #8
 8002bec:	617b      	str	r3, [r7, #20]
        break;
 8002bee:	e002      	b.n	8002bf6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002bf0:	2304      	movs	r3, #4
 8002bf2:	617b      	str	r3, [r7, #20]
        break;
 8002bf4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002bf6:	f7fe fe9d 	bl	8001934 <HAL_GetTick>
 8002bfa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002bfc:	e01b      	b.n	8002c36 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002bfe:	f7fe fe99 	bl	8001934 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b05      	cmp	r3, #5
 8002c0a:	d914      	bls.n	8002c36 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	4013      	ands	r3, r2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00d      	beq.n	8002c36 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c1e:	f043 0210 	orr.w	r2, r3, #16
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c2a:	f043 0201 	orr.w	r2, r3, #1
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e007      	b.n	8002c46 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1dc      	bne.n	8002bfe <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3720      	adds	r7, #32
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	a33fffff 	.word	0xa33fffff

08002c54 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff f81f 	bl	8001ca8 <LL_ADC_IsEnabled>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d169      	bne.n	8002d44 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	4b36      	ldr	r3, [pc, #216]	@ (8002d50 <ADC_Enable+0xfc>)
 8002c78:	4013      	ands	r3, r2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00d      	beq.n	8002c9a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c82:	f043 0210 	orr.w	r2, r3, #16
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c8e:	f043 0201 	orr.w	r2, r3, #1
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e055      	b.n	8002d46 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fe ffda 	bl	8001c58 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002ca4:	482b      	ldr	r0, [pc, #172]	@ (8002d54 <ADC_Enable+0x100>)
 8002ca6:	f7fe fe77 	bl	8001998 <LL_ADC_GetCommonPathInternalCh>
 8002caa:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002cac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d013      	beq.n	8002cdc <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cb4:	4b28      	ldr	r3, [pc, #160]	@ (8002d58 <ADC_Enable+0x104>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	099b      	lsrs	r3, r3, #6
 8002cba:	4a28      	ldr	r2, [pc, #160]	@ (8002d5c <ADC_Enable+0x108>)
 8002cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc0:	099b      	lsrs	r3, r3, #6
 8002cc2:	1c5a      	adds	r2, r3, #1
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	4413      	add	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002cce:	e002      	b.n	8002cd6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1f9      	bne.n	8002cd0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002cdc:	f7fe fe2a 	bl	8001934 <HAL_GetTick>
 8002ce0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ce2:	e028      	b.n	8002d36 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7fe ffdd 	bl	8001ca8 <LL_ADC_IsEnabled>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d104      	bne.n	8002cfe <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7fe ffad 	bl	8001c58 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002cfe:	f7fe fe19 	bl	8001934 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d914      	bls.n	8002d36 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d00d      	beq.n	8002d36 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d1e:	f043 0210 	orr.w	r2, r3, #16
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d2a:	f043 0201 	orr.w	r2, r3, #1
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e007      	b.n	8002d46 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d1cf      	bne.n	8002ce4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	8000003f 	.word	0x8000003f
 8002d54:	50040300 	.word	0x50040300
 8002d58:	20000000 	.word	0x20000000
 8002d5c:	053e2d63 	.word	0x053e2d63

08002d60 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7fe ffae 	bl	8001cce <LL_ADC_IsDisableOngoing>
 8002d72:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7fe ff95 	bl	8001ca8 <LL_ADC_IsEnabled>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d047      	beq.n	8002e14 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d144      	bne.n	8002e14 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f003 030d 	and.w	r3, r3, #13
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d10c      	bne.n	8002db2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7fe ff6f 	bl	8001c80 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2203      	movs	r2, #3
 8002da8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002daa:	f7fe fdc3 	bl	8001934 <HAL_GetTick>
 8002dae:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002db0:	e029      	b.n	8002e06 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db6:	f043 0210 	orr.w	r2, r3, #16
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dc2:	f043 0201 	orr.w	r2, r3, #1
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e023      	b.n	8002e16 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002dce:	f7fe fdb1 	bl	8001934 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d914      	bls.n	8002e06 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00d      	beq.n	8002e06 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dee:	f043 0210 	orr.w	r2, r3, #16
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dfa:	f043 0201 	orr.w	r2, r3, #1
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e007      	b.n	8002e16 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1dc      	bne.n	8002dce <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b084      	sub	sp, #16
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e2a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e30:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d14b      	bne.n	8002ed0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e3c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0308 	and.w	r3, r3, #8
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d021      	beq.n	8002e96 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fe fe14 	bl	8001a84 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d032      	beq.n	8002ec8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d12b      	bne.n	8002ec8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e74:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d11f      	bne.n	8002ec8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e8c:	f043 0201 	orr.w	r2, r3, #1
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	659a      	str	r2, [r3, #88]	@ 0x58
 8002e94:	e018      	b.n	8002ec8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d111      	bne.n	8002ec8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ea8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eb4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d105      	bne.n	8002ec8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ec0:	f043 0201 	orr.w	r2, r3, #1
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f7fe f82d 	bl	8000f28 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ece:	e00e      	b.n	8002eee <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ed4:	f003 0310 	and.w	r3, r3, #16
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d003      	beq.n	8002ee4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f7ff f9e6 	bl	80022ae <HAL_ADC_ErrorCallback>
}
 8002ee2:	e004      	b.n	8002eee <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ee8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	4798      	blx	r3
}
 8002eee:	bf00      	nop
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b084      	sub	sp, #16
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f02:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f7ff f9c8 	bl	800229a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f0a:	bf00      	nop
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b084      	sub	sp, #16
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f1e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f24:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f30:	f043 0204 	orr.w	r2, r3, #4
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f7ff f9b8 	bl	80022ae <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f3e:	bf00      	nop
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <LL_ADC_IsEnabled>:
{
 8002f46:	b480      	push	{r7}
 8002f48:	b083      	sub	sp, #12
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d101      	bne.n	8002f5e <LL_ADC_IsEnabled+0x18>
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e000      	b.n	8002f60 <LL_ADC_IsEnabled+0x1a>
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <LL_ADC_REG_IsConversionOngoing>:
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f003 0304 	and.w	r3, r3, #4
 8002f7c:	2b04      	cmp	r3, #4
 8002f7e:	d101      	bne.n	8002f84 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f80:	2301      	movs	r3, #1
 8002f82:	e000      	b.n	8002f86 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
	...

08002f94 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002f94:	b590      	push	{r4, r7, lr}
 8002f96:	b0a1      	sub	sp, #132	@ 0x84
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d101      	bne.n	8002fb2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002fae:	2302      	movs	r3, #2
 8002fb0:	e093      	b.n	80030da <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002fba:	2300      	movs	r3, #0
 8002fbc:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a47      	ldr	r2, [pc, #284]	@ (80030e4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d102      	bne.n	8002fd2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002fcc:	4b46      	ldr	r3, [pc, #280]	@ (80030e8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002fce:	60fb      	str	r3, [r7, #12]
 8002fd0:	e001      	b.n	8002fd6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10b      	bne.n	8002ff4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fe0:	f043 0220 	orr.w	r2, r3, #32
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e072      	b.n	80030da <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7ff ffb8 	bl	8002f6c <LL_ADC_REG_IsConversionOngoing>
 8002ffc:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4618      	mov	r0, r3
 8003004:	f7ff ffb2 	bl	8002f6c <LL_ADC_REG_IsConversionOngoing>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d154      	bne.n	80030b8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800300e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003010:	2b00      	cmp	r3, #0
 8003012:	d151      	bne.n	80030b8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003014:	4b35      	ldr	r3, [pc, #212]	@ (80030ec <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003016:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d02c      	beq.n	800307a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003020:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	6859      	ldr	r1, [r3, #4]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003032:	035b      	lsls	r3, r3, #13
 8003034:	430b      	orrs	r3, r1
 8003036:	431a      	orrs	r2, r3
 8003038:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800303a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800303c:	4829      	ldr	r0, [pc, #164]	@ (80030e4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800303e:	f7ff ff82 	bl	8002f46 <LL_ADC_IsEnabled>
 8003042:	4604      	mov	r4, r0
 8003044:	4828      	ldr	r0, [pc, #160]	@ (80030e8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003046:	f7ff ff7e 	bl	8002f46 <LL_ADC_IsEnabled>
 800304a:	4603      	mov	r3, r0
 800304c:	431c      	orrs	r4, r3
 800304e:	4828      	ldr	r0, [pc, #160]	@ (80030f0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003050:	f7ff ff79 	bl	8002f46 <LL_ADC_IsEnabled>
 8003054:	4603      	mov	r3, r0
 8003056:	4323      	orrs	r3, r4
 8003058:	2b00      	cmp	r3, #0
 800305a:	d137      	bne.n	80030cc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800305c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003064:	f023 030f 	bic.w	r3, r3, #15
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	6811      	ldr	r1, [r2, #0]
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	6892      	ldr	r2, [r2, #8]
 8003070:	430a      	orrs	r2, r1
 8003072:	431a      	orrs	r2, r3
 8003074:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003076:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003078:	e028      	b.n	80030cc <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800307a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003082:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003084:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003086:	4817      	ldr	r0, [pc, #92]	@ (80030e4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003088:	f7ff ff5d 	bl	8002f46 <LL_ADC_IsEnabled>
 800308c:	4604      	mov	r4, r0
 800308e:	4816      	ldr	r0, [pc, #88]	@ (80030e8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003090:	f7ff ff59 	bl	8002f46 <LL_ADC_IsEnabled>
 8003094:	4603      	mov	r3, r0
 8003096:	431c      	orrs	r4, r3
 8003098:	4815      	ldr	r0, [pc, #84]	@ (80030f0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800309a:	f7ff ff54 	bl	8002f46 <LL_ADC_IsEnabled>
 800309e:	4603      	mov	r3, r0
 80030a0:	4323      	orrs	r3, r4
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d112      	bne.n	80030cc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80030a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80030ae:	f023 030f 	bic.w	r3, r3, #15
 80030b2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80030b4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80030b6:	e009      	b.n	80030cc <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030bc:	f043 0220 	orr.w	r2, r3, #32
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80030ca:	e000      	b.n	80030ce <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80030cc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80030d6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3784      	adds	r7, #132	@ 0x84
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd90      	pop	{r4, r7, pc}
 80030e2:	bf00      	nop
 80030e4:	50040000 	.word	0x50040000
 80030e8:	50040100 	.word	0x50040100
 80030ec:	50040300 	.word	0x50040300
 80030f0:	50040200 	.word	0x50040200

080030f4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e0ed      	b.n	80032e2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 3020 	ldrb.w	r3, [r3, #32]
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d102      	bne.n	8003118 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f7fe f970 	bl	80013f8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f042 0201 	orr.w	r2, r2, #1
 8003126:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003128:	f7fe fc04 	bl	8001934 <HAL_GetTick>
 800312c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800312e:	e012      	b.n	8003156 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003130:	f7fe fc00 	bl	8001934 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b0a      	cmp	r3, #10
 800313c:	d90b      	bls.n	8003156 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003142:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2205      	movs	r2, #5
 800314e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e0c5      	b.n	80032e2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0e5      	beq.n	8003130 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 0202 	bic.w	r2, r2, #2
 8003172:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003174:	f7fe fbde 	bl	8001934 <HAL_GetTick>
 8003178:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800317a:	e012      	b.n	80031a2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800317c:	f7fe fbda 	bl	8001934 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b0a      	cmp	r3, #10
 8003188:	d90b      	bls.n	80031a2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800318e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2205      	movs	r2, #5
 800319a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e09f      	b.n	80032e2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1e5      	bne.n	800317c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	7e1b      	ldrb	r3, [r3, #24]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d108      	bne.n	80031ca <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	e007      	b.n	80031da <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	7e5b      	ldrb	r3, [r3, #25]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d108      	bne.n	80031f4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	e007      	b.n	8003204 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003202:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	7e9b      	ldrb	r3, [r3, #26]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d108      	bne.n	800321e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0220 	orr.w	r2, r2, #32
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	e007      	b.n	800322e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0220 	bic.w	r2, r2, #32
 800322c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	7edb      	ldrb	r3, [r3, #27]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d108      	bne.n	8003248 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 0210 	bic.w	r2, r2, #16
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	e007      	b.n	8003258 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f042 0210 	orr.w	r2, r2, #16
 8003256:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	7f1b      	ldrb	r3, [r3, #28]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d108      	bne.n	8003272 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f042 0208 	orr.w	r2, r2, #8
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	e007      	b.n	8003282 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 0208 	bic.w	r2, r2, #8
 8003280:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	7f5b      	ldrb	r3, [r3, #29]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d108      	bne.n	800329c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f042 0204 	orr.w	r2, r2, #4
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	e007      	b.n	80032ac <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0204 	bic.w	r2, r2, #4
 80032aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689a      	ldr	r2, [r3, #8]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	431a      	orrs	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	431a      	orrs	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	ea42 0103 	orr.w	r1, r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	1e5a      	subs	r2, r3, #1
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b084      	sub	sp, #16
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d12e      	bne.n	800335c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2202      	movs	r2, #2
 8003302:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 0201 	bic.w	r2, r2, #1
 8003314:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003316:	f7fe fb0d 	bl	8001934 <HAL_GetTick>
 800331a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800331c:	e012      	b.n	8003344 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800331e:	f7fe fb09 	bl	8001934 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b0a      	cmp	r3, #10
 800332a:	d90b      	bls.n	8003344 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003330:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2205      	movs	r2, #5
 800333c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e012      	b.n	800336a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1e5      	bne.n	800331e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8003358:	2300      	movs	r3, #0
 800335a:	e006      	b.n	800336a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003360:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
  }
}
 800336a:	4618      	mov	r0, r3
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003372:	b480      	push	{r7}
 8003374:	b089      	sub	sp, #36	@ 0x24
 8003376:	af00      	add	r7, sp, #0
 8003378:	60f8      	str	r0, [r7, #12]
 800337a:	60b9      	str	r1, [r7, #8]
 800337c:	607a      	str	r2, [r7, #4]
 800337e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003386:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003390:	7ffb      	ldrb	r3, [r7, #31]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d003      	beq.n	800339e <HAL_CAN_AddTxMessage+0x2c>
 8003396:	7ffb      	ldrb	r3, [r7, #31]
 8003398:	2b02      	cmp	r3, #2
 800339a:	f040 80ad 	bne.w	80034f8 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10a      	bne.n	80033be <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d105      	bne.n	80033be <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f000 8095 	beq.w	80034e8 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	0e1b      	lsrs	r3, r3, #24
 80033c2:	f003 0303 	and.w	r3, r3, #3
 80033c6:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80033c8:	2201      	movs	r2, #1
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	409a      	lsls	r2, r3
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10d      	bne.n	80033f6 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80033e4:	68f9      	ldr	r1, [r7, #12]
 80033e6:	6809      	ldr	r1, [r1, #0]
 80033e8:	431a      	orrs	r2, r3
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	3318      	adds	r3, #24
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	440b      	add	r3, r1
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	e00f      	b.n	8003416 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003400:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003406:	68f9      	ldr	r1, [r7, #12]
 8003408:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800340a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	3318      	adds	r3, #24
 8003410:	011b      	lsls	r3, r3, #4
 8003412:	440b      	add	r3, r1
 8003414:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6819      	ldr	r1, [r3, #0]
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	691a      	ldr	r2, [r3, #16]
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	3318      	adds	r3, #24
 8003422:	011b      	lsls	r3, r3, #4
 8003424:	440b      	add	r3, r1
 8003426:	3304      	adds	r3, #4
 8003428:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	7d1b      	ldrb	r3, [r3, #20]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d111      	bne.n	8003456 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	3318      	adds	r3, #24
 800343a:	011b      	lsls	r3, r3, #4
 800343c:	4413      	add	r3, r2
 800343e:	3304      	adds	r3, #4
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	6811      	ldr	r1, [r2, #0]
 8003446:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	3318      	adds	r3, #24
 800344e:	011b      	lsls	r3, r3, #4
 8003450:	440b      	add	r3, r1
 8003452:	3304      	adds	r3, #4
 8003454:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	3307      	adds	r3, #7
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	061a      	lsls	r2, r3, #24
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	3306      	adds	r3, #6
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	041b      	lsls	r3, r3, #16
 8003466:	431a      	orrs	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	3305      	adds	r3, #5
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	021b      	lsls	r3, r3, #8
 8003470:	4313      	orrs	r3, r2
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	3204      	adds	r2, #4
 8003476:	7812      	ldrb	r2, [r2, #0]
 8003478:	4610      	mov	r0, r2
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	6811      	ldr	r1, [r2, #0]
 800347e:	ea43 0200 	orr.w	r2, r3, r0
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	011b      	lsls	r3, r3, #4
 8003486:	440b      	add	r3, r1
 8003488:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800348c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	3303      	adds	r3, #3
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	061a      	lsls	r2, r3, #24
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	3302      	adds	r3, #2
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	041b      	lsls	r3, r3, #16
 800349e:	431a      	orrs	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3301      	adds	r3, #1
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	021b      	lsls	r3, r3, #8
 80034a8:	4313      	orrs	r3, r2
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	7812      	ldrb	r2, [r2, #0]
 80034ae:	4610      	mov	r0, r2
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	6811      	ldr	r1, [r2, #0]
 80034b4:	ea43 0200 	orr.w	r2, r3, r0
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	011b      	lsls	r3, r3, #4
 80034bc:	440b      	add	r3, r1
 80034be:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80034c2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	3318      	adds	r3, #24
 80034cc:	011b      	lsls	r3, r3, #4
 80034ce:	4413      	add	r3, r2
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	6811      	ldr	r1, [r2, #0]
 80034d6:	f043 0201 	orr.w	r2, r3, #1
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	3318      	adds	r3, #24
 80034de:	011b      	lsls	r3, r3, #4
 80034e0:	440b      	add	r3, r1
 80034e2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80034e4:	2300      	movs	r3, #0
 80034e6:	e00e      	b.n	8003506 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ec:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e006      	b.n	8003506 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
  }
}
 8003506:	4618      	mov	r0, r3
 8003508:	3724      	adds	r7, #36	@ 0x24
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr

08003512 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8003512:	b480      	push	{r7}
 8003514:	b085      	sub	sp, #20
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800351a:	2300      	movs	r3, #0
 800351c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003524:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003526:	7afb      	ldrb	r3, [r7, #11]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d002      	beq.n	8003532 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800352c:	7afb      	ldrb	r3, [r7, #11]
 800352e:	2b02      	cmp	r3, #2
 8003530:	d11d      	bne.n	800356e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d002      	beq.n	8003546 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	3301      	adds	r3, #1
 8003544:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d002      	beq.n	800355a <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	3301      	adds	r3, #1
 8003558:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d002      	beq.n	800356e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	3301      	adds	r3, #1
 800356c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800356e:	68fb      	ldr	r3, [r7, #12]
}
 8003570:	4618      	mov	r0, r3
 8003572:	3714      	adds	r7, #20
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f003 0307 	and.w	r3, r3, #7
 800358a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800358c:	4b0c      	ldr	r3, [pc, #48]	@ (80035c0 <__NVIC_SetPriorityGrouping+0x44>)
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003592:	68ba      	ldr	r2, [r7, #8]
 8003594:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003598:	4013      	ands	r3, r2
 800359a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80035a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035ae:	4a04      	ldr	r2, [pc, #16]	@ (80035c0 <__NVIC_SetPriorityGrouping+0x44>)
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	60d3      	str	r3, [r2, #12]
}
 80035b4:	bf00      	nop
 80035b6:	3714      	adds	r7, #20
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr
 80035c0:	e000ed00 	.word	0xe000ed00

080035c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035c8:	4b04      	ldr	r3, [pc, #16]	@ (80035dc <__NVIC_GetPriorityGrouping+0x18>)
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	0a1b      	lsrs	r3, r3, #8
 80035ce:	f003 0307 	and.w	r3, r3, #7
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	e000ed00 	.word	0xe000ed00

080035e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4603      	mov	r3, r0
 80035e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	db0b      	blt.n	800360a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035f2:	79fb      	ldrb	r3, [r7, #7]
 80035f4:	f003 021f 	and.w	r2, r3, #31
 80035f8:	4907      	ldr	r1, [pc, #28]	@ (8003618 <__NVIC_EnableIRQ+0x38>)
 80035fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035fe:	095b      	lsrs	r3, r3, #5
 8003600:	2001      	movs	r0, #1
 8003602:	fa00 f202 	lsl.w	r2, r0, r2
 8003606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800360a:	bf00      	nop
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	e000e100 	.word	0xe000e100

0800361c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	4603      	mov	r3, r0
 8003624:	6039      	str	r1, [r7, #0]
 8003626:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800362c:	2b00      	cmp	r3, #0
 800362e:	db0a      	blt.n	8003646 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	b2da      	uxtb	r2, r3
 8003634:	490c      	ldr	r1, [pc, #48]	@ (8003668 <__NVIC_SetPriority+0x4c>)
 8003636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800363a:	0112      	lsls	r2, r2, #4
 800363c:	b2d2      	uxtb	r2, r2
 800363e:	440b      	add	r3, r1
 8003640:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003644:	e00a      	b.n	800365c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	b2da      	uxtb	r2, r3
 800364a:	4908      	ldr	r1, [pc, #32]	@ (800366c <__NVIC_SetPriority+0x50>)
 800364c:	79fb      	ldrb	r3, [r7, #7]
 800364e:	f003 030f 	and.w	r3, r3, #15
 8003652:	3b04      	subs	r3, #4
 8003654:	0112      	lsls	r2, r2, #4
 8003656:	b2d2      	uxtb	r2, r2
 8003658:	440b      	add	r3, r1
 800365a:	761a      	strb	r2, [r3, #24]
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr
 8003668:	e000e100 	.word	0xe000e100
 800366c:	e000ed00 	.word	0xe000ed00

08003670 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003670:	b480      	push	{r7}
 8003672:	b089      	sub	sp, #36	@ 0x24
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f003 0307 	and.w	r3, r3, #7
 8003682:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	f1c3 0307 	rsb	r3, r3, #7
 800368a:	2b04      	cmp	r3, #4
 800368c:	bf28      	it	cs
 800368e:	2304      	movcs	r3, #4
 8003690:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	3304      	adds	r3, #4
 8003696:	2b06      	cmp	r3, #6
 8003698:	d902      	bls.n	80036a0 <NVIC_EncodePriority+0x30>
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	3b03      	subs	r3, #3
 800369e:	e000      	b.n	80036a2 <NVIC_EncodePriority+0x32>
 80036a0:	2300      	movs	r3, #0
 80036a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	fa02 f303 	lsl.w	r3, r2, r3
 80036ae:	43da      	mvns	r2, r3
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	401a      	ands	r2, r3
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036b8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	fa01 f303 	lsl.w	r3, r1, r3
 80036c2:	43d9      	mvns	r1, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036c8:	4313      	orrs	r3, r2
         );
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3724      	adds	r7, #36	@ 0x24
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b082      	sub	sp, #8
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f7ff ff4c 	bl	800357c <__NVIC_SetPriorityGrouping>
}
 80036e4:	bf00      	nop
 80036e6:	3708      	adds	r7, #8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	4603      	mov	r3, r0
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
 80036f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80036fa:	2300      	movs	r3, #0
 80036fc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036fe:	f7ff ff61 	bl	80035c4 <__NVIC_GetPriorityGrouping>
 8003702:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	68b9      	ldr	r1, [r7, #8]
 8003708:	6978      	ldr	r0, [r7, #20]
 800370a:	f7ff ffb1 	bl	8003670 <NVIC_EncodePriority>
 800370e:	4602      	mov	r2, r0
 8003710:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003714:	4611      	mov	r1, r2
 8003716:	4618      	mov	r0, r3
 8003718:	f7ff ff80 	bl	800361c <__NVIC_SetPriority>
}
 800371c:	bf00      	nop
 800371e:	3718      	adds	r7, #24
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	4603      	mov	r3, r0
 800372c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800372e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff ff54 	bl	80035e0 <__NVIC_EnableIRQ>
}
 8003738:	bf00      	nop
 800373a:	3708      	adds	r7, #8
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e098      	b.n	8003884 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	461a      	mov	r2, r3
 8003758:	4b4d      	ldr	r3, [pc, #308]	@ (8003890 <HAL_DMA_Init+0x150>)
 800375a:	429a      	cmp	r2, r3
 800375c:	d80f      	bhi.n	800377e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	461a      	mov	r2, r3
 8003764:	4b4b      	ldr	r3, [pc, #300]	@ (8003894 <HAL_DMA_Init+0x154>)
 8003766:	4413      	add	r3, r2
 8003768:	4a4b      	ldr	r2, [pc, #300]	@ (8003898 <HAL_DMA_Init+0x158>)
 800376a:	fba2 2303 	umull	r2, r3, r2, r3
 800376e:	091b      	lsrs	r3, r3, #4
 8003770:	009a      	lsls	r2, r3, #2
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a48      	ldr	r2, [pc, #288]	@ (800389c <HAL_DMA_Init+0x15c>)
 800377a:	641a      	str	r2, [r3, #64]	@ 0x40
 800377c:	e00e      	b.n	800379c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	461a      	mov	r2, r3
 8003784:	4b46      	ldr	r3, [pc, #280]	@ (80038a0 <HAL_DMA_Init+0x160>)
 8003786:	4413      	add	r3, r2
 8003788:	4a43      	ldr	r2, [pc, #268]	@ (8003898 <HAL_DMA_Init+0x158>)
 800378a:	fba2 2303 	umull	r2, r3, r2, r3
 800378e:	091b      	lsrs	r3, r3, #4
 8003790:	009a      	lsls	r2, r3, #2
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a42      	ldr	r2, [pc, #264]	@ (80038a4 <HAL_DMA_Init+0x164>)
 800379a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2202      	movs	r2, #2
 80037a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80037b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80037c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037f6:	d039      	beq.n	800386c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fc:	4a27      	ldr	r2, [pc, #156]	@ (800389c <HAL_DMA_Init+0x15c>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d11a      	bne.n	8003838 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003802:	4b29      	ldr	r3, [pc, #164]	@ (80038a8 <HAL_DMA_Init+0x168>)
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800380a:	f003 031c 	and.w	r3, r3, #28
 800380e:	210f      	movs	r1, #15
 8003810:	fa01 f303 	lsl.w	r3, r1, r3
 8003814:	43db      	mvns	r3, r3
 8003816:	4924      	ldr	r1, [pc, #144]	@ (80038a8 <HAL_DMA_Init+0x168>)
 8003818:	4013      	ands	r3, r2
 800381a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800381c:	4b22      	ldr	r3, [pc, #136]	@ (80038a8 <HAL_DMA_Init+0x168>)
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6859      	ldr	r1, [r3, #4]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003828:	f003 031c 	and.w	r3, r3, #28
 800382c:	fa01 f303 	lsl.w	r3, r1, r3
 8003830:	491d      	ldr	r1, [pc, #116]	@ (80038a8 <HAL_DMA_Init+0x168>)
 8003832:	4313      	orrs	r3, r2
 8003834:	600b      	str	r3, [r1, #0]
 8003836:	e019      	b.n	800386c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003838:	4b1c      	ldr	r3, [pc, #112]	@ (80038ac <HAL_DMA_Init+0x16c>)
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003840:	f003 031c 	and.w	r3, r3, #28
 8003844:	210f      	movs	r1, #15
 8003846:	fa01 f303 	lsl.w	r3, r1, r3
 800384a:	43db      	mvns	r3, r3
 800384c:	4917      	ldr	r1, [pc, #92]	@ (80038ac <HAL_DMA_Init+0x16c>)
 800384e:	4013      	ands	r3, r2
 8003850:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003852:	4b16      	ldr	r3, [pc, #88]	@ (80038ac <HAL_DMA_Init+0x16c>)
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6859      	ldr	r1, [r3, #4]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800385e:	f003 031c 	and.w	r3, r3, #28
 8003862:	fa01 f303 	lsl.w	r3, r1, r3
 8003866:	4911      	ldr	r1, [pc, #68]	@ (80038ac <HAL_DMA_Init+0x16c>)
 8003868:	4313      	orrs	r3, r2
 800386a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3714      	adds	r7, #20
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	40020407 	.word	0x40020407
 8003894:	bffdfff8 	.word	0xbffdfff8
 8003898:	cccccccd 	.word	0xcccccccd
 800389c:	40020000 	.word	0x40020000
 80038a0:	bffdfbf8 	.word	0xbffdfbf8
 80038a4:	40020400 	.word	0x40020400
 80038a8:	400200a8 	.word	0x400200a8
 80038ac:	400204a8 	.word	0x400204a8

080038b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
 80038bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038be:	2300      	movs	r3, #0
 80038c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d101      	bne.n	80038d0 <HAL_DMA_Start_IT+0x20>
 80038cc:	2302      	movs	r3, #2
 80038ce:	e04b      	b.n	8003968 <HAL_DMA_Start_IT+0xb8>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d13a      	bne.n	800395a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2202      	movs	r2, #2
 80038e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 0201 	bic.w	r2, r2, #1
 8003900:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	68b9      	ldr	r1, [r7, #8]
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f000 f95f 	bl	8003bcc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003912:	2b00      	cmp	r3, #0
 8003914:	d008      	beq.n	8003928 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f042 020e 	orr.w	r2, r2, #14
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	e00f      	b.n	8003948 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 0204 	bic.w	r2, r2, #4
 8003936:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 020a 	orr.w	r2, r2, #10
 8003946:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f042 0201 	orr.w	r2, r2, #1
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	e005      	b.n	8003966 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003962:	2302      	movs	r3, #2
 8003964:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003966:	7dfb      	ldrb	r3, [r7, #23]
}
 8003968:	4618      	mov	r0, r3
 800396a:	3718      	adds	r7, #24
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003978:	2300      	movs	r3, #0
 800397a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003982:	b2db      	uxtb	r3, r3
 8003984:	2b02      	cmp	r3, #2
 8003986:	d008      	beq.n	800399a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2204      	movs	r2, #4
 800398c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e022      	b.n	80039e0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 020e 	bic.w	r2, r2, #14
 80039a8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 0201 	bic.w	r2, r2, #1
 80039b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039be:	f003 021c 	and.w	r2, r3, #28
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c6:	2101      	movs	r1, #1
 80039c8:	fa01 f202 	lsl.w	r2, r1, r2
 80039cc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80039de:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3714      	adds	r7, #20
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039f4:	2300      	movs	r3, #0
 80039f6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d005      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2204      	movs	r2, #4
 8003a08:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	73fb      	strb	r3, [r7, #15]
 8003a0e:	e029      	b.n	8003a64 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 020e 	bic.w	r2, r2, #14
 8003a1e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f022 0201 	bic.w	r2, r2, #1
 8003a2e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a34:	f003 021c 	and.w	r2, r3, #28
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a42:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d003      	beq.n	8003a64 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	4798      	blx	r3
    }
  }
  return status;
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b084      	sub	sp, #16
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a8a:	f003 031c 	and.w	r3, r3, #28
 8003a8e:	2204      	movs	r2, #4
 8003a90:	409a      	lsls	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	4013      	ands	r3, r2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d026      	beq.n	8003ae8 <HAL_DMA_IRQHandler+0x7a>
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	f003 0304 	and.w	r3, r3, #4
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d021      	beq.n	8003ae8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0320 	and.w	r3, r3, #32
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d107      	bne.n	8003ac2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 0204 	bic.w	r2, r2, #4
 8003ac0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ac6:	f003 021c 	and.w	r2, r3, #28
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ace:	2104      	movs	r1, #4
 8003ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ad4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d071      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003ae6:	e06c      	b.n	8003bc2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aec:	f003 031c 	and.w	r3, r3, #28
 8003af0:	2202      	movs	r2, #2
 8003af2:	409a      	lsls	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4013      	ands	r3, r2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d02e      	beq.n	8003b5a <HAL_DMA_IRQHandler+0xec>
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d029      	beq.n	8003b5a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0320 	and.w	r3, r3, #32
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10b      	bne.n	8003b2c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f022 020a 	bic.w	r2, r2, #10
 8003b22:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b30:	f003 021c 	and.w	r2, r3, #28
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b38:	2102      	movs	r1, #2
 8003b3a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b3e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d038      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003b58:	e033      	b.n	8003bc2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b5e:	f003 031c 	and.w	r3, r3, #28
 8003b62:	2208      	movs	r2, #8
 8003b64:	409a      	lsls	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	4013      	ands	r3, r2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d02a      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x156>
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	f003 0308 	and.w	r3, r3, #8
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d025      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 020e 	bic.w	r2, r2, #14
 8003b86:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b8c:	f003 021c 	and.w	r2, r3, #28
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b94:	2101      	movs	r1, #1
 8003b96:	fa01 f202 	lsl.w	r2, r1, r2
 8003b9a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d004      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003bc2:	bf00      	nop
 8003bc4:	bf00      	nop
}
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
 8003bd8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bde:	f003 021c 	and.w	r2, r3, #28
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be6:	2101      	movs	r1, #1
 8003be8:	fa01 f202 	lsl.w	r2, r1, r2
 8003bec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	683a      	ldr	r2, [r7, #0]
 8003bf4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	2b10      	cmp	r3, #16
 8003bfc:	d108      	bne.n	8003c10 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68ba      	ldr	r2, [r7, #8]
 8003c0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003c0e:	e007      	b.n	8003c20 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68ba      	ldr	r2, [r7, #8]
 8003c16:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	60da      	str	r2, [r3, #12]
}
 8003c20:	bf00      	nop
 8003c22:	3714      	adds	r7, #20
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b087      	sub	sp, #28
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c36:	2300      	movs	r3, #0
 8003c38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c3a:	e166      	b.n	8003f0a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	2101      	movs	r1, #1
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	fa01 f303 	lsl.w	r3, r1, r3
 8003c48:	4013      	ands	r3, r2
 8003c4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f000 8158 	beq.w	8003f04 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f003 0303 	and.w	r3, r3, #3
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d005      	beq.n	8003c6c <HAL_GPIO_Init+0x40>
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f003 0303 	and.w	r3, r3, #3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d130      	bne.n	8003cce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	2203      	movs	r2, #3
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	43db      	mvns	r3, r3
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	4013      	ands	r3, r2
 8003c82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	68da      	ldr	r2, [r3, #12]
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8003caa:	43db      	mvns	r3, r3
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	091b      	lsrs	r3, r3, #4
 8003cb8:	f003 0201 	and.w	r2, r3, #1
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f003 0303 	and.w	r3, r3, #3
 8003cd6:	2b03      	cmp	r3, #3
 8003cd8:	d017      	beq.n	8003d0a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	2203      	movs	r2, #3
 8003ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cea:	43db      	mvns	r3, r3
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	689a      	ldr	r2, [r3, #8]
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f003 0303 	and.w	r3, r3, #3
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d123      	bne.n	8003d5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	08da      	lsrs	r2, r3, #3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	3208      	adds	r2, #8
 8003d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	f003 0307 	and.w	r3, r3, #7
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	220f      	movs	r2, #15
 8003d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d32:	43db      	mvns	r3, r3
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	4013      	ands	r3, r2
 8003d38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	691a      	ldr	r2, [r3, #16]
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f003 0307 	and.w	r3, r3, #7
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	08da      	lsrs	r2, r3, #3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	3208      	adds	r2, #8
 8003d58:	6939      	ldr	r1, [r7, #16]
 8003d5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	2203      	movs	r2, #3
 8003d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6e:	43db      	mvns	r3, r3
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	4013      	ands	r3, r2
 8003d74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f003 0203 	and.w	r2, r3, #3
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	fa02 f303 	lsl.w	r3, r2, r3
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f000 80b2 	beq.w	8003f04 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003da0:	4b61      	ldr	r3, [pc, #388]	@ (8003f28 <HAL_GPIO_Init+0x2fc>)
 8003da2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003da4:	4a60      	ldr	r2, [pc, #384]	@ (8003f28 <HAL_GPIO_Init+0x2fc>)
 8003da6:	f043 0301 	orr.w	r3, r3, #1
 8003daa:	6613      	str	r3, [r2, #96]	@ 0x60
 8003dac:	4b5e      	ldr	r3, [pc, #376]	@ (8003f28 <HAL_GPIO_Init+0x2fc>)
 8003dae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	60bb      	str	r3, [r7, #8]
 8003db6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003db8:	4a5c      	ldr	r2, [pc, #368]	@ (8003f2c <HAL_GPIO_Init+0x300>)
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	089b      	lsrs	r3, r3, #2
 8003dbe:	3302      	adds	r3, #2
 8003dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	f003 0303 	and.w	r3, r3, #3
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	220f      	movs	r2, #15
 8003dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd4:	43db      	mvns	r3, r3
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003de2:	d02b      	beq.n	8003e3c <HAL_GPIO_Init+0x210>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a52      	ldr	r2, [pc, #328]	@ (8003f30 <HAL_GPIO_Init+0x304>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d025      	beq.n	8003e38 <HAL_GPIO_Init+0x20c>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a51      	ldr	r2, [pc, #324]	@ (8003f34 <HAL_GPIO_Init+0x308>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d01f      	beq.n	8003e34 <HAL_GPIO_Init+0x208>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a50      	ldr	r2, [pc, #320]	@ (8003f38 <HAL_GPIO_Init+0x30c>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d019      	beq.n	8003e30 <HAL_GPIO_Init+0x204>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a4f      	ldr	r2, [pc, #316]	@ (8003f3c <HAL_GPIO_Init+0x310>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d013      	beq.n	8003e2c <HAL_GPIO_Init+0x200>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a4e      	ldr	r2, [pc, #312]	@ (8003f40 <HAL_GPIO_Init+0x314>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d00d      	beq.n	8003e28 <HAL_GPIO_Init+0x1fc>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a4d      	ldr	r2, [pc, #308]	@ (8003f44 <HAL_GPIO_Init+0x318>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d007      	beq.n	8003e24 <HAL_GPIO_Init+0x1f8>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a4c      	ldr	r2, [pc, #304]	@ (8003f48 <HAL_GPIO_Init+0x31c>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d101      	bne.n	8003e20 <HAL_GPIO_Init+0x1f4>
 8003e1c:	2307      	movs	r3, #7
 8003e1e:	e00e      	b.n	8003e3e <HAL_GPIO_Init+0x212>
 8003e20:	2308      	movs	r3, #8
 8003e22:	e00c      	b.n	8003e3e <HAL_GPIO_Init+0x212>
 8003e24:	2306      	movs	r3, #6
 8003e26:	e00a      	b.n	8003e3e <HAL_GPIO_Init+0x212>
 8003e28:	2305      	movs	r3, #5
 8003e2a:	e008      	b.n	8003e3e <HAL_GPIO_Init+0x212>
 8003e2c:	2304      	movs	r3, #4
 8003e2e:	e006      	b.n	8003e3e <HAL_GPIO_Init+0x212>
 8003e30:	2303      	movs	r3, #3
 8003e32:	e004      	b.n	8003e3e <HAL_GPIO_Init+0x212>
 8003e34:	2302      	movs	r3, #2
 8003e36:	e002      	b.n	8003e3e <HAL_GPIO_Init+0x212>
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e000      	b.n	8003e3e <HAL_GPIO_Init+0x212>
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	f002 0203 	and.w	r2, r2, #3
 8003e44:	0092      	lsls	r2, r2, #2
 8003e46:	4093      	lsls	r3, r2
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e4e:	4937      	ldr	r1, [pc, #220]	@ (8003f2c <HAL_GPIO_Init+0x300>)
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	089b      	lsrs	r3, r3, #2
 8003e54:	3302      	adds	r3, #2
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e5c:	4b3b      	ldr	r3, [pc, #236]	@ (8003f4c <HAL_GPIO_Init+0x320>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	43db      	mvns	r3, r3
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d003      	beq.n	8003e80 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e80:	4a32      	ldr	r2, [pc, #200]	@ (8003f4c <HAL_GPIO_Init+0x320>)
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e86:	4b31      	ldr	r3, [pc, #196]	@ (8003f4c <HAL_GPIO_Init+0x320>)
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	43db      	mvns	r3, r3
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	4013      	ands	r3, r2
 8003e94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d003      	beq.n	8003eaa <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003eaa:	4a28      	ldr	r2, [pc, #160]	@ (8003f4c <HAL_GPIO_Init+0x320>)
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003eb0:	4b26      	ldr	r3, [pc, #152]	@ (8003f4c <HAL_GPIO_Init+0x320>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	43db      	mvns	r3, r3
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d003      	beq.n	8003ed4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ed4:	4a1d      	ldr	r2, [pc, #116]	@ (8003f4c <HAL_GPIO_Init+0x320>)
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003eda:	4b1c      	ldr	r3, [pc, #112]	@ (8003f4c <HAL_GPIO_Init+0x320>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	43db      	mvns	r3, r3
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d003      	beq.n	8003efe <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003efe:	4a13      	ldr	r2, [pc, #76]	@ (8003f4c <HAL_GPIO_Init+0x320>)
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	3301      	adds	r3, #1
 8003f08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	fa22 f303 	lsr.w	r3, r2, r3
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f47f ae91 	bne.w	8003c3c <HAL_GPIO_Init+0x10>
  }
}
 8003f1a:	bf00      	nop
 8003f1c:	bf00      	nop
 8003f1e:	371c      	adds	r7, #28
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr
 8003f28:	40021000 	.word	0x40021000
 8003f2c:	40010000 	.word	0x40010000
 8003f30:	48000400 	.word	0x48000400
 8003f34:	48000800 	.word	0x48000800
 8003f38:	48000c00 	.word	0x48000c00
 8003f3c:	48001000 	.word	0x48001000
 8003f40:	48001400 	.word	0x48001400
 8003f44:	48001800 	.word	0x48001800
 8003f48:	48001c00 	.word	0x48001c00
 8003f4c:	40010400 	.word	0x40010400

08003f50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	460b      	mov	r3, r1
 8003f5a:	807b      	strh	r3, [r7, #2]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f60:	787b      	ldrb	r3, [r7, #1]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d003      	beq.n	8003f6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f66:	887a      	ldrh	r2, [r7, #2]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f6c:	e002      	b.n	8003f74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f6e:	887a      	ldrh	r2, [r7, #2]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	460b      	mov	r3, r1
 8003f8a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f92:	887a      	ldrh	r2, [r7, #2]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	4013      	ands	r3, r2
 8003f98:	041a      	lsls	r2, r3, #16
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	43d9      	mvns	r1, r3
 8003f9e:	887b      	ldrh	r3, [r7, #2]
 8003fa0:	400b      	ands	r3, r1
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	619a      	str	r2, [r3, #24]
}
 8003fa8:	bf00      	nop
 8003faa:	3714      	adds	r7, #20
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	4603      	mov	r3, r0
 8003fbc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003fbe:	4b08      	ldr	r3, [pc, #32]	@ (8003fe0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fc0:	695a      	ldr	r2, [r3, #20]
 8003fc2:	88fb      	ldrh	r3, [r7, #6]
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d006      	beq.n	8003fd8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003fca:	4a05      	ldr	r2, [pc, #20]	@ (8003fe0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fcc:	88fb      	ldrh	r3, [r7, #6]
 8003fce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003fd0:	88fb      	ldrh	r3, [r7, #6]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7fc fc48 	bl	8000868 <HAL_GPIO_EXTI_Callback>
  }
}
 8003fd8:	bf00      	nop
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	40010400 	.word	0x40010400

08003fe4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e08d      	b.n	8004112 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d106      	bne.n	8004010 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7fd faaa 	bl	8001564 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2224      	movs	r2, #36	@ 0x24
 8004014:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 0201 	bic.w	r2, r2, #1
 8004026:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004034:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004044:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	2b01      	cmp	r3, #1
 800404c:	d107      	bne.n	800405e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689a      	ldr	r2, [r3, #8]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800405a:	609a      	str	r2, [r3, #8]
 800405c:	e006      	b.n	800406c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	689a      	ldr	r2, [r3, #8]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800406a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	2b02      	cmp	r3, #2
 8004072:	d108      	bne.n	8004086 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004082:	605a      	str	r2, [r3, #4]
 8004084:	e007      	b.n	8004096 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004094:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	6812      	ldr	r2, [r2, #0]
 80040a0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80040a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68da      	ldr	r2, [r3, #12]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80040b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	691a      	ldr	r2, [r3, #16]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	430a      	orrs	r2, r1
 80040d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	69d9      	ldr	r1, [r3, #28]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a1a      	ldr	r2, [r3, #32]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	430a      	orrs	r2, r1
 80040e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f042 0201 	orr.w	r2, r2, #1
 80040f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2220      	movs	r2, #32
 80040fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3708      	adds	r7, #8
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
	...

0800411c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b088      	sub	sp, #32
 8004120:	af02      	add	r7, sp, #8
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	4608      	mov	r0, r1
 8004126:	4611      	mov	r1, r2
 8004128:	461a      	mov	r2, r3
 800412a:	4603      	mov	r3, r0
 800412c:	817b      	strh	r3, [r7, #10]
 800412e:	460b      	mov	r3, r1
 8004130:	813b      	strh	r3, [r7, #8]
 8004132:	4613      	mov	r3, r2
 8004134:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b20      	cmp	r3, #32
 8004140:	f040 80f9 	bne.w	8004336 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004144:	6a3b      	ldr	r3, [r7, #32]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d002      	beq.n	8004150 <HAL_I2C_Mem_Write+0x34>
 800414a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800414c:	2b00      	cmp	r3, #0
 800414e:	d105      	bne.n	800415c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004156:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e0ed      	b.n	8004338 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004162:	2b01      	cmp	r3, #1
 8004164:	d101      	bne.n	800416a <HAL_I2C_Mem_Write+0x4e>
 8004166:	2302      	movs	r3, #2
 8004168:	e0e6      	b.n	8004338 <HAL_I2C_Mem_Write+0x21c>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004172:	f7fd fbdf 	bl	8001934 <HAL_GetTick>
 8004176:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	2319      	movs	r3, #25
 800417e:	2201      	movs	r2, #1
 8004180:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	f000 fac3 	bl	8004710 <I2C_WaitOnFlagUntilTimeout>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d001      	beq.n	8004194 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e0d1      	b.n	8004338 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2221      	movs	r2, #33	@ 0x21
 8004198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2240      	movs	r2, #64	@ 0x40
 80041a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6a3a      	ldr	r2, [r7, #32]
 80041ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80041b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041bc:	88f8      	ldrh	r0, [r7, #6]
 80041be:	893a      	ldrh	r2, [r7, #8]
 80041c0:	8979      	ldrh	r1, [r7, #10]
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	9301      	str	r3, [sp, #4]
 80041c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041c8:	9300      	str	r3, [sp, #0]
 80041ca:	4603      	mov	r3, r0
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f000 f9d3 	bl	8004578 <I2C_RequestMemoryWrite>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d005      	beq.n	80041e4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e0a9      	b.n	8004338 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	2bff      	cmp	r3, #255	@ 0xff
 80041ec:	d90e      	bls.n	800420c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	22ff      	movs	r2, #255	@ 0xff
 80041f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041f8:	b2da      	uxtb	r2, r3
 80041fa:	8979      	ldrh	r1, [r7, #10]
 80041fc:	2300      	movs	r3, #0
 80041fe:	9300      	str	r3, [sp, #0]
 8004200:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f000 fc47 	bl	8004a98 <I2C_TransferConfig>
 800420a:	e00f      	b.n	800422c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004210:	b29a      	uxth	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800421a:	b2da      	uxtb	r2, r3
 800421c:	8979      	ldrh	r1, [r7, #10]
 800421e:	2300      	movs	r3, #0
 8004220:	9300      	str	r3, [sp, #0]
 8004222:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f000 fc36 	bl	8004a98 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f000 fac6 	bl	80047c2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d001      	beq.n	8004240 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e07b      	b.n	8004338 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004244:	781a      	ldrb	r2, [r3, #0]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004250:	1c5a      	adds	r2, r3, #1
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800425a:	b29b      	uxth	r3, r3
 800425c:	3b01      	subs	r3, #1
 800425e:	b29a      	uxth	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004268:	3b01      	subs	r3, #1
 800426a:	b29a      	uxth	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004274:	b29b      	uxth	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d034      	beq.n	80042e4 <HAL_I2C_Mem_Write+0x1c8>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800427e:	2b00      	cmp	r3, #0
 8004280:	d130      	bne.n	80042e4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	9300      	str	r3, [sp, #0]
 8004286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004288:	2200      	movs	r2, #0
 800428a:	2180      	movs	r1, #128	@ 0x80
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f000 fa3f 	bl	8004710 <I2C_WaitOnFlagUntilTimeout>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d001      	beq.n	800429c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e04d      	b.n	8004338 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	2bff      	cmp	r3, #255	@ 0xff
 80042a4:	d90e      	bls.n	80042c4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	22ff      	movs	r2, #255	@ 0xff
 80042aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042b0:	b2da      	uxtb	r2, r3
 80042b2:	8979      	ldrh	r1, [r7, #10]
 80042b4:	2300      	movs	r3, #0
 80042b6:	9300      	str	r3, [sp, #0]
 80042b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f000 fbeb 	bl	8004a98 <I2C_TransferConfig>
 80042c2:	e00f      	b.n	80042e4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	8979      	ldrh	r1, [r7, #10]
 80042d6:	2300      	movs	r3, #0
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f000 fbda 	bl	8004a98 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d19e      	bne.n	800422c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f000 faac 	bl	8004850 <I2C_WaitOnSTOPFlagUntilTimeout>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e01a      	b.n	8004338 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2220      	movs	r2, #32
 8004308:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	6859      	ldr	r1, [r3, #4]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	4b0a      	ldr	r3, [pc, #40]	@ (8004340 <HAL_I2C_Mem_Write+0x224>)
 8004316:	400b      	ands	r3, r1
 8004318:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2220      	movs	r2, #32
 800431e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004332:	2300      	movs	r3, #0
 8004334:	e000      	b.n	8004338 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004336:	2302      	movs	r3, #2
  }
}
 8004338:	4618      	mov	r0, r3
 800433a:	3718      	adds	r7, #24
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	fe00e800 	.word	0xfe00e800

08004344 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b088      	sub	sp, #32
 8004348:	af02      	add	r7, sp, #8
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	4608      	mov	r0, r1
 800434e:	4611      	mov	r1, r2
 8004350:	461a      	mov	r2, r3
 8004352:	4603      	mov	r3, r0
 8004354:	817b      	strh	r3, [r7, #10]
 8004356:	460b      	mov	r3, r1
 8004358:	813b      	strh	r3, [r7, #8]
 800435a:	4613      	mov	r3, r2
 800435c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b20      	cmp	r3, #32
 8004368:	f040 80fd 	bne.w	8004566 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800436c:	6a3b      	ldr	r3, [r7, #32]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d002      	beq.n	8004378 <HAL_I2C_Mem_Read+0x34>
 8004372:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004374:	2b00      	cmp	r3, #0
 8004376:	d105      	bne.n	8004384 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800437e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e0f1      	b.n	8004568 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800438a:	2b01      	cmp	r3, #1
 800438c:	d101      	bne.n	8004392 <HAL_I2C_Mem_Read+0x4e>
 800438e:	2302      	movs	r3, #2
 8004390:	e0ea      	b.n	8004568 <HAL_I2C_Mem_Read+0x224>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800439a:	f7fd facb 	bl	8001934 <HAL_GetTick>
 800439e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	2319      	movs	r3, #25
 80043a6:	2201      	movs	r2, #1
 80043a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	f000 f9af 	bl	8004710 <I2C_WaitOnFlagUntilTimeout>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d001      	beq.n	80043bc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e0d5      	b.n	8004568 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2222      	movs	r2, #34	@ 0x22
 80043c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2240      	movs	r2, #64	@ 0x40
 80043c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6a3a      	ldr	r2, [r7, #32]
 80043d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80043dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043e4:	88f8      	ldrh	r0, [r7, #6]
 80043e6:	893a      	ldrh	r2, [r7, #8]
 80043e8:	8979      	ldrh	r1, [r7, #10]
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	9301      	str	r3, [sp, #4]
 80043ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043f0:	9300      	str	r3, [sp, #0]
 80043f2:	4603      	mov	r3, r0
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f000 f913 	bl	8004620 <I2C_RequestMemoryRead>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d005      	beq.n	800440c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e0ad      	b.n	8004568 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004410:	b29b      	uxth	r3, r3
 8004412:	2bff      	cmp	r3, #255	@ 0xff
 8004414:	d90e      	bls.n	8004434 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2201      	movs	r2, #1
 800441a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004420:	b2da      	uxtb	r2, r3
 8004422:	8979      	ldrh	r1, [r7, #10]
 8004424:	4b52      	ldr	r3, [pc, #328]	@ (8004570 <HAL_I2C_Mem_Read+0x22c>)
 8004426:	9300      	str	r3, [sp, #0]
 8004428:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f000 fb33 	bl	8004a98 <I2C_TransferConfig>
 8004432:	e00f      	b.n	8004454 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004438:	b29a      	uxth	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004442:	b2da      	uxtb	r2, r3
 8004444:	8979      	ldrh	r1, [r7, #10]
 8004446:	4b4a      	ldr	r3, [pc, #296]	@ (8004570 <HAL_I2C_Mem_Read+0x22c>)
 8004448:	9300      	str	r3, [sp, #0]
 800444a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f000 fb22 	bl	8004a98 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	9300      	str	r3, [sp, #0]
 8004458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800445a:	2200      	movs	r2, #0
 800445c:	2104      	movs	r1, #4
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f000 f956 	bl	8004710 <I2C_WaitOnFlagUntilTimeout>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e07c      	b.n	8004568 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004478:	b2d2      	uxtb	r2, r2
 800447a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004480:	1c5a      	adds	r2, r3, #1
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800448a:	3b01      	subs	r3, #1
 800448c:	b29a      	uxth	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004496:	b29b      	uxth	r3, r3
 8004498:	3b01      	subs	r3, #1
 800449a:	b29a      	uxth	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d034      	beq.n	8004514 <HAL_I2C_Mem_Read+0x1d0>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d130      	bne.n	8004514 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044b8:	2200      	movs	r2, #0
 80044ba:	2180      	movs	r1, #128	@ 0x80
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f000 f927 	bl	8004710 <I2C_WaitOnFlagUntilTimeout>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d001      	beq.n	80044cc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e04d      	b.n	8004568 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	2bff      	cmp	r3, #255	@ 0xff
 80044d4:	d90e      	bls.n	80044f4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2201      	movs	r2, #1
 80044da:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044e0:	b2da      	uxtb	r2, r3
 80044e2:	8979      	ldrh	r1, [r7, #10]
 80044e4:	2300      	movs	r3, #0
 80044e6:	9300      	str	r3, [sp, #0]
 80044e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f000 fad3 	bl	8004a98 <I2C_TransferConfig>
 80044f2:	e00f      	b.n	8004514 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004502:	b2da      	uxtb	r2, r3
 8004504:	8979      	ldrh	r1, [r7, #10]
 8004506:	2300      	movs	r3, #0
 8004508:	9300      	str	r3, [sp, #0]
 800450a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f000 fac2 	bl	8004a98 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004518:	b29b      	uxth	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d19a      	bne.n	8004454 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 f994 	bl	8004850 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e01a      	b.n	8004568 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2220      	movs	r2, #32
 8004538:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	6859      	ldr	r1, [r3, #4]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	4b0b      	ldr	r3, [pc, #44]	@ (8004574 <HAL_I2C_Mem_Read+0x230>)
 8004546:	400b      	ands	r3, r1
 8004548:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2220      	movs	r2, #32
 800454e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004562:	2300      	movs	r3, #0
 8004564:	e000      	b.n	8004568 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004566:	2302      	movs	r3, #2
  }
}
 8004568:	4618      	mov	r0, r3
 800456a:	3718      	adds	r7, #24
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	80002400 	.word	0x80002400
 8004574:	fe00e800 	.word	0xfe00e800

08004578 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b086      	sub	sp, #24
 800457c:	af02      	add	r7, sp, #8
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	4608      	mov	r0, r1
 8004582:	4611      	mov	r1, r2
 8004584:	461a      	mov	r2, r3
 8004586:	4603      	mov	r3, r0
 8004588:	817b      	strh	r3, [r7, #10]
 800458a:	460b      	mov	r3, r1
 800458c:	813b      	strh	r3, [r7, #8]
 800458e:	4613      	mov	r3, r2
 8004590:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004592:	88fb      	ldrh	r3, [r7, #6]
 8004594:	b2da      	uxtb	r2, r3
 8004596:	8979      	ldrh	r1, [r7, #10]
 8004598:	4b20      	ldr	r3, [pc, #128]	@ (800461c <I2C_RequestMemoryWrite+0xa4>)
 800459a:	9300      	str	r3, [sp, #0]
 800459c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f000 fa79 	bl	8004a98 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045a6:	69fa      	ldr	r2, [r7, #28]
 80045a8:	69b9      	ldr	r1, [r7, #24]
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f000 f909 	bl	80047c2 <I2C_WaitOnTXISFlagUntilTimeout>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e02c      	b.n	8004614 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045ba:	88fb      	ldrh	r3, [r7, #6]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d105      	bne.n	80045cc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80045c0:	893b      	ldrh	r3, [r7, #8]
 80045c2:	b2da      	uxtb	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80045ca:	e015      	b.n	80045f8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80045cc:	893b      	ldrh	r3, [r7, #8]
 80045ce:	0a1b      	lsrs	r3, r3, #8
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	b2da      	uxtb	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045da:	69fa      	ldr	r2, [r7, #28]
 80045dc:	69b9      	ldr	r1, [r7, #24]
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	f000 f8ef 	bl	80047c2 <I2C_WaitOnTXISFlagUntilTimeout>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d001      	beq.n	80045ee <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e012      	b.n	8004614 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80045ee:	893b      	ldrh	r3, [r7, #8]
 80045f0:	b2da      	uxtb	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	9300      	str	r3, [sp, #0]
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	2200      	movs	r2, #0
 8004600:	2180      	movs	r1, #128	@ 0x80
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f000 f884 	bl	8004710 <I2C_WaitOnFlagUntilTimeout>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e000      	b.n	8004614 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	80002000 	.word	0x80002000

08004620 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af02      	add	r7, sp, #8
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	4608      	mov	r0, r1
 800462a:	4611      	mov	r1, r2
 800462c:	461a      	mov	r2, r3
 800462e:	4603      	mov	r3, r0
 8004630:	817b      	strh	r3, [r7, #10]
 8004632:	460b      	mov	r3, r1
 8004634:	813b      	strh	r3, [r7, #8]
 8004636:	4613      	mov	r3, r2
 8004638:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800463a:	88fb      	ldrh	r3, [r7, #6]
 800463c:	b2da      	uxtb	r2, r3
 800463e:	8979      	ldrh	r1, [r7, #10]
 8004640:	4b20      	ldr	r3, [pc, #128]	@ (80046c4 <I2C_RequestMemoryRead+0xa4>)
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	2300      	movs	r3, #0
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f000 fa26 	bl	8004a98 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800464c:	69fa      	ldr	r2, [r7, #28]
 800464e:	69b9      	ldr	r1, [r7, #24]
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f000 f8b6 	bl	80047c2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d001      	beq.n	8004660 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e02c      	b.n	80046ba <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004660:	88fb      	ldrh	r3, [r7, #6]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d105      	bne.n	8004672 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004666:	893b      	ldrh	r3, [r7, #8]
 8004668:	b2da      	uxtb	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004670:	e015      	b.n	800469e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004672:	893b      	ldrh	r3, [r7, #8]
 8004674:	0a1b      	lsrs	r3, r3, #8
 8004676:	b29b      	uxth	r3, r3
 8004678:	b2da      	uxtb	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004680:	69fa      	ldr	r2, [r7, #28]
 8004682:	69b9      	ldr	r1, [r7, #24]
 8004684:	68f8      	ldr	r0, [r7, #12]
 8004686:	f000 f89c 	bl	80047c2 <I2C_WaitOnTXISFlagUntilTimeout>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d001      	beq.n	8004694 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e012      	b.n	80046ba <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004694:	893b      	ldrh	r3, [r7, #8]
 8004696:	b2da      	uxtb	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	9300      	str	r3, [sp, #0]
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	2200      	movs	r2, #0
 80046a6:	2140      	movs	r1, #64	@ 0x40
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f000 f831 	bl	8004710 <I2C_WaitOnFlagUntilTimeout>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d001      	beq.n	80046b8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e000      	b.n	80046ba <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	80002000 	.word	0x80002000

080046c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d103      	bne.n	80046e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2200      	movs	r2, #0
 80046e4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	f003 0301 	and.w	r3, r3, #1
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d007      	beq.n	8004704 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	699a      	ldr	r2, [r3, #24]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f042 0201 	orr.w	r2, r2, #1
 8004702:	619a      	str	r2, [r3, #24]
  }
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	603b      	str	r3, [r7, #0]
 800471c:	4613      	mov	r3, r2
 800471e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004720:	e03b      	b.n	800479a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	6839      	ldr	r1, [r7, #0]
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	f000 f8d6 	bl	80048d8 <I2C_IsErrorOccurred>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e041      	b.n	80047ba <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800473c:	d02d      	beq.n	800479a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800473e:	f7fd f8f9 	bl	8001934 <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	683a      	ldr	r2, [r7, #0]
 800474a:	429a      	cmp	r2, r3
 800474c:	d302      	bcc.n	8004754 <I2C_WaitOnFlagUntilTimeout+0x44>
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d122      	bne.n	800479a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	699a      	ldr	r2, [r3, #24]
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	4013      	ands	r3, r2
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	429a      	cmp	r2, r3
 8004762:	bf0c      	ite	eq
 8004764:	2301      	moveq	r3, #1
 8004766:	2300      	movne	r3, #0
 8004768:	b2db      	uxtb	r3, r3
 800476a:	461a      	mov	r2, r3
 800476c:	79fb      	ldrb	r3, [r7, #7]
 800476e:	429a      	cmp	r2, r3
 8004770:	d113      	bne.n	800479a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004776:	f043 0220 	orr.w	r2, r3, #32
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2220      	movs	r2, #32
 8004782:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e00f      	b.n	80047ba <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	699a      	ldr	r2, [r3, #24]
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	4013      	ands	r3, r2
 80047a4:	68ba      	ldr	r2, [r7, #8]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	bf0c      	ite	eq
 80047aa:	2301      	moveq	r3, #1
 80047ac:	2300      	movne	r3, #0
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	461a      	mov	r2, r3
 80047b2:	79fb      	ldrb	r3, [r7, #7]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d0b4      	beq.n	8004722 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b084      	sub	sp, #16
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	60f8      	str	r0, [r7, #12]
 80047ca:	60b9      	str	r1, [r7, #8]
 80047cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80047ce:	e033      	b.n	8004838 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	68b9      	ldr	r1, [r7, #8]
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f000 f87f 	bl	80048d8 <I2C_IsErrorOccurred>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d001      	beq.n	80047e4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e031      	b.n	8004848 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80047ea:	d025      	beq.n	8004838 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ec:	f7fd f8a2 	bl	8001934 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	68ba      	ldr	r2, [r7, #8]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d302      	bcc.n	8004802 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d11a      	bne.n	8004838 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	2b02      	cmp	r3, #2
 800480e:	d013      	beq.n	8004838 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004814:	f043 0220 	orr.w	r2, r3, #32
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2220      	movs	r2, #32
 8004820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e007      	b.n	8004848 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	2b02      	cmp	r3, #2
 8004844:	d1c4      	bne.n	80047d0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3710      	adds	r7, #16
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800485c:	e02f      	b.n	80048be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	68b9      	ldr	r1, [r7, #8]
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f000 f838 	bl	80048d8 <I2C_IsErrorOccurred>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e02d      	b.n	80048ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004872:	f7fd f85f 	bl	8001934 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	429a      	cmp	r2, r3
 8004880:	d302      	bcc.n	8004888 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d11a      	bne.n	80048be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	f003 0320 	and.w	r3, r3, #32
 8004892:	2b20      	cmp	r3, #32
 8004894:	d013      	beq.n	80048be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800489a:	f043 0220 	orr.w	r2, r3, #32
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2220      	movs	r2, #32
 80048a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e007      	b.n	80048ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	f003 0320 	and.w	r3, r3, #32
 80048c8:	2b20      	cmp	r3, #32
 80048ca:	d1c8      	bne.n	800485e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
	...

080048d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b08a      	sub	sp, #40	@ 0x28
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048e4:	2300      	movs	r3, #0
 80048e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80048f2:	2300      	movs	r3, #0
 80048f4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	f003 0310 	and.w	r3, r3, #16
 8004900:	2b00      	cmp	r3, #0
 8004902:	d068      	beq.n	80049d6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2210      	movs	r2, #16
 800490a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800490c:	e049      	b.n	80049a2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004914:	d045      	beq.n	80049a2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004916:	f7fd f80d 	bl	8001934 <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	429a      	cmp	r2, r3
 8004924:	d302      	bcc.n	800492c <I2C_IsErrorOccurred+0x54>
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d13a      	bne.n	80049a2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004936:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800493e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800494a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800494e:	d121      	bne.n	8004994 <I2C_IsErrorOccurred+0xbc>
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004956:	d01d      	beq.n	8004994 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004958:	7cfb      	ldrb	r3, [r7, #19]
 800495a:	2b20      	cmp	r3, #32
 800495c:	d01a      	beq.n	8004994 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	685a      	ldr	r2, [r3, #4]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800496c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800496e:	f7fc ffe1 	bl	8001934 <HAL_GetTick>
 8004972:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004974:	e00e      	b.n	8004994 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004976:	f7fc ffdd 	bl	8001934 <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	2b19      	cmp	r3, #25
 8004982:	d907      	bls.n	8004994 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004984:	6a3b      	ldr	r3, [r7, #32]
 8004986:	f043 0320 	orr.w	r3, r3, #32
 800498a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004992:	e006      	b.n	80049a2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	f003 0320 	and.w	r3, r3, #32
 800499e:	2b20      	cmp	r3, #32
 80049a0:	d1e9      	bne.n	8004976 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	f003 0320 	and.w	r3, r3, #32
 80049ac:	2b20      	cmp	r3, #32
 80049ae:	d003      	beq.n	80049b8 <I2C_IsErrorOccurred+0xe0>
 80049b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d0aa      	beq.n	800490e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80049b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d103      	bne.n	80049c8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2220      	movs	r2, #32
 80049c6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80049c8:	6a3b      	ldr	r3, [r7, #32]
 80049ca:	f043 0304 	orr.w	r3, r3, #4
 80049ce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00b      	beq.n	8004a00 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80049e8:	6a3b      	ldr	r3, [r7, #32]
 80049ea:	f043 0301 	orr.w	r3, r3, #1
 80049ee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80049f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00b      	beq.n	8004a22 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004a0a:	6a3b      	ldr	r3, [r7, #32]
 8004a0c:	f043 0308 	orr.w	r3, r3, #8
 8004a10:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004a1a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00b      	beq.n	8004a44 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004a2c:	6a3b      	ldr	r3, [r7, #32]
 8004a2e:	f043 0302 	orr.w	r3, r3, #2
 8004a32:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004a44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d01c      	beq.n	8004a86 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f7ff fe3b 	bl	80046c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	6859      	ldr	r1, [r3, #4]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	4b0d      	ldr	r3, [pc, #52]	@ (8004a94 <I2C_IsErrorOccurred+0x1bc>)
 8004a5e:	400b      	ands	r3, r1
 8004a60:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a66:	6a3b      	ldr	r3, [r7, #32]
 8004a68:	431a      	orrs	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2220      	movs	r2, #32
 8004a72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004a86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3728      	adds	r7, #40	@ 0x28
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	fe00e800 	.word	0xfe00e800

08004a98 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b087      	sub	sp, #28
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	607b      	str	r3, [r7, #4]
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	817b      	strh	r3, [r7, #10]
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004aaa:	897b      	ldrh	r3, [r7, #10]
 8004aac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004ab0:	7a7b      	ldrb	r3, [r7, #9]
 8004ab2:	041b      	lsls	r3, r3, #16
 8004ab4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ab8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004abe:	6a3b      	ldr	r3, [r7, #32]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004ac6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685a      	ldr	r2, [r3, #4]
 8004ace:	6a3b      	ldr	r3, [r7, #32]
 8004ad0:	0d5b      	lsrs	r3, r3, #21
 8004ad2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004ad6:	4b08      	ldr	r3, [pc, #32]	@ (8004af8 <I2C_TransferConfig+0x60>)
 8004ad8:	430b      	orrs	r3, r1
 8004ada:	43db      	mvns	r3, r3
 8004adc:	ea02 0103 	and.w	r1, r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004aea:	bf00      	nop
 8004aec:	371c      	adds	r7, #28
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	03ff63ff 	.word	0x03ff63ff

08004afc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b20      	cmp	r3, #32
 8004b10:	d138      	bne.n	8004b84 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d101      	bne.n	8004b20 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	e032      	b.n	8004b86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2224      	movs	r2, #36	@ 0x24
 8004b2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f022 0201 	bic.w	r2, r2, #1
 8004b3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004b4e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6819      	ldr	r1, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	683a      	ldr	r2, [r7, #0]
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f042 0201 	orr.w	r2, r2, #1
 8004b6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2220      	movs	r2, #32
 8004b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004b80:	2300      	movs	r3, #0
 8004b82:	e000      	b.n	8004b86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004b84:	2302      	movs	r3, #2
  }
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	370c      	adds	r7, #12
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr

08004b92 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b92:	b480      	push	{r7}
 8004b94:	b085      	sub	sp, #20
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
 8004b9a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	2b20      	cmp	r3, #32
 8004ba6:	d139      	bne.n	8004c1c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d101      	bne.n	8004bb6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	e033      	b.n	8004c1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2224      	movs	r2, #36	@ 0x24
 8004bc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f022 0201 	bic.w	r2, r2, #1
 8004bd4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004be4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	021b      	lsls	r3, r3, #8
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f042 0201 	orr.w	r2, r2, #1
 8004c06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	e000      	b.n	8004c1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004c1c:	2302      	movs	r3, #2
  }
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3714      	adds	r7, #20
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
	...

08004c2c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004c30:	4b04      	ldr	r3, [pc, #16]	@ (8004c44 <HAL_PWREx_GetVoltageRange+0x18>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	40007000 	.word	0x40007000

08004c48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c56:	d130      	bne.n	8004cba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c58:	4b23      	ldr	r3, [pc, #140]	@ (8004ce8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004c60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c64:	d038      	beq.n	8004cd8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c66:	4b20      	ldr	r3, [pc, #128]	@ (8004ce8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004c6e:	4a1e      	ldr	r2, [pc, #120]	@ (8004ce8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c70:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c74:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c76:	4b1d      	ldr	r3, [pc, #116]	@ (8004cec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2232      	movs	r2, #50	@ 0x32
 8004c7c:	fb02 f303 	mul.w	r3, r2, r3
 8004c80:	4a1b      	ldr	r2, [pc, #108]	@ (8004cf0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004c82:	fba2 2303 	umull	r2, r3, r2, r3
 8004c86:	0c9b      	lsrs	r3, r3, #18
 8004c88:	3301      	adds	r3, #1
 8004c8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c8c:	e002      	b.n	8004c94 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	3b01      	subs	r3, #1
 8004c92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c94:	4b14      	ldr	r3, [pc, #80]	@ (8004ce8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ca0:	d102      	bne.n	8004ca8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1f2      	bne.n	8004c8e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8004ce8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cb4:	d110      	bne.n	8004cd8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e00f      	b.n	8004cda <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004cba:	4b0b      	ldr	r3, [pc, #44]	@ (8004ce8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004cc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cc6:	d007      	beq.n	8004cd8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004cc8:	4b07      	ldr	r3, [pc, #28]	@ (8004ce8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004cd0:	4a05      	ldr	r2, [pc, #20]	@ (8004ce8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004cd6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3714      	adds	r7, #20
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	40007000 	.word	0x40007000
 8004cec:	20000000 	.word	0x20000000
 8004cf0:	431bde83 	.word	0x431bde83

08004cf4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b088      	sub	sp, #32
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d102      	bne.n	8004d08 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	f000 bc08 	b.w	8005518 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d08:	4b96      	ldr	r3, [pc, #600]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f003 030c 	and.w	r3, r3, #12
 8004d10:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d12:	4b94      	ldr	r3, [pc, #592]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	f003 0303 	and.w	r3, r3, #3
 8004d1a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0310 	and.w	r3, r3, #16
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f000 80e4 	beq.w	8004ef2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d007      	beq.n	8004d40 <HAL_RCC_OscConfig+0x4c>
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	2b0c      	cmp	r3, #12
 8004d34:	f040 808b 	bne.w	8004e4e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	f040 8087 	bne.w	8004e4e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d40:	4b88      	ldr	r3, [pc, #544]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d005      	beq.n	8004d58 <HAL_RCC_OscConfig+0x64>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d101      	bne.n	8004d58 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e3df      	b.n	8005518 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a1a      	ldr	r2, [r3, #32]
 8004d5c:	4b81      	ldr	r3, [pc, #516]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0308 	and.w	r3, r3, #8
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d004      	beq.n	8004d72 <HAL_RCC_OscConfig+0x7e>
 8004d68:	4b7e      	ldr	r3, [pc, #504]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d70:	e005      	b.n	8004d7e <HAL_RCC_OscConfig+0x8a>
 8004d72:	4b7c      	ldr	r3, [pc, #496]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004d74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d78:	091b      	lsrs	r3, r3, #4
 8004d7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d223      	bcs.n	8004dca <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f000 fdc4 	bl	8005914 <RCC_SetFlashLatencyFromMSIRange>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d001      	beq.n	8004d96 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e3c0      	b.n	8005518 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d96:	4b73      	ldr	r3, [pc, #460]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a72      	ldr	r2, [pc, #456]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004d9c:	f043 0308 	orr.w	r3, r3, #8
 8004da0:	6013      	str	r3, [r2, #0]
 8004da2:	4b70      	ldr	r3, [pc, #448]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	496d      	ldr	r1, [pc, #436]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004db4:	4b6b      	ldr	r3, [pc, #428]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	69db      	ldr	r3, [r3, #28]
 8004dc0:	021b      	lsls	r3, r3, #8
 8004dc2:	4968      	ldr	r1, [pc, #416]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	604b      	str	r3, [r1, #4]
 8004dc8:	e025      	b.n	8004e16 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004dca:	4b66      	ldr	r3, [pc, #408]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a65      	ldr	r2, [pc, #404]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004dd0:	f043 0308 	orr.w	r3, r3, #8
 8004dd4:	6013      	str	r3, [r2, #0]
 8004dd6:	4b63      	ldr	r3, [pc, #396]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	4960      	ldr	r1, [pc, #384]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004de8:	4b5e      	ldr	r3, [pc, #376]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	69db      	ldr	r3, [r3, #28]
 8004df4:	021b      	lsls	r3, r3, #8
 8004df6:	495b      	ldr	r1, [pc, #364]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d109      	bne.n	8004e16 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f000 fd84 	bl	8005914 <RCC_SetFlashLatencyFromMSIRange>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d001      	beq.n	8004e16 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e380      	b.n	8005518 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e16:	f000 fc87 	bl	8005728 <HAL_RCC_GetSysClockFreq>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	4b51      	ldr	r3, [pc, #324]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	091b      	lsrs	r3, r3, #4
 8004e22:	f003 030f 	and.w	r3, r3, #15
 8004e26:	4950      	ldr	r1, [pc, #320]	@ (8004f68 <HAL_RCC_OscConfig+0x274>)
 8004e28:	5ccb      	ldrb	r3, [r1, r3]
 8004e2a:	f003 031f 	and.w	r3, r3, #31
 8004e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e32:	4a4e      	ldr	r2, [pc, #312]	@ (8004f6c <HAL_RCC_OscConfig+0x278>)
 8004e34:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004e36:	4b4e      	ldr	r3, [pc, #312]	@ (8004f70 <HAL_RCC_OscConfig+0x27c>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7fc fc58 	bl	80016f0 <HAL_InitTick>
 8004e40:	4603      	mov	r3, r0
 8004e42:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004e44:	7bfb      	ldrb	r3, [r7, #15]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d052      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004e4a:	7bfb      	ldrb	r3, [r7, #15]
 8004e4c:	e364      	b.n	8005518 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d032      	beq.n	8004ebc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004e56:	4b43      	ldr	r3, [pc, #268]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a42      	ldr	r2, [pc, #264]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004e5c:	f043 0301 	orr.w	r3, r3, #1
 8004e60:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004e62:	f7fc fd67 	bl	8001934 <HAL_GetTick>
 8004e66:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e68:	e008      	b.n	8004e7c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e6a:	f7fc fd63 	bl	8001934 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d901      	bls.n	8004e7c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e34d      	b.n	8005518 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e7c:	4b39      	ldr	r3, [pc, #228]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0302 	and.w	r3, r3, #2
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d0f0      	beq.n	8004e6a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e88:	4b36      	ldr	r3, [pc, #216]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a35      	ldr	r2, [pc, #212]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004e8e:	f043 0308 	orr.w	r3, r3, #8
 8004e92:	6013      	str	r3, [r2, #0]
 8004e94:	4b33      	ldr	r3, [pc, #204]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	4930      	ldr	r1, [pc, #192]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ea6:	4b2f      	ldr	r3, [pc, #188]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	69db      	ldr	r3, [r3, #28]
 8004eb2:	021b      	lsls	r3, r3, #8
 8004eb4:	492b      	ldr	r1, [pc, #172]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	604b      	str	r3, [r1, #4]
 8004eba:	e01a      	b.n	8004ef2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004ebc:	4b29      	ldr	r3, [pc, #164]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a28      	ldr	r2, [pc, #160]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004ec2:	f023 0301 	bic.w	r3, r3, #1
 8004ec6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ec8:	f7fc fd34 	bl	8001934 <HAL_GetTick>
 8004ecc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004ece:	e008      	b.n	8004ee2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ed0:	f7fc fd30 	bl	8001934 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e31a      	b.n	8005518 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004ee2:	4b20      	ldr	r3, [pc, #128]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1f0      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x1dc>
 8004eee:	e000      	b.n	8004ef2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ef0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d073      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	2b08      	cmp	r3, #8
 8004f02:	d005      	beq.n	8004f10 <HAL_RCC_OscConfig+0x21c>
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	2b0c      	cmp	r3, #12
 8004f08:	d10e      	bne.n	8004f28 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	2b03      	cmp	r3, #3
 8004f0e:	d10b      	bne.n	8004f28 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f10:	4b14      	ldr	r3, [pc, #80]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d063      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x2f0>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d15f      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e2f7      	b.n	8005518 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f30:	d106      	bne.n	8004f40 <HAL_RCC_OscConfig+0x24c>
 8004f32:	4b0c      	ldr	r3, [pc, #48]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a0b      	ldr	r2, [pc, #44]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004f38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f3c:	6013      	str	r3, [r2, #0]
 8004f3e:	e025      	b.n	8004f8c <HAL_RCC_OscConfig+0x298>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f48:	d114      	bne.n	8004f74 <HAL_RCC_OscConfig+0x280>
 8004f4a:	4b06      	ldr	r3, [pc, #24]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a05      	ldr	r2, [pc, #20]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004f50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f54:	6013      	str	r3, [r2, #0]
 8004f56:	4b03      	ldr	r3, [pc, #12]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a02      	ldr	r2, [pc, #8]	@ (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004f5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f60:	6013      	str	r3, [r2, #0]
 8004f62:	e013      	b.n	8004f8c <HAL_RCC_OscConfig+0x298>
 8004f64:	40021000 	.word	0x40021000
 8004f68:	0800abe0 	.word	0x0800abe0
 8004f6c:	20000000 	.word	0x20000000
 8004f70:	20000004 	.word	0x20000004
 8004f74:	4ba0      	ldr	r3, [pc, #640]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a9f      	ldr	r2, [pc, #636]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 8004f7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f7e:	6013      	str	r3, [r2, #0]
 8004f80:	4b9d      	ldr	r3, [pc, #628]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a9c      	ldr	r2, [pc, #624]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 8004f86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d013      	beq.n	8004fbc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f94:	f7fc fcce 	bl	8001934 <HAL_GetTick>
 8004f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f9a:	e008      	b.n	8004fae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f9c:	f7fc fcca 	bl	8001934 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	2b64      	cmp	r3, #100	@ 0x64
 8004fa8:	d901      	bls.n	8004fae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e2b4      	b.n	8005518 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fae:	4b92      	ldr	r3, [pc, #584]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d0f0      	beq.n	8004f9c <HAL_RCC_OscConfig+0x2a8>
 8004fba:	e014      	b.n	8004fe6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fbc:	f7fc fcba 	bl	8001934 <HAL_GetTick>
 8004fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fc2:	e008      	b.n	8004fd6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fc4:	f7fc fcb6 	bl	8001934 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	2b64      	cmp	r3, #100	@ 0x64
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e2a0      	b.n	8005518 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fd6:	4b88      	ldr	r3, [pc, #544]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1f0      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x2d0>
 8004fe2:	e000      	b.n	8004fe6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fe4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d060      	beq.n	80050b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	2b04      	cmp	r3, #4
 8004ff6:	d005      	beq.n	8005004 <HAL_RCC_OscConfig+0x310>
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	2b0c      	cmp	r3, #12
 8004ffc:	d119      	bne.n	8005032 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	2b02      	cmp	r3, #2
 8005002:	d116      	bne.n	8005032 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005004:	4b7c      	ldr	r3, [pc, #496]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800500c:	2b00      	cmp	r3, #0
 800500e:	d005      	beq.n	800501c <HAL_RCC_OscConfig+0x328>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d101      	bne.n	800501c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e27d      	b.n	8005518 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800501c:	4b76      	ldr	r3, [pc, #472]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	061b      	lsls	r3, r3, #24
 800502a:	4973      	ldr	r1, [pc, #460]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 800502c:	4313      	orrs	r3, r2
 800502e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005030:	e040      	b.n	80050b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d023      	beq.n	8005082 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800503a:	4b6f      	ldr	r3, [pc, #444]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a6e      	ldr	r2, [pc, #440]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 8005040:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005044:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005046:	f7fc fc75 	bl	8001934 <HAL_GetTick>
 800504a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800504c:	e008      	b.n	8005060 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800504e:	f7fc fc71 	bl	8001934 <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	2b02      	cmp	r3, #2
 800505a:	d901      	bls.n	8005060 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e25b      	b.n	8005518 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005060:	4b65      	ldr	r3, [pc, #404]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005068:	2b00      	cmp	r3, #0
 800506a:	d0f0      	beq.n	800504e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800506c:	4b62      	ldr	r3, [pc, #392]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	061b      	lsls	r3, r3, #24
 800507a:	495f      	ldr	r1, [pc, #380]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 800507c:	4313      	orrs	r3, r2
 800507e:	604b      	str	r3, [r1, #4]
 8005080:	e018      	b.n	80050b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005082:	4b5d      	ldr	r3, [pc, #372]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a5c      	ldr	r2, [pc, #368]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 8005088:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800508c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800508e:	f7fc fc51 	bl	8001934 <HAL_GetTick>
 8005092:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005094:	e008      	b.n	80050a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005096:	f7fc fc4d 	bl	8001934 <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d901      	bls.n	80050a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e237      	b.n	8005518 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050a8:	4b53      	ldr	r3, [pc, #332]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d1f0      	bne.n	8005096 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0308 	and.w	r3, r3, #8
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d03c      	beq.n	800513a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	695b      	ldr	r3, [r3, #20]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d01c      	beq.n	8005102 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050c8:	4b4b      	ldr	r3, [pc, #300]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 80050ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050ce:	4a4a      	ldr	r2, [pc, #296]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 80050d0:	f043 0301 	orr.w	r3, r3, #1
 80050d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050d8:	f7fc fc2c 	bl	8001934 <HAL_GetTick>
 80050dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80050de:	e008      	b.n	80050f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050e0:	f7fc fc28 	bl	8001934 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d901      	bls.n	80050f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e212      	b.n	8005518 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80050f2:	4b41      	ldr	r3, [pc, #260]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 80050f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050f8:	f003 0302 	and.w	r3, r3, #2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d0ef      	beq.n	80050e0 <HAL_RCC_OscConfig+0x3ec>
 8005100:	e01b      	b.n	800513a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005102:	4b3d      	ldr	r3, [pc, #244]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 8005104:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005108:	4a3b      	ldr	r2, [pc, #236]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 800510a:	f023 0301 	bic.w	r3, r3, #1
 800510e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005112:	f7fc fc0f 	bl	8001934 <HAL_GetTick>
 8005116:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005118:	e008      	b.n	800512c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800511a:	f7fc fc0b 	bl	8001934 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	2b02      	cmp	r3, #2
 8005126:	d901      	bls.n	800512c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e1f5      	b.n	8005518 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800512c:	4b32      	ldr	r3, [pc, #200]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 800512e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005132:	f003 0302 	and.w	r3, r3, #2
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1ef      	bne.n	800511a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0304 	and.w	r3, r3, #4
 8005142:	2b00      	cmp	r3, #0
 8005144:	f000 80a6 	beq.w	8005294 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005148:	2300      	movs	r3, #0
 800514a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800514c:	4b2a      	ldr	r3, [pc, #168]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 800514e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005150:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d10d      	bne.n	8005174 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005158:	4b27      	ldr	r3, [pc, #156]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 800515a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800515c:	4a26      	ldr	r2, [pc, #152]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 800515e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005162:	6593      	str	r3, [r2, #88]	@ 0x58
 8005164:	4b24      	ldr	r3, [pc, #144]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 8005166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005168:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800516c:	60bb      	str	r3, [r7, #8]
 800516e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005170:	2301      	movs	r3, #1
 8005172:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005174:	4b21      	ldr	r3, [pc, #132]	@ (80051fc <HAL_RCC_OscConfig+0x508>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800517c:	2b00      	cmp	r3, #0
 800517e:	d118      	bne.n	80051b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005180:	4b1e      	ldr	r3, [pc, #120]	@ (80051fc <HAL_RCC_OscConfig+0x508>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a1d      	ldr	r2, [pc, #116]	@ (80051fc <HAL_RCC_OscConfig+0x508>)
 8005186:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800518a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800518c:	f7fc fbd2 	bl	8001934 <HAL_GetTick>
 8005190:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005192:	e008      	b.n	80051a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005194:	f7fc fbce 	bl	8001934 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d901      	bls.n	80051a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e1b8      	b.n	8005518 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051a6:	4b15      	ldr	r3, [pc, #84]	@ (80051fc <HAL_RCC_OscConfig+0x508>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d0f0      	beq.n	8005194 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d108      	bne.n	80051cc <HAL_RCC_OscConfig+0x4d8>
 80051ba:	4b0f      	ldr	r3, [pc, #60]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 80051bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051c0:	4a0d      	ldr	r2, [pc, #52]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 80051c2:	f043 0301 	orr.w	r3, r3, #1
 80051c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80051ca:	e029      	b.n	8005220 <HAL_RCC_OscConfig+0x52c>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	2b05      	cmp	r3, #5
 80051d2:	d115      	bne.n	8005200 <HAL_RCC_OscConfig+0x50c>
 80051d4:	4b08      	ldr	r3, [pc, #32]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 80051d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051da:	4a07      	ldr	r2, [pc, #28]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 80051dc:	f043 0304 	orr.w	r3, r3, #4
 80051e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80051e4:	4b04      	ldr	r3, [pc, #16]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 80051e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051ea:	4a03      	ldr	r2, [pc, #12]	@ (80051f8 <HAL_RCC_OscConfig+0x504>)
 80051ec:	f043 0301 	orr.w	r3, r3, #1
 80051f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80051f4:	e014      	b.n	8005220 <HAL_RCC_OscConfig+0x52c>
 80051f6:	bf00      	nop
 80051f8:	40021000 	.word	0x40021000
 80051fc:	40007000 	.word	0x40007000
 8005200:	4b9d      	ldr	r3, [pc, #628]	@ (8005478 <HAL_RCC_OscConfig+0x784>)
 8005202:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005206:	4a9c      	ldr	r2, [pc, #624]	@ (8005478 <HAL_RCC_OscConfig+0x784>)
 8005208:	f023 0301 	bic.w	r3, r3, #1
 800520c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005210:	4b99      	ldr	r3, [pc, #612]	@ (8005478 <HAL_RCC_OscConfig+0x784>)
 8005212:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005216:	4a98      	ldr	r2, [pc, #608]	@ (8005478 <HAL_RCC_OscConfig+0x784>)
 8005218:	f023 0304 	bic.w	r3, r3, #4
 800521c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d016      	beq.n	8005256 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005228:	f7fc fb84 	bl	8001934 <HAL_GetTick>
 800522c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800522e:	e00a      	b.n	8005246 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005230:	f7fc fb80 	bl	8001934 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800523e:	4293      	cmp	r3, r2
 8005240:	d901      	bls.n	8005246 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e168      	b.n	8005518 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005246:	4b8c      	ldr	r3, [pc, #560]	@ (8005478 <HAL_RCC_OscConfig+0x784>)
 8005248:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800524c:	f003 0302 	and.w	r3, r3, #2
 8005250:	2b00      	cmp	r3, #0
 8005252:	d0ed      	beq.n	8005230 <HAL_RCC_OscConfig+0x53c>
 8005254:	e015      	b.n	8005282 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005256:	f7fc fb6d 	bl	8001934 <HAL_GetTick>
 800525a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800525c:	e00a      	b.n	8005274 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800525e:	f7fc fb69 	bl	8001934 <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	f241 3288 	movw	r2, #5000	@ 0x1388
 800526c:	4293      	cmp	r3, r2
 800526e:	d901      	bls.n	8005274 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e151      	b.n	8005518 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005274:	4b80      	ldr	r3, [pc, #512]	@ (8005478 <HAL_RCC_OscConfig+0x784>)
 8005276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800527a:	f003 0302 	and.w	r3, r3, #2
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1ed      	bne.n	800525e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005282:	7ffb      	ldrb	r3, [r7, #31]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d105      	bne.n	8005294 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005288:	4b7b      	ldr	r3, [pc, #492]	@ (8005478 <HAL_RCC_OscConfig+0x784>)
 800528a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800528c:	4a7a      	ldr	r2, [pc, #488]	@ (8005478 <HAL_RCC_OscConfig+0x784>)
 800528e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005292:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0320 	and.w	r3, r3, #32
 800529c:	2b00      	cmp	r3, #0
 800529e:	d03c      	beq.n	800531a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d01c      	beq.n	80052e2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80052a8:	4b73      	ldr	r3, [pc, #460]	@ (8005478 <HAL_RCC_OscConfig+0x784>)
 80052aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80052ae:	4a72      	ldr	r2, [pc, #456]	@ (8005478 <HAL_RCC_OscConfig+0x784>)
 80052b0:	f043 0301 	orr.w	r3, r3, #1
 80052b4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052b8:	f7fc fb3c 	bl	8001934 <HAL_GetTick>
 80052bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80052be:	e008      	b.n	80052d2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052c0:	f7fc fb38 	bl	8001934 <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d901      	bls.n	80052d2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e122      	b.n	8005518 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80052d2:	4b69      	ldr	r3, [pc, #420]	@ (8005478 <HAL_RCC_OscConfig+0x784>)
 80052d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80052d8:	f003 0302 	and.w	r3, r3, #2
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d0ef      	beq.n	80052c0 <HAL_RCC_OscConfig+0x5cc>
 80052e0:	e01b      	b.n	800531a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80052e2:	4b65      	ldr	r3, [pc, #404]	@ (8005478 <HAL_RCC_OscConfig+0x784>)
 80052e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80052e8:	4a63      	ldr	r2, [pc, #396]	@ (8005478 <HAL_RCC_OscConfig+0x784>)
 80052ea:	f023 0301 	bic.w	r3, r3, #1
 80052ee:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052f2:	f7fc fb1f 	bl	8001934 <HAL_GetTick>
 80052f6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80052f8:	e008      	b.n	800530c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052fa:	f7fc fb1b 	bl	8001934 <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	2b02      	cmp	r3, #2
 8005306:	d901      	bls.n	800530c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e105      	b.n	8005518 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800530c:	4b5a      	ldr	r3, [pc, #360]	@ (8005478 <HAL_RCC_OscConfig+0x784>)
 800530e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1ef      	bne.n	80052fa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800531e:	2b00      	cmp	r3, #0
 8005320:	f000 80f9 	beq.w	8005516 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005328:	2b02      	cmp	r3, #2
 800532a:	f040 80cf 	bne.w	80054cc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800532e:	4b52      	ldr	r3, [pc, #328]	@ (8005478 <HAL_RCC_OscConfig+0x784>)
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	f003 0203 	and.w	r2, r3, #3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800533e:	429a      	cmp	r2, r3
 8005340:	d12c      	bne.n	800539c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800534c:	3b01      	subs	r3, #1
 800534e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005350:	429a      	cmp	r2, r3
 8005352:	d123      	bne.n	800539c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800535e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005360:	429a      	cmp	r2, r3
 8005362:	d11b      	bne.n	800539c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800536e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005370:	429a      	cmp	r2, r3
 8005372:	d113      	bne.n	800539c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800537e:	085b      	lsrs	r3, r3, #1
 8005380:	3b01      	subs	r3, #1
 8005382:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005384:	429a      	cmp	r2, r3
 8005386:	d109      	bne.n	800539c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005392:	085b      	lsrs	r3, r3, #1
 8005394:	3b01      	subs	r3, #1
 8005396:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005398:	429a      	cmp	r2, r3
 800539a:	d071      	beq.n	8005480 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	2b0c      	cmp	r3, #12
 80053a0:	d068      	beq.n	8005474 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80053a2:	4b35      	ldr	r3, [pc, #212]	@ (8005478 <HAL_RCC_OscConfig+0x784>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d105      	bne.n	80053ba <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80053ae:	4b32      	ldr	r3, [pc, #200]	@ (8005478 <HAL_RCC_OscConfig+0x784>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d001      	beq.n	80053be <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e0ac      	b.n	8005518 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80053be:	4b2e      	ldr	r3, [pc, #184]	@ (8005478 <HAL_RCC_OscConfig+0x784>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a2d      	ldr	r2, [pc, #180]	@ (8005478 <HAL_RCC_OscConfig+0x784>)
 80053c4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80053c8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80053ca:	f7fc fab3 	bl	8001934 <HAL_GetTick>
 80053ce:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053d0:	e008      	b.n	80053e4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053d2:	f7fc faaf 	bl	8001934 <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d901      	bls.n	80053e4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e099      	b.n	8005518 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053e4:	4b24      	ldr	r3, [pc, #144]	@ (8005478 <HAL_RCC_OscConfig+0x784>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1f0      	bne.n	80053d2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053f0:	4b21      	ldr	r3, [pc, #132]	@ (8005478 <HAL_RCC_OscConfig+0x784>)
 80053f2:	68da      	ldr	r2, [r3, #12]
 80053f4:	4b21      	ldr	r3, [pc, #132]	@ (800547c <HAL_RCC_OscConfig+0x788>)
 80053f6:	4013      	ands	r3, r2
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005400:	3a01      	subs	r2, #1
 8005402:	0112      	lsls	r2, r2, #4
 8005404:	4311      	orrs	r1, r2
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800540a:	0212      	lsls	r2, r2, #8
 800540c:	4311      	orrs	r1, r2
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005412:	0852      	lsrs	r2, r2, #1
 8005414:	3a01      	subs	r2, #1
 8005416:	0552      	lsls	r2, r2, #21
 8005418:	4311      	orrs	r1, r2
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800541e:	0852      	lsrs	r2, r2, #1
 8005420:	3a01      	subs	r2, #1
 8005422:	0652      	lsls	r2, r2, #25
 8005424:	4311      	orrs	r1, r2
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800542a:	06d2      	lsls	r2, r2, #27
 800542c:	430a      	orrs	r2, r1
 800542e:	4912      	ldr	r1, [pc, #72]	@ (8005478 <HAL_RCC_OscConfig+0x784>)
 8005430:	4313      	orrs	r3, r2
 8005432:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005434:	4b10      	ldr	r3, [pc, #64]	@ (8005478 <HAL_RCC_OscConfig+0x784>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a0f      	ldr	r2, [pc, #60]	@ (8005478 <HAL_RCC_OscConfig+0x784>)
 800543a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800543e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005440:	4b0d      	ldr	r3, [pc, #52]	@ (8005478 <HAL_RCC_OscConfig+0x784>)
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	4a0c      	ldr	r2, [pc, #48]	@ (8005478 <HAL_RCC_OscConfig+0x784>)
 8005446:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800544a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800544c:	f7fc fa72 	bl	8001934 <HAL_GetTick>
 8005450:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005452:	e008      	b.n	8005466 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005454:	f7fc fa6e 	bl	8001934 <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	2b02      	cmp	r3, #2
 8005460:	d901      	bls.n	8005466 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e058      	b.n	8005518 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005466:	4b04      	ldr	r3, [pc, #16]	@ (8005478 <HAL_RCC_OscConfig+0x784>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d0f0      	beq.n	8005454 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005472:	e050      	b.n	8005516 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e04f      	b.n	8005518 <HAL_RCC_OscConfig+0x824>
 8005478:	40021000 	.word	0x40021000
 800547c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005480:	4b27      	ldr	r3, [pc, #156]	@ (8005520 <HAL_RCC_OscConfig+0x82c>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005488:	2b00      	cmp	r3, #0
 800548a:	d144      	bne.n	8005516 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800548c:	4b24      	ldr	r3, [pc, #144]	@ (8005520 <HAL_RCC_OscConfig+0x82c>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a23      	ldr	r2, [pc, #140]	@ (8005520 <HAL_RCC_OscConfig+0x82c>)
 8005492:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005496:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005498:	4b21      	ldr	r3, [pc, #132]	@ (8005520 <HAL_RCC_OscConfig+0x82c>)
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	4a20      	ldr	r2, [pc, #128]	@ (8005520 <HAL_RCC_OscConfig+0x82c>)
 800549e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80054a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80054a4:	f7fc fa46 	bl	8001934 <HAL_GetTick>
 80054a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054aa:	e008      	b.n	80054be <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054ac:	f7fc fa42 	bl	8001934 <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d901      	bls.n	80054be <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e02c      	b.n	8005518 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054be:	4b18      	ldr	r3, [pc, #96]	@ (8005520 <HAL_RCC_OscConfig+0x82c>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d0f0      	beq.n	80054ac <HAL_RCC_OscConfig+0x7b8>
 80054ca:	e024      	b.n	8005516 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	2b0c      	cmp	r3, #12
 80054d0:	d01f      	beq.n	8005512 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054d2:	4b13      	ldr	r3, [pc, #76]	@ (8005520 <HAL_RCC_OscConfig+0x82c>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a12      	ldr	r2, [pc, #72]	@ (8005520 <HAL_RCC_OscConfig+0x82c>)
 80054d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054de:	f7fc fa29 	bl	8001934 <HAL_GetTick>
 80054e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054e4:	e008      	b.n	80054f8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054e6:	f7fc fa25 	bl	8001934 <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d901      	bls.n	80054f8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e00f      	b.n	8005518 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054f8:	4b09      	ldr	r3, [pc, #36]	@ (8005520 <HAL_RCC_OscConfig+0x82c>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1f0      	bne.n	80054e6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005504:	4b06      	ldr	r3, [pc, #24]	@ (8005520 <HAL_RCC_OscConfig+0x82c>)
 8005506:	68da      	ldr	r2, [r3, #12]
 8005508:	4905      	ldr	r1, [pc, #20]	@ (8005520 <HAL_RCC_OscConfig+0x82c>)
 800550a:	4b06      	ldr	r3, [pc, #24]	@ (8005524 <HAL_RCC_OscConfig+0x830>)
 800550c:	4013      	ands	r3, r2
 800550e:	60cb      	str	r3, [r1, #12]
 8005510:	e001      	b.n	8005516 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e000      	b.n	8005518 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3720      	adds	r7, #32
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	40021000 	.word	0x40021000
 8005524:	feeefffc 	.word	0xfeeefffc

08005528 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d101      	bne.n	800553c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e0e7      	b.n	800570c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800553c:	4b75      	ldr	r3, [pc, #468]	@ (8005714 <HAL_RCC_ClockConfig+0x1ec>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0307 	and.w	r3, r3, #7
 8005544:	683a      	ldr	r2, [r7, #0]
 8005546:	429a      	cmp	r2, r3
 8005548:	d910      	bls.n	800556c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800554a:	4b72      	ldr	r3, [pc, #456]	@ (8005714 <HAL_RCC_ClockConfig+0x1ec>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f023 0207 	bic.w	r2, r3, #7
 8005552:	4970      	ldr	r1, [pc, #448]	@ (8005714 <HAL_RCC_ClockConfig+0x1ec>)
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	4313      	orrs	r3, r2
 8005558:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800555a:	4b6e      	ldr	r3, [pc, #440]	@ (8005714 <HAL_RCC_ClockConfig+0x1ec>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0307 	and.w	r3, r3, #7
 8005562:	683a      	ldr	r2, [r7, #0]
 8005564:	429a      	cmp	r2, r3
 8005566:	d001      	beq.n	800556c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e0cf      	b.n	800570c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0302 	and.w	r3, r3, #2
 8005574:	2b00      	cmp	r3, #0
 8005576:	d010      	beq.n	800559a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	689a      	ldr	r2, [r3, #8]
 800557c:	4b66      	ldr	r3, [pc, #408]	@ (8005718 <HAL_RCC_ClockConfig+0x1f0>)
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005584:	429a      	cmp	r2, r3
 8005586:	d908      	bls.n	800559a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005588:	4b63      	ldr	r3, [pc, #396]	@ (8005718 <HAL_RCC_ClockConfig+0x1f0>)
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	4960      	ldr	r1, [pc, #384]	@ (8005718 <HAL_RCC_ClockConfig+0x1f0>)
 8005596:	4313      	orrs	r3, r2
 8005598:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0301 	and.w	r3, r3, #1
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d04c      	beq.n	8005640 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	2b03      	cmp	r3, #3
 80055ac:	d107      	bne.n	80055be <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055ae:	4b5a      	ldr	r3, [pc, #360]	@ (8005718 <HAL_RCC_ClockConfig+0x1f0>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d121      	bne.n	80055fe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e0a6      	b.n	800570c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d107      	bne.n	80055d6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055c6:	4b54      	ldr	r3, [pc, #336]	@ (8005718 <HAL_RCC_ClockConfig+0x1f0>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d115      	bne.n	80055fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e09a      	b.n	800570c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d107      	bne.n	80055ee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80055de:	4b4e      	ldr	r3, [pc, #312]	@ (8005718 <HAL_RCC_ClockConfig+0x1f0>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0302 	and.w	r3, r3, #2
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d109      	bne.n	80055fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e08e      	b.n	800570c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055ee:	4b4a      	ldr	r3, [pc, #296]	@ (8005718 <HAL_RCC_ClockConfig+0x1f0>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e086      	b.n	800570c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80055fe:	4b46      	ldr	r3, [pc, #280]	@ (8005718 <HAL_RCC_ClockConfig+0x1f0>)
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	f023 0203 	bic.w	r2, r3, #3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	4943      	ldr	r1, [pc, #268]	@ (8005718 <HAL_RCC_ClockConfig+0x1f0>)
 800560c:	4313      	orrs	r3, r2
 800560e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005610:	f7fc f990 	bl	8001934 <HAL_GetTick>
 8005614:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005616:	e00a      	b.n	800562e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005618:	f7fc f98c 	bl	8001934 <HAL_GetTick>
 800561c:	4602      	mov	r2, r0
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005626:	4293      	cmp	r3, r2
 8005628:	d901      	bls.n	800562e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e06e      	b.n	800570c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800562e:	4b3a      	ldr	r3, [pc, #232]	@ (8005718 <HAL_RCC_ClockConfig+0x1f0>)
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f003 020c 	and.w	r2, r3, #12
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	429a      	cmp	r2, r3
 800563e:	d1eb      	bne.n	8005618 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0302 	and.w	r3, r3, #2
 8005648:	2b00      	cmp	r3, #0
 800564a:	d010      	beq.n	800566e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	689a      	ldr	r2, [r3, #8]
 8005650:	4b31      	ldr	r3, [pc, #196]	@ (8005718 <HAL_RCC_ClockConfig+0x1f0>)
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005658:	429a      	cmp	r2, r3
 800565a:	d208      	bcs.n	800566e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800565c:	4b2e      	ldr	r3, [pc, #184]	@ (8005718 <HAL_RCC_ClockConfig+0x1f0>)
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	492b      	ldr	r1, [pc, #172]	@ (8005718 <HAL_RCC_ClockConfig+0x1f0>)
 800566a:	4313      	orrs	r3, r2
 800566c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800566e:	4b29      	ldr	r3, [pc, #164]	@ (8005714 <HAL_RCC_ClockConfig+0x1ec>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0307 	and.w	r3, r3, #7
 8005676:	683a      	ldr	r2, [r7, #0]
 8005678:	429a      	cmp	r2, r3
 800567a:	d210      	bcs.n	800569e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800567c:	4b25      	ldr	r3, [pc, #148]	@ (8005714 <HAL_RCC_ClockConfig+0x1ec>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f023 0207 	bic.w	r2, r3, #7
 8005684:	4923      	ldr	r1, [pc, #140]	@ (8005714 <HAL_RCC_ClockConfig+0x1ec>)
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	4313      	orrs	r3, r2
 800568a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800568c:	4b21      	ldr	r3, [pc, #132]	@ (8005714 <HAL_RCC_ClockConfig+0x1ec>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0307 	and.w	r3, r3, #7
 8005694:	683a      	ldr	r2, [r7, #0]
 8005696:	429a      	cmp	r2, r3
 8005698:	d001      	beq.n	800569e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e036      	b.n	800570c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0304 	and.w	r3, r3, #4
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d008      	beq.n	80056bc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056aa:	4b1b      	ldr	r3, [pc, #108]	@ (8005718 <HAL_RCC_ClockConfig+0x1f0>)
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	4918      	ldr	r1, [pc, #96]	@ (8005718 <HAL_RCC_ClockConfig+0x1f0>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0308 	and.w	r3, r3, #8
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d009      	beq.n	80056dc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056c8:	4b13      	ldr	r3, [pc, #76]	@ (8005718 <HAL_RCC_ClockConfig+0x1f0>)
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	00db      	lsls	r3, r3, #3
 80056d6:	4910      	ldr	r1, [pc, #64]	@ (8005718 <HAL_RCC_ClockConfig+0x1f0>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80056dc:	f000 f824 	bl	8005728 <HAL_RCC_GetSysClockFreq>
 80056e0:	4602      	mov	r2, r0
 80056e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005718 <HAL_RCC_ClockConfig+0x1f0>)
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	091b      	lsrs	r3, r3, #4
 80056e8:	f003 030f 	and.w	r3, r3, #15
 80056ec:	490b      	ldr	r1, [pc, #44]	@ (800571c <HAL_RCC_ClockConfig+0x1f4>)
 80056ee:	5ccb      	ldrb	r3, [r1, r3]
 80056f0:	f003 031f 	and.w	r3, r3, #31
 80056f4:	fa22 f303 	lsr.w	r3, r2, r3
 80056f8:	4a09      	ldr	r2, [pc, #36]	@ (8005720 <HAL_RCC_ClockConfig+0x1f8>)
 80056fa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80056fc:	4b09      	ldr	r3, [pc, #36]	@ (8005724 <HAL_RCC_ClockConfig+0x1fc>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4618      	mov	r0, r3
 8005702:	f7fb fff5 	bl	80016f0 <HAL_InitTick>
 8005706:	4603      	mov	r3, r0
 8005708:	72fb      	strb	r3, [r7, #11]

  return status;
 800570a:	7afb      	ldrb	r3, [r7, #11]
}
 800570c:	4618      	mov	r0, r3
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	40022000 	.word	0x40022000
 8005718:	40021000 	.word	0x40021000
 800571c:	0800abe0 	.word	0x0800abe0
 8005720:	20000000 	.word	0x20000000
 8005724:	20000004 	.word	0x20000004

08005728 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005728:	b480      	push	{r7}
 800572a:	b089      	sub	sp, #36	@ 0x24
 800572c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800572e:	2300      	movs	r3, #0
 8005730:	61fb      	str	r3, [r7, #28]
 8005732:	2300      	movs	r3, #0
 8005734:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005736:	4b3e      	ldr	r3, [pc, #248]	@ (8005830 <HAL_RCC_GetSysClockFreq+0x108>)
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f003 030c 	and.w	r3, r3, #12
 800573e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005740:	4b3b      	ldr	r3, [pc, #236]	@ (8005830 <HAL_RCC_GetSysClockFreq+0x108>)
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	f003 0303 	and.w	r3, r3, #3
 8005748:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d005      	beq.n	800575c <HAL_RCC_GetSysClockFreq+0x34>
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	2b0c      	cmp	r3, #12
 8005754:	d121      	bne.n	800579a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d11e      	bne.n	800579a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800575c:	4b34      	ldr	r3, [pc, #208]	@ (8005830 <HAL_RCC_GetSysClockFreq+0x108>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0308 	and.w	r3, r3, #8
 8005764:	2b00      	cmp	r3, #0
 8005766:	d107      	bne.n	8005778 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005768:	4b31      	ldr	r3, [pc, #196]	@ (8005830 <HAL_RCC_GetSysClockFreq+0x108>)
 800576a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800576e:	0a1b      	lsrs	r3, r3, #8
 8005770:	f003 030f 	and.w	r3, r3, #15
 8005774:	61fb      	str	r3, [r7, #28]
 8005776:	e005      	b.n	8005784 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005778:	4b2d      	ldr	r3, [pc, #180]	@ (8005830 <HAL_RCC_GetSysClockFreq+0x108>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	091b      	lsrs	r3, r3, #4
 800577e:	f003 030f 	and.w	r3, r3, #15
 8005782:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005784:	4a2b      	ldr	r2, [pc, #172]	@ (8005834 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800578c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d10d      	bne.n	80057b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005798:	e00a      	b.n	80057b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	2b04      	cmp	r3, #4
 800579e:	d102      	bne.n	80057a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80057a0:	4b25      	ldr	r3, [pc, #148]	@ (8005838 <HAL_RCC_GetSysClockFreq+0x110>)
 80057a2:	61bb      	str	r3, [r7, #24]
 80057a4:	e004      	b.n	80057b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	2b08      	cmp	r3, #8
 80057aa:	d101      	bne.n	80057b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80057ac:	4b23      	ldr	r3, [pc, #140]	@ (800583c <HAL_RCC_GetSysClockFreq+0x114>)
 80057ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	2b0c      	cmp	r3, #12
 80057b4:	d134      	bne.n	8005820 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80057b6:	4b1e      	ldr	r3, [pc, #120]	@ (8005830 <HAL_RCC_GetSysClockFreq+0x108>)
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	f003 0303 	and.w	r3, r3, #3
 80057be:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d003      	beq.n	80057ce <HAL_RCC_GetSysClockFreq+0xa6>
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	2b03      	cmp	r3, #3
 80057ca:	d003      	beq.n	80057d4 <HAL_RCC_GetSysClockFreq+0xac>
 80057cc:	e005      	b.n	80057da <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80057ce:	4b1a      	ldr	r3, [pc, #104]	@ (8005838 <HAL_RCC_GetSysClockFreq+0x110>)
 80057d0:	617b      	str	r3, [r7, #20]
      break;
 80057d2:	e005      	b.n	80057e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80057d4:	4b19      	ldr	r3, [pc, #100]	@ (800583c <HAL_RCC_GetSysClockFreq+0x114>)
 80057d6:	617b      	str	r3, [r7, #20]
      break;
 80057d8:	e002      	b.n	80057e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	617b      	str	r3, [r7, #20]
      break;
 80057de:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80057e0:	4b13      	ldr	r3, [pc, #76]	@ (8005830 <HAL_RCC_GetSysClockFreq+0x108>)
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	091b      	lsrs	r3, r3, #4
 80057e6:	f003 0307 	and.w	r3, r3, #7
 80057ea:	3301      	adds	r3, #1
 80057ec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80057ee:	4b10      	ldr	r3, [pc, #64]	@ (8005830 <HAL_RCC_GetSysClockFreq+0x108>)
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	0a1b      	lsrs	r3, r3, #8
 80057f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	fb03 f202 	mul.w	r2, r3, r2
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	fbb2 f3f3 	udiv	r3, r2, r3
 8005804:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005806:	4b0a      	ldr	r3, [pc, #40]	@ (8005830 <HAL_RCC_GetSysClockFreq+0x108>)
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	0e5b      	lsrs	r3, r3, #25
 800580c:	f003 0303 	and.w	r3, r3, #3
 8005810:	3301      	adds	r3, #1
 8005812:	005b      	lsls	r3, r3, #1
 8005814:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	fbb2 f3f3 	udiv	r3, r2, r3
 800581e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005820:	69bb      	ldr	r3, [r7, #24]
}
 8005822:	4618      	mov	r0, r3
 8005824:	3724      	adds	r7, #36	@ 0x24
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	40021000 	.word	0x40021000
 8005834:	0800abf8 	.word	0x0800abf8
 8005838:	00f42400 	.word	0x00f42400
 800583c:	007a1200 	.word	0x007a1200

08005840 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005840:	b480      	push	{r7}
 8005842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005844:	4b03      	ldr	r3, [pc, #12]	@ (8005854 <HAL_RCC_GetHCLKFreq+0x14>)
 8005846:	681b      	ldr	r3, [r3, #0]
}
 8005848:	4618      	mov	r0, r3
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	20000000 	.word	0x20000000

08005858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800585c:	f7ff fff0 	bl	8005840 <HAL_RCC_GetHCLKFreq>
 8005860:	4602      	mov	r2, r0
 8005862:	4b06      	ldr	r3, [pc, #24]	@ (800587c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	0a1b      	lsrs	r3, r3, #8
 8005868:	f003 0307 	and.w	r3, r3, #7
 800586c:	4904      	ldr	r1, [pc, #16]	@ (8005880 <HAL_RCC_GetPCLK1Freq+0x28>)
 800586e:	5ccb      	ldrb	r3, [r1, r3]
 8005870:	f003 031f 	and.w	r3, r3, #31
 8005874:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005878:	4618      	mov	r0, r3
 800587a:	bd80      	pop	{r7, pc}
 800587c:	40021000 	.word	0x40021000
 8005880:	0800abf0 	.word	0x0800abf0

08005884 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005888:	f7ff ffda 	bl	8005840 <HAL_RCC_GetHCLKFreq>
 800588c:	4602      	mov	r2, r0
 800588e:	4b06      	ldr	r3, [pc, #24]	@ (80058a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	0adb      	lsrs	r3, r3, #11
 8005894:	f003 0307 	and.w	r3, r3, #7
 8005898:	4904      	ldr	r1, [pc, #16]	@ (80058ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800589a:	5ccb      	ldrb	r3, [r1, r3]
 800589c:	f003 031f 	and.w	r3, r3, #31
 80058a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	40021000 	.word	0x40021000
 80058ac:	0800abf0 	.word	0x0800abf0

080058b0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	220f      	movs	r2, #15
 80058be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80058c0:	4b12      	ldr	r3, [pc, #72]	@ (800590c <HAL_RCC_GetClockConfig+0x5c>)
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	f003 0203 	and.w	r2, r3, #3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80058cc:	4b0f      	ldr	r3, [pc, #60]	@ (800590c <HAL_RCC_GetClockConfig+0x5c>)
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80058d8:	4b0c      	ldr	r3, [pc, #48]	@ (800590c <HAL_RCC_GetClockConfig+0x5c>)
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80058e4:	4b09      	ldr	r3, [pc, #36]	@ (800590c <HAL_RCC_GetClockConfig+0x5c>)
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	08db      	lsrs	r3, r3, #3
 80058ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80058f2:	4b07      	ldr	r3, [pc, #28]	@ (8005910 <HAL_RCC_GetClockConfig+0x60>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0207 	and.w	r2, r3, #7
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	601a      	str	r2, [r3, #0]
}
 80058fe:	bf00      	nop
 8005900:	370c      	adds	r7, #12
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	40021000 	.word	0x40021000
 8005910:	40022000 	.word	0x40022000

08005914 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b086      	sub	sp, #24
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800591c:	2300      	movs	r3, #0
 800591e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005920:	4b2a      	ldr	r3, [pc, #168]	@ (80059cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005924:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d003      	beq.n	8005934 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800592c:	f7ff f97e 	bl	8004c2c <HAL_PWREx_GetVoltageRange>
 8005930:	6178      	str	r0, [r7, #20]
 8005932:	e014      	b.n	800595e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005934:	4b25      	ldr	r3, [pc, #148]	@ (80059cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005938:	4a24      	ldr	r2, [pc, #144]	@ (80059cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800593a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800593e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005940:	4b22      	ldr	r3, [pc, #136]	@ (80059cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005944:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005948:	60fb      	str	r3, [r7, #12]
 800594a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800594c:	f7ff f96e 	bl	8004c2c <HAL_PWREx_GetVoltageRange>
 8005950:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005952:	4b1e      	ldr	r3, [pc, #120]	@ (80059cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005956:	4a1d      	ldr	r2, [pc, #116]	@ (80059cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005958:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800595c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005964:	d10b      	bne.n	800597e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2b80      	cmp	r3, #128	@ 0x80
 800596a:	d919      	bls.n	80059a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2ba0      	cmp	r3, #160	@ 0xa0
 8005970:	d902      	bls.n	8005978 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005972:	2302      	movs	r3, #2
 8005974:	613b      	str	r3, [r7, #16]
 8005976:	e013      	b.n	80059a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005978:	2301      	movs	r3, #1
 800597a:	613b      	str	r3, [r7, #16]
 800597c:	e010      	b.n	80059a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2b80      	cmp	r3, #128	@ 0x80
 8005982:	d902      	bls.n	800598a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005984:	2303      	movs	r3, #3
 8005986:	613b      	str	r3, [r7, #16]
 8005988:	e00a      	b.n	80059a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2b80      	cmp	r3, #128	@ 0x80
 800598e:	d102      	bne.n	8005996 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005990:	2302      	movs	r3, #2
 8005992:	613b      	str	r3, [r7, #16]
 8005994:	e004      	b.n	80059a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2b70      	cmp	r3, #112	@ 0x70
 800599a:	d101      	bne.n	80059a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800599c:	2301      	movs	r3, #1
 800599e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80059a0:	4b0b      	ldr	r3, [pc, #44]	@ (80059d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f023 0207 	bic.w	r2, r3, #7
 80059a8:	4909      	ldr	r1, [pc, #36]	@ (80059d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80059b0:	4b07      	ldr	r3, [pc, #28]	@ (80059d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0307 	and.w	r3, r3, #7
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d001      	beq.n	80059c2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e000      	b.n	80059c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3718      	adds	r7, #24
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	40021000 	.word	0x40021000
 80059d0:	40022000 	.word	0x40022000

080059d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b086      	sub	sp, #24
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80059dc:	2300      	movs	r3, #0
 80059de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80059e0:	2300      	movs	r3, #0
 80059e2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d041      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80059f4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80059f8:	d02a      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80059fa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80059fe:	d824      	bhi.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005a00:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005a04:	d008      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005a06:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005a0a:	d81e      	bhi.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00a      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005a10:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a14:	d010      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005a16:	e018      	b.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005a18:	4b86      	ldr	r3, [pc, #536]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	4a85      	ldr	r2, [pc, #532]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a22:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005a24:	e015      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	3304      	adds	r3, #4
 8005a2a:	2100      	movs	r1, #0
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f000 facd 	bl	8005fcc <RCCEx_PLLSAI1_Config>
 8005a32:	4603      	mov	r3, r0
 8005a34:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005a36:	e00c      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	3320      	adds	r3, #32
 8005a3c:	2100      	movs	r1, #0
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f000 fbb6 	bl	80061b0 <RCCEx_PLLSAI2_Config>
 8005a44:	4603      	mov	r3, r0
 8005a46:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005a48:	e003      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	74fb      	strb	r3, [r7, #19]
      break;
 8005a4e:	e000      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005a50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a52:	7cfb      	ldrb	r3, [r7, #19]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10b      	bne.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a58:	4b76      	ldr	r3, [pc, #472]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a5e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a66:	4973      	ldr	r1, [pc, #460]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005a6e:	e001      	b.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a70:	7cfb      	ldrb	r3, [r7, #19]
 8005a72:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d041      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a84:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005a88:	d02a      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005a8a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005a8e:	d824      	bhi.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005a90:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a94:	d008      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005a96:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a9a:	d81e      	bhi.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00a      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005aa0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005aa4:	d010      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005aa6:	e018      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005aa8:	4b62      	ldr	r3, [pc, #392]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	4a61      	ldr	r2, [pc, #388]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005aae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ab2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005ab4:	e015      	b.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	3304      	adds	r3, #4
 8005aba:	2100      	movs	r1, #0
 8005abc:	4618      	mov	r0, r3
 8005abe:	f000 fa85 	bl	8005fcc <RCCEx_PLLSAI1_Config>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005ac6:	e00c      	b.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	3320      	adds	r3, #32
 8005acc:	2100      	movs	r1, #0
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f000 fb6e 	bl	80061b0 <RCCEx_PLLSAI2_Config>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005ad8:	e003      	b.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	74fb      	strb	r3, [r7, #19]
      break;
 8005ade:	e000      	b.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005ae0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ae2:	7cfb      	ldrb	r3, [r7, #19]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d10b      	bne.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005ae8:	4b52      	ldr	r3, [pc, #328]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aee:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005af6:	494f      	ldr	r1, [pc, #316]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005afe:	e001      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b00:	7cfb      	ldrb	r3, [r7, #19]
 8005b02:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f000 80a0 	beq.w	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b12:	2300      	movs	r3, #0
 8005b14:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005b16:	4b47      	ldr	r3, [pc, #284]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d101      	bne.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005b22:	2301      	movs	r3, #1
 8005b24:	e000      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005b26:	2300      	movs	r3, #0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00d      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b2c:	4b41      	ldr	r3, [pc, #260]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b30:	4a40      	ldr	r2, [pc, #256]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b36:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b38:	4b3e      	ldr	r3, [pc, #248]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b40:	60bb      	str	r3, [r7, #8]
 8005b42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b44:	2301      	movs	r3, #1
 8005b46:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b48:	4b3b      	ldr	r3, [pc, #236]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a3a      	ldr	r2, [pc, #232]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005b4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b54:	f7fb feee 	bl	8001934 <HAL_GetTick>
 8005b58:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005b5a:	e009      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b5c:	f7fb feea 	bl	8001934 <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d902      	bls.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	74fb      	strb	r3, [r7, #19]
        break;
 8005b6e:	e005      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005b70:	4b31      	ldr	r3, [pc, #196]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d0ef      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005b7c:	7cfb      	ldrb	r3, [r7, #19]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d15c      	bne.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005b82:	4b2c      	ldr	r3, [pc, #176]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b8c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d01f      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d019      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005ba0:	4b24      	ldr	r3, [pc, #144]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ba6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005baa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005bac:	4b21      	ldr	r3, [pc, #132]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bb2:	4a20      	ldr	r2, [pc, #128]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005bbc:	4b1d      	ldr	r3, [pc, #116]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bc2:	4a1c      	ldr	r2, [pc, #112]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005bcc:	4a19      	ldr	r2, [pc, #100]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d016      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bde:	f7fb fea9 	bl	8001934 <HAL_GetTick>
 8005be2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005be4:	e00b      	b.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005be6:	f7fb fea5 	bl	8001934 <HAL_GetTick>
 8005bea:	4602      	mov	r2, r0
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d902      	bls.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	74fb      	strb	r3, [r7, #19]
            break;
 8005bfc:	e006      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c04:	f003 0302 	and.w	r3, r3, #2
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d0ec      	beq.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005c0c:	7cfb      	ldrb	r3, [r7, #19]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d10c      	bne.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c12:	4b08      	ldr	r3, [pc, #32]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c22:	4904      	ldr	r1, [pc, #16]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c24:	4313      	orrs	r3, r2
 8005c26:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005c2a:	e009      	b.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c2c:	7cfb      	ldrb	r3, [r7, #19]
 8005c2e:	74bb      	strb	r3, [r7, #18]
 8005c30:	e006      	b.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005c32:	bf00      	nop
 8005c34:	40021000 	.word	0x40021000
 8005c38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c3c:	7cfb      	ldrb	r3, [r7, #19]
 8005c3e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c40:	7c7b      	ldrb	r3, [r7, #17]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d105      	bne.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c46:	4ba6      	ldr	r3, [pc, #664]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c4a:	4aa5      	ldr	r2, [pc, #660]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c50:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0301 	and.w	r3, r3, #1
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00a      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c5e:	4ba0      	ldr	r3, [pc, #640]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c64:	f023 0203 	bic.w	r2, r3, #3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c6c:	499c      	ldr	r1, [pc, #624]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0302 	and.w	r3, r3, #2
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00a      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c80:	4b97      	ldr	r3, [pc, #604]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c86:	f023 020c 	bic.w	r2, r3, #12
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c8e:	4994      	ldr	r1, [pc, #592]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005c90:	4313      	orrs	r3, r2
 8005c92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0304 	and.w	r3, r3, #4
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d00a      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005ca2:	4b8f      	ldr	r3, [pc, #572]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ca8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cb0:	498b      	ldr	r1, [pc, #556]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 0308 	and.w	r3, r3, #8
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d00a      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005cc4:	4b86      	ldr	r3, [pc, #536]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cd2:	4983      	ldr	r1, [pc, #524]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0310 	and.w	r3, r3, #16
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00a      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005ce6:	4b7e      	ldr	r3, [pc, #504]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cf4:	497a      	ldr	r1, [pc, #488]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0320 	and.w	r3, r3, #32
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00a      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d08:	4b75      	ldr	r3, [pc, #468]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d0e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d16:	4972      	ldr	r1, [pc, #456]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00a      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d2a:	4b6d      	ldr	r3, [pc, #436]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d30:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d38:	4969      	ldr	r1, [pc, #420]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00a      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005d4c:	4b64      	ldr	r3, [pc, #400]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d52:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d5a:	4961      	ldr	r1, [pc, #388]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00a      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d6e:	4b5c      	ldr	r3, [pc, #368]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d74:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d7c:	4958      	ldr	r1, [pc, #352]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00a      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d90:	4b53      	ldr	r3, [pc, #332]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d96:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d9e:	4950      	ldr	r1, [pc, #320]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005da0:	4313      	orrs	r3, r2
 8005da2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00a      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005db2:	4b4b      	ldr	r3, [pc, #300]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005db8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dc0:	4947      	ldr	r1, [pc, #284]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00a      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005dd4:	4b42      	ldr	r3, [pc, #264]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005dd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005dda:	f023 0203 	bic.w	r2, r3, #3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005de2:	493f      	ldr	r1, [pc, #252]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005de4:	4313      	orrs	r3, r2
 8005de6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d028      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005df6:	4b3a      	ldr	r3, [pc, #232]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dfc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e04:	4936      	ldr	r1, [pc, #216]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005e06:	4313      	orrs	r3, r2
 8005e08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e14:	d106      	bne.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e16:	4b32      	ldr	r3, [pc, #200]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	4a31      	ldr	r2, [pc, #196]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005e1c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e20:	60d3      	str	r3, [r2, #12]
 8005e22:	e011      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e28:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e2c:	d10c      	bne.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	3304      	adds	r3, #4
 8005e32:	2101      	movs	r1, #1
 8005e34:	4618      	mov	r0, r3
 8005e36:	f000 f8c9 	bl	8005fcc <RCCEx_PLLSAI1_Config>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005e3e:	7cfb      	ldrb	r3, [r7, #19]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d001      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8005e44:	7cfb      	ldrb	r3, [r7, #19]
 8005e46:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d028      	beq.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005e54:	4b22      	ldr	r3, [pc, #136]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e5a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e62:	491f      	ldr	r1, [pc, #124]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005e64:	4313      	orrs	r3, r2
 8005e66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e72:	d106      	bne.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e74:	4b1a      	ldr	r3, [pc, #104]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	4a19      	ldr	r2, [pc, #100]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005e7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e7e:	60d3      	str	r3, [r2, #12]
 8005e80:	e011      	b.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e86:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e8a:	d10c      	bne.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	3304      	adds	r3, #4
 8005e90:	2101      	movs	r1, #1
 8005e92:	4618      	mov	r0, r3
 8005e94:	f000 f89a 	bl	8005fcc <RCCEx_PLLSAI1_Config>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005e9c:	7cfb      	ldrb	r3, [r7, #19]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d001      	beq.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8005ea2:	7cfb      	ldrb	r3, [r7, #19]
 8005ea4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d02a      	beq.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eb8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ec0:	4907      	ldr	r1, [pc, #28]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ecc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ed0:	d108      	bne.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ed2:	4b03      	ldr	r3, [pc, #12]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	4a02      	ldr	r2, [pc, #8]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005ed8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005edc:	60d3      	str	r3, [r2, #12]
 8005ede:	e013      	b.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8005ee0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ee8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005eec:	d10c      	bne.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	3304      	adds	r3, #4
 8005ef2:	2101      	movs	r1, #1
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f000 f869 	bl	8005fcc <RCCEx_PLLSAI1_Config>
 8005efa:	4603      	mov	r3, r0
 8005efc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005efe:	7cfb      	ldrb	r3, [r7, #19]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d001      	beq.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8005f04:	7cfb      	ldrb	r3, [r7, #19]
 8005f06:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d02f      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f14:	4b2c      	ldr	r3, [pc, #176]	@ (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f1a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f22:	4929      	ldr	r1, [pc, #164]	@ (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005f24:	4313      	orrs	r3, r2
 8005f26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f32:	d10d      	bne.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	3304      	adds	r3, #4
 8005f38:	2102      	movs	r1, #2
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f000 f846 	bl	8005fcc <RCCEx_PLLSAI1_Config>
 8005f40:	4603      	mov	r3, r0
 8005f42:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f44:	7cfb      	ldrb	r3, [r7, #19]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d014      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8005f4a:	7cfb      	ldrb	r3, [r7, #19]
 8005f4c:	74bb      	strb	r3, [r7, #18]
 8005f4e:	e011      	b.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f58:	d10c      	bne.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	3320      	adds	r3, #32
 8005f5e:	2102      	movs	r1, #2
 8005f60:	4618      	mov	r0, r3
 8005f62:	f000 f925 	bl	80061b0 <RCCEx_PLLSAI2_Config>
 8005f66:	4603      	mov	r3, r0
 8005f68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f6a:	7cfb      	ldrb	r3, [r7, #19]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d001      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8005f70:	7cfb      	ldrb	r3, [r7, #19]
 8005f72:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00b      	beq.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005f80:	4b11      	ldr	r3, [pc, #68]	@ (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f86:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f90:	490d      	ldr	r1, [pc, #52]	@ (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d00b      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005fa4:	4b08      	ldr	r3, [pc, #32]	@ (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005faa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fb4:	4904      	ldr	r1, [pc, #16]	@ (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005fbc:	7cbb      	ldrb	r3, [r7, #18]
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3718      	adds	r7, #24
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	40021000 	.word	0x40021000

08005fcc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005fda:	4b74      	ldr	r3, [pc, #464]	@ (80061ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	f003 0303 	and.w	r3, r3, #3
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d018      	beq.n	8006018 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005fe6:	4b71      	ldr	r3, [pc, #452]	@ (80061ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	f003 0203 	and.w	r2, r3, #3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d10d      	bne.n	8006012 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
       ||
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d009      	beq.n	8006012 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005ffe:	4b6b      	ldr	r3, [pc, #428]	@ (80061ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	091b      	lsrs	r3, r3, #4
 8006004:	f003 0307 	and.w	r3, r3, #7
 8006008:	1c5a      	adds	r2, r3, #1
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
       ||
 800600e:	429a      	cmp	r2, r3
 8006010:	d047      	beq.n	80060a2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	73fb      	strb	r3, [r7, #15]
 8006016:	e044      	b.n	80060a2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2b03      	cmp	r3, #3
 800601e:	d018      	beq.n	8006052 <RCCEx_PLLSAI1_Config+0x86>
 8006020:	2b03      	cmp	r3, #3
 8006022:	d825      	bhi.n	8006070 <RCCEx_PLLSAI1_Config+0xa4>
 8006024:	2b01      	cmp	r3, #1
 8006026:	d002      	beq.n	800602e <RCCEx_PLLSAI1_Config+0x62>
 8006028:	2b02      	cmp	r3, #2
 800602a:	d009      	beq.n	8006040 <RCCEx_PLLSAI1_Config+0x74>
 800602c:	e020      	b.n	8006070 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800602e:	4b5f      	ldr	r3, [pc, #380]	@ (80061ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 0302 	and.w	r3, r3, #2
 8006036:	2b00      	cmp	r3, #0
 8006038:	d11d      	bne.n	8006076 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800603e:	e01a      	b.n	8006076 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006040:	4b5a      	ldr	r3, [pc, #360]	@ (80061ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006048:	2b00      	cmp	r3, #0
 800604a:	d116      	bne.n	800607a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006050:	e013      	b.n	800607a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006052:	4b56      	ldr	r3, [pc, #344]	@ (80061ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800605a:	2b00      	cmp	r3, #0
 800605c:	d10f      	bne.n	800607e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800605e:	4b53      	ldr	r3, [pc, #332]	@ (80061ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006066:	2b00      	cmp	r3, #0
 8006068:	d109      	bne.n	800607e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800606e:	e006      	b.n	800607e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	73fb      	strb	r3, [r7, #15]
      break;
 8006074:	e004      	b.n	8006080 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006076:	bf00      	nop
 8006078:	e002      	b.n	8006080 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800607a:	bf00      	nop
 800607c:	e000      	b.n	8006080 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800607e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006080:	7bfb      	ldrb	r3, [r7, #15]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d10d      	bne.n	80060a2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006086:	4b49      	ldr	r3, [pc, #292]	@ (80061ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6819      	ldr	r1, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	3b01      	subs	r3, #1
 8006098:	011b      	lsls	r3, r3, #4
 800609a:	430b      	orrs	r3, r1
 800609c:	4943      	ldr	r1, [pc, #268]	@ (80061ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800609e:	4313      	orrs	r3, r2
 80060a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80060a2:	7bfb      	ldrb	r3, [r7, #15]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d17c      	bne.n	80061a2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80060a8:	4b40      	ldr	r3, [pc, #256]	@ (80061ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a3f      	ldr	r2, [pc, #252]	@ (80061ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80060ae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80060b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060b4:	f7fb fc3e 	bl	8001934 <HAL_GetTick>
 80060b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80060ba:	e009      	b.n	80060d0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80060bc:	f7fb fc3a 	bl	8001934 <HAL_GetTick>
 80060c0:	4602      	mov	r2, r0
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d902      	bls.n	80060d0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	73fb      	strb	r3, [r7, #15]
        break;
 80060ce:	e005      	b.n	80060dc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80060d0:	4b36      	ldr	r3, [pc, #216]	@ (80061ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1ef      	bne.n	80060bc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80060dc:	7bfb      	ldrb	r3, [r7, #15]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d15f      	bne.n	80061a2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d110      	bne.n	800610a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80060e8:	4b30      	ldr	r3, [pc, #192]	@ (80061ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80060f0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	6892      	ldr	r2, [r2, #8]
 80060f8:	0211      	lsls	r1, r2, #8
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	68d2      	ldr	r2, [r2, #12]
 80060fe:	06d2      	lsls	r2, r2, #27
 8006100:	430a      	orrs	r2, r1
 8006102:	492a      	ldr	r1, [pc, #168]	@ (80061ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8006104:	4313      	orrs	r3, r2
 8006106:	610b      	str	r3, [r1, #16]
 8006108:	e027      	b.n	800615a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	2b01      	cmp	r3, #1
 800610e:	d112      	bne.n	8006136 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006110:	4b26      	ldr	r3, [pc, #152]	@ (80061ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8006112:	691b      	ldr	r3, [r3, #16]
 8006114:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006118:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	6892      	ldr	r2, [r2, #8]
 8006120:	0211      	lsls	r1, r2, #8
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	6912      	ldr	r2, [r2, #16]
 8006126:	0852      	lsrs	r2, r2, #1
 8006128:	3a01      	subs	r2, #1
 800612a:	0552      	lsls	r2, r2, #21
 800612c:	430a      	orrs	r2, r1
 800612e:	491f      	ldr	r1, [pc, #124]	@ (80061ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8006130:	4313      	orrs	r3, r2
 8006132:	610b      	str	r3, [r1, #16]
 8006134:	e011      	b.n	800615a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006136:	4b1d      	ldr	r3, [pc, #116]	@ (80061ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800613e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	6892      	ldr	r2, [r2, #8]
 8006146:	0211      	lsls	r1, r2, #8
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	6952      	ldr	r2, [r2, #20]
 800614c:	0852      	lsrs	r2, r2, #1
 800614e:	3a01      	subs	r2, #1
 8006150:	0652      	lsls	r2, r2, #25
 8006152:	430a      	orrs	r2, r1
 8006154:	4915      	ldr	r1, [pc, #84]	@ (80061ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8006156:	4313      	orrs	r3, r2
 8006158:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800615a:	4b14      	ldr	r3, [pc, #80]	@ (80061ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a13      	ldr	r2, [pc, #76]	@ (80061ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8006160:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006164:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006166:	f7fb fbe5 	bl	8001934 <HAL_GetTick>
 800616a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800616c:	e009      	b.n	8006182 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800616e:	f7fb fbe1 	bl	8001934 <HAL_GetTick>
 8006172:	4602      	mov	r2, r0
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	2b02      	cmp	r3, #2
 800617a:	d902      	bls.n	8006182 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800617c:	2303      	movs	r3, #3
 800617e:	73fb      	strb	r3, [r7, #15]
          break;
 8006180:	e005      	b.n	800618e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006182:	4b0a      	ldr	r3, [pc, #40]	@ (80061ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800618a:	2b00      	cmp	r3, #0
 800618c:	d0ef      	beq.n	800616e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800618e:	7bfb      	ldrb	r3, [r7, #15]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d106      	bne.n	80061a2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006194:	4b05      	ldr	r3, [pc, #20]	@ (80061ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8006196:	691a      	ldr	r2, [r3, #16]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	699b      	ldr	r3, [r3, #24]
 800619c:	4903      	ldr	r1, [pc, #12]	@ (80061ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800619e:	4313      	orrs	r3, r2
 80061a0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80061a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3710      	adds	r7, #16
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	40021000 	.word	0x40021000

080061b0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80061ba:	2300      	movs	r3, #0
 80061bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80061be:	4b69      	ldr	r3, [pc, #420]	@ (8006364 <RCCEx_PLLSAI2_Config+0x1b4>)
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	f003 0303 	and.w	r3, r3, #3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d018      	beq.n	80061fc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80061ca:	4b66      	ldr	r3, [pc, #408]	@ (8006364 <RCCEx_PLLSAI2_Config+0x1b4>)
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	f003 0203 	and.w	r2, r3, #3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d10d      	bne.n	80061f6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
       ||
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d009      	beq.n	80061f6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80061e2:	4b60      	ldr	r3, [pc, #384]	@ (8006364 <RCCEx_PLLSAI2_Config+0x1b4>)
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	091b      	lsrs	r3, r3, #4
 80061e8:	f003 0307 	and.w	r3, r3, #7
 80061ec:	1c5a      	adds	r2, r3, #1
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	685b      	ldr	r3, [r3, #4]
       ||
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d047      	beq.n	8006286 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	73fb      	strb	r3, [r7, #15]
 80061fa:	e044      	b.n	8006286 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2b03      	cmp	r3, #3
 8006202:	d018      	beq.n	8006236 <RCCEx_PLLSAI2_Config+0x86>
 8006204:	2b03      	cmp	r3, #3
 8006206:	d825      	bhi.n	8006254 <RCCEx_PLLSAI2_Config+0xa4>
 8006208:	2b01      	cmp	r3, #1
 800620a:	d002      	beq.n	8006212 <RCCEx_PLLSAI2_Config+0x62>
 800620c:	2b02      	cmp	r3, #2
 800620e:	d009      	beq.n	8006224 <RCCEx_PLLSAI2_Config+0x74>
 8006210:	e020      	b.n	8006254 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006212:	4b54      	ldr	r3, [pc, #336]	@ (8006364 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 0302 	and.w	r3, r3, #2
 800621a:	2b00      	cmp	r3, #0
 800621c:	d11d      	bne.n	800625a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006222:	e01a      	b.n	800625a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006224:	4b4f      	ldr	r3, [pc, #316]	@ (8006364 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800622c:	2b00      	cmp	r3, #0
 800622e:	d116      	bne.n	800625e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006234:	e013      	b.n	800625e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006236:	4b4b      	ldr	r3, [pc, #300]	@ (8006364 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d10f      	bne.n	8006262 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006242:	4b48      	ldr	r3, [pc, #288]	@ (8006364 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800624a:	2b00      	cmp	r3, #0
 800624c:	d109      	bne.n	8006262 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006252:	e006      	b.n	8006262 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	73fb      	strb	r3, [r7, #15]
      break;
 8006258:	e004      	b.n	8006264 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800625a:	bf00      	nop
 800625c:	e002      	b.n	8006264 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800625e:	bf00      	nop
 8006260:	e000      	b.n	8006264 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006262:	bf00      	nop
    }

    if(status == HAL_OK)
 8006264:	7bfb      	ldrb	r3, [r7, #15]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d10d      	bne.n	8006286 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800626a:	4b3e      	ldr	r3, [pc, #248]	@ (8006364 <RCCEx_PLLSAI2_Config+0x1b4>)
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6819      	ldr	r1, [r3, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	3b01      	subs	r3, #1
 800627c:	011b      	lsls	r3, r3, #4
 800627e:	430b      	orrs	r3, r1
 8006280:	4938      	ldr	r1, [pc, #224]	@ (8006364 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006282:	4313      	orrs	r3, r2
 8006284:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006286:	7bfb      	ldrb	r3, [r7, #15]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d166      	bne.n	800635a <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800628c:	4b35      	ldr	r3, [pc, #212]	@ (8006364 <RCCEx_PLLSAI2_Config+0x1b4>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a34      	ldr	r2, [pc, #208]	@ (8006364 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006292:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006296:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006298:	f7fb fb4c 	bl	8001934 <HAL_GetTick>
 800629c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800629e:	e009      	b.n	80062b4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80062a0:	f7fb fb48 	bl	8001934 <HAL_GetTick>
 80062a4:	4602      	mov	r2, r0
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d902      	bls.n	80062b4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80062ae:	2303      	movs	r3, #3
 80062b0:	73fb      	strb	r3, [r7, #15]
        break;
 80062b2:	e005      	b.n	80062c0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80062b4:	4b2b      	ldr	r3, [pc, #172]	@ (8006364 <RCCEx_PLLSAI2_Config+0x1b4>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d1ef      	bne.n	80062a0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80062c0:	7bfb      	ldrb	r3, [r7, #15]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d149      	bne.n	800635a <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d110      	bne.n	80062ee <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80062cc:	4b25      	ldr	r3, [pc, #148]	@ (8006364 <RCCEx_PLLSAI2_Config+0x1b4>)
 80062ce:	695b      	ldr	r3, [r3, #20]
 80062d0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80062d4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	6892      	ldr	r2, [r2, #8]
 80062dc:	0211      	lsls	r1, r2, #8
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	68d2      	ldr	r2, [r2, #12]
 80062e2:	06d2      	lsls	r2, r2, #27
 80062e4:	430a      	orrs	r2, r1
 80062e6:	491f      	ldr	r1, [pc, #124]	@ (8006364 <RCCEx_PLLSAI2_Config+0x1b4>)
 80062e8:	4313      	orrs	r3, r2
 80062ea:	614b      	str	r3, [r1, #20]
 80062ec:	e011      	b.n	8006312 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80062ee:	4b1d      	ldr	r3, [pc, #116]	@ (8006364 <RCCEx_PLLSAI2_Config+0x1b4>)
 80062f0:	695b      	ldr	r3, [r3, #20]
 80062f2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80062f6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	6892      	ldr	r2, [r2, #8]
 80062fe:	0211      	lsls	r1, r2, #8
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	6912      	ldr	r2, [r2, #16]
 8006304:	0852      	lsrs	r2, r2, #1
 8006306:	3a01      	subs	r2, #1
 8006308:	0652      	lsls	r2, r2, #25
 800630a:	430a      	orrs	r2, r1
 800630c:	4915      	ldr	r1, [pc, #84]	@ (8006364 <RCCEx_PLLSAI2_Config+0x1b4>)
 800630e:	4313      	orrs	r3, r2
 8006310:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006312:	4b14      	ldr	r3, [pc, #80]	@ (8006364 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a13      	ldr	r2, [pc, #76]	@ (8006364 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006318:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800631c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800631e:	f7fb fb09 	bl	8001934 <HAL_GetTick>
 8006322:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006324:	e009      	b.n	800633a <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006326:	f7fb fb05 	bl	8001934 <HAL_GetTick>
 800632a:	4602      	mov	r2, r0
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	2b02      	cmp	r3, #2
 8006332:	d902      	bls.n	800633a <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8006334:	2303      	movs	r3, #3
 8006336:	73fb      	strb	r3, [r7, #15]
          break;
 8006338:	e005      	b.n	8006346 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800633a:	4b0a      	ldr	r3, [pc, #40]	@ (8006364 <RCCEx_PLLSAI2_Config+0x1b4>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006342:	2b00      	cmp	r3, #0
 8006344:	d0ef      	beq.n	8006326 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8006346:	7bfb      	ldrb	r3, [r7, #15]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d106      	bne.n	800635a <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800634c:	4b05      	ldr	r3, [pc, #20]	@ (8006364 <RCCEx_PLLSAI2_Config+0x1b4>)
 800634e:	695a      	ldr	r2, [r3, #20]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	695b      	ldr	r3, [r3, #20]
 8006354:	4903      	ldr	r1, [pc, #12]	@ (8006364 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006356:	4313      	orrs	r3, r2
 8006358:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800635a:	7bfb      	ldrb	r3, [r7, #15]
}
 800635c:	4618      	mov	r0, r3
 800635e:	3710      	adds	r7, #16
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	40021000 	.word	0x40021000

08006368 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d101      	bne.n	800637a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e049      	b.n	800640e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006380:	b2db      	uxtb	r3, r3
 8006382:	2b00      	cmp	r3, #0
 8006384:	d106      	bne.n	8006394 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 f841 	bl	8006416 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2202      	movs	r2, #2
 8006398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	3304      	adds	r3, #4
 80063a4:	4619      	mov	r1, r3
 80063a6:	4610      	mov	r0, r2
 80063a8:	f000 f9e0 	bl	800676c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3708      	adds	r7, #8
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006416:	b480      	push	{r7}
 8006418:	b083      	sub	sp, #12
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800641e:	bf00      	nop
 8006420:	370c      	adds	r7, #12
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
	...

0800642c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800643a:	b2db      	uxtb	r3, r3
 800643c:	2b01      	cmp	r3, #1
 800643e:	d001      	beq.n	8006444 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	e04f      	b.n	80064e4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2202      	movs	r2, #2
 8006448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	68da      	ldr	r2, [r3, #12]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f042 0201 	orr.w	r2, r2, #1
 800645a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a23      	ldr	r2, [pc, #140]	@ (80064f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d01d      	beq.n	80064a2 <HAL_TIM_Base_Start_IT+0x76>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800646e:	d018      	beq.n	80064a2 <HAL_TIM_Base_Start_IT+0x76>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a1f      	ldr	r2, [pc, #124]	@ (80064f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d013      	beq.n	80064a2 <HAL_TIM_Base_Start_IT+0x76>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a1e      	ldr	r2, [pc, #120]	@ (80064f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d00e      	beq.n	80064a2 <HAL_TIM_Base_Start_IT+0x76>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a1c      	ldr	r2, [pc, #112]	@ (80064fc <HAL_TIM_Base_Start_IT+0xd0>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d009      	beq.n	80064a2 <HAL_TIM_Base_Start_IT+0x76>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a1b      	ldr	r2, [pc, #108]	@ (8006500 <HAL_TIM_Base_Start_IT+0xd4>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d004      	beq.n	80064a2 <HAL_TIM_Base_Start_IT+0x76>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a19      	ldr	r2, [pc, #100]	@ (8006504 <HAL_TIM_Base_Start_IT+0xd8>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d115      	bne.n	80064ce <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	689a      	ldr	r2, [r3, #8]
 80064a8:	4b17      	ldr	r3, [pc, #92]	@ (8006508 <HAL_TIM_Base_Start_IT+0xdc>)
 80064aa:	4013      	ands	r3, r2
 80064ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2b06      	cmp	r3, #6
 80064b2:	d015      	beq.n	80064e0 <HAL_TIM_Base_Start_IT+0xb4>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064ba:	d011      	beq.n	80064e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f042 0201 	orr.w	r2, r2, #1
 80064ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064cc:	e008      	b.n	80064e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f042 0201 	orr.w	r2, r2, #1
 80064dc:	601a      	str	r2, [r3, #0]
 80064de:	e000      	b.n	80064e2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3714      	adds	r7, #20
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr
 80064f0:	40012c00 	.word	0x40012c00
 80064f4:	40000400 	.word	0x40000400
 80064f8:	40000800 	.word	0x40000800
 80064fc:	40000c00 	.word	0x40000c00
 8006500:	40013400 	.word	0x40013400
 8006504:	40014000 	.word	0x40014000
 8006508:	00010007 	.word	0x00010007

0800650c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	f003 0302 	and.w	r3, r3, #2
 800652a:	2b00      	cmp	r3, #0
 800652c:	d020      	beq.n	8006570 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f003 0302 	and.w	r3, r3, #2
 8006534:	2b00      	cmp	r3, #0
 8006536:	d01b      	beq.n	8006570 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f06f 0202 	mvn.w	r2, #2
 8006540:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2201      	movs	r2, #1
 8006546:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	f003 0303 	and.w	r3, r3, #3
 8006552:	2b00      	cmp	r3, #0
 8006554:	d003      	beq.n	800655e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 f8e9 	bl	800672e <HAL_TIM_IC_CaptureCallback>
 800655c:	e005      	b.n	800656a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 f8db 	bl	800671a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 f8ec 	bl	8006742 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	f003 0304 	and.w	r3, r3, #4
 8006576:	2b00      	cmp	r3, #0
 8006578:	d020      	beq.n	80065bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f003 0304 	and.w	r3, r3, #4
 8006580:	2b00      	cmp	r3, #0
 8006582:	d01b      	beq.n	80065bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f06f 0204 	mvn.w	r2, #4
 800658c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2202      	movs	r2, #2
 8006592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d003      	beq.n	80065aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 f8c3 	bl	800672e <HAL_TIM_IC_CaptureCallback>
 80065a8:	e005      	b.n	80065b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 f8b5 	bl	800671a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f8c6 	bl	8006742 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	f003 0308 	and.w	r3, r3, #8
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d020      	beq.n	8006608 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f003 0308 	and.w	r3, r3, #8
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d01b      	beq.n	8006608 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f06f 0208 	mvn.w	r2, #8
 80065d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2204      	movs	r2, #4
 80065de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	69db      	ldr	r3, [r3, #28]
 80065e6:	f003 0303 	and.w	r3, r3, #3
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d003      	beq.n	80065f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 f89d 	bl	800672e <HAL_TIM_IC_CaptureCallback>
 80065f4:	e005      	b.n	8006602 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 f88f 	bl	800671a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 f8a0 	bl	8006742 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	f003 0310 	and.w	r3, r3, #16
 800660e:	2b00      	cmp	r3, #0
 8006610:	d020      	beq.n	8006654 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f003 0310 	and.w	r3, r3, #16
 8006618:	2b00      	cmp	r3, #0
 800661a:	d01b      	beq.n	8006654 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f06f 0210 	mvn.w	r2, #16
 8006624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2208      	movs	r2, #8
 800662a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	69db      	ldr	r3, [r3, #28]
 8006632:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006636:	2b00      	cmp	r3, #0
 8006638:	d003      	beq.n	8006642 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 f877 	bl	800672e <HAL_TIM_IC_CaptureCallback>
 8006640:	e005      	b.n	800664e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 f869 	bl	800671a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 f87a 	bl	8006742 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	f003 0301 	and.w	r3, r3, #1
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00c      	beq.n	8006678 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f003 0301 	and.w	r3, r3, #1
 8006664:	2b00      	cmp	r3, #0
 8006666:	d007      	beq.n	8006678 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f06f 0201 	mvn.w	r2, #1
 8006670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f7fa fdf6 	bl	8001264 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800667e:	2b00      	cmp	r3, #0
 8006680:	d104      	bne.n	800668c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006688:	2b00      	cmp	r3, #0
 800668a:	d00c      	beq.n	80066a6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006692:	2b00      	cmp	r3, #0
 8006694:	d007      	beq.n	80066a6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800669e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 f913 	bl	80068cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d00c      	beq.n	80066ca <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d007      	beq.n	80066ca <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80066c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 f90b 	bl	80068e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00c      	beq.n	80066ee <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d007      	beq.n	80066ee <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80066e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 f834 	bl	8006756 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	f003 0320 	and.w	r3, r3, #32
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d00c      	beq.n	8006712 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f003 0320 	and.w	r3, r3, #32
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d007      	beq.n	8006712 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f06f 0220 	mvn.w	r2, #32
 800670a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 f8d3 	bl	80068b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006712:	bf00      	nop
 8006714:	3710      	adds	r7, #16
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800671a:	b480      	push	{r7}
 800671c:	b083      	sub	sp, #12
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006722:	bf00      	nop
 8006724:	370c      	adds	r7, #12
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr

0800672e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800672e:	b480      	push	{r7}
 8006730:	b083      	sub	sp, #12
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006736:	bf00      	nop
 8006738:	370c      	adds	r7, #12
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr

08006742 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006742:	b480      	push	{r7}
 8006744:	b083      	sub	sp, #12
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800674a:	bf00      	nop
 800674c:	370c      	adds	r7, #12
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr

08006756 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006756:	b480      	push	{r7}
 8006758:	b083      	sub	sp, #12
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800675e:	bf00      	nop
 8006760:	370c      	adds	r7, #12
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
	...

0800676c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a46      	ldr	r2, [pc, #280]	@ (8006898 <TIM_Base_SetConfig+0x12c>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d013      	beq.n	80067ac <TIM_Base_SetConfig+0x40>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800678a:	d00f      	beq.n	80067ac <TIM_Base_SetConfig+0x40>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4a43      	ldr	r2, [pc, #268]	@ (800689c <TIM_Base_SetConfig+0x130>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d00b      	beq.n	80067ac <TIM_Base_SetConfig+0x40>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4a42      	ldr	r2, [pc, #264]	@ (80068a0 <TIM_Base_SetConfig+0x134>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d007      	beq.n	80067ac <TIM_Base_SetConfig+0x40>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4a41      	ldr	r2, [pc, #260]	@ (80068a4 <TIM_Base_SetConfig+0x138>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d003      	beq.n	80067ac <TIM_Base_SetConfig+0x40>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4a40      	ldr	r2, [pc, #256]	@ (80068a8 <TIM_Base_SetConfig+0x13c>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d108      	bne.n	80067be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a35      	ldr	r2, [pc, #212]	@ (8006898 <TIM_Base_SetConfig+0x12c>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d01f      	beq.n	8006806 <TIM_Base_SetConfig+0x9a>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067cc:	d01b      	beq.n	8006806 <TIM_Base_SetConfig+0x9a>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a32      	ldr	r2, [pc, #200]	@ (800689c <TIM_Base_SetConfig+0x130>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d017      	beq.n	8006806 <TIM_Base_SetConfig+0x9a>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a31      	ldr	r2, [pc, #196]	@ (80068a0 <TIM_Base_SetConfig+0x134>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d013      	beq.n	8006806 <TIM_Base_SetConfig+0x9a>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a30      	ldr	r2, [pc, #192]	@ (80068a4 <TIM_Base_SetConfig+0x138>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d00f      	beq.n	8006806 <TIM_Base_SetConfig+0x9a>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a2f      	ldr	r2, [pc, #188]	@ (80068a8 <TIM_Base_SetConfig+0x13c>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d00b      	beq.n	8006806 <TIM_Base_SetConfig+0x9a>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a2e      	ldr	r2, [pc, #184]	@ (80068ac <TIM_Base_SetConfig+0x140>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d007      	beq.n	8006806 <TIM_Base_SetConfig+0x9a>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a2d      	ldr	r2, [pc, #180]	@ (80068b0 <TIM_Base_SetConfig+0x144>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d003      	beq.n	8006806 <TIM_Base_SetConfig+0x9a>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a2c      	ldr	r2, [pc, #176]	@ (80068b4 <TIM_Base_SetConfig+0x148>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d108      	bne.n	8006818 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800680c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	68fa      	ldr	r2, [r7, #12]
 8006814:	4313      	orrs	r3, r2
 8006816:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	695b      	ldr	r3, [r3, #20]
 8006822:	4313      	orrs	r3, r2
 8006824:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	689a      	ldr	r2, [r3, #8]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a16      	ldr	r2, [pc, #88]	@ (8006898 <TIM_Base_SetConfig+0x12c>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d00f      	beq.n	8006864 <TIM_Base_SetConfig+0xf8>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a18      	ldr	r2, [pc, #96]	@ (80068a8 <TIM_Base_SetConfig+0x13c>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d00b      	beq.n	8006864 <TIM_Base_SetConfig+0xf8>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4a17      	ldr	r2, [pc, #92]	@ (80068ac <TIM_Base_SetConfig+0x140>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d007      	beq.n	8006864 <TIM_Base_SetConfig+0xf8>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a16      	ldr	r2, [pc, #88]	@ (80068b0 <TIM_Base_SetConfig+0x144>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d003      	beq.n	8006864 <TIM_Base_SetConfig+0xf8>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4a15      	ldr	r2, [pc, #84]	@ (80068b4 <TIM_Base_SetConfig+0x148>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d103      	bne.n	800686c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	691a      	ldr	r2, [r3, #16]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	f003 0301 	and.w	r3, r3, #1
 800687a:	2b01      	cmp	r3, #1
 800687c:	d105      	bne.n	800688a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	f023 0201 	bic.w	r2, r3, #1
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	611a      	str	r2, [r3, #16]
  }
}
 800688a:	bf00      	nop
 800688c:	3714      	adds	r7, #20
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr
 8006896:	bf00      	nop
 8006898:	40012c00 	.word	0x40012c00
 800689c:	40000400 	.word	0x40000400
 80068a0:	40000800 	.word	0x40000800
 80068a4:	40000c00 	.word	0x40000c00
 80068a8:	40013400 	.word	0x40013400
 80068ac:	40014000 	.word	0x40014000
 80068b0:	40014400 	.word	0x40014400
 80068b4:	40014800 	.word	0x40014800

080068b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068d4:	bf00      	nop
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80068e8:	bf00      	nop
 80068ea:	370c      	adds	r7, #12
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d101      	bne.n	8006906 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	e040      	b.n	8006988 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800690a:	2b00      	cmp	r3, #0
 800690c:	d106      	bne.n	800691c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f7fa fe84 	bl	8001624 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2224      	movs	r2, #36	@ 0x24
 8006920:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f022 0201 	bic.w	r2, r2, #1
 8006930:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006936:	2b00      	cmp	r3, #0
 8006938:	d002      	beq.n	8006940 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 fe06 	bl	800754c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 fb4b 	bl	8006fdc <UART_SetConfig>
 8006946:	4603      	mov	r3, r0
 8006948:	2b01      	cmp	r3, #1
 800694a:	d101      	bne.n	8006950 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	e01b      	b.n	8006988 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	685a      	ldr	r2, [r3, #4]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800695e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	689a      	ldr	r2, [r3, #8]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800696e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f042 0201 	orr.w	r2, r2, #1
 800697e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 fe85 	bl	8007690 <UART_CheckIdleState>
 8006986:	4603      	mov	r3, r0
}
 8006988:	4618      	mov	r0, r3
 800698a:	3708      	adds	r7, #8
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b0ba      	sub	sp, #232	@ 0xe8
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	69db      	ldr	r3, [r3, #28]
 800699e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80069b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80069ba:	f640 030f 	movw	r3, #2063	@ 0x80f
 80069be:	4013      	ands	r3, r2
 80069c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80069c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d115      	bne.n	80069f8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80069cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069d0:	f003 0320 	and.w	r3, r3, #32
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00f      	beq.n	80069f8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80069d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069dc:	f003 0320 	and.w	r3, r3, #32
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d009      	beq.n	80069f8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	f000 82ca 	beq.w	8006f82 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	4798      	blx	r3
      }
      return;
 80069f6:	e2c4      	b.n	8006f82 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80069f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f000 8117 	beq.w	8006c30 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006a02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a06:	f003 0301 	and.w	r3, r3, #1
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d106      	bne.n	8006a1c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006a0e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006a12:	4b85      	ldr	r3, [pc, #532]	@ (8006c28 <HAL_UART_IRQHandler+0x298>)
 8006a14:	4013      	ands	r3, r2
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	f000 810a 	beq.w	8006c30 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a20:	f003 0301 	and.w	r3, r3, #1
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d011      	beq.n	8006a4c <HAL_UART_IRQHandler+0xbc>
 8006a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00b      	beq.n	8006a4c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a42:	f043 0201 	orr.w	r2, r3, #1
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a50:	f003 0302 	and.w	r3, r3, #2
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d011      	beq.n	8006a7c <HAL_UART_IRQHandler+0xec>
 8006a58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a5c:	f003 0301 	and.w	r3, r3, #1
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d00b      	beq.n	8006a7c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2202      	movs	r2, #2
 8006a6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a72:	f043 0204 	orr.w	r2, r3, #4
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a80:	f003 0304 	and.w	r3, r3, #4
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d011      	beq.n	8006aac <HAL_UART_IRQHandler+0x11c>
 8006a88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a8c:	f003 0301 	and.w	r3, r3, #1
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d00b      	beq.n	8006aac <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2204      	movs	r2, #4
 8006a9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006aa2:	f043 0202 	orr.w	r2, r3, #2
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ab0:	f003 0308 	and.w	r3, r3, #8
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d017      	beq.n	8006ae8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006ab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006abc:	f003 0320 	and.w	r3, r3, #32
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d105      	bne.n	8006ad0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006ac4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ac8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d00b      	beq.n	8006ae8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2208      	movs	r2, #8
 8006ad6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ade:	f043 0208 	orr.w	r2, r3, #8
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006aec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d012      	beq.n	8006b1a <HAL_UART_IRQHandler+0x18a>
 8006af4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006af8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d00c      	beq.n	8006b1a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006b08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b10:	f043 0220 	orr.w	r2, r3, #32
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f000 8230 	beq.w	8006f86 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b2a:	f003 0320 	and.w	r3, r3, #32
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00d      	beq.n	8006b4e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006b32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b36:	f003 0320 	and.w	r3, r3, #32
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d007      	beq.n	8006b4e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d003      	beq.n	8006b4e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b54:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b62:	2b40      	cmp	r3, #64	@ 0x40
 8006b64:	d005      	beq.n	8006b72 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006b66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b6a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d04f      	beq.n	8006c12 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 fea1 	bl	80078ba <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b82:	2b40      	cmp	r3, #64	@ 0x40
 8006b84:	d141      	bne.n	8006c0a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	3308      	adds	r3, #8
 8006b8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006b94:	e853 3f00 	ldrex	r3, [r3]
 8006b98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006b9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ba0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ba4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	3308      	adds	r3, #8
 8006bae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006bb2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006bb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006bbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006bc2:	e841 2300 	strex	r3, r2, [r1]
 8006bc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006bca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1d9      	bne.n	8006b86 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d013      	beq.n	8006c02 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bde:	4a13      	ldr	r2, [pc, #76]	@ (8006c2c <HAL_UART_IRQHandler+0x29c>)
 8006be0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7fc ff00 	bl	80039ec <HAL_DMA_Abort_IT>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d017      	beq.n	8006c22 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006bfc:	4610      	mov	r0, r2
 8006bfe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c00:	e00f      	b.n	8006c22 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 f9d4 	bl	8006fb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c08:	e00b      	b.n	8006c22 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 f9d0 	bl	8006fb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c10:	e007      	b.n	8006c22 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f9cc 	bl	8006fb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006c20:	e1b1      	b.n	8006f86 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c22:	bf00      	nop
    return;
 8006c24:	e1af      	b.n	8006f86 <HAL_UART_IRQHandler+0x5f6>
 8006c26:	bf00      	nop
 8006c28:	04000120 	.word	0x04000120
 8006c2c:	08007983 	.word	0x08007983

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	f040 816a 	bne.w	8006f0e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c3e:	f003 0310 	and.w	r3, r3, #16
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	f000 8163 	beq.w	8006f0e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c4c:	f003 0310 	and.w	r3, r3, #16
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f000 815c 	beq.w	8006f0e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2210      	movs	r2, #16
 8006c5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c68:	2b40      	cmp	r3, #64	@ 0x40
 8006c6a:	f040 80d4 	bne.w	8006e16 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006c7a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	f000 80ad 	beq.w	8006dde <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006c8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	f080 80a5 	bcs.w	8006dde <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006c9a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 0320 	and.w	r3, r3, #32
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	f040 8086 	bne.w	8006dbc <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006cbc:	e853 3f00 	ldrex	r3, [r3]
 8006cc0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006cc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006cc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ccc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006cda:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006cde:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006ce6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006cea:	e841 2300 	strex	r3, r2, [r1]
 8006cee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006cf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1da      	bne.n	8006cb0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	3308      	adds	r3, #8
 8006d00:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d04:	e853 3f00 	ldrex	r3, [r3]
 8006d08:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006d0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006d0c:	f023 0301 	bic.w	r3, r3, #1
 8006d10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	3308      	adds	r3, #8
 8006d1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006d1e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006d22:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d24:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006d26:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006d2a:	e841 2300 	strex	r3, r2, [r1]
 8006d2e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006d30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d1e1      	bne.n	8006cfa <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	3308      	adds	r3, #8
 8006d3c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006d40:	e853 3f00 	ldrex	r3, [r3]
 8006d44:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006d46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	3308      	adds	r3, #8
 8006d56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006d5a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006d5c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006d60:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006d62:	e841 2300 	strex	r3, r2, [r1]
 8006d66:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006d68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d1e3      	bne.n	8006d36 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2220      	movs	r2, #32
 8006d72:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d84:	e853 3f00 	ldrex	r3, [r3]
 8006d88:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006d8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d8c:	f023 0310 	bic.w	r3, r3, #16
 8006d90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	461a      	mov	r2, r3
 8006d9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d9e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006da0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006da4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006da6:	e841 2300 	strex	r3, r2, [r1]
 8006daa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006dac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1e4      	bne.n	8006d7c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006db6:	4618      	mov	r0, r3
 8006db8:	f7fc fdda 	bl	8003970 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2202      	movs	r2, #2
 8006dc0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 f8f4 	bl	8006fc4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006ddc:	e0d5      	b.n	8006f8a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006de4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006de8:	429a      	cmp	r2, r3
 8006dea:	f040 80ce 	bne.w	8006f8a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f003 0320 	and.w	r3, r3, #32
 8006dfa:	2b20      	cmp	r3, #32
 8006dfc:	f040 80c5 	bne.w	8006f8a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2202      	movs	r2, #2
 8006e04:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 f8d8 	bl	8006fc4 <HAL_UARTEx_RxEventCallback>
      return;
 8006e14:	e0b9      	b.n	8006f8a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	1ad3      	subs	r3, r2, r3
 8006e26:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	f000 80ab 	beq.w	8006f8e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8006e38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	f000 80a6 	beq.w	8006f8e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e4a:	e853 3f00 	ldrex	r3, [r3]
 8006e4e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e56:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	461a      	mov	r2, r3
 8006e60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006e64:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e66:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e6c:	e841 2300 	strex	r3, r2, [r1]
 8006e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d1e4      	bne.n	8006e42 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	3308      	adds	r3, #8
 8006e7e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e82:	e853 3f00 	ldrex	r3, [r3]
 8006e86:	623b      	str	r3, [r7, #32]
   return(result);
 8006e88:	6a3b      	ldr	r3, [r7, #32]
 8006e8a:	f023 0301 	bic.w	r3, r3, #1
 8006e8e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	3308      	adds	r3, #8
 8006e98:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006e9c:	633a      	str	r2, [r7, #48]	@ 0x30
 8006e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ea2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ea4:	e841 2300 	strex	r3, r2, [r1]
 8006ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d1e3      	bne.n	8006e78 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2220      	movs	r2, #32
 8006eb4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	e853 3f00 	ldrex	r3, [r3]
 8006ed0:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f023 0310 	bic.w	r3, r3, #16
 8006ed8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006ee6:	61fb      	str	r3, [r7, #28]
 8006ee8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eea:	69b9      	ldr	r1, [r7, #24]
 8006eec:	69fa      	ldr	r2, [r7, #28]
 8006eee:	e841 2300 	strex	r3, r2, [r1]
 8006ef2:	617b      	str	r3, [r7, #20]
   return(result);
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d1e4      	bne.n	8006ec4 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2202      	movs	r2, #2
 8006efe:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006f04:	4619      	mov	r1, r3
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f85c 	bl	8006fc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f0c:	e03f      	b.n	8006f8e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d00e      	beq.n	8006f38 <HAL_UART_IRQHandler+0x5a8>
 8006f1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d008      	beq.n	8006f38 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006f2e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 fd66 	bl	8007a02 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f36:	e02d      	b.n	8006f94 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d00e      	beq.n	8006f62 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d008      	beq.n	8006f62 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d01c      	beq.n	8006f92 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	4798      	blx	r3
    }
    return;
 8006f60:	e017      	b.n	8006f92 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d012      	beq.n	8006f94 <HAL_UART_IRQHandler+0x604>
 8006f6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00c      	beq.n	8006f94 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 fd17 	bl	80079ae <UART_EndTransmit_IT>
    return;
 8006f80:	e008      	b.n	8006f94 <HAL_UART_IRQHandler+0x604>
      return;
 8006f82:	bf00      	nop
 8006f84:	e006      	b.n	8006f94 <HAL_UART_IRQHandler+0x604>
    return;
 8006f86:	bf00      	nop
 8006f88:	e004      	b.n	8006f94 <HAL_UART_IRQHandler+0x604>
      return;
 8006f8a:	bf00      	nop
 8006f8c:	e002      	b.n	8006f94 <HAL_UART_IRQHandler+0x604>
      return;
 8006f8e:	bf00      	nop
 8006f90:	e000      	b.n	8006f94 <HAL_UART_IRQHandler+0x604>
    return;
 8006f92:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006f94:	37e8      	adds	r7, #232	@ 0xe8
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop

08006f9c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006fa4:	bf00      	nop
 8006fa6:	370c      	adds	r7, #12
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006fb8:	bf00      	nop
 8006fba:	370c      	adds	r7, #12
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr

08006fc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	460b      	mov	r3, r1
 8006fce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006fd0:	bf00      	nop
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fe0:	b08a      	sub	sp, #40	@ 0x28
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	689a      	ldr	r2, [r3, #8]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	431a      	orrs	r2, r3
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	695b      	ldr	r3, [r3, #20]
 8006ffa:	431a      	orrs	r2, r3
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	69db      	ldr	r3, [r3, #28]
 8007000:	4313      	orrs	r3, r2
 8007002:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	4ba4      	ldr	r3, [pc, #656]	@ (800729c <UART_SetConfig+0x2c0>)
 800700c:	4013      	ands	r3, r2
 800700e:	68fa      	ldr	r2, [r7, #12]
 8007010:	6812      	ldr	r2, [r2, #0]
 8007012:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007014:	430b      	orrs	r3, r1
 8007016:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	68da      	ldr	r2, [r3, #12]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	430a      	orrs	r2, r1
 800702c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	699b      	ldr	r3, [r3, #24]
 8007032:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a99      	ldr	r2, [pc, #612]	@ (80072a0 <UART_SetConfig+0x2c4>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d004      	beq.n	8007048 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6a1b      	ldr	r3, [r3, #32]
 8007042:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007044:	4313      	orrs	r3, r2
 8007046:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007058:	430a      	orrs	r2, r1
 800705a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a90      	ldr	r2, [pc, #576]	@ (80072a4 <UART_SetConfig+0x2c8>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d126      	bne.n	80070b4 <UART_SetConfig+0xd8>
 8007066:	4b90      	ldr	r3, [pc, #576]	@ (80072a8 <UART_SetConfig+0x2cc>)
 8007068:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800706c:	f003 0303 	and.w	r3, r3, #3
 8007070:	2b03      	cmp	r3, #3
 8007072:	d81b      	bhi.n	80070ac <UART_SetConfig+0xd0>
 8007074:	a201      	add	r2, pc, #4	@ (adr r2, 800707c <UART_SetConfig+0xa0>)
 8007076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800707a:	bf00      	nop
 800707c:	0800708d 	.word	0x0800708d
 8007080:	0800709d 	.word	0x0800709d
 8007084:	08007095 	.word	0x08007095
 8007088:	080070a5 	.word	0x080070a5
 800708c:	2301      	movs	r3, #1
 800708e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007092:	e116      	b.n	80072c2 <UART_SetConfig+0x2e6>
 8007094:	2302      	movs	r3, #2
 8007096:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800709a:	e112      	b.n	80072c2 <UART_SetConfig+0x2e6>
 800709c:	2304      	movs	r3, #4
 800709e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070a2:	e10e      	b.n	80072c2 <UART_SetConfig+0x2e6>
 80070a4:	2308      	movs	r3, #8
 80070a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070aa:	e10a      	b.n	80072c2 <UART_SetConfig+0x2e6>
 80070ac:	2310      	movs	r3, #16
 80070ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070b2:	e106      	b.n	80072c2 <UART_SetConfig+0x2e6>
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a7c      	ldr	r2, [pc, #496]	@ (80072ac <UART_SetConfig+0x2d0>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d138      	bne.n	8007130 <UART_SetConfig+0x154>
 80070be:	4b7a      	ldr	r3, [pc, #488]	@ (80072a8 <UART_SetConfig+0x2cc>)
 80070c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070c4:	f003 030c 	and.w	r3, r3, #12
 80070c8:	2b0c      	cmp	r3, #12
 80070ca:	d82d      	bhi.n	8007128 <UART_SetConfig+0x14c>
 80070cc:	a201      	add	r2, pc, #4	@ (adr r2, 80070d4 <UART_SetConfig+0xf8>)
 80070ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d2:	bf00      	nop
 80070d4:	08007109 	.word	0x08007109
 80070d8:	08007129 	.word	0x08007129
 80070dc:	08007129 	.word	0x08007129
 80070e0:	08007129 	.word	0x08007129
 80070e4:	08007119 	.word	0x08007119
 80070e8:	08007129 	.word	0x08007129
 80070ec:	08007129 	.word	0x08007129
 80070f0:	08007129 	.word	0x08007129
 80070f4:	08007111 	.word	0x08007111
 80070f8:	08007129 	.word	0x08007129
 80070fc:	08007129 	.word	0x08007129
 8007100:	08007129 	.word	0x08007129
 8007104:	08007121 	.word	0x08007121
 8007108:	2300      	movs	r3, #0
 800710a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800710e:	e0d8      	b.n	80072c2 <UART_SetConfig+0x2e6>
 8007110:	2302      	movs	r3, #2
 8007112:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007116:	e0d4      	b.n	80072c2 <UART_SetConfig+0x2e6>
 8007118:	2304      	movs	r3, #4
 800711a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800711e:	e0d0      	b.n	80072c2 <UART_SetConfig+0x2e6>
 8007120:	2308      	movs	r3, #8
 8007122:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007126:	e0cc      	b.n	80072c2 <UART_SetConfig+0x2e6>
 8007128:	2310      	movs	r3, #16
 800712a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800712e:	e0c8      	b.n	80072c2 <UART_SetConfig+0x2e6>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a5e      	ldr	r2, [pc, #376]	@ (80072b0 <UART_SetConfig+0x2d4>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d125      	bne.n	8007186 <UART_SetConfig+0x1aa>
 800713a:	4b5b      	ldr	r3, [pc, #364]	@ (80072a8 <UART_SetConfig+0x2cc>)
 800713c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007140:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007144:	2b30      	cmp	r3, #48	@ 0x30
 8007146:	d016      	beq.n	8007176 <UART_SetConfig+0x19a>
 8007148:	2b30      	cmp	r3, #48	@ 0x30
 800714a:	d818      	bhi.n	800717e <UART_SetConfig+0x1a2>
 800714c:	2b20      	cmp	r3, #32
 800714e:	d00a      	beq.n	8007166 <UART_SetConfig+0x18a>
 8007150:	2b20      	cmp	r3, #32
 8007152:	d814      	bhi.n	800717e <UART_SetConfig+0x1a2>
 8007154:	2b00      	cmp	r3, #0
 8007156:	d002      	beq.n	800715e <UART_SetConfig+0x182>
 8007158:	2b10      	cmp	r3, #16
 800715a:	d008      	beq.n	800716e <UART_SetConfig+0x192>
 800715c:	e00f      	b.n	800717e <UART_SetConfig+0x1a2>
 800715e:	2300      	movs	r3, #0
 8007160:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007164:	e0ad      	b.n	80072c2 <UART_SetConfig+0x2e6>
 8007166:	2302      	movs	r3, #2
 8007168:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800716c:	e0a9      	b.n	80072c2 <UART_SetConfig+0x2e6>
 800716e:	2304      	movs	r3, #4
 8007170:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007174:	e0a5      	b.n	80072c2 <UART_SetConfig+0x2e6>
 8007176:	2308      	movs	r3, #8
 8007178:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800717c:	e0a1      	b.n	80072c2 <UART_SetConfig+0x2e6>
 800717e:	2310      	movs	r3, #16
 8007180:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007184:	e09d      	b.n	80072c2 <UART_SetConfig+0x2e6>
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a4a      	ldr	r2, [pc, #296]	@ (80072b4 <UART_SetConfig+0x2d8>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d125      	bne.n	80071dc <UART_SetConfig+0x200>
 8007190:	4b45      	ldr	r3, [pc, #276]	@ (80072a8 <UART_SetConfig+0x2cc>)
 8007192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007196:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800719a:	2bc0      	cmp	r3, #192	@ 0xc0
 800719c:	d016      	beq.n	80071cc <UART_SetConfig+0x1f0>
 800719e:	2bc0      	cmp	r3, #192	@ 0xc0
 80071a0:	d818      	bhi.n	80071d4 <UART_SetConfig+0x1f8>
 80071a2:	2b80      	cmp	r3, #128	@ 0x80
 80071a4:	d00a      	beq.n	80071bc <UART_SetConfig+0x1e0>
 80071a6:	2b80      	cmp	r3, #128	@ 0x80
 80071a8:	d814      	bhi.n	80071d4 <UART_SetConfig+0x1f8>
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d002      	beq.n	80071b4 <UART_SetConfig+0x1d8>
 80071ae:	2b40      	cmp	r3, #64	@ 0x40
 80071b0:	d008      	beq.n	80071c4 <UART_SetConfig+0x1e8>
 80071b2:	e00f      	b.n	80071d4 <UART_SetConfig+0x1f8>
 80071b4:	2300      	movs	r3, #0
 80071b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071ba:	e082      	b.n	80072c2 <UART_SetConfig+0x2e6>
 80071bc:	2302      	movs	r3, #2
 80071be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071c2:	e07e      	b.n	80072c2 <UART_SetConfig+0x2e6>
 80071c4:	2304      	movs	r3, #4
 80071c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071ca:	e07a      	b.n	80072c2 <UART_SetConfig+0x2e6>
 80071cc:	2308      	movs	r3, #8
 80071ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071d2:	e076      	b.n	80072c2 <UART_SetConfig+0x2e6>
 80071d4:	2310      	movs	r3, #16
 80071d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071da:	e072      	b.n	80072c2 <UART_SetConfig+0x2e6>
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a35      	ldr	r2, [pc, #212]	@ (80072b8 <UART_SetConfig+0x2dc>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d12a      	bne.n	800723c <UART_SetConfig+0x260>
 80071e6:	4b30      	ldr	r3, [pc, #192]	@ (80072a8 <UART_SetConfig+0x2cc>)
 80071e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071f4:	d01a      	beq.n	800722c <UART_SetConfig+0x250>
 80071f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071fa:	d81b      	bhi.n	8007234 <UART_SetConfig+0x258>
 80071fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007200:	d00c      	beq.n	800721c <UART_SetConfig+0x240>
 8007202:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007206:	d815      	bhi.n	8007234 <UART_SetConfig+0x258>
 8007208:	2b00      	cmp	r3, #0
 800720a:	d003      	beq.n	8007214 <UART_SetConfig+0x238>
 800720c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007210:	d008      	beq.n	8007224 <UART_SetConfig+0x248>
 8007212:	e00f      	b.n	8007234 <UART_SetConfig+0x258>
 8007214:	2300      	movs	r3, #0
 8007216:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800721a:	e052      	b.n	80072c2 <UART_SetConfig+0x2e6>
 800721c:	2302      	movs	r3, #2
 800721e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007222:	e04e      	b.n	80072c2 <UART_SetConfig+0x2e6>
 8007224:	2304      	movs	r3, #4
 8007226:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800722a:	e04a      	b.n	80072c2 <UART_SetConfig+0x2e6>
 800722c:	2308      	movs	r3, #8
 800722e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007232:	e046      	b.n	80072c2 <UART_SetConfig+0x2e6>
 8007234:	2310      	movs	r3, #16
 8007236:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800723a:	e042      	b.n	80072c2 <UART_SetConfig+0x2e6>
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a17      	ldr	r2, [pc, #92]	@ (80072a0 <UART_SetConfig+0x2c4>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d13a      	bne.n	80072bc <UART_SetConfig+0x2e0>
 8007246:	4b18      	ldr	r3, [pc, #96]	@ (80072a8 <UART_SetConfig+0x2cc>)
 8007248:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800724c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007250:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007254:	d01a      	beq.n	800728c <UART_SetConfig+0x2b0>
 8007256:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800725a:	d81b      	bhi.n	8007294 <UART_SetConfig+0x2b8>
 800725c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007260:	d00c      	beq.n	800727c <UART_SetConfig+0x2a0>
 8007262:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007266:	d815      	bhi.n	8007294 <UART_SetConfig+0x2b8>
 8007268:	2b00      	cmp	r3, #0
 800726a:	d003      	beq.n	8007274 <UART_SetConfig+0x298>
 800726c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007270:	d008      	beq.n	8007284 <UART_SetConfig+0x2a8>
 8007272:	e00f      	b.n	8007294 <UART_SetConfig+0x2b8>
 8007274:	2300      	movs	r3, #0
 8007276:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800727a:	e022      	b.n	80072c2 <UART_SetConfig+0x2e6>
 800727c:	2302      	movs	r3, #2
 800727e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007282:	e01e      	b.n	80072c2 <UART_SetConfig+0x2e6>
 8007284:	2304      	movs	r3, #4
 8007286:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800728a:	e01a      	b.n	80072c2 <UART_SetConfig+0x2e6>
 800728c:	2308      	movs	r3, #8
 800728e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007292:	e016      	b.n	80072c2 <UART_SetConfig+0x2e6>
 8007294:	2310      	movs	r3, #16
 8007296:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800729a:	e012      	b.n	80072c2 <UART_SetConfig+0x2e6>
 800729c:	efff69f3 	.word	0xefff69f3
 80072a0:	40008000 	.word	0x40008000
 80072a4:	40013800 	.word	0x40013800
 80072a8:	40021000 	.word	0x40021000
 80072ac:	40004400 	.word	0x40004400
 80072b0:	40004800 	.word	0x40004800
 80072b4:	40004c00 	.word	0x40004c00
 80072b8:	40005000 	.word	0x40005000
 80072bc:	2310      	movs	r3, #16
 80072be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a9f      	ldr	r2, [pc, #636]	@ (8007544 <UART_SetConfig+0x568>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d17a      	bne.n	80073c2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80072cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80072d0:	2b08      	cmp	r3, #8
 80072d2:	d824      	bhi.n	800731e <UART_SetConfig+0x342>
 80072d4:	a201      	add	r2, pc, #4	@ (adr r2, 80072dc <UART_SetConfig+0x300>)
 80072d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072da:	bf00      	nop
 80072dc:	08007301 	.word	0x08007301
 80072e0:	0800731f 	.word	0x0800731f
 80072e4:	08007309 	.word	0x08007309
 80072e8:	0800731f 	.word	0x0800731f
 80072ec:	0800730f 	.word	0x0800730f
 80072f0:	0800731f 	.word	0x0800731f
 80072f4:	0800731f 	.word	0x0800731f
 80072f8:	0800731f 	.word	0x0800731f
 80072fc:	08007317 	.word	0x08007317
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007300:	f7fe faaa 	bl	8005858 <HAL_RCC_GetPCLK1Freq>
 8007304:	61f8      	str	r0, [r7, #28]
        break;
 8007306:	e010      	b.n	800732a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007308:	4b8f      	ldr	r3, [pc, #572]	@ (8007548 <UART_SetConfig+0x56c>)
 800730a:	61fb      	str	r3, [r7, #28]
        break;
 800730c:	e00d      	b.n	800732a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800730e:	f7fe fa0b 	bl	8005728 <HAL_RCC_GetSysClockFreq>
 8007312:	61f8      	str	r0, [r7, #28]
        break;
 8007314:	e009      	b.n	800732a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007316:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800731a:	61fb      	str	r3, [r7, #28]
        break;
 800731c:	e005      	b.n	800732a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800731e:	2300      	movs	r3, #0
 8007320:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007328:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	2b00      	cmp	r3, #0
 800732e:	f000 80fb 	beq.w	8007528 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	685a      	ldr	r2, [r3, #4]
 8007336:	4613      	mov	r3, r2
 8007338:	005b      	lsls	r3, r3, #1
 800733a:	4413      	add	r3, r2
 800733c:	69fa      	ldr	r2, [r7, #28]
 800733e:	429a      	cmp	r2, r3
 8007340:	d305      	bcc.n	800734e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007348:	69fa      	ldr	r2, [r7, #28]
 800734a:	429a      	cmp	r2, r3
 800734c:	d903      	bls.n	8007356 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007354:	e0e8      	b.n	8007528 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	2200      	movs	r2, #0
 800735a:	461c      	mov	r4, r3
 800735c:	4615      	mov	r5, r2
 800735e:	f04f 0200 	mov.w	r2, #0
 8007362:	f04f 0300 	mov.w	r3, #0
 8007366:	022b      	lsls	r3, r5, #8
 8007368:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800736c:	0222      	lsls	r2, r4, #8
 800736e:	68f9      	ldr	r1, [r7, #12]
 8007370:	6849      	ldr	r1, [r1, #4]
 8007372:	0849      	lsrs	r1, r1, #1
 8007374:	2000      	movs	r0, #0
 8007376:	4688      	mov	r8, r1
 8007378:	4681      	mov	r9, r0
 800737a:	eb12 0a08 	adds.w	sl, r2, r8
 800737e:	eb43 0b09 	adc.w	fp, r3, r9
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	603b      	str	r3, [r7, #0]
 800738a:	607a      	str	r2, [r7, #4]
 800738c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007390:	4650      	mov	r0, sl
 8007392:	4659      	mov	r1, fp
 8007394:	f7f8 ff2c 	bl	80001f0 <__aeabi_uldivmod>
 8007398:	4602      	mov	r2, r0
 800739a:	460b      	mov	r3, r1
 800739c:	4613      	mov	r3, r2
 800739e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80073a6:	d308      	bcc.n	80073ba <UART_SetConfig+0x3de>
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073ae:	d204      	bcs.n	80073ba <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	69ba      	ldr	r2, [r7, #24]
 80073b6:	60da      	str	r2, [r3, #12]
 80073b8:	e0b6      	b.n	8007528 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80073c0:	e0b2      	b.n	8007528 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	69db      	ldr	r3, [r3, #28]
 80073c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073ca:	d15e      	bne.n	800748a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80073cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80073d0:	2b08      	cmp	r3, #8
 80073d2:	d828      	bhi.n	8007426 <UART_SetConfig+0x44a>
 80073d4:	a201      	add	r2, pc, #4	@ (adr r2, 80073dc <UART_SetConfig+0x400>)
 80073d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073da:	bf00      	nop
 80073dc:	08007401 	.word	0x08007401
 80073e0:	08007409 	.word	0x08007409
 80073e4:	08007411 	.word	0x08007411
 80073e8:	08007427 	.word	0x08007427
 80073ec:	08007417 	.word	0x08007417
 80073f0:	08007427 	.word	0x08007427
 80073f4:	08007427 	.word	0x08007427
 80073f8:	08007427 	.word	0x08007427
 80073fc:	0800741f 	.word	0x0800741f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007400:	f7fe fa2a 	bl	8005858 <HAL_RCC_GetPCLK1Freq>
 8007404:	61f8      	str	r0, [r7, #28]
        break;
 8007406:	e014      	b.n	8007432 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007408:	f7fe fa3c 	bl	8005884 <HAL_RCC_GetPCLK2Freq>
 800740c:	61f8      	str	r0, [r7, #28]
        break;
 800740e:	e010      	b.n	8007432 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007410:	4b4d      	ldr	r3, [pc, #308]	@ (8007548 <UART_SetConfig+0x56c>)
 8007412:	61fb      	str	r3, [r7, #28]
        break;
 8007414:	e00d      	b.n	8007432 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007416:	f7fe f987 	bl	8005728 <HAL_RCC_GetSysClockFreq>
 800741a:	61f8      	str	r0, [r7, #28]
        break;
 800741c:	e009      	b.n	8007432 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800741e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007422:	61fb      	str	r3, [r7, #28]
        break;
 8007424:	e005      	b.n	8007432 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007426:	2300      	movs	r3, #0
 8007428:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007430:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007432:	69fb      	ldr	r3, [r7, #28]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d077      	beq.n	8007528 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	005a      	lsls	r2, r3, #1
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	085b      	lsrs	r3, r3, #1
 8007442:	441a      	add	r2, r3
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	fbb2 f3f3 	udiv	r3, r2, r3
 800744c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800744e:	69bb      	ldr	r3, [r7, #24]
 8007450:	2b0f      	cmp	r3, #15
 8007452:	d916      	bls.n	8007482 <UART_SetConfig+0x4a6>
 8007454:	69bb      	ldr	r3, [r7, #24]
 8007456:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800745a:	d212      	bcs.n	8007482 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800745c:	69bb      	ldr	r3, [r7, #24]
 800745e:	b29b      	uxth	r3, r3
 8007460:	f023 030f 	bic.w	r3, r3, #15
 8007464:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	085b      	lsrs	r3, r3, #1
 800746a:	b29b      	uxth	r3, r3
 800746c:	f003 0307 	and.w	r3, r3, #7
 8007470:	b29a      	uxth	r2, r3
 8007472:	8afb      	ldrh	r3, [r7, #22]
 8007474:	4313      	orrs	r3, r2
 8007476:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	8afa      	ldrh	r2, [r7, #22]
 800747e:	60da      	str	r2, [r3, #12]
 8007480:	e052      	b.n	8007528 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007482:	2301      	movs	r3, #1
 8007484:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007488:	e04e      	b.n	8007528 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800748a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800748e:	2b08      	cmp	r3, #8
 8007490:	d827      	bhi.n	80074e2 <UART_SetConfig+0x506>
 8007492:	a201      	add	r2, pc, #4	@ (adr r2, 8007498 <UART_SetConfig+0x4bc>)
 8007494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007498:	080074bd 	.word	0x080074bd
 800749c:	080074c5 	.word	0x080074c5
 80074a0:	080074cd 	.word	0x080074cd
 80074a4:	080074e3 	.word	0x080074e3
 80074a8:	080074d3 	.word	0x080074d3
 80074ac:	080074e3 	.word	0x080074e3
 80074b0:	080074e3 	.word	0x080074e3
 80074b4:	080074e3 	.word	0x080074e3
 80074b8:	080074db 	.word	0x080074db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074bc:	f7fe f9cc 	bl	8005858 <HAL_RCC_GetPCLK1Freq>
 80074c0:	61f8      	str	r0, [r7, #28]
        break;
 80074c2:	e014      	b.n	80074ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074c4:	f7fe f9de 	bl	8005884 <HAL_RCC_GetPCLK2Freq>
 80074c8:	61f8      	str	r0, [r7, #28]
        break;
 80074ca:	e010      	b.n	80074ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074cc:	4b1e      	ldr	r3, [pc, #120]	@ (8007548 <UART_SetConfig+0x56c>)
 80074ce:	61fb      	str	r3, [r7, #28]
        break;
 80074d0:	e00d      	b.n	80074ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074d2:	f7fe f929 	bl	8005728 <HAL_RCC_GetSysClockFreq>
 80074d6:	61f8      	str	r0, [r7, #28]
        break;
 80074d8:	e009      	b.n	80074ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074de:	61fb      	str	r3, [r7, #28]
        break;
 80074e0:	e005      	b.n	80074ee <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80074e2:	2300      	movs	r3, #0
 80074e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80074ec:	bf00      	nop
    }

    if (pclk != 0U)
 80074ee:	69fb      	ldr	r3, [r7, #28]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d019      	beq.n	8007528 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	085a      	lsrs	r2, r3, #1
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	441a      	add	r2, r3
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	fbb2 f3f3 	udiv	r3, r2, r3
 8007506:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	2b0f      	cmp	r3, #15
 800750c:	d909      	bls.n	8007522 <UART_SetConfig+0x546>
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007514:	d205      	bcs.n	8007522 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	b29a      	uxth	r2, r3
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	60da      	str	r2, [r3, #12]
 8007520:	e002      	b.n	8007528 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2200      	movs	r2, #0
 800752c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2200      	movs	r2, #0
 8007532:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007534:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007538:	4618      	mov	r0, r3
 800753a:	3728      	adds	r7, #40	@ 0x28
 800753c:	46bd      	mov	sp, r7
 800753e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007542:	bf00      	nop
 8007544:	40008000 	.word	0x40008000
 8007548:	00f42400 	.word	0x00f42400

0800754c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007558:	f003 0308 	and.w	r3, r3, #8
 800755c:	2b00      	cmp	r3, #0
 800755e:	d00a      	beq.n	8007576 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	430a      	orrs	r2, r1
 8007574:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800757a:	f003 0301 	and.w	r3, r3, #1
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00a      	beq.n	8007598 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	430a      	orrs	r2, r1
 8007596:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800759c:	f003 0302 	and.w	r3, r3, #2
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d00a      	beq.n	80075ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	430a      	orrs	r2, r1
 80075b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075be:	f003 0304 	and.w	r3, r3, #4
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00a      	beq.n	80075dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	430a      	orrs	r2, r1
 80075da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075e0:	f003 0310 	and.w	r3, r3, #16
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d00a      	beq.n	80075fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	430a      	orrs	r2, r1
 80075fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007602:	f003 0320 	and.w	r3, r3, #32
 8007606:	2b00      	cmp	r3, #0
 8007608:	d00a      	beq.n	8007620 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	430a      	orrs	r2, r1
 800761e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007628:	2b00      	cmp	r3, #0
 800762a:	d01a      	beq.n	8007662 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	430a      	orrs	r2, r1
 8007640:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007646:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800764a:	d10a      	bne.n	8007662 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	430a      	orrs	r2, r1
 8007660:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00a      	beq.n	8007684 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	430a      	orrs	r2, r1
 8007682:	605a      	str	r2, [r3, #4]
  }
}
 8007684:	bf00      	nop
 8007686:	370c      	adds	r7, #12
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr

08007690 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b098      	sub	sp, #96	@ 0x60
 8007694:	af02      	add	r7, sp, #8
 8007696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80076a0:	f7fa f948 	bl	8001934 <HAL_GetTick>
 80076a4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 0308 	and.w	r3, r3, #8
 80076b0:	2b08      	cmp	r3, #8
 80076b2:	d12e      	bne.n	8007712 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80076b8:	9300      	str	r3, [sp, #0]
 80076ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076bc:	2200      	movs	r2, #0
 80076be:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 f88c 	bl	80077e0 <UART_WaitOnFlagUntilTimeout>
 80076c8:	4603      	mov	r3, r0
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d021      	beq.n	8007712 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076d6:	e853 3f00 	ldrex	r3, [r3]
 80076da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80076dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	461a      	mov	r2, r3
 80076ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80076ee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80076f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80076f4:	e841 2300 	strex	r3, r2, [r1]
 80076f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80076fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d1e6      	bne.n	80076ce <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2220      	movs	r2, #32
 8007704:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800770e:	2303      	movs	r3, #3
 8007710:	e062      	b.n	80077d8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 0304 	and.w	r3, r3, #4
 800771c:	2b04      	cmp	r3, #4
 800771e:	d149      	bne.n	80077b4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007720:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007724:	9300      	str	r3, [sp, #0]
 8007726:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007728:	2200      	movs	r2, #0
 800772a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 f856 	bl	80077e0 <UART_WaitOnFlagUntilTimeout>
 8007734:	4603      	mov	r3, r0
 8007736:	2b00      	cmp	r3, #0
 8007738:	d03c      	beq.n	80077b4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007742:	e853 3f00 	ldrex	r3, [r3]
 8007746:	623b      	str	r3, [r7, #32]
   return(result);
 8007748:	6a3b      	ldr	r3, [r7, #32]
 800774a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800774e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	461a      	mov	r2, r3
 8007756:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007758:	633b      	str	r3, [r7, #48]	@ 0x30
 800775a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800775e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007760:	e841 2300 	strex	r3, r2, [r1]
 8007764:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007768:	2b00      	cmp	r3, #0
 800776a:	d1e6      	bne.n	800773a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	3308      	adds	r3, #8
 8007772:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	e853 3f00 	ldrex	r3, [r3]
 800777a:	60fb      	str	r3, [r7, #12]
   return(result);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f023 0301 	bic.w	r3, r3, #1
 8007782:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	3308      	adds	r3, #8
 800778a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800778c:	61fa      	str	r2, [r7, #28]
 800778e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007790:	69b9      	ldr	r1, [r7, #24]
 8007792:	69fa      	ldr	r2, [r7, #28]
 8007794:	e841 2300 	strex	r3, r2, [r1]
 8007798:	617b      	str	r3, [r7, #20]
   return(result);
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d1e5      	bne.n	800776c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2220      	movs	r2, #32
 80077a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077b0:	2303      	movs	r3, #3
 80077b2:	e011      	b.n	80077d8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2220      	movs	r2, #32
 80077b8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2220      	movs	r2, #32
 80077be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80077d6:	2300      	movs	r3, #0
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3758      	adds	r7, #88	@ 0x58
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	603b      	str	r3, [r7, #0]
 80077ec:	4613      	mov	r3, r2
 80077ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077f0:	e04f      	b.n	8007892 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80077f8:	d04b      	beq.n	8007892 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077fa:	f7fa f89b 	bl	8001934 <HAL_GetTick>
 80077fe:	4602      	mov	r2, r0
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	1ad3      	subs	r3, r2, r3
 8007804:	69ba      	ldr	r2, [r7, #24]
 8007806:	429a      	cmp	r2, r3
 8007808:	d302      	bcc.n	8007810 <UART_WaitOnFlagUntilTimeout+0x30>
 800780a:	69bb      	ldr	r3, [r7, #24]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d101      	bne.n	8007814 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007810:	2303      	movs	r3, #3
 8007812:	e04e      	b.n	80078b2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f003 0304 	and.w	r3, r3, #4
 800781e:	2b00      	cmp	r3, #0
 8007820:	d037      	beq.n	8007892 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	2b80      	cmp	r3, #128	@ 0x80
 8007826:	d034      	beq.n	8007892 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	2b40      	cmp	r3, #64	@ 0x40
 800782c:	d031      	beq.n	8007892 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	69db      	ldr	r3, [r3, #28]
 8007834:	f003 0308 	and.w	r3, r3, #8
 8007838:	2b08      	cmp	r3, #8
 800783a:	d110      	bne.n	800785e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	2208      	movs	r2, #8
 8007842:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007844:	68f8      	ldr	r0, [r7, #12]
 8007846:	f000 f838 	bl	80078ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2208      	movs	r2, #8
 800784e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2200      	movs	r2, #0
 8007856:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	e029      	b.n	80078b2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	69db      	ldr	r3, [r3, #28]
 8007864:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007868:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800786c:	d111      	bne.n	8007892 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007876:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007878:	68f8      	ldr	r0, [r7, #12]
 800787a:	f000 f81e 	bl	80078ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2220      	movs	r2, #32
 8007882:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2200      	movs	r2, #0
 800788a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800788e:	2303      	movs	r3, #3
 8007890:	e00f      	b.n	80078b2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	69da      	ldr	r2, [r3, #28]
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	4013      	ands	r3, r2
 800789c:	68ba      	ldr	r2, [r7, #8]
 800789e:	429a      	cmp	r2, r3
 80078a0:	bf0c      	ite	eq
 80078a2:	2301      	moveq	r3, #1
 80078a4:	2300      	movne	r3, #0
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	461a      	mov	r2, r3
 80078aa:	79fb      	ldrb	r3, [r7, #7]
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d0a0      	beq.n	80077f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078b0:	2300      	movs	r3, #0
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3710      	adds	r7, #16
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}

080078ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078ba:	b480      	push	{r7}
 80078bc:	b095      	sub	sp, #84	@ 0x54
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078ca:	e853 3f00 	ldrex	r3, [r3]
 80078ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80078d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80078d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	461a      	mov	r2, r3
 80078de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80078e2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80078e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80078e8:	e841 2300 	strex	r3, r2, [r1]
 80078ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80078ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d1e6      	bne.n	80078c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	3308      	adds	r3, #8
 80078fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078fc:	6a3b      	ldr	r3, [r7, #32]
 80078fe:	e853 3f00 	ldrex	r3, [r3]
 8007902:	61fb      	str	r3, [r7, #28]
   return(result);
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	f023 0301 	bic.w	r3, r3, #1
 800790a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	3308      	adds	r3, #8
 8007912:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007914:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007916:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007918:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800791a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800791c:	e841 2300 	strex	r3, r2, [r1]
 8007920:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007924:	2b00      	cmp	r3, #0
 8007926:	d1e5      	bne.n	80078f4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800792c:	2b01      	cmp	r3, #1
 800792e:	d118      	bne.n	8007962 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	e853 3f00 	ldrex	r3, [r3]
 800793c:	60bb      	str	r3, [r7, #8]
   return(result);
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	f023 0310 	bic.w	r3, r3, #16
 8007944:	647b      	str	r3, [r7, #68]	@ 0x44
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	461a      	mov	r2, r3
 800794c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800794e:	61bb      	str	r3, [r7, #24]
 8007950:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007952:	6979      	ldr	r1, [r7, #20]
 8007954:	69ba      	ldr	r2, [r7, #24]
 8007956:	e841 2300 	strex	r3, r2, [r1]
 800795a:	613b      	str	r3, [r7, #16]
   return(result);
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d1e6      	bne.n	8007930 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2220      	movs	r2, #32
 8007966:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007976:	bf00      	nop
 8007978:	3754      	adds	r7, #84	@ 0x54
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr

08007982 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007982:	b580      	push	{r7, lr}
 8007984:	b084      	sub	sp, #16
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800798e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2200      	movs	r2, #0
 8007994:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2200      	movs	r2, #0
 800799c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80079a0:	68f8      	ldr	r0, [r7, #12]
 80079a2:	f7ff fb05 	bl	8006fb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079a6:	bf00      	nop
 80079a8:	3710      	adds	r7, #16
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b088      	sub	sp, #32
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	e853 3f00 	ldrex	r3, [r3]
 80079c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079ca:	61fb      	str	r3, [r7, #28]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	461a      	mov	r2, r3
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	61bb      	str	r3, [r7, #24]
 80079d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d8:	6979      	ldr	r1, [r7, #20]
 80079da:	69ba      	ldr	r2, [r7, #24]
 80079dc:	e841 2300 	strex	r3, r2, [r1]
 80079e0:	613b      	str	r3, [r7, #16]
   return(result);
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d1e6      	bne.n	80079b6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2220      	movs	r2, #32
 80079ec:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f7ff fad1 	bl	8006f9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079fa:	bf00      	nop
 80079fc:	3720      	adds	r7, #32
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}

08007a02 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007a02:	b480      	push	{r7}
 8007a04:	b083      	sub	sp, #12
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007a0a:	bf00      	nop
 8007a0c:	370c      	adds	r7, #12
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr
	...

08007a18 <__NVIC_SetPriority>:
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	4603      	mov	r3, r0
 8007a20:	6039      	str	r1, [r7, #0]
 8007a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	db0a      	blt.n	8007a42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	b2da      	uxtb	r2, r3
 8007a30:	490c      	ldr	r1, [pc, #48]	@ (8007a64 <__NVIC_SetPriority+0x4c>)
 8007a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a36:	0112      	lsls	r2, r2, #4
 8007a38:	b2d2      	uxtb	r2, r2
 8007a3a:	440b      	add	r3, r1
 8007a3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007a40:	e00a      	b.n	8007a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	b2da      	uxtb	r2, r3
 8007a46:	4908      	ldr	r1, [pc, #32]	@ (8007a68 <__NVIC_SetPriority+0x50>)
 8007a48:	79fb      	ldrb	r3, [r7, #7]
 8007a4a:	f003 030f 	and.w	r3, r3, #15
 8007a4e:	3b04      	subs	r3, #4
 8007a50:	0112      	lsls	r2, r2, #4
 8007a52:	b2d2      	uxtb	r2, r2
 8007a54:	440b      	add	r3, r1
 8007a56:	761a      	strb	r2, [r3, #24]
}
 8007a58:	bf00      	nop
 8007a5a:	370c      	adds	r7, #12
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr
 8007a64:	e000e100 	.word	0xe000e100
 8007a68:	e000ed00 	.word	0xe000ed00

08007a6c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007a70:	4b05      	ldr	r3, [pc, #20]	@ (8007a88 <SysTick_Handler+0x1c>)
 8007a72:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007a74:	f001 fec6 	bl	8009804 <xTaskGetSchedulerState>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d001      	beq.n	8007a82 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007a7e:	f002 fcbb 	bl	800a3f8 <xPortSysTickHandler>
  }
}
 8007a82:	bf00      	nop
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	e000e010 	.word	0xe000e010

08007a8c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007a90:	2100      	movs	r1, #0
 8007a92:	f06f 0004 	mvn.w	r0, #4
 8007a96:	f7ff ffbf 	bl	8007a18 <__NVIC_SetPriority>
#endif
}
 8007a9a:	bf00      	nop
 8007a9c:	bd80      	pop	{r7, pc}
	...

08007aa0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007aa0:	b480      	push	{r7}
 8007aa2:	b083      	sub	sp, #12
 8007aa4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007aa6:	f3ef 8305 	mrs	r3, IPSR
 8007aaa:	603b      	str	r3, [r7, #0]
  return(result);
 8007aac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d003      	beq.n	8007aba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007ab2:	f06f 0305 	mvn.w	r3, #5
 8007ab6:	607b      	str	r3, [r7, #4]
 8007ab8:	e00c      	b.n	8007ad4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007aba:	4b0a      	ldr	r3, [pc, #40]	@ (8007ae4 <osKernelInitialize+0x44>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d105      	bne.n	8007ace <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007ac2:	4b08      	ldr	r3, [pc, #32]	@ (8007ae4 <osKernelInitialize+0x44>)
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	607b      	str	r3, [r7, #4]
 8007acc:	e002      	b.n	8007ad4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007ace:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007ad2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007ad4:	687b      	ldr	r3, [r7, #4]
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	370c      	adds	r7, #12
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr
 8007ae2:	bf00      	nop
 8007ae4:	200002f4 	.word	0x200002f4

08007ae8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007aee:	f3ef 8305 	mrs	r3, IPSR
 8007af2:	603b      	str	r3, [r7, #0]
  return(result);
 8007af4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d003      	beq.n	8007b02 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007afa:	f06f 0305 	mvn.w	r3, #5
 8007afe:	607b      	str	r3, [r7, #4]
 8007b00:	e010      	b.n	8007b24 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007b02:	4b0b      	ldr	r3, [pc, #44]	@ (8007b30 <osKernelStart+0x48>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d109      	bne.n	8007b1e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007b0a:	f7ff ffbf 	bl	8007a8c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007b0e:	4b08      	ldr	r3, [pc, #32]	@ (8007b30 <osKernelStart+0x48>)
 8007b10:	2202      	movs	r2, #2
 8007b12:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007b14:	f001 fa12 	bl	8008f3c <vTaskStartScheduler>
      stat = osOK;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	607b      	str	r3, [r7, #4]
 8007b1c:	e002      	b.n	8007b24 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007b1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007b22:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007b24:	687b      	ldr	r3, [r7, #4]
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3708      	adds	r7, #8
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	200002f4 	.word	0x200002f4

08007b34 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b08e      	sub	sp, #56	@ 0x38
 8007b38:	af04      	add	r7, sp, #16
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007b40:	2300      	movs	r3, #0
 8007b42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b44:	f3ef 8305 	mrs	r3, IPSR
 8007b48:	617b      	str	r3, [r7, #20]
  return(result);
 8007b4a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d17e      	bne.n	8007c4e <osThreadNew+0x11a>
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d07b      	beq.n	8007c4e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007b56:	2380      	movs	r3, #128	@ 0x80
 8007b58:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007b5a:	2318      	movs	r3, #24
 8007b5c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007b62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007b66:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d045      	beq.n	8007bfa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d002      	beq.n	8007b7c <osThreadNew+0x48>
        name = attr->name;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	699b      	ldr	r3, [r3, #24]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d002      	beq.n	8007b8a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	699b      	ldr	r3, [r3, #24]
 8007b88:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007b8a:	69fb      	ldr	r3, [r7, #28]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d008      	beq.n	8007ba2 <osThreadNew+0x6e>
 8007b90:	69fb      	ldr	r3, [r7, #28]
 8007b92:	2b38      	cmp	r3, #56	@ 0x38
 8007b94:	d805      	bhi.n	8007ba2 <osThreadNew+0x6e>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	f003 0301 	and.w	r3, r3, #1
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d001      	beq.n	8007ba6 <osThreadNew+0x72>
        return (NULL);
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	e054      	b.n	8007c50 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	695b      	ldr	r3, [r3, #20]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d003      	beq.n	8007bb6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	695b      	ldr	r3, [r3, #20]
 8007bb2:	089b      	lsrs	r3, r3, #2
 8007bb4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d00e      	beq.n	8007bdc <osThreadNew+0xa8>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	2ba7      	cmp	r3, #167	@ 0xa7
 8007bc4:	d90a      	bls.n	8007bdc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d006      	beq.n	8007bdc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	695b      	ldr	r3, [r3, #20]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d002      	beq.n	8007bdc <osThreadNew+0xa8>
        mem = 1;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	61bb      	str	r3, [r7, #24]
 8007bda:	e010      	b.n	8007bfe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d10c      	bne.n	8007bfe <osThreadNew+0xca>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d108      	bne.n	8007bfe <osThreadNew+0xca>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	691b      	ldr	r3, [r3, #16]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d104      	bne.n	8007bfe <osThreadNew+0xca>
          mem = 0;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	61bb      	str	r3, [r7, #24]
 8007bf8:	e001      	b.n	8007bfe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d110      	bne.n	8007c26 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007c0c:	9202      	str	r2, [sp, #8]
 8007c0e:	9301      	str	r3, [sp, #4]
 8007c10:	69fb      	ldr	r3, [r7, #28]
 8007c12:	9300      	str	r3, [sp, #0]
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	6a3a      	ldr	r2, [r7, #32]
 8007c18:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007c1a:	68f8      	ldr	r0, [r7, #12]
 8007c1c:	f000 ff9a 	bl	8008b54 <xTaskCreateStatic>
 8007c20:	4603      	mov	r3, r0
 8007c22:	613b      	str	r3, [r7, #16]
 8007c24:	e013      	b.n	8007c4e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007c26:	69bb      	ldr	r3, [r7, #24]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d110      	bne.n	8007c4e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007c2c:	6a3b      	ldr	r3, [r7, #32]
 8007c2e:	b29a      	uxth	r2, r3
 8007c30:	f107 0310 	add.w	r3, r7, #16
 8007c34:	9301      	str	r3, [sp, #4]
 8007c36:	69fb      	ldr	r3, [r7, #28]
 8007c38:	9300      	str	r3, [sp, #0]
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	f000 ffe8 	bl	8008c14 <xTaskCreate>
 8007c44:	4603      	mov	r3, r0
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d001      	beq.n	8007c4e <osThreadNew+0x11a>
            hTask = NULL;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007c4e:	693b      	ldr	r3, [r7, #16]
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3728      	adds	r7, #40	@ 0x28
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c60:	f3ef 8305 	mrs	r3, IPSR
 8007c64:	60bb      	str	r3, [r7, #8]
  return(result);
 8007c66:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d003      	beq.n	8007c74 <osDelay+0x1c>
    stat = osErrorISR;
 8007c6c:	f06f 0305 	mvn.w	r3, #5
 8007c70:	60fb      	str	r3, [r7, #12]
 8007c72:	e007      	b.n	8007c84 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007c74:	2300      	movs	r3, #0
 8007c76:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d002      	beq.n	8007c84 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f001 f926 	bl	8008ed0 <vTaskDelay>
    }
  }

  return (stat);
 8007c84:	68fb      	ldr	r3, [r7, #12]
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3710      	adds	r7, #16
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b08a      	sub	sp, #40	@ 0x28
 8007c92:	af02      	add	r7, sp, #8
 8007c94:	60f8      	str	r0, [r7, #12]
 8007c96:	60b9      	str	r1, [r7, #8]
 8007c98:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c9e:	f3ef 8305 	mrs	r3, IPSR
 8007ca2:	613b      	str	r3, [r7, #16]
  return(result);
 8007ca4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d175      	bne.n	8007d96 <osSemaphoreNew+0x108>
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d072      	beq.n	8007d96 <osSemaphoreNew+0x108>
 8007cb0:	68ba      	ldr	r2, [r7, #8]
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d86e      	bhi.n	8007d96 <osSemaphoreNew+0x108>
    mem = -1;
 8007cb8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007cbc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d015      	beq.n	8007cf0 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d006      	beq.n	8007cda <osSemaphoreNew+0x4c>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	2b4f      	cmp	r3, #79	@ 0x4f
 8007cd2:	d902      	bls.n	8007cda <osSemaphoreNew+0x4c>
        mem = 1;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	61bb      	str	r3, [r7, #24]
 8007cd8:	e00c      	b.n	8007cf4 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d108      	bne.n	8007cf4 <osSemaphoreNew+0x66>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d104      	bne.n	8007cf4 <osSemaphoreNew+0x66>
          mem = 0;
 8007cea:	2300      	movs	r3, #0
 8007cec:	61bb      	str	r3, [r7, #24]
 8007cee:	e001      	b.n	8007cf4 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8007cf4:	69bb      	ldr	r3, [r7, #24]
 8007cf6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007cfa:	d04c      	beq.n	8007d96 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d128      	bne.n	8007d54 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8007d02:	69bb      	ldr	r3, [r7, #24]
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d10a      	bne.n	8007d1e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	2203      	movs	r2, #3
 8007d0e:	9200      	str	r2, [sp, #0]
 8007d10:	2200      	movs	r2, #0
 8007d12:	2100      	movs	r1, #0
 8007d14:	2001      	movs	r0, #1
 8007d16:	f000 f995 	bl	8008044 <xQueueGenericCreateStatic>
 8007d1a:	61f8      	str	r0, [r7, #28]
 8007d1c:	e005      	b.n	8007d2a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8007d1e:	2203      	movs	r2, #3
 8007d20:	2100      	movs	r1, #0
 8007d22:	2001      	movs	r0, #1
 8007d24:	f000 fa0b 	bl	800813e <xQueueGenericCreate>
 8007d28:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007d2a:	69fb      	ldr	r3, [r7, #28]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d022      	beq.n	8007d76 <osSemaphoreNew+0xe8>
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d01f      	beq.n	8007d76 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007d36:	2300      	movs	r3, #0
 8007d38:	2200      	movs	r2, #0
 8007d3a:	2100      	movs	r1, #0
 8007d3c:	69f8      	ldr	r0, [r7, #28]
 8007d3e:	f000 facb 	bl	80082d8 <xQueueGenericSend>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d016      	beq.n	8007d76 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8007d48:	69f8      	ldr	r0, [r7, #28]
 8007d4a:	f000 fd47 	bl	80087dc <vQueueDelete>
            hSemaphore = NULL;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	61fb      	str	r3, [r7, #28]
 8007d52:	e010      	b.n	8007d76 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8007d54:	69bb      	ldr	r3, [r7, #24]
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d108      	bne.n	8007d6c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	461a      	mov	r2, r3
 8007d60:	68b9      	ldr	r1, [r7, #8]
 8007d62:	68f8      	ldr	r0, [r7, #12]
 8007d64:	f000 fa49 	bl	80081fa <xQueueCreateCountingSemaphoreStatic>
 8007d68:	61f8      	str	r0, [r7, #28]
 8007d6a:	e004      	b.n	8007d76 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007d6c:	68b9      	ldr	r1, [r7, #8]
 8007d6e:	68f8      	ldr	r0, [r7, #12]
 8007d70:	f000 fa7c 	bl	800826c <xQueueCreateCountingSemaphore>
 8007d74:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d00c      	beq.n	8007d96 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d003      	beq.n	8007d8a <osSemaphoreNew+0xfc>
          name = attr->name;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	617b      	str	r3, [r7, #20]
 8007d88:	e001      	b.n	8007d8e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007d8e:	6979      	ldr	r1, [r7, #20]
 8007d90:	69f8      	ldr	r0, [r7, #28]
 8007d92:	f000 fe57 	bl	8008a44 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007d96:	69fb      	ldr	r3, [r7, #28]
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3720      	adds	r7, #32
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007da0:	b480      	push	{r7}
 8007da2:	b085      	sub	sp, #20
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	60f8      	str	r0, [r7, #12]
 8007da8:	60b9      	str	r1, [r7, #8]
 8007daa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	4a07      	ldr	r2, [pc, #28]	@ (8007dcc <vApplicationGetIdleTaskMemory+0x2c>)
 8007db0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	4a06      	ldr	r2, [pc, #24]	@ (8007dd0 <vApplicationGetIdleTaskMemory+0x30>)
 8007db6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2280      	movs	r2, #128	@ 0x80
 8007dbc:	601a      	str	r2, [r3, #0]
}
 8007dbe:	bf00      	nop
 8007dc0:	3714      	adds	r7, #20
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr
 8007dca:	bf00      	nop
 8007dcc:	200002f8 	.word	0x200002f8
 8007dd0:	200003a0 	.word	0x200003a0

08007dd4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007dd4:	b480      	push	{r7}
 8007dd6:	b085      	sub	sp, #20
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	60b9      	str	r1, [r7, #8]
 8007dde:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	4a07      	ldr	r2, [pc, #28]	@ (8007e00 <vApplicationGetTimerTaskMemory+0x2c>)
 8007de4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	4a06      	ldr	r2, [pc, #24]	@ (8007e04 <vApplicationGetTimerTaskMemory+0x30>)
 8007dea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007df2:	601a      	str	r2, [r3, #0]
}
 8007df4:	bf00      	nop
 8007df6:	3714      	adds	r7, #20
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr
 8007e00:	200005a0 	.word	0x200005a0
 8007e04:	20000648 	.word	0x20000648

08007e08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b083      	sub	sp, #12
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f103 0208 	add.w	r2, r3, #8
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007e20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f103 0208 	add.w	r2, r3, #8
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f103 0208 	add.w	r2, r3, #8
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007e3c:	bf00      	nop
 8007e3e:	370c      	adds	r7, #12
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr

08007e48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007e56:	bf00      	nop
 8007e58:	370c      	adds	r7, #12
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr

08007e62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e62:	b480      	push	{r7}
 8007e64:	b085      	sub	sp, #20
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
 8007e6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	689a      	ldr	r2, [r3, #8]
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	683a      	ldr	r2, [r7, #0]
 8007e86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	683a      	ldr	r2, [r7, #0]
 8007e8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	1c5a      	adds	r2, r3, #1
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	601a      	str	r2, [r3, #0]
}
 8007e9e:	bf00      	nop
 8007ea0:	3714      	adds	r7, #20
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr

08007eaa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007eaa:	b480      	push	{r7}
 8007eac:	b085      	sub	sp, #20
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
 8007eb2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ec0:	d103      	bne.n	8007eca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	691b      	ldr	r3, [r3, #16]
 8007ec6:	60fb      	str	r3, [r7, #12]
 8007ec8:	e00c      	b.n	8007ee4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	3308      	adds	r3, #8
 8007ece:	60fb      	str	r3, [r7, #12]
 8007ed0:	e002      	b.n	8007ed8 <vListInsert+0x2e>
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	60fb      	str	r3, [r7, #12]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	68ba      	ldr	r2, [r7, #8]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d2f6      	bcs.n	8007ed2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	685a      	ldr	r2, [r3, #4]
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	683a      	ldr	r2, [r7, #0]
 8007ef2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	68fa      	ldr	r2, [r7, #12]
 8007ef8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	683a      	ldr	r2, [r7, #0]
 8007efe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	1c5a      	adds	r2, r3, #1
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	601a      	str	r2, [r3, #0]
}
 8007f10:	bf00      	nop
 8007f12:	3714      	adds	r7, #20
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b085      	sub	sp, #20
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	691b      	ldr	r3, [r3, #16]
 8007f28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	6892      	ldr	r2, [r2, #8]
 8007f32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	6852      	ldr	r2, [r2, #4]
 8007f3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d103      	bne.n	8007f50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	689a      	ldr	r2, [r3, #8]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	1e5a      	subs	r2, r3, #1
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3714      	adds	r7, #20
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr

08007f70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d10b      	bne.n	8007f9c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f88:	f383 8811 	msr	BASEPRI, r3
 8007f8c:	f3bf 8f6f 	isb	sy
 8007f90:	f3bf 8f4f 	dsb	sy
 8007f94:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007f96:	bf00      	nop
 8007f98:	bf00      	nop
 8007f9a:	e7fd      	b.n	8007f98 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007f9c:	f002 f99c 	bl	800a2d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fa8:	68f9      	ldr	r1, [r7, #12]
 8007faa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007fac:	fb01 f303 	mul.w	r3, r1, r3
 8007fb0:	441a      	add	r2, r3
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fcc:	3b01      	subs	r3, #1
 8007fce:	68f9      	ldr	r1, [r7, #12]
 8007fd0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007fd2:	fb01 f303 	mul.w	r3, r1, r3
 8007fd6:	441a      	add	r2, r3
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	22ff      	movs	r2, #255	@ 0xff
 8007fe0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	22ff      	movs	r2, #255	@ 0xff
 8007fe8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d114      	bne.n	800801c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	691b      	ldr	r3, [r3, #16]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d01a      	beq.n	8008030 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	3310      	adds	r3, #16
 8007ffe:	4618      	mov	r0, r3
 8008000:	f001 fa3a 	bl	8009478 <xTaskRemoveFromEventList>
 8008004:	4603      	mov	r3, r0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d012      	beq.n	8008030 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800800a:	4b0d      	ldr	r3, [pc, #52]	@ (8008040 <xQueueGenericReset+0xd0>)
 800800c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008010:	601a      	str	r2, [r3, #0]
 8008012:	f3bf 8f4f 	dsb	sy
 8008016:	f3bf 8f6f 	isb	sy
 800801a:	e009      	b.n	8008030 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	3310      	adds	r3, #16
 8008020:	4618      	mov	r0, r3
 8008022:	f7ff fef1 	bl	8007e08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	3324      	adds	r3, #36	@ 0x24
 800802a:	4618      	mov	r0, r3
 800802c:	f7ff feec 	bl	8007e08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008030:	f002 f984 	bl	800a33c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008034:	2301      	movs	r3, #1
}
 8008036:	4618      	mov	r0, r3
 8008038:	3710      	adds	r7, #16
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	e000ed04 	.word	0xe000ed04

08008044 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008044:	b580      	push	{r7, lr}
 8008046:	b08e      	sub	sp, #56	@ 0x38
 8008048:	af02      	add	r7, sp, #8
 800804a:	60f8      	str	r0, [r7, #12]
 800804c:	60b9      	str	r1, [r7, #8]
 800804e:	607a      	str	r2, [r7, #4]
 8008050:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d10b      	bne.n	8008070 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800805c:	f383 8811 	msr	BASEPRI, r3
 8008060:	f3bf 8f6f 	isb	sy
 8008064:	f3bf 8f4f 	dsb	sy
 8008068:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800806a:	bf00      	nop
 800806c:	bf00      	nop
 800806e:	e7fd      	b.n	800806c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d10b      	bne.n	800808e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800807a:	f383 8811 	msr	BASEPRI, r3
 800807e:	f3bf 8f6f 	isb	sy
 8008082:	f3bf 8f4f 	dsb	sy
 8008086:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008088:	bf00      	nop
 800808a:	bf00      	nop
 800808c:	e7fd      	b.n	800808a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d002      	beq.n	800809a <xQueueGenericCreateStatic+0x56>
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d001      	beq.n	800809e <xQueueGenericCreateStatic+0x5a>
 800809a:	2301      	movs	r3, #1
 800809c:	e000      	b.n	80080a0 <xQueueGenericCreateStatic+0x5c>
 800809e:	2300      	movs	r3, #0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d10b      	bne.n	80080bc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80080a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080a8:	f383 8811 	msr	BASEPRI, r3
 80080ac:	f3bf 8f6f 	isb	sy
 80080b0:	f3bf 8f4f 	dsb	sy
 80080b4:	623b      	str	r3, [r7, #32]
}
 80080b6:	bf00      	nop
 80080b8:	bf00      	nop
 80080ba:	e7fd      	b.n	80080b8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d102      	bne.n	80080c8 <xQueueGenericCreateStatic+0x84>
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d101      	bne.n	80080cc <xQueueGenericCreateStatic+0x88>
 80080c8:	2301      	movs	r3, #1
 80080ca:	e000      	b.n	80080ce <xQueueGenericCreateStatic+0x8a>
 80080cc:	2300      	movs	r3, #0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d10b      	bne.n	80080ea <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80080d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080d6:	f383 8811 	msr	BASEPRI, r3
 80080da:	f3bf 8f6f 	isb	sy
 80080de:	f3bf 8f4f 	dsb	sy
 80080e2:	61fb      	str	r3, [r7, #28]
}
 80080e4:	bf00      	nop
 80080e6:	bf00      	nop
 80080e8:	e7fd      	b.n	80080e6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80080ea:	2350      	movs	r3, #80	@ 0x50
 80080ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	2b50      	cmp	r3, #80	@ 0x50
 80080f2:	d00b      	beq.n	800810c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80080f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080f8:	f383 8811 	msr	BASEPRI, r3
 80080fc:	f3bf 8f6f 	isb	sy
 8008100:	f3bf 8f4f 	dsb	sy
 8008104:	61bb      	str	r3, [r7, #24]
}
 8008106:	bf00      	nop
 8008108:	bf00      	nop
 800810a:	e7fd      	b.n	8008108 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800810c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008114:	2b00      	cmp	r3, #0
 8008116:	d00d      	beq.n	8008134 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800811a:	2201      	movs	r2, #1
 800811c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008120:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008126:	9300      	str	r3, [sp, #0]
 8008128:	4613      	mov	r3, r2
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	68b9      	ldr	r1, [r7, #8]
 800812e:	68f8      	ldr	r0, [r7, #12]
 8008130:	f000 f840 	bl	80081b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008136:	4618      	mov	r0, r3
 8008138:	3730      	adds	r7, #48	@ 0x30
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}

0800813e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800813e:	b580      	push	{r7, lr}
 8008140:	b08a      	sub	sp, #40	@ 0x28
 8008142:	af02      	add	r7, sp, #8
 8008144:	60f8      	str	r0, [r7, #12]
 8008146:	60b9      	str	r1, [r7, #8]
 8008148:	4613      	mov	r3, r2
 800814a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d10b      	bne.n	800816a <xQueueGenericCreate+0x2c>
	__asm volatile
 8008152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008156:	f383 8811 	msr	BASEPRI, r3
 800815a:	f3bf 8f6f 	isb	sy
 800815e:	f3bf 8f4f 	dsb	sy
 8008162:	613b      	str	r3, [r7, #16]
}
 8008164:	bf00      	nop
 8008166:	bf00      	nop
 8008168:	e7fd      	b.n	8008166 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	68ba      	ldr	r2, [r7, #8]
 800816e:	fb02 f303 	mul.w	r3, r2, r3
 8008172:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	3350      	adds	r3, #80	@ 0x50
 8008178:	4618      	mov	r0, r3
 800817a:	f002 f9cf 	bl	800a51c <pvPortMalloc>
 800817e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008180:	69bb      	ldr	r3, [r7, #24]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d011      	beq.n	80081aa <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008186:	69bb      	ldr	r3, [r7, #24]
 8008188:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	3350      	adds	r3, #80	@ 0x50
 800818e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008190:	69bb      	ldr	r3, [r7, #24]
 8008192:	2200      	movs	r2, #0
 8008194:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008198:	79fa      	ldrb	r2, [r7, #7]
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	9300      	str	r3, [sp, #0]
 800819e:	4613      	mov	r3, r2
 80081a0:	697a      	ldr	r2, [r7, #20]
 80081a2:	68b9      	ldr	r1, [r7, #8]
 80081a4:	68f8      	ldr	r0, [r7, #12]
 80081a6:	f000 f805 	bl	80081b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80081aa:	69bb      	ldr	r3, [r7, #24]
	}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3720      	adds	r7, #32
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	60b9      	str	r1, [r7, #8]
 80081be:	607a      	str	r2, [r7, #4]
 80081c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d103      	bne.n	80081d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80081c8:	69bb      	ldr	r3, [r7, #24]
 80081ca:	69ba      	ldr	r2, [r7, #24]
 80081cc:	601a      	str	r2, [r3, #0]
 80081ce:	e002      	b.n	80081d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80081d0:	69bb      	ldr	r3, [r7, #24]
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80081d6:	69bb      	ldr	r3, [r7, #24]
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	68ba      	ldr	r2, [r7, #8]
 80081e0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80081e2:	2101      	movs	r1, #1
 80081e4:	69b8      	ldr	r0, [r7, #24]
 80081e6:	f7ff fec3 	bl	8007f70 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80081ea:	69bb      	ldr	r3, [r7, #24]
 80081ec:	78fa      	ldrb	r2, [r7, #3]
 80081ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80081f2:	bf00      	nop
 80081f4:	3710      	adds	r7, #16
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b08a      	sub	sp, #40	@ 0x28
 80081fe:	af02      	add	r7, sp, #8
 8008200:	60f8      	str	r0, [r7, #12]
 8008202:	60b9      	str	r1, [r7, #8]
 8008204:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d10b      	bne.n	8008224 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800820c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008210:	f383 8811 	msr	BASEPRI, r3
 8008214:	f3bf 8f6f 	isb	sy
 8008218:	f3bf 8f4f 	dsb	sy
 800821c:	61bb      	str	r3, [r7, #24]
}
 800821e:	bf00      	nop
 8008220:	bf00      	nop
 8008222:	e7fd      	b.n	8008220 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008224:	68ba      	ldr	r2, [r7, #8]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	429a      	cmp	r2, r3
 800822a:	d90b      	bls.n	8008244 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800822c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008230:	f383 8811 	msr	BASEPRI, r3
 8008234:	f3bf 8f6f 	isb	sy
 8008238:	f3bf 8f4f 	dsb	sy
 800823c:	617b      	str	r3, [r7, #20]
}
 800823e:	bf00      	nop
 8008240:	bf00      	nop
 8008242:	e7fd      	b.n	8008240 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008244:	2302      	movs	r3, #2
 8008246:	9300      	str	r3, [sp, #0]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	2100      	movs	r1, #0
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	f7ff fef8 	bl	8008044 <xQueueGenericCreateStatic>
 8008254:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008256:	69fb      	ldr	r3, [r7, #28]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d002      	beq.n	8008262 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	68ba      	ldr	r2, [r7, #8]
 8008260:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008262:	69fb      	ldr	r3, [r7, #28]
	}
 8008264:	4618      	mov	r0, r3
 8008266:	3720      	adds	r7, #32
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800826c:	b580      	push	{r7, lr}
 800826e:	b086      	sub	sp, #24
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d10b      	bne.n	8008294 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800827c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008280:	f383 8811 	msr	BASEPRI, r3
 8008284:	f3bf 8f6f 	isb	sy
 8008288:	f3bf 8f4f 	dsb	sy
 800828c:	613b      	str	r3, [r7, #16]
}
 800828e:	bf00      	nop
 8008290:	bf00      	nop
 8008292:	e7fd      	b.n	8008290 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008294:	683a      	ldr	r2, [r7, #0]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	429a      	cmp	r2, r3
 800829a:	d90b      	bls.n	80082b4 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800829c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082a0:	f383 8811 	msr	BASEPRI, r3
 80082a4:	f3bf 8f6f 	isb	sy
 80082a8:	f3bf 8f4f 	dsb	sy
 80082ac:	60fb      	str	r3, [r7, #12]
}
 80082ae:	bf00      	nop
 80082b0:	bf00      	nop
 80082b2:	e7fd      	b.n	80082b0 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80082b4:	2202      	movs	r2, #2
 80082b6:	2100      	movs	r1, #0
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f7ff ff40 	bl	800813e <xQueueGenericCreate>
 80082be:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d002      	beq.n	80082cc <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	683a      	ldr	r2, [r7, #0]
 80082ca:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80082cc:	697b      	ldr	r3, [r7, #20]
	}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3718      	adds	r7, #24
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
	...

080082d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b08e      	sub	sp, #56	@ 0x38
 80082dc:	af00      	add	r7, sp, #0
 80082de:	60f8      	str	r0, [r7, #12]
 80082e0:	60b9      	str	r1, [r7, #8]
 80082e2:	607a      	str	r2, [r7, #4]
 80082e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80082e6:	2300      	movs	r3, #0
 80082e8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80082ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d10b      	bne.n	800830c <xQueueGenericSend+0x34>
	__asm volatile
 80082f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082f8:	f383 8811 	msr	BASEPRI, r3
 80082fc:	f3bf 8f6f 	isb	sy
 8008300:	f3bf 8f4f 	dsb	sy
 8008304:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008306:	bf00      	nop
 8008308:	bf00      	nop
 800830a:	e7fd      	b.n	8008308 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d103      	bne.n	800831a <xQueueGenericSend+0x42>
 8008312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008316:	2b00      	cmp	r3, #0
 8008318:	d101      	bne.n	800831e <xQueueGenericSend+0x46>
 800831a:	2301      	movs	r3, #1
 800831c:	e000      	b.n	8008320 <xQueueGenericSend+0x48>
 800831e:	2300      	movs	r3, #0
 8008320:	2b00      	cmp	r3, #0
 8008322:	d10b      	bne.n	800833c <xQueueGenericSend+0x64>
	__asm volatile
 8008324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008328:	f383 8811 	msr	BASEPRI, r3
 800832c:	f3bf 8f6f 	isb	sy
 8008330:	f3bf 8f4f 	dsb	sy
 8008334:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008336:	bf00      	nop
 8008338:	bf00      	nop
 800833a:	e7fd      	b.n	8008338 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	2b02      	cmp	r3, #2
 8008340:	d103      	bne.n	800834a <xQueueGenericSend+0x72>
 8008342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008346:	2b01      	cmp	r3, #1
 8008348:	d101      	bne.n	800834e <xQueueGenericSend+0x76>
 800834a:	2301      	movs	r3, #1
 800834c:	e000      	b.n	8008350 <xQueueGenericSend+0x78>
 800834e:	2300      	movs	r3, #0
 8008350:	2b00      	cmp	r3, #0
 8008352:	d10b      	bne.n	800836c <xQueueGenericSend+0x94>
	__asm volatile
 8008354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008358:	f383 8811 	msr	BASEPRI, r3
 800835c:	f3bf 8f6f 	isb	sy
 8008360:	f3bf 8f4f 	dsb	sy
 8008364:	623b      	str	r3, [r7, #32]
}
 8008366:	bf00      	nop
 8008368:	bf00      	nop
 800836a:	e7fd      	b.n	8008368 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800836c:	f001 fa4a 	bl	8009804 <xTaskGetSchedulerState>
 8008370:	4603      	mov	r3, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	d102      	bne.n	800837c <xQueueGenericSend+0xa4>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d101      	bne.n	8008380 <xQueueGenericSend+0xa8>
 800837c:	2301      	movs	r3, #1
 800837e:	e000      	b.n	8008382 <xQueueGenericSend+0xaa>
 8008380:	2300      	movs	r3, #0
 8008382:	2b00      	cmp	r3, #0
 8008384:	d10b      	bne.n	800839e <xQueueGenericSend+0xc6>
	__asm volatile
 8008386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800838a:	f383 8811 	msr	BASEPRI, r3
 800838e:	f3bf 8f6f 	isb	sy
 8008392:	f3bf 8f4f 	dsb	sy
 8008396:	61fb      	str	r3, [r7, #28]
}
 8008398:	bf00      	nop
 800839a:	bf00      	nop
 800839c:	e7fd      	b.n	800839a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800839e:	f001 ff9b 	bl	800a2d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80083a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d302      	bcc.n	80083b4 <xQueueGenericSend+0xdc>
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	2b02      	cmp	r3, #2
 80083b2:	d129      	bne.n	8008408 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80083b4:	683a      	ldr	r2, [r7, #0]
 80083b6:	68b9      	ldr	r1, [r7, #8]
 80083b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80083ba:	f000 fa33 	bl	8008824 <prvCopyDataToQueue>
 80083be:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d010      	beq.n	80083ea <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ca:	3324      	adds	r3, #36	@ 0x24
 80083cc:	4618      	mov	r0, r3
 80083ce:	f001 f853 	bl	8009478 <xTaskRemoveFromEventList>
 80083d2:	4603      	mov	r3, r0
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d013      	beq.n	8008400 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80083d8:	4b3f      	ldr	r3, [pc, #252]	@ (80084d8 <xQueueGenericSend+0x200>)
 80083da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083de:	601a      	str	r2, [r3, #0]
 80083e0:	f3bf 8f4f 	dsb	sy
 80083e4:	f3bf 8f6f 	isb	sy
 80083e8:	e00a      	b.n	8008400 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80083ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d007      	beq.n	8008400 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80083f0:	4b39      	ldr	r3, [pc, #228]	@ (80084d8 <xQueueGenericSend+0x200>)
 80083f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083f6:	601a      	str	r2, [r3, #0]
 80083f8:	f3bf 8f4f 	dsb	sy
 80083fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008400:	f001 ff9c 	bl	800a33c <vPortExitCritical>
				return pdPASS;
 8008404:	2301      	movs	r3, #1
 8008406:	e063      	b.n	80084d0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d103      	bne.n	8008416 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800840e:	f001 ff95 	bl	800a33c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008412:	2300      	movs	r3, #0
 8008414:	e05c      	b.n	80084d0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008418:	2b00      	cmp	r3, #0
 800841a:	d106      	bne.n	800842a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800841c:	f107 0314 	add.w	r3, r7, #20
 8008420:	4618      	mov	r0, r3
 8008422:	f001 f88d 	bl	8009540 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008426:	2301      	movs	r3, #1
 8008428:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800842a:	f001 ff87 	bl	800a33c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800842e:	f000 fdf5 	bl	800901c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008432:	f001 ff51 	bl	800a2d8 <vPortEnterCritical>
 8008436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008438:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800843c:	b25b      	sxtb	r3, r3
 800843e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008442:	d103      	bne.n	800844c <xQueueGenericSend+0x174>
 8008444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008446:	2200      	movs	r2, #0
 8008448:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800844c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800844e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008452:	b25b      	sxtb	r3, r3
 8008454:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008458:	d103      	bne.n	8008462 <xQueueGenericSend+0x18a>
 800845a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800845c:	2200      	movs	r2, #0
 800845e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008462:	f001 ff6b 	bl	800a33c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008466:	1d3a      	adds	r2, r7, #4
 8008468:	f107 0314 	add.w	r3, r7, #20
 800846c:	4611      	mov	r1, r2
 800846e:	4618      	mov	r0, r3
 8008470:	f001 f87c 	bl	800956c <xTaskCheckForTimeOut>
 8008474:	4603      	mov	r3, r0
 8008476:	2b00      	cmp	r3, #0
 8008478:	d124      	bne.n	80084c4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800847a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800847c:	f000 faca 	bl	8008a14 <prvIsQueueFull>
 8008480:	4603      	mov	r3, r0
 8008482:	2b00      	cmp	r3, #0
 8008484:	d018      	beq.n	80084b8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008488:	3310      	adds	r3, #16
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	4611      	mov	r1, r2
 800848e:	4618      	mov	r0, r3
 8008490:	f000 ffa0 	bl	80093d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008494:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008496:	f000 fa55 	bl	8008944 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800849a:	f000 fdcd 	bl	8009038 <xTaskResumeAll>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	f47f af7c 	bne.w	800839e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80084a6:	4b0c      	ldr	r3, [pc, #48]	@ (80084d8 <xQueueGenericSend+0x200>)
 80084a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084ac:	601a      	str	r2, [r3, #0]
 80084ae:	f3bf 8f4f 	dsb	sy
 80084b2:	f3bf 8f6f 	isb	sy
 80084b6:	e772      	b.n	800839e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80084b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80084ba:	f000 fa43 	bl	8008944 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80084be:	f000 fdbb 	bl	8009038 <xTaskResumeAll>
 80084c2:	e76c      	b.n	800839e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80084c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80084c6:	f000 fa3d 	bl	8008944 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80084ca:	f000 fdb5 	bl	8009038 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80084ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3738      	adds	r7, #56	@ 0x38
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}
 80084d8:	e000ed04 	.word	0xe000ed04

080084dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b090      	sub	sp, #64	@ 0x40
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	60f8      	str	r0, [r7, #12]
 80084e4:	60b9      	str	r1, [r7, #8]
 80084e6:	607a      	str	r2, [r7, #4]
 80084e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80084ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d10b      	bne.n	800850c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80084f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084f8:	f383 8811 	msr	BASEPRI, r3
 80084fc:	f3bf 8f6f 	isb	sy
 8008500:	f3bf 8f4f 	dsb	sy
 8008504:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008506:	bf00      	nop
 8008508:	bf00      	nop
 800850a:	e7fd      	b.n	8008508 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d103      	bne.n	800851a <xQueueGenericSendFromISR+0x3e>
 8008512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008516:	2b00      	cmp	r3, #0
 8008518:	d101      	bne.n	800851e <xQueueGenericSendFromISR+0x42>
 800851a:	2301      	movs	r3, #1
 800851c:	e000      	b.n	8008520 <xQueueGenericSendFromISR+0x44>
 800851e:	2300      	movs	r3, #0
 8008520:	2b00      	cmp	r3, #0
 8008522:	d10b      	bne.n	800853c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008528:	f383 8811 	msr	BASEPRI, r3
 800852c:	f3bf 8f6f 	isb	sy
 8008530:	f3bf 8f4f 	dsb	sy
 8008534:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008536:	bf00      	nop
 8008538:	bf00      	nop
 800853a:	e7fd      	b.n	8008538 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	2b02      	cmp	r3, #2
 8008540:	d103      	bne.n	800854a <xQueueGenericSendFromISR+0x6e>
 8008542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008544:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008546:	2b01      	cmp	r3, #1
 8008548:	d101      	bne.n	800854e <xQueueGenericSendFromISR+0x72>
 800854a:	2301      	movs	r3, #1
 800854c:	e000      	b.n	8008550 <xQueueGenericSendFromISR+0x74>
 800854e:	2300      	movs	r3, #0
 8008550:	2b00      	cmp	r3, #0
 8008552:	d10b      	bne.n	800856c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008558:	f383 8811 	msr	BASEPRI, r3
 800855c:	f3bf 8f6f 	isb	sy
 8008560:	f3bf 8f4f 	dsb	sy
 8008564:	623b      	str	r3, [r7, #32]
}
 8008566:	bf00      	nop
 8008568:	bf00      	nop
 800856a:	e7fd      	b.n	8008568 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800856c:	f001 ff94 	bl	800a498 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008570:	f3ef 8211 	mrs	r2, BASEPRI
 8008574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008578:	f383 8811 	msr	BASEPRI, r3
 800857c:	f3bf 8f6f 	isb	sy
 8008580:	f3bf 8f4f 	dsb	sy
 8008584:	61fa      	str	r2, [r7, #28]
 8008586:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008588:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800858a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800858c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800858e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008594:	429a      	cmp	r2, r3
 8008596:	d302      	bcc.n	800859e <xQueueGenericSendFromISR+0xc2>
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	2b02      	cmp	r3, #2
 800859c:	d12f      	bne.n	80085fe <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800859e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80085a4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80085a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80085ae:	683a      	ldr	r2, [r7, #0]
 80085b0:	68b9      	ldr	r1, [r7, #8]
 80085b2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80085b4:	f000 f936 	bl	8008824 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80085b8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80085bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80085c0:	d112      	bne.n	80085e8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d016      	beq.n	80085f8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085cc:	3324      	adds	r3, #36	@ 0x24
 80085ce:	4618      	mov	r0, r3
 80085d0:	f000 ff52 	bl	8009478 <xTaskRemoveFromEventList>
 80085d4:	4603      	mov	r3, r0
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d00e      	beq.n	80085f8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d00b      	beq.n	80085f8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	601a      	str	r2, [r3, #0]
 80085e6:	e007      	b.n	80085f8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80085e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80085ec:	3301      	adds	r3, #1
 80085ee:	b2db      	uxtb	r3, r3
 80085f0:	b25a      	sxtb	r2, r3
 80085f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80085f8:	2301      	movs	r3, #1
 80085fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80085fc:	e001      	b.n	8008602 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80085fe:	2300      	movs	r3, #0
 8008600:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008604:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800860c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800860e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008610:	4618      	mov	r0, r3
 8008612:	3740      	adds	r7, #64	@ 0x40
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b08c      	sub	sp, #48	@ 0x30
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008624:	2300      	movs	r3, #0
 8008626:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800862c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800862e:	2b00      	cmp	r3, #0
 8008630:	d10b      	bne.n	800864a <xQueueReceive+0x32>
	__asm volatile
 8008632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008636:	f383 8811 	msr	BASEPRI, r3
 800863a:	f3bf 8f6f 	isb	sy
 800863e:	f3bf 8f4f 	dsb	sy
 8008642:	623b      	str	r3, [r7, #32]
}
 8008644:	bf00      	nop
 8008646:	bf00      	nop
 8008648:	e7fd      	b.n	8008646 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d103      	bne.n	8008658 <xQueueReceive+0x40>
 8008650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008654:	2b00      	cmp	r3, #0
 8008656:	d101      	bne.n	800865c <xQueueReceive+0x44>
 8008658:	2301      	movs	r3, #1
 800865a:	e000      	b.n	800865e <xQueueReceive+0x46>
 800865c:	2300      	movs	r3, #0
 800865e:	2b00      	cmp	r3, #0
 8008660:	d10b      	bne.n	800867a <xQueueReceive+0x62>
	__asm volatile
 8008662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008666:	f383 8811 	msr	BASEPRI, r3
 800866a:	f3bf 8f6f 	isb	sy
 800866e:	f3bf 8f4f 	dsb	sy
 8008672:	61fb      	str	r3, [r7, #28]
}
 8008674:	bf00      	nop
 8008676:	bf00      	nop
 8008678:	e7fd      	b.n	8008676 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800867a:	f001 f8c3 	bl	8009804 <xTaskGetSchedulerState>
 800867e:	4603      	mov	r3, r0
 8008680:	2b00      	cmp	r3, #0
 8008682:	d102      	bne.n	800868a <xQueueReceive+0x72>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d101      	bne.n	800868e <xQueueReceive+0x76>
 800868a:	2301      	movs	r3, #1
 800868c:	e000      	b.n	8008690 <xQueueReceive+0x78>
 800868e:	2300      	movs	r3, #0
 8008690:	2b00      	cmp	r3, #0
 8008692:	d10b      	bne.n	80086ac <xQueueReceive+0x94>
	__asm volatile
 8008694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008698:	f383 8811 	msr	BASEPRI, r3
 800869c:	f3bf 8f6f 	isb	sy
 80086a0:	f3bf 8f4f 	dsb	sy
 80086a4:	61bb      	str	r3, [r7, #24]
}
 80086a6:	bf00      	nop
 80086a8:	bf00      	nop
 80086aa:	e7fd      	b.n	80086a8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80086ac:	f001 fe14 	bl	800a2d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80086b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086b4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80086b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d01f      	beq.n	80086fc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80086bc:	68b9      	ldr	r1, [r7, #8]
 80086be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086c0:	f000 f91a 	bl	80088f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80086c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c6:	1e5a      	subs	r2, r3, #1
 80086c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ca:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ce:	691b      	ldr	r3, [r3, #16]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d00f      	beq.n	80086f4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086d6:	3310      	adds	r3, #16
 80086d8:	4618      	mov	r0, r3
 80086da:	f000 fecd 	bl	8009478 <xTaskRemoveFromEventList>
 80086de:	4603      	mov	r3, r0
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d007      	beq.n	80086f4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80086e4:	4b3c      	ldr	r3, [pc, #240]	@ (80087d8 <xQueueReceive+0x1c0>)
 80086e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086ea:	601a      	str	r2, [r3, #0]
 80086ec:	f3bf 8f4f 	dsb	sy
 80086f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80086f4:	f001 fe22 	bl	800a33c <vPortExitCritical>
				return pdPASS;
 80086f8:	2301      	movs	r3, #1
 80086fa:	e069      	b.n	80087d0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d103      	bne.n	800870a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008702:	f001 fe1b 	bl	800a33c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008706:	2300      	movs	r3, #0
 8008708:	e062      	b.n	80087d0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800870a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800870c:	2b00      	cmp	r3, #0
 800870e:	d106      	bne.n	800871e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008710:	f107 0310 	add.w	r3, r7, #16
 8008714:	4618      	mov	r0, r3
 8008716:	f000 ff13 	bl	8009540 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800871a:	2301      	movs	r3, #1
 800871c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800871e:	f001 fe0d 	bl	800a33c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008722:	f000 fc7b 	bl	800901c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008726:	f001 fdd7 	bl	800a2d8 <vPortEnterCritical>
 800872a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800872c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008730:	b25b      	sxtb	r3, r3
 8008732:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008736:	d103      	bne.n	8008740 <xQueueReceive+0x128>
 8008738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800873a:	2200      	movs	r2, #0
 800873c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008742:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008746:	b25b      	sxtb	r3, r3
 8008748:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800874c:	d103      	bne.n	8008756 <xQueueReceive+0x13e>
 800874e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008750:	2200      	movs	r2, #0
 8008752:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008756:	f001 fdf1 	bl	800a33c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800875a:	1d3a      	adds	r2, r7, #4
 800875c:	f107 0310 	add.w	r3, r7, #16
 8008760:	4611      	mov	r1, r2
 8008762:	4618      	mov	r0, r3
 8008764:	f000 ff02 	bl	800956c <xTaskCheckForTimeOut>
 8008768:	4603      	mov	r3, r0
 800876a:	2b00      	cmp	r3, #0
 800876c:	d123      	bne.n	80087b6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800876e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008770:	f000 f93a 	bl	80089e8 <prvIsQueueEmpty>
 8008774:	4603      	mov	r3, r0
 8008776:	2b00      	cmp	r3, #0
 8008778:	d017      	beq.n	80087aa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800877a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800877c:	3324      	adds	r3, #36	@ 0x24
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	4611      	mov	r1, r2
 8008782:	4618      	mov	r0, r3
 8008784:	f000 fe26 	bl	80093d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008788:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800878a:	f000 f8db 	bl	8008944 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800878e:	f000 fc53 	bl	8009038 <xTaskResumeAll>
 8008792:	4603      	mov	r3, r0
 8008794:	2b00      	cmp	r3, #0
 8008796:	d189      	bne.n	80086ac <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008798:	4b0f      	ldr	r3, [pc, #60]	@ (80087d8 <xQueueReceive+0x1c0>)
 800879a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800879e:	601a      	str	r2, [r3, #0]
 80087a0:	f3bf 8f4f 	dsb	sy
 80087a4:	f3bf 8f6f 	isb	sy
 80087a8:	e780      	b.n	80086ac <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80087aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087ac:	f000 f8ca 	bl	8008944 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80087b0:	f000 fc42 	bl	8009038 <xTaskResumeAll>
 80087b4:	e77a      	b.n	80086ac <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80087b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087b8:	f000 f8c4 	bl	8008944 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80087bc:	f000 fc3c 	bl	8009038 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80087c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087c2:	f000 f911 	bl	80089e8 <prvIsQueueEmpty>
 80087c6:	4603      	mov	r3, r0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	f43f af6f 	beq.w	80086ac <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80087ce:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3730      	adds	r7, #48	@ 0x30
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}
 80087d8:	e000ed04 	.word	0xe000ed04

080087dc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d10b      	bne.n	8008806 <vQueueDelete+0x2a>
	__asm volatile
 80087ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087f2:	f383 8811 	msr	BASEPRI, r3
 80087f6:	f3bf 8f6f 	isb	sy
 80087fa:	f3bf 8f4f 	dsb	sy
 80087fe:	60bb      	str	r3, [r7, #8]
}
 8008800:	bf00      	nop
 8008802:	bf00      	nop
 8008804:	e7fd      	b.n	8008802 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008806:	68f8      	ldr	r0, [r7, #12]
 8008808:	f000 f946 	bl	8008a98 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008812:	2b00      	cmp	r3, #0
 8008814:	d102      	bne.n	800881c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8008816:	68f8      	ldr	r0, [r7, #12]
 8008818:	f001 ff4e 	bl	800a6b8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800881c:	bf00      	nop
 800881e:	3710      	adds	r7, #16
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b086      	sub	sp, #24
 8008828:	af00      	add	r7, sp, #0
 800882a:	60f8      	str	r0, [r7, #12]
 800882c:	60b9      	str	r1, [r7, #8]
 800882e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008830:	2300      	movs	r3, #0
 8008832:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008838:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800883e:	2b00      	cmp	r3, #0
 8008840:	d10d      	bne.n	800885e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d14d      	bne.n	80088e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	4618      	mov	r0, r3
 8008850:	f000 fff6 	bl	8009840 <xTaskPriorityDisinherit>
 8008854:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2200      	movs	r2, #0
 800885a:	609a      	str	r2, [r3, #8]
 800885c:	e043      	b.n	80088e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d119      	bne.n	8008898 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6858      	ldr	r0, [r3, #4]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800886c:	461a      	mov	r2, r3
 800886e:	68b9      	ldr	r1, [r7, #8]
 8008870:	f002 f8d2 	bl	800aa18 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	685a      	ldr	r2, [r3, #4]
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800887c:	441a      	add	r2, r3
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	685a      	ldr	r2, [r3, #4]
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	429a      	cmp	r2, r3
 800888c:	d32b      	bcc.n	80088e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681a      	ldr	r2, [r3, #0]
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	605a      	str	r2, [r3, #4]
 8008896:	e026      	b.n	80088e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	68d8      	ldr	r0, [r3, #12]
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088a0:	461a      	mov	r2, r3
 80088a2:	68b9      	ldr	r1, [r7, #8]
 80088a4:	f002 f8b8 	bl	800aa18 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	68da      	ldr	r2, [r3, #12]
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088b0:	425b      	negs	r3, r3
 80088b2:	441a      	add	r2, r3
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	68da      	ldr	r2, [r3, #12]
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d207      	bcs.n	80088d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	689a      	ldr	r2, [r3, #8]
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088cc:	425b      	negs	r3, r3
 80088ce:	441a      	add	r2, r3
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2b02      	cmp	r3, #2
 80088d8:	d105      	bne.n	80088e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d002      	beq.n	80088e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	3b01      	subs	r3, #1
 80088e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	1c5a      	adds	r2, r3, #1
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80088ee:	697b      	ldr	r3, [r7, #20]
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3718      	adds	r7, #24
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b082      	sub	sp, #8
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008906:	2b00      	cmp	r3, #0
 8008908:	d018      	beq.n	800893c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	68da      	ldr	r2, [r3, #12]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008912:	441a      	add	r2, r3
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	68da      	ldr	r2, [r3, #12]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	429a      	cmp	r2, r3
 8008922:	d303      	bcc.n	800892c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	68d9      	ldr	r1, [r3, #12]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008934:	461a      	mov	r2, r3
 8008936:	6838      	ldr	r0, [r7, #0]
 8008938:	f002 f86e 	bl	800aa18 <memcpy>
	}
}
 800893c:	bf00      	nop
 800893e:	3708      	adds	r7, #8
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800894c:	f001 fcc4 	bl	800a2d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008956:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008958:	e011      	b.n	800897e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800895e:	2b00      	cmp	r3, #0
 8008960:	d012      	beq.n	8008988 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	3324      	adds	r3, #36	@ 0x24
 8008966:	4618      	mov	r0, r3
 8008968:	f000 fd86 	bl	8009478 <xTaskRemoveFromEventList>
 800896c:	4603      	mov	r3, r0
 800896e:	2b00      	cmp	r3, #0
 8008970:	d001      	beq.n	8008976 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008972:	f000 fe5f 	bl	8009634 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008976:	7bfb      	ldrb	r3, [r7, #15]
 8008978:	3b01      	subs	r3, #1
 800897a:	b2db      	uxtb	r3, r3
 800897c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800897e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008982:	2b00      	cmp	r3, #0
 8008984:	dce9      	bgt.n	800895a <prvUnlockQueue+0x16>
 8008986:	e000      	b.n	800898a <prvUnlockQueue+0x46>
					break;
 8008988:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	22ff      	movs	r2, #255	@ 0xff
 800898e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008992:	f001 fcd3 	bl	800a33c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008996:	f001 fc9f 	bl	800a2d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80089a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80089a2:	e011      	b.n	80089c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	691b      	ldr	r3, [r3, #16]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d012      	beq.n	80089d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	3310      	adds	r3, #16
 80089b0:	4618      	mov	r0, r3
 80089b2:	f000 fd61 	bl	8009478 <xTaskRemoveFromEventList>
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d001      	beq.n	80089c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80089bc:	f000 fe3a 	bl	8009634 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80089c0:	7bbb      	ldrb	r3, [r7, #14]
 80089c2:	3b01      	subs	r3, #1
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80089c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	dce9      	bgt.n	80089a4 <prvUnlockQueue+0x60>
 80089d0:	e000      	b.n	80089d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80089d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	22ff      	movs	r2, #255	@ 0xff
 80089d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80089dc:	f001 fcae 	bl	800a33c <vPortExitCritical>
}
 80089e0:	bf00      	nop
 80089e2:	3710      	adds	r7, #16
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80089f0:	f001 fc72 	bl	800a2d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d102      	bne.n	8008a02 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80089fc:	2301      	movs	r3, #1
 80089fe:	60fb      	str	r3, [r7, #12]
 8008a00:	e001      	b.n	8008a06 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008a02:	2300      	movs	r3, #0
 8008a04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a06:	f001 fc99 	bl	800a33c <vPortExitCritical>

	return xReturn;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3710      	adds	r7, #16
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a1c:	f001 fc5c 	bl	800a2d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d102      	bne.n	8008a32 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	60fb      	str	r3, [r7, #12]
 8008a30:	e001      	b.n	8008a36 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008a32:	2300      	movs	r3, #0
 8008a34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a36:	f001 fc81 	bl	800a33c <vPortExitCritical>

	return xReturn;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3710      	adds	r7, #16
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008a44:	b480      	push	{r7}
 8008a46:	b085      	sub	sp, #20
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a4e:	2300      	movs	r3, #0
 8008a50:	60fb      	str	r3, [r7, #12]
 8008a52:	e014      	b.n	8008a7e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008a54:	4a0f      	ldr	r2, [pc, #60]	@ (8008a94 <vQueueAddToRegistry+0x50>)
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d10b      	bne.n	8008a78 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008a60:	490c      	ldr	r1, [pc, #48]	@ (8008a94 <vQueueAddToRegistry+0x50>)
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	683a      	ldr	r2, [r7, #0]
 8008a66:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8008a94 <vQueueAddToRegistry+0x50>)
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	00db      	lsls	r3, r3, #3
 8008a70:	4413      	add	r3, r2
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008a76:	e006      	b.n	8008a86 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	60fb      	str	r3, [r7, #12]
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2b07      	cmp	r3, #7
 8008a82:	d9e7      	bls.n	8008a54 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008a84:	bf00      	nop
 8008a86:	bf00      	nop
 8008a88:	3714      	adds	r7, #20
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr
 8008a92:	bf00      	nop
 8008a94:	20000a48 	.word	0x20000a48

08008a98 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008a98:	b480      	push	{r7}
 8008a9a:	b085      	sub	sp, #20
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	60fb      	str	r3, [r7, #12]
 8008aa4:	e016      	b.n	8008ad4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008aa6:	4a10      	ldr	r2, [pc, #64]	@ (8008ae8 <vQueueUnregisterQueue+0x50>)
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	00db      	lsls	r3, r3, #3
 8008aac:	4413      	add	r3, r2
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	687a      	ldr	r2, [r7, #4]
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d10b      	bne.n	8008ace <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008ab6:	4a0c      	ldr	r2, [pc, #48]	@ (8008ae8 <vQueueUnregisterQueue+0x50>)
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2100      	movs	r1, #0
 8008abc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008ac0:	4a09      	ldr	r2, [pc, #36]	@ (8008ae8 <vQueueUnregisterQueue+0x50>)
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	00db      	lsls	r3, r3, #3
 8008ac6:	4413      	add	r3, r2
 8008ac8:	2200      	movs	r2, #0
 8008aca:	605a      	str	r2, [r3, #4]
				break;
 8008acc:	e006      	b.n	8008adc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	60fb      	str	r3, [r7, #12]
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2b07      	cmp	r3, #7
 8008ad8:	d9e5      	bls.n	8008aa6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008ada:	bf00      	nop
 8008adc:	bf00      	nop
 8008ade:	3714      	adds	r7, #20
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr
 8008ae8:	20000a48 	.word	0x20000a48

08008aec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b086      	sub	sp, #24
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	60f8      	str	r0, [r7, #12]
 8008af4:	60b9      	str	r1, [r7, #8]
 8008af6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008afc:	f001 fbec 	bl	800a2d8 <vPortEnterCritical>
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008b06:	b25b      	sxtb	r3, r3
 8008b08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b0c:	d103      	bne.n	8008b16 <vQueueWaitForMessageRestricted+0x2a>
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	2200      	movs	r2, #0
 8008b12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b1c:	b25b      	sxtb	r3, r3
 8008b1e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b22:	d103      	bne.n	8008b2c <vQueueWaitForMessageRestricted+0x40>
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	2200      	movs	r2, #0
 8008b28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b2c:	f001 fc06 	bl	800a33c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d106      	bne.n	8008b46 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	3324      	adds	r3, #36	@ 0x24
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	68b9      	ldr	r1, [r7, #8]
 8008b40:	4618      	mov	r0, r3
 8008b42:	f000 fc6d 	bl	8009420 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008b46:	6978      	ldr	r0, [r7, #20]
 8008b48:	f7ff fefc 	bl	8008944 <prvUnlockQueue>
	}
 8008b4c:	bf00      	nop
 8008b4e:	3718      	adds	r7, #24
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b08e      	sub	sp, #56	@ 0x38
 8008b58:	af04      	add	r7, sp, #16
 8008b5a:	60f8      	str	r0, [r7, #12]
 8008b5c:	60b9      	str	r1, [r7, #8]
 8008b5e:	607a      	str	r2, [r7, #4]
 8008b60:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008b62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d10b      	bne.n	8008b80 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b6c:	f383 8811 	msr	BASEPRI, r3
 8008b70:	f3bf 8f6f 	isb	sy
 8008b74:	f3bf 8f4f 	dsb	sy
 8008b78:	623b      	str	r3, [r7, #32]
}
 8008b7a:	bf00      	nop
 8008b7c:	bf00      	nop
 8008b7e:	e7fd      	b.n	8008b7c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d10b      	bne.n	8008b9e <xTaskCreateStatic+0x4a>
	__asm volatile
 8008b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b8a:	f383 8811 	msr	BASEPRI, r3
 8008b8e:	f3bf 8f6f 	isb	sy
 8008b92:	f3bf 8f4f 	dsb	sy
 8008b96:	61fb      	str	r3, [r7, #28]
}
 8008b98:	bf00      	nop
 8008b9a:	bf00      	nop
 8008b9c:	e7fd      	b.n	8008b9a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008b9e:	23a8      	movs	r3, #168	@ 0xa8
 8008ba0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	2ba8      	cmp	r3, #168	@ 0xa8
 8008ba6:	d00b      	beq.n	8008bc0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bac:	f383 8811 	msr	BASEPRI, r3
 8008bb0:	f3bf 8f6f 	isb	sy
 8008bb4:	f3bf 8f4f 	dsb	sy
 8008bb8:	61bb      	str	r3, [r7, #24]
}
 8008bba:	bf00      	nop
 8008bbc:	bf00      	nop
 8008bbe:	e7fd      	b.n	8008bbc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008bc0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d01e      	beq.n	8008c06 <xTaskCreateStatic+0xb2>
 8008bc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d01b      	beq.n	8008c06 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bd0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bd4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008bd6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bda:	2202      	movs	r2, #2
 8008bdc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008be0:	2300      	movs	r3, #0
 8008be2:	9303      	str	r3, [sp, #12]
 8008be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008be6:	9302      	str	r3, [sp, #8]
 8008be8:	f107 0314 	add.w	r3, r7, #20
 8008bec:	9301      	str	r3, [sp, #4]
 8008bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bf0:	9300      	str	r3, [sp, #0]
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	687a      	ldr	r2, [r7, #4]
 8008bf6:	68b9      	ldr	r1, [r7, #8]
 8008bf8:	68f8      	ldr	r0, [r7, #12]
 8008bfa:	f000 f851 	bl	8008ca0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008bfe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008c00:	f000 f8f6 	bl	8008df0 <prvAddNewTaskToReadyList>
 8008c04:	e001      	b.n	8008c0a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008c06:	2300      	movs	r3, #0
 8008c08:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008c0a:	697b      	ldr	r3, [r7, #20]
	}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3728      	adds	r7, #40	@ 0x28
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b08c      	sub	sp, #48	@ 0x30
 8008c18:	af04      	add	r7, sp, #16
 8008c1a:	60f8      	str	r0, [r7, #12]
 8008c1c:	60b9      	str	r1, [r7, #8]
 8008c1e:	603b      	str	r3, [r7, #0]
 8008c20:	4613      	mov	r3, r2
 8008c22:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008c24:	88fb      	ldrh	r3, [r7, #6]
 8008c26:	009b      	lsls	r3, r3, #2
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f001 fc77 	bl	800a51c <pvPortMalloc>
 8008c2e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d00e      	beq.n	8008c54 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008c36:	20a8      	movs	r0, #168	@ 0xa8
 8008c38:	f001 fc70 	bl	800a51c <pvPortMalloc>
 8008c3c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008c3e:	69fb      	ldr	r3, [r7, #28]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d003      	beq.n	8008c4c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008c44:	69fb      	ldr	r3, [r7, #28]
 8008c46:	697a      	ldr	r2, [r7, #20]
 8008c48:	631a      	str	r2, [r3, #48]	@ 0x30
 8008c4a:	e005      	b.n	8008c58 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008c4c:	6978      	ldr	r0, [r7, #20]
 8008c4e:	f001 fd33 	bl	800a6b8 <vPortFree>
 8008c52:	e001      	b.n	8008c58 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008c54:	2300      	movs	r3, #0
 8008c56:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008c58:	69fb      	ldr	r3, [r7, #28]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d017      	beq.n	8008c8e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008c5e:	69fb      	ldr	r3, [r7, #28]
 8008c60:	2200      	movs	r2, #0
 8008c62:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008c66:	88fa      	ldrh	r2, [r7, #6]
 8008c68:	2300      	movs	r3, #0
 8008c6a:	9303      	str	r3, [sp, #12]
 8008c6c:	69fb      	ldr	r3, [r7, #28]
 8008c6e:	9302      	str	r3, [sp, #8]
 8008c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c72:	9301      	str	r3, [sp, #4]
 8008c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c76:	9300      	str	r3, [sp, #0]
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	68b9      	ldr	r1, [r7, #8]
 8008c7c:	68f8      	ldr	r0, [r7, #12]
 8008c7e:	f000 f80f 	bl	8008ca0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c82:	69f8      	ldr	r0, [r7, #28]
 8008c84:	f000 f8b4 	bl	8008df0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	61bb      	str	r3, [r7, #24]
 8008c8c:	e002      	b.n	8008c94 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008c8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008c92:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008c94:	69bb      	ldr	r3, [r7, #24]
	}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3720      	adds	r7, #32
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
	...

08008ca0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b088      	sub	sp, #32
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	60f8      	str	r0, [r7, #12]
 8008ca8:	60b9      	str	r1, [r7, #8]
 8008caa:	607a      	str	r2, [r7, #4]
 8008cac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	009b      	lsls	r3, r3, #2
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	21a5      	movs	r1, #165	@ 0xa5
 8008cba:	f001 fe29 	bl	800a910 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cc0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008cc8:	3b01      	subs	r3, #1
 8008cca:	009b      	lsls	r3, r3, #2
 8008ccc:	4413      	add	r3, r2
 8008cce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008cd0:	69bb      	ldr	r3, [r7, #24]
 8008cd2:	f023 0307 	bic.w	r3, r3, #7
 8008cd6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008cd8:	69bb      	ldr	r3, [r7, #24]
 8008cda:	f003 0307 	and.w	r3, r3, #7
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d00b      	beq.n	8008cfa <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ce6:	f383 8811 	msr	BASEPRI, r3
 8008cea:	f3bf 8f6f 	isb	sy
 8008cee:	f3bf 8f4f 	dsb	sy
 8008cf2:	617b      	str	r3, [r7, #20]
}
 8008cf4:	bf00      	nop
 8008cf6:	bf00      	nop
 8008cf8:	e7fd      	b.n	8008cf6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d01f      	beq.n	8008d40 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d00:	2300      	movs	r3, #0
 8008d02:	61fb      	str	r3, [r7, #28]
 8008d04:	e012      	b.n	8008d2c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008d06:	68ba      	ldr	r2, [r7, #8]
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	4413      	add	r3, r2
 8008d0c:	7819      	ldrb	r1, [r3, #0]
 8008d0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d10:	69fb      	ldr	r3, [r7, #28]
 8008d12:	4413      	add	r3, r2
 8008d14:	3334      	adds	r3, #52	@ 0x34
 8008d16:	460a      	mov	r2, r1
 8008d18:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008d1a:	68ba      	ldr	r2, [r7, #8]
 8008d1c:	69fb      	ldr	r3, [r7, #28]
 8008d1e:	4413      	add	r3, r2
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d006      	beq.n	8008d34 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d26:	69fb      	ldr	r3, [r7, #28]
 8008d28:	3301      	adds	r3, #1
 8008d2a:	61fb      	str	r3, [r7, #28]
 8008d2c:	69fb      	ldr	r3, [r7, #28]
 8008d2e:	2b0f      	cmp	r3, #15
 8008d30:	d9e9      	bls.n	8008d06 <prvInitialiseNewTask+0x66>
 8008d32:	e000      	b.n	8008d36 <prvInitialiseNewTask+0x96>
			{
				break;
 8008d34:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d38:	2200      	movs	r2, #0
 8008d3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008d3e:	e003      	b.n	8008d48 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d42:	2200      	movs	r2, #0
 8008d44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d4a:	2b37      	cmp	r3, #55	@ 0x37
 8008d4c:	d901      	bls.n	8008d52 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008d4e:	2337      	movs	r3, #55	@ 0x37
 8008d50:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d56:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d5c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d60:	2200      	movs	r2, #0
 8008d62:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d66:	3304      	adds	r3, #4
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f7ff f86d 	bl	8007e48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d70:	3318      	adds	r3, #24
 8008d72:	4618      	mov	r0, r3
 8008d74:	f7ff f868 	bl	8007e48 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d7c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d80:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d86:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d8c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d90:	2200      	movs	r2, #0
 8008d92:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d98:	2200      	movs	r2, #0
 8008d9a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008da0:	3354      	adds	r3, #84	@ 0x54
 8008da2:	224c      	movs	r2, #76	@ 0x4c
 8008da4:	2100      	movs	r1, #0
 8008da6:	4618      	mov	r0, r3
 8008da8:	f001 fdb2 	bl	800a910 <memset>
 8008dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dae:	4a0d      	ldr	r2, [pc, #52]	@ (8008de4 <prvInitialiseNewTask+0x144>)
 8008db0:	659a      	str	r2, [r3, #88]	@ 0x58
 8008db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008db4:	4a0c      	ldr	r2, [pc, #48]	@ (8008de8 <prvInitialiseNewTask+0x148>)
 8008db6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dba:	4a0c      	ldr	r2, [pc, #48]	@ (8008dec <prvInitialiseNewTask+0x14c>)
 8008dbc:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008dbe:	683a      	ldr	r2, [r7, #0]
 8008dc0:	68f9      	ldr	r1, [r7, #12]
 8008dc2:	69b8      	ldr	r0, [r7, #24]
 8008dc4:	f001 f95a 	bl	800a07c <pxPortInitialiseStack>
 8008dc8:	4602      	mov	r2, r0
 8008dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dcc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d002      	beq.n	8008dda <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008dd8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008dda:	bf00      	nop
 8008ddc:	3720      	adds	r7, #32
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
 8008de2:	bf00      	nop
 8008de4:	20001c98 	.word	0x20001c98
 8008de8:	20001d00 	.word	0x20001d00
 8008dec:	20001d68 	.word	0x20001d68

08008df0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008df8:	f001 fa6e 	bl	800a2d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008dfc:	4b2d      	ldr	r3, [pc, #180]	@ (8008eb4 <prvAddNewTaskToReadyList+0xc4>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	3301      	adds	r3, #1
 8008e02:	4a2c      	ldr	r2, [pc, #176]	@ (8008eb4 <prvAddNewTaskToReadyList+0xc4>)
 8008e04:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008e06:	4b2c      	ldr	r3, [pc, #176]	@ (8008eb8 <prvAddNewTaskToReadyList+0xc8>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d109      	bne.n	8008e22 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008e0e:	4a2a      	ldr	r2, [pc, #168]	@ (8008eb8 <prvAddNewTaskToReadyList+0xc8>)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008e14:	4b27      	ldr	r3, [pc, #156]	@ (8008eb4 <prvAddNewTaskToReadyList+0xc4>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d110      	bne.n	8008e3e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008e1c:	f000 fc2e 	bl	800967c <prvInitialiseTaskLists>
 8008e20:	e00d      	b.n	8008e3e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008e22:	4b26      	ldr	r3, [pc, #152]	@ (8008ebc <prvAddNewTaskToReadyList+0xcc>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d109      	bne.n	8008e3e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008e2a:	4b23      	ldr	r3, [pc, #140]	@ (8008eb8 <prvAddNewTaskToReadyList+0xc8>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d802      	bhi.n	8008e3e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008e38:	4a1f      	ldr	r2, [pc, #124]	@ (8008eb8 <prvAddNewTaskToReadyList+0xc8>)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008e3e:	4b20      	ldr	r3, [pc, #128]	@ (8008ec0 <prvAddNewTaskToReadyList+0xd0>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	3301      	adds	r3, #1
 8008e44:	4a1e      	ldr	r2, [pc, #120]	@ (8008ec0 <prvAddNewTaskToReadyList+0xd0>)
 8008e46:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008e48:	4b1d      	ldr	r3, [pc, #116]	@ (8008ec0 <prvAddNewTaskToReadyList+0xd0>)
 8008e4a:	681a      	ldr	r2, [r3, #0]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e54:	4b1b      	ldr	r3, [pc, #108]	@ (8008ec4 <prvAddNewTaskToReadyList+0xd4>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d903      	bls.n	8008e64 <prvAddNewTaskToReadyList+0x74>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e60:	4a18      	ldr	r2, [pc, #96]	@ (8008ec4 <prvAddNewTaskToReadyList+0xd4>)
 8008e62:	6013      	str	r3, [r2, #0]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e68:	4613      	mov	r3, r2
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	4413      	add	r3, r2
 8008e6e:	009b      	lsls	r3, r3, #2
 8008e70:	4a15      	ldr	r2, [pc, #84]	@ (8008ec8 <prvAddNewTaskToReadyList+0xd8>)
 8008e72:	441a      	add	r2, r3
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	3304      	adds	r3, #4
 8008e78:	4619      	mov	r1, r3
 8008e7a:	4610      	mov	r0, r2
 8008e7c:	f7fe fff1 	bl	8007e62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008e80:	f001 fa5c 	bl	800a33c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008e84:	4b0d      	ldr	r3, [pc, #52]	@ (8008ebc <prvAddNewTaskToReadyList+0xcc>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d00e      	beq.n	8008eaa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8008eb8 <prvAddNewTaskToReadyList+0xc8>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d207      	bcs.n	8008eaa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8008ecc <prvAddNewTaskToReadyList+0xdc>)
 8008e9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ea0:	601a      	str	r2, [r3, #0]
 8008ea2:	f3bf 8f4f 	dsb	sy
 8008ea6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008eaa:	bf00      	nop
 8008eac:	3708      	adds	r7, #8
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	20000f5c 	.word	0x20000f5c
 8008eb8:	20000a88 	.word	0x20000a88
 8008ebc:	20000f68 	.word	0x20000f68
 8008ec0:	20000f78 	.word	0x20000f78
 8008ec4:	20000f64 	.word	0x20000f64
 8008ec8:	20000a8c 	.word	0x20000a8c
 8008ecc:	e000ed04 	.word	0xe000ed04

08008ed0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d018      	beq.n	8008f14 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008ee2:	4b14      	ldr	r3, [pc, #80]	@ (8008f34 <vTaskDelay+0x64>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d00b      	beq.n	8008f02 <vTaskDelay+0x32>
	__asm volatile
 8008eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eee:	f383 8811 	msr	BASEPRI, r3
 8008ef2:	f3bf 8f6f 	isb	sy
 8008ef6:	f3bf 8f4f 	dsb	sy
 8008efa:	60bb      	str	r3, [r7, #8]
}
 8008efc:	bf00      	nop
 8008efe:	bf00      	nop
 8008f00:	e7fd      	b.n	8008efe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008f02:	f000 f88b 	bl	800901c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008f06:	2100      	movs	r1, #0
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 fd09 	bl	8009920 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008f0e:	f000 f893 	bl	8009038 <xTaskResumeAll>
 8008f12:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d107      	bne.n	8008f2a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008f1a:	4b07      	ldr	r3, [pc, #28]	@ (8008f38 <vTaskDelay+0x68>)
 8008f1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f20:	601a      	str	r2, [r3, #0]
 8008f22:	f3bf 8f4f 	dsb	sy
 8008f26:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008f2a:	bf00      	nop
 8008f2c:	3710      	adds	r7, #16
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	20000f84 	.word	0x20000f84
 8008f38:	e000ed04 	.word	0xe000ed04

08008f3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b08a      	sub	sp, #40	@ 0x28
 8008f40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008f42:	2300      	movs	r3, #0
 8008f44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008f46:	2300      	movs	r3, #0
 8008f48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008f4a:	463a      	mov	r2, r7
 8008f4c:	1d39      	adds	r1, r7, #4
 8008f4e:	f107 0308 	add.w	r3, r7, #8
 8008f52:	4618      	mov	r0, r3
 8008f54:	f7fe ff24 	bl	8007da0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008f58:	6839      	ldr	r1, [r7, #0]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	68ba      	ldr	r2, [r7, #8]
 8008f5e:	9202      	str	r2, [sp, #8]
 8008f60:	9301      	str	r3, [sp, #4]
 8008f62:	2300      	movs	r3, #0
 8008f64:	9300      	str	r3, [sp, #0]
 8008f66:	2300      	movs	r3, #0
 8008f68:	460a      	mov	r2, r1
 8008f6a:	4924      	ldr	r1, [pc, #144]	@ (8008ffc <vTaskStartScheduler+0xc0>)
 8008f6c:	4824      	ldr	r0, [pc, #144]	@ (8009000 <vTaskStartScheduler+0xc4>)
 8008f6e:	f7ff fdf1 	bl	8008b54 <xTaskCreateStatic>
 8008f72:	4603      	mov	r3, r0
 8008f74:	4a23      	ldr	r2, [pc, #140]	@ (8009004 <vTaskStartScheduler+0xc8>)
 8008f76:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008f78:	4b22      	ldr	r3, [pc, #136]	@ (8009004 <vTaskStartScheduler+0xc8>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d002      	beq.n	8008f86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008f80:	2301      	movs	r3, #1
 8008f82:	617b      	str	r3, [r7, #20]
 8008f84:	e001      	b.n	8008f8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008f86:	2300      	movs	r3, #0
 8008f88:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d102      	bne.n	8008f96 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008f90:	f000 fd1a 	bl	80099c8 <xTimerCreateTimerTask>
 8008f94:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d11b      	bne.n	8008fd4 <vTaskStartScheduler+0x98>
	__asm volatile
 8008f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fa0:	f383 8811 	msr	BASEPRI, r3
 8008fa4:	f3bf 8f6f 	isb	sy
 8008fa8:	f3bf 8f4f 	dsb	sy
 8008fac:	613b      	str	r3, [r7, #16]
}
 8008fae:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008fb0:	4b15      	ldr	r3, [pc, #84]	@ (8009008 <vTaskStartScheduler+0xcc>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	3354      	adds	r3, #84	@ 0x54
 8008fb6:	4a15      	ldr	r2, [pc, #84]	@ (800900c <vTaskStartScheduler+0xd0>)
 8008fb8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008fba:	4b15      	ldr	r3, [pc, #84]	@ (8009010 <vTaskStartScheduler+0xd4>)
 8008fbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008fc0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008fc2:	4b14      	ldr	r3, [pc, #80]	@ (8009014 <vTaskStartScheduler+0xd8>)
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008fc8:	4b13      	ldr	r3, [pc, #76]	@ (8009018 <vTaskStartScheduler+0xdc>)
 8008fca:	2200      	movs	r2, #0
 8008fcc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008fce:	f001 f8df 	bl	800a190 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008fd2:	e00f      	b.n	8008ff4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008fda:	d10b      	bne.n	8008ff4 <vTaskStartScheduler+0xb8>
	__asm volatile
 8008fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fe0:	f383 8811 	msr	BASEPRI, r3
 8008fe4:	f3bf 8f6f 	isb	sy
 8008fe8:	f3bf 8f4f 	dsb	sy
 8008fec:	60fb      	str	r3, [r7, #12]
}
 8008fee:	bf00      	nop
 8008ff0:	bf00      	nop
 8008ff2:	e7fd      	b.n	8008ff0 <vTaskStartScheduler+0xb4>
}
 8008ff4:	bf00      	nop
 8008ff6:	3718      	adds	r7, #24
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}
 8008ffc:	0800ab28 	.word	0x0800ab28
 8009000:	0800964d 	.word	0x0800964d
 8009004:	20000f80 	.word	0x20000f80
 8009008:	20000a88 	.word	0x20000a88
 800900c:	20000010 	.word	0x20000010
 8009010:	20000f7c 	.word	0x20000f7c
 8009014:	20000f68 	.word	0x20000f68
 8009018:	20000f60 	.word	0x20000f60

0800901c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800901c:	b480      	push	{r7}
 800901e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009020:	4b04      	ldr	r3, [pc, #16]	@ (8009034 <vTaskSuspendAll+0x18>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	3301      	adds	r3, #1
 8009026:	4a03      	ldr	r2, [pc, #12]	@ (8009034 <vTaskSuspendAll+0x18>)
 8009028:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800902a:	bf00      	nop
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr
 8009034:	20000f84 	.word	0x20000f84

08009038 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b084      	sub	sp, #16
 800903c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800903e:	2300      	movs	r3, #0
 8009040:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009042:	2300      	movs	r3, #0
 8009044:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009046:	4b42      	ldr	r3, [pc, #264]	@ (8009150 <xTaskResumeAll+0x118>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d10b      	bne.n	8009066 <xTaskResumeAll+0x2e>
	__asm volatile
 800904e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009052:	f383 8811 	msr	BASEPRI, r3
 8009056:	f3bf 8f6f 	isb	sy
 800905a:	f3bf 8f4f 	dsb	sy
 800905e:	603b      	str	r3, [r7, #0]
}
 8009060:	bf00      	nop
 8009062:	bf00      	nop
 8009064:	e7fd      	b.n	8009062 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009066:	f001 f937 	bl	800a2d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800906a:	4b39      	ldr	r3, [pc, #228]	@ (8009150 <xTaskResumeAll+0x118>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	3b01      	subs	r3, #1
 8009070:	4a37      	ldr	r2, [pc, #220]	@ (8009150 <xTaskResumeAll+0x118>)
 8009072:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009074:	4b36      	ldr	r3, [pc, #216]	@ (8009150 <xTaskResumeAll+0x118>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d162      	bne.n	8009142 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800907c:	4b35      	ldr	r3, [pc, #212]	@ (8009154 <xTaskResumeAll+0x11c>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d05e      	beq.n	8009142 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009084:	e02f      	b.n	80090e6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009086:	4b34      	ldr	r3, [pc, #208]	@ (8009158 <xTaskResumeAll+0x120>)
 8009088:	68db      	ldr	r3, [r3, #12]
 800908a:	68db      	ldr	r3, [r3, #12]
 800908c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	3318      	adds	r3, #24
 8009092:	4618      	mov	r0, r3
 8009094:	f7fe ff42 	bl	8007f1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	3304      	adds	r3, #4
 800909c:	4618      	mov	r0, r3
 800909e:	f7fe ff3d 	bl	8007f1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090a6:	4b2d      	ldr	r3, [pc, #180]	@ (800915c <xTaskResumeAll+0x124>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d903      	bls.n	80090b6 <xTaskResumeAll+0x7e>
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090b2:	4a2a      	ldr	r2, [pc, #168]	@ (800915c <xTaskResumeAll+0x124>)
 80090b4:	6013      	str	r3, [r2, #0]
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090ba:	4613      	mov	r3, r2
 80090bc:	009b      	lsls	r3, r3, #2
 80090be:	4413      	add	r3, r2
 80090c0:	009b      	lsls	r3, r3, #2
 80090c2:	4a27      	ldr	r2, [pc, #156]	@ (8009160 <xTaskResumeAll+0x128>)
 80090c4:	441a      	add	r2, r3
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	3304      	adds	r3, #4
 80090ca:	4619      	mov	r1, r3
 80090cc:	4610      	mov	r0, r2
 80090ce:	f7fe fec8 	bl	8007e62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090d6:	4b23      	ldr	r3, [pc, #140]	@ (8009164 <xTaskResumeAll+0x12c>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090dc:	429a      	cmp	r2, r3
 80090de:	d302      	bcc.n	80090e6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80090e0:	4b21      	ldr	r3, [pc, #132]	@ (8009168 <xTaskResumeAll+0x130>)
 80090e2:	2201      	movs	r2, #1
 80090e4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80090e6:	4b1c      	ldr	r3, [pc, #112]	@ (8009158 <xTaskResumeAll+0x120>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d1cb      	bne.n	8009086 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d001      	beq.n	80090f8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80090f4:	f000 fb66 	bl	80097c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80090f8:	4b1c      	ldr	r3, [pc, #112]	@ (800916c <xTaskResumeAll+0x134>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d010      	beq.n	8009126 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009104:	f000 f846 	bl	8009194 <xTaskIncrementTick>
 8009108:	4603      	mov	r3, r0
 800910a:	2b00      	cmp	r3, #0
 800910c:	d002      	beq.n	8009114 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800910e:	4b16      	ldr	r3, [pc, #88]	@ (8009168 <xTaskResumeAll+0x130>)
 8009110:	2201      	movs	r2, #1
 8009112:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	3b01      	subs	r3, #1
 8009118:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d1f1      	bne.n	8009104 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009120:	4b12      	ldr	r3, [pc, #72]	@ (800916c <xTaskResumeAll+0x134>)
 8009122:	2200      	movs	r2, #0
 8009124:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009126:	4b10      	ldr	r3, [pc, #64]	@ (8009168 <xTaskResumeAll+0x130>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d009      	beq.n	8009142 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800912e:	2301      	movs	r3, #1
 8009130:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009132:	4b0f      	ldr	r3, [pc, #60]	@ (8009170 <xTaskResumeAll+0x138>)
 8009134:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009138:	601a      	str	r2, [r3, #0]
 800913a:	f3bf 8f4f 	dsb	sy
 800913e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009142:	f001 f8fb 	bl	800a33c <vPortExitCritical>

	return xAlreadyYielded;
 8009146:	68bb      	ldr	r3, [r7, #8]
}
 8009148:	4618      	mov	r0, r3
 800914a:	3710      	adds	r7, #16
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}
 8009150:	20000f84 	.word	0x20000f84
 8009154:	20000f5c 	.word	0x20000f5c
 8009158:	20000f1c 	.word	0x20000f1c
 800915c:	20000f64 	.word	0x20000f64
 8009160:	20000a8c 	.word	0x20000a8c
 8009164:	20000a88 	.word	0x20000a88
 8009168:	20000f70 	.word	0x20000f70
 800916c:	20000f6c 	.word	0x20000f6c
 8009170:	e000ed04 	.word	0xe000ed04

08009174 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009174:	b480      	push	{r7}
 8009176:	b083      	sub	sp, #12
 8009178:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800917a:	4b05      	ldr	r3, [pc, #20]	@ (8009190 <xTaskGetTickCount+0x1c>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009180:	687b      	ldr	r3, [r7, #4]
}
 8009182:	4618      	mov	r0, r3
 8009184:	370c      	adds	r7, #12
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr
 800918e:	bf00      	nop
 8009190:	20000f60 	.word	0x20000f60

08009194 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b086      	sub	sp, #24
 8009198:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800919a:	2300      	movs	r3, #0
 800919c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800919e:	4b4f      	ldr	r3, [pc, #316]	@ (80092dc <xTaskIncrementTick+0x148>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	f040 8090 	bne.w	80092c8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80091a8:	4b4d      	ldr	r3, [pc, #308]	@ (80092e0 <xTaskIncrementTick+0x14c>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	3301      	adds	r3, #1
 80091ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80091b0:	4a4b      	ldr	r2, [pc, #300]	@ (80092e0 <xTaskIncrementTick+0x14c>)
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d121      	bne.n	8009200 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80091bc:	4b49      	ldr	r3, [pc, #292]	@ (80092e4 <xTaskIncrementTick+0x150>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d00b      	beq.n	80091de <xTaskIncrementTick+0x4a>
	__asm volatile
 80091c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ca:	f383 8811 	msr	BASEPRI, r3
 80091ce:	f3bf 8f6f 	isb	sy
 80091d2:	f3bf 8f4f 	dsb	sy
 80091d6:	603b      	str	r3, [r7, #0]
}
 80091d8:	bf00      	nop
 80091da:	bf00      	nop
 80091dc:	e7fd      	b.n	80091da <xTaskIncrementTick+0x46>
 80091de:	4b41      	ldr	r3, [pc, #260]	@ (80092e4 <xTaskIncrementTick+0x150>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	60fb      	str	r3, [r7, #12]
 80091e4:	4b40      	ldr	r3, [pc, #256]	@ (80092e8 <xTaskIncrementTick+0x154>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a3e      	ldr	r2, [pc, #248]	@ (80092e4 <xTaskIncrementTick+0x150>)
 80091ea:	6013      	str	r3, [r2, #0]
 80091ec:	4a3e      	ldr	r2, [pc, #248]	@ (80092e8 <xTaskIncrementTick+0x154>)
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	6013      	str	r3, [r2, #0]
 80091f2:	4b3e      	ldr	r3, [pc, #248]	@ (80092ec <xTaskIncrementTick+0x158>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	3301      	adds	r3, #1
 80091f8:	4a3c      	ldr	r2, [pc, #240]	@ (80092ec <xTaskIncrementTick+0x158>)
 80091fa:	6013      	str	r3, [r2, #0]
 80091fc:	f000 fae2 	bl	80097c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009200:	4b3b      	ldr	r3, [pc, #236]	@ (80092f0 <xTaskIncrementTick+0x15c>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	693a      	ldr	r2, [r7, #16]
 8009206:	429a      	cmp	r2, r3
 8009208:	d349      	bcc.n	800929e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800920a:	4b36      	ldr	r3, [pc, #216]	@ (80092e4 <xTaskIncrementTick+0x150>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d104      	bne.n	800921e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009214:	4b36      	ldr	r3, [pc, #216]	@ (80092f0 <xTaskIncrementTick+0x15c>)
 8009216:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800921a:	601a      	str	r2, [r3, #0]
					break;
 800921c:	e03f      	b.n	800929e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800921e:	4b31      	ldr	r3, [pc, #196]	@ (80092e4 <xTaskIncrementTick+0x150>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	68db      	ldr	r3, [r3, #12]
 8009224:	68db      	ldr	r3, [r3, #12]
 8009226:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800922e:	693a      	ldr	r2, [r7, #16]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	429a      	cmp	r2, r3
 8009234:	d203      	bcs.n	800923e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009236:	4a2e      	ldr	r2, [pc, #184]	@ (80092f0 <xTaskIncrementTick+0x15c>)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800923c:	e02f      	b.n	800929e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	3304      	adds	r3, #4
 8009242:	4618      	mov	r0, r3
 8009244:	f7fe fe6a 	bl	8007f1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800924c:	2b00      	cmp	r3, #0
 800924e:	d004      	beq.n	800925a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	3318      	adds	r3, #24
 8009254:	4618      	mov	r0, r3
 8009256:	f7fe fe61 	bl	8007f1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800925e:	4b25      	ldr	r3, [pc, #148]	@ (80092f4 <xTaskIncrementTick+0x160>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	429a      	cmp	r2, r3
 8009264:	d903      	bls.n	800926e <xTaskIncrementTick+0xda>
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800926a:	4a22      	ldr	r2, [pc, #136]	@ (80092f4 <xTaskIncrementTick+0x160>)
 800926c:	6013      	str	r3, [r2, #0]
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009272:	4613      	mov	r3, r2
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	4413      	add	r3, r2
 8009278:	009b      	lsls	r3, r3, #2
 800927a:	4a1f      	ldr	r2, [pc, #124]	@ (80092f8 <xTaskIncrementTick+0x164>)
 800927c:	441a      	add	r2, r3
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	3304      	adds	r3, #4
 8009282:	4619      	mov	r1, r3
 8009284:	4610      	mov	r0, r2
 8009286:	f7fe fdec 	bl	8007e62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800928e:	4b1b      	ldr	r3, [pc, #108]	@ (80092fc <xTaskIncrementTick+0x168>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009294:	429a      	cmp	r2, r3
 8009296:	d3b8      	bcc.n	800920a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009298:	2301      	movs	r3, #1
 800929a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800929c:	e7b5      	b.n	800920a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800929e:	4b17      	ldr	r3, [pc, #92]	@ (80092fc <xTaskIncrementTick+0x168>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092a4:	4914      	ldr	r1, [pc, #80]	@ (80092f8 <xTaskIncrementTick+0x164>)
 80092a6:	4613      	mov	r3, r2
 80092a8:	009b      	lsls	r3, r3, #2
 80092aa:	4413      	add	r3, r2
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	440b      	add	r3, r1
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	d901      	bls.n	80092ba <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80092b6:	2301      	movs	r3, #1
 80092b8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80092ba:	4b11      	ldr	r3, [pc, #68]	@ (8009300 <xTaskIncrementTick+0x16c>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d007      	beq.n	80092d2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80092c2:	2301      	movs	r3, #1
 80092c4:	617b      	str	r3, [r7, #20]
 80092c6:	e004      	b.n	80092d2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80092c8:	4b0e      	ldr	r3, [pc, #56]	@ (8009304 <xTaskIncrementTick+0x170>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	3301      	adds	r3, #1
 80092ce:	4a0d      	ldr	r2, [pc, #52]	@ (8009304 <xTaskIncrementTick+0x170>)
 80092d0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80092d2:	697b      	ldr	r3, [r7, #20]
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3718      	adds	r7, #24
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}
 80092dc:	20000f84 	.word	0x20000f84
 80092e0:	20000f60 	.word	0x20000f60
 80092e4:	20000f14 	.word	0x20000f14
 80092e8:	20000f18 	.word	0x20000f18
 80092ec:	20000f74 	.word	0x20000f74
 80092f0:	20000f7c 	.word	0x20000f7c
 80092f4:	20000f64 	.word	0x20000f64
 80092f8:	20000a8c 	.word	0x20000a8c
 80092fc:	20000a88 	.word	0x20000a88
 8009300:	20000f70 	.word	0x20000f70
 8009304:	20000f6c 	.word	0x20000f6c

08009308 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009308:	b480      	push	{r7}
 800930a:	b085      	sub	sp, #20
 800930c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800930e:	4b2b      	ldr	r3, [pc, #172]	@ (80093bc <vTaskSwitchContext+0xb4>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d003      	beq.n	800931e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009316:	4b2a      	ldr	r3, [pc, #168]	@ (80093c0 <vTaskSwitchContext+0xb8>)
 8009318:	2201      	movs	r2, #1
 800931a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800931c:	e047      	b.n	80093ae <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800931e:	4b28      	ldr	r3, [pc, #160]	@ (80093c0 <vTaskSwitchContext+0xb8>)
 8009320:	2200      	movs	r2, #0
 8009322:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009324:	4b27      	ldr	r3, [pc, #156]	@ (80093c4 <vTaskSwitchContext+0xbc>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	60fb      	str	r3, [r7, #12]
 800932a:	e011      	b.n	8009350 <vTaskSwitchContext+0x48>
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d10b      	bne.n	800934a <vTaskSwitchContext+0x42>
	__asm volatile
 8009332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009336:	f383 8811 	msr	BASEPRI, r3
 800933a:	f3bf 8f6f 	isb	sy
 800933e:	f3bf 8f4f 	dsb	sy
 8009342:	607b      	str	r3, [r7, #4]
}
 8009344:	bf00      	nop
 8009346:	bf00      	nop
 8009348:	e7fd      	b.n	8009346 <vTaskSwitchContext+0x3e>
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	3b01      	subs	r3, #1
 800934e:	60fb      	str	r3, [r7, #12]
 8009350:	491d      	ldr	r1, [pc, #116]	@ (80093c8 <vTaskSwitchContext+0xc0>)
 8009352:	68fa      	ldr	r2, [r7, #12]
 8009354:	4613      	mov	r3, r2
 8009356:	009b      	lsls	r3, r3, #2
 8009358:	4413      	add	r3, r2
 800935a:	009b      	lsls	r3, r3, #2
 800935c:	440b      	add	r3, r1
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d0e3      	beq.n	800932c <vTaskSwitchContext+0x24>
 8009364:	68fa      	ldr	r2, [r7, #12]
 8009366:	4613      	mov	r3, r2
 8009368:	009b      	lsls	r3, r3, #2
 800936a:	4413      	add	r3, r2
 800936c:	009b      	lsls	r3, r3, #2
 800936e:	4a16      	ldr	r2, [pc, #88]	@ (80093c8 <vTaskSwitchContext+0xc0>)
 8009370:	4413      	add	r3, r2
 8009372:	60bb      	str	r3, [r7, #8]
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	685a      	ldr	r2, [r3, #4]
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	605a      	str	r2, [r3, #4]
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	685a      	ldr	r2, [r3, #4]
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	3308      	adds	r3, #8
 8009386:	429a      	cmp	r2, r3
 8009388:	d104      	bne.n	8009394 <vTaskSwitchContext+0x8c>
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	685a      	ldr	r2, [r3, #4]
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	605a      	str	r2, [r3, #4]
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	68db      	ldr	r3, [r3, #12]
 800939a:	4a0c      	ldr	r2, [pc, #48]	@ (80093cc <vTaskSwitchContext+0xc4>)
 800939c:	6013      	str	r3, [r2, #0]
 800939e:	4a09      	ldr	r2, [pc, #36]	@ (80093c4 <vTaskSwitchContext+0xbc>)
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80093a4:	4b09      	ldr	r3, [pc, #36]	@ (80093cc <vTaskSwitchContext+0xc4>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	3354      	adds	r3, #84	@ 0x54
 80093aa:	4a09      	ldr	r2, [pc, #36]	@ (80093d0 <vTaskSwitchContext+0xc8>)
 80093ac:	6013      	str	r3, [r2, #0]
}
 80093ae:	bf00      	nop
 80093b0:	3714      	adds	r7, #20
 80093b2:	46bd      	mov	sp, r7
 80093b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b8:	4770      	bx	lr
 80093ba:	bf00      	nop
 80093bc:	20000f84 	.word	0x20000f84
 80093c0:	20000f70 	.word	0x20000f70
 80093c4:	20000f64 	.word	0x20000f64
 80093c8:	20000a8c 	.word	0x20000a8c
 80093cc:	20000a88 	.word	0x20000a88
 80093d0:	20000010 	.word	0x20000010

080093d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b084      	sub	sp, #16
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
 80093dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d10b      	bne.n	80093fc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80093e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093e8:	f383 8811 	msr	BASEPRI, r3
 80093ec:	f3bf 8f6f 	isb	sy
 80093f0:	f3bf 8f4f 	dsb	sy
 80093f4:	60fb      	str	r3, [r7, #12]
}
 80093f6:	bf00      	nop
 80093f8:	bf00      	nop
 80093fa:	e7fd      	b.n	80093f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80093fc:	4b07      	ldr	r3, [pc, #28]	@ (800941c <vTaskPlaceOnEventList+0x48>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	3318      	adds	r3, #24
 8009402:	4619      	mov	r1, r3
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f7fe fd50 	bl	8007eaa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800940a:	2101      	movs	r1, #1
 800940c:	6838      	ldr	r0, [r7, #0]
 800940e:	f000 fa87 	bl	8009920 <prvAddCurrentTaskToDelayedList>
}
 8009412:	bf00      	nop
 8009414:	3710      	adds	r7, #16
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
 800941a:	bf00      	nop
 800941c:	20000a88 	.word	0x20000a88

08009420 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009420:	b580      	push	{r7, lr}
 8009422:	b086      	sub	sp, #24
 8009424:	af00      	add	r7, sp, #0
 8009426:	60f8      	str	r0, [r7, #12]
 8009428:	60b9      	str	r1, [r7, #8]
 800942a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d10b      	bne.n	800944a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009436:	f383 8811 	msr	BASEPRI, r3
 800943a:	f3bf 8f6f 	isb	sy
 800943e:	f3bf 8f4f 	dsb	sy
 8009442:	617b      	str	r3, [r7, #20]
}
 8009444:	bf00      	nop
 8009446:	bf00      	nop
 8009448:	e7fd      	b.n	8009446 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800944a:	4b0a      	ldr	r3, [pc, #40]	@ (8009474 <vTaskPlaceOnEventListRestricted+0x54>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	3318      	adds	r3, #24
 8009450:	4619      	mov	r1, r3
 8009452:	68f8      	ldr	r0, [r7, #12]
 8009454:	f7fe fd05 	bl	8007e62 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d002      	beq.n	8009464 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800945e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009462:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009464:	6879      	ldr	r1, [r7, #4]
 8009466:	68b8      	ldr	r0, [r7, #8]
 8009468:	f000 fa5a 	bl	8009920 <prvAddCurrentTaskToDelayedList>
	}
 800946c:	bf00      	nop
 800946e:	3718      	adds	r7, #24
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}
 8009474:	20000a88 	.word	0x20000a88

08009478 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b086      	sub	sp, #24
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	68db      	ldr	r3, [r3, #12]
 8009484:	68db      	ldr	r3, [r3, #12]
 8009486:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d10b      	bne.n	80094a6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800948e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009492:	f383 8811 	msr	BASEPRI, r3
 8009496:	f3bf 8f6f 	isb	sy
 800949a:	f3bf 8f4f 	dsb	sy
 800949e:	60fb      	str	r3, [r7, #12]
}
 80094a0:	bf00      	nop
 80094a2:	bf00      	nop
 80094a4:	e7fd      	b.n	80094a2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	3318      	adds	r3, #24
 80094aa:	4618      	mov	r0, r3
 80094ac:	f7fe fd36 	bl	8007f1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094b0:	4b1d      	ldr	r3, [pc, #116]	@ (8009528 <xTaskRemoveFromEventList+0xb0>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d11d      	bne.n	80094f4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	3304      	adds	r3, #4
 80094bc:	4618      	mov	r0, r3
 80094be:	f7fe fd2d 	bl	8007f1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094c6:	4b19      	ldr	r3, [pc, #100]	@ (800952c <xTaskRemoveFromEventList+0xb4>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d903      	bls.n	80094d6 <xTaskRemoveFromEventList+0x5e>
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094d2:	4a16      	ldr	r2, [pc, #88]	@ (800952c <xTaskRemoveFromEventList+0xb4>)
 80094d4:	6013      	str	r3, [r2, #0]
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094da:	4613      	mov	r3, r2
 80094dc:	009b      	lsls	r3, r3, #2
 80094de:	4413      	add	r3, r2
 80094e0:	009b      	lsls	r3, r3, #2
 80094e2:	4a13      	ldr	r2, [pc, #76]	@ (8009530 <xTaskRemoveFromEventList+0xb8>)
 80094e4:	441a      	add	r2, r3
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	3304      	adds	r3, #4
 80094ea:	4619      	mov	r1, r3
 80094ec:	4610      	mov	r0, r2
 80094ee:	f7fe fcb8 	bl	8007e62 <vListInsertEnd>
 80094f2:	e005      	b.n	8009500 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	3318      	adds	r3, #24
 80094f8:	4619      	mov	r1, r3
 80094fa:	480e      	ldr	r0, [pc, #56]	@ (8009534 <xTaskRemoveFromEventList+0xbc>)
 80094fc:	f7fe fcb1 	bl	8007e62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009504:	4b0c      	ldr	r3, [pc, #48]	@ (8009538 <xTaskRemoveFromEventList+0xc0>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800950a:	429a      	cmp	r2, r3
 800950c:	d905      	bls.n	800951a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800950e:	2301      	movs	r3, #1
 8009510:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009512:	4b0a      	ldr	r3, [pc, #40]	@ (800953c <xTaskRemoveFromEventList+0xc4>)
 8009514:	2201      	movs	r2, #1
 8009516:	601a      	str	r2, [r3, #0]
 8009518:	e001      	b.n	800951e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800951a:	2300      	movs	r3, #0
 800951c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800951e:	697b      	ldr	r3, [r7, #20]
}
 8009520:	4618      	mov	r0, r3
 8009522:	3718      	adds	r7, #24
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}
 8009528:	20000f84 	.word	0x20000f84
 800952c:	20000f64 	.word	0x20000f64
 8009530:	20000a8c 	.word	0x20000a8c
 8009534:	20000f1c 	.word	0x20000f1c
 8009538:	20000a88 	.word	0x20000a88
 800953c:	20000f70 	.word	0x20000f70

08009540 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009540:	b480      	push	{r7}
 8009542:	b083      	sub	sp, #12
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009548:	4b06      	ldr	r3, [pc, #24]	@ (8009564 <vTaskInternalSetTimeOutState+0x24>)
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009550:	4b05      	ldr	r3, [pc, #20]	@ (8009568 <vTaskInternalSetTimeOutState+0x28>)
 8009552:	681a      	ldr	r2, [r3, #0]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	605a      	str	r2, [r3, #4]
}
 8009558:	bf00      	nop
 800955a:	370c      	adds	r7, #12
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr
 8009564:	20000f74 	.word	0x20000f74
 8009568:	20000f60 	.word	0x20000f60

0800956c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b088      	sub	sp, #32
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d10b      	bne.n	8009594 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800957c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009580:	f383 8811 	msr	BASEPRI, r3
 8009584:	f3bf 8f6f 	isb	sy
 8009588:	f3bf 8f4f 	dsb	sy
 800958c:	613b      	str	r3, [r7, #16]
}
 800958e:	bf00      	nop
 8009590:	bf00      	nop
 8009592:	e7fd      	b.n	8009590 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d10b      	bne.n	80095b2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800959a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800959e:	f383 8811 	msr	BASEPRI, r3
 80095a2:	f3bf 8f6f 	isb	sy
 80095a6:	f3bf 8f4f 	dsb	sy
 80095aa:	60fb      	str	r3, [r7, #12]
}
 80095ac:	bf00      	nop
 80095ae:	bf00      	nop
 80095b0:	e7fd      	b.n	80095ae <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80095b2:	f000 fe91 	bl	800a2d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80095b6:	4b1d      	ldr	r3, [pc, #116]	@ (800962c <xTaskCheckForTimeOut+0xc0>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	69ba      	ldr	r2, [r7, #24]
 80095c2:	1ad3      	subs	r3, r2, r3
 80095c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80095ce:	d102      	bne.n	80095d6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80095d0:	2300      	movs	r3, #0
 80095d2:	61fb      	str	r3, [r7, #28]
 80095d4:	e023      	b.n	800961e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681a      	ldr	r2, [r3, #0]
 80095da:	4b15      	ldr	r3, [pc, #84]	@ (8009630 <xTaskCheckForTimeOut+0xc4>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	429a      	cmp	r2, r3
 80095e0:	d007      	beq.n	80095f2 <xTaskCheckForTimeOut+0x86>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	685b      	ldr	r3, [r3, #4]
 80095e6:	69ba      	ldr	r2, [r7, #24]
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d302      	bcc.n	80095f2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80095ec:	2301      	movs	r3, #1
 80095ee:	61fb      	str	r3, [r7, #28]
 80095f0:	e015      	b.n	800961e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	697a      	ldr	r2, [r7, #20]
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d20b      	bcs.n	8009614 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	681a      	ldr	r2, [r3, #0]
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	1ad2      	subs	r2, r2, r3
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f7ff ff99 	bl	8009540 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800960e:	2300      	movs	r3, #0
 8009610:	61fb      	str	r3, [r7, #28]
 8009612:	e004      	b.n	800961e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	2200      	movs	r2, #0
 8009618:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800961a:	2301      	movs	r3, #1
 800961c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800961e:	f000 fe8d 	bl	800a33c <vPortExitCritical>

	return xReturn;
 8009622:	69fb      	ldr	r3, [r7, #28]
}
 8009624:	4618      	mov	r0, r3
 8009626:	3720      	adds	r7, #32
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}
 800962c:	20000f60 	.word	0x20000f60
 8009630:	20000f74 	.word	0x20000f74

08009634 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009634:	b480      	push	{r7}
 8009636:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009638:	4b03      	ldr	r3, [pc, #12]	@ (8009648 <vTaskMissedYield+0x14>)
 800963a:	2201      	movs	r2, #1
 800963c:	601a      	str	r2, [r3, #0]
}
 800963e:	bf00      	nop
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	4770      	bx	lr
 8009648:	20000f70 	.word	0x20000f70

0800964c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009654:	f000 f852 	bl	80096fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009658:	4b06      	ldr	r3, [pc, #24]	@ (8009674 <prvIdleTask+0x28>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	2b01      	cmp	r3, #1
 800965e:	d9f9      	bls.n	8009654 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009660:	4b05      	ldr	r3, [pc, #20]	@ (8009678 <prvIdleTask+0x2c>)
 8009662:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009666:	601a      	str	r2, [r3, #0]
 8009668:	f3bf 8f4f 	dsb	sy
 800966c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009670:	e7f0      	b.n	8009654 <prvIdleTask+0x8>
 8009672:	bf00      	nop
 8009674:	20000a8c 	.word	0x20000a8c
 8009678:	e000ed04 	.word	0xe000ed04

0800967c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009682:	2300      	movs	r3, #0
 8009684:	607b      	str	r3, [r7, #4]
 8009686:	e00c      	b.n	80096a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009688:	687a      	ldr	r2, [r7, #4]
 800968a:	4613      	mov	r3, r2
 800968c:	009b      	lsls	r3, r3, #2
 800968e:	4413      	add	r3, r2
 8009690:	009b      	lsls	r3, r3, #2
 8009692:	4a12      	ldr	r2, [pc, #72]	@ (80096dc <prvInitialiseTaskLists+0x60>)
 8009694:	4413      	add	r3, r2
 8009696:	4618      	mov	r0, r3
 8009698:	f7fe fbb6 	bl	8007e08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	3301      	adds	r3, #1
 80096a0:	607b      	str	r3, [r7, #4]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2b37      	cmp	r3, #55	@ 0x37
 80096a6:	d9ef      	bls.n	8009688 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80096a8:	480d      	ldr	r0, [pc, #52]	@ (80096e0 <prvInitialiseTaskLists+0x64>)
 80096aa:	f7fe fbad 	bl	8007e08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80096ae:	480d      	ldr	r0, [pc, #52]	@ (80096e4 <prvInitialiseTaskLists+0x68>)
 80096b0:	f7fe fbaa 	bl	8007e08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80096b4:	480c      	ldr	r0, [pc, #48]	@ (80096e8 <prvInitialiseTaskLists+0x6c>)
 80096b6:	f7fe fba7 	bl	8007e08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80096ba:	480c      	ldr	r0, [pc, #48]	@ (80096ec <prvInitialiseTaskLists+0x70>)
 80096bc:	f7fe fba4 	bl	8007e08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80096c0:	480b      	ldr	r0, [pc, #44]	@ (80096f0 <prvInitialiseTaskLists+0x74>)
 80096c2:	f7fe fba1 	bl	8007e08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80096c6:	4b0b      	ldr	r3, [pc, #44]	@ (80096f4 <prvInitialiseTaskLists+0x78>)
 80096c8:	4a05      	ldr	r2, [pc, #20]	@ (80096e0 <prvInitialiseTaskLists+0x64>)
 80096ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80096cc:	4b0a      	ldr	r3, [pc, #40]	@ (80096f8 <prvInitialiseTaskLists+0x7c>)
 80096ce:	4a05      	ldr	r2, [pc, #20]	@ (80096e4 <prvInitialiseTaskLists+0x68>)
 80096d0:	601a      	str	r2, [r3, #0]
}
 80096d2:	bf00      	nop
 80096d4:	3708      	adds	r7, #8
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	20000a8c 	.word	0x20000a8c
 80096e0:	20000eec 	.word	0x20000eec
 80096e4:	20000f00 	.word	0x20000f00
 80096e8:	20000f1c 	.word	0x20000f1c
 80096ec:	20000f30 	.word	0x20000f30
 80096f0:	20000f48 	.word	0x20000f48
 80096f4:	20000f14 	.word	0x20000f14
 80096f8:	20000f18 	.word	0x20000f18

080096fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009702:	e019      	b.n	8009738 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009704:	f000 fde8 	bl	800a2d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009708:	4b10      	ldr	r3, [pc, #64]	@ (800974c <prvCheckTasksWaitingTermination+0x50>)
 800970a:	68db      	ldr	r3, [r3, #12]
 800970c:	68db      	ldr	r3, [r3, #12]
 800970e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	3304      	adds	r3, #4
 8009714:	4618      	mov	r0, r3
 8009716:	f7fe fc01 	bl	8007f1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800971a:	4b0d      	ldr	r3, [pc, #52]	@ (8009750 <prvCheckTasksWaitingTermination+0x54>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	3b01      	subs	r3, #1
 8009720:	4a0b      	ldr	r2, [pc, #44]	@ (8009750 <prvCheckTasksWaitingTermination+0x54>)
 8009722:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009724:	4b0b      	ldr	r3, [pc, #44]	@ (8009754 <prvCheckTasksWaitingTermination+0x58>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	3b01      	subs	r3, #1
 800972a:	4a0a      	ldr	r2, [pc, #40]	@ (8009754 <prvCheckTasksWaitingTermination+0x58>)
 800972c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800972e:	f000 fe05 	bl	800a33c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 f810 	bl	8009758 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009738:	4b06      	ldr	r3, [pc, #24]	@ (8009754 <prvCheckTasksWaitingTermination+0x58>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d1e1      	bne.n	8009704 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009740:	bf00      	nop
 8009742:	bf00      	nop
 8009744:	3708      	adds	r7, #8
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
 800974a:	bf00      	nop
 800974c:	20000f30 	.word	0x20000f30
 8009750:	20000f5c 	.word	0x20000f5c
 8009754:	20000f44 	.word	0x20000f44

08009758 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	3354      	adds	r3, #84	@ 0x54
 8009764:	4618      	mov	r0, r3
 8009766:	f001 f8db 	bl	800a920 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009770:	2b00      	cmp	r3, #0
 8009772:	d108      	bne.n	8009786 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009778:	4618      	mov	r0, r3
 800977a:	f000 ff9d 	bl	800a6b8 <vPortFree>
				vPortFree( pxTCB );
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f000 ff9a 	bl	800a6b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009784:	e019      	b.n	80097ba <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800978c:	2b01      	cmp	r3, #1
 800978e:	d103      	bne.n	8009798 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f000 ff91 	bl	800a6b8 <vPortFree>
	}
 8009796:	e010      	b.n	80097ba <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800979e:	2b02      	cmp	r3, #2
 80097a0:	d00b      	beq.n	80097ba <prvDeleteTCB+0x62>
	__asm volatile
 80097a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097a6:	f383 8811 	msr	BASEPRI, r3
 80097aa:	f3bf 8f6f 	isb	sy
 80097ae:	f3bf 8f4f 	dsb	sy
 80097b2:	60fb      	str	r3, [r7, #12]
}
 80097b4:	bf00      	nop
 80097b6:	bf00      	nop
 80097b8:	e7fd      	b.n	80097b6 <prvDeleteTCB+0x5e>
	}
 80097ba:	bf00      	nop
 80097bc:	3710      	adds	r7, #16
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}
	...

080097c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80097c4:	b480      	push	{r7}
 80097c6:	b083      	sub	sp, #12
 80097c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097ca:	4b0c      	ldr	r3, [pc, #48]	@ (80097fc <prvResetNextTaskUnblockTime+0x38>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d104      	bne.n	80097de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80097d4:	4b0a      	ldr	r3, [pc, #40]	@ (8009800 <prvResetNextTaskUnblockTime+0x3c>)
 80097d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80097da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80097dc:	e008      	b.n	80097f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097de:	4b07      	ldr	r3, [pc, #28]	@ (80097fc <prvResetNextTaskUnblockTime+0x38>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	68db      	ldr	r3, [r3, #12]
 80097e4:	68db      	ldr	r3, [r3, #12]
 80097e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	685b      	ldr	r3, [r3, #4]
 80097ec:	4a04      	ldr	r2, [pc, #16]	@ (8009800 <prvResetNextTaskUnblockTime+0x3c>)
 80097ee:	6013      	str	r3, [r2, #0]
}
 80097f0:	bf00      	nop
 80097f2:	370c      	adds	r7, #12
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr
 80097fc:	20000f14 	.word	0x20000f14
 8009800:	20000f7c 	.word	0x20000f7c

08009804 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009804:	b480      	push	{r7}
 8009806:	b083      	sub	sp, #12
 8009808:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800980a:	4b0b      	ldr	r3, [pc, #44]	@ (8009838 <xTaskGetSchedulerState+0x34>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d102      	bne.n	8009818 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009812:	2301      	movs	r3, #1
 8009814:	607b      	str	r3, [r7, #4]
 8009816:	e008      	b.n	800982a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009818:	4b08      	ldr	r3, [pc, #32]	@ (800983c <xTaskGetSchedulerState+0x38>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d102      	bne.n	8009826 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009820:	2302      	movs	r3, #2
 8009822:	607b      	str	r3, [r7, #4]
 8009824:	e001      	b.n	800982a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009826:	2300      	movs	r3, #0
 8009828:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800982a:	687b      	ldr	r3, [r7, #4]
	}
 800982c:	4618      	mov	r0, r3
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr
 8009838:	20000f68 	.word	0x20000f68
 800983c:	20000f84 	.word	0x20000f84

08009840 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009840:	b580      	push	{r7, lr}
 8009842:	b086      	sub	sp, #24
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800984c:	2300      	movs	r3, #0
 800984e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d058      	beq.n	8009908 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009856:	4b2f      	ldr	r3, [pc, #188]	@ (8009914 <xTaskPriorityDisinherit+0xd4>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	693a      	ldr	r2, [r7, #16]
 800985c:	429a      	cmp	r2, r3
 800985e:	d00b      	beq.n	8009878 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009864:	f383 8811 	msr	BASEPRI, r3
 8009868:	f3bf 8f6f 	isb	sy
 800986c:	f3bf 8f4f 	dsb	sy
 8009870:	60fb      	str	r3, [r7, #12]
}
 8009872:	bf00      	nop
 8009874:	bf00      	nop
 8009876:	e7fd      	b.n	8009874 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800987c:	2b00      	cmp	r3, #0
 800987e:	d10b      	bne.n	8009898 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009884:	f383 8811 	msr	BASEPRI, r3
 8009888:	f3bf 8f6f 	isb	sy
 800988c:	f3bf 8f4f 	dsb	sy
 8009890:	60bb      	str	r3, [r7, #8]
}
 8009892:	bf00      	nop
 8009894:	bf00      	nop
 8009896:	e7fd      	b.n	8009894 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800989c:	1e5a      	subs	r2, r3, #1
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098aa:	429a      	cmp	r2, r3
 80098ac:	d02c      	beq.n	8009908 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d128      	bne.n	8009908 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	3304      	adds	r3, #4
 80098ba:	4618      	mov	r0, r3
 80098bc:	f7fe fb2e 	bl	8007f1c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098cc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098d8:	4b0f      	ldr	r3, [pc, #60]	@ (8009918 <xTaskPriorityDisinherit+0xd8>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	429a      	cmp	r2, r3
 80098de:	d903      	bls.n	80098e8 <xTaskPriorityDisinherit+0xa8>
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098e4:	4a0c      	ldr	r2, [pc, #48]	@ (8009918 <xTaskPriorityDisinherit+0xd8>)
 80098e6:	6013      	str	r3, [r2, #0]
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098ec:	4613      	mov	r3, r2
 80098ee:	009b      	lsls	r3, r3, #2
 80098f0:	4413      	add	r3, r2
 80098f2:	009b      	lsls	r3, r3, #2
 80098f4:	4a09      	ldr	r2, [pc, #36]	@ (800991c <xTaskPriorityDisinherit+0xdc>)
 80098f6:	441a      	add	r2, r3
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	3304      	adds	r3, #4
 80098fc:	4619      	mov	r1, r3
 80098fe:	4610      	mov	r0, r2
 8009900:	f7fe faaf 	bl	8007e62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009904:	2301      	movs	r3, #1
 8009906:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009908:	697b      	ldr	r3, [r7, #20]
	}
 800990a:	4618      	mov	r0, r3
 800990c:	3718      	adds	r7, #24
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
 8009912:	bf00      	nop
 8009914:	20000a88 	.word	0x20000a88
 8009918:	20000f64 	.word	0x20000f64
 800991c:	20000a8c 	.word	0x20000a8c

08009920 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
 8009928:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800992a:	4b21      	ldr	r3, [pc, #132]	@ (80099b0 <prvAddCurrentTaskToDelayedList+0x90>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009930:	4b20      	ldr	r3, [pc, #128]	@ (80099b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	3304      	adds	r3, #4
 8009936:	4618      	mov	r0, r3
 8009938:	f7fe faf0 	bl	8007f1c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009942:	d10a      	bne.n	800995a <prvAddCurrentTaskToDelayedList+0x3a>
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d007      	beq.n	800995a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800994a:	4b1a      	ldr	r3, [pc, #104]	@ (80099b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	3304      	adds	r3, #4
 8009950:	4619      	mov	r1, r3
 8009952:	4819      	ldr	r0, [pc, #100]	@ (80099b8 <prvAddCurrentTaskToDelayedList+0x98>)
 8009954:	f7fe fa85 	bl	8007e62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009958:	e026      	b.n	80099a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800995a:	68fa      	ldr	r2, [r7, #12]
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	4413      	add	r3, r2
 8009960:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009962:	4b14      	ldr	r3, [pc, #80]	@ (80099b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	68ba      	ldr	r2, [r7, #8]
 8009968:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800996a:	68ba      	ldr	r2, [r7, #8]
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	429a      	cmp	r2, r3
 8009970:	d209      	bcs.n	8009986 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009972:	4b12      	ldr	r3, [pc, #72]	@ (80099bc <prvAddCurrentTaskToDelayedList+0x9c>)
 8009974:	681a      	ldr	r2, [r3, #0]
 8009976:	4b0f      	ldr	r3, [pc, #60]	@ (80099b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	3304      	adds	r3, #4
 800997c:	4619      	mov	r1, r3
 800997e:	4610      	mov	r0, r2
 8009980:	f7fe fa93 	bl	8007eaa <vListInsert>
}
 8009984:	e010      	b.n	80099a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009986:	4b0e      	ldr	r3, [pc, #56]	@ (80099c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009988:	681a      	ldr	r2, [r3, #0]
 800998a:	4b0a      	ldr	r3, [pc, #40]	@ (80099b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	3304      	adds	r3, #4
 8009990:	4619      	mov	r1, r3
 8009992:	4610      	mov	r0, r2
 8009994:	f7fe fa89 	bl	8007eaa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009998:	4b0a      	ldr	r3, [pc, #40]	@ (80099c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	68ba      	ldr	r2, [r7, #8]
 800999e:	429a      	cmp	r2, r3
 80099a0:	d202      	bcs.n	80099a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80099a2:	4a08      	ldr	r2, [pc, #32]	@ (80099c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	6013      	str	r3, [r2, #0]
}
 80099a8:	bf00      	nop
 80099aa:	3710      	adds	r7, #16
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}
 80099b0:	20000f60 	.word	0x20000f60
 80099b4:	20000a88 	.word	0x20000a88
 80099b8:	20000f48 	.word	0x20000f48
 80099bc:	20000f18 	.word	0x20000f18
 80099c0:	20000f14 	.word	0x20000f14
 80099c4:	20000f7c 	.word	0x20000f7c

080099c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b08a      	sub	sp, #40	@ 0x28
 80099cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80099ce:	2300      	movs	r3, #0
 80099d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80099d2:	f000 fb13 	bl	8009ffc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80099d6:	4b1d      	ldr	r3, [pc, #116]	@ (8009a4c <xTimerCreateTimerTask+0x84>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d021      	beq.n	8009a22 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80099de:	2300      	movs	r3, #0
 80099e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80099e2:	2300      	movs	r3, #0
 80099e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80099e6:	1d3a      	adds	r2, r7, #4
 80099e8:	f107 0108 	add.w	r1, r7, #8
 80099ec:	f107 030c 	add.w	r3, r7, #12
 80099f0:	4618      	mov	r0, r3
 80099f2:	f7fe f9ef 	bl	8007dd4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80099f6:	6879      	ldr	r1, [r7, #4]
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	68fa      	ldr	r2, [r7, #12]
 80099fc:	9202      	str	r2, [sp, #8]
 80099fe:	9301      	str	r3, [sp, #4]
 8009a00:	2302      	movs	r3, #2
 8009a02:	9300      	str	r3, [sp, #0]
 8009a04:	2300      	movs	r3, #0
 8009a06:	460a      	mov	r2, r1
 8009a08:	4911      	ldr	r1, [pc, #68]	@ (8009a50 <xTimerCreateTimerTask+0x88>)
 8009a0a:	4812      	ldr	r0, [pc, #72]	@ (8009a54 <xTimerCreateTimerTask+0x8c>)
 8009a0c:	f7ff f8a2 	bl	8008b54 <xTaskCreateStatic>
 8009a10:	4603      	mov	r3, r0
 8009a12:	4a11      	ldr	r2, [pc, #68]	@ (8009a58 <xTimerCreateTimerTask+0x90>)
 8009a14:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009a16:	4b10      	ldr	r3, [pc, #64]	@ (8009a58 <xTimerCreateTimerTask+0x90>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d001      	beq.n	8009a22 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d10b      	bne.n	8009a40 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a2c:	f383 8811 	msr	BASEPRI, r3
 8009a30:	f3bf 8f6f 	isb	sy
 8009a34:	f3bf 8f4f 	dsb	sy
 8009a38:	613b      	str	r3, [r7, #16]
}
 8009a3a:	bf00      	nop
 8009a3c:	bf00      	nop
 8009a3e:	e7fd      	b.n	8009a3c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009a40:	697b      	ldr	r3, [r7, #20]
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3718      	adds	r7, #24
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	20000fb8 	.word	0x20000fb8
 8009a50:	0800ab30 	.word	0x0800ab30
 8009a54:	08009b95 	.word	0x08009b95
 8009a58:	20000fbc 	.word	0x20000fbc

08009a5c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b08a      	sub	sp, #40	@ 0x28
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	60f8      	str	r0, [r7, #12]
 8009a64:	60b9      	str	r1, [r7, #8]
 8009a66:	607a      	str	r2, [r7, #4]
 8009a68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d10b      	bne.n	8009a8c <xTimerGenericCommand+0x30>
	__asm volatile
 8009a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a78:	f383 8811 	msr	BASEPRI, r3
 8009a7c:	f3bf 8f6f 	isb	sy
 8009a80:	f3bf 8f4f 	dsb	sy
 8009a84:	623b      	str	r3, [r7, #32]
}
 8009a86:	bf00      	nop
 8009a88:	bf00      	nop
 8009a8a:	e7fd      	b.n	8009a88 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009a8c:	4b19      	ldr	r3, [pc, #100]	@ (8009af4 <xTimerGenericCommand+0x98>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d02a      	beq.n	8009aea <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	2b05      	cmp	r3, #5
 8009aa4:	dc18      	bgt.n	8009ad8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009aa6:	f7ff fead 	bl	8009804 <xTaskGetSchedulerState>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	2b02      	cmp	r3, #2
 8009aae:	d109      	bne.n	8009ac4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009ab0:	4b10      	ldr	r3, [pc, #64]	@ (8009af4 <xTimerGenericCommand+0x98>)
 8009ab2:	6818      	ldr	r0, [r3, #0]
 8009ab4:	f107 0110 	add.w	r1, r7, #16
 8009ab8:	2300      	movs	r3, #0
 8009aba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009abc:	f7fe fc0c 	bl	80082d8 <xQueueGenericSend>
 8009ac0:	6278      	str	r0, [r7, #36]	@ 0x24
 8009ac2:	e012      	b.n	8009aea <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8009af4 <xTimerGenericCommand+0x98>)
 8009ac6:	6818      	ldr	r0, [r3, #0]
 8009ac8:	f107 0110 	add.w	r1, r7, #16
 8009acc:	2300      	movs	r3, #0
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f7fe fc02 	bl	80082d8 <xQueueGenericSend>
 8009ad4:	6278      	str	r0, [r7, #36]	@ 0x24
 8009ad6:	e008      	b.n	8009aea <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009ad8:	4b06      	ldr	r3, [pc, #24]	@ (8009af4 <xTimerGenericCommand+0x98>)
 8009ada:	6818      	ldr	r0, [r3, #0]
 8009adc:	f107 0110 	add.w	r1, r7, #16
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	683a      	ldr	r2, [r7, #0]
 8009ae4:	f7fe fcfa 	bl	80084dc <xQueueGenericSendFromISR>
 8009ae8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3728      	adds	r7, #40	@ 0x28
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}
 8009af4:	20000fb8 	.word	0x20000fb8

08009af8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b088      	sub	sp, #32
 8009afc:	af02      	add	r7, sp, #8
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b02:	4b23      	ldr	r3, [pc, #140]	@ (8009b90 <prvProcessExpiredTimer+0x98>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	68db      	ldr	r3, [r3, #12]
 8009b08:	68db      	ldr	r3, [r3, #12]
 8009b0a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	3304      	adds	r3, #4
 8009b10:	4618      	mov	r0, r3
 8009b12:	f7fe fa03 	bl	8007f1c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b1c:	f003 0304 	and.w	r3, r3, #4
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d023      	beq.n	8009b6c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	699a      	ldr	r2, [r3, #24]
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	18d1      	adds	r1, r2, r3
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	683a      	ldr	r2, [r7, #0]
 8009b30:	6978      	ldr	r0, [r7, #20]
 8009b32:	f000 f8d5 	bl	8009ce0 <prvInsertTimerInActiveList>
 8009b36:	4603      	mov	r3, r0
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d020      	beq.n	8009b7e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	9300      	str	r3, [sp, #0]
 8009b40:	2300      	movs	r3, #0
 8009b42:	687a      	ldr	r2, [r7, #4]
 8009b44:	2100      	movs	r1, #0
 8009b46:	6978      	ldr	r0, [r7, #20]
 8009b48:	f7ff ff88 	bl	8009a5c <xTimerGenericCommand>
 8009b4c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d114      	bne.n	8009b7e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b58:	f383 8811 	msr	BASEPRI, r3
 8009b5c:	f3bf 8f6f 	isb	sy
 8009b60:	f3bf 8f4f 	dsb	sy
 8009b64:	60fb      	str	r3, [r7, #12]
}
 8009b66:	bf00      	nop
 8009b68:	bf00      	nop
 8009b6a:	e7fd      	b.n	8009b68 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b72:	f023 0301 	bic.w	r3, r3, #1
 8009b76:	b2da      	uxtb	r2, r3
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	6a1b      	ldr	r3, [r3, #32]
 8009b82:	6978      	ldr	r0, [r7, #20]
 8009b84:	4798      	blx	r3
}
 8009b86:	bf00      	nop
 8009b88:	3718      	adds	r7, #24
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}
 8009b8e:	bf00      	nop
 8009b90:	20000fb0 	.word	0x20000fb0

08009b94 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b084      	sub	sp, #16
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009b9c:	f107 0308 	add.w	r3, r7, #8
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f000 f859 	bl	8009c58 <prvGetNextExpireTime>
 8009ba6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	4619      	mov	r1, r3
 8009bac:	68f8      	ldr	r0, [r7, #12]
 8009bae:	f000 f805 	bl	8009bbc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009bb2:	f000 f8d7 	bl	8009d64 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009bb6:	bf00      	nop
 8009bb8:	e7f0      	b.n	8009b9c <prvTimerTask+0x8>
	...

08009bbc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b084      	sub	sp, #16
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009bc6:	f7ff fa29 	bl	800901c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009bca:	f107 0308 	add.w	r3, r7, #8
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f000 f866 	bl	8009ca0 <prvSampleTimeNow>
 8009bd4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d130      	bne.n	8009c3e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d10a      	bne.n	8009bf8 <prvProcessTimerOrBlockTask+0x3c>
 8009be2:	687a      	ldr	r2, [r7, #4]
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	429a      	cmp	r2, r3
 8009be8:	d806      	bhi.n	8009bf8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009bea:	f7ff fa25 	bl	8009038 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009bee:	68f9      	ldr	r1, [r7, #12]
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f7ff ff81 	bl	8009af8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009bf6:	e024      	b.n	8009c42 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d008      	beq.n	8009c10 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009bfe:	4b13      	ldr	r3, [pc, #76]	@ (8009c4c <prvProcessTimerOrBlockTask+0x90>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d101      	bne.n	8009c0c <prvProcessTimerOrBlockTask+0x50>
 8009c08:	2301      	movs	r3, #1
 8009c0a:	e000      	b.n	8009c0e <prvProcessTimerOrBlockTask+0x52>
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009c10:	4b0f      	ldr	r3, [pc, #60]	@ (8009c50 <prvProcessTimerOrBlockTask+0x94>)
 8009c12:	6818      	ldr	r0, [r3, #0]
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	1ad3      	subs	r3, r2, r3
 8009c1a:	683a      	ldr	r2, [r7, #0]
 8009c1c:	4619      	mov	r1, r3
 8009c1e:	f7fe ff65 	bl	8008aec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009c22:	f7ff fa09 	bl	8009038 <xTaskResumeAll>
 8009c26:	4603      	mov	r3, r0
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d10a      	bne.n	8009c42 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009c2c:	4b09      	ldr	r3, [pc, #36]	@ (8009c54 <prvProcessTimerOrBlockTask+0x98>)
 8009c2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c32:	601a      	str	r2, [r3, #0]
 8009c34:	f3bf 8f4f 	dsb	sy
 8009c38:	f3bf 8f6f 	isb	sy
}
 8009c3c:	e001      	b.n	8009c42 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009c3e:	f7ff f9fb 	bl	8009038 <xTaskResumeAll>
}
 8009c42:	bf00      	nop
 8009c44:	3710      	adds	r7, #16
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
 8009c4a:	bf00      	nop
 8009c4c:	20000fb4 	.word	0x20000fb4
 8009c50:	20000fb8 	.word	0x20000fb8
 8009c54:	e000ed04 	.word	0xe000ed04

08009c58 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b085      	sub	sp, #20
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009c60:	4b0e      	ldr	r3, [pc, #56]	@ (8009c9c <prvGetNextExpireTime+0x44>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d101      	bne.n	8009c6e <prvGetNextExpireTime+0x16>
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	e000      	b.n	8009c70 <prvGetNextExpireTime+0x18>
 8009c6e:	2200      	movs	r2, #0
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d105      	bne.n	8009c88 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009c7c:	4b07      	ldr	r3, [pc, #28]	@ (8009c9c <prvGetNextExpireTime+0x44>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	68db      	ldr	r3, [r3, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	60fb      	str	r3, [r7, #12]
 8009c86:	e001      	b.n	8009c8c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3714      	adds	r7, #20
 8009c92:	46bd      	mov	sp, r7
 8009c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c98:	4770      	bx	lr
 8009c9a:	bf00      	nop
 8009c9c:	20000fb0 	.word	0x20000fb0

08009ca0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009ca8:	f7ff fa64 	bl	8009174 <xTaskGetTickCount>
 8009cac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009cae:	4b0b      	ldr	r3, [pc, #44]	@ (8009cdc <prvSampleTimeNow+0x3c>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	68fa      	ldr	r2, [r7, #12]
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	d205      	bcs.n	8009cc4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009cb8:	f000 f93a 	bl	8009f30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	601a      	str	r2, [r3, #0]
 8009cc2:	e002      	b.n	8009cca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009cca:	4a04      	ldr	r2, [pc, #16]	@ (8009cdc <prvSampleTimeNow+0x3c>)
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3710      	adds	r7, #16
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
 8009cda:	bf00      	nop
 8009cdc:	20000fc0 	.word	0x20000fc0

08009ce0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b086      	sub	sp, #24
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	60f8      	str	r0, [r7, #12]
 8009ce8:	60b9      	str	r1, [r7, #8]
 8009cea:	607a      	str	r2, [r7, #4]
 8009cec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	68ba      	ldr	r2, [r7, #8]
 8009cf6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	68fa      	ldr	r2, [r7, #12]
 8009cfc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009cfe:	68ba      	ldr	r2, [r7, #8]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	429a      	cmp	r2, r3
 8009d04:	d812      	bhi.n	8009d2c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d06:	687a      	ldr	r2, [r7, #4]
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	1ad2      	subs	r2, r2, r3
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	699b      	ldr	r3, [r3, #24]
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d302      	bcc.n	8009d1a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009d14:	2301      	movs	r3, #1
 8009d16:	617b      	str	r3, [r7, #20]
 8009d18:	e01b      	b.n	8009d52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009d1a:	4b10      	ldr	r3, [pc, #64]	@ (8009d5c <prvInsertTimerInActiveList+0x7c>)
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	3304      	adds	r3, #4
 8009d22:	4619      	mov	r1, r3
 8009d24:	4610      	mov	r0, r2
 8009d26:	f7fe f8c0 	bl	8007eaa <vListInsert>
 8009d2a:	e012      	b.n	8009d52 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009d2c:	687a      	ldr	r2, [r7, #4]
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d206      	bcs.n	8009d42 <prvInsertTimerInActiveList+0x62>
 8009d34:	68ba      	ldr	r2, [r7, #8]
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d302      	bcc.n	8009d42 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	617b      	str	r3, [r7, #20]
 8009d40:	e007      	b.n	8009d52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009d42:	4b07      	ldr	r3, [pc, #28]	@ (8009d60 <prvInsertTimerInActiveList+0x80>)
 8009d44:	681a      	ldr	r2, [r3, #0]
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	3304      	adds	r3, #4
 8009d4a:	4619      	mov	r1, r3
 8009d4c:	4610      	mov	r0, r2
 8009d4e:	f7fe f8ac 	bl	8007eaa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009d52:	697b      	ldr	r3, [r7, #20]
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3718      	adds	r7, #24
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}
 8009d5c:	20000fb4 	.word	0x20000fb4
 8009d60:	20000fb0 	.word	0x20000fb0

08009d64 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b08e      	sub	sp, #56	@ 0x38
 8009d68:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d6a:	e0ce      	b.n	8009f0a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	da19      	bge.n	8009da6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009d72:	1d3b      	adds	r3, r7, #4
 8009d74:	3304      	adds	r3, #4
 8009d76:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d10b      	bne.n	8009d96 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d82:	f383 8811 	msr	BASEPRI, r3
 8009d86:	f3bf 8f6f 	isb	sy
 8009d8a:	f3bf 8f4f 	dsb	sy
 8009d8e:	61fb      	str	r3, [r7, #28]
}
 8009d90:	bf00      	nop
 8009d92:	bf00      	nop
 8009d94:	e7fd      	b.n	8009d92 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d9c:	6850      	ldr	r0, [r2, #4]
 8009d9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009da0:	6892      	ldr	r2, [r2, #8]
 8009da2:	4611      	mov	r1, r2
 8009da4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	f2c0 80ae 	blt.w	8009f0a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009db4:	695b      	ldr	r3, [r3, #20]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d004      	beq.n	8009dc4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dbc:	3304      	adds	r3, #4
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f7fe f8ac 	bl	8007f1c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009dc4:	463b      	mov	r3, r7
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f7ff ff6a 	bl	8009ca0 <prvSampleTimeNow>
 8009dcc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2b09      	cmp	r3, #9
 8009dd2:	f200 8097 	bhi.w	8009f04 <prvProcessReceivedCommands+0x1a0>
 8009dd6:	a201      	add	r2, pc, #4	@ (adr r2, 8009ddc <prvProcessReceivedCommands+0x78>)
 8009dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ddc:	08009e05 	.word	0x08009e05
 8009de0:	08009e05 	.word	0x08009e05
 8009de4:	08009e05 	.word	0x08009e05
 8009de8:	08009e7b 	.word	0x08009e7b
 8009dec:	08009e8f 	.word	0x08009e8f
 8009df0:	08009edb 	.word	0x08009edb
 8009df4:	08009e05 	.word	0x08009e05
 8009df8:	08009e05 	.word	0x08009e05
 8009dfc:	08009e7b 	.word	0x08009e7b
 8009e00:	08009e8f 	.word	0x08009e8f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e06:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e0a:	f043 0301 	orr.w	r3, r3, #1
 8009e0e:	b2da      	uxtb	r2, r3
 8009e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e12:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009e16:	68ba      	ldr	r2, [r7, #8]
 8009e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e1a:	699b      	ldr	r3, [r3, #24]
 8009e1c:	18d1      	adds	r1, r2, r3
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e24:	f7ff ff5c 	bl	8009ce0 <prvInsertTimerInActiveList>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d06c      	beq.n	8009f08 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e30:	6a1b      	ldr	r3, [r3, #32]
 8009e32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e34:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e3c:	f003 0304 	and.w	r3, r3, #4
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d061      	beq.n	8009f08 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009e44:	68ba      	ldr	r2, [r7, #8]
 8009e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e48:	699b      	ldr	r3, [r3, #24]
 8009e4a:	441a      	add	r2, r3
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	9300      	str	r3, [sp, #0]
 8009e50:	2300      	movs	r3, #0
 8009e52:	2100      	movs	r1, #0
 8009e54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e56:	f7ff fe01 	bl	8009a5c <xTimerGenericCommand>
 8009e5a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009e5c:	6a3b      	ldr	r3, [r7, #32]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d152      	bne.n	8009f08 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e66:	f383 8811 	msr	BASEPRI, r3
 8009e6a:	f3bf 8f6f 	isb	sy
 8009e6e:	f3bf 8f4f 	dsb	sy
 8009e72:	61bb      	str	r3, [r7, #24]
}
 8009e74:	bf00      	nop
 8009e76:	bf00      	nop
 8009e78:	e7fd      	b.n	8009e76 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e80:	f023 0301 	bic.w	r3, r3, #1
 8009e84:	b2da      	uxtb	r2, r3
 8009e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e88:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009e8c:	e03d      	b.n	8009f0a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e94:	f043 0301 	orr.w	r3, r3, #1
 8009e98:	b2da      	uxtb	r2, r3
 8009e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e9c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009ea0:	68ba      	ldr	r2, [r7, #8]
 8009ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ea4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ea8:	699b      	ldr	r3, [r3, #24]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d10b      	bne.n	8009ec6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eb2:	f383 8811 	msr	BASEPRI, r3
 8009eb6:	f3bf 8f6f 	isb	sy
 8009eba:	f3bf 8f4f 	dsb	sy
 8009ebe:	617b      	str	r3, [r7, #20]
}
 8009ec0:	bf00      	nop
 8009ec2:	bf00      	nop
 8009ec4:	e7fd      	b.n	8009ec2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ec8:	699a      	ldr	r2, [r3, #24]
 8009eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ecc:	18d1      	adds	r1, r2, r3
 8009ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ed0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ed2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ed4:	f7ff ff04 	bl	8009ce0 <prvInsertTimerInActiveList>
					break;
 8009ed8:	e017      	b.n	8009f0a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009edc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ee0:	f003 0302 	and.w	r3, r3, #2
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d103      	bne.n	8009ef0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009ee8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009eea:	f000 fbe5 	bl	800a6b8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009eee:	e00c      	b.n	8009f0a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ef2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ef6:	f023 0301 	bic.w	r3, r3, #1
 8009efa:	b2da      	uxtb	r2, r3
 8009efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009efe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009f02:	e002      	b.n	8009f0a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009f04:	bf00      	nop
 8009f06:	e000      	b.n	8009f0a <prvProcessReceivedCommands+0x1a6>
					break;
 8009f08:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009f0a:	4b08      	ldr	r3, [pc, #32]	@ (8009f2c <prvProcessReceivedCommands+0x1c8>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	1d39      	adds	r1, r7, #4
 8009f10:	2200      	movs	r2, #0
 8009f12:	4618      	mov	r0, r3
 8009f14:	f7fe fb80 	bl	8008618 <xQueueReceive>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	f47f af26 	bne.w	8009d6c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009f20:	bf00      	nop
 8009f22:	bf00      	nop
 8009f24:	3730      	adds	r7, #48	@ 0x30
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}
 8009f2a:	bf00      	nop
 8009f2c:	20000fb8 	.word	0x20000fb8

08009f30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b088      	sub	sp, #32
 8009f34:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009f36:	e049      	b.n	8009fcc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009f38:	4b2e      	ldr	r3, [pc, #184]	@ (8009ff4 <prvSwitchTimerLists+0xc4>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	68db      	ldr	r3, [r3, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f42:	4b2c      	ldr	r3, [pc, #176]	@ (8009ff4 <prvSwitchTimerLists+0xc4>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	68db      	ldr	r3, [r3, #12]
 8009f48:	68db      	ldr	r3, [r3, #12]
 8009f4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	3304      	adds	r3, #4
 8009f50:	4618      	mov	r0, r3
 8009f52:	f7fd ffe3 	bl	8007f1c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	6a1b      	ldr	r3, [r3, #32]
 8009f5a:	68f8      	ldr	r0, [r7, #12]
 8009f5c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f64:	f003 0304 	and.w	r3, r3, #4
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d02f      	beq.n	8009fcc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	699b      	ldr	r3, [r3, #24]
 8009f70:	693a      	ldr	r2, [r7, #16]
 8009f72:	4413      	add	r3, r2
 8009f74:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009f76:	68ba      	ldr	r2, [r7, #8]
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	429a      	cmp	r2, r3
 8009f7c:	d90e      	bls.n	8009f9c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	68ba      	ldr	r2, [r7, #8]
 8009f82:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	68fa      	ldr	r2, [r7, #12]
 8009f88:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009f8a:	4b1a      	ldr	r3, [pc, #104]	@ (8009ff4 <prvSwitchTimerLists+0xc4>)
 8009f8c:	681a      	ldr	r2, [r3, #0]
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	3304      	adds	r3, #4
 8009f92:	4619      	mov	r1, r3
 8009f94:	4610      	mov	r0, r2
 8009f96:	f7fd ff88 	bl	8007eaa <vListInsert>
 8009f9a:	e017      	b.n	8009fcc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	9300      	str	r3, [sp, #0]
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	693a      	ldr	r2, [r7, #16]
 8009fa4:	2100      	movs	r1, #0
 8009fa6:	68f8      	ldr	r0, [r7, #12]
 8009fa8:	f7ff fd58 	bl	8009a5c <xTimerGenericCommand>
 8009fac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d10b      	bne.n	8009fcc <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fb8:	f383 8811 	msr	BASEPRI, r3
 8009fbc:	f3bf 8f6f 	isb	sy
 8009fc0:	f3bf 8f4f 	dsb	sy
 8009fc4:	603b      	str	r3, [r7, #0]
}
 8009fc6:	bf00      	nop
 8009fc8:	bf00      	nop
 8009fca:	e7fd      	b.n	8009fc8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009fcc:	4b09      	ldr	r3, [pc, #36]	@ (8009ff4 <prvSwitchTimerLists+0xc4>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d1b0      	bne.n	8009f38 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009fd6:	4b07      	ldr	r3, [pc, #28]	@ (8009ff4 <prvSwitchTimerLists+0xc4>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009fdc:	4b06      	ldr	r3, [pc, #24]	@ (8009ff8 <prvSwitchTimerLists+0xc8>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	4a04      	ldr	r2, [pc, #16]	@ (8009ff4 <prvSwitchTimerLists+0xc4>)
 8009fe2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009fe4:	4a04      	ldr	r2, [pc, #16]	@ (8009ff8 <prvSwitchTimerLists+0xc8>)
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	6013      	str	r3, [r2, #0]
}
 8009fea:	bf00      	nop
 8009fec:	3718      	adds	r7, #24
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}
 8009ff2:	bf00      	nop
 8009ff4:	20000fb0 	.word	0x20000fb0
 8009ff8:	20000fb4 	.word	0x20000fb4

08009ffc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b082      	sub	sp, #8
 800a000:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a002:	f000 f969 	bl	800a2d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a006:	4b15      	ldr	r3, [pc, #84]	@ (800a05c <prvCheckForValidListAndQueue+0x60>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d120      	bne.n	800a050 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a00e:	4814      	ldr	r0, [pc, #80]	@ (800a060 <prvCheckForValidListAndQueue+0x64>)
 800a010:	f7fd fefa 	bl	8007e08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a014:	4813      	ldr	r0, [pc, #76]	@ (800a064 <prvCheckForValidListAndQueue+0x68>)
 800a016:	f7fd fef7 	bl	8007e08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a01a:	4b13      	ldr	r3, [pc, #76]	@ (800a068 <prvCheckForValidListAndQueue+0x6c>)
 800a01c:	4a10      	ldr	r2, [pc, #64]	@ (800a060 <prvCheckForValidListAndQueue+0x64>)
 800a01e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a020:	4b12      	ldr	r3, [pc, #72]	@ (800a06c <prvCheckForValidListAndQueue+0x70>)
 800a022:	4a10      	ldr	r2, [pc, #64]	@ (800a064 <prvCheckForValidListAndQueue+0x68>)
 800a024:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a026:	2300      	movs	r3, #0
 800a028:	9300      	str	r3, [sp, #0]
 800a02a:	4b11      	ldr	r3, [pc, #68]	@ (800a070 <prvCheckForValidListAndQueue+0x74>)
 800a02c:	4a11      	ldr	r2, [pc, #68]	@ (800a074 <prvCheckForValidListAndQueue+0x78>)
 800a02e:	2110      	movs	r1, #16
 800a030:	200a      	movs	r0, #10
 800a032:	f7fe f807 	bl	8008044 <xQueueGenericCreateStatic>
 800a036:	4603      	mov	r3, r0
 800a038:	4a08      	ldr	r2, [pc, #32]	@ (800a05c <prvCheckForValidListAndQueue+0x60>)
 800a03a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a03c:	4b07      	ldr	r3, [pc, #28]	@ (800a05c <prvCheckForValidListAndQueue+0x60>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d005      	beq.n	800a050 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a044:	4b05      	ldr	r3, [pc, #20]	@ (800a05c <prvCheckForValidListAndQueue+0x60>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	490b      	ldr	r1, [pc, #44]	@ (800a078 <prvCheckForValidListAndQueue+0x7c>)
 800a04a:	4618      	mov	r0, r3
 800a04c:	f7fe fcfa 	bl	8008a44 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a050:	f000 f974 	bl	800a33c <vPortExitCritical>
}
 800a054:	bf00      	nop
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
 800a05a:	bf00      	nop
 800a05c:	20000fb8 	.word	0x20000fb8
 800a060:	20000f88 	.word	0x20000f88
 800a064:	20000f9c 	.word	0x20000f9c
 800a068:	20000fb0 	.word	0x20000fb0
 800a06c:	20000fb4 	.word	0x20000fb4
 800a070:	20001064 	.word	0x20001064
 800a074:	20000fc4 	.word	0x20000fc4
 800a078:	0800ab38 	.word	0x0800ab38

0800a07c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a07c:	b480      	push	{r7}
 800a07e:	b085      	sub	sp, #20
 800a080:	af00      	add	r7, sp, #0
 800a082:	60f8      	str	r0, [r7, #12]
 800a084:	60b9      	str	r1, [r7, #8]
 800a086:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	3b04      	subs	r3, #4
 800a08c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a094:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	3b04      	subs	r3, #4
 800a09a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	f023 0201 	bic.w	r2, r3, #1
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	3b04      	subs	r3, #4
 800a0aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a0ac:	4a0c      	ldr	r2, [pc, #48]	@ (800a0e0 <pxPortInitialiseStack+0x64>)
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	3b14      	subs	r3, #20
 800a0b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a0b8:	687a      	ldr	r2, [r7, #4]
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	3b04      	subs	r3, #4
 800a0c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f06f 0202 	mvn.w	r2, #2
 800a0ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	3b20      	subs	r3, #32
 800a0d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3714      	adds	r7, #20
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0de:	4770      	bx	lr
 800a0e0:	0800a0e5 	.word	0x0800a0e5

0800a0e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b085      	sub	sp, #20
 800a0e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a0ee:	4b13      	ldr	r3, [pc, #76]	@ (800a13c <prvTaskExitError+0x58>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a0f6:	d00b      	beq.n	800a110 <prvTaskExitError+0x2c>
	__asm volatile
 800a0f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0fc:	f383 8811 	msr	BASEPRI, r3
 800a100:	f3bf 8f6f 	isb	sy
 800a104:	f3bf 8f4f 	dsb	sy
 800a108:	60fb      	str	r3, [r7, #12]
}
 800a10a:	bf00      	nop
 800a10c:	bf00      	nop
 800a10e:	e7fd      	b.n	800a10c <prvTaskExitError+0x28>
	__asm volatile
 800a110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a114:	f383 8811 	msr	BASEPRI, r3
 800a118:	f3bf 8f6f 	isb	sy
 800a11c:	f3bf 8f4f 	dsb	sy
 800a120:	60bb      	str	r3, [r7, #8]
}
 800a122:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a124:	bf00      	nop
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d0fc      	beq.n	800a126 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a12c:	bf00      	nop
 800a12e:	bf00      	nop
 800a130:	3714      	adds	r7, #20
 800a132:	46bd      	mov	sp, r7
 800a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a138:	4770      	bx	lr
 800a13a:	bf00      	nop
 800a13c:	2000000c 	.word	0x2000000c

0800a140 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a140:	4b07      	ldr	r3, [pc, #28]	@ (800a160 <pxCurrentTCBConst2>)
 800a142:	6819      	ldr	r1, [r3, #0]
 800a144:	6808      	ldr	r0, [r1, #0]
 800a146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a14a:	f380 8809 	msr	PSP, r0
 800a14e:	f3bf 8f6f 	isb	sy
 800a152:	f04f 0000 	mov.w	r0, #0
 800a156:	f380 8811 	msr	BASEPRI, r0
 800a15a:	4770      	bx	lr
 800a15c:	f3af 8000 	nop.w

0800a160 <pxCurrentTCBConst2>:
 800a160:	20000a88 	.word	0x20000a88
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a164:	bf00      	nop
 800a166:	bf00      	nop

0800a168 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a168:	4808      	ldr	r0, [pc, #32]	@ (800a18c <prvPortStartFirstTask+0x24>)
 800a16a:	6800      	ldr	r0, [r0, #0]
 800a16c:	6800      	ldr	r0, [r0, #0]
 800a16e:	f380 8808 	msr	MSP, r0
 800a172:	f04f 0000 	mov.w	r0, #0
 800a176:	f380 8814 	msr	CONTROL, r0
 800a17a:	b662      	cpsie	i
 800a17c:	b661      	cpsie	f
 800a17e:	f3bf 8f4f 	dsb	sy
 800a182:	f3bf 8f6f 	isb	sy
 800a186:	df00      	svc	0
 800a188:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a18a:	bf00      	nop
 800a18c:	e000ed08 	.word	0xe000ed08

0800a190 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b086      	sub	sp, #24
 800a194:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a196:	4b47      	ldr	r3, [pc, #284]	@ (800a2b4 <xPortStartScheduler+0x124>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4a47      	ldr	r2, [pc, #284]	@ (800a2b8 <xPortStartScheduler+0x128>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d10b      	bne.n	800a1b8 <xPortStartScheduler+0x28>
	__asm volatile
 800a1a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1a4:	f383 8811 	msr	BASEPRI, r3
 800a1a8:	f3bf 8f6f 	isb	sy
 800a1ac:	f3bf 8f4f 	dsb	sy
 800a1b0:	613b      	str	r3, [r7, #16]
}
 800a1b2:	bf00      	nop
 800a1b4:	bf00      	nop
 800a1b6:	e7fd      	b.n	800a1b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a1b8:	4b3e      	ldr	r3, [pc, #248]	@ (800a2b4 <xPortStartScheduler+0x124>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4a3f      	ldr	r2, [pc, #252]	@ (800a2bc <xPortStartScheduler+0x12c>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d10b      	bne.n	800a1da <xPortStartScheduler+0x4a>
	__asm volatile
 800a1c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1c6:	f383 8811 	msr	BASEPRI, r3
 800a1ca:	f3bf 8f6f 	isb	sy
 800a1ce:	f3bf 8f4f 	dsb	sy
 800a1d2:	60fb      	str	r3, [r7, #12]
}
 800a1d4:	bf00      	nop
 800a1d6:	bf00      	nop
 800a1d8:	e7fd      	b.n	800a1d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a1da:	4b39      	ldr	r3, [pc, #228]	@ (800a2c0 <xPortStartScheduler+0x130>)
 800a1dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	781b      	ldrb	r3, [r3, #0]
 800a1e2:	b2db      	uxtb	r3, r3
 800a1e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	22ff      	movs	r2, #255	@ 0xff
 800a1ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	b2db      	uxtb	r3, r3
 800a1f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a1f4:	78fb      	ldrb	r3, [r7, #3]
 800a1f6:	b2db      	uxtb	r3, r3
 800a1f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a1fc:	b2da      	uxtb	r2, r3
 800a1fe:	4b31      	ldr	r3, [pc, #196]	@ (800a2c4 <xPortStartScheduler+0x134>)
 800a200:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a202:	4b31      	ldr	r3, [pc, #196]	@ (800a2c8 <xPortStartScheduler+0x138>)
 800a204:	2207      	movs	r2, #7
 800a206:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a208:	e009      	b.n	800a21e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a20a:	4b2f      	ldr	r3, [pc, #188]	@ (800a2c8 <xPortStartScheduler+0x138>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	3b01      	subs	r3, #1
 800a210:	4a2d      	ldr	r2, [pc, #180]	@ (800a2c8 <xPortStartScheduler+0x138>)
 800a212:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a214:	78fb      	ldrb	r3, [r7, #3]
 800a216:	b2db      	uxtb	r3, r3
 800a218:	005b      	lsls	r3, r3, #1
 800a21a:	b2db      	uxtb	r3, r3
 800a21c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a21e:	78fb      	ldrb	r3, [r7, #3]
 800a220:	b2db      	uxtb	r3, r3
 800a222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a226:	2b80      	cmp	r3, #128	@ 0x80
 800a228:	d0ef      	beq.n	800a20a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a22a:	4b27      	ldr	r3, [pc, #156]	@ (800a2c8 <xPortStartScheduler+0x138>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f1c3 0307 	rsb	r3, r3, #7
 800a232:	2b04      	cmp	r3, #4
 800a234:	d00b      	beq.n	800a24e <xPortStartScheduler+0xbe>
	__asm volatile
 800a236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a23a:	f383 8811 	msr	BASEPRI, r3
 800a23e:	f3bf 8f6f 	isb	sy
 800a242:	f3bf 8f4f 	dsb	sy
 800a246:	60bb      	str	r3, [r7, #8]
}
 800a248:	bf00      	nop
 800a24a:	bf00      	nop
 800a24c:	e7fd      	b.n	800a24a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a24e:	4b1e      	ldr	r3, [pc, #120]	@ (800a2c8 <xPortStartScheduler+0x138>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	021b      	lsls	r3, r3, #8
 800a254:	4a1c      	ldr	r2, [pc, #112]	@ (800a2c8 <xPortStartScheduler+0x138>)
 800a256:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a258:	4b1b      	ldr	r3, [pc, #108]	@ (800a2c8 <xPortStartScheduler+0x138>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a260:	4a19      	ldr	r2, [pc, #100]	@ (800a2c8 <xPortStartScheduler+0x138>)
 800a262:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	b2da      	uxtb	r2, r3
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a26c:	4b17      	ldr	r3, [pc, #92]	@ (800a2cc <xPortStartScheduler+0x13c>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4a16      	ldr	r2, [pc, #88]	@ (800a2cc <xPortStartScheduler+0x13c>)
 800a272:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a276:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a278:	4b14      	ldr	r3, [pc, #80]	@ (800a2cc <xPortStartScheduler+0x13c>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	4a13      	ldr	r2, [pc, #76]	@ (800a2cc <xPortStartScheduler+0x13c>)
 800a27e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a282:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a284:	f000 f8da 	bl	800a43c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a288:	4b11      	ldr	r3, [pc, #68]	@ (800a2d0 <xPortStartScheduler+0x140>)
 800a28a:	2200      	movs	r2, #0
 800a28c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a28e:	f000 f8f9 	bl	800a484 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a292:	4b10      	ldr	r3, [pc, #64]	@ (800a2d4 <xPortStartScheduler+0x144>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	4a0f      	ldr	r2, [pc, #60]	@ (800a2d4 <xPortStartScheduler+0x144>)
 800a298:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a29c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a29e:	f7ff ff63 	bl	800a168 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a2a2:	f7ff f831 	bl	8009308 <vTaskSwitchContext>
	prvTaskExitError();
 800a2a6:	f7ff ff1d 	bl	800a0e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a2aa:	2300      	movs	r3, #0
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3718      	adds	r7, #24
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}
 800a2b4:	e000ed00 	.word	0xe000ed00
 800a2b8:	410fc271 	.word	0x410fc271
 800a2bc:	410fc270 	.word	0x410fc270
 800a2c0:	e000e400 	.word	0xe000e400
 800a2c4:	200010b4 	.word	0x200010b4
 800a2c8:	200010b8 	.word	0x200010b8
 800a2cc:	e000ed20 	.word	0xe000ed20
 800a2d0:	2000000c 	.word	0x2000000c
 800a2d4:	e000ef34 	.word	0xe000ef34

0800a2d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b083      	sub	sp, #12
 800a2dc:	af00      	add	r7, sp, #0
	__asm volatile
 800a2de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2e2:	f383 8811 	msr	BASEPRI, r3
 800a2e6:	f3bf 8f6f 	isb	sy
 800a2ea:	f3bf 8f4f 	dsb	sy
 800a2ee:	607b      	str	r3, [r7, #4]
}
 800a2f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a2f2:	4b10      	ldr	r3, [pc, #64]	@ (800a334 <vPortEnterCritical+0x5c>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	3301      	adds	r3, #1
 800a2f8:	4a0e      	ldr	r2, [pc, #56]	@ (800a334 <vPortEnterCritical+0x5c>)
 800a2fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a2fc:	4b0d      	ldr	r3, [pc, #52]	@ (800a334 <vPortEnterCritical+0x5c>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	2b01      	cmp	r3, #1
 800a302:	d110      	bne.n	800a326 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a304:	4b0c      	ldr	r3, [pc, #48]	@ (800a338 <vPortEnterCritical+0x60>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	b2db      	uxtb	r3, r3
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d00b      	beq.n	800a326 <vPortEnterCritical+0x4e>
	__asm volatile
 800a30e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a312:	f383 8811 	msr	BASEPRI, r3
 800a316:	f3bf 8f6f 	isb	sy
 800a31a:	f3bf 8f4f 	dsb	sy
 800a31e:	603b      	str	r3, [r7, #0]
}
 800a320:	bf00      	nop
 800a322:	bf00      	nop
 800a324:	e7fd      	b.n	800a322 <vPortEnterCritical+0x4a>
	}
}
 800a326:	bf00      	nop
 800a328:	370c      	adds	r7, #12
 800a32a:	46bd      	mov	sp, r7
 800a32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a330:	4770      	bx	lr
 800a332:	bf00      	nop
 800a334:	2000000c 	.word	0x2000000c
 800a338:	e000ed04 	.word	0xe000ed04

0800a33c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a33c:	b480      	push	{r7}
 800a33e:	b083      	sub	sp, #12
 800a340:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a342:	4b12      	ldr	r3, [pc, #72]	@ (800a38c <vPortExitCritical+0x50>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d10b      	bne.n	800a362 <vPortExitCritical+0x26>
	__asm volatile
 800a34a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a34e:	f383 8811 	msr	BASEPRI, r3
 800a352:	f3bf 8f6f 	isb	sy
 800a356:	f3bf 8f4f 	dsb	sy
 800a35a:	607b      	str	r3, [r7, #4]
}
 800a35c:	bf00      	nop
 800a35e:	bf00      	nop
 800a360:	e7fd      	b.n	800a35e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a362:	4b0a      	ldr	r3, [pc, #40]	@ (800a38c <vPortExitCritical+0x50>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	3b01      	subs	r3, #1
 800a368:	4a08      	ldr	r2, [pc, #32]	@ (800a38c <vPortExitCritical+0x50>)
 800a36a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a36c:	4b07      	ldr	r3, [pc, #28]	@ (800a38c <vPortExitCritical+0x50>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d105      	bne.n	800a380 <vPortExitCritical+0x44>
 800a374:	2300      	movs	r3, #0
 800a376:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	f383 8811 	msr	BASEPRI, r3
}
 800a37e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a380:	bf00      	nop
 800a382:	370c      	adds	r7, #12
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr
 800a38c:	2000000c 	.word	0x2000000c

0800a390 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a390:	f3ef 8009 	mrs	r0, PSP
 800a394:	f3bf 8f6f 	isb	sy
 800a398:	4b15      	ldr	r3, [pc, #84]	@ (800a3f0 <pxCurrentTCBConst>)
 800a39a:	681a      	ldr	r2, [r3, #0]
 800a39c:	f01e 0f10 	tst.w	lr, #16
 800a3a0:	bf08      	it	eq
 800a3a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a3a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3aa:	6010      	str	r0, [r2, #0]
 800a3ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a3b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a3b4:	f380 8811 	msr	BASEPRI, r0
 800a3b8:	f3bf 8f4f 	dsb	sy
 800a3bc:	f3bf 8f6f 	isb	sy
 800a3c0:	f7fe ffa2 	bl	8009308 <vTaskSwitchContext>
 800a3c4:	f04f 0000 	mov.w	r0, #0
 800a3c8:	f380 8811 	msr	BASEPRI, r0
 800a3cc:	bc09      	pop	{r0, r3}
 800a3ce:	6819      	ldr	r1, [r3, #0]
 800a3d0:	6808      	ldr	r0, [r1, #0]
 800a3d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3d6:	f01e 0f10 	tst.w	lr, #16
 800a3da:	bf08      	it	eq
 800a3dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a3e0:	f380 8809 	msr	PSP, r0
 800a3e4:	f3bf 8f6f 	isb	sy
 800a3e8:	4770      	bx	lr
 800a3ea:	bf00      	nop
 800a3ec:	f3af 8000 	nop.w

0800a3f0 <pxCurrentTCBConst>:
 800a3f0:	20000a88 	.word	0x20000a88
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a3f4:	bf00      	nop
 800a3f6:	bf00      	nop

0800a3f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b082      	sub	sp, #8
 800a3fc:	af00      	add	r7, sp, #0
	__asm volatile
 800a3fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a402:	f383 8811 	msr	BASEPRI, r3
 800a406:	f3bf 8f6f 	isb	sy
 800a40a:	f3bf 8f4f 	dsb	sy
 800a40e:	607b      	str	r3, [r7, #4]
}
 800a410:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a412:	f7fe febf 	bl	8009194 <xTaskIncrementTick>
 800a416:	4603      	mov	r3, r0
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d003      	beq.n	800a424 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a41c:	4b06      	ldr	r3, [pc, #24]	@ (800a438 <xPortSysTickHandler+0x40>)
 800a41e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a422:	601a      	str	r2, [r3, #0]
 800a424:	2300      	movs	r3, #0
 800a426:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	f383 8811 	msr	BASEPRI, r3
}
 800a42e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a430:	bf00      	nop
 800a432:	3708      	adds	r7, #8
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}
 800a438:	e000ed04 	.word	0xe000ed04

0800a43c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a43c:	b480      	push	{r7}
 800a43e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a440:	4b0b      	ldr	r3, [pc, #44]	@ (800a470 <vPortSetupTimerInterrupt+0x34>)
 800a442:	2200      	movs	r2, #0
 800a444:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a446:	4b0b      	ldr	r3, [pc, #44]	@ (800a474 <vPortSetupTimerInterrupt+0x38>)
 800a448:	2200      	movs	r2, #0
 800a44a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a44c:	4b0a      	ldr	r3, [pc, #40]	@ (800a478 <vPortSetupTimerInterrupt+0x3c>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4a0a      	ldr	r2, [pc, #40]	@ (800a47c <vPortSetupTimerInterrupt+0x40>)
 800a452:	fba2 2303 	umull	r2, r3, r2, r3
 800a456:	099b      	lsrs	r3, r3, #6
 800a458:	4a09      	ldr	r2, [pc, #36]	@ (800a480 <vPortSetupTimerInterrupt+0x44>)
 800a45a:	3b01      	subs	r3, #1
 800a45c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a45e:	4b04      	ldr	r3, [pc, #16]	@ (800a470 <vPortSetupTimerInterrupt+0x34>)
 800a460:	2207      	movs	r2, #7
 800a462:	601a      	str	r2, [r3, #0]
}
 800a464:	bf00      	nop
 800a466:	46bd      	mov	sp, r7
 800a468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46c:	4770      	bx	lr
 800a46e:	bf00      	nop
 800a470:	e000e010 	.word	0xe000e010
 800a474:	e000e018 	.word	0xe000e018
 800a478:	20000000 	.word	0x20000000
 800a47c:	10624dd3 	.word	0x10624dd3
 800a480:	e000e014 	.word	0xe000e014

0800a484 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a484:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a494 <vPortEnableVFP+0x10>
 800a488:	6801      	ldr	r1, [r0, #0]
 800a48a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a48e:	6001      	str	r1, [r0, #0]
 800a490:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a492:	bf00      	nop
 800a494:	e000ed88 	.word	0xe000ed88

0800a498 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a498:	b480      	push	{r7}
 800a49a:	b085      	sub	sp, #20
 800a49c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a49e:	f3ef 8305 	mrs	r3, IPSR
 800a4a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2b0f      	cmp	r3, #15
 800a4a8:	d915      	bls.n	800a4d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a4aa:	4a18      	ldr	r2, [pc, #96]	@ (800a50c <vPortValidateInterruptPriority+0x74>)
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	4413      	add	r3, r2
 800a4b0:	781b      	ldrb	r3, [r3, #0]
 800a4b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a4b4:	4b16      	ldr	r3, [pc, #88]	@ (800a510 <vPortValidateInterruptPriority+0x78>)
 800a4b6:	781b      	ldrb	r3, [r3, #0]
 800a4b8:	7afa      	ldrb	r2, [r7, #11]
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	d20b      	bcs.n	800a4d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a4be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4c2:	f383 8811 	msr	BASEPRI, r3
 800a4c6:	f3bf 8f6f 	isb	sy
 800a4ca:	f3bf 8f4f 	dsb	sy
 800a4ce:	607b      	str	r3, [r7, #4]
}
 800a4d0:	bf00      	nop
 800a4d2:	bf00      	nop
 800a4d4:	e7fd      	b.n	800a4d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a4d6:	4b0f      	ldr	r3, [pc, #60]	@ (800a514 <vPortValidateInterruptPriority+0x7c>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a4de:	4b0e      	ldr	r3, [pc, #56]	@ (800a518 <vPortValidateInterruptPriority+0x80>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	429a      	cmp	r2, r3
 800a4e4:	d90b      	bls.n	800a4fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a4e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4ea:	f383 8811 	msr	BASEPRI, r3
 800a4ee:	f3bf 8f6f 	isb	sy
 800a4f2:	f3bf 8f4f 	dsb	sy
 800a4f6:	603b      	str	r3, [r7, #0]
}
 800a4f8:	bf00      	nop
 800a4fa:	bf00      	nop
 800a4fc:	e7fd      	b.n	800a4fa <vPortValidateInterruptPriority+0x62>
	}
 800a4fe:	bf00      	nop
 800a500:	3714      	adds	r7, #20
 800a502:	46bd      	mov	sp, r7
 800a504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a508:	4770      	bx	lr
 800a50a:	bf00      	nop
 800a50c:	e000e3f0 	.word	0xe000e3f0
 800a510:	200010b4 	.word	0x200010b4
 800a514:	e000ed0c 	.word	0xe000ed0c
 800a518:	200010b8 	.word	0x200010b8

0800a51c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b08a      	sub	sp, #40	@ 0x28
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a524:	2300      	movs	r3, #0
 800a526:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a528:	f7fe fd78 	bl	800901c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a52c:	4b5c      	ldr	r3, [pc, #368]	@ (800a6a0 <pvPortMalloc+0x184>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d101      	bne.n	800a538 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a534:	f000 f924 	bl	800a780 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a538:	4b5a      	ldr	r3, [pc, #360]	@ (800a6a4 <pvPortMalloc+0x188>)
 800a53a:	681a      	ldr	r2, [r3, #0]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	4013      	ands	r3, r2
 800a540:	2b00      	cmp	r3, #0
 800a542:	f040 8095 	bne.w	800a670 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d01e      	beq.n	800a58a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a54c:	2208      	movs	r2, #8
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	4413      	add	r3, r2
 800a552:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f003 0307 	and.w	r3, r3, #7
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d015      	beq.n	800a58a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f023 0307 	bic.w	r3, r3, #7
 800a564:	3308      	adds	r3, #8
 800a566:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f003 0307 	and.w	r3, r3, #7
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d00b      	beq.n	800a58a <pvPortMalloc+0x6e>
	__asm volatile
 800a572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a576:	f383 8811 	msr	BASEPRI, r3
 800a57a:	f3bf 8f6f 	isb	sy
 800a57e:	f3bf 8f4f 	dsb	sy
 800a582:	617b      	str	r3, [r7, #20]
}
 800a584:	bf00      	nop
 800a586:	bf00      	nop
 800a588:	e7fd      	b.n	800a586 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d06f      	beq.n	800a670 <pvPortMalloc+0x154>
 800a590:	4b45      	ldr	r3, [pc, #276]	@ (800a6a8 <pvPortMalloc+0x18c>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	687a      	ldr	r2, [r7, #4]
 800a596:	429a      	cmp	r2, r3
 800a598:	d86a      	bhi.n	800a670 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a59a:	4b44      	ldr	r3, [pc, #272]	@ (800a6ac <pvPortMalloc+0x190>)
 800a59c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a59e:	4b43      	ldr	r3, [pc, #268]	@ (800a6ac <pvPortMalloc+0x190>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a5a4:	e004      	b.n	800a5b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a5a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a5aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a5b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5b2:	685b      	ldr	r3, [r3, #4]
 800a5b4:	687a      	ldr	r2, [r7, #4]
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d903      	bls.n	800a5c2 <pvPortMalloc+0xa6>
 800a5ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d1f1      	bne.n	800a5a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a5c2:	4b37      	ldr	r3, [pc, #220]	@ (800a6a0 <pvPortMalloc+0x184>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d051      	beq.n	800a670 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a5cc:	6a3b      	ldr	r3, [r7, #32]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	2208      	movs	r2, #8
 800a5d2:	4413      	add	r3, r2
 800a5d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a5d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5d8:	681a      	ldr	r2, [r3, #0]
 800a5da:	6a3b      	ldr	r3, [r7, #32]
 800a5dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a5de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5e0:	685a      	ldr	r2, [r3, #4]
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	1ad2      	subs	r2, r2, r3
 800a5e6:	2308      	movs	r3, #8
 800a5e8:	005b      	lsls	r3, r3, #1
 800a5ea:	429a      	cmp	r2, r3
 800a5ec:	d920      	bls.n	800a630 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a5ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	4413      	add	r3, r2
 800a5f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5f6:	69bb      	ldr	r3, [r7, #24]
 800a5f8:	f003 0307 	and.w	r3, r3, #7
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d00b      	beq.n	800a618 <pvPortMalloc+0xfc>
	__asm volatile
 800a600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a604:	f383 8811 	msr	BASEPRI, r3
 800a608:	f3bf 8f6f 	isb	sy
 800a60c:	f3bf 8f4f 	dsb	sy
 800a610:	613b      	str	r3, [r7, #16]
}
 800a612:	bf00      	nop
 800a614:	bf00      	nop
 800a616:	e7fd      	b.n	800a614 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a61a:	685a      	ldr	r2, [r3, #4]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	1ad2      	subs	r2, r2, r3
 800a620:	69bb      	ldr	r3, [r7, #24]
 800a622:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a626:	687a      	ldr	r2, [r7, #4]
 800a628:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a62a:	69b8      	ldr	r0, [r7, #24]
 800a62c:	f000 f90a 	bl	800a844 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a630:	4b1d      	ldr	r3, [pc, #116]	@ (800a6a8 <pvPortMalloc+0x18c>)
 800a632:	681a      	ldr	r2, [r3, #0]
 800a634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	1ad3      	subs	r3, r2, r3
 800a63a:	4a1b      	ldr	r2, [pc, #108]	@ (800a6a8 <pvPortMalloc+0x18c>)
 800a63c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a63e:	4b1a      	ldr	r3, [pc, #104]	@ (800a6a8 <pvPortMalloc+0x18c>)
 800a640:	681a      	ldr	r2, [r3, #0]
 800a642:	4b1b      	ldr	r3, [pc, #108]	@ (800a6b0 <pvPortMalloc+0x194>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	429a      	cmp	r2, r3
 800a648:	d203      	bcs.n	800a652 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a64a:	4b17      	ldr	r3, [pc, #92]	@ (800a6a8 <pvPortMalloc+0x18c>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	4a18      	ldr	r2, [pc, #96]	@ (800a6b0 <pvPortMalloc+0x194>)
 800a650:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a654:	685a      	ldr	r2, [r3, #4]
 800a656:	4b13      	ldr	r3, [pc, #76]	@ (800a6a4 <pvPortMalloc+0x188>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	431a      	orrs	r2, r3
 800a65c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a65e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a662:	2200      	movs	r2, #0
 800a664:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a666:	4b13      	ldr	r3, [pc, #76]	@ (800a6b4 <pvPortMalloc+0x198>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	3301      	adds	r3, #1
 800a66c:	4a11      	ldr	r2, [pc, #68]	@ (800a6b4 <pvPortMalloc+0x198>)
 800a66e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a670:	f7fe fce2 	bl	8009038 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a674:	69fb      	ldr	r3, [r7, #28]
 800a676:	f003 0307 	and.w	r3, r3, #7
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d00b      	beq.n	800a696 <pvPortMalloc+0x17a>
	__asm volatile
 800a67e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a682:	f383 8811 	msr	BASEPRI, r3
 800a686:	f3bf 8f6f 	isb	sy
 800a68a:	f3bf 8f4f 	dsb	sy
 800a68e:	60fb      	str	r3, [r7, #12]
}
 800a690:	bf00      	nop
 800a692:	bf00      	nop
 800a694:	e7fd      	b.n	800a692 <pvPortMalloc+0x176>
	return pvReturn;
 800a696:	69fb      	ldr	r3, [r7, #28]
}
 800a698:	4618      	mov	r0, r3
 800a69a:	3728      	adds	r7, #40	@ 0x28
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}
 800a6a0:	20001c7c 	.word	0x20001c7c
 800a6a4:	20001c90 	.word	0x20001c90
 800a6a8:	20001c80 	.word	0x20001c80
 800a6ac:	20001c74 	.word	0x20001c74
 800a6b0:	20001c84 	.word	0x20001c84
 800a6b4:	20001c88 	.word	0x20001c88

0800a6b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b086      	sub	sp, #24
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d04f      	beq.n	800a76a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a6ca:	2308      	movs	r3, #8
 800a6cc:	425b      	negs	r3, r3
 800a6ce:	697a      	ldr	r2, [r7, #20]
 800a6d0:	4413      	add	r3, r2
 800a6d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	685a      	ldr	r2, [r3, #4]
 800a6dc:	4b25      	ldr	r3, [pc, #148]	@ (800a774 <vPortFree+0xbc>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	4013      	ands	r3, r2
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d10b      	bne.n	800a6fe <vPortFree+0x46>
	__asm volatile
 800a6e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6ea:	f383 8811 	msr	BASEPRI, r3
 800a6ee:	f3bf 8f6f 	isb	sy
 800a6f2:	f3bf 8f4f 	dsb	sy
 800a6f6:	60fb      	str	r3, [r7, #12]
}
 800a6f8:	bf00      	nop
 800a6fa:	bf00      	nop
 800a6fc:	e7fd      	b.n	800a6fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d00b      	beq.n	800a71e <vPortFree+0x66>
	__asm volatile
 800a706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a70a:	f383 8811 	msr	BASEPRI, r3
 800a70e:	f3bf 8f6f 	isb	sy
 800a712:	f3bf 8f4f 	dsb	sy
 800a716:	60bb      	str	r3, [r7, #8]
}
 800a718:	bf00      	nop
 800a71a:	bf00      	nop
 800a71c:	e7fd      	b.n	800a71a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	685a      	ldr	r2, [r3, #4]
 800a722:	4b14      	ldr	r3, [pc, #80]	@ (800a774 <vPortFree+0xbc>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	4013      	ands	r3, r2
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d01e      	beq.n	800a76a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d11a      	bne.n	800a76a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a734:	693b      	ldr	r3, [r7, #16]
 800a736:	685a      	ldr	r2, [r3, #4]
 800a738:	4b0e      	ldr	r3, [pc, #56]	@ (800a774 <vPortFree+0xbc>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	43db      	mvns	r3, r3
 800a73e:	401a      	ands	r2, r3
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a744:	f7fe fc6a 	bl	800901c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	685a      	ldr	r2, [r3, #4]
 800a74c:	4b0a      	ldr	r3, [pc, #40]	@ (800a778 <vPortFree+0xc0>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	4413      	add	r3, r2
 800a752:	4a09      	ldr	r2, [pc, #36]	@ (800a778 <vPortFree+0xc0>)
 800a754:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a756:	6938      	ldr	r0, [r7, #16]
 800a758:	f000 f874 	bl	800a844 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a75c:	4b07      	ldr	r3, [pc, #28]	@ (800a77c <vPortFree+0xc4>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	3301      	adds	r3, #1
 800a762:	4a06      	ldr	r2, [pc, #24]	@ (800a77c <vPortFree+0xc4>)
 800a764:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a766:	f7fe fc67 	bl	8009038 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a76a:	bf00      	nop
 800a76c:	3718      	adds	r7, #24
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}
 800a772:	bf00      	nop
 800a774:	20001c90 	.word	0x20001c90
 800a778:	20001c80 	.word	0x20001c80
 800a77c:	20001c8c 	.word	0x20001c8c

0800a780 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a780:	b480      	push	{r7}
 800a782:	b085      	sub	sp, #20
 800a784:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a786:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800a78a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a78c:	4b27      	ldr	r3, [pc, #156]	@ (800a82c <prvHeapInit+0xac>)
 800a78e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f003 0307 	and.w	r3, r3, #7
 800a796:	2b00      	cmp	r3, #0
 800a798:	d00c      	beq.n	800a7b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	3307      	adds	r3, #7
 800a79e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	f023 0307 	bic.w	r3, r3, #7
 800a7a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a7a8:	68ba      	ldr	r2, [r7, #8]
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	1ad3      	subs	r3, r2, r3
 800a7ae:	4a1f      	ldr	r2, [pc, #124]	@ (800a82c <prvHeapInit+0xac>)
 800a7b0:	4413      	add	r3, r2
 800a7b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a7b8:	4a1d      	ldr	r2, [pc, #116]	@ (800a830 <prvHeapInit+0xb0>)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a7be:	4b1c      	ldr	r3, [pc, #112]	@ (800a830 <prvHeapInit+0xb0>)
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	68ba      	ldr	r2, [r7, #8]
 800a7c8:	4413      	add	r3, r2
 800a7ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a7cc:	2208      	movs	r2, #8
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	1a9b      	subs	r3, r3, r2
 800a7d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	f023 0307 	bic.w	r3, r3, #7
 800a7da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	4a15      	ldr	r2, [pc, #84]	@ (800a834 <prvHeapInit+0xb4>)
 800a7e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a7e2:	4b14      	ldr	r3, [pc, #80]	@ (800a834 <prvHeapInit+0xb4>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a7ea:	4b12      	ldr	r3, [pc, #72]	@ (800a834 <prvHeapInit+0xb4>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	68fa      	ldr	r2, [r7, #12]
 800a7fa:	1ad2      	subs	r2, r2, r3
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a800:	4b0c      	ldr	r3, [pc, #48]	@ (800a834 <prvHeapInit+0xb4>)
 800a802:	681a      	ldr	r2, [r3, #0]
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	685b      	ldr	r3, [r3, #4]
 800a80c:	4a0a      	ldr	r2, [pc, #40]	@ (800a838 <prvHeapInit+0xb8>)
 800a80e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	4a09      	ldr	r2, [pc, #36]	@ (800a83c <prvHeapInit+0xbc>)
 800a816:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a818:	4b09      	ldr	r3, [pc, #36]	@ (800a840 <prvHeapInit+0xc0>)
 800a81a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a81e:	601a      	str	r2, [r3, #0]
}
 800a820:	bf00      	nop
 800a822:	3714      	adds	r7, #20
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr
 800a82c:	200010bc 	.word	0x200010bc
 800a830:	20001c74 	.word	0x20001c74
 800a834:	20001c7c 	.word	0x20001c7c
 800a838:	20001c84 	.word	0x20001c84
 800a83c:	20001c80 	.word	0x20001c80
 800a840:	20001c90 	.word	0x20001c90

0800a844 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a844:	b480      	push	{r7}
 800a846:	b085      	sub	sp, #20
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a84c:	4b28      	ldr	r3, [pc, #160]	@ (800a8f0 <prvInsertBlockIntoFreeList+0xac>)
 800a84e:	60fb      	str	r3, [r7, #12]
 800a850:	e002      	b.n	800a858 <prvInsertBlockIntoFreeList+0x14>
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	60fb      	str	r3, [r7, #12]
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	687a      	ldr	r2, [r7, #4]
 800a85e:	429a      	cmp	r2, r3
 800a860:	d8f7      	bhi.n	800a852 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	685b      	ldr	r3, [r3, #4]
 800a86a:	68ba      	ldr	r2, [r7, #8]
 800a86c:	4413      	add	r3, r2
 800a86e:	687a      	ldr	r2, [r7, #4]
 800a870:	429a      	cmp	r2, r3
 800a872:	d108      	bne.n	800a886 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	685a      	ldr	r2, [r3, #4]
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	441a      	add	r2, r3
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	685b      	ldr	r3, [r3, #4]
 800a88e:	68ba      	ldr	r2, [r7, #8]
 800a890:	441a      	add	r2, r3
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	429a      	cmp	r2, r3
 800a898:	d118      	bne.n	800a8cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	681a      	ldr	r2, [r3, #0]
 800a89e:	4b15      	ldr	r3, [pc, #84]	@ (800a8f4 <prvInsertBlockIntoFreeList+0xb0>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d00d      	beq.n	800a8c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	685a      	ldr	r2, [r3, #4]
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	441a      	add	r2, r3
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	681a      	ldr	r2, [r3, #0]
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	601a      	str	r2, [r3, #0]
 800a8c0:	e008      	b.n	800a8d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a8c2:	4b0c      	ldr	r3, [pc, #48]	@ (800a8f4 <prvInsertBlockIntoFreeList+0xb0>)
 800a8c4:	681a      	ldr	r2, [r3, #0]
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	601a      	str	r2, [r3, #0]
 800a8ca:	e003      	b.n	800a8d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681a      	ldr	r2, [r3, #0]
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a8d4:	68fa      	ldr	r2, [r7, #12]
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	d002      	beq.n	800a8e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	687a      	ldr	r2, [r7, #4]
 800a8e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a8e2:	bf00      	nop
 800a8e4:	3714      	adds	r7, #20
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ec:	4770      	bx	lr
 800a8ee:	bf00      	nop
 800a8f0:	20001c74 	.word	0x20001c74
 800a8f4:	20001c7c 	.word	0x20001c7c

0800a8f8 <__malloc_lock>:
 800a8f8:	4801      	ldr	r0, [pc, #4]	@ (800a900 <__malloc_lock+0x8>)
 800a8fa:	f000 b88b 	b.w	800aa14 <__retarget_lock_acquire_recursive>
 800a8fe:	bf00      	nop
 800a900:	20001dd0 	.word	0x20001dd0

0800a904 <__malloc_unlock>:
 800a904:	4801      	ldr	r0, [pc, #4]	@ (800a90c <__malloc_unlock+0x8>)
 800a906:	f000 b886 	b.w	800aa16 <__retarget_lock_release_recursive>
 800a90a:	bf00      	nop
 800a90c:	20001dd0 	.word	0x20001dd0

0800a910 <memset>:
 800a910:	4402      	add	r2, r0
 800a912:	4603      	mov	r3, r0
 800a914:	4293      	cmp	r3, r2
 800a916:	d100      	bne.n	800a91a <memset+0xa>
 800a918:	4770      	bx	lr
 800a91a:	f803 1b01 	strb.w	r1, [r3], #1
 800a91e:	e7f9      	b.n	800a914 <memset+0x4>

0800a920 <_reclaim_reent>:
 800a920:	4b29      	ldr	r3, [pc, #164]	@ (800a9c8 <_reclaim_reent+0xa8>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	4283      	cmp	r3, r0
 800a926:	b570      	push	{r4, r5, r6, lr}
 800a928:	4604      	mov	r4, r0
 800a92a:	d04b      	beq.n	800a9c4 <_reclaim_reent+0xa4>
 800a92c:	69c3      	ldr	r3, [r0, #28]
 800a92e:	b1ab      	cbz	r3, 800a95c <_reclaim_reent+0x3c>
 800a930:	68db      	ldr	r3, [r3, #12]
 800a932:	b16b      	cbz	r3, 800a950 <_reclaim_reent+0x30>
 800a934:	2500      	movs	r5, #0
 800a936:	69e3      	ldr	r3, [r4, #28]
 800a938:	68db      	ldr	r3, [r3, #12]
 800a93a:	5959      	ldr	r1, [r3, r5]
 800a93c:	2900      	cmp	r1, #0
 800a93e:	d13b      	bne.n	800a9b8 <_reclaim_reent+0x98>
 800a940:	3504      	adds	r5, #4
 800a942:	2d80      	cmp	r5, #128	@ 0x80
 800a944:	d1f7      	bne.n	800a936 <_reclaim_reent+0x16>
 800a946:	69e3      	ldr	r3, [r4, #28]
 800a948:	4620      	mov	r0, r4
 800a94a:	68d9      	ldr	r1, [r3, #12]
 800a94c:	f000 f872 	bl	800aa34 <_free_r>
 800a950:	69e3      	ldr	r3, [r4, #28]
 800a952:	6819      	ldr	r1, [r3, #0]
 800a954:	b111      	cbz	r1, 800a95c <_reclaim_reent+0x3c>
 800a956:	4620      	mov	r0, r4
 800a958:	f000 f86c 	bl	800aa34 <_free_r>
 800a95c:	6961      	ldr	r1, [r4, #20]
 800a95e:	b111      	cbz	r1, 800a966 <_reclaim_reent+0x46>
 800a960:	4620      	mov	r0, r4
 800a962:	f000 f867 	bl	800aa34 <_free_r>
 800a966:	69e1      	ldr	r1, [r4, #28]
 800a968:	b111      	cbz	r1, 800a970 <_reclaim_reent+0x50>
 800a96a:	4620      	mov	r0, r4
 800a96c:	f000 f862 	bl	800aa34 <_free_r>
 800a970:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a972:	b111      	cbz	r1, 800a97a <_reclaim_reent+0x5a>
 800a974:	4620      	mov	r0, r4
 800a976:	f000 f85d 	bl	800aa34 <_free_r>
 800a97a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a97c:	b111      	cbz	r1, 800a984 <_reclaim_reent+0x64>
 800a97e:	4620      	mov	r0, r4
 800a980:	f000 f858 	bl	800aa34 <_free_r>
 800a984:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a986:	b111      	cbz	r1, 800a98e <_reclaim_reent+0x6e>
 800a988:	4620      	mov	r0, r4
 800a98a:	f000 f853 	bl	800aa34 <_free_r>
 800a98e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a990:	b111      	cbz	r1, 800a998 <_reclaim_reent+0x78>
 800a992:	4620      	mov	r0, r4
 800a994:	f000 f84e 	bl	800aa34 <_free_r>
 800a998:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a99a:	b111      	cbz	r1, 800a9a2 <_reclaim_reent+0x82>
 800a99c:	4620      	mov	r0, r4
 800a99e:	f000 f849 	bl	800aa34 <_free_r>
 800a9a2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a9a4:	b111      	cbz	r1, 800a9ac <_reclaim_reent+0x8c>
 800a9a6:	4620      	mov	r0, r4
 800a9a8:	f000 f844 	bl	800aa34 <_free_r>
 800a9ac:	6a23      	ldr	r3, [r4, #32]
 800a9ae:	b14b      	cbz	r3, 800a9c4 <_reclaim_reent+0xa4>
 800a9b0:	4620      	mov	r0, r4
 800a9b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a9b6:	4718      	bx	r3
 800a9b8:	680e      	ldr	r6, [r1, #0]
 800a9ba:	4620      	mov	r0, r4
 800a9bc:	f000 f83a 	bl	800aa34 <_free_r>
 800a9c0:	4631      	mov	r1, r6
 800a9c2:	e7bb      	b.n	800a93c <_reclaim_reent+0x1c>
 800a9c4:	bd70      	pop	{r4, r5, r6, pc}
 800a9c6:	bf00      	nop
 800a9c8:	20000010 	.word	0x20000010

0800a9cc <__libc_init_array>:
 800a9cc:	b570      	push	{r4, r5, r6, lr}
 800a9ce:	4d0d      	ldr	r5, [pc, #52]	@ (800aa04 <__libc_init_array+0x38>)
 800a9d0:	4c0d      	ldr	r4, [pc, #52]	@ (800aa08 <__libc_init_array+0x3c>)
 800a9d2:	1b64      	subs	r4, r4, r5
 800a9d4:	10a4      	asrs	r4, r4, #2
 800a9d6:	2600      	movs	r6, #0
 800a9d8:	42a6      	cmp	r6, r4
 800a9da:	d109      	bne.n	800a9f0 <__libc_init_array+0x24>
 800a9dc:	4d0b      	ldr	r5, [pc, #44]	@ (800aa0c <__libc_init_array+0x40>)
 800a9de:	4c0c      	ldr	r4, [pc, #48]	@ (800aa10 <__libc_init_array+0x44>)
 800a9e0:	f000 f872 	bl	800aac8 <_init>
 800a9e4:	1b64      	subs	r4, r4, r5
 800a9e6:	10a4      	asrs	r4, r4, #2
 800a9e8:	2600      	movs	r6, #0
 800a9ea:	42a6      	cmp	r6, r4
 800a9ec:	d105      	bne.n	800a9fa <__libc_init_array+0x2e>
 800a9ee:	bd70      	pop	{r4, r5, r6, pc}
 800a9f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9f4:	4798      	blx	r3
 800a9f6:	3601      	adds	r6, #1
 800a9f8:	e7ee      	b.n	800a9d8 <__libc_init_array+0xc>
 800a9fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9fe:	4798      	blx	r3
 800aa00:	3601      	adds	r6, #1
 800aa02:	e7f2      	b.n	800a9ea <__libc_init_array+0x1e>
 800aa04:	0800ac30 	.word	0x0800ac30
 800aa08:	0800ac30 	.word	0x0800ac30
 800aa0c:	0800ac30 	.word	0x0800ac30
 800aa10:	0800ac34 	.word	0x0800ac34

0800aa14 <__retarget_lock_acquire_recursive>:
 800aa14:	4770      	bx	lr

0800aa16 <__retarget_lock_release_recursive>:
 800aa16:	4770      	bx	lr

0800aa18 <memcpy>:
 800aa18:	440a      	add	r2, r1
 800aa1a:	4291      	cmp	r1, r2
 800aa1c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800aa20:	d100      	bne.n	800aa24 <memcpy+0xc>
 800aa22:	4770      	bx	lr
 800aa24:	b510      	push	{r4, lr}
 800aa26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa2e:	4291      	cmp	r1, r2
 800aa30:	d1f9      	bne.n	800aa26 <memcpy+0xe>
 800aa32:	bd10      	pop	{r4, pc}

0800aa34 <_free_r>:
 800aa34:	b538      	push	{r3, r4, r5, lr}
 800aa36:	4605      	mov	r5, r0
 800aa38:	2900      	cmp	r1, #0
 800aa3a:	d041      	beq.n	800aac0 <_free_r+0x8c>
 800aa3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa40:	1f0c      	subs	r4, r1, #4
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	bfb8      	it	lt
 800aa46:	18e4      	addlt	r4, r4, r3
 800aa48:	f7ff ff56 	bl	800a8f8 <__malloc_lock>
 800aa4c:	4a1d      	ldr	r2, [pc, #116]	@ (800aac4 <_free_r+0x90>)
 800aa4e:	6813      	ldr	r3, [r2, #0]
 800aa50:	b933      	cbnz	r3, 800aa60 <_free_r+0x2c>
 800aa52:	6063      	str	r3, [r4, #4]
 800aa54:	6014      	str	r4, [r2, #0]
 800aa56:	4628      	mov	r0, r5
 800aa58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa5c:	f7ff bf52 	b.w	800a904 <__malloc_unlock>
 800aa60:	42a3      	cmp	r3, r4
 800aa62:	d908      	bls.n	800aa76 <_free_r+0x42>
 800aa64:	6820      	ldr	r0, [r4, #0]
 800aa66:	1821      	adds	r1, r4, r0
 800aa68:	428b      	cmp	r3, r1
 800aa6a:	bf01      	itttt	eq
 800aa6c:	6819      	ldreq	r1, [r3, #0]
 800aa6e:	685b      	ldreq	r3, [r3, #4]
 800aa70:	1809      	addeq	r1, r1, r0
 800aa72:	6021      	streq	r1, [r4, #0]
 800aa74:	e7ed      	b.n	800aa52 <_free_r+0x1e>
 800aa76:	461a      	mov	r2, r3
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	b10b      	cbz	r3, 800aa80 <_free_r+0x4c>
 800aa7c:	42a3      	cmp	r3, r4
 800aa7e:	d9fa      	bls.n	800aa76 <_free_r+0x42>
 800aa80:	6811      	ldr	r1, [r2, #0]
 800aa82:	1850      	adds	r0, r2, r1
 800aa84:	42a0      	cmp	r0, r4
 800aa86:	d10b      	bne.n	800aaa0 <_free_r+0x6c>
 800aa88:	6820      	ldr	r0, [r4, #0]
 800aa8a:	4401      	add	r1, r0
 800aa8c:	1850      	adds	r0, r2, r1
 800aa8e:	4283      	cmp	r3, r0
 800aa90:	6011      	str	r1, [r2, #0]
 800aa92:	d1e0      	bne.n	800aa56 <_free_r+0x22>
 800aa94:	6818      	ldr	r0, [r3, #0]
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	6053      	str	r3, [r2, #4]
 800aa9a:	4408      	add	r0, r1
 800aa9c:	6010      	str	r0, [r2, #0]
 800aa9e:	e7da      	b.n	800aa56 <_free_r+0x22>
 800aaa0:	d902      	bls.n	800aaa8 <_free_r+0x74>
 800aaa2:	230c      	movs	r3, #12
 800aaa4:	602b      	str	r3, [r5, #0]
 800aaa6:	e7d6      	b.n	800aa56 <_free_r+0x22>
 800aaa8:	6820      	ldr	r0, [r4, #0]
 800aaaa:	1821      	adds	r1, r4, r0
 800aaac:	428b      	cmp	r3, r1
 800aaae:	bf04      	itt	eq
 800aab0:	6819      	ldreq	r1, [r3, #0]
 800aab2:	685b      	ldreq	r3, [r3, #4]
 800aab4:	6063      	str	r3, [r4, #4]
 800aab6:	bf04      	itt	eq
 800aab8:	1809      	addeq	r1, r1, r0
 800aaba:	6021      	streq	r1, [r4, #0]
 800aabc:	6054      	str	r4, [r2, #4]
 800aabe:	e7ca      	b.n	800aa56 <_free_r+0x22>
 800aac0:	bd38      	pop	{r3, r4, r5, pc}
 800aac2:	bf00      	nop
 800aac4:	20001c94 	.word	0x20001c94

0800aac8 <_init>:
 800aac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaca:	bf00      	nop
 800aacc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aace:	bc08      	pop	{r3}
 800aad0:	469e      	mov	lr, r3
 800aad2:	4770      	bx	lr

0800aad4 <_fini>:
 800aad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aad6:	bf00      	nop
 800aad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aada:	bc08      	pop	{r3}
 800aadc:	469e      	mov	lr, r3
 800aade:	4770      	bx	lr
