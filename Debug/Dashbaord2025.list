
Dashbaord2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6d0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  0800a880  0800a880  0000b880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9bc  0800a9bc  0000c060  2**0
                  CONTENTS
  4 .ARM          00000008  0800a9bc  0800a9bc  0000b9bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9c4  0800a9c4  0000c060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9c4  0800a9c4  0000b9c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a9c8  0800a9c8  0000b9c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800a9cc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d74  20000060  0800aa2c  0000c060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001dd4  0800aa2c  0000cdd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000267f1  00000000  00000000  0000c090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049ae  00000000  00000000  00032881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002098  00000000  00000000  00037230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001978  00000000  00000000  000392c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dd6f  00000000  00000000  0003ac40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000258c7  00000000  00000000  000689af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012436e  00000000  00000000  0008e276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b25e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f90  00000000  00000000  001b2628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001bb5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a868 	.word	0x0800a868

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	0800a868 	.word	0x0800a868

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b96a 	b.w	80004dc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	460c      	mov	r4, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14e      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022c:	4694      	mov	ip, r2
 800022e:	458c      	cmp	ip, r1
 8000230:	4686      	mov	lr, r0
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	d962      	bls.n	80002fe <__udivmoddi4+0xde>
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0320 	rsb	r3, r2, #32
 800023e:	4091      	lsls	r1, r2
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	fa0c fc02 	lsl.w	ip, ip, r2
 8000248:	4319      	orrs	r1, r3
 800024a:	fa00 fe02 	lsl.w	lr, r0, r2
 800024e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000252:	fa1f f68c 	uxth.w	r6, ip
 8000256:	fbb1 f4f7 	udiv	r4, r1, r7
 800025a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025e:	fb07 1114 	mls	r1, r7, r4, r1
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	fb04 f106 	mul.w	r1, r4, r6
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f104 30ff 	add.w	r0, r4, #4294967295
 8000276:	f080 8112 	bcs.w	800049e <__udivmoddi4+0x27e>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 810f 	bls.w	800049e <__udivmoddi4+0x27e>
 8000280:	3c02      	subs	r4, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a59      	subs	r1, r3, r1
 8000286:	fa1f f38e 	uxth.w	r3, lr
 800028a:	fbb1 f0f7 	udiv	r0, r1, r7
 800028e:	fb07 1110 	mls	r1, r7, r0, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb00 f606 	mul.w	r6, r0, r6
 800029a:	429e      	cmp	r6, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x94>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a6:	f080 80fc 	bcs.w	80004a2 <__udivmoddi4+0x282>
 80002aa:	429e      	cmp	r6, r3
 80002ac:	f240 80f9 	bls.w	80004a2 <__udivmoddi4+0x282>
 80002b0:	4463      	add	r3, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	1b9b      	subs	r3, r3, r6
 80002b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11d      	cbz	r5, 80002c6 <__udivmoddi4+0xa6>
 80002be:	40d3      	lsrs	r3, r2
 80002c0:	2200      	movs	r2, #0
 80002c2:	e9c5 3200 	strd	r3, r2, [r5]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d905      	bls.n	80002da <__udivmoddi4+0xba>
 80002ce:	b10d      	cbz	r5, 80002d4 <__udivmoddi4+0xb4>
 80002d0:	e9c5 0100 	strd	r0, r1, [r5]
 80002d4:	2100      	movs	r1, #0
 80002d6:	4608      	mov	r0, r1
 80002d8:	e7f5      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d146      	bne.n	8000370 <__udivmoddi4+0x150>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xcc>
 80002e6:	4290      	cmp	r0, r2
 80002e8:	f0c0 80f0 	bcc.w	80004cc <__udivmoddi4+0x2ac>
 80002ec:	1a86      	subs	r6, r0, r2
 80002ee:	eb64 0303 	sbc.w	r3, r4, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d0e6      	beq.n	80002c6 <__udivmoddi4+0xa6>
 80002f8:	e9c5 6300 	strd	r6, r3, [r5]
 80002fc:	e7e3      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x204>
 8000304:	eba1 040c 	sub.w	r4, r1, ip
 8000308:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800030c:	fa1f f78c 	uxth.w	r7, ip
 8000310:	2101      	movs	r1, #1
 8000312:	fbb4 f6f8 	udiv	r6, r4, r8
 8000316:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031a:	fb08 4416 	mls	r4, r8, r6, r4
 800031e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000322:	fb07 f006 	mul.w	r0, r7, r6
 8000326:	4298      	cmp	r0, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x11c>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x11a>
 8000334:	4298      	cmp	r0, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 800033a:	4626      	mov	r6, r4
 800033c:	1a1c      	subs	r4, r3, r0
 800033e:	fa1f f38e 	uxth.w	r3, lr
 8000342:	fbb4 f0f8 	udiv	r0, r4, r8
 8000346:	fb08 4410 	mls	r4, r8, r0, r4
 800034a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034e:	fb00 f707 	mul.w	r7, r0, r7
 8000352:	429f      	cmp	r7, r3
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x148>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f100 34ff 	add.w	r4, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x146>
 8000360:	429f      	cmp	r7, r3
 8000362:	f200 80b0 	bhi.w	80004c6 <__udivmoddi4+0x2a6>
 8000366:	4620      	mov	r0, r4
 8000368:	1bdb      	subs	r3, r3, r7
 800036a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0x9c>
 8000370:	f1c1 0620 	rsb	r6, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 f706 	lsr.w	r7, r2, r6
 800037a:	431f      	orrs	r7, r3
 800037c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000380:	fa04 f301 	lsl.w	r3, r4, r1
 8000384:	ea43 030c 	orr.w	r3, r3, ip
 8000388:	40f4      	lsrs	r4, r6
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	0c38      	lsrs	r0, r7, #16
 8000390:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000394:	fbb4 fef0 	udiv	lr, r4, r0
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	fb00 441e 	mls	r4, r0, lr, r4
 80003a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a4:	fb0e f90c 	mul.w	r9, lr, ip
 80003a8:	45a1      	cmp	r9, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x1a6>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b6:	f080 8084 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80003ba:	45a1      	cmp	r9, r4
 80003bc:	f240 8081 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80003c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	eba4 0409 	sub.w	r4, r4, r9
 80003ca:	fa1f f983 	uxth.w	r9, r3
 80003ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d2:	fb00 4413 	mls	r4, r0, r3, r4
 80003d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003da:	fb03 fc0c 	mul.w	ip, r3, ip
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x1d2>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e8:	d267      	bcs.n	80004ba <__udivmoddi4+0x29a>
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d965      	bls.n	80004ba <__udivmoddi4+0x29a>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	443c      	add	r4, r7
 80003f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f6:	fba0 9302 	umull	r9, r3, r0, r2
 80003fa:	eba4 040c 	sub.w	r4, r4, ip
 80003fe:	429c      	cmp	r4, r3
 8000400:	46ce      	mov	lr, r9
 8000402:	469c      	mov	ip, r3
 8000404:	d351      	bcc.n	80004aa <__udivmoddi4+0x28a>
 8000406:	d04e      	beq.n	80004a6 <__udivmoddi4+0x286>
 8000408:	b155      	cbz	r5, 8000420 <__udivmoddi4+0x200>
 800040a:	ebb8 030e 	subs.w	r3, r8, lr
 800040e:	eb64 040c 	sbc.w	r4, r4, ip
 8000412:	fa04 f606 	lsl.w	r6, r4, r6
 8000416:	40cb      	lsrs	r3, r1
 8000418:	431e      	orrs	r6, r3
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c5 6400 	strd	r6, r4, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	e750      	b.n	80002c6 <__udivmoddi4+0xa6>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f103 	lsr.w	r1, r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa24 f303 	lsr.w	r3, r4, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	430c      	orrs	r4, r1
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000440:	fa1f f78c 	uxth.w	r7, ip
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3110 	mls	r1, r8, r0, r3
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000452:	fb00 f107 	mul.w	r1, r0, r7
 8000456:	4299      	cmp	r1, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x24c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000462:	d22c      	bcs.n	80004be <__udivmoddi4+0x29e>
 8000464:	4299      	cmp	r1, r3
 8000466:	d92a      	bls.n	80004be <__udivmoddi4+0x29e>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb3 f1f8 	udiv	r1, r3, r8
 8000474:	fb08 3311 	mls	r3, r8, r1, r3
 8000478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047c:	fb01 f307 	mul.w	r3, r1, r7
 8000480:	42a3      	cmp	r3, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x276>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f101 36ff 	add.w	r6, r1, #4294967295
 800048c:	d213      	bcs.n	80004b6 <__udivmoddi4+0x296>
 800048e:	42a3      	cmp	r3, r4
 8000490:	d911      	bls.n	80004b6 <__udivmoddi4+0x296>
 8000492:	3902      	subs	r1, #2
 8000494:	4464      	add	r4, ip
 8000496:	1ae4      	subs	r4, r4, r3
 8000498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049c:	e739      	b.n	8000312 <__udivmoddi4+0xf2>
 800049e:	4604      	mov	r4, r0
 80004a0:	e6f0      	b.n	8000284 <__udivmoddi4+0x64>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e706      	b.n	80002b4 <__udivmoddi4+0x94>
 80004a6:	45c8      	cmp	r8, r9
 80004a8:	d2ae      	bcs.n	8000408 <__udivmoddi4+0x1e8>
 80004aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7a8      	b.n	8000408 <__udivmoddi4+0x1e8>
 80004b6:	4631      	mov	r1, r6
 80004b8:	e7ed      	b.n	8000496 <__udivmoddi4+0x276>
 80004ba:	4603      	mov	r3, r0
 80004bc:	e799      	b.n	80003f2 <__udivmoddi4+0x1d2>
 80004be:	4630      	mov	r0, r6
 80004c0:	e7d4      	b.n	800046c <__udivmoddi4+0x24c>
 80004c2:	46d6      	mov	lr, sl
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1a6>
 80004c6:	4463      	add	r3, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e74d      	b.n	8000368 <__udivmoddi4+0x148>
 80004cc:	4606      	mov	r6, r0
 80004ce:	4623      	mov	r3, r4
 80004d0:	4608      	mov	r0, r1
 80004d2:	e70f      	b.n	80002f4 <__udivmoddi4+0xd4>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	e730      	b.n	800033c <__udivmoddi4+0x11c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <TCAL9538RSVR_INIT>:
    
    return pin_number; 
}

uint8_t TCAL9538RSVR_INIT(TCAL9538RSVR *dev, I2C_HandleTypeDef *i2cHandle, uint8_t hardwareAddress, uint8_t direction_bitMask, uint8_t interrupt_bitMask)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b086      	sub	sp, #24
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	4611      	mov	r1, r2
 80004ec:	461a      	mov	r2, r3
 80004ee:	460b      	mov	r3, r1
 80004f0:	71fb      	strb	r3, [r7, #7]
 80004f2:	4613      	mov	r3, r2
 80004f4:	71bb      	strb	r3, [r7, #6]
	uint8_t errNum = 0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef status;


    dev->i2cHandle = i2cHandle;
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	68ba      	ldr	r2, [r7, #8]
 80004fe:	601a      	str	r2, [r3, #0]
    dev->portValues = 0;
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	2200      	movs	r2, #0
 8000504:	715a      	strb	r2, [r3, #5]
    // hardware address should be from 0-3
    // (A0 = GND, A1 = GND) == 0
    hardwareAddress &= 0b00000011;
 8000506:	79fb      	ldrb	r3, [r7, #7]
 8000508:	f003 0303 	and.w	r3, r3, #3
 800050c:	71fb      	strb	r3, [r7, #7]
    dev->deviceAddress = TCAL9538RSVR_ADDR | (hardwareAddress<<1);
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	005b      	lsls	r3, r3, #1
 8000512:	b25b      	sxtb	r3, r3
 8000514:	f063 031f 	orn	r3, r3, #31
 8000518:	b25b      	sxtb	r3, r3
 800051a:	b2da      	uxtb	r2, r3
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	711a      	strb	r2, [r3, #4]
    uint8_t hold_bitMask = direction_bitMask;
 8000520:	79bb      	ldrb	r3, [r7, #6]
 8000522:	757b      	strb	r3, [r7, #21]

    status = TCAL9538RSVR_SetDirection(dev, &hold_bitMask);
 8000524:	f107 0315 	add.w	r3, r7, #21
 8000528:	4619      	mov	r1, r3
 800052a:	68f8      	ldr	r0, [r7, #12]
 800052c:	f000 f823 	bl	8000576 <TCAL9538RSVR_SetDirection>
 8000530:	4603      	mov	r3, r0
 8000532:	75bb      	strb	r3, [r7, #22]
    errNum += (status != HAL_OK);
 8000534:	7dbb      	ldrb	r3, [r7, #22]
 8000536:	2b00      	cmp	r3, #0
 8000538:	bf14      	ite	ne
 800053a:	2301      	movne	r3, #1
 800053c:	2300      	moveq	r3, #0
 800053e:	b2db      	uxtb	r3, r3
 8000540:	461a      	mov	r2, r3
 8000542:	7dfb      	ldrb	r3, [r7, #23]
 8000544:	4413      	add	r3, r2
 8000546:	75fb      	strb	r3, [r7, #23]

    status = TCAL9538RSVR_SetInterrupts(dev, interrupt_bitMask);
 8000548:	f897 3020 	ldrb.w	r3, [r7, #32]
 800054c:	4619      	mov	r1, r3
 800054e:	68f8      	ldr	r0, [r7, #12]
 8000550:	f000 f820 	bl	8000594 <TCAL9538RSVR_SetInterrupts>
 8000554:	4603      	mov	r3, r0
 8000556:	75bb      	strb	r3, [r7, #22]
    errNum += (status != HAL_OK);
 8000558:	7dbb      	ldrb	r3, [r7, #22]
 800055a:	2b00      	cmp	r3, #0
 800055c:	bf14      	ite	ne
 800055e:	2301      	movne	r3, #1
 8000560:	2300      	moveq	r3, #0
 8000562:	b2db      	uxtb	r3, r3
 8000564:	461a      	mov	r2, r3
 8000566:	7dfb      	ldrb	r3, [r7, #23]
 8000568:	4413      	add	r3, r2
 800056a:	75fb      	strb	r3, [r7, #23]

    return (errNum);
 800056c:	7dfb      	ldrb	r3, [r7, #23]
}
 800056e:	4618      	mov	r0, r3
 8000570:	3718      	adds	r7, #24
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}

08000576 <TCAL9538RSVR_SetDirection>:
 * @param uint8_t : bitMask -> '1' is input
 * 					default is input
 * @retval HAL_StatusTypeDef : HAL_Status
 */
HAL_StatusTypeDef TCAL9538RSVR_SetDirection(TCAL9538RSVR* dev, uint8_t* bitMask)
{
 8000576:	b580      	push	{r7, lr}
 8000578:	b082      	sub	sp, #8
 800057a:	af00      	add	r7, sp, #0
 800057c:	6078      	str	r0, [r7, #4]
 800057e:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_DIR_CONFIG, bitMask);
 8000580:	683a      	ldr	r2, [r7, #0]
 8000582:	2103      	movs	r1, #3
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f000 f879 	bl	800067c <TCAL9538RSVR_WriteRegister>
 800058a:	4603      	mov	r3, r0
}
 800058c:	4618      	mov	r0, r3
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <TCAL9538RSVR_SetInterrupts>:
 * @brief Sets interrupt register
 * @param uint8_t : bitMask -> '0' will enable interrupts for that pin
 * @retval HAL_StatusTypeDef : HAL_Status
 */
HAL_StatusTypeDef TCAL9538RSVR_SetInterrupts(TCAL9538RSVR* dev, uint8_t bitMask)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	460b      	mov	r3, r1
 800059e:	70fb      	strb	r3, [r7, #3]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_INT_CONFIG, &bitMask);
 80005a0:	1cfb      	adds	r3, r7, #3
 80005a2:	461a      	mov	r2, r3
 80005a4:	2145      	movs	r1, #69	@ 0x45
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	f000 f868 	bl	800067c <TCAL9538RSVR_WriteRegister>
 80005ac:	4603      	mov	r3, r0
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}

080005b6 <TCAL9538RSVR_HandleInterrupt>:
 * @brief Handles interrupt and returns pin# that triggered
 * 			stores triggered pin in dev->triggeredInterrupt
 * @retval uint8_t : errNum
 */
HAL_StatusTypeDef TCAL9538RSVR_HandleInterrupt(TCAL9538RSVR* dev)
{
 80005b6:	b580      	push	{r7, lr}
 80005b8:	b084      	sub	sp, #16
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	6078      	str	r0, [r7, #4]
    uint8_t errNum = 0;
 80005be:	2300      	movs	r3, #0
 80005c0:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status;
    uint8_t triggeredInterrupts = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	737b      	strb	r3, [r7, #13]

    // Read updated input values
    status = TCAL9538RSVR_ReadInput(dev, &dev->portValues);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	3305      	adds	r3, #5
 80005ca:	4619      	mov	r1, r3
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f000 f81a 	bl	8000606 <TCAL9538RSVR_ReadInput>
 80005d2:	4603      	mov	r3, r0
 80005d4:	73bb      	strb	r3, [r7, #14]

    // read interrupt status register, puts a bit mask of the pin that triggered the interrupt in intPinBitMask
    status = TCAL9538RSVR_ReadRegister(dev, TCAL9538RSVR_INT_STATUS, &triggeredInterrupts);
 80005d6:	f107 030d 	add.w	r3, r7, #13
 80005da:	461a      	mov	r2, r3
 80005dc:	2146      	movs	r1, #70	@ 0x46
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f000 f82f 	bl	8000642 <TCAL9538RSVR_ReadRegister>
 80005e4:	4603      	mov	r3, r0
 80005e6:	73bb      	strb	r3, [r7, #14]
    errNum += (status != HAL_OK);
 80005e8:	7bbb      	ldrb	r3, [r7, #14]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	bf14      	ite	ne
 80005ee:	2301      	movne	r3, #1
 80005f0:	2300      	moveq	r3, #0
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	461a      	mov	r2, r3
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
 80005f8:	4413      	add	r3, r2
 80005fa:	73fb      	strb	r3, [r7, #15]

    //status = TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_INT_STATUS, &triggeredInterrupts);
    //errNum += (status != HAL_OK);

    return (errNum);
 80005fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80005fe:	4618      	mov	r0, r3
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}

08000606 <TCAL9538RSVR_ReadInput>:
    
// }


HAL_StatusTypeDef TCAL9538RSVR_ReadInput(TCAL9538RSVR* dev, uint8_t *data)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	b082      	sub	sp, #8
 800060a:	af00      	add	r7, sp, #0
 800060c:	6078      	str	r0, [r7, #4]
 800060e:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_ReadRegister(dev, TCAL9538RSVR_GPIO_INPUT, data);
 8000610:	683a      	ldr	r2, [r7, #0]
 8000612:	2100      	movs	r1, #0
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f000 f814 	bl	8000642 <TCAL9538RSVR_ReadRegister>
 800061a:	4603      	mov	r3, r0
}
 800061c:	4618      	mov	r0, r3
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <TCAL9538RSVR_SetOutput>:
HAL_StatusTypeDef TCAL9538RSVR_SetOutput(TCAL9538RSVR* dev, uint8_t *data)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_GPIO_OUTPUT, data);
 800062e:	683a      	ldr	r2, [r7, #0]
 8000630:	2101      	movs	r1, #1
 8000632:	6878      	ldr	r0, [r7, #4]
 8000634:	f000 f822 	bl	800067c <TCAL9538RSVR_WriteRegister>
 8000638:	4603      	mov	r3, r0
}
 800063a:	4618      	mov	r0, r3
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}

08000642 <TCAL9538RSVR_ReadRegister>:

//low level functions
HAL_StatusTypeDef TCAL9538RSVR_ReadRegister(TCAL9538RSVR *dev, uint8_t reg, uint8_t *data)
{
 8000642:	b580      	push	{r7, lr}
 8000644:	b088      	sub	sp, #32
 8000646:	af04      	add	r7, sp, #16
 8000648:	60f8      	str	r0, [r7, #12]
 800064a:	460b      	mov	r3, r1
 800064c:	607a      	str	r2, [r7, #4]
 800064e:	72fb      	strb	r3, [r7, #11]
    return(HAL_I2C_Mem_Read(dev->i2cHandle, dev->deviceAddress, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY));
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	6818      	ldr	r0, [r3, #0]
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	791b      	ldrb	r3, [r3, #4]
 8000658:	4619      	mov	r1, r3
 800065a:	7afb      	ldrb	r3, [r7, #11]
 800065c:	b29a      	uxth	r2, r3
 800065e:	f04f 33ff 	mov.w	r3, #4294967295
 8000662:	9302      	str	r3, [sp, #8]
 8000664:	2301      	movs	r3, #1
 8000666:	9301      	str	r3, [sp, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	9300      	str	r3, [sp, #0]
 800066c:	2301      	movs	r3, #1
 800066e:	f003 fbe5 	bl	8003e3c <HAL_I2C_Mem_Read>
 8000672:	4603      	mov	r3, r0
}
 8000674:	4618      	mov	r0, r3
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <TCAL9538RSVR_WriteRegister>:
HAL_StatusTypeDef TCAL9538RSVR_WriteRegister(TCAL9538RSVR *dev, uint8_t reg, uint8_t *data)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b088      	sub	sp, #32
 8000680:	af04      	add	r7, sp, #16
 8000682:	60f8      	str	r0, [r7, #12]
 8000684:	460b      	mov	r3, r1
 8000686:	607a      	str	r2, [r7, #4]
 8000688:	72fb      	strb	r3, [r7, #11]
    return(HAL_I2C_Mem_Write(dev->i2cHandle, dev->deviceAddress, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY));
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	6818      	ldr	r0, [r3, #0]
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	791b      	ldrb	r3, [r3, #4]
 8000692:	4619      	mov	r1, r3
 8000694:	7afb      	ldrb	r3, [r7, #11]
 8000696:	b29a      	uxth	r2, r3
 8000698:	f04f 33ff 	mov.w	r3, #4294967295
 800069c:	9302      	str	r3, [sp, #8]
 800069e:	2301      	movs	r3, #1
 80006a0:	9301      	str	r3, [sp, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	2301      	movs	r3, #1
 80006a8:	f003 fab4 	bl	8003c14 <HAL_I2C_Mem_Write>
 80006ac:	4603      	mov	r3, r0
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3710      	adds	r7, #16
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
	...

080006b8 <Update_CAN_Message1>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Update_CAN_Message1(uint8_t flags[8], uint8_t* Input1, uint8_t* Input2)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
	 * Debounce buttons software (maybe)
	 * Check if toggling or just setting (toggling blinkers yes but toggling break)
	 * CAN message is sending state, ie lights should be blinking, etc.
	 */

	flags[0] = 0;
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	2200      	movs	r2, #0
 80006c8:	701a      	strb	r2, [r3, #0]
	flags[1] = 0;
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	3301      	adds	r3, #1
 80006ce:	2200      	movs	r2, #0
 80006d0:	701a      	strb	r2, [r3, #0]

	flags[0] |= CHECK_BIT(*Input2, 4) << 0; // Main
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	b25a      	sxtb	r2, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	f003 0310 	and.w	r3, r3, #16
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	bf14      	ite	ne
 80006e4:	2301      	movne	r3, #1
 80006e6:	2300      	moveq	r3, #0
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	b25b      	sxtb	r3, r3
 80006ec:	4313      	orrs	r3, r2
 80006ee:	b25b      	sxtb	r3, r3
 80006f0:	b2da      	uxtb	r2, r3
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	701a      	strb	r2, [r3, #0]
	flags[0] |= CHECK_BIT(*Input2, 5) << 1; // Break
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	b25a      	sxtb	r2, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	111b      	asrs	r3, r3, #4
 8000702:	b25b      	sxtb	r3, r3
 8000704:	f003 0302 	and.w	r3, r3, #2
 8000708:	b25b      	sxtb	r3, r3
 800070a:	4313      	orrs	r3, r2
 800070c:	b25b      	sxtb	r3, r3
 800070e:	b2da      	uxtb	r2, r3
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	701a      	strb	r2, [r3, #0]
	flags[0] |= CHECK_BIT(*Input2, 0) << 2; // Mode
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	b25a      	sxtb	r2, r3
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	b25b      	sxtb	r3, r3
 8000722:	f003 0304 	and.w	r3, r3, #4
 8000726:	b25b      	sxtb	r3, r3
 8000728:	4313      	orrs	r3, r2
 800072a:	b25b      	sxtb	r3, r3
 800072c:	b2da      	uxtb	r2, r3
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	701a      	strb	r2, [r3, #0]
	flags[0] |= CHECK_BIT(*Input1, 5) << 3; // MC
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	b25a      	sxtb	r2, r3
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	109b      	asrs	r3, r3, #2
 800073e:	b25b      	sxtb	r3, r3
 8000740:	f003 0308 	and.w	r3, r3, #8
 8000744:	b25b      	sxtb	r3, r3
 8000746:	4313      	orrs	r3, r2
 8000748:	b25b      	sxtb	r3, r3
 800074a:	b2da      	uxtb	r2, r3
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	701a      	strb	r2, [r3, #0]
	flags[0] |= CHECK_BIT(*Input1, 6) << 4; // Array
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	b25a      	sxtb	r2, r3
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	109b      	asrs	r3, r3, #2
 800075c:	b25b      	sxtb	r3, r3
 800075e:	f003 0310 	and.w	r3, r3, #16
 8000762:	b25b      	sxtb	r3, r3
 8000764:	4313      	orrs	r3, r2
 8000766:	b25b      	sxtb	r3, r3
 8000768:	b2da      	uxtb	r2, r3
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	701a      	strb	r2, [r3, #0]
	flags[0] |= CHECK_BIT(*Input1, 4) << 5; // Extra 1
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	b25a      	sxtb	r2, r3
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	005b      	lsls	r3, r3, #1
 800077a:	b25b      	sxtb	r3, r3
 800077c:	f003 0320 	and.w	r3, r3, #32
 8000780:	b25b      	sxtb	r3, r3
 8000782:	4313      	orrs	r3, r2
 8000784:	b25b      	sxtb	r3, r3
 8000786:	b2da      	uxtb	r2, r3
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	701a      	strb	r2, [r3, #0]
	flags[0] |= CHECK_BIT(outputPortState, 5) << 6; // Horn
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	b25a      	sxtb	r2, r3
 8000792:	4b2b      	ldr	r3, [pc, #172]	@ (8000840 <Update_CAN_Message1+0x188>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	b25b      	sxtb	r3, r3
 800079a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800079e:	b25b      	sxtb	r3, r3
 80007a0:	4313      	orrs	r3, r2
 80007a2:	b25b      	sxtb	r3, r3
 80007a4:	b2da      	uxtb	r2, r3
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	701a      	strb	r2, [r3, #0]
	flags[0] |= CHECK_BIT(outputPortState, 6) << 7; // PTT
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	b25a      	sxtb	r2, r3
 80007b0:	4b23      	ldr	r3, [pc, #140]	@ (8000840 <Update_CAN_Message1+0x188>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	005b      	lsls	r3, r3, #1
 80007b6:	b25b      	sxtb	r3, r3
 80007b8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80007bc:	b25b      	sxtb	r3, r3
 80007be:	4313      	orrs	r3, r2
 80007c0:	b25b      	sxtb	r3, r3
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	701a      	strb	r2, [r3, #0]

	flags[1] |= CHECK_BIT(outputPortState, 2) << 0; // Blinkers
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	3301      	adds	r3, #1
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	b25a      	sxtb	r2, r3
 80007d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000840 <Update_CAN_Message1+0x188>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	f003 0304 	and.w	r3, r3, #4
 80007d8:	2b00      	cmp	r3, #0
 80007da:	bf14      	ite	ne
 80007dc:	2301      	movne	r3, #1
 80007de:	2300      	moveq	r3, #0
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	b25b      	sxtb	r3, r3
 80007e4:	4313      	orrs	r3, r2
 80007e6:	b25a      	sxtb	r2, r3
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	3301      	adds	r3, #1
 80007ec:	b2d2      	uxtb	r2, r2
 80007ee:	701a      	strb	r2, [r3, #0]
	flags[1] |= CHECK_BIT(outputPortState, 0) << 1; // Left Turn Signal
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	3301      	adds	r3, #1
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	b25a      	sxtb	r2, r3
 80007f8:	4b11      	ldr	r3, [pc, #68]	@ (8000840 <Update_CAN_Message1+0x188>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	005b      	lsls	r3, r3, #1
 80007fe:	b25b      	sxtb	r3, r3
 8000800:	f003 0302 	and.w	r3, r3, #2
 8000804:	b25b      	sxtb	r3, r3
 8000806:	4313      	orrs	r3, r2
 8000808:	b25a      	sxtb	r2, r3
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	3301      	adds	r3, #1
 800080e:	b2d2      	uxtb	r2, r2
 8000810:	701a      	strb	r2, [r3, #0]
	flags[1] |= CHECK_BIT(outputPortState, 1) << 2; // Right Turn Signal
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	3301      	adds	r3, #1
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	b25a      	sxtb	r2, r3
 800081a:	4b09      	ldr	r3, [pc, #36]	@ (8000840 <Update_CAN_Message1+0x188>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	005b      	lsls	r3, r3, #1
 8000820:	b25b      	sxtb	r3, r3
 8000822:	f003 0304 	and.w	r3, r3, #4
 8000826:	b25b      	sxtb	r3, r3
 8000828:	4313      	orrs	r3, r2
 800082a:	b25a      	sxtb	r2, r3
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	3301      	adds	r3, #1
 8000830:	b2d2      	uxtb	r2, r2
 8000832:	701a      	strb	r2, [r3, #0]

}
 8000834:	bf00      	nop
 8000836:	3714      	adds	r7, #20
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	20000284 	.word	0x20000284

08000844 <updateDebounce>:

uint8_t updateDebounce(uint8_t stable, uint8_t newReading, uint8_t *counter) {
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	603a      	str	r2, [r7, #0]
 800084e:	71fb      	strb	r3, [r7, #7]
 8000850:	460b      	mov	r3, r1
 8000852:	71bb      	strb	r3, [r7, #6]
    if (newReading != stable) {
 8000854:	79ba      	ldrb	r2, [r7, #6]
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	429a      	cmp	r2, r3
 800085a:	d00e      	beq.n	800087a <updateDebounce+0x36>
        (*counter)++;
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	3301      	adds	r3, #1
 8000862:	b2da      	uxtb	r2, r3
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	701a      	strb	r2, [r3, #0]
        if (*counter >= 3) {
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b02      	cmp	r3, #2
 800086e:	d907      	bls.n	8000880 <updateDebounce+0x3c>
            *counter = 0;
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	2200      	movs	r2, #0
 8000874:	701a      	strb	r2, [r3, #0]
            return newReading;
 8000876:	79bb      	ldrb	r3, [r7, #6]
 8000878:	e003      	b.n	8000882 <updateDebounce+0x3e>
        }
    } else {
        *counter = 0;
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	2200      	movs	r2, #0
 800087e:	701a      	strb	r2, [r3, #0]
    }
    return stable;
 8000880:	79fb      	ldrb	r3, [r7, #7]
}
 8000882:	4618      	mov	r0, r3
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
	...

08000890 <HAL_GPIO_EXTI_Callback>:

}

// GPIO Expander Interrupt Handler
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	80fb      	strh	r3, [r7, #6]
	GPIO_Interrupt_Triggered = 1;
 800089a:	4b04      	ldr	r3, [pc, #16]	@ (80008ac <HAL_GPIO_EXTI_Callback+0x1c>)
 800089c:	2201      	movs	r2, #1
 800089e:	701a      	strb	r2, [r3, #0]
}
 80008a0:	bf00      	nop
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	20000280 	.word	0x20000280

080008b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008b6:	f000 fed4 	bl	8001662 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ba:	f000 f87b 	bl	80009b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008be:	f000 fa2b 	bl	8000d18 <MX_GPIO_Init>
  MX_DMA_Init();
 80008c2:	f000 fa0b 	bl	8000cdc <MX_DMA_Init>
  MX_ADC1_Init();
 80008c6:	f000 f8bb 	bl	8000a40 <MX_ADC1_Init>
  MX_I2C4_Init();
 80008ca:	f000 f997 	bl	8000bfc <MX_I2C4_Init>
  MX_CAN1_Init();
 80008ce:	f000 f92d 	bl	8000b2c <MX_CAN1_Init>
  MX_CAN2_Init();
 80008d2:	f000 f95f 	bl	8000b94 <MX_CAN2_Init>
  MX_UART4_Init();
 80008d6:	f000 f9d1 	bl	8000c7c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  if (TCAL9538RSVR_INIT(&U5, &hi2c4, 0b10, 0b11110000, 0b00001111) != HAL_OK) { Error_Handler(); } // inputs
 80008da:	230f      	movs	r3, #15
 80008dc:	9300      	str	r3, [sp, #0]
 80008de:	23f0      	movs	r3, #240	@ 0xf0
 80008e0:	2202      	movs	r2, #2
 80008e2:	4923      	ldr	r1, [pc, #140]	@ (8000970 <main+0xc0>)
 80008e4:	4823      	ldr	r0, [pc, #140]	@ (8000974 <main+0xc4>)
 80008e6:	f7ff fdfb 	bl	80004e0 <TCAL9538RSVR_INIT>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <main+0x44>
 80008f0:	f000 fba0 	bl	8001034 <Error_Handler>
  uint8_t reg_read_hold;
  TCAL9538RSVR_ReadRegister(&U5, 0x45, &reg_read_hold);
 80008f4:	1dfb      	adds	r3, r7, #7
 80008f6:	461a      	mov	r2, r3
 80008f8:	2145      	movs	r1, #69	@ 0x45
 80008fa:	481e      	ldr	r0, [pc, #120]	@ (8000974 <main+0xc4>)
 80008fc:	f7ff fea1 	bl	8000642 <TCAL9538RSVR_ReadRegister>
  //if (TCAL9538RSVR_INIT(&U16, &hi2c4, 0b01, 0b00111111, 0b11000000) != HAL_OK) { Error_Handler(); }
  if (TCAL9538RSVR_INIT(&U7, &hi2c4, 0x00, 0b00000000, 0b00000000) != HAL_OK) { Error_Handler(); } // output
 8000900:	2300      	movs	r3, #0
 8000902:	9300      	str	r3, [sp, #0]
 8000904:	2300      	movs	r3, #0
 8000906:	2200      	movs	r2, #0
 8000908:	4919      	ldr	r1, [pc, #100]	@ (8000970 <main+0xc0>)
 800090a:	481b      	ldr	r0, [pc, #108]	@ (8000978 <main+0xc8>)
 800090c:	f7ff fde8 	bl	80004e0 <TCAL9538RSVR_INIT>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <main+0x6a>
 8000916:	f000 fb8d 	bl	8001034 <Error_Handler>


  HAL_UART_Receive_IT(&huart4, &uart_rx, 1); // enables uart interrupt, it will call the interrupt when one byte is recieved
 800091a:	2201      	movs	r2, #1
 800091c:	4917      	ldr	r1, [pc, #92]	@ (800097c <main+0xcc>)
 800091e:	4818      	ldr	r0, [pc, #96]	@ (8000980 <main+0xd0>)
 8000920:	f005 fdb2 	bl	8006488 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000924:	f007 f906 	bl	8007b34 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HeartBeat */
  HeartBeatHandle = osThreadNew(StartTask01, NULL, &HeartBeat_attributes);
 8000928:	4a16      	ldr	r2, [pc, #88]	@ (8000984 <main+0xd4>)
 800092a:	2100      	movs	r1, #0
 800092c:	4816      	ldr	r0, [pc, #88]	@ (8000988 <main+0xd8>)
 800092e:	f007 f94b 	bl	8007bc8 <osThreadNew>
 8000932:	4603      	mov	r3, r0
 8000934:	4a15      	ldr	r2, [pc, #84]	@ (800098c <main+0xdc>)
 8000936:	6013      	str	r3, [r2, #0]

  /* creation of Critical_Inputs */
  Critical_InputsHandle = osThreadNew(StartTask02, NULL, &Critical_Inputs_attributes);
 8000938:	4a15      	ldr	r2, [pc, #84]	@ (8000990 <main+0xe0>)
 800093a:	2100      	movs	r1, #0
 800093c:	4815      	ldr	r0, [pc, #84]	@ (8000994 <main+0xe4>)
 800093e:	f007 f943 	bl	8007bc8 <osThreadNew>
 8000942:	4603      	mov	r3, r0
 8000944:	4a14      	ldr	r2, [pc, #80]	@ (8000998 <main+0xe8>)
 8000946:	6013      	str	r3, [r2, #0]

  /* creation of ReadIOExpander */
  ReadIOExpanderHandle = osThreadNew(StartTask03, NULL, &ReadIOExpander_attributes);
 8000948:	4a14      	ldr	r2, [pc, #80]	@ (800099c <main+0xec>)
 800094a:	2100      	movs	r1, #0
 800094c:	4814      	ldr	r0, [pc, #80]	@ (80009a0 <main+0xf0>)
 800094e:	f007 f93b 	bl	8007bc8 <osThreadNew>
 8000952:	4603      	mov	r3, r0
 8000954:	4a13      	ldr	r2, [pc, #76]	@ (80009a4 <main+0xf4>)
 8000956:	6013      	str	r3, [r2, #0]

  /* creation of Outputs_Control */
  Outputs_ControlHandle = osThreadNew(StartTask04, NULL, &Outputs_Control_attributes);
 8000958:	4a13      	ldr	r2, [pc, #76]	@ (80009a8 <main+0xf8>)
 800095a:	2100      	movs	r1, #0
 800095c:	4813      	ldr	r0, [pc, #76]	@ (80009ac <main+0xfc>)
 800095e:	f007 f933 	bl	8007bc8 <osThreadNew>
 8000962:	4603      	mov	r3, r0
 8000964:	4a12      	ldr	r2, [pc, #72]	@ (80009b0 <main+0x100>)
 8000966:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000968:	f007 f908 	bl	8007b7c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <main+0xbc>
 8000970:	2000017c 	.word	0x2000017c
 8000974:	20000268 	.word	0x20000268
 8000978:	20000278 	.word	0x20000278
 800097c:	20000285 	.word	0x20000285
 8000980:	200001d0 	.word	0x200001d0
 8000984:	0800a8e4 	.word	0x0800a8e4
 8000988:	08000e1d 	.word	0x08000e1d
 800098c:	20000258 	.word	0x20000258
 8000990:	0800a908 	.word	0x0800a908
 8000994:	08000e51 	.word	0x08000e51
 8000998:	2000025c 	.word	0x2000025c
 800099c:	0800a92c 	.word	0x0800a92c
 80009a0:	08000efd 	.word	0x08000efd
 80009a4:	20000260 	.word	0x20000260
 80009a8:	0800a950 	.word	0x0800a950
 80009ac:	08000fb9 	.word	0x08000fb9
 80009b0:	20000264 	.word	0x20000264

080009b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b096      	sub	sp, #88	@ 0x58
 80009b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	2244      	movs	r2, #68	@ 0x44
 80009c0:	2100      	movs	r1, #0
 80009c2:	4618      	mov	r0, r3
 80009c4:	f009 fe68 	bl	800a698 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c8:	463b      	mov	r3, r7
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
 80009d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009d6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80009da:	f003 feb1 	bl	8004740 <HAL_PWREx_ControlVoltageScaling>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009e4:	f000 fb26 	bl	8001034 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80009e8:	2310      	movs	r3, #16
 80009ea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009ec:	2301      	movs	r3, #1
 80009ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80009f4:	2360      	movs	r3, #96	@ 0x60
 80009f6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009f8:	2300      	movs	r3, #0
 80009fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4618      	mov	r0, r3
 8000a02:	f003 fef3 	bl	80047ec <HAL_RCC_OscConfig>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000a0c:	f000 fb12 	bl	8001034 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a10:	230f      	movs	r3, #15
 8000a12:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000a14:	2300      	movs	r3, #0
 8000a16:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a20:	2300      	movs	r3, #0
 8000a22:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a24:	463b      	mov	r3, r7
 8000a26:	2100      	movs	r1, #0
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f004 faf9 	bl	8005020 <HAL_RCC_ClockConfig>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000a34:	f000 fafe 	bl	8001034 <Error_Handler>
  }
}
 8000a38:	bf00      	nop
 8000a3a:	3758      	adds	r7, #88	@ 0x58
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08a      	sub	sp, #40	@ 0x28
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
 8000a60:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a62:	4b2f      	ldr	r3, [pc, #188]	@ (8000b20 <MX_ADC1_Init+0xe0>)
 8000a64:	4a2f      	ldr	r2, [pc, #188]	@ (8000b24 <MX_ADC1_Init+0xe4>)
 8000a66:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a68:	4b2d      	ldr	r3, [pc, #180]	@ (8000b20 <MX_ADC1_Init+0xe0>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a6e:	4b2c      	ldr	r3, [pc, #176]	@ (8000b20 <MX_ADC1_Init+0xe0>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a74:	4b2a      	ldr	r3, [pc, #168]	@ (8000b20 <MX_ADC1_Init+0xe0>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a7a:	4b29      	ldr	r3, [pc, #164]	@ (8000b20 <MX_ADC1_Init+0xe0>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a80:	4b27      	ldr	r3, [pc, #156]	@ (8000b20 <MX_ADC1_Init+0xe0>)
 8000a82:	2204      	movs	r2, #4
 8000a84:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a86:	4b26      	ldr	r3, [pc, #152]	@ (8000b20 <MX_ADC1_Init+0xe0>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a8c:	4b24      	ldr	r3, [pc, #144]	@ (8000b20 <MX_ADC1_Init+0xe0>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000a92:	4b23      	ldr	r3, [pc, #140]	@ (8000b20 <MX_ADC1_Init+0xe0>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a98:	4b21      	ldr	r3, [pc, #132]	@ (8000b20 <MX_ADC1_Init+0xe0>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000aa0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b20 <MX_ADC1_Init+0xe0>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000aa6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b20 <MX_ADC1_Init+0xe0>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000aac:	4b1c      	ldr	r3, [pc, #112]	@ (8000b20 <MX_ADC1_Init+0xe0>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ab4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b20 <MX_ADC1_Init+0xe0>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000aba:	4b19      	ldr	r3, [pc, #100]	@ (8000b20 <MX_ADC1_Init+0xe0>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ac2:	4817      	ldr	r0, [pc, #92]	@ (8000b20 <MX_ADC1_Init+0xe0>)
 8000ac4:	f001 f83c 	bl	8001b40 <HAL_ADC_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000ace:	f000 fab1 	bl	8001034 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ad6:	f107 031c 	add.w	r3, r7, #28
 8000ada:	4619      	mov	r1, r3
 8000adc:	4810      	ldr	r0, [pc, #64]	@ (8000b20 <MX_ADC1_Init+0xe0>)
 8000ade:	f002 f91d 	bl	8002d1c <HAL_ADCEx_MultiModeConfigChannel>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000ae8:	f000 faa4 	bl	8001034 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000aec:	4b0e      	ldr	r3, [pc, #56]	@ (8000b28 <MX_ADC1_Init+0xe8>)
 8000aee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000af0:	2306      	movs	r3, #6
 8000af2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000af4:	2300      	movs	r3, #0
 8000af6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000af8:	237f      	movs	r3, #127	@ 0x7f
 8000afa:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000afc:	2304      	movs	r3, #4
 8000afe:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	4619      	mov	r1, r3
 8000b08:	4805      	ldr	r0, [pc, #20]	@ (8000b20 <MX_ADC1_Init+0xe0>)
 8000b0a:	f001 fa9f 	bl	800204c <HAL_ADC_ConfigChannel>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000b14:	f000 fa8e 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b18:	bf00      	nop
 8000b1a:	3728      	adds	r7, #40	@ 0x28
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	2000007c 	.word	0x2000007c
 8000b24:	50040000 	.word	0x50040000
 8000b28:	04300002 	.word	0x04300002

08000b2c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000b30:	4b16      	ldr	r3, [pc, #88]	@ (8000b8c <MX_CAN1_Init+0x60>)
 8000b32:	4a17      	ldr	r2, [pc, #92]	@ (8000b90 <MX_CAN1_Init+0x64>)
 8000b34:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000b36:	4b15      	ldr	r3, [pc, #84]	@ (8000b8c <MX_CAN1_Init+0x60>)
 8000b38:	2210      	movs	r2, #16
 8000b3a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000b3c:	4b13      	ldr	r3, [pc, #76]	@ (8000b8c <MX_CAN1_Init+0x60>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000b42:	4b12      	ldr	r3, [pc, #72]	@ (8000b8c <MX_CAN1_Init+0x60>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000b48:	4b10      	ldr	r3, [pc, #64]	@ (8000b8c <MX_CAN1_Init+0x60>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b8c <MX_CAN1_Init+0x60>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000b54:	4b0d      	ldr	r3, [pc, #52]	@ (8000b8c <MX_CAN1_Init+0x60>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b8c <MX_CAN1_Init+0x60>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000b60:	4b0a      	ldr	r3, [pc, #40]	@ (8000b8c <MX_CAN1_Init+0x60>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000b66:	4b09      	ldr	r3, [pc, #36]	@ (8000b8c <MX_CAN1_Init+0x60>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000b6c:	4b07      	ldr	r3, [pc, #28]	@ (8000b8c <MX_CAN1_Init+0x60>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000b72:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <MX_CAN1_Init+0x60>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000b78:	4804      	ldr	r0, [pc, #16]	@ (8000b8c <MX_CAN1_Init+0x60>)
 8000b7a:	f002 f97f 	bl	8002e7c <HAL_CAN_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000b84:	f000 fa56 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	2000012c 	.word	0x2000012c
 8000b90:	40006400 	.word	0x40006400

08000b94 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000b98:	4b16      	ldr	r3, [pc, #88]	@ (8000bf4 <MX_CAN2_Init+0x60>)
 8000b9a:	4a17      	ldr	r2, [pc, #92]	@ (8000bf8 <MX_CAN2_Init+0x64>)
 8000b9c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000b9e:	4b15      	ldr	r3, [pc, #84]	@ (8000bf4 <MX_CAN2_Init+0x60>)
 8000ba0:	2210      	movs	r2, #16
 8000ba2:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000ba4:	4b13      	ldr	r3, [pc, #76]	@ (8000bf4 <MX_CAN2_Init+0x60>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000baa:	4b12      	ldr	r3, [pc, #72]	@ (8000bf4 <MX_CAN2_Init+0x60>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000bb0:	4b10      	ldr	r3, [pc, #64]	@ (8000bf4 <MX_CAN2_Init+0x60>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf4 <MX_CAN2_Init+0x60>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf4 <MX_CAN2_Init+0x60>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf4 <MX_CAN2_Init+0x60>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf4 <MX_CAN2_Init+0x60>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000bce:	4b09      	ldr	r3, [pc, #36]	@ (8000bf4 <MX_CAN2_Init+0x60>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000bd4:	4b07      	ldr	r3, [pc, #28]	@ (8000bf4 <MX_CAN2_Init+0x60>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000bda:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <MX_CAN2_Init+0x60>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000be0:	4804      	ldr	r0, [pc, #16]	@ (8000bf4 <MX_CAN2_Init+0x60>)
 8000be2:	f002 f94b 	bl	8002e7c <HAL_CAN_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8000bec:	f000 fa22 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000154 	.word	0x20000154
 8000bf8:	40006800 	.word	0x40006800

08000bfc <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000c00:	4b1b      	ldr	r3, [pc, #108]	@ (8000c70 <MX_I2C4_Init+0x74>)
 8000c02:	4a1c      	ldr	r2, [pc, #112]	@ (8000c74 <MX_I2C4_Init+0x78>)
 8000c04:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00100D14;
 8000c06:	4b1a      	ldr	r3, [pc, #104]	@ (8000c70 <MX_I2C4_Init+0x74>)
 8000c08:	4a1b      	ldr	r2, [pc, #108]	@ (8000c78 <MX_I2C4_Init+0x7c>)
 8000c0a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000c0c:	4b18      	ldr	r3, [pc, #96]	@ (8000c70 <MX_I2C4_Init+0x74>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c12:	4b17      	ldr	r3, [pc, #92]	@ (8000c70 <MX_I2C4_Init+0x74>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c18:	4b15      	ldr	r3, [pc, #84]	@ (8000c70 <MX_I2C4_Init+0x74>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000c1e:	4b14      	ldr	r3, [pc, #80]	@ (8000c70 <MX_I2C4_Init+0x74>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c24:	4b12      	ldr	r3, [pc, #72]	@ (8000c70 <MX_I2C4_Init+0x74>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c2a:	4b11      	ldr	r3, [pc, #68]	@ (8000c70 <MX_I2C4_Init+0x74>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c30:	4b0f      	ldr	r3, [pc, #60]	@ (8000c70 <MX_I2C4_Init+0x74>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000c36:	480e      	ldr	r0, [pc, #56]	@ (8000c70 <MX_I2C4_Init+0x74>)
 8000c38:	f002 ff50 	bl	8003adc <HAL_I2C_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000c42:	f000 f9f7 	bl	8001034 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c46:	2100      	movs	r1, #0
 8000c48:	4809      	ldr	r0, [pc, #36]	@ (8000c70 <MX_I2C4_Init+0x74>)
 8000c4a:	f003 fcd3 	bl	80045f4 <HAL_I2CEx_ConfigAnalogFilter>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000c54:	f000 f9ee 	bl	8001034 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4805      	ldr	r0, [pc, #20]	@ (8000c70 <MX_I2C4_Init+0x74>)
 8000c5c:	f003 fd15 	bl	800468a <HAL_I2CEx_ConfigDigitalFilter>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000c66:	f000 f9e5 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	2000017c 	.word	0x2000017c
 8000c74:	40008400 	.word	0x40008400
 8000c78:	00100d14 	.word	0x00100d14

08000c7c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000c80:	4b14      	ldr	r3, [pc, #80]	@ (8000cd4 <MX_UART4_Init+0x58>)
 8000c82:	4a15      	ldr	r2, [pc, #84]	@ (8000cd8 <MX_UART4_Init+0x5c>)
 8000c84:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000c86:	4b13      	ldr	r3, [pc, #76]	@ (8000cd4 <MX_UART4_Init+0x58>)
 8000c88:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000c8c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000c8e:	4b11      	ldr	r3, [pc, #68]	@ (8000cd4 <MX_UART4_Init+0x58>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000c94:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd4 <MX_UART4_Init+0x58>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd4 <MX_UART4_Init+0x58>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd4 <MX_UART4_Init+0x58>)
 8000ca2:	220c      	movs	r2, #12
 8000ca4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd4 <MX_UART4_Init+0x58>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cac:	4b09      	ldr	r3, [pc, #36]	@ (8000cd4 <MX_UART4_Init+0x58>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cb2:	4b08      	ldr	r3, [pc, #32]	@ (8000cd4 <MX_UART4_Init+0x58>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cb8:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <MX_UART4_Init+0x58>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000cbe:	4805      	ldr	r0, [pc, #20]	@ (8000cd4 <MX_UART4_Init+0x58>)
 8000cc0:	f005 fb94 	bl	80063ec <HAL_UART_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000cca:	f000 f9b3 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	200001d0 	.word	0x200001d0
 8000cd8:	40004c00 	.word	0x40004c00

08000cdc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8000d14 <MX_DMA_Init+0x38>)
 8000ce4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ce6:	4a0b      	ldr	r2, [pc, #44]	@ (8000d14 <MX_DMA_Init+0x38>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	6493      	str	r3, [r2, #72]	@ 0x48
 8000cee:	4b09      	ldr	r3, [pc, #36]	@ (8000d14 <MX_DMA_Init+0x38>)
 8000cf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2105      	movs	r1, #5
 8000cfe:	200b      	movs	r0, #11
 8000d00:	f002 fa70 	bl	80031e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d04:	200b      	movs	r0, #11
 8000d06:	f002 fa89 	bl	800321c <HAL_NVIC_EnableIRQ>

}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40021000 	.word	0x40021000

08000d18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b088      	sub	sp, #32
 8000d1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1e:	f107 030c 	add.w	r3, r7, #12
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	609a      	str	r2, [r3, #8]
 8000d2a:	60da      	str	r2, [r3, #12]
 8000d2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2e:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd8 <MX_GPIO_Init+0xc0>)
 8000d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d32:	4a29      	ldr	r2, [pc, #164]	@ (8000dd8 <MX_GPIO_Init+0xc0>)
 8000d34:	f043 0304 	orr.w	r3, r3, #4
 8000d38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d3a:	4b27      	ldr	r3, [pc, #156]	@ (8000dd8 <MX_GPIO_Init+0xc0>)
 8000d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d3e:	f003 0304 	and.w	r3, r3, #4
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d46:	4b24      	ldr	r3, [pc, #144]	@ (8000dd8 <MX_GPIO_Init+0xc0>)
 8000d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d4a:	4a23      	ldr	r2, [pc, #140]	@ (8000dd8 <MX_GPIO_Init+0xc0>)
 8000d4c:	f043 0302 	orr.w	r3, r3, #2
 8000d50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d52:	4b21      	ldr	r3, [pc, #132]	@ (8000dd8 <MX_GPIO_Init+0xc0>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d56:	f003 0302 	and.w	r3, r3, #2
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5e:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd8 <MX_GPIO_Init+0xc0>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d62:	4a1d      	ldr	r2, [pc, #116]	@ (8000dd8 <MX_GPIO_Init+0xc0>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d6a:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd8 <MX_GPIO_Init+0xc0>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	603b      	str	r3, [r7, #0]
 8000d74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OK_LED_GPIO_Port, OK_LED_Pin, GPIO_PIN_RESET);
 8000d76:	2200      	movs	r2, #0
 8000d78:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d80:	f002 fe62 	bl	8003a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Alert1_Pin */
  GPIO_InitStruct.Pin = Alert1_Pin;
 8000d84:	2304      	movs	r3, #4
 8000d86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d88:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Alert1_GPIO_Port, &GPIO_InitStruct);
 8000d92:	f107 030c 	add.w	r3, r7, #12
 8000d96:	4619      	mov	r1, r3
 8000d98:	4810      	ldr	r0, [pc, #64]	@ (8000ddc <MX_GPIO_Init+0xc4>)
 8000d9a:	f002 fcc3 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pin : OK_LED_Pin */
  GPIO_InitStruct.Pin = OK_LED_Pin;
 8000d9e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000da2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da4:	2301      	movs	r3, #1
 8000da6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(OK_LED_GPIO_Port, &GPIO_InitStruct);
 8000db0:	f107 030c 	add.w	r3, r7, #12
 8000db4:	4619      	mov	r1, r3
 8000db6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dba:	f002 fcb3 	bl	8003724 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2105      	movs	r1, #5
 8000dc2:	2008      	movs	r0, #8
 8000dc4:	f002 fa0e 	bl	80031e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000dc8:	2008      	movs	r0, #8
 8000dca:	f002 fa27 	bl	800321c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dce:	bf00      	nop
 8000dd0:	3720      	adds	r7, #32
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	48000800 	.word	0x48000800

08000de0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  // code for handling the data received over uart
  if(huart->Instance == UART4)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a07      	ldr	r2, [pc, #28]	@ (8000e0c <HAL_UART_RxCpltCallback+0x2c>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d103      	bne.n	8000dfa <HAL_UART_RxCpltCallback+0x1a>
    }
    */



    prev_uart_rx = uart_rx;
 8000df2:	4b07      	ldr	r3, [pc, #28]	@ (8000e10 <HAL_UART_RxCpltCallback+0x30>)
 8000df4:	781a      	ldrb	r2, [r3, #0]
 8000df6:	4b07      	ldr	r3, [pc, #28]	@ (8000e14 <HAL_UART_RxCpltCallback+0x34>)
 8000df8:	701a      	strb	r2, [r3, #0]
  }

  HAL_UART_Receive_IT(&huart4, &uart_rx, 1); // reenables uart interrupt
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	4904      	ldr	r1, [pc, #16]	@ (8000e10 <HAL_UART_RxCpltCallback+0x30>)
 8000dfe:	4806      	ldr	r0, [pc, #24]	@ (8000e18 <HAL_UART_RxCpltCallback+0x38>)
 8000e00:	f005 fb42 	bl	8006488 <HAL_UART_Receive_IT>
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40004c00 	.word	0x40004c00
 8000e10:	20000285 	.word	0x20000285
 8000e14:	20000286 	.word	0x20000286
 8000e18:	200001d0 	.word	0x200001d0

08000e1c <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	uint8_t var = 0b11111111;
 8000e24:	23ff      	movs	r3, #255	@ 0xff
 8000e26:	73fb      	strb	r3, [r7, #15]
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, OK_LED_Pin);
 8000e28:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e30:	f002 fe22 	bl	8003a78 <HAL_GPIO_TogglePin>
	//var = ~var;
	TCAL9538RSVR_SetOutput(&U7, &var);
 8000e34:	f107 030f 	add.w	r3, r7, #15
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4804      	ldr	r0, [pc, #16]	@ (8000e4c <StartTask01+0x30>)
 8000e3c:	f7ff fbf2 	bl	8000624 <TCAL9538RSVR_SetOutput>
    osDelay(500);
 8000e40:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e44:	f006 ff52 	bl	8007cec <osDelay>
	HAL_GPIO_TogglePin(GPIOA, OK_LED_Pin);
 8000e48:	bf00      	nop
 8000e4a:	e7ed      	b.n	8000e28 <StartTask01+0xc>
 8000e4c:	20000278 	.word	0x20000278

08000e50 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b092      	sub	sp, #72	@ 0x48
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */

  uint16_t adc_var[10];
  uint16_t adc_var_avg = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

  // Start ADC with DMA
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 8000e5e:	220a      	movs	r2, #10
 8000e60:	4922      	ldr	r1, [pc, #136]	@ (8000eec <StartTask02+0x9c>)
 8000e62:	4823      	ldr	r0, [pc, #140]	@ (8000ef0 <StartTask02+0xa0>)
 8000e64:	f000 ffc0 	bl	8001de8 <HAL_ADC_Start_DMA>
  // Start ADC with DMA
  while (!(dma_flag));
 8000e68:	bf00      	nop
 8000e6a:	4b22      	ldr	r3, [pc, #136]	@ (8000ef4 <StartTask02+0xa4>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d0fa      	beq.n	8000e6a <StartTask02+0x1a>

  // Stop ADC with DMA
  HAL_ADC_Stop_DMA(&hadc1);
 8000e74:	481e      	ldr	r0, [pc, #120]	@ (8000ef0 <StartTask02+0xa0>)
 8000e76:	f001 f873 	bl	8001f60 <HAL_ADC_Stop_DMA>
  dma_flag = 0;
 8000e7a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ef4 <StartTask02+0xa4>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	701a      	strb	r2, [r3, #0]
  // Copy ADC buffer and compute average
  for (int i = 0; i < ADC_BUF_LEN; i++)
 8000e80:	2300      	movs	r3, #0
 8000e82:	643b      	str	r3, [r7, #64]	@ 0x40
 8000e84:	e00b      	b.n	8000e9e <StartTask02+0x4e>
  {
      adc_var_avg += adc_buf[i];
 8000e86:	4a19      	ldr	r2, [pc, #100]	@ (8000eec <StartTask02+0x9c>)
 8000e88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000e8a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000e8e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000e92:	4413      	add	r3, r2
 8000e94:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  for (int i = 0; i < ADC_BUF_LEN; i++)
 8000e98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8000e9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000ea0:	2b09      	cmp	r3, #9
 8000ea2:	ddf0      	ble.n	8000e86 <StartTask02+0x36>
  }
  adc_var_avg /= ADC_BUF_LEN;
 8000ea4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000ea8:	4a13      	ldr	r2, [pc, #76]	@ (8000ef8 <StartTask02+0xa8>)
 8000eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8000eae:	08db      	lsrs	r3, r3, #3
 8000eb0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  CAN_TxHeaderTypeDef TxHeader;
  uint8_t adc_data[2];
  uint32_t TxMailbox;
  uint8_t can_data[5];

  TxHeader.StdId = 0x0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]
  TxHeader.DLC = 5;
 8000eb8:	2305      	movs	r3, #5
 8000eba:	627b      	str	r3, [r7, #36]	@ 0x24

  adc_data[0] = adc_var_avg & 0xFF;
 8000ebc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	743b      	strb	r3, [r7, #16]
  adc_data[1] = (adc_var_avg >> 8) & 0x0F;
 8000ec4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000ec8:	0a1b      	lsrs	r3, r3, #8
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	f003 030f 	and.w	r3, r3, #15
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	747b      	strb	r3, [r7, #17]

  can_data[0] = TxHeader.StdId;
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	723b      	strb	r3, [r7, #8]
  can_data[1] = adc_data[0];
 8000edc:	7c3b      	ldrb	r3, [r7, #16]
 8000ede:	727b      	strb	r3, [r7, #9]
  can_data[2] = adc_data[1];
 8000ee0:	7c7b      	ldrb	r3, [r7, #17]
 8000ee2:	72bb      	strb	r3, [r7, #10]


  for (;;)
  {
    // Wait until the ADC DMA completes
    osDelay(10); // Adjust delay if necessary
 8000ee4:	200a      	movs	r0, #10
 8000ee6:	f006 ff01 	bl	8007cec <osDelay>
 8000eea:	e7fb      	b.n	8000ee4 <StartTask02+0x94>
 8000eec:	20000288 	.word	0x20000288
 8000ef0:	2000007c 	.word	0x2000007c
 8000ef4:	2000029c 	.word	0x2000029c
 8000ef8:	cccccccd 	.word	0xcccccccd

08000efc <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08c      	sub	sp, #48	@ 0x30
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */



	CAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData[8] = { 0 };
 8000f04:	2300      	movs	r3, #0
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	2300      	movs	r3, #0
 8000f0a:	613b      	str	r3, [r7, #16]
	uint32_t TxMailbox;

	TxHeader.IDE = CAN_ID_STD; // Standard ID (not extended)
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61fb      	str	r3, [r7, #28]
	TxHeader.StdId = 0x3FF; // 11 bit Identifier !!Change!!
 8000f10:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8000f14:	617b      	str	r3, [r7, #20]
	TxHeader.RTR = CAN_RTR_DATA; // Std RTR Data frame
 8000f16:	2300      	movs	r3, #0
 8000f18:	623b      	str	r3, [r7, #32]
	TxHeader.DLC = 8; // 8 bytes being transmitted
 8000f1a:	2308      	movs	r3, #8
 8000f1c:	627b      	str	r3, [r7, #36]	@ 0x24

	Update_CAN_Message1(TxData, &U5.portValues, &U16.portValues);
 8000f1e:	f107 030c 	add.w	r3, r7, #12
 8000f22:	4a1d      	ldr	r2, [pc, #116]	@ (8000f98 <StartTask03+0x9c>)
 8000f24:	491d      	ldr	r1, [pc, #116]	@ (8000f9c <StartTask03+0xa0>)
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff fbc6 	bl	80006b8 <Update_CAN_Message1>
	stableInput1 = U5.portValues;
 8000f2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa0 <StartTask03+0xa4>)
 8000f2e:	795a      	ldrb	r2, [r3, #5]
 8000f30:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa4 <StartTask03+0xa8>)
 8000f32:	701a      	strb	r2, [r3, #0]
	stableInput2 = U16.portValues;
 8000f34:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa8 <StartTask03+0xac>)
 8000f36:	795a      	ldrb	r2, [r3, #5]
 8000f38:	4b1c      	ldr	r3, [pc, #112]	@ (8000fac <StartTask03+0xb0>)
 8000f3a:	701a      	strb	r2, [r3, #0]

	/* Infinite loop */
	for(;;)
	{
	  // Read TCAL Input and update flags
	  if (GPIO_Interrupt_Triggered != 0)
 8000f3c:	4b1c      	ldr	r3, [pc, #112]	@ (8000fb0 <StartTask03+0xb4>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d025      	beq.n	8000f90 <StartTask03+0x94>
	  {
		  if (TCAL9538RSVR_HandleInterrupt(&U5) != HAL_OK){ Error_Handler(); }
 8000f44:	4816      	ldr	r0, [pc, #88]	@ (8000fa0 <StartTask03+0xa4>)
 8000f46:	f7ff fb36 	bl	80005b6 <TCAL9538RSVR_HandleInterrupt>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <StartTask03+0x58>
 8000f50:	f000 f870 	bl	8001034 <Error_Handler>
		  //if (TCAL9538RSVR_HandleInterrupt(&U16) != HAL_OK){ Error_Handler(); }

		  uint8_t newInput1 = U5.portValues;
 8000f54:	4b12      	ldr	r3, [pc, #72]	@ (8000fa0 <StartTask03+0xa4>)
 8000f56:	795b      	ldrb	r3, [r3, #5]
 8000f58:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		  uint8_t newInput2 = U16.portValues;
 8000f5c:	4b12      	ldr	r3, [pc, #72]	@ (8000fa8 <StartTask03+0xac>)
 8000f5e:	795b      	ldrb	r3, [r3, #5]
 8000f60:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

		  stableInput1 = updateDebounce(stableInput1, newInput1, &debounceCount1);
 8000f64:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa4 <StartTask03+0xa8>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8000f6c:	4a11      	ldr	r2, [pc, #68]	@ (8000fb4 <StartTask03+0xb8>)
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff fc68 	bl	8000844 <updateDebounce>
 8000f74:	4603      	mov	r3, r0
 8000f76:	461a      	mov	r2, r3
 8000f78:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa4 <StartTask03+0xa8>)
 8000f7a:	701a      	strb	r2, [r3, #0]
		  //stableInput2 = updateDebounce(stableInput2, newInput2, &debounceCount2);

		  Update_CAN_Message1(TxData, &U5.portValues, &U16.portValues);
 8000f7c:	f107 030c 	add.w	r3, r7, #12
 8000f80:	4a05      	ldr	r2, [pc, #20]	@ (8000f98 <StartTask03+0x9c>)
 8000f82:	4906      	ldr	r1, [pc, #24]	@ (8000f9c <StartTask03+0xa0>)
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff fb97 	bl	80006b8 <Update_CAN_Message1>

		  GPIO_Interrupt_Triggered = 0;
 8000f8a:	4b09      	ldr	r3, [pc, #36]	@ (8000fb0 <StartTask03+0xb4>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	701a      	strb	r2, [r3, #0]
	  //while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
//	  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
//	  {
//		  Error_Handler();
//	  }
	  osDelay(1);
 8000f90:	2001      	movs	r0, #1
 8000f92:	f006 feab 	bl	8007cec <osDelay>
	  if (GPIO_Interrupt_Triggered != 0)
 8000f96:	e7d1      	b.n	8000f3c <StartTask03+0x40>
 8000f98:	20000275 	.word	0x20000275
 8000f9c:	2000026d 	.word	0x2000026d
 8000fa0:	20000268 	.word	0x20000268
 8000fa4:	20000281 	.word	0x20000281
 8000fa8:	20000270 	.word	0x20000270
 8000fac:	20000282 	.word	0x20000282
 8000fb0:	20000280 	.word	0x20000280
 8000fb4:	20000283 	.word	0x20000283

08000fb8 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  for(;;)
  {

    // outputPortState needs to be updated somewhere here / in a uart interrupt

    if(TCAL9538RSVR_SetOutput(&U7, &outputPortState) != HAL_OK)
 8000fc0:	4906      	ldr	r1, [pc, #24]	@ (8000fdc <StartTask04+0x24>)
 8000fc2:	4807      	ldr	r0, [pc, #28]	@ (8000fe0 <StartTask04+0x28>)
 8000fc4:	f7ff fb2e 	bl	8000624 <TCAL9538RSVR_SetOutput>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <StartTask04+0x1a>
    {
    	Error_Handler();
 8000fce:	f000 f831 	bl	8001034 <Error_Handler>
    }

    osDelay(50);
 8000fd2:	2032      	movs	r0, #50	@ 0x32
 8000fd4:	f006 fe8a 	bl	8007cec <osDelay>
    if(TCAL9538RSVR_SetOutput(&U7, &outputPortState) != HAL_OK)
 8000fd8:	e7f2      	b.n	8000fc0 <StartTask04+0x8>
 8000fda:	bf00      	nop
 8000fdc:	20000284 	.word	0x20000284
 8000fe0:	20000278 	.word	0x20000278

08000fe4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a04      	ldr	r2, [pc, #16]	@ (8001004 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d101      	bne.n	8000ffa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ff6:	f000 fb4d 	bl	8001694 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40000400 	.word	0x40000400

08001008 <HAL_ADC_ConvCpltCallback>:
/* USER CODE BEGIN ADC CALLBACK */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a05      	ldr	r2, [pc, #20]	@ (800102c <HAL_ADC_ConvCpltCallback+0x24>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d102      	bne.n	8001020 <HAL_ADC_ConvCpltCallback+0x18>
    {
    	dma_flag = 1;
 800101a:	4b05      	ldr	r3, [pc, #20]	@ (8001030 <HAL_ADC_ConvCpltCallback+0x28>)
 800101c:	2201      	movs	r2, #1
 800101e:	701a      	strb	r2, [r3, #0]
    }
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	50040000 	.word	0x50040000
 8001030:	2000029c 	.word	0x2000029c

08001034 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001038:	b672      	cpsid	i
}
 800103a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800103c:	bf00      	nop
 800103e:	e7fd      	b.n	800103c <Error_Handler+0x8>

08001040 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001046:	4b11      	ldr	r3, [pc, #68]	@ (800108c <HAL_MspInit+0x4c>)
 8001048:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800104a:	4a10      	ldr	r2, [pc, #64]	@ (800108c <HAL_MspInit+0x4c>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6613      	str	r3, [r2, #96]	@ 0x60
 8001052:	4b0e      	ldr	r3, [pc, #56]	@ (800108c <HAL_MspInit+0x4c>)
 8001054:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800105e:	4b0b      	ldr	r3, [pc, #44]	@ (800108c <HAL_MspInit+0x4c>)
 8001060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001062:	4a0a      	ldr	r2, [pc, #40]	@ (800108c <HAL_MspInit+0x4c>)
 8001064:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001068:	6593      	str	r3, [r2, #88]	@ 0x58
 800106a:	4b08      	ldr	r3, [pc, #32]	@ (800108c <HAL_MspInit+0x4c>)
 800106c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800106e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001072:	603b      	str	r3, [r7, #0]
 8001074:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	210f      	movs	r1, #15
 800107a:	f06f 0001 	mvn.w	r0, #1
 800107e:	f002 f8b1 	bl	80031e4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40021000 	.word	0x40021000

08001090 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b0ac      	sub	sp, #176	@ 0xb0
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010a8:	f107 0310 	add.w	r3, r7, #16
 80010ac:	228c      	movs	r2, #140	@ 0x8c
 80010ae:	2100      	movs	r1, #0
 80010b0:	4618      	mov	r0, r3
 80010b2:	f009 faf1 	bl	800a698 <memset>
  if(hadc->Instance==ADC1)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a35      	ldr	r2, [pc, #212]	@ (8001190 <HAL_ADC_MspInit+0x100>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d163      	bne.n	8001188 <HAL_ADC_MspInit+0xf8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010c0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80010c4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80010c6:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80010ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010ce:	f107 0310 	add.w	r3, r7, #16
 80010d2:	4618      	mov	r0, r3
 80010d4:	f004 f9fa 	bl	80054cc <HAL_RCCEx_PeriphCLKConfig>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80010de:	f7ff ffa9 	bl	8001034 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001194 <HAL_ADC_MspInit+0x104>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e6:	4a2b      	ldr	r2, [pc, #172]	@ (8001194 <HAL_ADC_MspInit+0x104>)
 80010e8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ee:	4b29      	ldr	r3, [pc, #164]	@ (8001194 <HAL_ADC_MspInit+0x104>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fa:	4b26      	ldr	r3, [pc, #152]	@ (8001194 <HAL_ADC_MspInit+0x104>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fe:	4a25      	ldr	r2, [pc, #148]	@ (8001194 <HAL_ADC_MspInit+0x104>)
 8001100:	f043 0304 	orr.w	r3, r3, #4
 8001104:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001106:	4b23      	ldr	r3, [pc, #140]	@ (8001194 <HAL_ADC_MspInit+0x104>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110a:	f003 0304 	and.w	r3, r3, #4
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001112:	2301      	movs	r3, #1
 8001114:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001118:	2303      	movs	r3, #3
 800111a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001124:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001128:	4619      	mov	r1, r3
 800112a:	481b      	ldr	r0, [pc, #108]	@ (8001198 <HAL_ADC_MspInit+0x108>)
 800112c:	f002 fafa 	bl	8003724 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001130:	4b1a      	ldr	r3, [pc, #104]	@ (800119c <HAL_ADC_MspInit+0x10c>)
 8001132:	4a1b      	ldr	r2, [pc, #108]	@ (80011a0 <HAL_ADC_MspInit+0x110>)
 8001134:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001136:	4b19      	ldr	r3, [pc, #100]	@ (800119c <HAL_ADC_MspInit+0x10c>)
 8001138:	2200      	movs	r2, #0
 800113a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800113c:	4b17      	ldr	r3, [pc, #92]	@ (800119c <HAL_ADC_MspInit+0x10c>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001142:	4b16      	ldr	r3, [pc, #88]	@ (800119c <HAL_ADC_MspInit+0x10c>)
 8001144:	2200      	movs	r2, #0
 8001146:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001148:	4b14      	ldr	r3, [pc, #80]	@ (800119c <HAL_ADC_MspInit+0x10c>)
 800114a:	2280      	movs	r2, #128	@ 0x80
 800114c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800114e:	4b13      	ldr	r3, [pc, #76]	@ (800119c <HAL_ADC_MspInit+0x10c>)
 8001150:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001154:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001156:	4b11      	ldr	r3, [pc, #68]	@ (800119c <HAL_ADC_MspInit+0x10c>)
 8001158:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800115c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800115e:	4b0f      	ldr	r3, [pc, #60]	@ (800119c <HAL_ADC_MspInit+0x10c>)
 8001160:	2220      	movs	r2, #32
 8001162:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001164:	4b0d      	ldr	r3, [pc, #52]	@ (800119c <HAL_ADC_MspInit+0x10c>)
 8001166:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800116a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800116c:	480b      	ldr	r0, [pc, #44]	@ (800119c <HAL_ADC_MspInit+0x10c>)
 800116e:	f002 f863 	bl	8003238 <HAL_DMA_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <HAL_ADC_MspInit+0xec>
    {
      Error_Handler();
 8001178:	f7ff ff5c 	bl	8001034 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a07      	ldr	r2, [pc, #28]	@ (800119c <HAL_ADC_MspInit+0x10c>)
 8001180:	651a      	str	r2, [r3, #80]	@ 0x50
 8001182:	4a06      	ldr	r2, [pc, #24]	@ (800119c <HAL_ADC_MspInit+0x10c>)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001188:	bf00      	nop
 800118a:	37b0      	adds	r7, #176	@ 0xb0
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	50040000 	.word	0x50040000
 8001194:	40021000 	.word	0x40021000
 8001198:	48000800 	.word	0x48000800
 800119c:	200000e4 	.word	0x200000e4
 80011a0:	40020008 	.word	0x40020008

080011a4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08c      	sub	sp, #48	@ 0x30
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 031c 	add.w	r3, r7, #28
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a45      	ldr	r2, [pc, #276]	@ (80012d8 <HAL_CAN_MspInit+0x134>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d132      	bne.n	800122c <HAL_CAN_MspInit+0x88>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80011c6:	4b45      	ldr	r3, [pc, #276]	@ (80012dc <HAL_CAN_MspInit+0x138>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	3301      	adds	r3, #1
 80011cc:	4a43      	ldr	r2, [pc, #268]	@ (80012dc <HAL_CAN_MspInit+0x138>)
 80011ce:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80011d0:	4b42      	ldr	r3, [pc, #264]	@ (80012dc <HAL_CAN_MspInit+0x138>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d10b      	bne.n	80011f0 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80011d8:	4b41      	ldr	r3, [pc, #260]	@ (80012e0 <HAL_CAN_MspInit+0x13c>)
 80011da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011dc:	4a40      	ldr	r2, [pc, #256]	@ (80012e0 <HAL_CAN_MspInit+0x13c>)
 80011de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80011e4:	4b3e      	ldr	r3, [pc, #248]	@ (80012e0 <HAL_CAN_MspInit+0x13c>)
 80011e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011ec:	61bb      	str	r3, [r7, #24]
 80011ee:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f0:	4b3b      	ldr	r3, [pc, #236]	@ (80012e0 <HAL_CAN_MspInit+0x13c>)
 80011f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f4:	4a3a      	ldr	r2, [pc, #232]	@ (80012e0 <HAL_CAN_MspInit+0x13c>)
 80011f6:	f043 0302 	orr.w	r3, r3, #2
 80011fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011fc:	4b38      	ldr	r3, [pc, #224]	@ (80012e0 <HAL_CAN_MspInit+0x13c>)
 80011fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001200:	f003 0302 	and.w	r3, r3, #2
 8001204:	617b      	str	r3, [r7, #20]
 8001206:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001208:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800120c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120e:	2302      	movs	r3, #2
 8001210:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001216:	2303      	movs	r3, #3
 8001218:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800121a:	2309      	movs	r3, #9
 800121c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121e:	f107 031c 	add.w	r3, r7, #28
 8001222:	4619      	mov	r1, r3
 8001224:	482f      	ldr	r0, [pc, #188]	@ (80012e4 <HAL_CAN_MspInit+0x140>)
 8001226:	f002 fa7d 	bl	8003724 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 800122a:	e051      	b.n	80012d0 <HAL_CAN_MspInit+0x12c>
  else if(hcan->Instance==CAN2)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a2d      	ldr	r2, [pc, #180]	@ (80012e8 <HAL_CAN_MspInit+0x144>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d14c      	bne.n	80012d0 <HAL_CAN_MspInit+0x12c>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001236:	4b2a      	ldr	r3, [pc, #168]	@ (80012e0 <HAL_CAN_MspInit+0x13c>)
 8001238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800123a:	4a29      	ldr	r2, [pc, #164]	@ (80012e0 <HAL_CAN_MspInit+0x13c>)
 800123c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001240:	6593      	str	r3, [r2, #88]	@ 0x58
 8001242:	4b27      	ldr	r3, [pc, #156]	@ (80012e0 <HAL_CAN_MspInit+0x13c>)
 8001244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001246:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800124e:	4b23      	ldr	r3, [pc, #140]	@ (80012dc <HAL_CAN_MspInit+0x138>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	3301      	adds	r3, #1
 8001254:	4a21      	ldr	r2, [pc, #132]	@ (80012dc <HAL_CAN_MspInit+0x138>)
 8001256:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001258:	4b20      	ldr	r3, [pc, #128]	@ (80012dc <HAL_CAN_MspInit+0x138>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d10b      	bne.n	8001278 <HAL_CAN_MspInit+0xd4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001260:	4b1f      	ldr	r3, [pc, #124]	@ (80012e0 <HAL_CAN_MspInit+0x13c>)
 8001262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001264:	4a1e      	ldr	r2, [pc, #120]	@ (80012e0 <HAL_CAN_MspInit+0x13c>)
 8001266:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800126a:	6593      	str	r3, [r2, #88]	@ 0x58
 800126c:	4b1c      	ldr	r3, [pc, #112]	@ (80012e0 <HAL_CAN_MspInit+0x13c>)
 800126e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001270:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001278:	4b19      	ldr	r3, [pc, #100]	@ (80012e0 <HAL_CAN_MspInit+0x13c>)
 800127a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127c:	4a18      	ldr	r2, [pc, #96]	@ (80012e0 <HAL_CAN_MspInit+0x13c>)
 800127e:	f043 0302 	orr.w	r3, r3, #2
 8001282:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001284:	4b16      	ldr	r3, [pc, #88]	@ (80012e0 <HAL_CAN_MspInit+0x13c>)
 8001286:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001290:	2320      	movs	r3, #32
 8001292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129c:	2303      	movs	r3, #3
 800129e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_CAN2;
 80012a0:	2303      	movs	r3, #3
 80012a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a4:	f107 031c 	add.w	r3, r7, #28
 80012a8:	4619      	mov	r1, r3
 80012aa:	480e      	ldr	r0, [pc, #56]	@ (80012e4 <HAL_CAN_MspInit+0x140>)
 80012ac:	f002 fa3a 	bl	8003724 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012b0:	2340      	movs	r3, #64	@ 0x40
 80012b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b4:	2302      	movs	r3, #2
 80012b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012bc:	2303      	movs	r3, #3
 80012be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN2;
 80012c0:	2308      	movs	r3, #8
 80012c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c4:	f107 031c 	add.w	r3, r7, #28
 80012c8:	4619      	mov	r1, r3
 80012ca:	4806      	ldr	r0, [pc, #24]	@ (80012e4 <HAL_CAN_MspInit+0x140>)
 80012cc:	f002 fa2a 	bl	8003724 <HAL_GPIO_Init>
}
 80012d0:	bf00      	nop
 80012d2:	3730      	adds	r7, #48	@ 0x30
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40006400 	.word	0x40006400
 80012dc:	200002a0 	.word	0x200002a0
 80012e0:	40021000 	.word	0x40021000
 80012e4:	48000400 	.word	0x48000400
 80012e8:	40006800 	.word	0x40006800

080012ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b0ac      	sub	sp, #176	@ 0xb0
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001304:	f107 0310 	add.w	r3, r7, #16
 8001308:	228c      	movs	r2, #140	@ 0x8c
 800130a:	2100      	movs	r1, #0
 800130c:	4618      	mov	r0, r3
 800130e:	f009 f9c3 	bl	800a698 <memset>
  if(hi2c->Instance==I2C4)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a22      	ldr	r2, [pc, #136]	@ (80013a0 <HAL_I2C_MspInit+0xb4>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d13c      	bne.n	8001396 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800131c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001320:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001322:	2300      	movs	r3, #0
 8001324:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001326:	f107 0310 	add.w	r3, r7, #16
 800132a:	4618      	mov	r0, r3
 800132c:	f004 f8ce 	bl	80054cc <HAL_RCCEx_PeriphCLKConfig>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001336:	f7ff fe7d 	bl	8001034 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800133a:	4b1a      	ldr	r3, [pc, #104]	@ (80013a4 <HAL_I2C_MspInit+0xb8>)
 800133c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133e:	4a19      	ldr	r2, [pc, #100]	@ (80013a4 <HAL_I2C_MspInit+0xb8>)
 8001340:	f043 0302 	orr.w	r3, r3, #2
 8001344:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001346:	4b17      	ldr	r3, [pc, #92]	@ (80013a4 <HAL_I2C_MspInit+0xb8>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PB10     ------> I2C4_SCL
    PB11     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001352:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001356:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800135a:	2312      	movs	r3, #18
 800135c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001366:	2303      	movs	r3, #3
 8001368:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 800136c:	2303      	movs	r3, #3
 800136e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001372:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001376:	4619      	mov	r1, r3
 8001378:	480b      	ldr	r0, [pc, #44]	@ (80013a8 <HAL_I2C_MspInit+0xbc>)
 800137a:	f002 f9d3 	bl	8003724 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 800137e:	4b09      	ldr	r3, [pc, #36]	@ (80013a4 <HAL_I2C_MspInit+0xb8>)
 8001380:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001382:	4a08      	ldr	r2, [pc, #32]	@ (80013a4 <HAL_I2C_MspInit+0xb8>)
 8001384:	f043 0302 	orr.w	r3, r3, #2
 8001388:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800138a:	4b06      	ldr	r3, [pc, #24]	@ (80013a4 <HAL_I2C_MspInit+0xb8>)
 800138c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 8001396:	bf00      	nop
 8001398:	37b0      	adds	r7, #176	@ 0xb0
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40008400 	.word	0x40008400
 80013a4:	40021000 	.word	0x40021000
 80013a8:	48000400 	.word	0x48000400

080013ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b0ac      	sub	sp, #176	@ 0xb0
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013c4:	f107 0310 	add.w	r3, r7, #16
 80013c8:	228c      	movs	r2, #140	@ 0x8c
 80013ca:	2100      	movs	r1, #0
 80013cc:	4618      	mov	r0, r3
 80013ce:	f009 f963 	bl	800a698 <memset>
  if(huart->Instance==UART4)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a25      	ldr	r2, [pc, #148]	@ (800146c <HAL_UART_MspInit+0xc0>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d143      	bne.n	8001464 <HAL_UART_MspInit+0xb8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80013dc:	2308      	movs	r3, #8
 80013de:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80013e0:	2300      	movs	r3, #0
 80013e2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013e4:	f107 0310 	add.w	r3, r7, #16
 80013e8:	4618      	mov	r0, r3
 80013ea:	f004 f86f 	bl	80054cc <HAL_RCCEx_PeriphCLKConfig>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80013f4:	f7ff fe1e 	bl	8001034 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80013f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001470 <HAL_UART_MspInit+0xc4>)
 80013fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013fc:	4a1c      	ldr	r2, [pc, #112]	@ (8001470 <HAL_UART_MspInit+0xc4>)
 80013fe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001402:	6593      	str	r3, [r2, #88]	@ 0x58
 8001404:	4b1a      	ldr	r3, [pc, #104]	@ (8001470 <HAL_UART_MspInit+0xc4>)
 8001406:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001408:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001410:	4b17      	ldr	r3, [pc, #92]	@ (8001470 <HAL_UART_MspInit+0xc4>)
 8001412:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001414:	4a16      	ldr	r2, [pc, #88]	@ (8001470 <HAL_UART_MspInit+0xc4>)
 8001416:	f043 0304 	orr.w	r3, r3, #4
 800141a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800141c:	4b14      	ldr	r3, [pc, #80]	@ (8001470 <HAL_UART_MspInit+0xc4>)
 800141e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	60bb      	str	r3, [r7, #8]
 8001426:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001428:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800142c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001430:	2302      	movs	r3, #2
 8001432:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143c:	2303      	movs	r3, #3
 800143e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001442:	2308      	movs	r3, #8
 8001444:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001448:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800144c:	4619      	mov	r1, r3
 800144e:	4809      	ldr	r0, [pc, #36]	@ (8001474 <HAL_UART_MspInit+0xc8>)
 8001450:	f002 f968 	bl	8003724 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001454:	2200      	movs	r2, #0
 8001456:	2105      	movs	r1, #5
 8001458:	2034      	movs	r0, #52	@ 0x34
 800145a:	f001 fec3 	bl	80031e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800145e:	2034      	movs	r0, #52	@ 0x34
 8001460:	f001 fedc 	bl	800321c <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 8001464:	bf00      	nop
 8001466:	37b0      	adds	r7, #176	@ 0xb0
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40004c00 	.word	0x40004c00
 8001470:	40021000 	.word	0x40021000
 8001474:	48000800 	.word	0x48000800

08001478 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08e      	sub	sp, #56	@ 0x38
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001480:	2300      	movs	r3, #0
 8001482:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001486:	4b34      	ldr	r3, [pc, #208]	@ (8001558 <HAL_InitTick+0xe0>)
 8001488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800148a:	4a33      	ldr	r2, [pc, #204]	@ (8001558 <HAL_InitTick+0xe0>)
 800148c:	f043 0302 	orr.w	r3, r3, #2
 8001490:	6593      	str	r3, [r2, #88]	@ 0x58
 8001492:	4b31      	ldr	r3, [pc, #196]	@ (8001558 <HAL_InitTick+0xe0>)
 8001494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800149e:	f107 0210 	add.w	r2, r7, #16
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	4611      	mov	r1, r2
 80014a8:	4618      	mov	r0, r3
 80014aa:	f003 ff7d 	bl	80053a8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80014ae:	6a3b      	ldr	r3, [r7, #32]
 80014b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80014b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d103      	bne.n	80014c0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80014b8:	f003 ff4a 	bl	8005350 <HAL_RCC_GetPCLK1Freq>
 80014bc:	6378      	str	r0, [r7, #52]	@ 0x34
 80014be:	e004      	b.n	80014ca <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80014c0:	f003 ff46 	bl	8005350 <HAL_RCC_GetPCLK1Freq>
 80014c4:	4603      	mov	r3, r0
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014cc:	4a23      	ldr	r2, [pc, #140]	@ (800155c <HAL_InitTick+0xe4>)
 80014ce:	fba2 2303 	umull	r2, r3, r2, r3
 80014d2:	0c9b      	lsrs	r3, r3, #18
 80014d4:	3b01      	subs	r3, #1
 80014d6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80014d8:	4b21      	ldr	r3, [pc, #132]	@ (8001560 <HAL_InitTick+0xe8>)
 80014da:	4a22      	ldr	r2, [pc, #136]	@ (8001564 <HAL_InitTick+0xec>)
 80014dc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80014de:	4b20      	ldr	r3, [pc, #128]	@ (8001560 <HAL_InitTick+0xe8>)
 80014e0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80014e4:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80014e6:	4a1e      	ldr	r2, [pc, #120]	@ (8001560 <HAL_InitTick+0xe8>)
 80014e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014ea:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80014ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001560 <HAL_InitTick+0xe8>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001560 <HAL_InitTick+0xe8>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f8:	4b19      	ldr	r3, [pc, #100]	@ (8001560 <HAL_InitTick+0xe8>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 80014fe:	4818      	ldr	r0, [pc, #96]	@ (8001560 <HAL_InitTick+0xe8>)
 8001500:	f004 fcae 	bl	8005e60 <HAL_TIM_Base_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800150a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800150e:	2b00      	cmp	r3, #0
 8001510:	d11b      	bne.n	800154a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8001512:	4813      	ldr	r0, [pc, #76]	@ (8001560 <HAL_InitTick+0xe8>)
 8001514:	f004 fd06 	bl	8005f24 <HAL_TIM_Base_Start_IT>
 8001518:	4603      	mov	r3, r0
 800151a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800151e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001522:	2b00      	cmp	r3, #0
 8001524:	d111      	bne.n	800154a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001526:	201d      	movs	r0, #29
 8001528:	f001 fe78 	bl	800321c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b0f      	cmp	r3, #15
 8001530:	d808      	bhi.n	8001544 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8001532:	2200      	movs	r2, #0
 8001534:	6879      	ldr	r1, [r7, #4]
 8001536:	201d      	movs	r0, #29
 8001538:	f001 fe54 	bl	80031e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800153c:	4a0a      	ldr	r2, [pc, #40]	@ (8001568 <HAL_InitTick+0xf0>)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6013      	str	r3, [r2, #0]
 8001542:	e002      	b.n	800154a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800154a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800154e:	4618      	mov	r0, r3
 8001550:	3738      	adds	r7, #56	@ 0x38
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40021000 	.word	0x40021000
 800155c:	431bde83 	.word	0x431bde83
 8001560:	200002a4 	.word	0x200002a4
 8001564:	40000400 	.word	0x40000400
 8001568:	20000004 	.word	0x20000004

0800156c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001570:	bf00      	nop
 8001572:	e7fd      	b.n	8001570 <NMI_Handler+0x4>

08001574 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001578:	bf00      	nop
 800157a:	e7fd      	b.n	8001578 <HardFault_Handler+0x4>

0800157c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001580:	bf00      	nop
 8001582:	e7fd      	b.n	8001580 <MemManage_Handler+0x4>

08001584 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001588:	bf00      	nop
 800158a:	e7fd      	b.n	8001588 <BusFault_Handler+0x4>

0800158c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001590:	bf00      	nop
 8001592:	e7fd      	b.n	8001590 <UsageFault_Handler+0x4>

08001594 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Alert1_Pin);
 80015a6:	2004      	movs	r0, #4
 80015a8:	f002 fa80 	bl	8003aac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015b4:	4802      	ldr	r0, [pc, #8]	@ (80015c0 <DMA1_Channel1_IRQHandler+0x10>)
 80015b6:	f001 ffd6 	bl	8003566 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	200000e4 	.word	0x200000e4

080015c4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80015c8:	4802      	ldr	r0, [pc, #8]	@ (80015d4 <TIM3_IRQHandler+0x10>)
 80015ca:	f004 fd1b 	bl	8006004 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	200002a4 	.word	0x200002a4

080015d8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80015dc:	4802      	ldr	r0, [pc, #8]	@ (80015e8 <UART4_IRQHandler+0x10>)
 80015de:	f004 ff9f 	bl	8006520 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	200001d0 	.word	0x200001d0

080015ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015f0:	4b06      	ldr	r3, [pc, #24]	@ (800160c <SystemInit+0x20>)
 80015f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015f6:	4a05      	ldr	r2, [pc, #20]	@ (800160c <SystemInit+0x20>)
 80015f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001610:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001648 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001614:	f7ff ffea 	bl	80015ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001618:	480c      	ldr	r0, [pc, #48]	@ (800164c <LoopForever+0x6>)
  ldr r1, =_edata
 800161a:	490d      	ldr	r1, [pc, #52]	@ (8001650 <LoopForever+0xa>)
  ldr r2, =_sidata
 800161c:	4a0d      	ldr	r2, [pc, #52]	@ (8001654 <LoopForever+0xe>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001620:	e002      	b.n	8001628 <LoopCopyDataInit>

08001622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001626:	3304      	adds	r3, #4

08001628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800162a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800162c:	d3f9      	bcc.n	8001622 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800162e:	4a0a      	ldr	r2, [pc, #40]	@ (8001658 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001630:	4c0a      	ldr	r4, [pc, #40]	@ (800165c <LoopForever+0x16>)
  movs r3, #0
 8001632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001634:	e001      	b.n	800163a <LoopFillZerobss>

08001636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001638:	3204      	adds	r2, #4

0800163a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800163a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800163c:	d3fb      	bcc.n	8001636 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800163e:	f009 f889 	bl	800a754 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001642:	f7ff f935 	bl	80008b0 <main>

08001646 <LoopForever>:

LoopForever:
    b LoopForever
 8001646:	e7fe      	b.n	8001646 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001648:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800164c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001650:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001654:	0800a9cc 	.word	0x0800a9cc
  ldr r2, =_sbss
 8001658:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800165c:	20001dd4 	.word	0x20001dd4

08001660 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001660:	e7fe      	b.n	8001660 <ADC1_2_IRQHandler>

08001662 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b082      	sub	sp, #8
 8001666:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001668:	2300      	movs	r3, #0
 800166a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800166c:	2003      	movs	r0, #3
 800166e:	f001 fdae 	bl	80031ce <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001672:	200f      	movs	r0, #15
 8001674:	f7ff ff00 	bl	8001478 <HAL_InitTick>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d002      	beq.n	8001684 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	71fb      	strb	r3, [r7, #7]
 8001682:	e001      	b.n	8001688 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001684:	f7ff fcdc 	bl	8001040 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001688:	79fb      	ldrb	r3, [r7, #7]
}
 800168a:	4618      	mov	r0, r3
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001698:	4b06      	ldr	r3, [pc, #24]	@ (80016b4 <HAL_IncTick+0x20>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	461a      	mov	r2, r3
 800169e:	4b06      	ldr	r3, [pc, #24]	@ (80016b8 <HAL_IncTick+0x24>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4413      	add	r3, r2
 80016a4:	4a04      	ldr	r2, [pc, #16]	@ (80016b8 <HAL_IncTick+0x24>)
 80016a6:	6013      	str	r3, [r2, #0]
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	20000008 	.word	0x20000008
 80016b8:	200002f0 	.word	0x200002f0

080016bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  return uwTick;
 80016c0:	4b03      	ldr	r3, [pc, #12]	@ (80016d0 <HAL_GetTick+0x14>)
 80016c2:	681b      	ldr	r3, [r3, #0]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	200002f0 	.word	0x200002f0

080016d4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	431a      	orrs	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	609a      	str	r2, [r3, #8]
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80016fa:	b480      	push	{r7}
 80016fc:	b083      	sub	sp, #12
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
 8001702:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	431a      	orrs	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	609a      	str	r2, [r3, #8]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001730:	4618      	mov	r0, r3
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800173c:	b480      	push	{r7}
 800173e:	b087      	sub	sp, #28
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
 8001748:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	3360      	adds	r3, #96	@ 0x60
 800174e:	461a      	mov	r2, r3
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4413      	add	r3, r2
 8001756:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4b08      	ldr	r3, [pc, #32]	@ (8001780 <LL_ADC_SetOffset+0x44>)
 800175e:	4013      	ands	r3, r2
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	430a      	orrs	r2, r1
 800176a:	4313      	orrs	r3, r2
 800176c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001774:	bf00      	nop
 8001776:	371c      	adds	r7, #28
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	03fff000 	.word	0x03fff000

08001784 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	3360      	adds	r3, #96	@ 0x60
 8001792:	461a      	mov	r2, r3
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4413      	add	r3, r2
 800179a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b087      	sub	sp, #28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	3360      	adds	r3, #96	@ 0x60
 80017c0:	461a      	mov	r2, r3
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	431a      	orrs	r2, r3
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80017da:	bf00      	nop
 80017dc:	371c      	adds	r7, #28
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
 80017ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	695b      	ldr	r3, [r3, #20]
 80017f4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	431a      	orrs	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	615a      	str	r2, [r3, #20]
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800181c:	2b00      	cmp	r3, #0
 800181e:	d101      	bne.n	8001824 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001820:	2301      	movs	r3, #1
 8001822:	e000      	b.n	8001826 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001832:	b480      	push	{r7}
 8001834:	b087      	sub	sp, #28
 8001836:	af00      	add	r7, sp, #0
 8001838:	60f8      	str	r0, [r7, #12]
 800183a:	60b9      	str	r1, [r7, #8]
 800183c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	3330      	adds	r3, #48	@ 0x30
 8001842:	461a      	mov	r2, r3
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	0a1b      	lsrs	r3, r3, #8
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	f003 030c 	and.w	r3, r3, #12
 800184e:	4413      	add	r3, r2
 8001850:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	f003 031f 	and.w	r3, r3, #31
 800185c:	211f      	movs	r1, #31
 800185e:	fa01 f303 	lsl.w	r3, r1, r3
 8001862:	43db      	mvns	r3, r3
 8001864:	401a      	ands	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	0e9b      	lsrs	r3, r3, #26
 800186a:	f003 011f 	and.w	r1, r3, #31
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	f003 031f 	and.w	r3, r3, #31
 8001874:	fa01 f303 	lsl.w	r3, r1, r3
 8001878:	431a      	orrs	r2, r3
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800187e:	bf00      	nop
 8001880:	371c      	adds	r7, #28
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800188a:	b480      	push	{r7}
 800188c:	b087      	sub	sp, #28
 800188e:	af00      	add	r7, sp, #0
 8001890:	60f8      	str	r0, [r7, #12]
 8001892:	60b9      	str	r1, [r7, #8]
 8001894:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	3314      	adds	r3, #20
 800189a:	461a      	mov	r2, r3
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	0e5b      	lsrs	r3, r3, #25
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	f003 0304 	and.w	r3, r3, #4
 80018a6:	4413      	add	r3, r2
 80018a8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	0d1b      	lsrs	r3, r3, #20
 80018b2:	f003 031f 	and.w	r3, r3, #31
 80018b6:	2107      	movs	r1, #7
 80018b8:	fa01 f303 	lsl.w	r3, r1, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	401a      	ands	r2, r3
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	0d1b      	lsrs	r3, r3, #20
 80018c4:	f003 031f 	and.w	r3, r3, #31
 80018c8:	6879      	ldr	r1, [r7, #4]
 80018ca:	fa01 f303 	lsl.w	r3, r1, r3
 80018ce:	431a      	orrs	r2, r3
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80018d4:	bf00      	nop
 80018d6:	371c      	adds	r7, #28
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018f8:	43db      	mvns	r3, r3
 80018fa:	401a      	ands	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f003 0318 	and.w	r3, r3, #24
 8001902:	4908      	ldr	r1, [pc, #32]	@ (8001924 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001904:	40d9      	lsrs	r1, r3
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	400b      	ands	r3, r1
 800190a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800190e:	431a      	orrs	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001916:	bf00      	nop
 8001918:	3714      	adds	r7, #20
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	0007ffff 	.word	0x0007ffff

08001928 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f003 031f 	and.w	r3, r3, #31
}
 8001938:	4618      	mov	r0, r3
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001954:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	6093      	str	r3, [r2, #8]
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001978:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800197c:	d101      	bne.n	8001982 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800197e:	2301      	movs	r3, #1
 8001980:	e000      	b.n	8001984 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80019a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80019a4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80019cc:	d101      	bne.n	80019d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80019ce:	2301      	movs	r3, #1
 80019d0:	e000      	b.n	80019d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80019f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80019f4:	f043 0201 	orr.w	r2, r3, #1
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001a18:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a1c:	f043 0202 	orr.w	r2, r3, #2
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d101      	bne.n	8001a48 <LL_ADC_IsEnabled+0x18>
 8001a44:	2301      	movs	r3, #1
 8001a46:	e000      	b.n	8001a4a <LL_ADC_IsEnabled+0x1a>
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001a56:	b480      	push	{r7}
 8001a58:	b083      	sub	sp, #12
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d101      	bne.n	8001a6e <LL_ADC_IsDisableOngoing+0x18>
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e000      	b.n	8001a70 <LL_ADC_IsDisableOngoing+0x1a>
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001a8c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a90:	f043 0204 	orr.w	r2, r3, #4
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ab4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ab8:	f043 0210 	orr.w	r2, r3, #16
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f003 0304 	and.w	r3, r3, #4
 8001adc:	2b04      	cmp	r3, #4
 8001ade:	d101      	bne.n	8001ae4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e000      	b.n	8001ae6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001af2:	b480      	push	{r7}
 8001af4:	b083      	sub	sp, #12
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b02:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b06:	f043 0220 	orr.w	r2, r3, #32
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 0308 	and.w	r3, r3, #8
 8001b2a:	2b08      	cmp	r3, #8
 8001b2c:	d101      	bne.n	8001b32 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e000      	b.n	8001b34 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b40:	b590      	push	{r4, r7, lr}
 8001b42:	b089      	sub	sp, #36	@ 0x24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e133      	b.n	8001dc2 <HAL_ADC_Init+0x282>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d109      	bne.n	8001b7c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7ff fa91 	bl	8001090 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff fef1 	bl	8001968 <LL_ADC_IsDeepPowerDownEnabled>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d004      	beq.n	8001b96 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff fed7 	bl	8001944 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff ff0c 	bl	80019b8 <LL_ADC_IsInternalRegulatorEnabled>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d115      	bne.n	8001bd2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff fef0 	bl	8001990 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bb0:	4b86      	ldr	r3, [pc, #536]	@ (8001dcc <HAL_ADC_Init+0x28c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	099b      	lsrs	r3, r3, #6
 8001bb6:	4a86      	ldr	r2, [pc, #536]	@ (8001dd0 <HAL_ADC_Init+0x290>)
 8001bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bbc:	099b      	lsrs	r3, r3, #6
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001bc4:	e002      	b.n	8001bcc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1f9      	bne.n	8001bc6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff feee 	bl	80019b8 <LL_ADC_IsInternalRegulatorEnabled>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10d      	bne.n	8001bfe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be6:	f043 0210 	orr.w	r2, r3, #16
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bf2:	f043 0201 	orr.w	r2, r3, #1
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff ff62 	bl	8001acc <LL_ADC_REG_IsConversionOngoing>
 8001c08:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c0e:	f003 0310 	and.w	r3, r3, #16
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f040 80cc 	bne.w	8001db0 <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f040 80c8 	bne.w	8001db0 <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c24:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001c28:	f043 0202 	orr.w	r2, r3, #2
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff fefb 	bl	8001a30 <LL_ADC_IsEnabled>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d115      	bne.n	8001c6c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c40:	4864      	ldr	r0, [pc, #400]	@ (8001dd4 <HAL_ADC_Init+0x294>)
 8001c42:	f7ff fef5 	bl	8001a30 <LL_ADC_IsEnabled>
 8001c46:	4604      	mov	r4, r0
 8001c48:	4863      	ldr	r0, [pc, #396]	@ (8001dd8 <HAL_ADC_Init+0x298>)
 8001c4a:	f7ff fef1 	bl	8001a30 <LL_ADC_IsEnabled>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	431c      	orrs	r4, r3
 8001c52:	4862      	ldr	r0, [pc, #392]	@ (8001ddc <HAL_ADC_Init+0x29c>)
 8001c54:	f7ff feec 	bl	8001a30 <LL_ADC_IsEnabled>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	4323      	orrs	r3, r4
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d105      	bne.n	8001c6c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	4619      	mov	r1, r3
 8001c66:	485e      	ldr	r0, [pc, #376]	@ (8001de0 <HAL_ADC_Init+0x2a0>)
 8001c68:	f7ff fd34 	bl	80016d4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	7e5b      	ldrb	r3, [r3, #25]
 8001c70:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c76:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001c7c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001c82:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c8a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d106      	bne.n	8001ca8 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	045b      	lsls	r3, r3, #17
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d009      	beq.n	8001cc4 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cb4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cbc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68da      	ldr	r2, [r3, #12]
 8001cca:	4b46      	ldr	r3, [pc, #280]	@ (8001de4 <HAL_ADC_Init+0x2a4>)
 8001ccc:	4013      	ands	r3, r2
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	6812      	ldr	r2, [r2, #0]
 8001cd2:	69b9      	ldr	r1, [r7, #24]
 8001cd4:	430b      	orrs	r3, r1
 8001cd6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff ff1c 	bl	8001b1a <LL_ADC_INJ_IsConversionOngoing>
 8001ce2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d140      	bne.n	8001d6c <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d13d      	bne.n	8001d6c <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	7e1b      	ldrb	r3, [r3, #24]
 8001cf8:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001cfa:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001d02:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d04:	4313      	orrs	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001d12:	f023 0306 	bic.w	r3, r3, #6
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	6812      	ldr	r2, [r2, #0]
 8001d1a:	69b9      	ldr	r1, [r7, #24]
 8001d1c:	430b      	orrs	r3, r1
 8001d1e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d118      	bne.n	8001d5c <HAL_ADC_Init+0x21c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001d34:	f023 0304 	bic.w	r3, r3, #4
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001d40:	4311      	orrs	r1, r2
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001d46:	4311      	orrs	r1, r2
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f042 0201 	orr.w	r2, r2, #1
 8001d58:	611a      	str	r2, [r3, #16]
 8001d5a:	e007      	b.n	8001d6c <HAL_ADC_Init+0x22c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	691a      	ldr	r2, [r3, #16]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f022 0201 	bic.w	r2, r2, #1
 8001d6a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d10c      	bne.n	8001d8e <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7a:	f023 010f 	bic.w	r1, r3, #15
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	1e5a      	subs	r2, r3, #1
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d8c:	e007      	b.n	8001d9e <HAL_ADC_Init+0x25e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 020f 	bic.w	r2, r2, #15
 8001d9c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da2:	f023 0303 	bic.w	r3, r3, #3
 8001da6:	f043 0201 	orr.w	r2, r3, #1
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	659a      	str	r2, [r3, #88]	@ 0x58
 8001dae:	e007      	b.n	8001dc0 <HAL_ADC_Init+0x280>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db4:	f043 0210 	orr.w	r2, r3, #16
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001dc0:	7ffb      	ldrb	r3, [r7, #31]
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3724      	adds	r7, #36	@ 0x24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd90      	pop	{r4, r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000000 	.word	0x20000000
 8001dd0:	053e2d63 	.word	0x053e2d63
 8001dd4:	50040000 	.word	0x50040000
 8001dd8:	50040100 	.word	0x50040100
 8001ddc:	50040200 	.word	0x50040200
 8001de0:	50040300 	.word	0x50040300
 8001de4:	fff0c007 	.word	0xfff0c007

08001de8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001df4:	4853      	ldr	r0, [pc, #332]	@ (8001f44 <HAL_ADC_Start_DMA+0x15c>)
 8001df6:	f7ff fd97 	bl	8001928 <LL_ADC_GetMultimode>
 8001dfa:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff fe63 	bl	8001acc <LL_ADC_REG_IsConversionOngoing>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	f040 8093 	bne.w	8001f34 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d101      	bne.n	8001e1c <HAL_ADC_Start_DMA+0x34>
 8001e18:	2302      	movs	r3, #2
 8001e1a:	e08e      	b.n	8001f3a <HAL_ADC_Start_DMA+0x152>
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a47      	ldr	r2, [pc, #284]	@ (8001f48 <HAL_ADC_Start_DMA+0x160>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d008      	beq.n	8001e40 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d005      	beq.n	8001e40 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	2b05      	cmp	r3, #5
 8001e38:	d002      	beq.n	8001e40 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	2b09      	cmp	r3, #9
 8001e3e:	d172      	bne.n	8001f26 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	f000 fdcb 	bl	80029dc <ADC_Enable>
 8001e46:	4603      	mov	r3, r0
 8001e48:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001e4a:	7dfb      	ldrb	r3, [r7, #23]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d165      	bne.n	8001f1c <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e54:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001e58:	f023 0301 	bic.w	r3, r3, #1
 8001e5c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a38      	ldr	r2, [pc, #224]	@ (8001f4c <HAL_ADC_Start_DMA+0x164>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d002      	beq.n	8001e74 <HAL_ADC_Start_DMA+0x8c>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	e000      	b.n	8001e76 <HAL_ADC_Start_DMA+0x8e>
 8001e74:	4b36      	ldr	r3, [pc, #216]	@ (8001f50 <HAL_ADC_Start_DMA+0x168>)
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	6812      	ldr	r2, [r2, #0]
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d002      	beq.n	8001e84 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d105      	bne.n	8001e90 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e88:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d006      	beq.n	8001eaa <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ea0:	f023 0206 	bic.w	r2, r3, #6
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001ea8:	e002      	b.n	8001eb0 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001eb4:	4a27      	ldr	r2, [pc, #156]	@ (8001f54 <HAL_ADC_Start_DMA+0x16c>)
 8001eb6:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ebc:	4a26      	ldr	r2, [pc, #152]	@ (8001f58 <HAL_ADC_Start_DMA+0x170>)
 8001ebe:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ec4:	4a25      	ldr	r2, [pc, #148]	@ (8001f5c <HAL_ADC_Start_DMA+0x174>)
 8001ec6:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	221c      	movs	r2, #28
 8001ece:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0210 	orr.w	r2, r2, #16
 8001ee6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68da      	ldr	r2, [r3, #12]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f042 0201 	orr.w	r2, r2, #1
 8001ef6:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	3340      	adds	r3, #64	@ 0x40
 8001f02:	4619      	mov	r1, r3
 8001f04:	68ba      	ldr	r2, [r7, #8]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f001 fa4e 	bl	80033a8 <HAL_DMA_Start_IT>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff fdb1 	bl	8001a7c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001f1a:	e00d      	b.n	8001f38 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      if (tmp_hal_status == HAL_OK)
 8001f24:	e008      	b.n	8001f38 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8001f32:	e001      	b.n	8001f38 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f34:	2302      	movs	r3, #2
 8001f36:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f38:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3718      	adds	r7, #24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	50040300 	.word	0x50040300
 8001f48:	50040200 	.word	0x50040200
 8001f4c:	50040100 	.word	0x50040100
 8001f50:	50040000 	.word	0x50040000
 8001f54:	08002ba7 	.word	0x08002ba7
 8001f58:	08002c7f 	.word	0x08002c7f
 8001f5c:	08002c9b 	.word	0x08002c9b

08001f60 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d101      	bne.n	8001f76 <HAL_ADC_Stop_DMA+0x16>
 8001f72:	2302      	movs	r3, #2
 8001f74:	e051      	b.n	800201a <HAL_ADC_Stop_DMA+0xba>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001f7e:	2103      	movs	r1, #3
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 fc6f 	bl	8002864 <ADC_ConversionStop>
 8001f86:	4603      	mov	r3, r0
 8001f88:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001f8a:	7bfb      	ldrb	r3, [r7, #15]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d13f      	bne.n	8002010 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68da      	ldr	r2, [r3, #12]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f022 0201 	bic.w	r2, r2, #1
 8001f9e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fa4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d10f      	bne.n	8001fce <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f001 fa58 	bl	8003468 <HAL_DMA_Abort>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001fbc:	7bfb      	ldrb	r3, [r7, #15]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d005      	beq.n	8001fce <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	659a      	str	r2, [r3, #88]	@ 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 0210 	bic.w	r2, r2, #16
 8001fdc:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8001fde:	7bfb      	ldrb	r3, [r7, #15]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d105      	bne.n	8001ff0 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 fd7f 	bl	8002ae8 <ADC_Disable>
 8001fea:	4603      	mov	r3, r0
 8001fec:	73fb      	strb	r3, [r7, #15]
 8001fee:	e002      	b.n	8001ff6 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 fd79 	bl	8002ae8 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001ff6:	7bfb      	ldrb	r3, [r7, #15]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d109      	bne.n	8002010 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002000:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002004:	f023 0301 	bic.w	r3, r3, #1
 8002008:	f043 0201 	orr.w	r2, r3, #1
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002018:	7bfb      	ldrb	r3, [r7, #15]
}
 800201a:	4618      	mov	r0, r3
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002022:	b480      	push	{r7}
 8002024:	b083      	sub	sp, #12
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002036:	b480      	push	{r7}
 8002038:	b083      	sub	sp, #12
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
	...

0800204c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b0b6      	sub	sp, #216	@ 0xd8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002056:	2300      	movs	r3, #0
 8002058:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800205c:	2300      	movs	r3, #0
 800205e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002066:	2b01      	cmp	r3, #1
 8002068:	d101      	bne.n	800206e <HAL_ADC_ConfigChannel+0x22>
 800206a:	2302      	movs	r3, #2
 800206c:	e3e3      	b.n	8002836 <HAL_ADC_ConfigChannel+0x7ea>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff fd26 	bl	8001acc <LL_ADC_REG_IsConversionOngoing>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	f040 83c4 	bne.w	8002810 <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	2b05      	cmp	r3, #5
 8002096:	d824      	bhi.n	80020e2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	3b02      	subs	r3, #2
 800209e:	2b03      	cmp	r3, #3
 80020a0:	d81b      	bhi.n	80020da <HAL_ADC_ConfigChannel+0x8e>
 80020a2:	a201      	add	r2, pc, #4	@ (adr r2, 80020a8 <HAL_ADC_ConfigChannel+0x5c>)
 80020a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020a8:	080020b9 	.word	0x080020b9
 80020ac:	080020c1 	.word	0x080020c1
 80020b0:	080020c9 	.word	0x080020c9
 80020b4:	080020d1 	.word	0x080020d1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80020b8:	230c      	movs	r3, #12
 80020ba:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80020be:	e010      	b.n	80020e2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80020c0:	2312      	movs	r3, #18
 80020c2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80020c6:	e00c      	b.n	80020e2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80020c8:	2318      	movs	r3, #24
 80020ca:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80020ce:	e008      	b.n	80020e2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80020d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80020d8:	e003      	b.n	80020e2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80020da:	2306      	movs	r3, #6
 80020dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80020e0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6818      	ldr	r0, [r3, #0]
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	461a      	mov	r2, r3
 80020ec:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80020f0:	f7ff fb9f 	bl	8001832 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff fce7 	bl	8001acc <LL_ADC_REG_IsConversionOngoing>
 80020fe:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff fd07 	bl	8001b1a <LL_ADC_INJ_IsConversionOngoing>
 800210c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002110:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002114:	2b00      	cmp	r3, #0
 8002116:	f040 81bf 	bne.w	8002498 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800211a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800211e:	2b00      	cmp	r3, #0
 8002120:	f040 81ba 	bne.w	8002498 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800212c:	d10f      	bne.n	800214e <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6818      	ldr	r0, [r3, #0]
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2200      	movs	r2, #0
 8002138:	4619      	mov	r1, r3
 800213a:	f7ff fba6 	bl	800188a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff fb4d 	bl	80017e6 <LL_ADC_SetSamplingTimeCommonConfig>
 800214c:	e00e      	b.n	800216c <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6818      	ldr	r0, [r3, #0]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	6819      	ldr	r1, [r3, #0]
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	461a      	mov	r2, r3
 800215c:	f7ff fb95 	bl	800188a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2100      	movs	r1, #0
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff fb3d 	bl	80017e6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	695a      	ldr	r2, [r3, #20]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	08db      	lsrs	r3, r3, #3
 8002178:	f003 0303 	and.w	r3, r3, #3
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	2b04      	cmp	r3, #4
 800218c:	d00a      	beq.n	80021a4 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6818      	ldr	r0, [r3, #0]
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	6919      	ldr	r1, [r3, #16]
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800219e:	f7ff facd 	bl	800173c <LL_ADC_SetOffset>
 80021a2:	e179      	b.n	8002498 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2100      	movs	r1, #0
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff faea 	bl	8001784 <LL_ADC_GetOffsetChannel>
 80021b0:	4603      	mov	r3, r0
 80021b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10a      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x184>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2100      	movs	r1, #0
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff fadf 	bl	8001784 <LL_ADC_GetOffsetChannel>
 80021c6:	4603      	mov	r3, r0
 80021c8:	0e9b      	lsrs	r3, r3, #26
 80021ca:	f003 021f 	and.w	r2, r3, #31
 80021ce:	e01e      	b.n	800220e <HAL_ADC_ConfigChannel+0x1c2>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2100      	movs	r1, #0
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff fad4 	bl	8001784 <LL_ADC_GetOffsetChannel>
 80021dc:	4603      	mov	r3, r0
 80021de:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80021e6:	fa93 f3a3 	rbit	r3, r3
 80021ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80021f2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80021f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80021fe:	2320      	movs	r3, #32
 8002200:	e004      	b.n	800220c <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8002202:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002206:	fab3 f383 	clz	r3, r3
 800220a:	b2db      	uxtb	r3, r3
 800220c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002216:	2b00      	cmp	r3, #0
 8002218:	d105      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x1da>
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	0e9b      	lsrs	r3, r3, #26
 8002220:	f003 031f 	and.w	r3, r3, #31
 8002224:	e018      	b.n	8002258 <HAL_ADC_ConfigChannel+0x20c>
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002232:	fa93 f3a3 	rbit	r3, r3
 8002236:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800223a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800223e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002242:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 800224a:	2320      	movs	r3, #32
 800224c:	e004      	b.n	8002258 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 800224e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002252:	fab3 f383 	clz	r3, r3
 8002256:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002258:	429a      	cmp	r2, r3
 800225a:	d106      	bne.n	800226a <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2200      	movs	r2, #0
 8002262:	2100      	movs	r1, #0
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff faa3 	bl	80017b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2101      	movs	r1, #1
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff fa87 	bl	8001784 <LL_ADC_GetOffsetChannel>
 8002276:	4603      	mov	r3, r0
 8002278:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800227c:	2b00      	cmp	r3, #0
 800227e:	d10a      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x24a>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2101      	movs	r1, #1
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff fa7c 	bl	8001784 <LL_ADC_GetOffsetChannel>
 800228c:	4603      	mov	r3, r0
 800228e:	0e9b      	lsrs	r3, r3, #26
 8002290:	f003 021f 	and.w	r2, r3, #31
 8002294:	e01e      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x288>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2101      	movs	r1, #1
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff fa71 	bl	8001784 <LL_ADC_GetOffsetChannel>
 80022a2:	4603      	mov	r3, r0
 80022a4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80022ac:	fa93 f3a3 	rbit	r3, r3
 80022b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80022b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80022b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80022bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80022c4:	2320      	movs	r3, #32
 80022c6:	e004      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80022c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80022cc:	fab3 f383 	clz	r3, r3
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d105      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x2a0>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	0e9b      	lsrs	r3, r3, #26
 80022e6:	f003 031f 	and.w	r3, r3, #31
 80022ea:	e018      	b.n	800231e <HAL_ADC_ConfigChannel+0x2d2>
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80022f8:	fa93 f3a3 	rbit	r3, r3
 80022fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002300:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002304:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002308:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002310:	2320      	movs	r3, #32
 8002312:	e004      	b.n	800231e <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002314:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002318:	fab3 f383 	clz	r3, r3
 800231c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800231e:	429a      	cmp	r2, r3
 8002320:	d106      	bne.n	8002330 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2200      	movs	r2, #0
 8002328:	2101      	movs	r1, #1
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff fa40 	bl	80017b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2102      	movs	r1, #2
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff fa24 	bl	8001784 <LL_ADC_GetOffsetChannel>
 800233c:	4603      	mov	r3, r0
 800233e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002342:	2b00      	cmp	r3, #0
 8002344:	d10a      	bne.n	800235c <HAL_ADC_ConfigChannel+0x310>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2102      	movs	r1, #2
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff fa19 	bl	8001784 <LL_ADC_GetOffsetChannel>
 8002352:	4603      	mov	r3, r0
 8002354:	0e9b      	lsrs	r3, r3, #26
 8002356:	f003 021f 	and.w	r2, r3, #31
 800235a:	e01e      	b.n	800239a <HAL_ADC_ConfigChannel+0x34e>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2102      	movs	r1, #2
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff fa0e 	bl	8001784 <LL_ADC_GetOffsetChannel>
 8002368:	4603      	mov	r3, r0
 800236a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002372:	fa93 f3a3 	rbit	r3, r3
 8002376:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800237a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800237e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002382:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 800238a:	2320      	movs	r3, #32
 800238c:	e004      	b.n	8002398 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800238e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002392:	fab3 f383 	clz	r3, r3
 8002396:	b2db      	uxtb	r3, r3
 8002398:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d105      	bne.n	80023b2 <HAL_ADC_ConfigChannel+0x366>
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	0e9b      	lsrs	r3, r3, #26
 80023ac:	f003 031f 	and.w	r3, r3, #31
 80023b0:	e014      	b.n	80023dc <HAL_ADC_ConfigChannel+0x390>
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80023ba:	fa93 f3a3 	rbit	r3, r3
 80023be:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80023c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80023c2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80023c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80023ce:	2320      	movs	r3, #32
 80023d0:	e004      	b.n	80023dc <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80023d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80023d6:	fab3 f383 	clz	r3, r3
 80023da:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023dc:	429a      	cmp	r2, r3
 80023de:	d106      	bne.n	80023ee <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2200      	movs	r2, #0
 80023e6:	2102      	movs	r1, #2
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff f9e1 	bl	80017b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2103      	movs	r1, #3
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff f9c5 	bl	8001784 <LL_ADC_GetOffsetChannel>
 80023fa:	4603      	mov	r3, r0
 80023fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002400:	2b00      	cmp	r3, #0
 8002402:	d10a      	bne.n	800241a <HAL_ADC_ConfigChannel+0x3ce>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2103      	movs	r1, #3
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff f9ba 	bl	8001784 <LL_ADC_GetOffsetChannel>
 8002410:	4603      	mov	r3, r0
 8002412:	0e9b      	lsrs	r3, r3, #26
 8002414:	f003 021f 	and.w	r2, r3, #31
 8002418:	e017      	b.n	800244a <HAL_ADC_ConfigChannel+0x3fe>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2103      	movs	r1, #3
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff f9af 	bl	8001784 <LL_ADC_GetOffsetChannel>
 8002426:	4603      	mov	r3, r0
 8002428:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800242c:	fa93 f3a3 	rbit	r3, r3
 8002430:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002432:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002434:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002436:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 800243c:	2320      	movs	r3, #32
 800243e:	e003      	b.n	8002448 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002440:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002442:	fab3 f383 	clz	r3, r3
 8002446:	b2db      	uxtb	r3, r3
 8002448:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002452:	2b00      	cmp	r3, #0
 8002454:	d105      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x416>
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	0e9b      	lsrs	r3, r3, #26
 800245c:	f003 031f 	and.w	r3, r3, #31
 8002460:	e011      	b.n	8002486 <HAL_ADC_ConfigChannel+0x43a>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002468:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800246a:	fa93 f3a3 	rbit	r3, r3
 800246e:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002470:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002472:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002474:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 800247a:	2320      	movs	r3, #32
 800247c:	e003      	b.n	8002486 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800247e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002480:	fab3 f383 	clz	r3, r3
 8002484:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002486:	429a      	cmp	r2, r3
 8002488:	d106      	bne.n	8002498 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2200      	movs	r2, #0
 8002490:	2103      	movs	r1, #3
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff f98c 	bl	80017b0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff fac7 	bl	8001a30 <LL_ADC_IsEnabled>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f040 813f 	bne.w	8002728 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6818      	ldr	r0, [r3, #0]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	6819      	ldr	r1, [r3, #0]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	461a      	mov	r2, r3
 80024b8:	f7ff fa12 	bl	80018e0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	4a8e      	ldr	r2, [pc, #568]	@ (80026fc <HAL_ADC_ConfigChannel+0x6b0>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	f040 8130 	bne.w	8002728 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10b      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x4a4>
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	0e9b      	lsrs	r3, r3, #26
 80024de:	3301      	adds	r3, #1
 80024e0:	f003 031f 	and.w	r3, r3, #31
 80024e4:	2b09      	cmp	r3, #9
 80024e6:	bf94      	ite	ls
 80024e8:	2301      	movls	r3, #1
 80024ea:	2300      	movhi	r3, #0
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	e019      	b.n	8002524 <HAL_ADC_ConfigChannel+0x4d8>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024f8:	fa93 f3a3 	rbit	r3, r3
 80024fc:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80024fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002500:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002502:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002508:	2320      	movs	r3, #32
 800250a:	e003      	b.n	8002514 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 800250c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800250e:	fab3 f383 	clz	r3, r3
 8002512:	b2db      	uxtb	r3, r3
 8002514:	3301      	adds	r3, #1
 8002516:	f003 031f 	and.w	r3, r3, #31
 800251a:	2b09      	cmp	r3, #9
 800251c:	bf94      	ite	ls
 800251e:	2301      	movls	r3, #1
 8002520:	2300      	movhi	r3, #0
 8002522:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002524:	2b00      	cmp	r3, #0
 8002526:	d079      	beq.n	800261c <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002530:	2b00      	cmp	r3, #0
 8002532:	d107      	bne.n	8002544 <HAL_ADC_ConfigChannel+0x4f8>
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	0e9b      	lsrs	r3, r3, #26
 800253a:	3301      	adds	r3, #1
 800253c:	069b      	lsls	r3, r3, #26
 800253e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002542:	e015      	b.n	8002570 <HAL_ADC_ConfigChannel+0x524>
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800254c:	fa93 f3a3 	rbit	r3, r3
 8002550:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002552:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002554:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002556:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 800255c:	2320      	movs	r3, #32
 800255e:	e003      	b.n	8002568 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002560:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002562:	fab3 f383 	clz	r3, r3
 8002566:	b2db      	uxtb	r3, r3
 8002568:	3301      	adds	r3, #1
 800256a:	069b      	lsls	r3, r3, #26
 800256c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002578:	2b00      	cmp	r3, #0
 800257a:	d109      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x544>
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	0e9b      	lsrs	r3, r3, #26
 8002582:	3301      	adds	r3, #1
 8002584:	f003 031f 	and.w	r3, r3, #31
 8002588:	2101      	movs	r1, #1
 800258a:	fa01 f303 	lsl.w	r3, r1, r3
 800258e:	e017      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x574>
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002596:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002598:	fa93 f3a3 	rbit	r3, r3
 800259c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800259e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025a0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80025a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d101      	bne.n	80025ac <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80025a8:	2320      	movs	r3, #32
 80025aa:	e003      	b.n	80025b4 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80025ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025ae:	fab3 f383 	clz	r3, r3
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	3301      	adds	r3, #1
 80025b6:	f003 031f 	and.w	r3, r3, #31
 80025ba:	2101      	movs	r1, #1
 80025bc:	fa01 f303 	lsl.w	r3, r1, r3
 80025c0:	ea42 0103 	orr.w	r1, r2, r3
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d10a      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x59a>
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	0e9b      	lsrs	r3, r3, #26
 80025d6:	3301      	adds	r3, #1
 80025d8:	f003 021f 	and.w	r2, r3, #31
 80025dc:	4613      	mov	r3, r2
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	4413      	add	r3, r2
 80025e2:	051b      	lsls	r3, r3, #20
 80025e4:	e018      	b.n	8002618 <HAL_ADC_ConfigChannel+0x5cc>
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025ee:	fa93 f3a3 	rbit	r3, r3
 80025f2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80025f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80025f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80025fe:	2320      	movs	r3, #32
 8002600:	e003      	b.n	800260a <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002604:	fab3 f383 	clz	r3, r3
 8002608:	b2db      	uxtb	r3, r3
 800260a:	3301      	adds	r3, #1
 800260c:	f003 021f 	and.w	r2, r3, #31
 8002610:	4613      	mov	r3, r2
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	4413      	add	r3, r2
 8002616:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002618:	430b      	orrs	r3, r1
 800261a:	e080      	b.n	800271e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002624:	2b00      	cmp	r3, #0
 8002626:	d107      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x5ec>
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	0e9b      	lsrs	r3, r3, #26
 800262e:	3301      	adds	r3, #1
 8002630:	069b      	lsls	r3, r3, #26
 8002632:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002636:	e015      	b.n	8002664 <HAL_ADC_ConfigChannel+0x618>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002640:	fa93 f3a3 	rbit	r3, r3
 8002644:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002648:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800264a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002650:	2320      	movs	r3, #32
 8002652:	e003      	b.n	800265c <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002656:	fab3 f383 	clz	r3, r3
 800265a:	b2db      	uxtb	r3, r3
 800265c:	3301      	adds	r3, #1
 800265e:	069b      	lsls	r3, r3, #26
 8002660:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800266c:	2b00      	cmp	r3, #0
 800266e:	d109      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x638>
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	0e9b      	lsrs	r3, r3, #26
 8002676:	3301      	adds	r3, #1
 8002678:	f003 031f 	and.w	r3, r3, #31
 800267c:	2101      	movs	r1, #1
 800267e:	fa01 f303 	lsl.w	r3, r1, r3
 8002682:	e017      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x668>
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	fa93 f3a3 	rbit	r3, r3
 8002690:	61bb      	str	r3, [r7, #24]
  return result;
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002696:	6a3b      	ldr	r3, [r7, #32]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d101      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 800269c:	2320      	movs	r3, #32
 800269e:	e003      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80026a0:	6a3b      	ldr	r3, [r7, #32]
 80026a2:	fab3 f383 	clz	r3, r3
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	3301      	adds	r3, #1
 80026aa:	f003 031f 	and.w	r3, r3, #31
 80026ae:	2101      	movs	r1, #1
 80026b0:	fa01 f303 	lsl.w	r3, r1, r3
 80026b4:	ea42 0103 	orr.w	r1, r2, r3
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d10d      	bne.n	80026e0 <HAL_ADC_ConfigChannel+0x694>
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	0e9b      	lsrs	r3, r3, #26
 80026ca:	3301      	adds	r3, #1
 80026cc:	f003 021f 	and.w	r2, r3, #31
 80026d0:	4613      	mov	r3, r2
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	4413      	add	r3, r2
 80026d6:	3b1e      	subs	r3, #30
 80026d8:	051b      	lsls	r3, r3, #20
 80026da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80026de:	e01d      	b.n	800271c <HAL_ADC_ConfigChannel+0x6d0>
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	fa93 f3a3 	rbit	r3, r3
 80026ec:	60fb      	str	r3, [r7, #12]
  return result;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d103      	bne.n	8002700 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80026f8:	2320      	movs	r3, #32
 80026fa:	e005      	b.n	8002708 <HAL_ADC_ConfigChannel+0x6bc>
 80026fc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	fab3 f383 	clz	r3, r3
 8002706:	b2db      	uxtb	r3, r3
 8002708:	3301      	adds	r3, #1
 800270a:	f003 021f 	and.w	r2, r3, #31
 800270e:	4613      	mov	r3, r2
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	4413      	add	r3, r2
 8002714:	3b1e      	subs	r3, #30
 8002716:	051b      	lsls	r3, r3, #20
 8002718:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800271c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002722:	4619      	mov	r1, r3
 8002724:	f7ff f8b1 	bl	800188a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	4b44      	ldr	r3, [pc, #272]	@ (8002840 <HAL_ADC_ConfigChannel+0x7f4>)
 800272e:	4013      	ands	r3, r2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d07a      	beq.n	800282a <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002734:	4843      	ldr	r0, [pc, #268]	@ (8002844 <HAL_ADC_ConfigChannel+0x7f8>)
 8002736:	f7fe fff3 	bl	8001720 <LL_ADC_GetCommonPathInternalCh>
 800273a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a41      	ldr	r2, [pc, #260]	@ (8002848 <HAL_ADC_ConfigChannel+0x7fc>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d12c      	bne.n	80027a2 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002748:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800274c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d126      	bne.n	80027a2 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a3c      	ldr	r2, [pc, #240]	@ (800284c <HAL_ADC_ConfigChannel+0x800>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d004      	beq.n	8002768 <HAL_ADC_ConfigChannel+0x71c>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a3b      	ldr	r2, [pc, #236]	@ (8002850 <HAL_ADC_ConfigChannel+0x804>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d15d      	bne.n	8002824 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002768:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800276c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002770:	4619      	mov	r1, r3
 8002772:	4834      	ldr	r0, [pc, #208]	@ (8002844 <HAL_ADC_ConfigChannel+0x7f8>)
 8002774:	f7fe ffc1 	bl	80016fa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002778:	4b36      	ldr	r3, [pc, #216]	@ (8002854 <HAL_ADC_ConfigChannel+0x808>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	099b      	lsrs	r3, r3, #6
 800277e:	4a36      	ldr	r2, [pc, #216]	@ (8002858 <HAL_ADC_ConfigChannel+0x80c>)
 8002780:	fba2 2303 	umull	r2, r3, r2, r3
 8002784:	099b      	lsrs	r3, r3, #6
 8002786:	1c5a      	adds	r2, r3, #1
 8002788:	4613      	mov	r3, r2
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	4413      	add	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002792:	e002      	b.n	800279a <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	3b01      	subs	r3, #1
 8002798:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1f9      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027a0:	e040      	b.n	8002824 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a2d      	ldr	r2, [pc, #180]	@ (800285c <HAL_ADC_ConfigChannel+0x810>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d118      	bne.n	80027de <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d112      	bne.n	80027de <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a23      	ldr	r2, [pc, #140]	@ (800284c <HAL_ADC_ConfigChannel+0x800>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d004      	beq.n	80027cc <HAL_ADC_ConfigChannel+0x780>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a22      	ldr	r2, [pc, #136]	@ (8002850 <HAL_ADC_ConfigChannel+0x804>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d12d      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027d4:	4619      	mov	r1, r3
 80027d6:	481b      	ldr	r0, [pc, #108]	@ (8002844 <HAL_ADC_ConfigChannel+0x7f8>)
 80027d8:	f7fe ff8f 	bl	80016fa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027dc:	e024      	b.n	8002828 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a1f      	ldr	r2, [pc, #124]	@ (8002860 <HAL_ADC_ConfigChannel+0x814>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d120      	bne.n	800282a <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d11a      	bne.n	800282a <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a14      	ldr	r2, [pc, #80]	@ (800284c <HAL_ADC_ConfigChannel+0x800>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d115      	bne.n	800282a <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002802:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002806:	4619      	mov	r1, r3
 8002808:	480e      	ldr	r0, [pc, #56]	@ (8002844 <HAL_ADC_ConfigChannel+0x7f8>)
 800280a:	f7fe ff76 	bl	80016fa <LL_ADC_SetCommonPathInternalCh>
 800280e:	e00c      	b.n	800282a <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002814:	f043 0220 	orr.w	r2, r3, #32
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002822:	e002      	b.n	800282a <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002824:	bf00      	nop
 8002826:	e000      	b.n	800282a <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002828:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002832:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002836:	4618      	mov	r0, r3
 8002838:	37d8      	adds	r7, #216	@ 0xd8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	80080000 	.word	0x80080000
 8002844:	50040300 	.word	0x50040300
 8002848:	c7520000 	.word	0xc7520000
 800284c:	50040000 	.word	0x50040000
 8002850:	50040200 	.word	0x50040200
 8002854:	20000000 	.word	0x20000000
 8002858:	053e2d63 	.word	0x053e2d63
 800285c:	cb840000 	.word	0xcb840000
 8002860:	80000001 	.word	0x80000001

08002864 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b088      	sub	sp, #32
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800286e:	2300      	movs	r3, #0
 8002870:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff f926 	bl	8001acc <LL_ADC_REG_IsConversionOngoing>
 8002880:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff f947 	bl	8001b1a <LL_ADC_INJ_IsConversionOngoing>
 800288c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d103      	bne.n	800289c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2b00      	cmp	r3, #0
 8002898:	f000 8098 	beq.w	80029cc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d02a      	beq.n	8002900 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	7e5b      	ldrb	r3, [r3, #25]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d126      	bne.n	8002900 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	7e1b      	ldrb	r3, [r3, #24]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d122      	bne.n	8002900 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80028ba:	2301      	movs	r3, #1
 80028bc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80028be:	e014      	b.n	80028ea <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	4a45      	ldr	r2, [pc, #276]	@ (80029d8 <ADC_ConversionStop+0x174>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d90d      	bls.n	80028e4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028cc:	f043 0210 	orr.w	r2, r3, #16
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028d8:	f043 0201 	orr.w	r2, r3, #1
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e074      	b.n	80029ce <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	3301      	adds	r3, #1
 80028e8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028f4:	2b40      	cmp	r3, #64	@ 0x40
 80028f6:	d1e3      	bne.n	80028c0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2240      	movs	r2, #64	@ 0x40
 80028fe:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	2b02      	cmp	r3, #2
 8002904:	d014      	beq.n	8002930 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff f8de 	bl	8001acc <LL_ADC_REG_IsConversionOngoing>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00c      	beq.n	8002930 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff f89b 	bl	8001a56 <LL_ADC_IsDisableOngoing>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d104      	bne.n	8002930 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff f8ba 	bl	8001aa4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d014      	beq.n	8002960 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff f8ed 	bl	8001b1a <LL_ADC_INJ_IsConversionOngoing>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00c      	beq.n	8002960 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff f883 	bl	8001a56 <LL_ADC_IsDisableOngoing>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d104      	bne.n	8002960 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff f8c9 	bl	8001af2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	2b02      	cmp	r3, #2
 8002964:	d005      	beq.n	8002972 <ADC_ConversionStop+0x10e>
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	2b03      	cmp	r3, #3
 800296a:	d105      	bne.n	8002978 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800296c:	230c      	movs	r3, #12
 800296e:	617b      	str	r3, [r7, #20]
        break;
 8002970:	e005      	b.n	800297e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002972:	2308      	movs	r3, #8
 8002974:	617b      	str	r3, [r7, #20]
        break;
 8002976:	e002      	b.n	800297e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002978:	2304      	movs	r3, #4
 800297a:	617b      	str	r3, [r7, #20]
        break;
 800297c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800297e:	f7fe fe9d 	bl	80016bc <HAL_GetTick>
 8002982:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002984:	e01b      	b.n	80029be <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002986:	f7fe fe99 	bl	80016bc <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b05      	cmp	r3, #5
 8002992:	d914      	bls.n	80029be <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689a      	ldr	r2, [r3, #8]
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	4013      	ands	r3, r2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00d      	beq.n	80029be <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029a6:	f043 0210 	orr.w	r2, r3, #16
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b2:	f043 0201 	orr.w	r2, r3, #1
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e007      	b.n	80029ce <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	4013      	ands	r3, r2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1dc      	bne.n	8002986 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3720      	adds	r7, #32
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	a33fffff 	.word	0xa33fffff

080029dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80029e4:	2300      	movs	r3, #0
 80029e6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff f81f 	bl	8001a30 <LL_ADC_IsEnabled>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d169      	bne.n	8002acc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689a      	ldr	r2, [r3, #8]
 80029fe:	4b36      	ldr	r3, [pc, #216]	@ (8002ad8 <ADC_Enable+0xfc>)
 8002a00:	4013      	ands	r3, r2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00d      	beq.n	8002a22 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a0a:	f043 0210 	orr.w	r2, r3, #16
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a16:	f043 0201 	orr.w	r2, r3, #1
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e055      	b.n	8002ace <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7fe ffda 	bl	80019e0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002a2c:	482b      	ldr	r0, [pc, #172]	@ (8002adc <ADC_Enable+0x100>)
 8002a2e:	f7fe fe77 	bl	8001720 <LL_ADC_GetCommonPathInternalCh>
 8002a32:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002a34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d013      	beq.n	8002a64 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a3c:	4b28      	ldr	r3, [pc, #160]	@ (8002ae0 <ADC_Enable+0x104>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	099b      	lsrs	r3, r3, #6
 8002a42:	4a28      	ldr	r2, [pc, #160]	@ (8002ae4 <ADC_Enable+0x108>)
 8002a44:	fba2 2303 	umull	r2, r3, r2, r3
 8002a48:	099b      	lsrs	r3, r3, #6
 8002a4a:	1c5a      	adds	r2, r3, #1
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	4413      	add	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a56:	e002      	b.n	8002a5e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1f9      	bne.n	8002a58 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002a64:	f7fe fe2a 	bl	80016bc <HAL_GetTick>
 8002a68:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a6a:	e028      	b.n	8002abe <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7fe ffdd 	bl	8001a30 <LL_ADC_IsEnabled>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d104      	bne.n	8002a86 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7fe ffad 	bl	80019e0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a86:	f7fe fe19 	bl	80016bc <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d914      	bls.n	8002abe <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d00d      	beq.n	8002abe <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aa6:	f043 0210 	orr.w	r2, r3, #16
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ab2:	f043 0201 	orr.w	r2, r3, #1
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e007      	b.n	8002ace <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d1cf      	bne.n	8002a6c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	8000003f 	.word	0x8000003f
 8002adc:	50040300 	.word	0x50040300
 8002ae0:	20000000 	.word	0x20000000
 8002ae4:	053e2d63 	.word	0x053e2d63

08002ae8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7fe ffae 	bl	8001a56 <LL_ADC_IsDisableOngoing>
 8002afa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7fe ff95 	bl	8001a30 <LL_ADC_IsEnabled>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d047      	beq.n	8002b9c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d144      	bne.n	8002b9c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f003 030d 	and.w	r3, r3, #13
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d10c      	bne.n	8002b3a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7fe ff6f 	bl	8001a08 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2203      	movs	r2, #3
 8002b30:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b32:	f7fe fdc3 	bl	80016bc <HAL_GetTick>
 8002b36:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b38:	e029      	b.n	8002b8e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b3e:	f043 0210 	orr.w	r2, r3, #16
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b4a:	f043 0201 	orr.w	r2, r3, #1
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e023      	b.n	8002b9e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b56:	f7fe fdb1 	bl	80016bc <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d914      	bls.n	8002b8e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00d      	beq.n	8002b8e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b76:	f043 0210 	orr.w	r2, r3, #16
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b82:	f043 0201 	orr.w	r2, r3, #1
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e007      	b.n	8002b9e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f003 0301 	and.w	r3, r3, #1
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1dc      	bne.n	8002b56 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b084      	sub	sp, #16
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d14b      	bne.n	8002c58 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d021      	beq.n	8002c1e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7fe fe14 	bl	800180c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d032      	beq.n	8002c50 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d12b      	bne.n	8002c50 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bfc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d11f      	bne.n	8002c50 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c14:	f043 0201 	orr.w	r2, r3, #1
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	659a      	str	r2, [r3, #88]	@ 0x58
 8002c1c:	e018      	b.n	8002c50 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d111      	bne.n	8002c50 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c30:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d105      	bne.n	8002c50 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c48:	f043 0201 	orr.w	r2, r3, #1
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f7fe f9d9 	bl	8001008 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c56:	e00e      	b.n	8002c76 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c5c:	f003 0310 	and.w	r3, r3, #16
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f7ff f9e6 	bl	8002036 <HAL_ADC_ErrorCallback>
}
 8002c6a:	e004      	b.n	8002c76 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	4798      	blx	r3
}
 8002c76:	bf00      	nop
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b084      	sub	sp, #16
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c8a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f7ff f9c8 	bl	8002022 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c92:	bf00      	nop
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b084      	sub	sp, #16
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cac:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cb8:	f043 0204 	orr.w	r2, r3, #4
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f7ff f9b8 	bl	8002036 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cc6:	bf00      	nop
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <LL_ADC_IsEnabled>:
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d101      	bne.n	8002ce6 <LL_ADC_IsEnabled+0x18>
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e000      	b.n	8002ce8 <LL_ADC_IsEnabled+0x1a>
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <LL_ADC_REG_IsConversionOngoing>:
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	2b04      	cmp	r3, #4
 8002d06:	d101      	bne.n	8002d0c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e000      	b.n	8002d0e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
	...

08002d1c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002d1c:	b590      	push	{r4, r7, lr}
 8002d1e:	b0a1      	sub	sp, #132	@ 0x84
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d26:	2300      	movs	r3, #0
 8002d28:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d101      	bne.n	8002d3a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002d36:	2302      	movs	r3, #2
 8002d38:	e093      	b.n	8002e62 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002d42:	2300      	movs	r3, #0
 8002d44:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002d46:	2300      	movs	r3, #0
 8002d48:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a47      	ldr	r2, [pc, #284]	@ (8002e6c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d102      	bne.n	8002d5a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002d54:	4b46      	ldr	r3, [pc, #280]	@ (8002e70 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	e001      	b.n	8002d5e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d10b      	bne.n	8002d7c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d68:	f043 0220 	orr.w	r2, r3, #32
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e072      	b.n	8002e62 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff ffb8 	bl	8002cf4 <LL_ADC_REG_IsConversionOngoing>
 8002d84:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7ff ffb2 	bl	8002cf4 <LL_ADC_REG_IsConversionOngoing>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d154      	bne.n	8002e40 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002d96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d151      	bne.n	8002e40 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002d9c:	4b35      	ldr	r3, [pc, #212]	@ (8002e74 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002d9e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d02c      	beq.n	8002e02 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002da8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	6859      	ldr	r1, [r3, #4]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002dba:	035b      	lsls	r3, r3, #13
 8002dbc:	430b      	orrs	r3, r1
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002dc2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002dc4:	4829      	ldr	r0, [pc, #164]	@ (8002e6c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002dc6:	f7ff ff82 	bl	8002cce <LL_ADC_IsEnabled>
 8002dca:	4604      	mov	r4, r0
 8002dcc:	4828      	ldr	r0, [pc, #160]	@ (8002e70 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002dce:	f7ff ff7e 	bl	8002cce <LL_ADC_IsEnabled>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	431c      	orrs	r4, r3
 8002dd6:	4828      	ldr	r0, [pc, #160]	@ (8002e78 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002dd8:	f7ff ff79 	bl	8002cce <LL_ADC_IsEnabled>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	4323      	orrs	r3, r4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d137      	bne.n	8002e54 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002de4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002dec:	f023 030f 	bic.w	r3, r3, #15
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	6811      	ldr	r1, [r2, #0]
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	6892      	ldr	r2, [r2, #8]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002dfe:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e00:	e028      	b.n	8002e54 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002e02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e0c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e0e:	4817      	ldr	r0, [pc, #92]	@ (8002e6c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002e10:	f7ff ff5d 	bl	8002cce <LL_ADC_IsEnabled>
 8002e14:	4604      	mov	r4, r0
 8002e16:	4816      	ldr	r0, [pc, #88]	@ (8002e70 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002e18:	f7ff ff59 	bl	8002cce <LL_ADC_IsEnabled>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	431c      	orrs	r4, r3
 8002e20:	4815      	ldr	r0, [pc, #84]	@ (8002e78 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002e22:	f7ff ff54 	bl	8002cce <LL_ADC_IsEnabled>
 8002e26:	4603      	mov	r3, r0
 8002e28:	4323      	orrs	r3, r4
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d112      	bne.n	8002e54 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002e2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002e36:	f023 030f 	bic.w	r3, r3, #15
 8002e3a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002e3c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e3e:	e009      	b.n	8002e54 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e44:	f043 0220 	orr.w	r2, r3, #32
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002e52:	e000      	b.n	8002e56 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e54:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002e5e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3784      	adds	r7, #132	@ 0x84
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd90      	pop	{r4, r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	50040000 	.word	0x50040000
 8002e70:	50040100 	.word	0x50040100
 8002e74:	50040300 	.word	0x50040300
 8002e78:	50040200 	.word	0x50040200

08002e7c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e0ed      	b.n	800306a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d102      	bne.n	8002ea0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7fe f982 	bl	80011a4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f042 0201 	orr.w	r2, r2, #1
 8002eae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002eb0:	f7fe fc04 	bl	80016bc <HAL_GetTick>
 8002eb4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002eb6:	e012      	b.n	8002ede <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002eb8:	f7fe fc00 	bl	80016bc <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b0a      	cmp	r3, #10
 8002ec4:	d90b      	bls.n	8002ede <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eca:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2205      	movs	r2, #5
 8002ed6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e0c5      	b.n	800306a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d0e5      	beq.n	8002eb8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 0202 	bic.w	r2, r2, #2
 8002efa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002efc:	f7fe fbde 	bl	80016bc <HAL_GetTick>
 8002f00:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f02:	e012      	b.n	8002f2a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f04:	f7fe fbda 	bl	80016bc <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b0a      	cmp	r3, #10
 8002f10:	d90b      	bls.n	8002f2a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f16:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2205      	movs	r2, #5
 8002f22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e09f      	b.n	800306a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1e5      	bne.n	8002f04 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	7e1b      	ldrb	r3, [r3, #24]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d108      	bne.n	8002f52 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	e007      	b.n	8002f62 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f60:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	7e5b      	ldrb	r3, [r3, #25]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d108      	bne.n	8002f7c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	e007      	b.n	8002f8c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	7e9b      	ldrb	r3, [r3, #26]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d108      	bne.n	8002fa6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f042 0220 	orr.w	r2, r2, #32
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	e007      	b.n	8002fb6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 0220 	bic.w	r2, r2, #32
 8002fb4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	7edb      	ldrb	r3, [r3, #27]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d108      	bne.n	8002fd0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 0210 	bic.w	r2, r2, #16
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	e007      	b.n	8002fe0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f042 0210 	orr.w	r2, r2, #16
 8002fde:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	7f1b      	ldrb	r3, [r3, #28]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d108      	bne.n	8002ffa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f042 0208 	orr.w	r2, r2, #8
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	e007      	b.n	800300a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0208 	bic.w	r2, r2, #8
 8003008:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	7f5b      	ldrb	r3, [r3, #29]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d108      	bne.n	8003024 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f042 0204 	orr.w	r2, r2, #4
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	e007      	b.n	8003034 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 0204 	bic.w	r2, r2, #4
 8003032:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	431a      	orrs	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	431a      	orrs	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	ea42 0103 	orr.w	r1, r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	1e5a      	subs	r2, r3, #1
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
	...

08003074 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003084:	4b0c      	ldr	r3, [pc, #48]	@ (80030b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800308a:	68ba      	ldr	r2, [r7, #8]
 800308c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003090:	4013      	ands	r3, r2
 8003092:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800309c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80030a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030a6:	4a04      	ldr	r2, [pc, #16]	@ (80030b8 <__NVIC_SetPriorityGrouping+0x44>)
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	60d3      	str	r3, [r2, #12]
}
 80030ac:	bf00      	nop
 80030ae:	3714      	adds	r7, #20
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	e000ed00 	.word	0xe000ed00

080030bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030c0:	4b04      	ldr	r3, [pc, #16]	@ (80030d4 <__NVIC_GetPriorityGrouping+0x18>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	0a1b      	lsrs	r3, r3, #8
 80030c6:	f003 0307 	and.w	r3, r3, #7
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	e000ed00 	.word	0xe000ed00

080030d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	4603      	mov	r3, r0
 80030e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	db0b      	blt.n	8003102 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030ea:	79fb      	ldrb	r3, [r7, #7]
 80030ec:	f003 021f 	and.w	r2, r3, #31
 80030f0:	4907      	ldr	r1, [pc, #28]	@ (8003110 <__NVIC_EnableIRQ+0x38>)
 80030f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f6:	095b      	lsrs	r3, r3, #5
 80030f8:	2001      	movs	r0, #1
 80030fa:	fa00 f202 	lsl.w	r2, r0, r2
 80030fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003102:	bf00      	nop
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	e000e100 	.word	0xe000e100

08003114 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	4603      	mov	r3, r0
 800311c:	6039      	str	r1, [r7, #0]
 800311e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003124:	2b00      	cmp	r3, #0
 8003126:	db0a      	blt.n	800313e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	b2da      	uxtb	r2, r3
 800312c:	490c      	ldr	r1, [pc, #48]	@ (8003160 <__NVIC_SetPriority+0x4c>)
 800312e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003132:	0112      	lsls	r2, r2, #4
 8003134:	b2d2      	uxtb	r2, r2
 8003136:	440b      	add	r3, r1
 8003138:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800313c:	e00a      	b.n	8003154 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	b2da      	uxtb	r2, r3
 8003142:	4908      	ldr	r1, [pc, #32]	@ (8003164 <__NVIC_SetPriority+0x50>)
 8003144:	79fb      	ldrb	r3, [r7, #7]
 8003146:	f003 030f 	and.w	r3, r3, #15
 800314a:	3b04      	subs	r3, #4
 800314c:	0112      	lsls	r2, r2, #4
 800314e:	b2d2      	uxtb	r2, r2
 8003150:	440b      	add	r3, r1
 8003152:	761a      	strb	r2, [r3, #24]
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	e000e100 	.word	0xe000e100
 8003164:	e000ed00 	.word	0xe000ed00

08003168 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003168:	b480      	push	{r7}
 800316a:	b089      	sub	sp, #36	@ 0x24
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f003 0307 	and.w	r3, r3, #7
 800317a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	f1c3 0307 	rsb	r3, r3, #7
 8003182:	2b04      	cmp	r3, #4
 8003184:	bf28      	it	cs
 8003186:	2304      	movcs	r3, #4
 8003188:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	3304      	adds	r3, #4
 800318e:	2b06      	cmp	r3, #6
 8003190:	d902      	bls.n	8003198 <NVIC_EncodePriority+0x30>
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	3b03      	subs	r3, #3
 8003196:	e000      	b.n	800319a <NVIC_EncodePriority+0x32>
 8003198:	2300      	movs	r3, #0
 800319a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800319c:	f04f 32ff 	mov.w	r2, #4294967295
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	fa02 f303 	lsl.w	r3, r2, r3
 80031a6:	43da      	mvns	r2, r3
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	401a      	ands	r2, r3
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031b0:	f04f 31ff 	mov.w	r1, #4294967295
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	fa01 f303 	lsl.w	r3, r1, r3
 80031ba:	43d9      	mvns	r1, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c0:	4313      	orrs	r3, r2
         );
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3724      	adds	r7, #36	@ 0x24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b082      	sub	sp, #8
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7ff ff4c 	bl	8003074 <__NVIC_SetPriorityGrouping>
}
 80031dc:	bf00      	nop
 80031de:	3708      	adds	r7, #8
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	4603      	mov	r3, r0
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
 80031f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031f2:	2300      	movs	r3, #0
 80031f4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031f6:	f7ff ff61 	bl	80030bc <__NVIC_GetPriorityGrouping>
 80031fa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	68b9      	ldr	r1, [r7, #8]
 8003200:	6978      	ldr	r0, [r7, #20]
 8003202:	f7ff ffb1 	bl	8003168 <NVIC_EncodePriority>
 8003206:	4602      	mov	r2, r0
 8003208:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800320c:	4611      	mov	r1, r2
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff ff80 	bl	8003114 <__NVIC_SetPriority>
}
 8003214:	bf00      	nop
 8003216:	3718      	adds	r7, #24
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	4603      	mov	r3, r0
 8003224:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322a:	4618      	mov	r0, r3
 800322c:	f7ff ff54 	bl	80030d8 <__NVIC_EnableIRQ>
}
 8003230:	bf00      	nop
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e098      	b.n	800337c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	461a      	mov	r2, r3
 8003250:	4b4d      	ldr	r3, [pc, #308]	@ (8003388 <HAL_DMA_Init+0x150>)
 8003252:	429a      	cmp	r2, r3
 8003254:	d80f      	bhi.n	8003276 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	461a      	mov	r2, r3
 800325c:	4b4b      	ldr	r3, [pc, #300]	@ (800338c <HAL_DMA_Init+0x154>)
 800325e:	4413      	add	r3, r2
 8003260:	4a4b      	ldr	r2, [pc, #300]	@ (8003390 <HAL_DMA_Init+0x158>)
 8003262:	fba2 2303 	umull	r2, r3, r2, r3
 8003266:	091b      	lsrs	r3, r3, #4
 8003268:	009a      	lsls	r2, r3, #2
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a48      	ldr	r2, [pc, #288]	@ (8003394 <HAL_DMA_Init+0x15c>)
 8003272:	641a      	str	r2, [r3, #64]	@ 0x40
 8003274:	e00e      	b.n	8003294 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	461a      	mov	r2, r3
 800327c:	4b46      	ldr	r3, [pc, #280]	@ (8003398 <HAL_DMA_Init+0x160>)
 800327e:	4413      	add	r3, r2
 8003280:	4a43      	ldr	r2, [pc, #268]	@ (8003390 <HAL_DMA_Init+0x158>)
 8003282:	fba2 2303 	umull	r2, r3, r2, r3
 8003286:	091b      	lsrs	r3, r3, #4
 8003288:	009a      	lsls	r2, r3, #2
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a42      	ldr	r2, [pc, #264]	@ (800339c <HAL_DMA_Init+0x164>)
 8003292:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2202      	movs	r2, #2
 8003298:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80032aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032ae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80032b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	4313      	orrs	r3, r2
 80032dc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032ee:	d039      	beq.n	8003364 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f4:	4a27      	ldr	r2, [pc, #156]	@ (8003394 <HAL_DMA_Init+0x15c>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d11a      	bne.n	8003330 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80032fa:	4b29      	ldr	r3, [pc, #164]	@ (80033a0 <HAL_DMA_Init+0x168>)
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003302:	f003 031c 	and.w	r3, r3, #28
 8003306:	210f      	movs	r1, #15
 8003308:	fa01 f303 	lsl.w	r3, r1, r3
 800330c:	43db      	mvns	r3, r3
 800330e:	4924      	ldr	r1, [pc, #144]	@ (80033a0 <HAL_DMA_Init+0x168>)
 8003310:	4013      	ands	r3, r2
 8003312:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003314:	4b22      	ldr	r3, [pc, #136]	@ (80033a0 <HAL_DMA_Init+0x168>)
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6859      	ldr	r1, [r3, #4]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003320:	f003 031c 	and.w	r3, r3, #28
 8003324:	fa01 f303 	lsl.w	r3, r1, r3
 8003328:	491d      	ldr	r1, [pc, #116]	@ (80033a0 <HAL_DMA_Init+0x168>)
 800332a:	4313      	orrs	r3, r2
 800332c:	600b      	str	r3, [r1, #0]
 800332e:	e019      	b.n	8003364 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003330:	4b1c      	ldr	r3, [pc, #112]	@ (80033a4 <HAL_DMA_Init+0x16c>)
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003338:	f003 031c 	and.w	r3, r3, #28
 800333c:	210f      	movs	r1, #15
 800333e:	fa01 f303 	lsl.w	r3, r1, r3
 8003342:	43db      	mvns	r3, r3
 8003344:	4917      	ldr	r1, [pc, #92]	@ (80033a4 <HAL_DMA_Init+0x16c>)
 8003346:	4013      	ands	r3, r2
 8003348:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800334a:	4b16      	ldr	r3, [pc, #88]	@ (80033a4 <HAL_DMA_Init+0x16c>)
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6859      	ldr	r1, [r3, #4]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003356:	f003 031c 	and.w	r3, r3, #28
 800335a:	fa01 f303 	lsl.w	r3, r1, r3
 800335e:	4911      	ldr	r1, [pc, #68]	@ (80033a4 <HAL_DMA_Init+0x16c>)
 8003360:	4313      	orrs	r3, r2
 8003362:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	40020407 	.word	0x40020407
 800338c:	bffdfff8 	.word	0xbffdfff8
 8003390:	cccccccd 	.word	0xcccccccd
 8003394:	40020000 	.word	0x40020000
 8003398:	bffdfbf8 	.word	0xbffdfbf8
 800339c:	40020400 	.word	0x40020400
 80033a0:	400200a8 	.word	0x400200a8
 80033a4:	400204a8 	.word	0x400204a8

080033a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
 80033b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033b6:	2300      	movs	r3, #0
 80033b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d101      	bne.n	80033c8 <HAL_DMA_Start_IT+0x20>
 80033c4:	2302      	movs	r3, #2
 80033c6:	e04b      	b.n	8003460 <HAL_DMA_Start_IT+0xb8>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d13a      	bne.n	8003452 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2202      	movs	r2, #2
 80033e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 0201 	bic.w	r2, r2, #1
 80033f8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	68b9      	ldr	r1, [r7, #8]
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f000 f95f 	bl	80036c4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800340a:	2b00      	cmp	r3, #0
 800340c:	d008      	beq.n	8003420 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f042 020e 	orr.w	r2, r2, #14
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	e00f      	b.n	8003440 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 0204 	bic.w	r2, r2, #4
 800342e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f042 020a 	orr.w	r2, r2, #10
 800343e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f042 0201 	orr.w	r2, r2, #1
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	e005      	b.n	800345e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800345a:	2302      	movs	r3, #2
 800345c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800345e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3718      	adds	r7, #24
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003470:	2300      	movs	r3, #0
 8003472:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d008      	beq.n	8003492 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2204      	movs	r2, #4
 8003484:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e022      	b.n	80034d8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 020e 	bic.w	r2, r2, #14
 80034a0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 0201 	bic.w	r2, r2, #1
 80034b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034b6:	f003 021c 	and.w	r2, r3, #28
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034be:	2101      	movs	r1, #1
 80034c0:	fa01 f202 	lsl.w	r2, r1, r2
 80034c4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80034d6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3714      	adds	r7, #20
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034ec:	2300      	movs	r3, #0
 80034ee:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d005      	beq.n	8003508 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2204      	movs	r2, #4
 8003500:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	73fb      	strb	r3, [r7, #15]
 8003506:	e029      	b.n	800355c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 020e 	bic.w	r2, r2, #14
 8003516:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 0201 	bic.w	r2, r2, #1
 8003526:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800352c:	f003 021c 	and.w	r2, r3, #28
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003534:	2101      	movs	r1, #1
 8003536:	fa01 f202 	lsl.w	r2, r1, r2
 800353a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003550:	2b00      	cmp	r3, #0
 8003552:	d003      	beq.n	800355c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	4798      	blx	r3
    }
  }
  return status;
 800355c:	7bfb      	ldrb	r3, [r7, #15]
}
 800355e:	4618      	mov	r0, r3
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b084      	sub	sp, #16
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003582:	f003 031c 	and.w	r3, r3, #28
 8003586:	2204      	movs	r2, #4
 8003588:	409a      	lsls	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	4013      	ands	r3, r2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d026      	beq.n	80035e0 <HAL_DMA_IRQHandler+0x7a>
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	2b00      	cmp	r3, #0
 800359a:	d021      	beq.n	80035e0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0320 	and.w	r3, r3, #32
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d107      	bne.n	80035ba <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f022 0204 	bic.w	r2, r2, #4
 80035b8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035be:	f003 021c 	and.w	r2, r3, #28
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c6:	2104      	movs	r1, #4
 80035c8:	fa01 f202 	lsl.w	r2, r1, r2
 80035cc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d071      	beq.n	80036ba <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80035de:	e06c      	b.n	80036ba <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e4:	f003 031c 	and.w	r3, r3, #28
 80035e8:	2202      	movs	r2, #2
 80035ea:	409a      	lsls	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4013      	ands	r3, r2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d02e      	beq.n	8003652 <HAL_DMA_IRQHandler+0xec>
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d029      	beq.n	8003652 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0320 	and.w	r3, r3, #32
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10b      	bne.n	8003624 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 020a 	bic.w	r2, r2, #10
 800361a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003628:	f003 021c 	and.w	r2, r3, #28
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003630:	2102      	movs	r1, #2
 8003632:	fa01 f202 	lsl.w	r2, r1, r2
 8003636:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003644:	2b00      	cmp	r3, #0
 8003646:	d038      	beq.n	80036ba <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003650:	e033      	b.n	80036ba <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003656:	f003 031c 	and.w	r3, r3, #28
 800365a:	2208      	movs	r2, #8
 800365c:	409a      	lsls	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	4013      	ands	r3, r2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d02a      	beq.n	80036bc <HAL_DMA_IRQHandler+0x156>
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	f003 0308 	and.w	r3, r3, #8
 800366c:	2b00      	cmp	r3, #0
 800366e:	d025      	beq.n	80036bc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f022 020e 	bic.w	r2, r2, #14
 800367e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003684:	f003 021c 	and.w	r2, r3, #28
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368c:	2101      	movs	r1, #1
 800368e:	fa01 f202 	lsl.w	r2, r1, r2
 8003692:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d004      	beq.n	80036bc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80036ba:	bf00      	nop
 80036bc:	bf00      	nop
}
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
 80036d0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036d6:	f003 021c 	and.w	r2, r3, #28
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036de:	2101      	movs	r1, #1
 80036e0:	fa01 f202 	lsl.w	r2, r1, r2
 80036e4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	2b10      	cmp	r3, #16
 80036f4:	d108      	bne.n	8003708 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68ba      	ldr	r2, [r7, #8]
 8003704:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003706:	e007      	b.n	8003718 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68ba      	ldr	r2, [r7, #8]
 800370e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	60da      	str	r2, [r3, #12]
}
 8003718:	bf00      	nop
 800371a:	3714      	adds	r7, #20
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003724:	b480      	push	{r7}
 8003726:	b087      	sub	sp, #28
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800372e:	2300      	movs	r3, #0
 8003730:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003732:	e166      	b.n	8003a02 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	2101      	movs	r1, #1
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	fa01 f303 	lsl.w	r3, r1, r3
 8003740:	4013      	ands	r3, r2
 8003742:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2b00      	cmp	r3, #0
 8003748:	f000 8158 	beq.w	80039fc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f003 0303 	and.w	r3, r3, #3
 8003754:	2b01      	cmp	r3, #1
 8003756:	d005      	beq.n	8003764 <HAL_GPIO_Init+0x40>
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f003 0303 	and.w	r3, r3, #3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d130      	bne.n	80037c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	2203      	movs	r2, #3
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	43db      	mvns	r3, r3
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	4013      	ands	r3, r2
 800377a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	68da      	ldr	r2, [r3, #12]
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	4313      	orrs	r3, r2
 800378c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800379a:	2201      	movs	r2, #1
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	fa02 f303 	lsl.w	r3, r2, r3
 80037a2:	43db      	mvns	r3, r3
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	4013      	ands	r3, r2
 80037a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	091b      	lsrs	r3, r3, #4
 80037b0:	f003 0201 	and.w	r2, r3, #1
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	4313      	orrs	r3, r2
 80037be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f003 0303 	and.w	r3, r3, #3
 80037ce:	2b03      	cmp	r3, #3
 80037d0:	d017      	beq.n	8003802 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	2203      	movs	r2, #3
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	43db      	mvns	r3, r3
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	4013      	ands	r3, r2
 80037e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	689a      	ldr	r2, [r3, #8]
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	fa02 f303 	lsl.w	r3, r2, r3
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f003 0303 	and.w	r3, r3, #3
 800380a:	2b02      	cmp	r3, #2
 800380c:	d123      	bne.n	8003856 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	08da      	lsrs	r2, r3, #3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	3208      	adds	r2, #8
 8003816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800381a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	f003 0307 	and.w	r3, r3, #7
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	220f      	movs	r2, #15
 8003826:	fa02 f303 	lsl.w	r3, r2, r3
 800382a:	43db      	mvns	r3, r3
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	4013      	ands	r3, r2
 8003830:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	691a      	ldr	r2, [r3, #16]
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	fa02 f303 	lsl.w	r3, r2, r3
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	4313      	orrs	r3, r2
 8003846:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	08da      	lsrs	r2, r3, #3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	3208      	adds	r2, #8
 8003850:	6939      	ldr	r1, [r7, #16]
 8003852:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	2203      	movs	r2, #3
 8003862:	fa02 f303 	lsl.w	r3, r2, r3
 8003866:	43db      	mvns	r3, r3
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	4013      	ands	r3, r2
 800386c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f003 0203 	and.w	r2, r3, #3
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	fa02 f303 	lsl.w	r3, r2, r3
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	4313      	orrs	r3, r2
 8003882:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003892:	2b00      	cmp	r3, #0
 8003894:	f000 80b2 	beq.w	80039fc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003898:	4b61      	ldr	r3, [pc, #388]	@ (8003a20 <HAL_GPIO_Init+0x2fc>)
 800389a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800389c:	4a60      	ldr	r2, [pc, #384]	@ (8003a20 <HAL_GPIO_Init+0x2fc>)
 800389e:	f043 0301 	orr.w	r3, r3, #1
 80038a2:	6613      	str	r3, [r2, #96]	@ 0x60
 80038a4:	4b5e      	ldr	r3, [pc, #376]	@ (8003a20 <HAL_GPIO_Init+0x2fc>)
 80038a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038a8:	f003 0301 	and.w	r3, r3, #1
 80038ac:	60bb      	str	r3, [r7, #8]
 80038ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80038b0:	4a5c      	ldr	r2, [pc, #368]	@ (8003a24 <HAL_GPIO_Init+0x300>)
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	089b      	lsrs	r3, r3, #2
 80038b6:	3302      	adds	r3, #2
 80038b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	f003 0303 	and.w	r3, r3, #3
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	220f      	movs	r2, #15
 80038c8:	fa02 f303 	lsl.w	r3, r2, r3
 80038cc:	43db      	mvns	r3, r3
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	4013      	ands	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80038da:	d02b      	beq.n	8003934 <HAL_GPIO_Init+0x210>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a52      	ldr	r2, [pc, #328]	@ (8003a28 <HAL_GPIO_Init+0x304>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d025      	beq.n	8003930 <HAL_GPIO_Init+0x20c>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a51      	ldr	r2, [pc, #324]	@ (8003a2c <HAL_GPIO_Init+0x308>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d01f      	beq.n	800392c <HAL_GPIO_Init+0x208>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a50      	ldr	r2, [pc, #320]	@ (8003a30 <HAL_GPIO_Init+0x30c>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d019      	beq.n	8003928 <HAL_GPIO_Init+0x204>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a4f      	ldr	r2, [pc, #316]	@ (8003a34 <HAL_GPIO_Init+0x310>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d013      	beq.n	8003924 <HAL_GPIO_Init+0x200>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a4e      	ldr	r2, [pc, #312]	@ (8003a38 <HAL_GPIO_Init+0x314>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d00d      	beq.n	8003920 <HAL_GPIO_Init+0x1fc>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a4d      	ldr	r2, [pc, #308]	@ (8003a3c <HAL_GPIO_Init+0x318>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d007      	beq.n	800391c <HAL_GPIO_Init+0x1f8>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a4c      	ldr	r2, [pc, #304]	@ (8003a40 <HAL_GPIO_Init+0x31c>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d101      	bne.n	8003918 <HAL_GPIO_Init+0x1f4>
 8003914:	2307      	movs	r3, #7
 8003916:	e00e      	b.n	8003936 <HAL_GPIO_Init+0x212>
 8003918:	2308      	movs	r3, #8
 800391a:	e00c      	b.n	8003936 <HAL_GPIO_Init+0x212>
 800391c:	2306      	movs	r3, #6
 800391e:	e00a      	b.n	8003936 <HAL_GPIO_Init+0x212>
 8003920:	2305      	movs	r3, #5
 8003922:	e008      	b.n	8003936 <HAL_GPIO_Init+0x212>
 8003924:	2304      	movs	r3, #4
 8003926:	e006      	b.n	8003936 <HAL_GPIO_Init+0x212>
 8003928:	2303      	movs	r3, #3
 800392a:	e004      	b.n	8003936 <HAL_GPIO_Init+0x212>
 800392c:	2302      	movs	r3, #2
 800392e:	e002      	b.n	8003936 <HAL_GPIO_Init+0x212>
 8003930:	2301      	movs	r3, #1
 8003932:	e000      	b.n	8003936 <HAL_GPIO_Init+0x212>
 8003934:	2300      	movs	r3, #0
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	f002 0203 	and.w	r2, r2, #3
 800393c:	0092      	lsls	r2, r2, #2
 800393e:	4093      	lsls	r3, r2
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	4313      	orrs	r3, r2
 8003944:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003946:	4937      	ldr	r1, [pc, #220]	@ (8003a24 <HAL_GPIO_Init+0x300>)
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	089b      	lsrs	r3, r3, #2
 800394c:	3302      	adds	r3, #2
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003954:	4b3b      	ldr	r3, [pc, #236]	@ (8003a44 <HAL_GPIO_Init+0x320>)
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	43db      	mvns	r3, r3
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	4013      	ands	r3, r2
 8003962:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	4313      	orrs	r3, r2
 8003976:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003978:	4a32      	ldr	r2, [pc, #200]	@ (8003a44 <HAL_GPIO_Init+0x320>)
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800397e:	4b31      	ldr	r3, [pc, #196]	@ (8003a44 <HAL_GPIO_Init+0x320>)
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	43db      	mvns	r3, r3
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	4013      	ands	r3, r2
 800398c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4313      	orrs	r3, r2
 80039a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80039a2:	4a28      	ldr	r2, [pc, #160]	@ (8003a44 <HAL_GPIO_Init+0x320>)
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80039a8:	4b26      	ldr	r3, [pc, #152]	@ (8003a44 <HAL_GPIO_Init+0x320>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	43db      	mvns	r3, r3
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	4013      	ands	r3, r2
 80039b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d003      	beq.n	80039cc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80039cc:	4a1d      	ldr	r2, [pc, #116]	@ (8003a44 <HAL_GPIO_Init+0x320>)
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80039d2:	4b1c      	ldr	r3, [pc, #112]	@ (8003a44 <HAL_GPIO_Init+0x320>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	43db      	mvns	r3, r3
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	4013      	ands	r3, r2
 80039e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d003      	beq.n	80039f6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80039f6:	4a13      	ldr	r2, [pc, #76]	@ (8003a44 <HAL_GPIO_Init+0x320>)
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	3301      	adds	r3, #1
 8003a00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	fa22 f303 	lsr.w	r3, r2, r3
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f47f ae91 	bne.w	8003734 <HAL_GPIO_Init+0x10>
  }
}
 8003a12:	bf00      	nop
 8003a14:	bf00      	nop
 8003a16:	371c      	adds	r7, #28
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr
 8003a20:	40021000 	.word	0x40021000
 8003a24:	40010000 	.word	0x40010000
 8003a28:	48000400 	.word	0x48000400
 8003a2c:	48000800 	.word	0x48000800
 8003a30:	48000c00 	.word	0x48000c00
 8003a34:	48001000 	.word	0x48001000
 8003a38:	48001400 	.word	0x48001400
 8003a3c:	48001800 	.word	0x48001800
 8003a40:	48001c00 	.word	0x48001c00
 8003a44:	40010400 	.word	0x40010400

08003a48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	460b      	mov	r3, r1
 8003a52:	807b      	strh	r3, [r7, #2]
 8003a54:	4613      	mov	r3, r2
 8003a56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a58:	787b      	ldrb	r3, [r7, #1]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a5e:	887a      	ldrh	r2, [r7, #2]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a64:	e002      	b.n	8003a6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a66:	887a      	ldrh	r2, [r7, #2]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	460b      	mov	r3, r1
 8003a82:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a8a:	887a      	ldrh	r2, [r7, #2]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	041a      	lsls	r2, r3, #16
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	43d9      	mvns	r1, r3
 8003a96:	887b      	ldrh	r3, [r7, #2]
 8003a98:	400b      	ands	r3, r1
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	619a      	str	r2, [r3, #24]
}
 8003aa0:	bf00      	nop
 8003aa2:	3714      	adds	r7, #20
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003ab6:	4b08      	ldr	r3, [pc, #32]	@ (8003ad8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ab8:	695a      	ldr	r2, [r3, #20]
 8003aba:	88fb      	ldrh	r3, [r7, #6]
 8003abc:	4013      	ands	r3, r2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d006      	beq.n	8003ad0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ac2:	4a05      	ldr	r2, [pc, #20]	@ (8003ad8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ac4:	88fb      	ldrh	r3, [r7, #6]
 8003ac6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ac8:	88fb      	ldrh	r3, [r7, #6]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7fc fee0 	bl	8000890 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ad0:	bf00      	nop
 8003ad2:	3708      	adds	r7, #8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	40010400 	.word	0x40010400

08003adc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e08d      	b.n	8003c0a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d106      	bne.n	8003b08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7fd fbf2 	bl	80012ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2224      	movs	r2, #36	@ 0x24
 8003b0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0201 	bic.w	r2, r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685a      	ldr	r2, [r3, #4]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003b2c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b3c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d107      	bne.n	8003b56 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	689a      	ldr	r2, [r3, #8]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b52:	609a      	str	r2, [r3, #8]
 8003b54:	e006      	b.n	8003b64 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	689a      	ldr	r2, [r3, #8]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003b62:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d108      	bne.n	8003b7e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b7a:	605a      	str	r2, [r3, #4]
 8003b7c:	e007      	b.n	8003b8e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b8c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	6812      	ldr	r2, [r2, #0]
 8003b98:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003b9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ba0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68da      	ldr	r2, [r3, #12]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003bb0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	691a      	ldr	r2, [r3, #16]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	69d9      	ldr	r1, [r3, #28]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a1a      	ldr	r2, [r3, #32]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f042 0201 	orr.w	r2, r2, #1
 8003bea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3708      	adds	r7, #8
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
	...

08003c14 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b088      	sub	sp, #32
 8003c18:	af02      	add	r7, sp, #8
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	4608      	mov	r0, r1
 8003c1e:	4611      	mov	r1, r2
 8003c20:	461a      	mov	r2, r3
 8003c22:	4603      	mov	r3, r0
 8003c24:	817b      	strh	r3, [r7, #10]
 8003c26:	460b      	mov	r3, r1
 8003c28:	813b      	strh	r3, [r7, #8]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b20      	cmp	r3, #32
 8003c38:	f040 80f9 	bne.w	8003e2e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c3c:	6a3b      	ldr	r3, [r7, #32]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d002      	beq.n	8003c48 <HAL_I2C_Mem_Write+0x34>
 8003c42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d105      	bne.n	8003c54 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c4e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e0ed      	b.n	8003e30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d101      	bne.n	8003c62 <HAL_I2C_Mem_Write+0x4e>
 8003c5e:	2302      	movs	r3, #2
 8003c60:	e0e6      	b.n	8003e30 <HAL_I2C_Mem_Write+0x21c>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c6a:	f7fd fd27 	bl	80016bc <HAL_GetTick>
 8003c6e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	9300      	str	r3, [sp, #0]
 8003c74:	2319      	movs	r3, #25
 8003c76:	2201      	movs	r2, #1
 8003c78:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f000 fac3 	bl	8004208 <I2C_WaitOnFlagUntilTimeout>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d001      	beq.n	8003c8c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e0d1      	b.n	8003e30 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2221      	movs	r2, #33	@ 0x21
 8003c90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2240      	movs	r2, #64	@ 0x40
 8003c98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6a3a      	ldr	r2, [r7, #32]
 8003ca6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003cac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cb4:	88f8      	ldrh	r0, [r7, #6]
 8003cb6:	893a      	ldrh	r2, [r7, #8]
 8003cb8:	8979      	ldrh	r1, [r7, #10]
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	9301      	str	r3, [sp, #4]
 8003cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f000 f9d3 	bl	8004070 <I2C_RequestMemoryWrite>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d005      	beq.n	8003cdc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e0a9      	b.n	8003e30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	2bff      	cmp	r3, #255	@ 0xff
 8003ce4:	d90e      	bls.n	8003d04 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	22ff      	movs	r2, #255	@ 0xff
 8003cea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cf0:	b2da      	uxtb	r2, r3
 8003cf2:	8979      	ldrh	r1, [r7, #10]
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	9300      	str	r3, [sp, #0]
 8003cf8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f000 fc47 	bl	8004590 <I2C_TransferConfig>
 8003d02:	e00f      	b.n	8003d24 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d12:	b2da      	uxtb	r2, r3
 8003d14:	8979      	ldrh	r1, [r7, #10]
 8003d16:	2300      	movs	r3, #0
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f000 fc36 	bl	8004590 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 fac6 	bl	80042ba <I2C_WaitOnTXISFlagUntilTimeout>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e07b      	b.n	8003e30 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3c:	781a      	ldrb	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d48:	1c5a      	adds	r2, r3, #1
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	3b01      	subs	r3, #1
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d60:	3b01      	subs	r3, #1
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d034      	beq.n	8003ddc <HAL_I2C_Mem_Write+0x1c8>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d130      	bne.n	8003ddc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d80:	2200      	movs	r2, #0
 8003d82:	2180      	movs	r1, #128	@ 0x80
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f000 fa3f 	bl	8004208 <I2C_WaitOnFlagUntilTimeout>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e04d      	b.n	8003e30 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	2bff      	cmp	r3, #255	@ 0xff
 8003d9c:	d90e      	bls.n	8003dbc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	22ff      	movs	r2, #255	@ 0xff
 8003da2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003da8:	b2da      	uxtb	r2, r3
 8003daa:	8979      	ldrh	r1, [r7, #10]
 8003dac:	2300      	movs	r3, #0
 8003dae:	9300      	str	r3, [sp, #0]
 8003db0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f000 fbeb 	bl	8004590 <I2C_TransferConfig>
 8003dba:	e00f      	b.n	8003ddc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	8979      	ldrh	r1, [r7, #10]
 8003dce:	2300      	movs	r3, #0
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f000 fbda 	bl	8004590 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d19e      	bne.n	8003d24 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f000 faac 	bl	8004348 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e01a      	b.n	8003e30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2220      	movs	r2, #32
 8003e00:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	6859      	ldr	r1, [r3, #4]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8003e38 <HAL_I2C_Mem_Write+0x224>)
 8003e0e:	400b      	ands	r3, r1
 8003e10:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2220      	movs	r2, #32
 8003e16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	e000      	b.n	8003e30 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003e2e:	2302      	movs	r3, #2
  }
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3718      	adds	r7, #24
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	fe00e800 	.word	0xfe00e800

08003e3c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b088      	sub	sp, #32
 8003e40:	af02      	add	r7, sp, #8
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	4608      	mov	r0, r1
 8003e46:	4611      	mov	r1, r2
 8003e48:	461a      	mov	r2, r3
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	817b      	strh	r3, [r7, #10]
 8003e4e:	460b      	mov	r3, r1
 8003e50:	813b      	strh	r3, [r7, #8]
 8003e52:	4613      	mov	r3, r2
 8003e54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b20      	cmp	r3, #32
 8003e60:	f040 80fd 	bne.w	800405e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e64:	6a3b      	ldr	r3, [r7, #32]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d002      	beq.n	8003e70 <HAL_I2C_Mem_Read+0x34>
 8003e6a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d105      	bne.n	8003e7c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e76:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e0f1      	b.n	8004060 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d101      	bne.n	8003e8a <HAL_I2C_Mem_Read+0x4e>
 8003e86:	2302      	movs	r3, #2
 8003e88:	e0ea      	b.n	8004060 <HAL_I2C_Mem_Read+0x224>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e92:	f7fd fc13 	bl	80016bc <HAL_GetTick>
 8003e96:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	2319      	movs	r3, #25
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f000 f9af 	bl	8004208 <I2C_WaitOnFlagUntilTimeout>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e0d5      	b.n	8004060 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2222      	movs	r2, #34	@ 0x22
 8003eb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2240      	movs	r2, #64	@ 0x40
 8003ec0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6a3a      	ldr	r2, [r7, #32]
 8003ece:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003ed4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003edc:	88f8      	ldrh	r0, [r7, #6]
 8003ede:	893a      	ldrh	r2, [r7, #8]
 8003ee0:	8979      	ldrh	r1, [r7, #10]
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	9301      	str	r3, [sp, #4]
 8003ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ee8:	9300      	str	r3, [sp, #0]
 8003eea:	4603      	mov	r3, r0
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	f000 f913 	bl	8004118 <I2C_RequestMemoryRead>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d005      	beq.n	8003f04 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e0ad      	b.n	8004060 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	2bff      	cmp	r3, #255	@ 0xff
 8003f0c:	d90e      	bls.n	8003f2c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2201      	movs	r2, #1
 8003f12:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f18:	b2da      	uxtb	r2, r3
 8003f1a:	8979      	ldrh	r1, [r7, #10]
 8003f1c:	4b52      	ldr	r3, [pc, #328]	@ (8004068 <HAL_I2C_Mem_Read+0x22c>)
 8003f1e:	9300      	str	r3, [sp, #0]
 8003f20:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f000 fb33 	bl	8004590 <I2C_TransferConfig>
 8003f2a:	e00f      	b.n	8003f4c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f3a:	b2da      	uxtb	r2, r3
 8003f3c:	8979      	ldrh	r1, [r7, #10]
 8003f3e:	4b4a      	ldr	r3, [pc, #296]	@ (8004068 <HAL_I2C_Mem_Read+0x22c>)
 8003f40:	9300      	str	r3, [sp, #0]
 8003f42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 fb22 	bl	8004590 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f52:	2200      	movs	r2, #0
 8003f54:	2104      	movs	r1, #4
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f000 f956 	bl	8004208 <I2C_WaitOnFlagUntilTimeout>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e07c      	b.n	8004060 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f70:	b2d2      	uxtb	r2, r2
 8003f72:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f78:	1c5a      	adds	r2, r3, #1
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f82:	3b01      	subs	r3, #1
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	3b01      	subs	r3, #1
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d034      	beq.n	800400c <HAL_I2C_Mem_Read+0x1d0>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d130      	bne.n	800400c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	9300      	str	r3, [sp, #0]
 8003fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	2180      	movs	r1, #128	@ 0x80
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f000 f927 	bl	8004208 <I2C_WaitOnFlagUntilTimeout>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e04d      	b.n	8004060 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	2bff      	cmp	r3, #255	@ 0xff
 8003fcc:	d90e      	bls.n	8003fec <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fd8:	b2da      	uxtb	r2, r3
 8003fda:	8979      	ldrh	r1, [r7, #10]
 8003fdc:	2300      	movs	r3, #0
 8003fde:	9300      	str	r3, [sp, #0]
 8003fe0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f000 fad3 	bl	8004590 <I2C_TransferConfig>
 8003fea:	e00f      	b.n	800400c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ffa:	b2da      	uxtb	r2, r3
 8003ffc:	8979      	ldrh	r1, [r7, #10]
 8003ffe:	2300      	movs	r3, #0
 8004000:	9300      	str	r3, [sp, #0]
 8004002:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f000 fac2 	bl	8004590 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004010:	b29b      	uxth	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d19a      	bne.n	8003f4c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f000 f994 	bl	8004348 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e01a      	b.n	8004060 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2220      	movs	r2, #32
 8004030:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6859      	ldr	r1, [r3, #4]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	4b0b      	ldr	r3, [pc, #44]	@ (800406c <HAL_I2C_Mem_Read+0x230>)
 800403e:	400b      	ands	r3, r1
 8004040:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2220      	movs	r2, #32
 8004046:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800405a:	2300      	movs	r3, #0
 800405c:	e000      	b.n	8004060 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800405e:	2302      	movs	r3, #2
  }
}
 8004060:	4618      	mov	r0, r3
 8004062:	3718      	adds	r7, #24
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	80002400 	.word	0x80002400
 800406c:	fe00e800 	.word	0xfe00e800

08004070 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af02      	add	r7, sp, #8
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	4608      	mov	r0, r1
 800407a:	4611      	mov	r1, r2
 800407c:	461a      	mov	r2, r3
 800407e:	4603      	mov	r3, r0
 8004080:	817b      	strh	r3, [r7, #10]
 8004082:	460b      	mov	r3, r1
 8004084:	813b      	strh	r3, [r7, #8]
 8004086:	4613      	mov	r3, r2
 8004088:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800408a:	88fb      	ldrh	r3, [r7, #6]
 800408c:	b2da      	uxtb	r2, r3
 800408e:	8979      	ldrh	r1, [r7, #10]
 8004090:	4b20      	ldr	r3, [pc, #128]	@ (8004114 <I2C_RequestMemoryWrite+0xa4>)
 8004092:	9300      	str	r3, [sp, #0]
 8004094:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f000 fa79 	bl	8004590 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800409e:	69fa      	ldr	r2, [r7, #28]
 80040a0:	69b9      	ldr	r1, [r7, #24]
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f000 f909 	bl	80042ba <I2C_WaitOnTXISFlagUntilTimeout>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e02c      	b.n	800410c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040b2:	88fb      	ldrh	r3, [r7, #6]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d105      	bne.n	80040c4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040b8:	893b      	ldrh	r3, [r7, #8]
 80040ba:	b2da      	uxtb	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	629a      	str	r2, [r3, #40]	@ 0x28
 80040c2:	e015      	b.n	80040f0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80040c4:	893b      	ldrh	r3, [r7, #8]
 80040c6:	0a1b      	lsrs	r3, r3, #8
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	b2da      	uxtb	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040d2:	69fa      	ldr	r2, [r7, #28]
 80040d4:	69b9      	ldr	r1, [r7, #24]
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f000 f8ef 	bl	80042ba <I2C_WaitOnTXISFlagUntilTimeout>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e012      	b.n	800410c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040e6:	893b      	ldrh	r3, [r7, #8]
 80040e8:	b2da      	uxtb	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	9300      	str	r3, [sp, #0]
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	2200      	movs	r2, #0
 80040f8:	2180      	movs	r1, #128	@ 0x80
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f000 f884 	bl	8004208 <I2C_WaitOnFlagUntilTimeout>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e000      	b.n	800410c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	80002000 	.word	0x80002000

08004118 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af02      	add	r7, sp, #8
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	4608      	mov	r0, r1
 8004122:	4611      	mov	r1, r2
 8004124:	461a      	mov	r2, r3
 8004126:	4603      	mov	r3, r0
 8004128:	817b      	strh	r3, [r7, #10]
 800412a:	460b      	mov	r3, r1
 800412c:	813b      	strh	r3, [r7, #8]
 800412e:	4613      	mov	r3, r2
 8004130:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004132:	88fb      	ldrh	r3, [r7, #6]
 8004134:	b2da      	uxtb	r2, r3
 8004136:	8979      	ldrh	r1, [r7, #10]
 8004138:	4b20      	ldr	r3, [pc, #128]	@ (80041bc <I2C_RequestMemoryRead+0xa4>)
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	2300      	movs	r3, #0
 800413e:	68f8      	ldr	r0, [r7, #12]
 8004140:	f000 fa26 	bl	8004590 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004144:	69fa      	ldr	r2, [r7, #28]
 8004146:	69b9      	ldr	r1, [r7, #24]
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f000 f8b6 	bl	80042ba <I2C_WaitOnTXISFlagUntilTimeout>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e02c      	b.n	80041b2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004158:	88fb      	ldrh	r3, [r7, #6]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d105      	bne.n	800416a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800415e:	893b      	ldrh	r3, [r7, #8]
 8004160:	b2da      	uxtb	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	629a      	str	r2, [r3, #40]	@ 0x28
 8004168:	e015      	b.n	8004196 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800416a:	893b      	ldrh	r3, [r7, #8]
 800416c:	0a1b      	lsrs	r3, r3, #8
 800416e:	b29b      	uxth	r3, r3
 8004170:	b2da      	uxtb	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004178:	69fa      	ldr	r2, [r7, #28]
 800417a:	69b9      	ldr	r1, [r7, #24]
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f000 f89c 	bl	80042ba <I2C_WaitOnTXISFlagUntilTimeout>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d001      	beq.n	800418c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e012      	b.n	80041b2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800418c:	893b      	ldrh	r3, [r7, #8]
 800418e:	b2da      	uxtb	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	9300      	str	r3, [sp, #0]
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	2200      	movs	r2, #0
 800419e:	2140      	movs	r1, #64	@ 0x40
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f000 f831 	bl	8004208 <I2C_WaitOnFlagUntilTimeout>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d001      	beq.n	80041b0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e000      	b.n	80041b2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	80002000 	.word	0x80002000

080041c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d103      	bne.n	80041de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2200      	movs	r2, #0
 80041dc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	f003 0301 	and.w	r3, r3, #1
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d007      	beq.n	80041fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	699a      	ldr	r2, [r3, #24]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f042 0201 	orr.w	r2, r2, #1
 80041fa:	619a      	str	r2, [r3, #24]
  }
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	603b      	str	r3, [r7, #0]
 8004214:	4613      	mov	r3, r2
 8004216:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004218:	e03b      	b.n	8004292 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	6839      	ldr	r1, [r7, #0]
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f000 f8d6 	bl	80043d0 <I2C_IsErrorOccurred>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d001      	beq.n	800422e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e041      	b.n	80042b2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004234:	d02d      	beq.n	8004292 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004236:	f7fd fa41 	bl	80016bc <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	429a      	cmp	r2, r3
 8004244:	d302      	bcc.n	800424c <I2C_WaitOnFlagUntilTimeout+0x44>
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d122      	bne.n	8004292 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	699a      	ldr	r2, [r3, #24]
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	4013      	ands	r3, r2
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	429a      	cmp	r2, r3
 800425a:	bf0c      	ite	eq
 800425c:	2301      	moveq	r3, #1
 800425e:	2300      	movne	r3, #0
 8004260:	b2db      	uxtb	r3, r3
 8004262:	461a      	mov	r2, r3
 8004264:	79fb      	ldrb	r3, [r7, #7]
 8004266:	429a      	cmp	r2, r3
 8004268:	d113      	bne.n	8004292 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800426e:	f043 0220 	orr.w	r2, r3, #32
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2220      	movs	r2, #32
 800427a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e00f      	b.n	80042b2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	699a      	ldr	r2, [r3, #24]
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	4013      	ands	r3, r2
 800429c:	68ba      	ldr	r2, [r7, #8]
 800429e:	429a      	cmp	r2, r3
 80042a0:	bf0c      	ite	eq
 80042a2:	2301      	moveq	r3, #1
 80042a4:	2300      	movne	r3, #0
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	461a      	mov	r2, r3
 80042aa:	79fb      	ldrb	r3, [r7, #7]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d0b4      	beq.n	800421a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b084      	sub	sp, #16
 80042be:	af00      	add	r7, sp, #0
 80042c0:	60f8      	str	r0, [r7, #12]
 80042c2:	60b9      	str	r1, [r7, #8]
 80042c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80042c6:	e033      	b.n	8004330 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	68b9      	ldr	r1, [r7, #8]
 80042cc:	68f8      	ldr	r0, [r7, #12]
 80042ce:	f000 f87f 	bl	80043d0 <I2C_IsErrorOccurred>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d001      	beq.n	80042dc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e031      	b.n	8004340 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e2:	d025      	beq.n	8004330 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042e4:	f7fd f9ea 	bl	80016bc <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d302      	bcc.n	80042fa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d11a      	bne.n	8004330 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b02      	cmp	r3, #2
 8004306:	d013      	beq.n	8004330 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800430c:	f043 0220 	orr.w	r2, r3, #32
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2220      	movs	r2, #32
 8004318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e007      	b.n	8004340 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b02      	cmp	r3, #2
 800433c:	d1c4      	bne.n	80042c8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004354:	e02f      	b.n	80043b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	68b9      	ldr	r1, [r7, #8]
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	f000 f838 	bl	80043d0 <I2C_IsErrorOccurred>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e02d      	b.n	80043c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800436a:	f7fd f9a7 	bl	80016bc <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	68ba      	ldr	r2, [r7, #8]
 8004376:	429a      	cmp	r2, r3
 8004378:	d302      	bcc.n	8004380 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d11a      	bne.n	80043b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	f003 0320 	and.w	r3, r3, #32
 800438a:	2b20      	cmp	r3, #32
 800438c:	d013      	beq.n	80043b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004392:	f043 0220 	orr.w	r2, r3, #32
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2220      	movs	r2, #32
 800439e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e007      	b.n	80043c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	f003 0320 	and.w	r3, r3, #32
 80043c0:	2b20      	cmp	r3, #32
 80043c2:	d1c8      	bne.n	8004356 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
	...

080043d0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b08a      	sub	sp, #40	@ 0x28
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043dc:	2300      	movs	r3, #0
 80043de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80043ea:	2300      	movs	r3, #0
 80043ec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	f003 0310 	and.w	r3, r3, #16
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d068      	beq.n	80044ce <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2210      	movs	r2, #16
 8004402:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004404:	e049      	b.n	800449a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800440c:	d045      	beq.n	800449a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800440e:	f7fd f955 	bl	80016bc <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	68ba      	ldr	r2, [r7, #8]
 800441a:	429a      	cmp	r2, r3
 800441c:	d302      	bcc.n	8004424 <I2C_IsErrorOccurred+0x54>
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d13a      	bne.n	800449a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800442e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004436:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004442:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004446:	d121      	bne.n	800448c <I2C_IsErrorOccurred+0xbc>
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800444e:	d01d      	beq.n	800448c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004450:	7cfb      	ldrb	r3, [r7, #19]
 8004452:	2b20      	cmp	r3, #32
 8004454:	d01a      	beq.n	800448c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	685a      	ldr	r2, [r3, #4]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004464:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004466:	f7fd f929 	bl	80016bc <HAL_GetTick>
 800446a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800446c:	e00e      	b.n	800448c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800446e:	f7fd f925 	bl	80016bc <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b19      	cmp	r3, #25
 800447a:	d907      	bls.n	800448c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800447c:	6a3b      	ldr	r3, [r7, #32]
 800447e:	f043 0320 	orr.w	r3, r3, #32
 8004482:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800448a:	e006      	b.n	800449a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	f003 0320 	and.w	r3, r3, #32
 8004496:	2b20      	cmp	r3, #32
 8004498:	d1e9      	bne.n	800446e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	f003 0320 	and.w	r3, r3, #32
 80044a4:	2b20      	cmp	r3, #32
 80044a6:	d003      	beq.n	80044b0 <I2C_IsErrorOccurred+0xe0>
 80044a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d0aa      	beq.n	8004406 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80044b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d103      	bne.n	80044c0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2220      	movs	r2, #32
 80044be:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80044c0:	6a3b      	ldr	r3, [r7, #32]
 80044c2:	f043 0304 	orr.w	r3, r3, #4
 80044c6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00b      	beq.n	80044f8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80044e0:	6a3b      	ldr	r3, [r7, #32]
 80044e2:	f043 0301 	orr.w	r3, r3, #1
 80044e6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80044f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00b      	beq.n	800451a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004502:	6a3b      	ldr	r3, [r7, #32]
 8004504:	f043 0308 	orr.w	r3, r3, #8
 8004508:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004512:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004520:	2b00      	cmp	r3, #0
 8004522:	d00b      	beq.n	800453c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004524:	6a3b      	ldr	r3, [r7, #32]
 8004526:	f043 0302 	orr.w	r3, r3, #2
 800452a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004534:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800453c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004540:	2b00      	cmp	r3, #0
 8004542:	d01c      	beq.n	800457e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f7ff fe3b 	bl	80041c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	6859      	ldr	r1, [r3, #4]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	4b0d      	ldr	r3, [pc, #52]	@ (800458c <I2C_IsErrorOccurred+0x1bc>)
 8004556:	400b      	ands	r3, r1
 8004558:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800455e:	6a3b      	ldr	r3, [r7, #32]
 8004560:	431a      	orrs	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2220      	movs	r2, #32
 800456a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800457e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004582:	4618      	mov	r0, r3
 8004584:	3728      	adds	r7, #40	@ 0x28
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	fe00e800 	.word	0xfe00e800

08004590 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004590:	b480      	push	{r7}
 8004592:	b087      	sub	sp, #28
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	607b      	str	r3, [r7, #4]
 800459a:	460b      	mov	r3, r1
 800459c:	817b      	strh	r3, [r7, #10]
 800459e:	4613      	mov	r3, r2
 80045a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045a2:	897b      	ldrh	r3, [r7, #10]
 80045a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80045a8:	7a7b      	ldrb	r3, [r7, #9]
 80045aa:	041b      	lsls	r3, r3, #16
 80045ac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045b0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045b6:	6a3b      	ldr	r3, [r7, #32]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80045be:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	6a3b      	ldr	r3, [r7, #32]
 80045c8:	0d5b      	lsrs	r3, r3, #21
 80045ca:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80045ce:	4b08      	ldr	r3, [pc, #32]	@ (80045f0 <I2C_TransferConfig+0x60>)
 80045d0:	430b      	orrs	r3, r1
 80045d2:	43db      	mvns	r3, r3
 80045d4:	ea02 0103 	and.w	r1, r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	430a      	orrs	r2, r1
 80045e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80045e2:	bf00      	nop
 80045e4:	371c      	adds	r7, #28
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	03ff63ff 	.word	0x03ff63ff

080045f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b20      	cmp	r3, #32
 8004608:	d138      	bne.n	800467c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004610:	2b01      	cmp	r3, #1
 8004612:	d101      	bne.n	8004618 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004614:	2302      	movs	r3, #2
 8004616:	e032      	b.n	800467e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2224      	movs	r2, #36	@ 0x24
 8004624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f022 0201 	bic.w	r2, r2, #1
 8004636:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004646:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	6819      	ldr	r1, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	683a      	ldr	r2, [r7, #0]
 8004654:	430a      	orrs	r2, r1
 8004656:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f042 0201 	orr.w	r2, r2, #1
 8004666:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2220      	movs	r2, #32
 800466c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004678:	2300      	movs	r3, #0
 800467a:	e000      	b.n	800467e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800467c:	2302      	movs	r3, #2
  }
}
 800467e:	4618      	mov	r0, r3
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr

0800468a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800468a:	b480      	push	{r7}
 800468c:	b085      	sub	sp, #20
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
 8004692:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b20      	cmp	r3, #32
 800469e:	d139      	bne.n	8004714 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d101      	bne.n	80046ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80046aa:	2302      	movs	r3, #2
 80046ac:	e033      	b.n	8004716 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2201      	movs	r2, #1
 80046b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2224      	movs	r2, #36	@ 0x24
 80046ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f022 0201 	bic.w	r2, r2, #1
 80046cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80046dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	021b      	lsls	r3, r3, #8
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f042 0201 	orr.w	r2, r2, #1
 80046fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2220      	movs	r2, #32
 8004704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004710:	2300      	movs	r3, #0
 8004712:	e000      	b.n	8004716 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004714:	2302      	movs	r3, #2
  }
}
 8004716:	4618      	mov	r0, r3
 8004718:	3714      	adds	r7, #20
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
	...

08004724 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004724:	b480      	push	{r7}
 8004726:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004728:	4b04      	ldr	r3, [pc, #16]	@ (800473c <HAL_PWREx_GetVoltageRange+0x18>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004730:	4618      	mov	r0, r3
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	40007000 	.word	0x40007000

08004740 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800474e:	d130      	bne.n	80047b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004750:	4b23      	ldr	r3, [pc, #140]	@ (80047e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004758:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800475c:	d038      	beq.n	80047d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800475e:	4b20      	ldr	r3, [pc, #128]	@ (80047e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004766:	4a1e      	ldr	r2, [pc, #120]	@ (80047e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004768:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800476c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800476e:	4b1d      	ldr	r3, [pc, #116]	@ (80047e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2232      	movs	r2, #50	@ 0x32
 8004774:	fb02 f303 	mul.w	r3, r2, r3
 8004778:	4a1b      	ldr	r2, [pc, #108]	@ (80047e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800477a:	fba2 2303 	umull	r2, r3, r2, r3
 800477e:	0c9b      	lsrs	r3, r3, #18
 8004780:	3301      	adds	r3, #1
 8004782:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004784:	e002      	b.n	800478c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	3b01      	subs	r3, #1
 800478a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800478c:	4b14      	ldr	r3, [pc, #80]	@ (80047e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004794:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004798:	d102      	bne.n	80047a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1f2      	bne.n	8004786 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047a0:	4b0f      	ldr	r3, [pc, #60]	@ (80047e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047ac:	d110      	bne.n	80047d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e00f      	b.n	80047d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80047b2:	4b0b      	ldr	r3, [pc, #44]	@ (80047e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80047ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047be:	d007      	beq.n	80047d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80047c0:	4b07      	ldr	r3, [pc, #28]	@ (80047e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80047c8:	4a05      	ldr	r2, [pc, #20]	@ (80047e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80047ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3714      	adds	r7, #20
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	40007000 	.word	0x40007000
 80047e4:	20000000 	.word	0x20000000
 80047e8:	431bde83 	.word	0x431bde83

080047ec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b088      	sub	sp, #32
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d102      	bne.n	8004800 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	f000 bc08 	b.w	8005010 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004800:	4b96      	ldr	r3, [pc, #600]	@ (8004a5c <HAL_RCC_OscConfig+0x270>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f003 030c 	and.w	r3, r3, #12
 8004808:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800480a:	4b94      	ldr	r3, [pc, #592]	@ (8004a5c <HAL_RCC_OscConfig+0x270>)
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	f003 0303 	and.w	r3, r3, #3
 8004812:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0310 	and.w	r3, r3, #16
 800481c:	2b00      	cmp	r3, #0
 800481e:	f000 80e4 	beq.w	80049ea <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d007      	beq.n	8004838 <HAL_RCC_OscConfig+0x4c>
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	2b0c      	cmp	r3, #12
 800482c:	f040 808b 	bne.w	8004946 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	2b01      	cmp	r3, #1
 8004834:	f040 8087 	bne.w	8004946 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004838:	4b88      	ldr	r3, [pc, #544]	@ (8004a5c <HAL_RCC_OscConfig+0x270>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0302 	and.w	r3, r3, #2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d005      	beq.n	8004850 <HAL_RCC_OscConfig+0x64>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d101      	bne.n	8004850 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e3df      	b.n	8005010 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a1a      	ldr	r2, [r3, #32]
 8004854:	4b81      	ldr	r3, [pc, #516]	@ (8004a5c <HAL_RCC_OscConfig+0x270>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0308 	and.w	r3, r3, #8
 800485c:	2b00      	cmp	r3, #0
 800485e:	d004      	beq.n	800486a <HAL_RCC_OscConfig+0x7e>
 8004860:	4b7e      	ldr	r3, [pc, #504]	@ (8004a5c <HAL_RCC_OscConfig+0x270>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004868:	e005      	b.n	8004876 <HAL_RCC_OscConfig+0x8a>
 800486a:	4b7c      	ldr	r3, [pc, #496]	@ (8004a5c <HAL_RCC_OscConfig+0x270>)
 800486c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004870:	091b      	lsrs	r3, r3, #4
 8004872:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004876:	4293      	cmp	r3, r2
 8004878:	d223      	bcs.n	80048c2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	4618      	mov	r0, r3
 8004880:	f000 fdc4 	bl	800540c <RCC_SetFlashLatencyFromMSIRange>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d001      	beq.n	800488e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e3c0      	b.n	8005010 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800488e:	4b73      	ldr	r3, [pc, #460]	@ (8004a5c <HAL_RCC_OscConfig+0x270>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a72      	ldr	r2, [pc, #456]	@ (8004a5c <HAL_RCC_OscConfig+0x270>)
 8004894:	f043 0308 	orr.w	r3, r3, #8
 8004898:	6013      	str	r3, [r2, #0]
 800489a:	4b70      	ldr	r3, [pc, #448]	@ (8004a5c <HAL_RCC_OscConfig+0x270>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	496d      	ldr	r1, [pc, #436]	@ (8004a5c <HAL_RCC_OscConfig+0x270>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048ac:	4b6b      	ldr	r3, [pc, #428]	@ (8004a5c <HAL_RCC_OscConfig+0x270>)
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	021b      	lsls	r3, r3, #8
 80048ba:	4968      	ldr	r1, [pc, #416]	@ (8004a5c <HAL_RCC_OscConfig+0x270>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	604b      	str	r3, [r1, #4]
 80048c0:	e025      	b.n	800490e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048c2:	4b66      	ldr	r3, [pc, #408]	@ (8004a5c <HAL_RCC_OscConfig+0x270>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a65      	ldr	r2, [pc, #404]	@ (8004a5c <HAL_RCC_OscConfig+0x270>)
 80048c8:	f043 0308 	orr.w	r3, r3, #8
 80048cc:	6013      	str	r3, [r2, #0]
 80048ce:	4b63      	ldr	r3, [pc, #396]	@ (8004a5c <HAL_RCC_OscConfig+0x270>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	4960      	ldr	r1, [pc, #384]	@ (8004a5c <HAL_RCC_OscConfig+0x270>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048e0:	4b5e      	ldr	r3, [pc, #376]	@ (8004a5c <HAL_RCC_OscConfig+0x270>)
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	69db      	ldr	r3, [r3, #28]
 80048ec:	021b      	lsls	r3, r3, #8
 80048ee:	495b      	ldr	r1, [pc, #364]	@ (8004a5c <HAL_RCC_OscConfig+0x270>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d109      	bne.n	800490e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	4618      	mov	r0, r3
 8004900:	f000 fd84 	bl	800540c <RCC_SetFlashLatencyFromMSIRange>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d001      	beq.n	800490e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e380      	b.n	8005010 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800490e:	f000 fc87 	bl	8005220 <HAL_RCC_GetSysClockFreq>
 8004912:	4602      	mov	r2, r0
 8004914:	4b51      	ldr	r3, [pc, #324]	@ (8004a5c <HAL_RCC_OscConfig+0x270>)
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	091b      	lsrs	r3, r3, #4
 800491a:	f003 030f 	and.w	r3, r3, #15
 800491e:	4950      	ldr	r1, [pc, #320]	@ (8004a60 <HAL_RCC_OscConfig+0x274>)
 8004920:	5ccb      	ldrb	r3, [r1, r3]
 8004922:	f003 031f 	and.w	r3, r3, #31
 8004926:	fa22 f303 	lsr.w	r3, r2, r3
 800492a:	4a4e      	ldr	r2, [pc, #312]	@ (8004a64 <HAL_RCC_OscConfig+0x278>)
 800492c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800492e:	4b4e      	ldr	r3, [pc, #312]	@ (8004a68 <HAL_RCC_OscConfig+0x27c>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4618      	mov	r0, r3
 8004934:	f7fc fda0 	bl	8001478 <HAL_InitTick>
 8004938:	4603      	mov	r3, r0
 800493a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800493c:	7bfb      	ldrb	r3, [r7, #15]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d052      	beq.n	80049e8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004942:	7bfb      	ldrb	r3, [r7, #15]
 8004944:	e364      	b.n	8005010 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d032      	beq.n	80049b4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800494e:	4b43      	ldr	r3, [pc, #268]	@ (8004a5c <HAL_RCC_OscConfig+0x270>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a42      	ldr	r2, [pc, #264]	@ (8004a5c <HAL_RCC_OscConfig+0x270>)
 8004954:	f043 0301 	orr.w	r3, r3, #1
 8004958:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800495a:	f7fc feaf 	bl	80016bc <HAL_GetTick>
 800495e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004960:	e008      	b.n	8004974 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004962:	f7fc feab 	bl	80016bc <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	2b02      	cmp	r3, #2
 800496e:	d901      	bls.n	8004974 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e34d      	b.n	8005010 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004974:	4b39      	ldr	r3, [pc, #228]	@ (8004a5c <HAL_RCC_OscConfig+0x270>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0302 	and.w	r3, r3, #2
 800497c:	2b00      	cmp	r3, #0
 800497e:	d0f0      	beq.n	8004962 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004980:	4b36      	ldr	r3, [pc, #216]	@ (8004a5c <HAL_RCC_OscConfig+0x270>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a35      	ldr	r2, [pc, #212]	@ (8004a5c <HAL_RCC_OscConfig+0x270>)
 8004986:	f043 0308 	orr.w	r3, r3, #8
 800498a:	6013      	str	r3, [r2, #0]
 800498c:	4b33      	ldr	r3, [pc, #204]	@ (8004a5c <HAL_RCC_OscConfig+0x270>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a1b      	ldr	r3, [r3, #32]
 8004998:	4930      	ldr	r1, [pc, #192]	@ (8004a5c <HAL_RCC_OscConfig+0x270>)
 800499a:	4313      	orrs	r3, r2
 800499c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800499e:	4b2f      	ldr	r3, [pc, #188]	@ (8004a5c <HAL_RCC_OscConfig+0x270>)
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	69db      	ldr	r3, [r3, #28]
 80049aa:	021b      	lsls	r3, r3, #8
 80049ac:	492b      	ldr	r1, [pc, #172]	@ (8004a5c <HAL_RCC_OscConfig+0x270>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	604b      	str	r3, [r1, #4]
 80049b2:	e01a      	b.n	80049ea <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80049b4:	4b29      	ldr	r3, [pc, #164]	@ (8004a5c <HAL_RCC_OscConfig+0x270>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a28      	ldr	r2, [pc, #160]	@ (8004a5c <HAL_RCC_OscConfig+0x270>)
 80049ba:	f023 0301 	bic.w	r3, r3, #1
 80049be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80049c0:	f7fc fe7c 	bl	80016bc <HAL_GetTick>
 80049c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80049c6:	e008      	b.n	80049da <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049c8:	f7fc fe78 	bl	80016bc <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d901      	bls.n	80049da <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e31a      	b.n	8005010 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80049da:	4b20      	ldr	r3, [pc, #128]	@ (8004a5c <HAL_RCC_OscConfig+0x270>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1f0      	bne.n	80049c8 <HAL_RCC_OscConfig+0x1dc>
 80049e6:	e000      	b.n	80049ea <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80049e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d073      	beq.n	8004ade <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	2b08      	cmp	r3, #8
 80049fa:	d005      	beq.n	8004a08 <HAL_RCC_OscConfig+0x21c>
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	2b0c      	cmp	r3, #12
 8004a00:	d10e      	bne.n	8004a20 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	2b03      	cmp	r3, #3
 8004a06:	d10b      	bne.n	8004a20 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a08:	4b14      	ldr	r3, [pc, #80]	@ (8004a5c <HAL_RCC_OscConfig+0x270>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d063      	beq.n	8004adc <HAL_RCC_OscConfig+0x2f0>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d15f      	bne.n	8004adc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e2f7      	b.n	8005010 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a28:	d106      	bne.n	8004a38 <HAL_RCC_OscConfig+0x24c>
 8004a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8004a5c <HAL_RCC_OscConfig+0x270>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a0b      	ldr	r2, [pc, #44]	@ (8004a5c <HAL_RCC_OscConfig+0x270>)
 8004a30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a34:	6013      	str	r3, [r2, #0]
 8004a36:	e025      	b.n	8004a84 <HAL_RCC_OscConfig+0x298>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a40:	d114      	bne.n	8004a6c <HAL_RCC_OscConfig+0x280>
 8004a42:	4b06      	ldr	r3, [pc, #24]	@ (8004a5c <HAL_RCC_OscConfig+0x270>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a05      	ldr	r2, [pc, #20]	@ (8004a5c <HAL_RCC_OscConfig+0x270>)
 8004a48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a4c:	6013      	str	r3, [r2, #0]
 8004a4e:	4b03      	ldr	r3, [pc, #12]	@ (8004a5c <HAL_RCC_OscConfig+0x270>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a02      	ldr	r2, [pc, #8]	@ (8004a5c <HAL_RCC_OscConfig+0x270>)
 8004a54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a58:	6013      	str	r3, [r2, #0]
 8004a5a:	e013      	b.n	8004a84 <HAL_RCC_OscConfig+0x298>
 8004a5c:	40021000 	.word	0x40021000
 8004a60:	0800a974 	.word	0x0800a974
 8004a64:	20000000 	.word	0x20000000
 8004a68:	20000004 	.word	0x20000004
 8004a6c:	4ba0      	ldr	r3, [pc, #640]	@ (8004cf0 <HAL_RCC_OscConfig+0x504>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a9f      	ldr	r2, [pc, #636]	@ (8004cf0 <HAL_RCC_OscConfig+0x504>)
 8004a72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a76:	6013      	str	r3, [r2, #0]
 8004a78:	4b9d      	ldr	r3, [pc, #628]	@ (8004cf0 <HAL_RCC_OscConfig+0x504>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a9c      	ldr	r2, [pc, #624]	@ (8004cf0 <HAL_RCC_OscConfig+0x504>)
 8004a7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d013      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8c:	f7fc fe16 	bl	80016bc <HAL_GetTick>
 8004a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a92:	e008      	b.n	8004aa6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a94:	f7fc fe12 	bl	80016bc <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b64      	cmp	r3, #100	@ 0x64
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e2b4      	b.n	8005010 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004aa6:	4b92      	ldr	r3, [pc, #584]	@ (8004cf0 <HAL_RCC_OscConfig+0x504>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d0f0      	beq.n	8004a94 <HAL_RCC_OscConfig+0x2a8>
 8004ab2:	e014      	b.n	8004ade <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab4:	f7fc fe02 	bl	80016bc <HAL_GetTick>
 8004ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004aba:	e008      	b.n	8004ace <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004abc:	f7fc fdfe 	bl	80016bc <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b64      	cmp	r3, #100	@ 0x64
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e2a0      	b.n	8005010 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ace:	4b88      	ldr	r3, [pc, #544]	@ (8004cf0 <HAL_RCC_OscConfig+0x504>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1f0      	bne.n	8004abc <HAL_RCC_OscConfig+0x2d0>
 8004ada:	e000      	b.n	8004ade <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004adc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d060      	beq.n	8004bac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	2b04      	cmp	r3, #4
 8004aee:	d005      	beq.n	8004afc <HAL_RCC_OscConfig+0x310>
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	2b0c      	cmp	r3, #12
 8004af4:	d119      	bne.n	8004b2a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d116      	bne.n	8004b2a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004afc:	4b7c      	ldr	r3, [pc, #496]	@ (8004cf0 <HAL_RCC_OscConfig+0x504>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d005      	beq.n	8004b14 <HAL_RCC_OscConfig+0x328>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d101      	bne.n	8004b14 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e27d      	b.n	8005010 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b14:	4b76      	ldr	r3, [pc, #472]	@ (8004cf0 <HAL_RCC_OscConfig+0x504>)
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	061b      	lsls	r3, r3, #24
 8004b22:	4973      	ldr	r1, [pc, #460]	@ (8004cf0 <HAL_RCC_OscConfig+0x504>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b28:	e040      	b.n	8004bac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d023      	beq.n	8004b7a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b32:	4b6f      	ldr	r3, [pc, #444]	@ (8004cf0 <HAL_RCC_OscConfig+0x504>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a6e      	ldr	r2, [pc, #440]	@ (8004cf0 <HAL_RCC_OscConfig+0x504>)
 8004b38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b3e:	f7fc fdbd 	bl	80016bc <HAL_GetTick>
 8004b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b44:	e008      	b.n	8004b58 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b46:	f7fc fdb9 	bl	80016bc <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d901      	bls.n	8004b58 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e25b      	b.n	8005010 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b58:	4b65      	ldr	r3, [pc, #404]	@ (8004cf0 <HAL_RCC_OscConfig+0x504>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d0f0      	beq.n	8004b46 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b64:	4b62      	ldr	r3, [pc, #392]	@ (8004cf0 <HAL_RCC_OscConfig+0x504>)
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	061b      	lsls	r3, r3, #24
 8004b72:	495f      	ldr	r1, [pc, #380]	@ (8004cf0 <HAL_RCC_OscConfig+0x504>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	604b      	str	r3, [r1, #4]
 8004b78:	e018      	b.n	8004bac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b7a:	4b5d      	ldr	r3, [pc, #372]	@ (8004cf0 <HAL_RCC_OscConfig+0x504>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a5c      	ldr	r2, [pc, #368]	@ (8004cf0 <HAL_RCC_OscConfig+0x504>)
 8004b80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b86:	f7fc fd99 	bl	80016bc <HAL_GetTick>
 8004b8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b8c:	e008      	b.n	8004ba0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b8e:	f7fc fd95 	bl	80016bc <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d901      	bls.n	8004ba0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e237      	b.n	8005010 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ba0:	4b53      	ldr	r3, [pc, #332]	@ (8004cf0 <HAL_RCC_OscConfig+0x504>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1f0      	bne.n	8004b8e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0308 	and.w	r3, r3, #8
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d03c      	beq.n	8004c32 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d01c      	beq.n	8004bfa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bc0:	4b4b      	ldr	r3, [pc, #300]	@ (8004cf0 <HAL_RCC_OscConfig+0x504>)
 8004bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bc6:	4a4a      	ldr	r2, [pc, #296]	@ (8004cf0 <HAL_RCC_OscConfig+0x504>)
 8004bc8:	f043 0301 	orr.w	r3, r3, #1
 8004bcc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bd0:	f7fc fd74 	bl	80016bc <HAL_GetTick>
 8004bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bd6:	e008      	b.n	8004bea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bd8:	f7fc fd70 	bl	80016bc <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e212      	b.n	8005010 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bea:	4b41      	ldr	r3, [pc, #260]	@ (8004cf0 <HAL_RCC_OscConfig+0x504>)
 8004bec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bf0:	f003 0302 	and.w	r3, r3, #2
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d0ef      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x3ec>
 8004bf8:	e01b      	b.n	8004c32 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bfa:	4b3d      	ldr	r3, [pc, #244]	@ (8004cf0 <HAL_RCC_OscConfig+0x504>)
 8004bfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c00:	4a3b      	ldr	r2, [pc, #236]	@ (8004cf0 <HAL_RCC_OscConfig+0x504>)
 8004c02:	f023 0301 	bic.w	r3, r3, #1
 8004c06:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c0a:	f7fc fd57 	bl	80016bc <HAL_GetTick>
 8004c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c10:	e008      	b.n	8004c24 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c12:	f7fc fd53 	bl	80016bc <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d901      	bls.n	8004c24 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e1f5      	b.n	8005010 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c24:	4b32      	ldr	r3, [pc, #200]	@ (8004cf0 <HAL_RCC_OscConfig+0x504>)
 8004c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1ef      	bne.n	8004c12 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0304 	and.w	r3, r3, #4
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f000 80a6 	beq.w	8004d8c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c40:	2300      	movs	r3, #0
 8004c42:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004c44:	4b2a      	ldr	r3, [pc, #168]	@ (8004cf0 <HAL_RCC_OscConfig+0x504>)
 8004c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d10d      	bne.n	8004c6c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c50:	4b27      	ldr	r3, [pc, #156]	@ (8004cf0 <HAL_RCC_OscConfig+0x504>)
 8004c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c54:	4a26      	ldr	r2, [pc, #152]	@ (8004cf0 <HAL_RCC_OscConfig+0x504>)
 8004c56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c5c:	4b24      	ldr	r3, [pc, #144]	@ (8004cf0 <HAL_RCC_OscConfig+0x504>)
 8004c5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c64:	60bb      	str	r3, [r7, #8]
 8004c66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c6c:	4b21      	ldr	r3, [pc, #132]	@ (8004cf4 <HAL_RCC_OscConfig+0x508>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d118      	bne.n	8004caa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c78:	4b1e      	ldr	r3, [pc, #120]	@ (8004cf4 <HAL_RCC_OscConfig+0x508>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a1d      	ldr	r2, [pc, #116]	@ (8004cf4 <HAL_RCC_OscConfig+0x508>)
 8004c7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c84:	f7fc fd1a 	bl	80016bc <HAL_GetTick>
 8004c88:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c8a:	e008      	b.n	8004c9e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c8c:	f7fc fd16 	bl	80016bc <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d901      	bls.n	8004c9e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e1b8      	b.n	8005010 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c9e:	4b15      	ldr	r3, [pc, #84]	@ (8004cf4 <HAL_RCC_OscConfig+0x508>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d0f0      	beq.n	8004c8c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d108      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x4d8>
 8004cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8004cf0 <HAL_RCC_OscConfig+0x504>)
 8004cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cb8:	4a0d      	ldr	r2, [pc, #52]	@ (8004cf0 <HAL_RCC_OscConfig+0x504>)
 8004cba:	f043 0301 	orr.w	r3, r3, #1
 8004cbe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004cc2:	e029      	b.n	8004d18 <HAL_RCC_OscConfig+0x52c>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	2b05      	cmp	r3, #5
 8004cca:	d115      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x50c>
 8004ccc:	4b08      	ldr	r3, [pc, #32]	@ (8004cf0 <HAL_RCC_OscConfig+0x504>)
 8004cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cd2:	4a07      	ldr	r2, [pc, #28]	@ (8004cf0 <HAL_RCC_OscConfig+0x504>)
 8004cd4:	f043 0304 	orr.w	r3, r3, #4
 8004cd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004cdc:	4b04      	ldr	r3, [pc, #16]	@ (8004cf0 <HAL_RCC_OscConfig+0x504>)
 8004cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ce2:	4a03      	ldr	r2, [pc, #12]	@ (8004cf0 <HAL_RCC_OscConfig+0x504>)
 8004ce4:	f043 0301 	orr.w	r3, r3, #1
 8004ce8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004cec:	e014      	b.n	8004d18 <HAL_RCC_OscConfig+0x52c>
 8004cee:	bf00      	nop
 8004cf0:	40021000 	.word	0x40021000
 8004cf4:	40007000 	.word	0x40007000
 8004cf8:	4b9d      	ldr	r3, [pc, #628]	@ (8004f70 <HAL_RCC_OscConfig+0x784>)
 8004cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cfe:	4a9c      	ldr	r2, [pc, #624]	@ (8004f70 <HAL_RCC_OscConfig+0x784>)
 8004d00:	f023 0301 	bic.w	r3, r3, #1
 8004d04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d08:	4b99      	ldr	r3, [pc, #612]	@ (8004f70 <HAL_RCC_OscConfig+0x784>)
 8004d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d0e:	4a98      	ldr	r2, [pc, #608]	@ (8004f70 <HAL_RCC_OscConfig+0x784>)
 8004d10:	f023 0304 	bic.w	r3, r3, #4
 8004d14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d016      	beq.n	8004d4e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d20:	f7fc fccc 	bl	80016bc <HAL_GetTick>
 8004d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d26:	e00a      	b.n	8004d3e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d28:	f7fc fcc8 	bl	80016bc <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e168      	b.n	8005010 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d3e:	4b8c      	ldr	r3, [pc, #560]	@ (8004f70 <HAL_RCC_OscConfig+0x784>)
 8004d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d0ed      	beq.n	8004d28 <HAL_RCC_OscConfig+0x53c>
 8004d4c:	e015      	b.n	8004d7a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d4e:	f7fc fcb5 	bl	80016bc <HAL_GetTick>
 8004d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d54:	e00a      	b.n	8004d6c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d56:	f7fc fcb1 	bl	80016bc <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d901      	bls.n	8004d6c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e151      	b.n	8005010 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d6c:	4b80      	ldr	r3, [pc, #512]	@ (8004f70 <HAL_RCC_OscConfig+0x784>)
 8004d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1ed      	bne.n	8004d56 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d7a:	7ffb      	ldrb	r3, [r7, #31]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d105      	bne.n	8004d8c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d80:	4b7b      	ldr	r3, [pc, #492]	@ (8004f70 <HAL_RCC_OscConfig+0x784>)
 8004d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d84:	4a7a      	ldr	r2, [pc, #488]	@ (8004f70 <HAL_RCC_OscConfig+0x784>)
 8004d86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d8a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0320 	and.w	r3, r3, #32
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d03c      	beq.n	8004e12 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d01c      	beq.n	8004dda <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004da0:	4b73      	ldr	r3, [pc, #460]	@ (8004f70 <HAL_RCC_OscConfig+0x784>)
 8004da2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004da6:	4a72      	ldr	r2, [pc, #456]	@ (8004f70 <HAL_RCC_OscConfig+0x784>)
 8004da8:	f043 0301 	orr.w	r3, r3, #1
 8004dac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004db0:	f7fc fc84 	bl	80016bc <HAL_GetTick>
 8004db4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004db6:	e008      	b.n	8004dca <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004db8:	f7fc fc80 	bl	80016bc <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e122      	b.n	8005010 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004dca:	4b69      	ldr	r3, [pc, #420]	@ (8004f70 <HAL_RCC_OscConfig+0x784>)
 8004dcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004dd0:	f003 0302 	and.w	r3, r3, #2
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d0ef      	beq.n	8004db8 <HAL_RCC_OscConfig+0x5cc>
 8004dd8:	e01b      	b.n	8004e12 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004dda:	4b65      	ldr	r3, [pc, #404]	@ (8004f70 <HAL_RCC_OscConfig+0x784>)
 8004ddc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004de0:	4a63      	ldr	r2, [pc, #396]	@ (8004f70 <HAL_RCC_OscConfig+0x784>)
 8004de2:	f023 0301 	bic.w	r3, r3, #1
 8004de6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dea:	f7fc fc67 	bl	80016bc <HAL_GetTick>
 8004dee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004df0:	e008      	b.n	8004e04 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004df2:	f7fc fc63 	bl	80016bc <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d901      	bls.n	8004e04 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e105      	b.n	8005010 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e04:	4b5a      	ldr	r3, [pc, #360]	@ (8004f70 <HAL_RCC_OscConfig+0x784>)
 8004e06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e0a:	f003 0302 	and.w	r3, r3, #2
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1ef      	bne.n	8004df2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f000 80f9 	beq.w	800500e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	f040 80cf 	bne.w	8004fc4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004e26:	4b52      	ldr	r3, [pc, #328]	@ (8004f70 <HAL_RCC_OscConfig+0x784>)
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	f003 0203 	and.w	r2, r3, #3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d12c      	bne.n	8004e94 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e44:	3b01      	subs	r3, #1
 8004e46:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d123      	bne.n	8004e94 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e56:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d11b      	bne.n	8004e94 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e66:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d113      	bne.n	8004e94 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e76:	085b      	lsrs	r3, r3, #1
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d109      	bne.n	8004e94 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e8a:	085b      	lsrs	r3, r3, #1
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d071      	beq.n	8004f78 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	2b0c      	cmp	r3, #12
 8004e98:	d068      	beq.n	8004f6c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004e9a:	4b35      	ldr	r3, [pc, #212]	@ (8004f70 <HAL_RCC_OscConfig+0x784>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d105      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004ea6:	4b32      	ldr	r3, [pc, #200]	@ (8004f70 <HAL_RCC_OscConfig+0x784>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e0ac      	b.n	8005010 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004eb6:	4b2e      	ldr	r3, [pc, #184]	@ (8004f70 <HAL_RCC_OscConfig+0x784>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a2d      	ldr	r2, [pc, #180]	@ (8004f70 <HAL_RCC_OscConfig+0x784>)
 8004ebc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ec0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ec2:	f7fc fbfb 	bl	80016bc <HAL_GetTick>
 8004ec6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ec8:	e008      	b.n	8004edc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eca:	f7fc fbf7 	bl	80016bc <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d901      	bls.n	8004edc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e099      	b.n	8005010 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004edc:	4b24      	ldr	r3, [pc, #144]	@ (8004f70 <HAL_RCC_OscConfig+0x784>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1f0      	bne.n	8004eca <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ee8:	4b21      	ldr	r3, [pc, #132]	@ (8004f70 <HAL_RCC_OscConfig+0x784>)
 8004eea:	68da      	ldr	r2, [r3, #12]
 8004eec:	4b21      	ldr	r3, [pc, #132]	@ (8004f74 <HAL_RCC_OscConfig+0x788>)
 8004eee:	4013      	ands	r3, r2
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004ef8:	3a01      	subs	r2, #1
 8004efa:	0112      	lsls	r2, r2, #4
 8004efc:	4311      	orrs	r1, r2
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004f02:	0212      	lsls	r2, r2, #8
 8004f04:	4311      	orrs	r1, r2
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004f0a:	0852      	lsrs	r2, r2, #1
 8004f0c:	3a01      	subs	r2, #1
 8004f0e:	0552      	lsls	r2, r2, #21
 8004f10:	4311      	orrs	r1, r2
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004f16:	0852      	lsrs	r2, r2, #1
 8004f18:	3a01      	subs	r2, #1
 8004f1a:	0652      	lsls	r2, r2, #25
 8004f1c:	4311      	orrs	r1, r2
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004f22:	06d2      	lsls	r2, r2, #27
 8004f24:	430a      	orrs	r2, r1
 8004f26:	4912      	ldr	r1, [pc, #72]	@ (8004f70 <HAL_RCC_OscConfig+0x784>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004f2c:	4b10      	ldr	r3, [pc, #64]	@ (8004f70 <HAL_RCC_OscConfig+0x784>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a0f      	ldr	r2, [pc, #60]	@ (8004f70 <HAL_RCC_OscConfig+0x784>)
 8004f32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f36:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f38:	4b0d      	ldr	r3, [pc, #52]	@ (8004f70 <HAL_RCC_OscConfig+0x784>)
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	4a0c      	ldr	r2, [pc, #48]	@ (8004f70 <HAL_RCC_OscConfig+0x784>)
 8004f3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f42:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f44:	f7fc fbba 	bl	80016bc <HAL_GetTick>
 8004f48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f4a:	e008      	b.n	8004f5e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f4c:	f7fc fbb6 	bl	80016bc <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e058      	b.n	8005010 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f5e:	4b04      	ldr	r3, [pc, #16]	@ (8004f70 <HAL_RCC_OscConfig+0x784>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d0f0      	beq.n	8004f4c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f6a:	e050      	b.n	800500e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e04f      	b.n	8005010 <HAL_RCC_OscConfig+0x824>
 8004f70:	40021000 	.word	0x40021000
 8004f74:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f78:	4b27      	ldr	r3, [pc, #156]	@ (8005018 <HAL_RCC_OscConfig+0x82c>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d144      	bne.n	800500e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004f84:	4b24      	ldr	r3, [pc, #144]	@ (8005018 <HAL_RCC_OscConfig+0x82c>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a23      	ldr	r2, [pc, #140]	@ (8005018 <HAL_RCC_OscConfig+0x82c>)
 8004f8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f8e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f90:	4b21      	ldr	r3, [pc, #132]	@ (8005018 <HAL_RCC_OscConfig+0x82c>)
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	4a20      	ldr	r2, [pc, #128]	@ (8005018 <HAL_RCC_OscConfig+0x82c>)
 8004f96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f9a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f9c:	f7fc fb8e 	bl	80016bc <HAL_GetTick>
 8004fa0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fa2:	e008      	b.n	8004fb6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fa4:	f7fc fb8a 	bl	80016bc <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d901      	bls.n	8004fb6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e02c      	b.n	8005010 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fb6:	4b18      	ldr	r3, [pc, #96]	@ (8005018 <HAL_RCC_OscConfig+0x82c>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d0f0      	beq.n	8004fa4 <HAL_RCC_OscConfig+0x7b8>
 8004fc2:	e024      	b.n	800500e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	2b0c      	cmp	r3, #12
 8004fc8:	d01f      	beq.n	800500a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fca:	4b13      	ldr	r3, [pc, #76]	@ (8005018 <HAL_RCC_OscConfig+0x82c>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a12      	ldr	r2, [pc, #72]	@ (8005018 <HAL_RCC_OscConfig+0x82c>)
 8004fd0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd6:	f7fc fb71 	bl	80016bc <HAL_GetTick>
 8004fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fdc:	e008      	b.n	8004ff0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fde:	f7fc fb6d 	bl	80016bc <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d901      	bls.n	8004ff0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e00f      	b.n	8005010 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ff0:	4b09      	ldr	r3, [pc, #36]	@ (8005018 <HAL_RCC_OscConfig+0x82c>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d1f0      	bne.n	8004fde <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004ffc:	4b06      	ldr	r3, [pc, #24]	@ (8005018 <HAL_RCC_OscConfig+0x82c>)
 8004ffe:	68da      	ldr	r2, [r3, #12]
 8005000:	4905      	ldr	r1, [pc, #20]	@ (8005018 <HAL_RCC_OscConfig+0x82c>)
 8005002:	4b06      	ldr	r3, [pc, #24]	@ (800501c <HAL_RCC_OscConfig+0x830>)
 8005004:	4013      	ands	r3, r2
 8005006:	60cb      	str	r3, [r1, #12]
 8005008:	e001      	b.n	800500e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e000      	b.n	8005010 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3720      	adds	r7, #32
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	40021000 	.word	0x40021000
 800501c:	feeefffc 	.word	0xfeeefffc

08005020 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d101      	bne.n	8005034 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e0e7      	b.n	8005204 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005034:	4b75      	ldr	r3, [pc, #468]	@ (800520c <HAL_RCC_ClockConfig+0x1ec>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0307 	and.w	r3, r3, #7
 800503c:	683a      	ldr	r2, [r7, #0]
 800503e:	429a      	cmp	r2, r3
 8005040:	d910      	bls.n	8005064 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005042:	4b72      	ldr	r3, [pc, #456]	@ (800520c <HAL_RCC_ClockConfig+0x1ec>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f023 0207 	bic.w	r2, r3, #7
 800504a:	4970      	ldr	r1, [pc, #448]	@ (800520c <HAL_RCC_ClockConfig+0x1ec>)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	4313      	orrs	r3, r2
 8005050:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005052:	4b6e      	ldr	r3, [pc, #440]	@ (800520c <HAL_RCC_ClockConfig+0x1ec>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0307 	and.w	r3, r3, #7
 800505a:	683a      	ldr	r2, [r7, #0]
 800505c:	429a      	cmp	r2, r3
 800505e:	d001      	beq.n	8005064 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e0cf      	b.n	8005204 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b00      	cmp	r3, #0
 800506e:	d010      	beq.n	8005092 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	689a      	ldr	r2, [r3, #8]
 8005074:	4b66      	ldr	r3, [pc, #408]	@ (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800507c:	429a      	cmp	r2, r3
 800507e:	d908      	bls.n	8005092 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005080:	4b63      	ldr	r3, [pc, #396]	@ (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	4960      	ldr	r1, [pc, #384]	@ (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 800508e:	4313      	orrs	r3, r2
 8005090:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	2b00      	cmp	r3, #0
 800509c:	d04c      	beq.n	8005138 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	2b03      	cmp	r3, #3
 80050a4:	d107      	bne.n	80050b6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050a6:	4b5a      	ldr	r3, [pc, #360]	@ (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d121      	bne.n	80050f6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e0a6      	b.n	8005204 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d107      	bne.n	80050ce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050be:	4b54      	ldr	r3, [pc, #336]	@ (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d115      	bne.n	80050f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e09a      	b.n	8005204 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d107      	bne.n	80050e6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80050d6:	4b4e      	ldr	r3, [pc, #312]	@ (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d109      	bne.n	80050f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e08e      	b.n	8005204 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050e6:	4b4a      	ldr	r3, [pc, #296]	@ (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d101      	bne.n	80050f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e086      	b.n	8005204 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80050f6:	4b46      	ldr	r3, [pc, #280]	@ (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f023 0203 	bic.w	r2, r3, #3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	4943      	ldr	r1, [pc, #268]	@ (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 8005104:	4313      	orrs	r3, r2
 8005106:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005108:	f7fc fad8 	bl	80016bc <HAL_GetTick>
 800510c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800510e:	e00a      	b.n	8005126 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005110:	f7fc fad4 	bl	80016bc <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800511e:	4293      	cmp	r3, r2
 8005120:	d901      	bls.n	8005126 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e06e      	b.n	8005204 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005126:	4b3a      	ldr	r3, [pc, #232]	@ (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f003 020c 	and.w	r2, r3, #12
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	429a      	cmp	r2, r3
 8005136:	d1eb      	bne.n	8005110 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0302 	and.w	r3, r3, #2
 8005140:	2b00      	cmp	r3, #0
 8005142:	d010      	beq.n	8005166 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689a      	ldr	r2, [r3, #8]
 8005148:	4b31      	ldr	r3, [pc, #196]	@ (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005150:	429a      	cmp	r2, r3
 8005152:	d208      	bcs.n	8005166 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005154:	4b2e      	ldr	r3, [pc, #184]	@ (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	492b      	ldr	r1, [pc, #172]	@ (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 8005162:	4313      	orrs	r3, r2
 8005164:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005166:	4b29      	ldr	r3, [pc, #164]	@ (800520c <HAL_RCC_ClockConfig+0x1ec>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0307 	and.w	r3, r3, #7
 800516e:	683a      	ldr	r2, [r7, #0]
 8005170:	429a      	cmp	r2, r3
 8005172:	d210      	bcs.n	8005196 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005174:	4b25      	ldr	r3, [pc, #148]	@ (800520c <HAL_RCC_ClockConfig+0x1ec>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f023 0207 	bic.w	r2, r3, #7
 800517c:	4923      	ldr	r1, [pc, #140]	@ (800520c <HAL_RCC_ClockConfig+0x1ec>)
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	4313      	orrs	r3, r2
 8005182:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005184:	4b21      	ldr	r3, [pc, #132]	@ (800520c <HAL_RCC_ClockConfig+0x1ec>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0307 	and.w	r3, r3, #7
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	429a      	cmp	r2, r3
 8005190:	d001      	beq.n	8005196 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e036      	b.n	8005204 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0304 	and.w	r3, r3, #4
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d008      	beq.n	80051b4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051a2:	4b1b      	ldr	r3, [pc, #108]	@ (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	4918      	ldr	r1, [pc, #96]	@ (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0308 	and.w	r3, r3, #8
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d009      	beq.n	80051d4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051c0:	4b13      	ldr	r3, [pc, #76]	@ (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	00db      	lsls	r3, r3, #3
 80051ce:	4910      	ldr	r1, [pc, #64]	@ (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80051d4:	f000 f824 	bl	8005220 <HAL_RCC_GetSysClockFreq>
 80051d8:	4602      	mov	r2, r0
 80051da:	4b0d      	ldr	r3, [pc, #52]	@ (8005210 <HAL_RCC_ClockConfig+0x1f0>)
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	091b      	lsrs	r3, r3, #4
 80051e0:	f003 030f 	and.w	r3, r3, #15
 80051e4:	490b      	ldr	r1, [pc, #44]	@ (8005214 <HAL_RCC_ClockConfig+0x1f4>)
 80051e6:	5ccb      	ldrb	r3, [r1, r3]
 80051e8:	f003 031f 	and.w	r3, r3, #31
 80051ec:	fa22 f303 	lsr.w	r3, r2, r3
 80051f0:	4a09      	ldr	r2, [pc, #36]	@ (8005218 <HAL_RCC_ClockConfig+0x1f8>)
 80051f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80051f4:	4b09      	ldr	r3, [pc, #36]	@ (800521c <HAL_RCC_ClockConfig+0x1fc>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7fc f93d 	bl	8001478 <HAL_InitTick>
 80051fe:	4603      	mov	r3, r0
 8005200:	72fb      	strb	r3, [r7, #11]

  return status;
 8005202:	7afb      	ldrb	r3, [r7, #11]
}
 8005204:	4618      	mov	r0, r3
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	40022000 	.word	0x40022000
 8005210:	40021000 	.word	0x40021000
 8005214:	0800a974 	.word	0x0800a974
 8005218:	20000000 	.word	0x20000000
 800521c:	20000004 	.word	0x20000004

08005220 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005220:	b480      	push	{r7}
 8005222:	b089      	sub	sp, #36	@ 0x24
 8005224:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005226:	2300      	movs	r3, #0
 8005228:	61fb      	str	r3, [r7, #28]
 800522a:	2300      	movs	r3, #0
 800522c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800522e:	4b3e      	ldr	r3, [pc, #248]	@ (8005328 <HAL_RCC_GetSysClockFreq+0x108>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f003 030c 	and.w	r3, r3, #12
 8005236:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005238:	4b3b      	ldr	r3, [pc, #236]	@ (8005328 <HAL_RCC_GetSysClockFreq+0x108>)
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	f003 0303 	and.w	r3, r3, #3
 8005240:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d005      	beq.n	8005254 <HAL_RCC_GetSysClockFreq+0x34>
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	2b0c      	cmp	r3, #12
 800524c:	d121      	bne.n	8005292 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d11e      	bne.n	8005292 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005254:	4b34      	ldr	r3, [pc, #208]	@ (8005328 <HAL_RCC_GetSysClockFreq+0x108>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0308 	and.w	r3, r3, #8
 800525c:	2b00      	cmp	r3, #0
 800525e:	d107      	bne.n	8005270 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005260:	4b31      	ldr	r3, [pc, #196]	@ (8005328 <HAL_RCC_GetSysClockFreq+0x108>)
 8005262:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005266:	0a1b      	lsrs	r3, r3, #8
 8005268:	f003 030f 	and.w	r3, r3, #15
 800526c:	61fb      	str	r3, [r7, #28]
 800526e:	e005      	b.n	800527c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005270:	4b2d      	ldr	r3, [pc, #180]	@ (8005328 <HAL_RCC_GetSysClockFreq+0x108>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	091b      	lsrs	r3, r3, #4
 8005276:	f003 030f 	and.w	r3, r3, #15
 800527a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800527c:	4a2b      	ldr	r2, [pc, #172]	@ (800532c <HAL_RCC_GetSysClockFreq+0x10c>)
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005284:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d10d      	bne.n	80052a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005290:	e00a      	b.n	80052a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	2b04      	cmp	r3, #4
 8005296:	d102      	bne.n	800529e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005298:	4b25      	ldr	r3, [pc, #148]	@ (8005330 <HAL_RCC_GetSysClockFreq+0x110>)
 800529a:	61bb      	str	r3, [r7, #24]
 800529c:	e004      	b.n	80052a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	2b08      	cmp	r3, #8
 80052a2:	d101      	bne.n	80052a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80052a4:	4b23      	ldr	r3, [pc, #140]	@ (8005334 <HAL_RCC_GetSysClockFreq+0x114>)
 80052a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	2b0c      	cmp	r3, #12
 80052ac:	d134      	bne.n	8005318 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052ae:	4b1e      	ldr	r3, [pc, #120]	@ (8005328 <HAL_RCC_GetSysClockFreq+0x108>)
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	f003 0303 	and.w	r3, r3, #3
 80052b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d003      	beq.n	80052c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	2b03      	cmp	r3, #3
 80052c2:	d003      	beq.n	80052cc <HAL_RCC_GetSysClockFreq+0xac>
 80052c4:	e005      	b.n	80052d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80052c6:	4b1a      	ldr	r3, [pc, #104]	@ (8005330 <HAL_RCC_GetSysClockFreq+0x110>)
 80052c8:	617b      	str	r3, [r7, #20]
      break;
 80052ca:	e005      	b.n	80052d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80052cc:	4b19      	ldr	r3, [pc, #100]	@ (8005334 <HAL_RCC_GetSysClockFreq+0x114>)
 80052ce:	617b      	str	r3, [r7, #20]
      break;
 80052d0:	e002      	b.n	80052d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	617b      	str	r3, [r7, #20]
      break;
 80052d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052d8:	4b13      	ldr	r3, [pc, #76]	@ (8005328 <HAL_RCC_GetSysClockFreq+0x108>)
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	091b      	lsrs	r3, r3, #4
 80052de:	f003 0307 	and.w	r3, r3, #7
 80052e2:	3301      	adds	r3, #1
 80052e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80052e6:	4b10      	ldr	r3, [pc, #64]	@ (8005328 <HAL_RCC_GetSysClockFreq+0x108>)
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	0a1b      	lsrs	r3, r3, #8
 80052ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	fb03 f202 	mul.w	r2, r3, r2
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052fe:	4b0a      	ldr	r3, [pc, #40]	@ (8005328 <HAL_RCC_GetSysClockFreq+0x108>)
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	0e5b      	lsrs	r3, r3, #25
 8005304:	f003 0303 	and.w	r3, r3, #3
 8005308:	3301      	adds	r3, #1
 800530a:	005b      	lsls	r3, r3, #1
 800530c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	fbb2 f3f3 	udiv	r3, r2, r3
 8005316:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005318:	69bb      	ldr	r3, [r7, #24]
}
 800531a:	4618      	mov	r0, r3
 800531c:	3724      	adds	r7, #36	@ 0x24
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	40021000 	.word	0x40021000
 800532c:	0800a98c 	.word	0x0800a98c
 8005330:	00f42400 	.word	0x00f42400
 8005334:	007a1200 	.word	0x007a1200

08005338 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005338:	b480      	push	{r7}
 800533a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800533c:	4b03      	ldr	r3, [pc, #12]	@ (800534c <HAL_RCC_GetHCLKFreq+0x14>)
 800533e:	681b      	ldr	r3, [r3, #0]
}
 8005340:	4618      	mov	r0, r3
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	20000000 	.word	0x20000000

08005350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005354:	f7ff fff0 	bl	8005338 <HAL_RCC_GetHCLKFreq>
 8005358:	4602      	mov	r2, r0
 800535a:	4b06      	ldr	r3, [pc, #24]	@ (8005374 <HAL_RCC_GetPCLK1Freq+0x24>)
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	0a1b      	lsrs	r3, r3, #8
 8005360:	f003 0307 	and.w	r3, r3, #7
 8005364:	4904      	ldr	r1, [pc, #16]	@ (8005378 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005366:	5ccb      	ldrb	r3, [r1, r3]
 8005368:	f003 031f 	and.w	r3, r3, #31
 800536c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005370:	4618      	mov	r0, r3
 8005372:	bd80      	pop	{r7, pc}
 8005374:	40021000 	.word	0x40021000
 8005378:	0800a984 	.word	0x0800a984

0800537c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005380:	f7ff ffda 	bl	8005338 <HAL_RCC_GetHCLKFreq>
 8005384:	4602      	mov	r2, r0
 8005386:	4b06      	ldr	r3, [pc, #24]	@ (80053a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	0adb      	lsrs	r3, r3, #11
 800538c:	f003 0307 	and.w	r3, r3, #7
 8005390:	4904      	ldr	r1, [pc, #16]	@ (80053a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005392:	5ccb      	ldrb	r3, [r1, r3]
 8005394:	f003 031f 	and.w	r3, r3, #31
 8005398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800539c:	4618      	mov	r0, r3
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	40021000 	.word	0x40021000
 80053a4:	0800a984 	.word	0x0800a984

080053a8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	220f      	movs	r2, #15
 80053b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80053b8:	4b12      	ldr	r3, [pc, #72]	@ (8005404 <HAL_RCC_GetClockConfig+0x5c>)
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f003 0203 	and.w	r2, r3, #3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80053c4:	4b0f      	ldr	r3, [pc, #60]	@ (8005404 <HAL_RCC_GetClockConfig+0x5c>)
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80053d0:	4b0c      	ldr	r3, [pc, #48]	@ (8005404 <HAL_RCC_GetClockConfig+0x5c>)
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80053dc:	4b09      	ldr	r3, [pc, #36]	@ (8005404 <HAL_RCC_GetClockConfig+0x5c>)
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	08db      	lsrs	r3, r3, #3
 80053e2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80053ea:	4b07      	ldr	r3, [pc, #28]	@ (8005408 <HAL_RCC_GetClockConfig+0x60>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0207 	and.w	r2, r3, #7
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	601a      	str	r2, [r3, #0]
}
 80053f6:	bf00      	nop
 80053f8:	370c      	adds	r7, #12
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	40021000 	.word	0x40021000
 8005408:	40022000 	.word	0x40022000

0800540c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b086      	sub	sp, #24
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005414:	2300      	movs	r3, #0
 8005416:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005418:	4b2a      	ldr	r3, [pc, #168]	@ (80054c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800541a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800541c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d003      	beq.n	800542c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005424:	f7ff f97e 	bl	8004724 <HAL_PWREx_GetVoltageRange>
 8005428:	6178      	str	r0, [r7, #20]
 800542a:	e014      	b.n	8005456 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800542c:	4b25      	ldr	r3, [pc, #148]	@ (80054c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800542e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005430:	4a24      	ldr	r2, [pc, #144]	@ (80054c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005432:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005436:	6593      	str	r3, [r2, #88]	@ 0x58
 8005438:	4b22      	ldr	r3, [pc, #136]	@ (80054c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800543a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800543c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005440:	60fb      	str	r3, [r7, #12]
 8005442:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005444:	f7ff f96e 	bl	8004724 <HAL_PWREx_GetVoltageRange>
 8005448:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800544a:	4b1e      	ldr	r3, [pc, #120]	@ (80054c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800544c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800544e:	4a1d      	ldr	r2, [pc, #116]	@ (80054c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005450:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005454:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800545c:	d10b      	bne.n	8005476 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2b80      	cmp	r3, #128	@ 0x80
 8005462:	d919      	bls.n	8005498 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2ba0      	cmp	r3, #160	@ 0xa0
 8005468:	d902      	bls.n	8005470 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800546a:	2302      	movs	r3, #2
 800546c:	613b      	str	r3, [r7, #16]
 800546e:	e013      	b.n	8005498 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005470:	2301      	movs	r3, #1
 8005472:	613b      	str	r3, [r7, #16]
 8005474:	e010      	b.n	8005498 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2b80      	cmp	r3, #128	@ 0x80
 800547a:	d902      	bls.n	8005482 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800547c:	2303      	movs	r3, #3
 800547e:	613b      	str	r3, [r7, #16]
 8005480:	e00a      	b.n	8005498 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2b80      	cmp	r3, #128	@ 0x80
 8005486:	d102      	bne.n	800548e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005488:	2302      	movs	r3, #2
 800548a:	613b      	str	r3, [r7, #16]
 800548c:	e004      	b.n	8005498 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2b70      	cmp	r3, #112	@ 0x70
 8005492:	d101      	bne.n	8005498 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005494:	2301      	movs	r3, #1
 8005496:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005498:	4b0b      	ldr	r3, [pc, #44]	@ (80054c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f023 0207 	bic.w	r2, r3, #7
 80054a0:	4909      	ldr	r1, [pc, #36]	@ (80054c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80054a8:	4b07      	ldr	r3, [pc, #28]	@ (80054c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0307 	and.w	r3, r3, #7
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d001      	beq.n	80054ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e000      	b.n	80054bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3718      	adds	r7, #24
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	40021000 	.word	0x40021000
 80054c8:	40022000 	.word	0x40022000

080054cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b086      	sub	sp, #24
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80054d4:	2300      	movs	r3, #0
 80054d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80054d8:	2300      	movs	r3, #0
 80054da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d041      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054ec:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80054f0:	d02a      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80054f2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80054f6:	d824      	bhi.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80054f8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80054fc:	d008      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80054fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005502:	d81e      	bhi.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00a      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005508:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800550c:	d010      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800550e:	e018      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005510:	4b86      	ldr	r3, [pc, #536]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	4a85      	ldr	r2, [pc, #532]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005516:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800551a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800551c:	e015      	b.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	3304      	adds	r3, #4
 8005522:	2100      	movs	r1, #0
 8005524:	4618      	mov	r0, r3
 8005526:	f000 facd 	bl	8005ac4 <RCCEx_PLLSAI1_Config>
 800552a:	4603      	mov	r3, r0
 800552c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800552e:	e00c      	b.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	3320      	adds	r3, #32
 8005534:	2100      	movs	r1, #0
 8005536:	4618      	mov	r0, r3
 8005538:	f000 fbb6 	bl	8005ca8 <RCCEx_PLLSAI2_Config>
 800553c:	4603      	mov	r3, r0
 800553e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005540:	e003      	b.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	74fb      	strb	r3, [r7, #19]
      break;
 8005546:	e000      	b.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005548:	bf00      	nop
    }

    if(ret == HAL_OK)
 800554a:	7cfb      	ldrb	r3, [r7, #19]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10b      	bne.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005550:	4b76      	ldr	r3, [pc, #472]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005552:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005556:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800555e:	4973      	ldr	r1, [pc, #460]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005560:	4313      	orrs	r3, r2
 8005562:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005566:	e001      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005568:	7cfb      	ldrb	r3, [r7, #19]
 800556a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d041      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800557c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005580:	d02a      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005582:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005586:	d824      	bhi.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005588:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800558c:	d008      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800558e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005592:	d81e      	bhi.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00a      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005598:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800559c:	d010      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800559e:	e018      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80055a0:	4b62      	ldr	r3, [pc, #392]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	4a61      	ldr	r2, [pc, #388]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055aa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80055ac:	e015      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	3304      	adds	r3, #4
 80055b2:	2100      	movs	r1, #0
 80055b4:	4618      	mov	r0, r3
 80055b6:	f000 fa85 	bl	8005ac4 <RCCEx_PLLSAI1_Config>
 80055ba:	4603      	mov	r3, r0
 80055bc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80055be:	e00c      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	3320      	adds	r3, #32
 80055c4:	2100      	movs	r1, #0
 80055c6:	4618      	mov	r0, r3
 80055c8:	f000 fb6e 	bl	8005ca8 <RCCEx_PLLSAI2_Config>
 80055cc:	4603      	mov	r3, r0
 80055ce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80055d0:	e003      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	74fb      	strb	r3, [r7, #19]
      break;
 80055d6:	e000      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80055d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055da:	7cfb      	ldrb	r3, [r7, #19]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d10b      	bne.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80055e0:	4b52      	ldr	r3, [pc, #328]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055e6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055ee:	494f      	ldr	r1, [pc, #316]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80055f6:	e001      	b.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055f8:	7cfb      	ldrb	r3, [r7, #19]
 80055fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005604:	2b00      	cmp	r3, #0
 8005606:	f000 80a0 	beq.w	800574a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800560a:	2300      	movs	r3, #0
 800560c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800560e:	4b47      	ldr	r3, [pc, #284]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005612:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d101      	bne.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800561a:	2301      	movs	r3, #1
 800561c:	e000      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800561e:	2300      	movs	r3, #0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d00d      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005624:	4b41      	ldr	r3, [pc, #260]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005628:	4a40      	ldr	r2, [pc, #256]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800562a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800562e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005630:	4b3e      	ldr	r3, [pc, #248]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005632:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005634:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005638:	60bb      	str	r3, [r7, #8]
 800563a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800563c:	2301      	movs	r3, #1
 800563e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005640:	4b3b      	ldr	r3, [pc, #236]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a3a      	ldr	r2, [pc, #232]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005646:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800564a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800564c:	f7fc f836 	bl	80016bc <HAL_GetTick>
 8005650:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005652:	e009      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005654:	f7fc f832 	bl	80016bc <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	2b02      	cmp	r3, #2
 8005660:	d902      	bls.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	74fb      	strb	r3, [r7, #19]
        break;
 8005666:	e005      	b.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005668:	4b31      	ldr	r3, [pc, #196]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005670:	2b00      	cmp	r3, #0
 8005672:	d0ef      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005674:	7cfb      	ldrb	r3, [r7, #19]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d15c      	bne.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800567a:	4b2c      	ldr	r3, [pc, #176]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800567c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005680:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005684:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d01f      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	429a      	cmp	r2, r3
 8005696:	d019      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005698:	4b24      	ldr	r3, [pc, #144]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800569a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800569e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80056a4:	4b21      	ldr	r3, [pc, #132]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056aa:	4a20      	ldr	r2, [pc, #128]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80056b4:	4b1d      	ldr	r3, [pc, #116]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056ba:	4a1c      	ldr	r2, [pc, #112]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80056c4:	4a19      	ldr	r2, [pc, #100]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d016      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056d6:	f7fb fff1 	bl	80016bc <HAL_GetTick>
 80056da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056dc:	e00b      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056de:	f7fb ffed 	bl	80016bc <HAL_GetTick>
 80056e2:	4602      	mov	r2, r0
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d902      	bls.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	74fb      	strb	r3, [r7, #19]
            break;
 80056f4:	e006      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056f6:	4b0d      	ldr	r3, [pc, #52]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056fc:	f003 0302 	and.w	r3, r3, #2
 8005700:	2b00      	cmp	r3, #0
 8005702:	d0ec      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005704:	7cfb      	ldrb	r3, [r7, #19]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10c      	bne.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800570a:	4b08      	ldr	r3, [pc, #32]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800570c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005710:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800571a:	4904      	ldr	r1, [pc, #16]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800571c:	4313      	orrs	r3, r2
 800571e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005722:	e009      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005724:	7cfb      	ldrb	r3, [r7, #19]
 8005726:	74bb      	strb	r3, [r7, #18]
 8005728:	e006      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800572a:	bf00      	nop
 800572c:	40021000 	.word	0x40021000
 8005730:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005734:	7cfb      	ldrb	r3, [r7, #19]
 8005736:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005738:	7c7b      	ldrb	r3, [r7, #17]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d105      	bne.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800573e:	4ba6      	ldr	r3, [pc, #664]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005742:	4aa5      	ldr	r2, [pc, #660]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005744:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005748:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00a      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005756:	4ba0      	ldr	r3, [pc, #640]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005758:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800575c:	f023 0203 	bic.w	r2, r3, #3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005764:	499c      	ldr	r1, [pc, #624]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005766:	4313      	orrs	r3, r2
 8005768:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0302 	and.w	r3, r3, #2
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00a      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005778:	4b97      	ldr	r3, [pc, #604]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800577a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800577e:	f023 020c 	bic.w	r2, r3, #12
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005786:	4994      	ldr	r1, [pc, #592]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005788:	4313      	orrs	r3, r2
 800578a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 0304 	and.w	r3, r3, #4
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00a      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800579a:	4b8f      	ldr	r3, [pc, #572]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800579c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057a0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057a8:	498b      	ldr	r1, [pc, #556]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80057aa:	4313      	orrs	r3, r2
 80057ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0308 	and.w	r3, r3, #8
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00a      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80057bc:	4b86      	ldr	r3, [pc, #536]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80057be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057c2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ca:	4983      	ldr	r1, [pc, #524]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80057cc:	4313      	orrs	r3, r2
 80057ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0310 	and.w	r3, r3, #16
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00a      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80057de:	4b7e      	ldr	r3, [pc, #504]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80057e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057ec:	497a      	ldr	r1, [pc, #488]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0320 	and.w	r3, r3, #32
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00a      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005800:	4b75      	ldr	r3, [pc, #468]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005806:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800580e:	4972      	ldr	r1, [pc, #456]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005810:	4313      	orrs	r3, r2
 8005812:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00a      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005822:	4b6d      	ldr	r3, [pc, #436]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005824:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005828:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005830:	4969      	ldr	r1, [pc, #420]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005832:	4313      	orrs	r3, r2
 8005834:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00a      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005844:	4b64      	ldr	r3, [pc, #400]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800584a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005852:	4961      	ldr	r1, [pc, #388]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005854:	4313      	orrs	r3, r2
 8005856:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00a      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005866:	4b5c      	ldr	r3, [pc, #368]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005868:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800586c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005874:	4958      	ldr	r1, [pc, #352]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005876:	4313      	orrs	r3, r2
 8005878:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00a      	beq.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005888:	4b53      	ldr	r3, [pc, #332]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800588a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800588e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005896:	4950      	ldr	r1, [pc, #320]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005898:	4313      	orrs	r3, r2
 800589a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00a      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80058aa:	4b4b      	ldr	r3, [pc, #300]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058b8:	4947      	ldr	r1, [pc, #284]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00a      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80058cc:	4b42      	ldr	r3, [pc, #264]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80058d2:	f023 0203 	bic.w	r2, r3, #3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058da:	493f      	ldr	r1, [pc, #252]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058dc:	4313      	orrs	r3, r2
 80058de:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d028      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80058ee:	4b3a      	ldr	r3, [pc, #232]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058f4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058fc:	4936      	ldr	r1, [pc, #216]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005908:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800590c:	d106      	bne.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800590e:	4b32      	ldr	r3, [pc, #200]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	4a31      	ldr	r2, [pc, #196]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005914:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005918:	60d3      	str	r3, [r2, #12]
 800591a:	e011      	b.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005920:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005924:	d10c      	bne.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	3304      	adds	r3, #4
 800592a:	2101      	movs	r1, #1
 800592c:	4618      	mov	r0, r3
 800592e:	f000 f8c9 	bl	8005ac4 <RCCEx_PLLSAI1_Config>
 8005932:	4603      	mov	r3, r0
 8005934:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005936:	7cfb      	ldrb	r3, [r7, #19]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d001      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800593c:	7cfb      	ldrb	r3, [r7, #19]
 800593e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d028      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800594c:	4b22      	ldr	r3, [pc, #136]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800594e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005952:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800595a:	491f      	ldr	r1, [pc, #124]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800595c:	4313      	orrs	r3, r2
 800595e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005966:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800596a:	d106      	bne.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800596c:	4b1a      	ldr	r3, [pc, #104]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	4a19      	ldr	r2, [pc, #100]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005972:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005976:	60d3      	str	r3, [r2, #12]
 8005978:	e011      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800597e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005982:	d10c      	bne.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	3304      	adds	r3, #4
 8005988:	2101      	movs	r1, #1
 800598a:	4618      	mov	r0, r3
 800598c:	f000 f89a 	bl	8005ac4 <RCCEx_PLLSAI1_Config>
 8005990:	4603      	mov	r3, r0
 8005992:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005994:	7cfb      	ldrb	r3, [r7, #19]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d001      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800599a:	7cfb      	ldrb	r3, [r7, #19]
 800599c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d02a      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80059aa:	4b0b      	ldr	r3, [pc, #44]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80059ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059b0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80059b8:	4907      	ldr	r1, [pc, #28]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80059c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059c8:	d108      	bne.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059ca:	4b03      	ldr	r3, [pc, #12]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	4a02      	ldr	r2, [pc, #8]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80059d0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059d4:	60d3      	str	r3, [r2, #12]
 80059d6:	e013      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80059d8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80059e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80059e4:	d10c      	bne.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	3304      	adds	r3, #4
 80059ea:	2101      	movs	r1, #1
 80059ec:	4618      	mov	r0, r3
 80059ee:	f000 f869 	bl	8005ac4 <RCCEx_PLLSAI1_Config>
 80059f2:	4603      	mov	r3, r0
 80059f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80059f6:	7cfb      	ldrb	r3, [r7, #19]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d001      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80059fc:	7cfb      	ldrb	r3, [r7, #19]
 80059fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d02f      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a0c:	4b2c      	ldr	r3, [pc, #176]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a12:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a1a:	4929      	ldr	r1, [pc, #164]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a2a:	d10d      	bne.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	3304      	adds	r3, #4
 8005a30:	2102      	movs	r1, #2
 8005a32:	4618      	mov	r0, r3
 8005a34:	f000 f846 	bl	8005ac4 <RCCEx_PLLSAI1_Config>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a3c:	7cfb      	ldrb	r3, [r7, #19]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d014      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8005a42:	7cfb      	ldrb	r3, [r7, #19]
 8005a44:	74bb      	strb	r3, [r7, #18]
 8005a46:	e011      	b.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a50:	d10c      	bne.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	3320      	adds	r3, #32
 8005a56:	2102      	movs	r1, #2
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f000 f925 	bl	8005ca8 <RCCEx_PLLSAI2_Config>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a62:	7cfb      	ldrb	r3, [r7, #19]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d001      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8005a68:	7cfb      	ldrb	r3, [r7, #19]
 8005a6a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00b      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005a78:	4b11      	ldr	r3, [pc, #68]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a7e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a88:	490d      	ldr	r1, [pc, #52]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00b      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a9c:	4b08      	ldr	r3, [pc, #32]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aa2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005aac:	4904      	ldr	r1, [pc, #16]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005ab4:	7cbb      	ldrb	r3, [r7, #18]
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3718      	adds	r7, #24
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	40021000 	.word	0x40021000

08005ac4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005ad2:	4b74      	ldr	r3, [pc, #464]	@ (8005ca4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	f003 0303 	and.w	r3, r3, #3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d018      	beq.n	8005b10 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005ade:	4b71      	ldr	r3, [pc, #452]	@ (8005ca4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	f003 0203 	and.w	r2, r3, #3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d10d      	bne.n	8005b0a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
       ||
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d009      	beq.n	8005b0a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005af6:	4b6b      	ldr	r3, [pc, #428]	@ (8005ca4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	091b      	lsrs	r3, r3, #4
 8005afc:	f003 0307 	and.w	r3, r3, #7
 8005b00:	1c5a      	adds	r2, r3, #1
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	685b      	ldr	r3, [r3, #4]
       ||
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d047      	beq.n	8005b9a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	73fb      	strb	r3, [r7, #15]
 8005b0e:	e044      	b.n	8005b9a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2b03      	cmp	r3, #3
 8005b16:	d018      	beq.n	8005b4a <RCCEx_PLLSAI1_Config+0x86>
 8005b18:	2b03      	cmp	r3, #3
 8005b1a:	d825      	bhi.n	8005b68 <RCCEx_PLLSAI1_Config+0xa4>
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d002      	beq.n	8005b26 <RCCEx_PLLSAI1_Config+0x62>
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d009      	beq.n	8005b38 <RCCEx_PLLSAI1_Config+0x74>
 8005b24:	e020      	b.n	8005b68 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005b26:	4b5f      	ldr	r3, [pc, #380]	@ (8005ca4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0302 	and.w	r3, r3, #2
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d11d      	bne.n	8005b6e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b36:	e01a      	b.n	8005b6e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005b38:	4b5a      	ldr	r3, [pc, #360]	@ (8005ca4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d116      	bne.n	8005b72 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b48:	e013      	b.n	8005b72 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005b4a:	4b56      	ldr	r3, [pc, #344]	@ (8005ca4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d10f      	bne.n	8005b76 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005b56:	4b53      	ldr	r3, [pc, #332]	@ (8005ca4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d109      	bne.n	8005b76 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005b66:	e006      	b.n	8005b76 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b6c:	e004      	b.n	8005b78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005b6e:	bf00      	nop
 8005b70:	e002      	b.n	8005b78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005b72:	bf00      	nop
 8005b74:	e000      	b.n	8005b78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005b76:	bf00      	nop
    }

    if(status == HAL_OK)
 8005b78:	7bfb      	ldrb	r3, [r7, #15]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10d      	bne.n	8005b9a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005b7e:	4b49      	ldr	r3, [pc, #292]	@ (8005ca4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6819      	ldr	r1, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	011b      	lsls	r3, r3, #4
 8005b92:	430b      	orrs	r3, r1
 8005b94:	4943      	ldr	r1, [pc, #268]	@ (8005ca4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b96:	4313      	orrs	r3, r2
 8005b98:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005b9a:	7bfb      	ldrb	r3, [r7, #15]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d17c      	bne.n	8005c9a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005ba0:	4b40      	ldr	r3, [pc, #256]	@ (8005ca4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a3f      	ldr	r2, [pc, #252]	@ (8005ca4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ba6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005baa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bac:	f7fb fd86 	bl	80016bc <HAL_GetTick>
 8005bb0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005bb2:	e009      	b.n	8005bc8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005bb4:	f7fb fd82 	bl	80016bc <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d902      	bls.n	8005bc8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	73fb      	strb	r3, [r7, #15]
        break;
 8005bc6:	e005      	b.n	8005bd4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005bc8:	4b36      	ldr	r3, [pc, #216]	@ (8005ca4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d1ef      	bne.n	8005bb4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005bd4:	7bfb      	ldrb	r3, [r7, #15]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d15f      	bne.n	8005c9a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d110      	bne.n	8005c02 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005be0:	4b30      	ldr	r3, [pc, #192]	@ (8005ca4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005be8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	6892      	ldr	r2, [r2, #8]
 8005bf0:	0211      	lsls	r1, r2, #8
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	68d2      	ldr	r2, [r2, #12]
 8005bf6:	06d2      	lsls	r2, r2, #27
 8005bf8:	430a      	orrs	r2, r1
 8005bfa:	492a      	ldr	r1, [pc, #168]	@ (8005ca4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	610b      	str	r3, [r1, #16]
 8005c00:	e027      	b.n	8005c52 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d112      	bne.n	8005c2e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c08:	4b26      	ldr	r3, [pc, #152]	@ (8005ca4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005c10:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	6892      	ldr	r2, [r2, #8]
 8005c18:	0211      	lsls	r1, r2, #8
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	6912      	ldr	r2, [r2, #16]
 8005c1e:	0852      	lsrs	r2, r2, #1
 8005c20:	3a01      	subs	r2, #1
 8005c22:	0552      	lsls	r2, r2, #21
 8005c24:	430a      	orrs	r2, r1
 8005c26:	491f      	ldr	r1, [pc, #124]	@ (8005ca4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	610b      	str	r3, [r1, #16]
 8005c2c:	e011      	b.n	8005c52 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c2e:	4b1d      	ldr	r3, [pc, #116]	@ (8005ca4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005c36:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	6892      	ldr	r2, [r2, #8]
 8005c3e:	0211      	lsls	r1, r2, #8
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	6952      	ldr	r2, [r2, #20]
 8005c44:	0852      	lsrs	r2, r2, #1
 8005c46:	3a01      	subs	r2, #1
 8005c48:	0652      	lsls	r2, r2, #25
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	4915      	ldr	r1, [pc, #84]	@ (8005ca4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005c52:	4b14      	ldr	r3, [pc, #80]	@ (8005ca4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a13      	ldr	r2, [pc, #76]	@ (8005ca4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c58:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005c5c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c5e:	f7fb fd2d 	bl	80016bc <HAL_GetTick>
 8005c62:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c64:	e009      	b.n	8005c7a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c66:	f7fb fd29 	bl	80016bc <HAL_GetTick>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d902      	bls.n	8005c7a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005c74:	2303      	movs	r3, #3
 8005c76:	73fb      	strb	r3, [r7, #15]
          break;
 8005c78:	e005      	b.n	8005c86 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8005ca4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d0ef      	beq.n	8005c66 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005c86:	7bfb      	ldrb	r3, [r7, #15]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d106      	bne.n	8005c9a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005c8c:	4b05      	ldr	r3, [pc, #20]	@ (8005ca4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c8e:	691a      	ldr	r2, [r3, #16]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	699b      	ldr	r3, [r3, #24]
 8005c94:	4903      	ldr	r1, [pc, #12]	@ (8005ca4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3710      	adds	r7, #16
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	40021000 	.word	0x40021000

08005ca8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005cb6:	4b69      	ldr	r3, [pc, #420]	@ (8005e5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	f003 0303 	and.w	r3, r3, #3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d018      	beq.n	8005cf4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005cc2:	4b66      	ldr	r3, [pc, #408]	@ (8005e5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	f003 0203 	and.w	r2, r3, #3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d10d      	bne.n	8005cee <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
       ||
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d009      	beq.n	8005cee <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005cda:	4b60      	ldr	r3, [pc, #384]	@ (8005e5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	091b      	lsrs	r3, r3, #4
 8005ce0:	f003 0307 	and.w	r3, r3, #7
 8005ce4:	1c5a      	adds	r2, r3, #1
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	685b      	ldr	r3, [r3, #4]
       ||
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d047      	beq.n	8005d7e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	73fb      	strb	r3, [r7, #15]
 8005cf2:	e044      	b.n	8005d7e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2b03      	cmp	r3, #3
 8005cfa:	d018      	beq.n	8005d2e <RCCEx_PLLSAI2_Config+0x86>
 8005cfc:	2b03      	cmp	r3, #3
 8005cfe:	d825      	bhi.n	8005d4c <RCCEx_PLLSAI2_Config+0xa4>
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d002      	beq.n	8005d0a <RCCEx_PLLSAI2_Config+0x62>
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d009      	beq.n	8005d1c <RCCEx_PLLSAI2_Config+0x74>
 8005d08:	e020      	b.n	8005d4c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005d0a:	4b54      	ldr	r3, [pc, #336]	@ (8005e5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 0302 	and.w	r3, r3, #2
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d11d      	bne.n	8005d52 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d1a:	e01a      	b.n	8005d52 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005d1c:	4b4f      	ldr	r3, [pc, #316]	@ (8005e5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d116      	bne.n	8005d56 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d2c:	e013      	b.n	8005d56 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005d2e:	4b4b      	ldr	r3, [pc, #300]	@ (8005e5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10f      	bne.n	8005d5a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005d3a:	4b48      	ldr	r3, [pc, #288]	@ (8005e5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d109      	bne.n	8005d5a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005d4a:	e006      	b.n	8005d5a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d50:	e004      	b.n	8005d5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005d52:	bf00      	nop
 8005d54:	e002      	b.n	8005d5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005d56:	bf00      	nop
 8005d58:	e000      	b.n	8005d5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005d5a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005d5c:	7bfb      	ldrb	r3, [r7, #15]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d10d      	bne.n	8005d7e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005d62:	4b3e      	ldr	r3, [pc, #248]	@ (8005e5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6819      	ldr	r1, [r3, #0]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	3b01      	subs	r3, #1
 8005d74:	011b      	lsls	r3, r3, #4
 8005d76:	430b      	orrs	r3, r1
 8005d78:	4938      	ldr	r1, [pc, #224]	@ (8005e5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005d7e:	7bfb      	ldrb	r3, [r7, #15]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d166      	bne.n	8005e52 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005d84:	4b35      	ldr	r3, [pc, #212]	@ (8005e5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a34      	ldr	r2, [pc, #208]	@ (8005e5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d90:	f7fb fc94 	bl	80016bc <HAL_GetTick>
 8005d94:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005d96:	e009      	b.n	8005dac <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005d98:	f7fb fc90 	bl	80016bc <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d902      	bls.n	8005dac <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	73fb      	strb	r3, [r7, #15]
        break;
 8005daa:	e005      	b.n	8005db8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005dac:	4b2b      	ldr	r3, [pc, #172]	@ (8005e5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1ef      	bne.n	8005d98 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005db8:	7bfb      	ldrb	r3, [r7, #15]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d149      	bne.n	8005e52 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d110      	bne.n	8005de6 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005dc4:	4b25      	ldr	r3, [pc, #148]	@ (8005e5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005dc6:	695b      	ldr	r3, [r3, #20]
 8005dc8:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005dcc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	6892      	ldr	r2, [r2, #8]
 8005dd4:	0211      	lsls	r1, r2, #8
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	68d2      	ldr	r2, [r2, #12]
 8005dda:	06d2      	lsls	r2, r2, #27
 8005ddc:	430a      	orrs	r2, r1
 8005dde:	491f      	ldr	r1, [pc, #124]	@ (8005e5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005de0:	4313      	orrs	r3, r2
 8005de2:	614b      	str	r3, [r1, #20]
 8005de4:	e011      	b.n	8005e0a <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005de6:	4b1d      	ldr	r3, [pc, #116]	@ (8005e5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005dee:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	6892      	ldr	r2, [r2, #8]
 8005df6:	0211      	lsls	r1, r2, #8
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	6912      	ldr	r2, [r2, #16]
 8005dfc:	0852      	lsrs	r2, r2, #1
 8005dfe:	3a01      	subs	r2, #1
 8005e00:	0652      	lsls	r2, r2, #25
 8005e02:	430a      	orrs	r2, r1
 8005e04:	4915      	ldr	r1, [pc, #84]	@ (8005e5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005e06:	4313      	orrs	r3, r2
 8005e08:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005e0a:	4b14      	ldr	r3, [pc, #80]	@ (8005e5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a13      	ldr	r2, [pc, #76]	@ (8005e5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005e10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e14:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e16:	f7fb fc51 	bl	80016bc <HAL_GetTick>
 8005e1a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005e1c:	e009      	b.n	8005e32 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005e1e:	f7fb fc4d 	bl	80016bc <HAL_GetTick>
 8005e22:	4602      	mov	r2, r0
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d902      	bls.n	8005e32 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	73fb      	strb	r3, [r7, #15]
          break;
 8005e30:	e005      	b.n	8005e3e <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005e32:	4b0a      	ldr	r3, [pc, #40]	@ (8005e5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d0ef      	beq.n	8005e1e <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8005e3e:	7bfb      	ldrb	r3, [r7, #15]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d106      	bne.n	8005e52 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005e44:	4b05      	ldr	r3, [pc, #20]	@ (8005e5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005e46:	695a      	ldr	r2, [r3, #20]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	695b      	ldr	r3, [r3, #20]
 8005e4c:	4903      	ldr	r1, [pc, #12]	@ (8005e5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3710      	adds	r7, #16
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	40021000 	.word	0x40021000

08005e60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d101      	bne.n	8005e72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e049      	b.n	8005f06 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d106      	bne.n	8005e8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 f841 	bl	8005f0e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2202      	movs	r2, #2
 8005e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	3304      	adds	r3, #4
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	4610      	mov	r0, r2
 8005ea0:	f000 f9e0 	bl	8006264 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3708      	adds	r7, #8
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005f0e:	b480      	push	{r7}
 8005f10:	b083      	sub	sp, #12
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005f16:	bf00      	nop
 8005f18:	370c      	adds	r7, #12
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
	...

08005f24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b085      	sub	sp, #20
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d001      	beq.n	8005f3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e04f      	b.n	8005fdc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2202      	movs	r2, #2
 8005f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68da      	ldr	r2, [r3, #12]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f042 0201 	orr.w	r2, r2, #1
 8005f52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a23      	ldr	r2, [pc, #140]	@ (8005fe8 <HAL_TIM_Base_Start_IT+0xc4>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d01d      	beq.n	8005f9a <HAL_TIM_Base_Start_IT+0x76>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f66:	d018      	beq.n	8005f9a <HAL_TIM_Base_Start_IT+0x76>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a1f      	ldr	r2, [pc, #124]	@ (8005fec <HAL_TIM_Base_Start_IT+0xc8>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d013      	beq.n	8005f9a <HAL_TIM_Base_Start_IT+0x76>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a1e      	ldr	r2, [pc, #120]	@ (8005ff0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d00e      	beq.n	8005f9a <HAL_TIM_Base_Start_IT+0x76>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a1c      	ldr	r2, [pc, #112]	@ (8005ff4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d009      	beq.n	8005f9a <HAL_TIM_Base_Start_IT+0x76>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a1b      	ldr	r2, [pc, #108]	@ (8005ff8 <HAL_TIM_Base_Start_IT+0xd4>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d004      	beq.n	8005f9a <HAL_TIM_Base_Start_IT+0x76>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a19      	ldr	r2, [pc, #100]	@ (8005ffc <HAL_TIM_Base_Start_IT+0xd8>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d115      	bne.n	8005fc6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	689a      	ldr	r2, [r3, #8]
 8005fa0:	4b17      	ldr	r3, [pc, #92]	@ (8006000 <HAL_TIM_Base_Start_IT+0xdc>)
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2b06      	cmp	r3, #6
 8005faa:	d015      	beq.n	8005fd8 <HAL_TIM_Base_Start_IT+0xb4>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fb2:	d011      	beq.n	8005fd8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f042 0201 	orr.w	r2, r2, #1
 8005fc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fc4:	e008      	b.n	8005fd8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f042 0201 	orr.w	r2, r2, #1
 8005fd4:	601a      	str	r2, [r3, #0]
 8005fd6:	e000      	b.n	8005fda <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fd8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3714      	adds	r7, #20
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr
 8005fe8:	40012c00 	.word	0x40012c00
 8005fec:	40000400 	.word	0x40000400
 8005ff0:	40000800 	.word	0x40000800
 8005ff4:	40000c00 	.word	0x40000c00
 8005ff8:	40013400 	.word	0x40013400
 8005ffc:	40014000 	.word	0x40014000
 8006000:	00010007 	.word	0x00010007

08006004 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	f003 0302 	and.w	r3, r3, #2
 8006022:	2b00      	cmp	r3, #0
 8006024:	d020      	beq.n	8006068 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f003 0302 	and.w	r3, r3, #2
 800602c:	2b00      	cmp	r3, #0
 800602e:	d01b      	beq.n	8006068 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f06f 0202 	mvn.w	r2, #2
 8006038:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2201      	movs	r2, #1
 800603e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	f003 0303 	and.w	r3, r3, #3
 800604a:	2b00      	cmp	r3, #0
 800604c:	d003      	beq.n	8006056 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 f8e9 	bl	8006226 <HAL_TIM_IC_CaptureCallback>
 8006054:	e005      	b.n	8006062 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 f8db 	bl	8006212 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 f8ec 	bl	800623a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	f003 0304 	and.w	r3, r3, #4
 800606e:	2b00      	cmp	r3, #0
 8006070:	d020      	beq.n	80060b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f003 0304 	and.w	r3, r3, #4
 8006078:	2b00      	cmp	r3, #0
 800607a:	d01b      	beq.n	80060b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f06f 0204 	mvn.w	r2, #4
 8006084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2202      	movs	r2, #2
 800608a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	699b      	ldr	r3, [r3, #24]
 8006092:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006096:	2b00      	cmp	r3, #0
 8006098:	d003      	beq.n	80060a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f8c3 	bl	8006226 <HAL_TIM_IC_CaptureCallback>
 80060a0:	e005      	b.n	80060ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 f8b5 	bl	8006212 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 f8c6 	bl	800623a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	f003 0308 	and.w	r3, r3, #8
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d020      	beq.n	8006100 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f003 0308 	and.w	r3, r3, #8
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d01b      	beq.n	8006100 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f06f 0208 	mvn.w	r2, #8
 80060d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2204      	movs	r2, #4
 80060d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	69db      	ldr	r3, [r3, #28]
 80060de:	f003 0303 	and.w	r3, r3, #3
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d003      	beq.n	80060ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 f89d 	bl	8006226 <HAL_TIM_IC_CaptureCallback>
 80060ec:	e005      	b.n	80060fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 f88f 	bl	8006212 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 f8a0 	bl	800623a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	f003 0310 	and.w	r3, r3, #16
 8006106:	2b00      	cmp	r3, #0
 8006108:	d020      	beq.n	800614c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f003 0310 	and.w	r3, r3, #16
 8006110:	2b00      	cmp	r3, #0
 8006112:	d01b      	beq.n	800614c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f06f 0210 	mvn.w	r2, #16
 800611c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2208      	movs	r2, #8
 8006122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	69db      	ldr	r3, [r3, #28]
 800612a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800612e:	2b00      	cmp	r3, #0
 8006130:	d003      	beq.n	800613a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 f877 	bl	8006226 <HAL_TIM_IC_CaptureCallback>
 8006138:	e005      	b.n	8006146 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 f869 	bl	8006212 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 f87a 	bl	800623a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	f003 0301 	and.w	r3, r3, #1
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00c      	beq.n	8006170 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f003 0301 	and.w	r3, r3, #1
 800615c:	2b00      	cmp	r3, #0
 800615e:	d007      	beq.n	8006170 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f06f 0201 	mvn.w	r2, #1
 8006168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f7fa ff3a 	bl	8000fe4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006176:	2b00      	cmp	r3, #0
 8006178:	d104      	bne.n	8006184 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00c      	beq.n	800619e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800618a:	2b00      	cmp	r3, #0
 800618c:	d007      	beq.n	800619e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006196:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 f913 	bl	80063c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00c      	beq.n	80061c2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d007      	beq.n	80061c2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80061ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 f90b 	bl	80063d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d00c      	beq.n	80061e6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d007      	beq.n	80061e6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80061de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 f834 	bl	800624e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	f003 0320 	and.w	r3, r3, #32
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00c      	beq.n	800620a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f003 0320 	and.w	r3, r3, #32
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d007      	beq.n	800620a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f06f 0220 	mvn.w	r2, #32
 8006202:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 f8d3 	bl	80063b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800620a:	bf00      	nop
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}

08006212 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006212:	b480      	push	{r7}
 8006214:	b083      	sub	sp, #12
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800621a:	bf00      	nop
 800621c:	370c      	adds	r7, #12
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr

08006226 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006226:	b480      	push	{r7}
 8006228:	b083      	sub	sp, #12
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800622e:	bf00      	nop
 8006230:	370c      	adds	r7, #12
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr

0800623a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800623a:	b480      	push	{r7}
 800623c:	b083      	sub	sp, #12
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006242:	bf00      	nop
 8006244:	370c      	adds	r7, #12
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr

0800624e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800624e:	b480      	push	{r7}
 8006250:	b083      	sub	sp, #12
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006256:	bf00      	nop
 8006258:	370c      	adds	r7, #12
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
	...

08006264 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006264:	b480      	push	{r7}
 8006266:	b085      	sub	sp, #20
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a46      	ldr	r2, [pc, #280]	@ (8006390 <TIM_Base_SetConfig+0x12c>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d013      	beq.n	80062a4 <TIM_Base_SetConfig+0x40>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006282:	d00f      	beq.n	80062a4 <TIM_Base_SetConfig+0x40>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a43      	ldr	r2, [pc, #268]	@ (8006394 <TIM_Base_SetConfig+0x130>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d00b      	beq.n	80062a4 <TIM_Base_SetConfig+0x40>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a42      	ldr	r2, [pc, #264]	@ (8006398 <TIM_Base_SetConfig+0x134>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d007      	beq.n	80062a4 <TIM_Base_SetConfig+0x40>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a41      	ldr	r2, [pc, #260]	@ (800639c <TIM_Base_SetConfig+0x138>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d003      	beq.n	80062a4 <TIM_Base_SetConfig+0x40>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a40      	ldr	r2, [pc, #256]	@ (80063a0 <TIM_Base_SetConfig+0x13c>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d108      	bne.n	80062b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a35      	ldr	r2, [pc, #212]	@ (8006390 <TIM_Base_SetConfig+0x12c>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d01f      	beq.n	80062fe <TIM_Base_SetConfig+0x9a>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062c4:	d01b      	beq.n	80062fe <TIM_Base_SetConfig+0x9a>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a32      	ldr	r2, [pc, #200]	@ (8006394 <TIM_Base_SetConfig+0x130>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d017      	beq.n	80062fe <TIM_Base_SetConfig+0x9a>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a31      	ldr	r2, [pc, #196]	@ (8006398 <TIM_Base_SetConfig+0x134>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d013      	beq.n	80062fe <TIM_Base_SetConfig+0x9a>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a30      	ldr	r2, [pc, #192]	@ (800639c <TIM_Base_SetConfig+0x138>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d00f      	beq.n	80062fe <TIM_Base_SetConfig+0x9a>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a2f      	ldr	r2, [pc, #188]	@ (80063a0 <TIM_Base_SetConfig+0x13c>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d00b      	beq.n	80062fe <TIM_Base_SetConfig+0x9a>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a2e      	ldr	r2, [pc, #184]	@ (80063a4 <TIM_Base_SetConfig+0x140>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d007      	beq.n	80062fe <TIM_Base_SetConfig+0x9a>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a2d      	ldr	r2, [pc, #180]	@ (80063a8 <TIM_Base_SetConfig+0x144>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d003      	beq.n	80062fe <TIM_Base_SetConfig+0x9a>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a2c      	ldr	r2, [pc, #176]	@ (80063ac <TIM_Base_SetConfig+0x148>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d108      	bne.n	8006310 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006304:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	4313      	orrs	r3, r2
 800630e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	4313      	orrs	r3, r2
 800631c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	689a      	ldr	r2, [r3, #8]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a16      	ldr	r2, [pc, #88]	@ (8006390 <TIM_Base_SetConfig+0x12c>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d00f      	beq.n	800635c <TIM_Base_SetConfig+0xf8>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a18      	ldr	r2, [pc, #96]	@ (80063a0 <TIM_Base_SetConfig+0x13c>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d00b      	beq.n	800635c <TIM_Base_SetConfig+0xf8>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a17      	ldr	r2, [pc, #92]	@ (80063a4 <TIM_Base_SetConfig+0x140>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d007      	beq.n	800635c <TIM_Base_SetConfig+0xf8>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a16      	ldr	r2, [pc, #88]	@ (80063a8 <TIM_Base_SetConfig+0x144>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d003      	beq.n	800635c <TIM_Base_SetConfig+0xf8>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a15      	ldr	r2, [pc, #84]	@ (80063ac <TIM_Base_SetConfig+0x148>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d103      	bne.n	8006364 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	691a      	ldr	r2, [r3, #16]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	f003 0301 	and.w	r3, r3, #1
 8006372:	2b01      	cmp	r3, #1
 8006374:	d105      	bne.n	8006382 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	f023 0201 	bic.w	r2, r3, #1
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	611a      	str	r2, [r3, #16]
  }
}
 8006382:	bf00      	nop
 8006384:	3714      	adds	r7, #20
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	40012c00 	.word	0x40012c00
 8006394:	40000400 	.word	0x40000400
 8006398:	40000800 	.word	0x40000800
 800639c:	40000c00 	.word	0x40000c00
 80063a0:	40013400 	.word	0x40013400
 80063a4:	40014000 	.word	0x40014000
 80063a8:	40014400 	.word	0x40014400
 80063ac:	40014800 	.word	0x40014800

080063b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063b8:	bf00      	nop
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d101      	bne.n	80063fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e040      	b.n	8006480 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006402:	2b00      	cmp	r3, #0
 8006404:	d106      	bne.n	8006414 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f7fa ffcc 	bl	80013ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2224      	movs	r2, #36	@ 0x24
 8006418:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f022 0201 	bic.w	r2, r2, #1
 8006428:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800642e:	2b00      	cmp	r3, #0
 8006430:	d002      	beq.n	8006438 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 fe52 	bl	80070dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 fb97 	bl	8006b6c <UART_SetConfig>
 800643e:	4603      	mov	r3, r0
 8006440:	2b01      	cmp	r3, #1
 8006442:	d101      	bne.n	8006448 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e01b      	b.n	8006480 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	685a      	ldr	r2, [r3, #4]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006456:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	689a      	ldr	r2, [r3, #8]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006466:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f042 0201 	orr.w	r2, r2, #1
 8006476:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 fed1 	bl	8007220 <UART_CheckIdleState>
 800647e:	4603      	mov	r3, r0
}
 8006480:	4618      	mov	r0, r3
 8006482:	3708      	adds	r7, #8
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b08a      	sub	sp, #40	@ 0x28
 800648c:	af00      	add	r7, sp, #0
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	4613      	mov	r3, r2
 8006494:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800649c:	2b20      	cmp	r3, #32
 800649e:	d137      	bne.n	8006510 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d002      	beq.n	80064ac <HAL_UART_Receive_IT+0x24>
 80064a6:	88fb      	ldrh	r3, [r7, #6]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d101      	bne.n	80064b0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e030      	b.n	8006512 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2200      	movs	r2, #0
 80064b4:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a18      	ldr	r2, [pc, #96]	@ (800651c <HAL_UART_Receive_IT+0x94>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d01f      	beq.n	8006500 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d018      	beq.n	8006500 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	e853 3f00 	ldrex	r3, [r3]
 80064da:	613b      	str	r3, [r7, #16]
   return(result);
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80064e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	461a      	mov	r2, r3
 80064ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ec:	623b      	str	r3, [r7, #32]
 80064ee:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f0:	69f9      	ldr	r1, [r7, #28]
 80064f2:	6a3a      	ldr	r2, [r7, #32]
 80064f4:	e841 2300 	strex	r3, r2, [r1]
 80064f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d1e6      	bne.n	80064ce <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006500:	88fb      	ldrh	r3, [r7, #6]
 8006502:	461a      	mov	r2, r3
 8006504:	68b9      	ldr	r1, [r7, #8]
 8006506:	68f8      	ldr	r0, [r7, #12]
 8006508:	f000 ffa0 	bl	800744c <UART_Start_Receive_IT>
 800650c:	4603      	mov	r3, r0
 800650e:	e000      	b.n	8006512 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006510:	2302      	movs	r3, #2
  }
}
 8006512:	4618      	mov	r0, r3
 8006514:	3728      	adds	r7, #40	@ 0x28
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	40008000 	.word	0x40008000

08006520 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b0ba      	sub	sp, #232	@ 0xe8
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	69db      	ldr	r3, [r3, #28]
 800652e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006546:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800654a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800654e:	4013      	ands	r3, r2
 8006550:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006554:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006558:	2b00      	cmp	r3, #0
 800655a:	d115      	bne.n	8006588 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800655c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006560:	f003 0320 	and.w	r3, r3, #32
 8006564:	2b00      	cmp	r3, #0
 8006566:	d00f      	beq.n	8006588 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800656c:	f003 0320 	and.w	r3, r3, #32
 8006570:	2b00      	cmp	r3, #0
 8006572:	d009      	beq.n	8006588 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006578:	2b00      	cmp	r3, #0
 800657a:	f000 82ca 	beq.w	8006b12 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	4798      	blx	r3
      }
      return;
 8006586:	e2c4      	b.n	8006b12 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006588:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800658c:	2b00      	cmp	r3, #0
 800658e:	f000 8117 	beq.w	80067c0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006592:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006596:	f003 0301 	and.w	r3, r3, #1
 800659a:	2b00      	cmp	r3, #0
 800659c:	d106      	bne.n	80065ac <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800659e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80065a2:	4b85      	ldr	r3, [pc, #532]	@ (80067b8 <HAL_UART_IRQHandler+0x298>)
 80065a4:	4013      	ands	r3, r2
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f000 810a 	beq.w	80067c0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80065ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065b0:	f003 0301 	and.w	r3, r3, #1
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d011      	beq.n	80065dc <HAL_UART_IRQHandler+0xbc>
 80065b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00b      	beq.n	80065dc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2201      	movs	r2, #1
 80065ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065d2:	f043 0201 	orr.w	r2, r3, #1
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065e0:	f003 0302 	and.w	r3, r3, #2
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d011      	beq.n	800660c <HAL_UART_IRQHandler+0xec>
 80065e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065ec:	f003 0301 	and.w	r3, r3, #1
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00b      	beq.n	800660c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2202      	movs	r2, #2
 80065fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006602:	f043 0204 	orr.w	r2, r3, #4
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800660c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006610:	f003 0304 	and.w	r3, r3, #4
 8006614:	2b00      	cmp	r3, #0
 8006616:	d011      	beq.n	800663c <HAL_UART_IRQHandler+0x11c>
 8006618:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800661c:	f003 0301 	and.w	r3, r3, #1
 8006620:	2b00      	cmp	r3, #0
 8006622:	d00b      	beq.n	800663c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2204      	movs	r2, #4
 800662a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006632:	f043 0202 	orr.w	r2, r3, #2
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800663c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006640:	f003 0308 	and.w	r3, r3, #8
 8006644:	2b00      	cmp	r3, #0
 8006646:	d017      	beq.n	8006678 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800664c:	f003 0320 	and.w	r3, r3, #32
 8006650:	2b00      	cmp	r3, #0
 8006652:	d105      	bne.n	8006660 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006654:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006658:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00b      	beq.n	8006678 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2208      	movs	r2, #8
 8006666:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800666e:	f043 0208 	orr.w	r2, r3, #8
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800667c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006680:	2b00      	cmp	r3, #0
 8006682:	d012      	beq.n	80066aa <HAL_UART_IRQHandler+0x18a>
 8006684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006688:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00c      	beq.n	80066aa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006698:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066a0:	f043 0220 	orr.w	r2, r3, #32
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	f000 8230 	beq.w	8006b16 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80066b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066ba:	f003 0320 	and.w	r3, r3, #32
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00d      	beq.n	80066de <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80066c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066c6:	f003 0320 	and.w	r3, r3, #32
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d007      	beq.n	80066de <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d003      	beq.n	80066de <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066e4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066f2:	2b40      	cmp	r3, #64	@ 0x40
 80066f4:	d005      	beq.n	8006702 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80066f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80066fa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d04f      	beq.n	80067a2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 ff68 	bl	80075d8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006712:	2b40      	cmp	r3, #64	@ 0x40
 8006714:	d141      	bne.n	800679a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	3308      	adds	r3, #8
 800671c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006720:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006724:	e853 3f00 	ldrex	r3, [r3]
 8006728:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800672c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006730:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006734:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	3308      	adds	r3, #8
 800673e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006742:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006746:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800674e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006752:	e841 2300 	strex	r3, r2, [r1]
 8006756:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800675a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1d9      	bne.n	8006716 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006766:	2b00      	cmp	r3, #0
 8006768:	d013      	beq.n	8006792 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800676e:	4a13      	ldr	r2, [pc, #76]	@ (80067bc <HAL_UART_IRQHandler+0x29c>)
 8006770:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006776:	4618      	mov	r0, r3
 8006778:	f7fc feb4 	bl	80034e4 <HAL_DMA_Abort_IT>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d017      	beq.n	80067b2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800678c:	4610      	mov	r0, r2
 800678e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006790:	e00f      	b.n	80067b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 f9d4 	bl	8006b40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006798:	e00b      	b.n	80067b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 f9d0 	bl	8006b40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067a0:	e007      	b.n	80067b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 f9cc 	bl	8006b40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80067b0:	e1b1      	b.n	8006b16 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067b2:	bf00      	nop
    return;
 80067b4:	e1af      	b.n	8006b16 <HAL_UART_IRQHandler+0x5f6>
 80067b6:	bf00      	nop
 80067b8:	04000120 	.word	0x04000120
 80067bc:	080076a1 	.word	0x080076a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	f040 816a 	bne.w	8006a9e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80067ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067ce:	f003 0310 	and.w	r3, r3, #16
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	f000 8163 	beq.w	8006a9e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80067d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067dc:	f003 0310 	and.w	r3, r3, #16
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	f000 815c 	beq.w	8006a9e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2210      	movs	r2, #16
 80067ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067f8:	2b40      	cmp	r3, #64	@ 0x40
 80067fa:	f040 80d4 	bne.w	80069a6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800680a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800680e:	2b00      	cmp	r3, #0
 8006810:	f000 80ad 	beq.w	800696e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800681a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800681e:	429a      	cmp	r2, r3
 8006820:	f080 80a5 	bcs.w	800696e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800682a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0320 	and.w	r3, r3, #32
 800683a:	2b00      	cmp	r3, #0
 800683c:	f040 8086 	bne.w	800694c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006848:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800684c:	e853 3f00 	ldrex	r3, [r3]
 8006850:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006854:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006858:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800685c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	461a      	mov	r2, r3
 8006866:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800686a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800686e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006872:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006876:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800687a:	e841 2300 	strex	r3, r2, [r1]
 800687e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006882:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006886:	2b00      	cmp	r3, #0
 8006888:	d1da      	bne.n	8006840 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	3308      	adds	r3, #8
 8006890:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006892:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006894:	e853 3f00 	ldrex	r3, [r3]
 8006898:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800689a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800689c:	f023 0301 	bic.w	r3, r3, #1
 80068a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	3308      	adds	r3, #8
 80068aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80068ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80068b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80068b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80068ba:	e841 2300 	strex	r3, r2, [r1]
 80068be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80068c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1e1      	bne.n	800688a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	3308      	adds	r3, #8
 80068cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80068d0:	e853 3f00 	ldrex	r3, [r3]
 80068d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80068d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80068d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	3308      	adds	r3, #8
 80068e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80068ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80068ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80068f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80068f2:	e841 2300 	strex	r3, r2, [r1]
 80068f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80068f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1e3      	bne.n	80068c6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2220      	movs	r2, #32
 8006902:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006912:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006914:	e853 3f00 	ldrex	r3, [r3]
 8006918:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800691a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800691c:	f023 0310 	bic.w	r3, r3, #16
 8006920:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	461a      	mov	r2, r3
 800692a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800692e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006930:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006932:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006934:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006936:	e841 2300 	strex	r3, r2, [r1]
 800693a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800693c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1e4      	bne.n	800690c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006946:	4618      	mov	r0, r3
 8006948:	f7fc fd8e 	bl	8003468 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2202      	movs	r2, #2
 8006950:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800695e:	b29b      	uxth	r3, r3
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	b29b      	uxth	r3, r3
 8006964:	4619      	mov	r1, r3
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f8f4 	bl	8006b54 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800696c:	e0d5      	b.n	8006b1a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006974:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006978:	429a      	cmp	r2, r3
 800697a:	f040 80ce 	bne.w	8006b1a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 0320 	and.w	r3, r3, #32
 800698a:	2b20      	cmp	r3, #32
 800698c:	f040 80c5 	bne.w	8006b1a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2202      	movs	r2, #2
 8006994:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800699c:	4619      	mov	r1, r3
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 f8d8 	bl	8006b54 <HAL_UARTEx_RxEventCallback>
      return;
 80069a4:	e0b9      	b.n	8006b1a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	f000 80ab 	beq.w	8006b1e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80069c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	f000 80a6 	beq.w	8006b1e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069da:	e853 3f00 	ldrex	r3, [r3]
 80069de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80069e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	461a      	mov	r2, r3
 80069f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80069f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80069f6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80069fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069fc:	e841 2300 	strex	r3, r2, [r1]
 8006a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d1e4      	bne.n	80069d2 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	3308      	adds	r3, #8
 8006a0e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a12:	e853 3f00 	ldrex	r3, [r3]
 8006a16:	623b      	str	r3, [r7, #32]
   return(result);
 8006a18:	6a3b      	ldr	r3, [r7, #32]
 8006a1a:	f023 0301 	bic.w	r3, r3, #1
 8006a1e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	3308      	adds	r3, #8
 8006a28:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006a2c:	633a      	str	r2, [r7, #48]	@ 0x30
 8006a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a30:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a34:	e841 2300 	strex	r3, r2, [r1]
 8006a38:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d1e3      	bne.n	8006a08 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2220      	movs	r2, #32
 8006a44:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	e853 3f00 	ldrex	r3, [r3]
 8006a60:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f023 0310 	bic.w	r3, r3, #16
 8006a68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	461a      	mov	r2, r3
 8006a72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006a76:	61fb      	str	r3, [r7, #28]
 8006a78:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7a:	69b9      	ldr	r1, [r7, #24]
 8006a7c:	69fa      	ldr	r2, [r7, #28]
 8006a7e:	e841 2300 	strex	r3, r2, [r1]
 8006a82:	617b      	str	r3, [r7, #20]
   return(result);
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d1e4      	bne.n	8006a54 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2202      	movs	r2, #2
 8006a8e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006a94:	4619      	mov	r1, r3
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 f85c 	bl	8006b54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a9c:	e03f      	b.n	8006b1e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006aa2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00e      	beq.n	8006ac8 <HAL_UART_IRQHandler+0x5a8>
 8006aaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006aae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d008      	beq.n	8006ac8 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006abe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 ffe9 	bl	8007a98 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ac6:	e02d      	b.n	8006b24 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006acc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d00e      	beq.n	8006af2 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ad8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d008      	beq.n	8006af2 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d01c      	beq.n	8006b22 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	4798      	blx	r3
    }
    return;
 8006af0:	e017      	b.n	8006b22 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d012      	beq.n	8006b24 <HAL_UART_IRQHandler+0x604>
 8006afe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00c      	beq.n	8006b24 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 fdde 	bl	80076cc <UART_EndTransmit_IT>
    return;
 8006b10:	e008      	b.n	8006b24 <HAL_UART_IRQHandler+0x604>
      return;
 8006b12:	bf00      	nop
 8006b14:	e006      	b.n	8006b24 <HAL_UART_IRQHandler+0x604>
    return;
 8006b16:	bf00      	nop
 8006b18:	e004      	b.n	8006b24 <HAL_UART_IRQHandler+0x604>
      return;
 8006b1a:	bf00      	nop
 8006b1c:	e002      	b.n	8006b24 <HAL_UART_IRQHandler+0x604>
      return;
 8006b1e:	bf00      	nop
 8006b20:	e000      	b.n	8006b24 <HAL_UART_IRQHandler+0x604>
    return;
 8006b22:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006b24:	37e8      	adds	r7, #232	@ 0xe8
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop

08006b2c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006b48:	bf00      	nop
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b60:	bf00      	nop
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b70:	b08a      	sub	sp, #40	@ 0x28
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b76:	2300      	movs	r3, #0
 8006b78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	689a      	ldr	r2, [r3, #8]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	431a      	orrs	r2, r3
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	695b      	ldr	r3, [r3, #20]
 8006b8a:	431a      	orrs	r2, r3
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	69db      	ldr	r3, [r3, #28]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	4ba4      	ldr	r3, [pc, #656]	@ (8006e2c <UART_SetConfig+0x2c0>)
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	68fa      	ldr	r2, [r7, #12]
 8006ba0:	6812      	ldr	r2, [r2, #0]
 8006ba2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ba4:	430b      	orrs	r3, r1
 8006ba6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	68da      	ldr	r2, [r3, #12]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	430a      	orrs	r2, r1
 8006bbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	699b      	ldr	r3, [r3, #24]
 8006bc2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a99      	ldr	r2, [pc, #612]	@ (8006e30 <UART_SetConfig+0x2c4>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d004      	beq.n	8006bd8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6a1b      	ldr	r3, [r3, #32]
 8006bd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006be8:	430a      	orrs	r2, r1
 8006bea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a90      	ldr	r2, [pc, #576]	@ (8006e34 <UART_SetConfig+0x2c8>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d126      	bne.n	8006c44 <UART_SetConfig+0xd8>
 8006bf6:	4b90      	ldr	r3, [pc, #576]	@ (8006e38 <UART_SetConfig+0x2cc>)
 8006bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bfc:	f003 0303 	and.w	r3, r3, #3
 8006c00:	2b03      	cmp	r3, #3
 8006c02:	d81b      	bhi.n	8006c3c <UART_SetConfig+0xd0>
 8006c04:	a201      	add	r2, pc, #4	@ (adr r2, 8006c0c <UART_SetConfig+0xa0>)
 8006c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c0a:	bf00      	nop
 8006c0c:	08006c1d 	.word	0x08006c1d
 8006c10:	08006c2d 	.word	0x08006c2d
 8006c14:	08006c25 	.word	0x08006c25
 8006c18:	08006c35 	.word	0x08006c35
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c22:	e116      	b.n	8006e52 <UART_SetConfig+0x2e6>
 8006c24:	2302      	movs	r3, #2
 8006c26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c2a:	e112      	b.n	8006e52 <UART_SetConfig+0x2e6>
 8006c2c:	2304      	movs	r3, #4
 8006c2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c32:	e10e      	b.n	8006e52 <UART_SetConfig+0x2e6>
 8006c34:	2308      	movs	r3, #8
 8006c36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c3a:	e10a      	b.n	8006e52 <UART_SetConfig+0x2e6>
 8006c3c:	2310      	movs	r3, #16
 8006c3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c42:	e106      	b.n	8006e52 <UART_SetConfig+0x2e6>
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a7c      	ldr	r2, [pc, #496]	@ (8006e3c <UART_SetConfig+0x2d0>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d138      	bne.n	8006cc0 <UART_SetConfig+0x154>
 8006c4e:	4b7a      	ldr	r3, [pc, #488]	@ (8006e38 <UART_SetConfig+0x2cc>)
 8006c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c54:	f003 030c 	and.w	r3, r3, #12
 8006c58:	2b0c      	cmp	r3, #12
 8006c5a:	d82d      	bhi.n	8006cb8 <UART_SetConfig+0x14c>
 8006c5c:	a201      	add	r2, pc, #4	@ (adr r2, 8006c64 <UART_SetConfig+0xf8>)
 8006c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c62:	bf00      	nop
 8006c64:	08006c99 	.word	0x08006c99
 8006c68:	08006cb9 	.word	0x08006cb9
 8006c6c:	08006cb9 	.word	0x08006cb9
 8006c70:	08006cb9 	.word	0x08006cb9
 8006c74:	08006ca9 	.word	0x08006ca9
 8006c78:	08006cb9 	.word	0x08006cb9
 8006c7c:	08006cb9 	.word	0x08006cb9
 8006c80:	08006cb9 	.word	0x08006cb9
 8006c84:	08006ca1 	.word	0x08006ca1
 8006c88:	08006cb9 	.word	0x08006cb9
 8006c8c:	08006cb9 	.word	0x08006cb9
 8006c90:	08006cb9 	.word	0x08006cb9
 8006c94:	08006cb1 	.word	0x08006cb1
 8006c98:	2300      	movs	r3, #0
 8006c9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c9e:	e0d8      	b.n	8006e52 <UART_SetConfig+0x2e6>
 8006ca0:	2302      	movs	r3, #2
 8006ca2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ca6:	e0d4      	b.n	8006e52 <UART_SetConfig+0x2e6>
 8006ca8:	2304      	movs	r3, #4
 8006caa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cae:	e0d0      	b.n	8006e52 <UART_SetConfig+0x2e6>
 8006cb0:	2308      	movs	r3, #8
 8006cb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cb6:	e0cc      	b.n	8006e52 <UART_SetConfig+0x2e6>
 8006cb8:	2310      	movs	r3, #16
 8006cba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cbe:	e0c8      	b.n	8006e52 <UART_SetConfig+0x2e6>
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a5e      	ldr	r2, [pc, #376]	@ (8006e40 <UART_SetConfig+0x2d4>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d125      	bne.n	8006d16 <UART_SetConfig+0x1aa>
 8006cca:	4b5b      	ldr	r3, [pc, #364]	@ (8006e38 <UART_SetConfig+0x2cc>)
 8006ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cd0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006cd4:	2b30      	cmp	r3, #48	@ 0x30
 8006cd6:	d016      	beq.n	8006d06 <UART_SetConfig+0x19a>
 8006cd8:	2b30      	cmp	r3, #48	@ 0x30
 8006cda:	d818      	bhi.n	8006d0e <UART_SetConfig+0x1a2>
 8006cdc:	2b20      	cmp	r3, #32
 8006cde:	d00a      	beq.n	8006cf6 <UART_SetConfig+0x18a>
 8006ce0:	2b20      	cmp	r3, #32
 8006ce2:	d814      	bhi.n	8006d0e <UART_SetConfig+0x1a2>
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d002      	beq.n	8006cee <UART_SetConfig+0x182>
 8006ce8:	2b10      	cmp	r3, #16
 8006cea:	d008      	beq.n	8006cfe <UART_SetConfig+0x192>
 8006cec:	e00f      	b.n	8006d0e <UART_SetConfig+0x1a2>
 8006cee:	2300      	movs	r3, #0
 8006cf0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cf4:	e0ad      	b.n	8006e52 <UART_SetConfig+0x2e6>
 8006cf6:	2302      	movs	r3, #2
 8006cf8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cfc:	e0a9      	b.n	8006e52 <UART_SetConfig+0x2e6>
 8006cfe:	2304      	movs	r3, #4
 8006d00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d04:	e0a5      	b.n	8006e52 <UART_SetConfig+0x2e6>
 8006d06:	2308      	movs	r3, #8
 8006d08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d0c:	e0a1      	b.n	8006e52 <UART_SetConfig+0x2e6>
 8006d0e:	2310      	movs	r3, #16
 8006d10:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d14:	e09d      	b.n	8006e52 <UART_SetConfig+0x2e6>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a4a      	ldr	r2, [pc, #296]	@ (8006e44 <UART_SetConfig+0x2d8>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d125      	bne.n	8006d6c <UART_SetConfig+0x200>
 8006d20:	4b45      	ldr	r3, [pc, #276]	@ (8006e38 <UART_SetConfig+0x2cc>)
 8006d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d26:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006d2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d2c:	d016      	beq.n	8006d5c <UART_SetConfig+0x1f0>
 8006d2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d30:	d818      	bhi.n	8006d64 <UART_SetConfig+0x1f8>
 8006d32:	2b80      	cmp	r3, #128	@ 0x80
 8006d34:	d00a      	beq.n	8006d4c <UART_SetConfig+0x1e0>
 8006d36:	2b80      	cmp	r3, #128	@ 0x80
 8006d38:	d814      	bhi.n	8006d64 <UART_SetConfig+0x1f8>
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d002      	beq.n	8006d44 <UART_SetConfig+0x1d8>
 8006d3e:	2b40      	cmp	r3, #64	@ 0x40
 8006d40:	d008      	beq.n	8006d54 <UART_SetConfig+0x1e8>
 8006d42:	e00f      	b.n	8006d64 <UART_SetConfig+0x1f8>
 8006d44:	2300      	movs	r3, #0
 8006d46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d4a:	e082      	b.n	8006e52 <UART_SetConfig+0x2e6>
 8006d4c:	2302      	movs	r3, #2
 8006d4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d52:	e07e      	b.n	8006e52 <UART_SetConfig+0x2e6>
 8006d54:	2304      	movs	r3, #4
 8006d56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d5a:	e07a      	b.n	8006e52 <UART_SetConfig+0x2e6>
 8006d5c:	2308      	movs	r3, #8
 8006d5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d62:	e076      	b.n	8006e52 <UART_SetConfig+0x2e6>
 8006d64:	2310      	movs	r3, #16
 8006d66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d6a:	e072      	b.n	8006e52 <UART_SetConfig+0x2e6>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a35      	ldr	r2, [pc, #212]	@ (8006e48 <UART_SetConfig+0x2dc>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d12a      	bne.n	8006dcc <UART_SetConfig+0x260>
 8006d76:	4b30      	ldr	r3, [pc, #192]	@ (8006e38 <UART_SetConfig+0x2cc>)
 8006d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d84:	d01a      	beq.n	8006dbc <UART_SetConfig+0x250>
 8006d86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d8a:	d81b      	bhi.n	8006dc4 <UART_SetConfig+0x258>
 8006d8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d90:	d00c      	beq.n	8006dac <UART_SetConfig+0x240>
 8006d92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d96:	d815      	bhi.n	8006dc4 <UART_SetConfig+0x258>
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d003      	beq.n	8006da4 <UART_SetConfig+0x238>
 8006d9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006da0:	d008      	beq.n	8006db4 <UART_SetConfig+0x248>
 8006da2:	e00f      	b.n	8006dc4 <UART_SetConfig+0x258>
 8006da4:	2300      	movs	r3, #0
 8006da6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006daa:	e052      	b.n	8006e52 <UART_SetConfig+0x2e6>
 8006dac:	2302      	movs	r3, #2
 8006dae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006db2:	e04e      	b.n	8006e52 <UART_SetConfig+0x2e6>
 8006db4:	2304      	movs	r3, #4
 8006db6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dba:	e04a      	b.n	8006e52 <UART_SetConfig+0x2e6>
 8006dbc:	2308      	movs	r3, #8
 8006dbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dc2:	e046      	b.n	8006e52 <UART_SetConfig+0x2e6>
 8006dc4:	2310      	movs	r3, #16
 8006dc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dca:	e042      	b.n	8006e52 <UART_SetConfig+0x2e6>
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a17      	ldr	r2, [pc, #92]	@ (8006e30 <UART_SetConfig+0x2c4>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d13a      	bne.n	8006e4c <UART_SetConfig+0x2e0>
 8006dd6:	4b18      	ldr	r3, [pc, #96]	@ (8006e38 <UART_SetConfig+0x2cc>)
 8006dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ddc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006de0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006de4:	d01a      	beq.n	8006e1c <UART_SetConfig+0x2b0>
 8006de6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006dea:	d81b      	bhi.n	8006e24 <UART_SetConfig+0x2b8>
 8006dec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006df0:	d00c      	beq.n	8006e0c <UART_SetConfig+0x2a0>
 8006df2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006df6:	d815      	bhi.n	8006e24 <UART_SetConfig+0x2b8>
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d003      	beq.n	8006e04 <UART_SetConfig+0x298>
 8006dfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e00:	d008      	beq.n	8006e14 <UART_SetConfig+0x2a8>
 8006e02:	e00f      	b.n	8006e24 <UART_SetConfig+0x2b8>
 8006e04:	2300      	movs	r3, #0
 8006e06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e0a:	e022      	b.n	8006e52 <UART_SetConfig+0x2e6>
 8006e0c:	2302      	movs	r3, #2
 8006e0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e12:	e01e      	b.n	8006e52 <UART_SetConfig+0x2e6>
 8006e14:	2304      	movs	r3, #4
 8006e16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e1a:	e01a      	b.n	8006e52 <UART_SetConfig+0x2e6>
 8006e1c:	2308      	movs	r3, #8
 8006e1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e22:	e016      	b.n	8006e52 <UART_SetConfig+0x2e6>
 8006e24:	2310      	movs	r3, #16
 8006e26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e2a:	e012      	b.n	8006e52 <UART_SetConfig+0x2e6>
 8006e2c:	efff69f3 	.word	0xefff69f3
 8006e30:	40008000 	.word	0x40008000
 8006e34:	40013800 	.word	0x40013800
 8006e38:	40021000 	.word	0x40021000
 8006e3c:	40004400 	.word	0x40004400
 8006e40:	40004800 	.word	0x40004800
 8006e44:	40004c00 	.word	0x40004c00
 8006e48:	40005000 	.word	0x40005000
 8006e4c:	2310      	movs	r3, #16
 8006e4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a9f      	ldr	r2, [pc, #636]	@ (80070d4 <UART_SetConfig+0x568>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d17a      	bne.n	8006f52 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e5c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006e60:	2b08      	cmp	r3, #8
 8006e62:	d824      	bhi.n	8006eae <UART_SetConfig+0x342>
 8006e64:	a201      	add	r2, pc, #4	@ (adr r2, 8006e6c <UART_SetConfig+0x300>)
 8006e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e6a:	bf00      	nop
 8006e6c:	08006e91 	.word	0x08006e91
 8006e70:	08006eaf 	.word	0x08006eaf
 8006e74:	08006e99 	.word	0x08006e99
 8006e78:	08006eaf 	.word	0x08006eaf
 8006e7c:	08006e9f 	.word	0x08006e9f
 8006e80:	08006eaf 	.word	0x08006eaf
 8006e84:	08006eaf 	.word	0x08006eaf
 8006e88:	08006eaf 	.word	0x08006eaf
 8006e8c:	08006ea7 	.word	0x08006ea7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e90:	f7fe fa5e 	bl	8005350 <HAL_RCC_GetPCLK1Freq>
 8006e94:	61f8      	str	r0, [r7, #28]
        break;
 8006e96:	e010      	b.n	8006eba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e98:	4b8f      	ldr	r3, [pc, #572]	@ (80070d8 <UART_SetConfig+0x56c>)
 8006e9a:	61fb      	str	r3, [r7, #28]
        break;
 8006e9c:	e00d      	b.n	8006eba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e9e:	f7fe f9bf 	bl	8005220 <HAL_RCC_GetSysClockFreq>
 8006ea2:	61f8      	str	r0, [r7, #28]
        break;
 8006ea4:	e009      	b.n	8006eba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ea6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006eaa:	61fb      	str	r3, [r7, #28]
        break;
 8006eac:	e005      	b.n	8006eba <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006eb8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006eba:	69fb      	ldr	r3, [r7, #28]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	f000 80fb 	beq.w	80070b8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	685a      	ldr	r2, [r3, #4]
 8006ec6:	4613      	mov	r3, r2
 8006ec8:	005b      	lsls	r3, r3, #1
 8006eca:	4413      	add	r3, r2
 8006ecc:	69fa      	ldr	r2, [r7, #28]
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d305      	bcc.n	8006ede <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006ed8:	69fa      	ldr	r2, [r7, #28]
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d903      	bls.n	8006ee6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006ee4:	e0e8      	b.n	80070b8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	461c      	mov	r4, r3
 8006eec:	4615      	mov	r5, r2
 8006eee:	f04f 0200 	mov.w	r2, #0
 8006ef2:	f04f 0300 	mov.w	r3, #0
 8006ef6:	022b      	lsls	r3, r5, #8
 8006ef8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006efc:	0222      	lsls	r2, r4, #8
 8006efe:	68f9      	ldr	r1, [r7, #12]
 8006f00:	6849      	ldr	r1, [r1, #4]
 8006f02:	0849      	lsrs	r1, r1, #1
 8006f04:	2000      	movs	r0, #0
 8006f06:	4688      	mov	r8, r1
 8006f08:	4681      	mov	r9, r0
 8006f0a:	eb12 0a08 	adds.w	sl, r2, r8
 8006f0e:	eb43 0b09 	adc.w	fp, r3, r9
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	603b      	str	r3, [r7, #0]
 8006f1a:	607a      	str	r2, [r7, #4]
 8006f1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f20:	4650      	mov	r0, sl
 8006f22:	4659      	mov	r1, fp
 8006f24:	f7f9 f964 	bl	80001f0 <__aeabi_uldivmod>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f36:	d308      	bcc.n	8006f4a <UART_SetConfig+0x3de>
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f3e:	d204      	bcs.n	8006f4a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	69ba      	ldr	r2, [r7, #24]
 8006f46:	60da      	str	r2, [r3, #12]
 8006f48:	e0b6      	b.n	80070b8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006f50:	e0b2      	b.n	80070b8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	69db      	ldr	r3, [r3, #28]
 8006f56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f5a:	d15e      	bne.n	800701a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006f5c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006f60:	2b08      	cmp	r3, #8
 8006f62:	d828      	bhi.n	8006fb6 <UART_SetConfig+0x44a>
 8006f64:	a201      	add	r2, pc, #4	@ (adr r2, 8006f6c <UART_SetConfig+0x400>)
 8006f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f6a:	bf00      	nop
 8006f6c:	08006f91 	.word	0x08006f91
 8006f70:	08006f99 	.word	0x08006f99
 8006f74:	08006fa1 	.word	0x08006fa1
 8006f78:	08006fb7 	.word	0x08006fb7
 8006f7c:	08006fa7 	.word	0x08006fa7
 8006f80:	08006fb7 	.word	0x08006fb7
 8006f84:	08006fb7 	.word	0x08006fb7
 8006f88:	08006fb7 	.word	0x08006fb7
 8006f8c:	08006faf 	.word	0x08006faf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f90:	f7fe f9de 	bl	8005350 <HAL_RCC_GetPCLK1Freq>
 8006f94:	61f8      	str	r0, [r7, #28]
        break;
 8006f96:	e014      	b.n	8006fc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f98:	f7fe f9f0 	bl	800537c <HAL_RCC_GetPCLK2Freq>
 8006f9c:	61f8      	str	r0, [r7, #28]
        break;
 8006f9e:	e010      	b.n	8006fc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fa0:	4b4d      	ldr	r3, [pc, #308]	@ (80070d8 <UART_SetConfig+0x56c>)
 8006fa2:	61fb      	str	r3, [r7, #28]
        break;
 8006fa4:	e00d      	b.n	8006fc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fa6:	f7fe f93b 	bl	8005220 <HAL_RCC_GetSysClockFreq>
 8006faa:	61f8      	str	r0, [r7, #28]
        break;
 8006fac:	e009      	b.n	8006fc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006fb2:	61fb      	str	r3, [r7, #28]
        break;
 8006fb4:	e005      	b.n	8006fc2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006fc0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d077      	beq.n	80070b8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	005a      	lsls	r2, r3, #1
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	085b      	lsrs	r3, r3, #1
 8006fd2:	441a      	add	r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fdc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	2b0f      	cmp	r3, #15
 8006fe2:	d916      	bls.n	8007012 <UART_SetConfig+0x4a6>
 8006fe4:	69bb      	ldr	r3, [r7, #24]
 8006fe6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fea:	d212      	bcs.n	8007012 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	f023 030f 	bic.w	r3, r3, #15
 8006ff4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	085b      	lsrs	r3, r3, #1
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	f003 0307 	and.w	r3, r3, #7
 8007000:	b29a      	uxth	r2, r3
 8007002:	8afb      	ldrh	r3, [r7, #22]
 8007004:	4313      	orrs	r3, r2
 8007006:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	8afa      	ldrh	r2, [r7, #22]
 800700e:	60da      	str	r2, [r3, #12]
 8007010:	e052      	b.n	80070b8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007018:	e04e      	b.n	80070b8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800701a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800701e:	2b08      	cmp	r3, #8
 8007020:	d827      	bhi.n	8007072 <UART_SetConfig+0x506>
 8007022:	a201      	add	r2, pc, #4	@ (adr r2, 8007028 <UART_SetConfig+0x4bc>)
 8007024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007028:	0800704d 	.word	0x0800704d
 800702c:	08007055 	.word	0x08007055
 8007030:	0800705d 	.word	0x0800705d
 8007034:	08007073 	.word	0x08007073
 8007038:	08007063 	.word	0x08007063
 800703c:	08007073 	.word	0x08007073
 8007040:	08007073 	.word	0x08007073
 8007044:	08007073 	.word	0x08007073
 8007048:	0800706b 	.word	0x0800706b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800704c:	f7fe f980 	bl	8005350 <HAL_RCC_GetPCLK1Freq>
 8007050:	61f8      	str	r0, [r7, #28]
        break;
 8007052:	e014      	b.n	800707e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007054:	f7fe f992 	bl	800537c <HAL_RCC_GetPCLK2Freq>
 8007058:	61f8      	str	r0, [r7, #28]
        break;
 800705a:	e010      	b.n	800707e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800705c:	4b1e      	ldr	r3, [pc, #120]	@ (80070d8 <UART_SetConfig+0x56c>)
 800705e:	61fb      	str	r3, [r7, #28]
        break;
 8007060:	e00d      	b.n	800707e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007062:	f7fe f8dd 	bl	8005220 <HAL_RCC_GetSysClockFreq>
 8007066:	61f8      	str	r0, [r7, #28]
        break;
 8007068:	e009      	b.n	800707e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800706a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800706e:	61fb      	str	r3, [r7, #28]
        break;
 8007070:	e005      	b.n	800707e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007072:	2300      	movs	r3, #0
 8007074:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800707c:	bf00      	nop
    }

    if (pclk != 0U)
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d019      	beq.n	80070b8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	085a      	lsrs	r2, r3, #1
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	441a      	add	r2, r3
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	fbb2 f3f3 	udiv	r3, r2, r3
 8007096:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007098:	69bb      	ldr	r3, [r7, #24]
 800709a:	2b0f      	cmp	r3, #15
 800709c:	d909      	bls.n	80070b2 <UART_SetConfig+0x546>
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070a4:	d205      	bcs.n	80070b2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	b29a      	uxth	r2, r3
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	60da      	str	r2, [r3, #12]
 80070b0:	e002      	b.n	80070b8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2200      	movs	r2, #0
 80070bc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2200      	movs	r2, #0
 80070c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80070c4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3728      	adds	r7, #40	@ 0x28
 80070cc:	46bd      	mov	sp, r7
 80070ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070d2:	bf00      	nop
 80070d4:	40008000 	.word	0x40008000
 80070d8:	00f42400 	.word	0x00f42400

080070dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070e8:	f003 0308 	and.w	r3, r3, #8
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d00a      	beq.n	8007106 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	430a      	orrs	r2, r1
 8007104:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800710a:	f003 0301 	and.w	r3, r3, #1
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00a      	beq.n	8007128 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	430a      	orrs	r2, r1
 8007126:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800712c:	f003 0302 	and.w	r3, r3, #2
 8007130:	2b00      	cmp	r3, #0
 8007132:	d00a      	beq.n	800714a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	430a      	orrs	r2, r1
 8007148:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800714e:	f003 0304 	and.w	r3, r3, #4
 8007152:	2b00      	cmp	r3, #0
 8007154:	d00a      	beq.n	800716c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	430a      	orrs	r2, r1
 800716a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007170:	f003 0310 	and.w	r3, r3, #16
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00a      	beq.n	800718e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	430a      	orrs	r2, r1
 800718c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007192:	f003 0320 	and.w	r3, r3, #32
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00a      	beq.n	80071b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	430a      	orrs	r2, r1
 80071ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d01a      	beq.n	80071f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	430a      	orrs	r2, r1
 80071d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071da:	d10a      	bne.n	80071f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	430a      	orrs	r2, r1
 80071f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d00a      	beq.n	8007214 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	430a      	orrs	r2, r1
 8007212:	605a      	str	r2, [r3, #4]
  }
}
 8007214:	bf00      	nop
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b098      	sub	sp, #96	@ 0x60
 8007224:	af02      	add	r7, sp, #8
 8007226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007230:	f7fa fa44 	bl	80016bc <HAL_GetTick>
 8007234:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f003 0308 	and.w	r3, r3, #8
 8007240:	2b08      	cmp	r3, #8
 8007242:	d12e      	bne.n	80072a2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007244:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007248:	9300      	str	r3, [sp, #0]
 800724a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800724c:	2200      	movs	r2, #0
 800724e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 f88c 	bl	8007370 <UART_WaitOnFlagUntilTimeout>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d021      	beq.n	80072a2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007266:	e853 3f00 	ldrex	r3, [r3]
 800726a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800726c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800726e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007272:	653b      	str	r3, [r7, #80]	@ 0x50
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	461a      	mov	r2, r3
 800727a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800727c:	647b      	str	r3, [r7, #68]	@ 0x44
 800727e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007280:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007282:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007284:	e841 2300 	strex	r3, r2, [r1]
 8007288:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800728a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800728c:	2b00      	cmp	r3, #0
 800728e:	d1e6      	bne.n	800725e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2220      	movs	r2, #32
 8007294:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800729e:	2303      	movs	r3, #3
 80072a0:	e062      	b.n	8007368 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 0304 	and.w	r3, r3, #4
 80072ac:	2b04      	cmp	r3, #4
 80072ae:	d149      	bne.n	8007344 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80072b4:	9300      	str	r3, [sp, #0]
 80072b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072b8:	2200      	movs	r2, #0
 80072ba:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 f856 	bl	8007370 <UART_WaitOnFlagUntilTimeout>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d03c      	beq.n	8007344 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d2:	e853 3f00 	ldrex	r3, [r3]
 80072d6:	623b      	str	r3, [r7, #32]
   return(result);
 80072d8:	6a3b      	ldr	r3, [r7, #32]
 80072da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	461a      	mov	r2, r3
 80072e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80072ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072f0:	e841 2300 	strex	r3, r2, [r1]
 80072f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80072f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d1e6      	bne.n	80072ca <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	3308      	adds	r3, #8
 8007302:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	e853 3f00 	ldrex	r3, [r3]
 800730a:	60fb      	str	r3, [r7, #12]
   return(result);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f023 0301 	bic.w	r3, r3, #1
 8007312:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	3308      	adds	r3, #8
 800731a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800731c:	61fa      	str	r2, [r7, #28]
 800731e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007320:	69b9      	ldr	r1, [r7, #24]
 8007322:	69fa      	ldr	r2, [r7, #28]
 8007324:	e841 2300 	strex	r3, r2, [r1]
 8007328:	617b      	str	r3, [r7, #20]
   return(result);
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1e5      	bne.n	80072fc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2220      	movs	r2, #32
 8007334:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007340:	2303      	movs	r3, #3
 8007342:	e011      	b.n	8007368 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2220      	movs	r2, #32
 8007348:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2220      	movs	r2, #32
 800734e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007366:	2300      	movs	r3, #0
}
 8007368:	4618      	mov	r0, r3
 800736a:	3758      	adds	r7, #88	@ 0x58
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	603b      	str	r3, [r7, #0]
 800737c:	4613      	mov	r3, r2
 800737e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007380:	e04f      	b.n	8007422 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007382:	69bb      	ldr	r3, [r7, #24]
 8007384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007388:	d04b      	beq.n	8007422 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800738a:	f7fa f997 	bl	80016bc <HAL_GetTick>
 800738e:	4602      	mov	r2, r0
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	1ad3      	subs	r3, r2, r3
 8007394:	69ba      	ldr	r2, [r7, #24]
 8007396:	429a      	cmp	r2, r3
 8007398:	d302      	bcc.n	80073a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d101      	bne.n	80073a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80073a0:	2303      	movs	r3, #3
 80073a2:	e04e      	b.n	8007442 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f003 0304 	and.w	r3, r3, #4
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d037      	beq.n	8007422 <UART_WaitOnFlagUntilTimeout+0xb2>
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	2b80      	cmp	r3, #128	@ 0x80
 80073b6:	d034      	beq.n	8007422 <UART_WaitOnFlagUntilTimeout+0xb2>
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	2b40      	cmp	r3, #64	@ 0x40
 80073bc:	d031      	beq.n	8007422 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	69db      	ldr	r3, [r3, #28]
 80073c4:	f003 0308 	and.w	r3, r3, #8
 80073c8:	2b08      	cmp	r3, #8
 80073ca:	d110      	bne.n	80073ee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2208      	movs	r2, #8
 80073d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80073d4:	68f8      	ldr	r0, [r7, #12]
 80073d6:	f000 f8ff 	bl	80075d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2208      	movs	r2, #8
 80073de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	e029      	b.n	8007442 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	69db      	ldr	r3, [r3, #28]
 80073f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80073f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073fc:	d111      	bne.n	8007422 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007406:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007408:	68f8      	ldr	r0, [r7, #12]
 800740a:	f000 f8e5 	bl	80075d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2220      	movs	r2, #32
 8007412:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2200      	movs	r2, #0
 800741a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800741e:	2303      	movs	r3, #3
 8007420:	e00f      	b.n	8007442 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	69da      	ldr	r2, [r3, #28]
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	4013      	ands	r3, r2
 800742c:	68ba      	ldr	r2, [r7, #8]
 800742e:	429a      	cmp	r2, r3
 8007430:	bf0c      	ite	eq
 8007432:	2301      	moveq	r3, #1
 8007434:	2300      	movne	r3, #0
 8007436:	b2db      	uxtb	r3, r3
 8007438:	461a      	mov	r2, r3
 800743a:	79fb      	ldrb	r3, [r7, #7]
 800743c:	429a      	cmp	r2, r3
 800743e:	d0a0      	beq.n	8007382 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3710      	adds	r7, #16
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
	...

0800744c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800744c:	b480      	push	{r7}
 800744e:	b097      	sub	sp, #92	@ 0x5c
 8007450:	af00      	add	r7, sp, #0
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	60b9      	str	r1, [r7, #8]
 8007456:	4613      	mov	r3, r2
 8007458:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	68ba      	ldr	r2, [r7, #8]
 800745e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	88fa      	ldrh	r2, [r7, #6]
 8007464:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	88fa      	ldrh	r2, [r7, #6]
 800746c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2200      	movs	r2, #0
 8007474:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800747e:	d10e      	bne.n	800749e <UART_Start_Receive_IT+0x52>
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d105      	bne.n	8007494 <UART_Start_Receive_IT+0x48>
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800748e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007492:	e02d      	b.n	80074f0 <UART_Start_Receive_IT+0xa4>
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	22ff      	movs	r2, #255	@ 0xff
 8007498:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800749c:	e028      	b.n	80074f0 <UART_Start_Receive_IT+0xa4>
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d10d      	bne.n	80074c2 <UART_Start_Receive_IT+0x76>
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d104      	bne.n	80074b8 <UART_Start_Receive_IT+0x6c>
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	22ff      	movs	r2, #255	@ 0xff
 80074b2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80074b6:	e01b      	b.n	80074f0 <UART_Start_Receive_IT+0xa4>
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	227f      	movs	r2, #127	@ 0x7f
 80074bc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80074c0:	e016      	b.n	80074f0 <UART_Start_Receive_IT+0xa4>
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074ca:	d10d      	bne.n	80074e8 <UART_Start_Receive_IT+0x9c>
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d104      	bne.n	80074de <UART_Start_Receive_IT+0x92>
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	227f      	movs	r2, #127	@ 0x7f
 80074d8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80074dc:	e008      	b.n	80074f0 <UART_Start_Receive_IT+0xa4>
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	223f      	movs	r2, #63	@ 0x3f
 80074e2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80074e6:	e003      	b.n	80074f0 <UART_Start_Receive_IT+0xa4>
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2200      	movs	r2, #0
 80074f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2222      	movs	r2, #34	@ 0x22
 80074fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	3308      	adds	r3, #8
 8007506:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007508:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800750a:	e853 3f00 	ldrex	r3, [r3]
 800750e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007512:	f043 0301 	orr.w	r3, r3, #1
 8007516:	657b      	str	r3, [r7, #84]	@ 0x54
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	3308      	adds	r3, #8
 800751e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007520:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007522:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007524:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007526:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007528:	e841 2300 	strex	r3, r2, [r1]
 800752c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800752e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007530:	2b00      	cmp	r3, #0
 8007532:	d1e5      	bne.n	8007500 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800753c:	d107      	bne.n	800754e <UART_Start_Receive_IT+0x102>
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	691b      	ldr	r3, [r3, #16]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d103      	bne.n	800754e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	4a21      	ldr	r2, [pc, #132]	@ (80075d0 <UART_Start_Receive_IT+0x184>)
 800754a:	669a      	str	r2, [r3, #104]	@ 0x68
 800754c:	e002      	b.n	8007554 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	4a20      	ldr	r2, [pc, #128]	@ (80075d4 <UART_Start_Receive_IT+0x188>)
 8007552:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d019      	beq.n	8007590 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007564:	e853 3f00 	ldrex	r3, [r3]
 8007568:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800756a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800756c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007570:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	461a      	mov	r2, r3
 8007578:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800757a:	637b      	str	r3, [r7, #52]	@ 0x34
 800757c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007580:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007582:	e841 2300 	strex	r3, r2, [r1]
 8007586:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800758a:	2b00      	cmp	r3, #0
 800758c:	d1e6      	bne.n	800755c <UART_Start_Receive_IT+0x110>
 800758e:	e018      	b.n	80075c2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	e853 3f00 	ldrex	r3, [r3]
 800759c:	613b      	str	r3, [r7, #16]
   return(result);
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	f043 0320 	orr.w	r3, r3, #32
 80075a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	461a      	mov	r2, r3
 80075ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075ae:	623b      	str	r3, [r7, #32]
 80075b0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b2:	69f9      	ldr	r1, [r7, #28]
 80075b4:	6a3a      	ldr	r2, [r7, #32]
 80075b6:	e841 2300 	strex	r3, r2, [r1]
 80075ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d1e6      	bne.n	8007590 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	375c      	adds	r7, #92	@ 0x5c
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr
 80075d0:	080078dd 	.word	0x080078dd
 80075d4:	08007721 	.word	0x08007721

080075d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075d8:	b480      	push	{r7}
 80075da:	b095      	sub	sp, #84	@ 0x54
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075e8:	e853 3f00 	ldrex	r3, [r3]
 80075ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80075ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	461a      	mov	r2, r3
 80075fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8007600:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007602:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007604:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007606:	e841 2300 	strex	r3, r2, [r1]
 800760a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800760c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800760e:	2b00      	cmp	r3, #0
 8007610:	d1e6      	bne.n	80075e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	3308      	adds	r3, #8
 8007618:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761a:	6a3b      	ldr	r3, [r7, #32]
 800761c:	e853 3f00 	ldrex	r3, [r3]
 8007620:	61fb      	str	r3, [r7, #28]
   return(result);
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	f023 0301 	bic.w	r3, r3, #1
 8007628:	64bb      	str	r3, [r7, #72]	@ 0x48
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	3308      	adds	r3, #8
 8007630:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007632:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007634:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007636:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007638:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800763a:	e841 2300 	strex	r3, r2, [r1]
 800763e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1e5      	bne.n	8007612 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800764a:	2b01      	cmp	r3, #1
 800764c:	d118      	bne.n	8007680 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	e853 3f00 	ldrex	r3, [r3]
 800765a:	60bb      	str	r3, [r7, #8]
   return(result);
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	f023 0310 	bic.w	r3, r3, #16
 8007662:	647b      	str	r3, [r7, #68]	@ 0x44
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	461a      	mov	r2, r3
 800766a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800766c:	61bb      	str	r3, [r7, #24]
 800766e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007670:	6979      	ldr	r1, [r7, #20]
 8007672:	69ba      	ldr	r2, [r7, #24]
 8007674:	e841 2300 	strex	r3, r2, [r1]
 8007678:	613b      	str	r3, [r7, #16]
   return(result);
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d1e6      	bne.n	800764e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2220      	movs	r2, #32
 8007684:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007694:	bf00      	nop
 8007696:	3754      	adds	r7, #84	@ 0x54
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2200      	movs	r2, #0
 80076b2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076be:	68f8      	ldr	r0, [r7, #12]
 80076c0:	f7ff fa3e 	bl	8006b40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076c4:	bf00      	nop
 80076c6:	3710      	adds	r7, #16
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b088      	sub	sp, #32
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	e853 3f00 	ldrex	r3, [r3]
 80076e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076e8:	61fb      	str	r3, [r7, #28]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	461a      	mov	r2, r3
 80076f0:	69fb      	ldr	r3, [r7, #28]
 80076f2:	61bb      	str	r3, [r7, #24]
 80076f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f6:	6979      	ldr	r1, [r7, #20]
 80076f8:	69ba      	ldr	r2, [r7, #24]
 80076fa:	e841 2300 	strex	r3, r2, [r1]
 80076fe:	613b      	str	r3, [r7, #16]
   return(result);
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d1e6      	bne.n	80076d4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2220      	movs	r2, #32
 800770a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f7ff fa0a 	bl	8006b2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007718:	bf00      	nop
 800771a:	3720      	adds	r7, #32
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b09c      	sub	sp, #112	@ 0x70
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800772e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007738:	2b22      	cmp	r3, #34	@ 0x22
 800773a:	f040 80be 	bne.w	80078ba <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007744:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007748:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800774c:	b2d9      	uxtb	r1, r3
 800774e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007752:	b2da      	uxtb	r2, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007758:	400a      	ands	r2, r1
 800775a:	b2d2      	uxtb	r2, r2
 800775c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007762:	1c5a      	adds	r2, r3, #1
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800776e:	b29b      	uxth	r3, r3
 8007770:	3b01      	subs	r3, #1
 8007772:	b29a      	uxth	r2, r3
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007780:	b29b      	uxth	r3, r3
 8007782:	2b00      	cmp	r3, #0
 8007784:	f040 80a3 	bne.w	80078ce <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800778e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007790:	e853 3f00 	ldrex	r3, [r3]
 8007794:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007796:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007798:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800779c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	461a      	mov	r2, r3
 80077a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80077a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80077a8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80077ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80077ae:	e841 2300 	strex	r3, r2, [r1]
 80077b2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80077b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d1e6      	bne.n	8007788 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	3308      	adds	r3, #8
 80077c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077c4:	e853 3f00 	ldrex	r3, [r3]
 80077c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80077ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077cc:	f023 0301 	bic.w	r3, r3, #1
 80077d0:	667b      	str	r3, [r7, #100]	@ 0x64
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	3308      	adds	r3, #8
 80077d8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80077da:	647a      	str	r2, [r7, #68]	@ 0x44
 80077dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80077e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077e2:	e841 2300 	strex	r3, r2, [r1]
 80077e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80077e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1e5      	bne.n	80077ba <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2220      	movs	r2, #32
 80077f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a34      	ldr	r2, [pc, #208]	@ (80078d8 <UART_RxISR_8BIT+0x1b8>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d01f      	beq.n	800784c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007816:	2b00      	cmp	r3, #0
 8007818:	d018      	beq.n	800784c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007822:	e853 3f00 	ldrex	r3, [r3]
 8007826:	623b      	str	r3, [r7, #32]
   return(result);
 8007828:	6a3b      	ldr	r3, [r7, #32]
 800782a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800782e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	461a      	mov	r2, r3
 8007836:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007838:	633b      	str	r3, [r7, #48]	@ 0x30
 800783a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800783e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007840:	e841 2300 	strex	r3, r2, [r1]
 8007844:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007848:	2b00      	cmp	r3, #0
 800784a:	d1e6      	bne.n	800781a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007850:	2b01      	cmp	r3, #1
 8007852:	d12e      	bne.n	80078b2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	e853 3f00 	ldrex	r3, [r3]
 8007866:	60fb      	str	r3, [r7, #12]
   return(result);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f023 0310 	bic.w	r3, r3, #16
 800786e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	461a      	mov	r2, r3
 8007876:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007878:	61fb      	str	r3, [r7, #28]
 800787a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787c:	69b9      	ldr	r1, [r7, #24]
 800787e:	69fa      	ldr	r2, [r7, #28]
 8007880:	e841 2300 	strex	r3, r2, [r1]
 8007884:	617b      	str	r3, [r7, #20]
   return(result);
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d1e6      	bne.n	800785a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	69db      	ldr	r3, [r3, #28]
 8007892:	f003 0310 	and.w	r3, r3, #16
 8007896:	2b10      	cmp	r3, #16
 8007898:	d103      	bne.n	80078a2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2210      	movs	r2, #16
 80078a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80078a8:	4619      	mov	r1, r3
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f7ff f952 	bl	8006b54 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80078b0:	e00d      	b.n	80078ce <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f7f9 fa94 	bl	8000de0 <HAL_UART_RxCpltCallback>
}
 80078b8:	e009      	b.n	80078ce <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	8b1b      	ldrh	r3, [r3, #24]
 80078c0:	b29a      	uxth	r2, r3
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f042 0208 	orr.w	r2, r2, #8
 80078ca:	b292      	uxth	r2, r2
 80078cc:	831a      	strh	r2, [r3, #24]
}
 80078ce:	bf00      	nop
 80078d0:	3770      	adds	r7, #112	@ 0x70
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	40008000 	.word	0x40008000

080078dc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b09c      	sub	sp, #112	@ 0x70
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80078ea:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078f4:	2b22      	cmp	r3, #34	@ 0x22
 80078f6:	f040 80be 	bne.w	8007a76 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007900:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007908:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800790a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800790e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007912:	4013      	ands	r3, r2
 8007914:	b29a      	uxth	r2, r3
 8007916:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007918:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800791e:	1c9a      	adds	r2, r3, #2
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800792a:	b29b      	uxth	r3, r3
 800792c:	3b01      	subs	r3, #1
 800792e:	b29a      	uxth	r2, r3
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800793c:	b29b      	uxth	r3, r3
 800793e:	2b00      	cmp	r3, #0
 8007940:	f040 80a3 	bne.w	8007a8a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800794c:	e853 3f00 	ldrex	r3, [r3]
 8007950:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007952:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007954:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007958:	667b      	str	r3, [r7, #100]	@ 0x64
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	461a      	mov	r2, r3
 8007960:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007962:	657b      	str	r3, [r7, #84]	@ 0x54
 8007964:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007966:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007968:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800796a:	e841 2300 	strex	r3, r2, [r1]
 800796e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007970:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007972:	2b00      	cmp	r3, #0
 8007974:	d1e6      	bne.n	8007944 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	3308      	adds	r3, #8
 800797c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800797e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007980:	e853 3f00 	ldrex	r3, [r3]
 8007984:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007988:	f023 0301 	bic.w	r3, r3, #1
 800798c:	663b      	str	r3, [r7, #96]	@ 0x60
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	3308      	adds	r3, #8
 8007994:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007996:	643a      	str	r2, [r7, #64]	@ 0x40
 8007998:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800799a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800799c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800799e:	e841 2300 	strex	r3, r2, [r1]
 80079a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80079a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d1e5      	bne.n	8007976 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2220      	movs	r2, #32
 80079ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2200      	movs	r2, #0
 80079bc:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a34      	ldr	r2, [pc, #208]	@ (8007a94 <UART_RxISR_16BIT+0x1b8>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d01f      	beq.n	8007a08 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d018      	beq.n	8007a08 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079dc:	6a3b      	ldr	r3, [r7, #32]
 80079de:	e853 3f00 	ldrex	r3, [r3]
 80079e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80079ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	461a      	mov	r2, r3
 80079f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80079f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079f6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80079fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079fc:	e841 2300 	strex	r3, r2, [r1]
 8007a00:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1e6      	bne.n	80079d6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d12e      	bne.n	8007a6e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	e853 3f00 	ldrex	r3, [r3]
 8007a22:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	f023 0310 	bic.w	r3, r3, #16
 8007a2a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	461a      	mov	r2, r3
 8007a32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a34:	61bb      	str	r3, [r7, #24]
 8007a36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a38:	6979      	ldr	r1, [r7, #20]
 8007a3a:	69ba      	ldr	r2, [r7, #24]
 8007a3c:	e841 2300 	strex	r3, r2, [r1]
 8007a40:	613b      	str	r3, [r7, #16]
   return(result);
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d1e6      	bne.n	8007a16 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	69db      	ldr	r3, [r3, #28]
 8007a4e:	f003 0310 	and.w	r3, r3, #16
 8007a52:	2b10      	cmp	r3, #16
 8007a54:	d103      	bne.n	8007a5e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	2210      	movs	r2, #16
 8007a5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007a64:	4619      	mov	r1, r3
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f7ff f874 	bl	8006b54 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a6c:	e00d      	b.n	8007a8a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f7f9 f9b6 	bl	8000de0 <HAL_UART_RxCpltCallback>
}
 8007a74:	e009      	b.n	8007a8a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	8b1b      	ldrh	r3, [r3, #24]
 8007a7c:	b29a      	uxth	r2, r3
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f042 0208 	orr.w	r2, r2, #8
 8007a86:	b292      	uxth	r2, r2
 8007a88:	831a      	strh	r2, [r3, #24]
}
 8007a8a:	bf00      	nop
 8007a8c:	3770      	adds	r7, #112	@ 0x70
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
 8007a92:	bf00      	nop
 8007a94:	40008000 	.word	0x40008000

08007a98 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007aa0:	bf00      	nop
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <__NVIC_SetPriority>:
{
 8007aac:	b480      	push	{r7}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	6039      	str	r1, [r7, #0]
 8007ab6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	db0a      	blt.n	8007ad6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	b2da      	uxtb	r2, r3
 8007ac4:	490c      	ldr	r1, [pc, #48]	@ (8007af8 <__NVIC_SetPriority+0x4c>)
 8007ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007aca:	0112      	lsls	r2, r2, #4
 8007acc:	b2d2      	uxtb	r2, r2
 8007ace:	440b      	add	r3, r1
 8007ad0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007ad4:	e00a      	b.n	8007aec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	b2da      	uxtb	r2, r3
 8007ada:	4908      	ldr	r1, [pc, #32]	@ (8007afc <__NVIC_SetPriority+0x50>)
 8007adc:	79fb      	ldrb	r3, [r7, #7]
 8007ade:	f003 030f 	and.w	r3, r3, #15
 8007ae2:	3b04      	subs	r3, #4
 8007ae4:	0112      	lsls	r2, r2, #4
 8007ae6:	b2d2      	uxtb	r2, r2
 8007ae8:	440b      	add	r3, r1
 8007aea:	761a      	strb	r2, [r3, #24]
}
 8007aec:	bf00      	nop
 8007aee:	370c      	adds	r7, #12
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr
 8007af8:	e000e100 	.word	0xe000e100
 8007afc:	e000ed00 	.word	0xe000ed00

08007b00 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007b00:	b580      	push	{r7, lr}
 8007b02:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007b04:	4b05      	ldr	r3, [pc, #20]	@ (8007b1c <SysTick_Handler+0x1c>)
 8007b06:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007b08:	f001 fd46 	bl	8009598 <xTaskGetSchedulerState>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d001      	beq.n	8007b16 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007b12:	f002 fb41 	bl	800a198 <xPortSysTickHandler>
  }
}
 8007b16:	bf00      	nop
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	e000e010 	.word	0xe000e010

08007b20 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007b20:	b580      	push	{r7, lr}
 8007b22:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007b24:	2100      	movs	r1, #0
 8007b26:	f06f 0004 	mvn.w	r0, #4
 8007b2a:	f7ff ffbf 	bl	8007aac <__NVIC_SetPriority>
#endif
}
 8007b2e:	bf00      	nop
 8007b30:	bd80      	pop	{r7, pc}
	...

08007b34 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b3a:	f3ef 8305 	mrs	r3, IPSR
 8007b3e:	603b      	str	r3, [r7, #0]
  return(result);
 8007b40:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d003      	beq.n	8007b4e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007b46:	f06f 0305 	mvn.w	r3, #5
 8007b4a:	607b      	str	r3, [r7, #4]
 8007b4c:	e00c      	b.n	8007b68 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8007b78 <osKernelInitialize+0x44>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d105      	bne.n	8007b62 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007b56:	4b08      	ldr	r3, [pc, #32]	@ (8007b78 <osKernelInitialize+0x44>)
 8007b58:	2201      	movs	r2, #1
 8007b5a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	607b      	str	r3, [r7, #4]
 8007b60:	e002      	b.n	8007b68 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007b62:	f04f 33ff 	mov.w	r3, #4294967295
 8007b66:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007b68:	687b      	ldr	r3, [r7, #4]
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	370c      	adds	r7, #12
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr
 8007b76:	bf00      	nop
 8007b78:	200002f4 	.word	0x200002f4

08007b7c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b082      	sub	sp, #8
 8007b80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b82:	f3ef 8305 	mrs	r3, IPSR
 8007b86:	603b      	str	r3, [r7, #0]
  return(result);
 8007b88:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d003      	beq.n	8007b96 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007b8e:	f06f 0305 	mvn.w	r3, #5
 8007b92:	607b      	str	r3, [r7, #4]
 8007b94:	e010      	b.n	8007bb8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007b96:	4b0b      	ldr	r3, [pc, #44]	@ (8007bc4 <osKernelStart+0x48>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d109      	bne.n	8007bb2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007b9e:	f7ff ffbf 	bl	8007b20 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007ba2:	4b08      	ldr	r3, [pc, #32]	@ (8007bc4 <osKernelStart+0x48>)
 8007ba4:	2202      	movs	r2, #2
 8007ba6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007ba8:	f001 f892 	bl	8008cd0 <vTaskStartScheduler>
      stat = osOK;
 8007bac:	2300      	movs	r3, #0
 8007bae:	607b      	str	r3, [r7, #4]
 8007bb0:	e002      	b.n	8007bb8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8007bb6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007bb8:	687b      	ldr	r3, [r7, #4]
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3708      	adds	r7, #8
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
 8007bc2:	bf00      	nop
 8007bc4:	200002f4 	.word	0x200002f4

08007bc8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b08e      	sub	sp, #56	@ 0x38
 8007bcc:	af04      	add	r7, sp, #16
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bd8:	f3ef 8305 	mrs	r3, IPSR
 8007bdc:	617b      	str	r3, [r7, #20]
  return(result);
 8007bde:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d17e      	bne.n	8007ce2 <osThreadNew+0x11a>
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d07b      	beq.n	8007ce2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007bea:	2380      	movs	r3, #128	@ 0x80
 8007bec:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007bee:	2318      	movs	r3, #24
 8007bf0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8007bfa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d045      	beq.n	8007c8e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d002      	beq.n	8007c10 <osThreadNew+0x48>
        name = attr->name;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	699b      	ldr	r3, [r3, #24]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d002      	beq.n	8007c1e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	699b      	ldr	r3, [r3, #24]
 8007c1c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007c1e:	69fb      	ldr	r3, [r7, #28]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d008      	beq.n	8007c36 <osThreadNew+0x6e>
 8007c24:	69fb      	ldr	r3, [r7, #28]
 8007c26:	2b38      	cmp	r3, #56	@ 0x38
 8007c28:	d805      	bhi.n	8007c36 <osThreadNew+0x6e>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	f003 0301 	and.w	r3, r3, #1
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d001      	beq.n	8007c3a <osThreadNew+0x72>
        return (NULL);
 8007c36:	2300      	movs	r3, #0
 8007c38:	e054      	b.n	8007ce4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	695b      	ldr	r3, [r3, #20]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d003      	beq.n	8007c4a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	695b      	ldr	r3, [r3, #20]
 8007c46:	089b      	lsrs	r3, r3, #2
 8007c48:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d00e      	beq.n	8007c70 <osThreadNew+0xa8>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	2ba7      	cmp	r3, #167	@ 0xa7
 8007c58:	d90a      	bls.n	8007c70 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d006      	beq.n	8007c70 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	695b      	ldr	r3, [r3, #20]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d002      	beq.n	8007c70 <osThreadNew+0xa8>
        mem = 1;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	61bb      	str	r3, [r7, #24]
 8007c6e:	e010      	b.n	8007c92 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d10c      	bne.n	8007c92 <osThreadNew+0xca>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d108      	bne.n	8007c92 <osThreadNew+0xca>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	691b      	ldr	r3, [r3, #16]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d104      	bne.n	8007c92 <osThreadNew+0xca>
          mem = 0;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	61bb      	str	r3, [r7, #24]
 8007c8c:	e001      	b.n	8007c92 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d110      	bne.n	8007cba <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007ca0:	9202      	str	r2, [sp, #8]
 8007ca2:	9301      	str	r3, [sp, #4]
 8007ca4:	69fb      	ldr	r3, [r7, #28]
 8007ca6:	9300      	str	r3, [sp, #0]
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	6a3a      	ldr	r2, [r7, #32]
 8007cac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007cae:	68f8      	ldr	r0, [r7, #12]
 8007cb0:	f000 fe1a 	bl	80088e8 <xTaskCreateStatic>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	613b      	str	r3, [r7, #16]
 8007cb8:	e013      	b.n	8007ce2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007cba:	69bb      	ldr	r3, [r7, #24]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d110      	bne.n	8007ce2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007cc0:	6a3b      	ldr	r3, [r7, #32]
 8007cc2:	b29a      	uxth	r2, r3
 8007cc4:	f107 0310 	add.w	r3, r7, #16
 8007cc8:	9301      	str	r3, [sp, #4]
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	9300      	str	r3, [sp, #0]
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007cd2:	68f8      	ldr	r0, [r7, #12]
 8007cd4:	f000 fe68 	bl	80089a8 <xTaskCreate>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d001      	beq.n	8007ce2 <osThreadNew+0x11a>
            hTask = NULL;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007ce2:	693b      	ldr	r3, [r7, #16]
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3728      	adds	r7, #40	@ 0x28
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cf4:	f3ef 8305 	mrs	r3, IPSR
 8007cf8:	60bb      	str	r3, [r7, #8]
  return(result);
 8007cfa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d003      	beq.n	8007d08 <osDelay+0x1c>
    stat = osErrorISR;
 8007d00:	f06f 0305 	mvn.w	r3, #5
 8007d04:	60fb      	str	r3, [r7, #12]
 8007d06:	e007      	b.n	8007d18 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d002      	beq.n	8007d18 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 ffa6 	bl	8008c64 <vTaskDelay>
    }
  }

  return (stat);
 8007d18:	68fb      	ldr	r3, [r7, #12]
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3710      	adds	r7, #16
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
	...

08007d24 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007d24:	b480      	push	{r7}
 8007d26:	b085      	sub	sp, #20
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	60b9      	str	r1, [r7, #8]
 8007d2e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	4a07      	ldr	r2, [pc, #28]	@ (8007d50 <vApplicationGetIdleTaskMemory+0x2c>)
 8007d34:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	4a06      	ldr	r2, [pc, #24]	@ (8007d54 <vApplicationGetIdleTaskMemory+0x30>)
 8007d3a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2280      	movs	r2, #128	@ 0x80
 8007d40:	601a      	str	r2, [r3, #0]
}
 8007d42:	bf00      	nop
 8007d44:	3714      	adds	r7, #20
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr
 8007d4e:	bf00      	nop
 8007d50:	200002f8 	.word	0x200002f8
 8007d54:	200003a0 	.word	0x200003a0

08007d58 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007d58:	b480      	push	{r7}
 8007d5a:	b085      	sub	sp, #20
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	60b9      	str	r1, [r7, #8]
 8007d62:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	4a07      	ldr	r2, [pc, #28]	@ (8007d84 <vApplicationGetTimerTaskMemory+0x2c>)
 8007d68:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	4a06      	ldr	r2, [pc, #24]	@ (8007d88 <vApplicationGetTimerTaskMemory+0x30>)
 8007d6e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007d76:	601a      	str	r2, [r3, #0]
}
 8007d78:	bf00      	nop
 8007d7a:	3714      	adds	r7, #20
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr
 8007d84:	200005a0 	.word	0x200005a0
 8007d88:	20000648 	.word	0x20000648

08007d8c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f103 0208 	add.w	r2, r3, #8
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f04f 32ff 	mov.w	r2, #4294967295
 8007da4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f103 0208 	add.w	r2, r3, #8
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f103 0208 	add.w	r2, r3, #8
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007dc0:	bf00      	nop
 8007dc2:	370c      	adds	r7, #12
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007dda:	bf00      	nop
 8007ddc:	370c      	adds	r7, #12
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr

08007de6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007de6:	b480      	push	{r7}
 8007de8:	b085      	sub	sp, #20
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
 8007dee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	68fa      	ldr	r2, [r7, #12]
 8007dfa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	689a      	ldr	r2, [r3, #8]
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	683a      	ldr	r2, [r7, #0]
 8007e0a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	683a      	ldr	r2, [r7, #0]
 8007e10:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	1c5a      	adds	r2, r3, #1
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	601a      	str	r2, [r3, #0]
}
 8007e22:	bf00      	nop
 8007e24:	3714      	adds	r7, #20
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr

08007e2e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e2e:	b480      	push	{r7}
 8007e30:	b085      	sub	sp, #20
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
 8007e36:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e44:	d103      	bne.n	8007e4e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	691b      	ldr	r3, [r3, #16]
 8007e4a:	60fb      	str	r3, [r7, #12]
 8007e4c:	e00c      	b.n	8007e68 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	3308      	adds	r3, #8
 8007e52:	60fb      	str	r3, [r7, #12]
 8007e54:	e002      	b.n	8007e5c <vListInsert+0x2e>
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	60fb      	str	r3, [r7, #12]
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68ba      	ldr	r2, [r7, #8]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d2f6      	bcs.n	8007e56 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	685a      	ldr	r2, [r3, #4]
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	683a      	ldr	r2, [r7, #0]
 8007e76:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	68fa      	ldr	r2, [r7, #12]
 8007e7c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	683a      	ldr	r2, [r7, #0]
 8007e82:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	1c5a      	adds	r2, r3, #1
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	601a      	str	r2, [r3, #0]
}
 8007e94:	bf00      	nop
 8007e96:	3714      	adds	r7, #20
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b085      	sub	sp, #20
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	691b      	ldr	r3, [r3, #16]
 8007eac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	6892      	ldr	r2, [r2, #8]
 8007eb6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	6852      	ldr	r2, [r2, #4]
 8007ec0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d103      	bne.n	8007ed4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	689a      	ldr	r2, [r3, #8]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	1e5a      	subs	r2, r3, #1
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3714      	adds	r7, #20
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr

08007ef4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b084      	sub	sp, #16
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d10b      	bne.n	8007f20 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f0c:	f383 8811 	msr	BASEPRI, r3
 8007f10:	f3bf 8f6f 	isb	sy
 8007f14:	f3bf 8f4f 	dsb	sy
 8007f18:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007f1a:	bf00      	nop
 8007f1c:	bf00      	nop
 8007f1e:	e7fd      	b.n	8007f1c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007f20:	f002 f8aa 	bl	800a078 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f2c:	68f9      	ldr	r1, [r7, #12]
 8007f2e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007f30:	fb01 f303 	mul.w	r3, r1, r3
 8007f34:	441a      	add	r2, r3
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681a      	ldr	r2, [r3, #0]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f50:	3b01      	subs	r3, #1
 8007f52:	68f9      	ldr	r1, [r7, #12]
 8007f54:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007f56:	fb01 f303 	mul.w	r3, r1, r3
 8007f5a:	441a      	add	r2, r3
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	22ff      	movs	r2, #255	@ 0xff
 8007f64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	22ff      	movs	r2, #255	@ 0xff
 8007f6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d114      	bne.n	8007fa0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	691b      	ldr	r3, [r3, #16]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d01a      	beq.n	8007fb4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	3310      	adds	r3, #16
 8007f82:	4618      	mov	r0, r3
 8007f84:	f001 f942 	bl	800920c <xTaskRemoveFromEventList>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d012      	beq.n	8007fb4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8007fc4 <xQueueGenericReset+0xd0>)
 8007f90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f94:	601a      	str	r2, [r3, #0]
 8007f96:	f3bf 8f4f 	dsb	sy
 8007f9a:	f3bf 8f6f 	isb	sy
 8007f9e:	e009      	b.n	8007fb4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	3310      	adds	r3, #16
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f7ff fef1 	bl	8007d8c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	3324      	adds	r3, #36	@ 0x24
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f7ff feec 	bl	8007d8c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007fb4:	f002 f892 	bl	800a0dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007fb8:	2301      	movs	r3, #1
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3710      	adds	r7, #16
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	e000ed04 	.word	0xe000ed04

08007fc8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b08e      	sub	sp, #56	@ 0x38
 8007fcc:	af02      	add	r7, sp, #8
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	60b9      	str	r1, [r7, #8]
 8007fd2:	607a      	str	r2, [r7, #4]
 8007fd4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d10b      	bne.n	8007ff4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fe0:	f383 8811 	msr	BASEPRI, r3
 8007fe4:	f3bf 8f6f 	isb	sy
 8007fe8:	f3bf 8f4f 	dsb	sy
 8007fec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007fee:	bf00      	nop
 8007ff0:	bf00      	nop
 8007ff2:	e7fd      	b.n	8007ff0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d10b      	bne.n	8008012 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ffe:	f383 8811 	msr	BASEPRI, r3
 8008002:	f3bf 8f6f 	isb	sy
 8008006:	f3bf 8f4f 	dsb	sy
 800800a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800800c:	bf00      	nop
 800800e:	bf00      	nop
 8008010:	e7fd      	b.n	800800e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d002      	beq.n	800801e <xQueueGenericCreateStatic+0x56>
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d001      	beq.n	8008022 <xQueueGenericCreateStatic+0x5a>
 800801e:	2301      	movs	r3, #1
 8008020:	e000      	b.n	8008024 <xQueueGenericCreateStatic+0x5c>
 8008022:	2300      	movs	r3, #0
 8008024:	2b00      	cmp	r3, #0
 8008026:	d10b      	bne.n	8008040 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800802c:	f383 8811 	msr	BASEPRI, r3
 8008030:	f3bf 8f6f 	isb	sy
 8008034:	f3bf 8f4f 	dsb	sy
 8008038:	623b      	str	r3, [r7, #32]
}
 800803a:	bf00      	nop
 800803c:	bf00      	nop
 800803e:	e7fd      	b.n	800803c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d102      	bne.n	800804c <xQueueGenericCreateStatic+0x84>
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d101      	bne.n	8008050 <xQueueGenericCreateStatic+0x88>
 800804c:	2301      	movs	r3, #1
 800804e:	e000      	b.n	8008052 <xQueueGenericCreateStatic+0x8a>
 8008050:	2300      	movs	r3, #0
 8008052:	2b00      	cmp	r3, #0
 8008054:	d10b      	bne.n	800806e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800805a:	f383 8811 	msr	BASEPRI, r3
 800805e:	f3bf 8f6f 	isb	sy
 8008062:	f3bf 8f4f 	dsb	sy
 8008066:	61fb      	str	r3, [r7, #28]
}
 8008068:	bf00      	nop
 800806a:	bf00      	nop
 800806c:	e7fd      	b.n	800806a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800806e:	2350      	movs	r3, #80	@ 0x50
 8008070:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	2b50      	cmp	r3, #80	@ 0x50
 8008076:	d00b      	beq.n	8008090 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800807c:	f383 8811 	msr	BASEPRI, r3
 8008080:	f3bf 8f6f 	isb	sy
 8008084:	f3bf 8f4f 	dsb	sy
 8008088:	61bb      	str	r3, [r7, #24]
}
 800808a:	bf00      	nop
 800808c:	bf00      	nop
 800808e:	e7fd      	b.n	800808c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008090:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008098:	2b00      	cmp	r3, #0
 800809a:	d00d      	beq.n	80080b8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800809c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800809e:	2201      	movs	r2, #1
 80080a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80080a4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80080a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080aa:	9300      	str	r3, [sp, #0]
 80080ac:	4613      	mov	r3, r2
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	68b9      	ldr	r1, [r7, #8]
 80080b2:	68f8      	ldr	r0, [r7, #12]
 80080b4:	f000 f805 	bl	80080c2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80080b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3730      	adds	r7, #48	@ 0x30
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}

080080c2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80080c2:	b580      	push	{r7, lr}
 80080c4:	b084      	sub	sp, #16
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	60f8      	str	r0, [r7, #12]
 80080ca:	60b9      	str	r1, [r7, #8]
 80080cc:	607a      	str	r2, [r7, #4]
 80080ce:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d103      	bne.n	80080de <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	69ba      	ldr	r2, [r7, #24]
 80080da:	601a      	str	r2, [r3, #0]
 80080dc:	e002      	b.n	80080e4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80080de:	69bb      	ldr	r3, [r7, #24]
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80080e4:	69bb      	ldr	r3, [r7, #24]
 80080e6:	68fa      	ldr	r2, [r7, #12]
 80080e8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80080ea:	69bb      	ldr	r3, [r7, #24]
 80080ec:	68ba      	ldr	r2, [r7, #8]
 80080ee:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80080f0:	2101      	movs	r1, #1
 80080f2:	69b8      	ldr	r0, [r7, #24]
 80080f4:	f7ff fefe 	bl	8007ef4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	78fa      	ldrb	r2, [r7, #3]
 80080fc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008100:	bf00      	nop
 8008102:	3710      	adds	r7, #16
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b08e      	sub	sp, #56	@ 0x38
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	607a      	str	r2, [r7, #4]
 8008114:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008116:	2300      	movs	r3, #0
 8008118:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800811e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008120:	2b00      	cmp	r3, #0
 8008122:	d10b      	bne.n	800813c <xQueueGenericSend+0x34>
	__asm volatile
 8008124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008128:	f383 8811 	msr	BASEPRI, r3
 800812c:	f3bf 8f6f 	isb	sy
 8008130:	f3bf 8f4f 	dsb	sy
 8008134:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008136:	bf00      	nop
 8008138:	bf00      	nop
 800813a:	e7fd      	b.n	8008138 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d103      	bne.n	800814a <xQueueGenericSend+0x42>
 8008142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008146:	2b00      	cmp	r3, #0
 8008148:	d101      	bne.n	800814e <xQueueGenericSend+0x46>
 800814a:	2301      	movs	r3, #1
 800814c:	e000      	b.n	8008150 <xQueueGenericSend+0x48>
 800814e:	2300      	movs	r3, #0
 8008150:	2b00      	cmp	r3, #0
 8008152:	d10b      	bne.n	800816c <xQueueGenericSend+0x64>
	__asm volatile
 8008154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008158:	f383 8811 	msr	BASEPRI, r3
 800815c:	f3bf 8f6f 	isb	sy
 8008160:	f3bf 8f4f 	dsb	sy
 8008164:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008166:	bf00      	nop
 8008168:	bf00      	nop
 800816a:	e7fd      	b.n	8008168 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	2b02      	cmp	r3, #2
 8008170:	d103      	bne.n	800817a <xQueueGenericSend+0x72>
 8008172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008176:	2b01      	cmp	r3, #1
 8008178:	d101      	bne.n	800817e <xQueueGenericSend+0x76>
 800817a:	2301      	movs	r3, #1
 800817c:	e000      	b.n	8008180 <xQueueGenericSend+0x78>
 800817e:	2300      	movs	r3, #0
 8008180:	2b00      	cmp	r3, #0
 8008182:	d10b      	bne.n	800819c <xQueueGenericSend+0x94>
	__asm volatile
 8008184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008188:	f383 8811 	msr	BASEPRI, r3
 800818c:	f3bf 8f6f 	isb	sy
 8008190:	f3bf 8f4f 	dsb	sy
 8008194:	623b      	str	r3, [r7, #32]
}
 8008196:	bf00      	nop
 8008198:	bf00      	nop
 800819a:	e7fd      	b.n	8008198 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800819c:	f001 f9fc 	bl	8009598 <xTaskGetSchedulerState>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d102      	bne.n	80081ac <xQueueGenericSend+0xa4>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d101      	bne.n	80081b0 <xQueueGenericSend+0xa8>
 80081ac:	2301      	movs	r3, #1
 80081ae:	e000      	b.n	80081b2 <xQueueGenericSend+0xaa>
 80081b0:	2300      	movs	r3, #0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d10b      	bne.n	80081ce <xQueueGenericSend+0xc6>
	__asm volatile
 80081b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ba:	f383 8811 	msr	BASEPRI, r3
 80081be:	f3bf 8f6f 	isb	sy
 80081c2:	f3bf 8f4f 	dsb	sy
 80081c6:	61fb      	str	r3, [r7, #28]
}
 80081c8:	bf00      	nop
 80081ca:	bf00      	nop
 80081cc:	e7fd      	b.n	80081ca <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80081ce:	f001 ff53 	bl	800a078 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80081d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081da:	429a      	cmp	r2, r3
 80081dc:	d302      	bcc.n	80081e4 <xQueueGenericSend+0xdc>
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	2b02      	cmp	r3, #2
 80081e2:	d129      	bne.n	8008238 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80081e4:	683a      	ldr	r2, [r7, #0]
 80081e6:	68b9      	ldr	r1, [r7, #8]
 80081e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80081ea:	f000 fa0f 	bl	800860c <prvCopyDataToQueue>
 80081ee:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d010      	beq.n	800821a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081fa:	3324      	adds	r3, #36	@ 0x24
 80081fc:	4618      	mov	r0, r3
 80081fe:	f001 f805 	bl	800920c <xTaskRemoveFromEventList>
 8008202:	4603      	mov	r3, r0
 8008204:	2b00      	cmp	r3, #0
 8008206:	d013      	beq.n	8008230 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008208:	4b3f      	ldr	r3, [pc, #252]	@ (8008308 <xQueueGenericSend+0x200>)
 800820a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800820e:	601a      	str	r2, [r3, #0]
 8008210:	f3bf 8f4f 	dsb	sy
 8008214:	f3bf 8f6f 	isb	sy
 8008218:	e00a      	b.n	8008230 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800821a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800821c:	2b00      	cmp	r3, #0
 800821e:	d007      	beq.n	8008230 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008220:	4b39      	ldr	r3, [pc, #228]	@ (8008308 <xQueueGenericSend+0x200>)
 8008222:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008226:	601a      	str	r2, [r3, #0]
 8008228:	f3bf 8f4f 	dsb	sy
 800822c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008230:	f001 ff54 	bl	800a0dc <vPortExitCritical>
				return pdPASS;
 8008234:	2301      	movs	r3, #1
 8008236:	e063      	b.n	8008300 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d103      	bne.n	8008246 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800823e:	f001 ff4d 	bl	800a0dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008242:	2300      	movs	r3, #0
 8008244:	e05c      	b.n	8008300 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008248:	2b00      	cmp	r3, #0
 800824a:	d106      	bne.n	800825a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800824c:	f107 0314 	add.w	r3, r7, #20
 8008250:	4618      	mov	r0, r3
 8008252:	f001 f83f 	bl	80092d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008256:	2301      	movs	r3, #1
 8008258:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800825a:	f001 ff3f 	bl	800a0dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800825e:	f000 fda7 	bl	8008db0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008262:	f001 ff09 	bl	800a078 <vPortEnterCritical>
 8008266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008268:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800826c:	b25b      	sxtb	r3, r3
 800826e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008272:	d103      	bne.n	800827c <xQueueGenericSend+0x174>
 8008274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008276:	2200      	movs	r2, #0
 8008278:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800827c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800827e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008282:	b25b      	sxtb	r3, r3
 8008284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008288:	d103      	bne.n	8008292 <xQueueGenericSend+0x18a>
 800828a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800828c:	2200      	movs	r2, #0
 800828e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008292:	f001 ff23 	bl	800a0dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008296:	1d3a      	adds	r2, r7, #4
 8008298:	f107 0314 	add.w	r3, r7, #20
 800829c:	4611      	mov	r1, r2
 800829e:	4618      	mov	r0, r3
 80082a0:	f001 f82e 	bl	8009300 <xTaskCheckForTimeOut>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d124      	bne.n	80082f4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80082aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80082ac:	f000 faa6 	bl	80087fc <prvIsQueueFull>
 80082b0:	4603      	mov	r3, r0
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d018      	beq.n	80082e8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80082b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082b8:	3310      	adds	r3, #16
 80082ba:	687a      	ldr	r2, [r7, #4]
 80082bc:	4611      	mov	r1, r2
 80082be:	4618      	mov	r0, r3
 80082c0:	f000 ff52 	bl	8009168 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80082c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80082c6:	f000 fa31 	bl	800872c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80082ca:	f000 fd7f 	bl	8008dcc <xTaskResumeAll>
 80082ce:	4603      	mov	r3, r0
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	f47f af7c 	bne.w	80081ce <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80082d6:	4b0c      	ldr	r3, [pc, #48]	@ (8008308 <xQueueGenericSend+0x200>)
 80082d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082dc:	601a      	str	r2, [r3, #0]
 80082de:	f3bf 8f4f 	dsb	sy
 80082e2:	f3bf 8f6f 	isb	sy
 80082e6:	e772      	b.n	80081ce <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80082e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80082ea:	f000 fa1f 	bl	800872c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80082ee:	f000 fd6d 	bl	8008dcc <xTaskResumeAll>
 80082f2:	e76c      	b.n	80081ce <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80082f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80082f6:	f000 fa19 	bl	800872c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80082fa:	f000 fd67 	bl	8008dcc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80082fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008300:	4618      	mov	r0, r3
 8008302:	3738      	adds	r7, #56	@ 0x38
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}
 8008308:	e000ed04 	.word	0xe000ed04

0800830c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b090      	sub	sp, #64	@ 0x40
 8008310:	af00      	add	r7, sp, #0
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	60b9      	str	r1, [r7, #8]
 8008316:	607a      	str	r2, [r7, #4]
 8008318:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800831e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008320:	2b00      	cmp	r3, #0
 8008322:	d10b      	bne.n	800833c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008328:	f383 8811 	msr	BASEPRI, r3
 800832c:	f3bf 8f6f 	isb	sy
 8008330:	f3bf 8f4f 	dsb	sy
 8008334:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008336:	bf00      	nop
 8008338:	bf00      	nop
 800833a:	e7fd      	b.n	8008338 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d103      	bne.n	800834a <xQueueGenericSendFromISR+0x3e>
 8008342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008346:	2b00      	cmp	r3, #0
 8008348:	d101      	bne.n	800834e <xQueueGenericSendFromISR+0x42>
 800834a:	2301      	movs	r3, #1
 800834c:	e000      	b.n	8008350 <xQueueGenericSendFromISR+0x44>
 800834e:	2300      	movs	r3, #0
 8008350:	2b00      	cmp	r3, #0
 8008352:	d10b      	bne.n	800836c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008358:	f383 8811 	msr	BASEPRI, r3
 800835c:	f3bf 8f6f 	isb	sy
 8008360:	f3bf 8f4f 	dsb	sy
 8008364:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008366:	bf00      	nop
 8008368:	bf00      	nop
 800836a:	e7fd      	b.n	8008368 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	2b02      	cmp	r3, #2
 8008370:	d103      	bne.n	800837a <xQueueGenericSendFromISR+0x6e>
 8008372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008376:	2b01      	cmp	r3, #1
 8008378:	d101      	bne.n	800837e <xQueueGenericSendFromISR+0x72>
 800837a:	2301      	movs	r3, #1
 800837c:	e000      	b.n	8008380 <xQueueGenericSendFromISR+0x74>
 800837e:	2300      	movs	r3, #0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d10b      	bne.n	800839c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008388:	f383 8811 	msr	BASEPRI, r3
 800838c:	f3bf 8f6f 	isb	sy
 8008390:	f3bf 8f4f 	dsb	sy
 8008394:	623b      	str	r3, [r7, #32]
}
 8008396:	bf00      	nop
 8008398:	bf00      	nop
 800839a:	e7fd      	b.n	8008398 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800839c:	f001 ff4c 	bl	800a238 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80083a0:	f3ef 8211 	mrs	r2, BASEPRI
 80083a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083a8:	f383 8811 	msr	BASEPRI, r3
 80083ac:	f3bf 8f6f 	isb	sy
 80083b0:	f3bf 8f4f 	dsb	sy
 80083b4:	61fa      	str	r2, [r7, #28]
 80083b6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80083b8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80083ba:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80083bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d302      	bcc.n	80083ce <xQueueGenericSendFromISR+0xc2>
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	2b02      	cmp	r3, #2
 80083cc:	d12f      	bne.n	800842e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80083ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80083d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80083de:	683a      	ldr	r2, [r7, #0]
 80083e0:	68b9      	ldr	r1, [r7, #8]
 80083e2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80083e4:	f000 f912 	bl	800860c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80083e8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80083ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083f0:	d112      	bne.n	8008418 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d016      	beq.n	8008428 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083fc:	3324      	adds	r3, #36	@ 0x24
 80083fe:	4618      	mov	r0, r3
 8008400:	f000 ff04 	bl	800920c <xTaskRemoveFromEventList>
 8008404:	4603      	mov	r3, r0
 8008406:	2b00      	cmp	r3, #0
 8008408:	d00e      	beq.n	8008428 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d00b      	beq.n	8008428 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2201      	movs	r2, #1
 8008414:	601a      	str	r2, [r3, #0]
 8008416:	e007      	b.n	8008428 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008418:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800841c:	3301      	adds	r3, #1
 800841e:	b2db      	uxtb	r3, r3
 8008420:	b25a      	sxtb	r2, r3
 8008422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008424:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008428:	2301      	movs	r3, #1
 800842a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800842c:	e001      	b.n	8008432 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800842e:	2300      	movs	r3, #0
 8008430:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008434:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800843c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800843e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008440:	4618      	mov	r0, r3
 8008442:	3740      	adds	r7, #64	@ 0x40
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}

08008448 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b08c      	sub	sp, #48	@ 0x30
 800844c:	af00      	add	r7, sp, #0
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	60b9      	str	r1, [r7, #8]
 8008452:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008454:	2300      	movs	r3, #0
 8008456:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800845c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800845e:	2b00      	cmp	r3, #0
 8008460:	d10b      	bne.n	800847a <xQueueReceive+0x32>
	__asm volatile
 8008462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008466:	f383 8811 	msr	BASEPRI, r3
 800846a:	f3bf 8f6f 	isb	sy
 800846e:	f3bf 8f4f 	dsb	sy
 8008472:	623b      	str	r3, [r7, #32]
}
 8008474:	bf00      	nop
 8008476:	bf00      	nop
 8008478:	e7fd      	b.n	8008476 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d103      	bne.n	8008488 <xQueueReceive+0x40>
 8008480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008484:	2b00      	cmp	r3, #0
 8008486:	d101      	bne.n	800848c <xQueueReceive+0x44>
 8008488:	2301      	movs	r3, #1
 800848a:	e000      	b.n	800848e <xQueueReceive+0x46>
 800848c:	2300      	movs	r3, #0
 800848e:	2b00      	cmp	r3, #0
 8008490:	d10b      	bne.n	80084aa <xQueueReceive+0x62>
	__asm volatile
 8008492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008496:	f383 8811 	msr	BASEPRI, r3
 800849a:	f3bf 8f6f 	isb	sy
 800849e:	f3bf 8f4f 	dsb	sy
 80084a2:	61fb      	str	r3, [r7, #28]
}
 80084a4:	bf00      	nop
 80084a6:	bf00      	nop
 80084a8:	e7fd      	b.n	80084a6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80084aa:	f001 f875 	bl	8009598 <xTaskGetSchedulerState>
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d102      	bne.n	80084ba <xQueueReceive+0x72>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d101      	bne.n	80084be <xQueueReceive+0x76>
 80084ba:	2301      	movs	r3, #1
 80084bc:	e000      	b.n	80084c0 <xQueueReceive+0x78>
 80084be:	2300      	movs	r3, #0
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d10b      	bne.n	80084dc <xQueueReceive+0x94>
	__asm volatile
 80084c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084c8:	f383 8811 	msr	BASEPRI, r3
 80084cc:	f3bf 8f6f 	isb	sy
 80084d0:	f3bf 8f4f 	dsb	sy
 80084d4:	61bb      	str	r3, [r7, #24]
}
 80084d6:	bf00      	nop
 80084d8:	bf00      	nop
 80084da:	e7fd      	b.n	80084d8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80084dc:	f001 fdcc 	bl	800a078 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084e4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80084e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d01f      	beq.n	800852c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80084ec:	68b9      	ldr	r1, [r7, #8]
 80084ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084f0:	f000 f8f6 	bl	80086e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80084f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f6:	1e5a      	subs	r2, r3, #1
 80084f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084fa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084fe:	691b      	ldr	r3, [r3, #16]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d00f      	beq.n	8008524 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008506:	3310      	adds	r3, #16
 8008508:	4618      	mov	r0, r3
 800850a:	f000 fe7f 	bl	800920c <xTaskRemoveFromEventList>
 800850e:	4603      	mov	r3, r0
 8008510:	2b00      	cmp	r3, #0
 8008512:	d007      	beq.n	8008524 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008514:	4b3c      	ldr	r3, [pc, #240]	@ (8008608 <xQueueReceive+0x1c0>)
 8008516:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800851a:	601a      	str	r2, [r3, #0]
 800851c:	f3bf 8f4f 	dsb	sy
 8008520:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008524:	f001 fdda 	bl	800a0dc <vPortExitCritical>
				return pdPASS;
 8008528:	2301      	movs	r3, #1
 800852a:	e069      	b.n	8008600 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d103      	bne.n	800853a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008532:	f001 fdd3 	bl	800a0dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008536:	2300      	movs	r3, #0
 8008538:	e062      	b.n	8008600 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800853a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800853c:	2b00      	cmp	r3, #0
 800853e:	d106      	bne.n	800854e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008540:	f107 0310 	add.w	r3, r7, #16
 8008544:	4618      	mov	r0, r3
 8008546:	f000 fec5 	bl	80092d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800854a:	2301      	movs	r3, #1
 800854c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800854e:	f001 fdc5 	bl	800a0dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008552:	f000 fc2d 	bl	8008db0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008556:	f001 fd8f 	bl	800a078 <vPortEnterCritical>
 800855a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800855c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008560:	b25b      	sxtb	r3, r3
 8008562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008566:	d103      	bne.n	8008570 <xQueueReceive+0x128>
 8008568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800856a:	2200      	movs	r2, #0
 800856c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008572:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008576:	b25b      	sxtb	r3, r3
 8008578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800857c:	d103      	bne.n	8008586 <xQueueReceive+0x13e>
 800857e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008580:	2200      	movs	r2, #0
 8008582:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008586:	f001 fda9 	bl	800a0dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800858a:	1d3a      	adds	r2, r7, #4
 800858c:	f107 0310 	add.w	r3, r7, #16
 8008590:	4611      	mov	r1, r2
 8008592:	4618      	mov	r0, r3
 8008594:	f000 feb4 	bl	8009300 <xTaskCheckForTimeOut>
 8008598:	4603      	mov	r3, r0
 800859a:	2b00      	cmp	r3, #0
 800859c:	d123      	bne.n	80085e6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800859e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085a0:	f000 f916 	bl	80087d0 <prvIsQueueEmpty>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d017      	beq.n	80085da <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80085aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085ac:	3324      	adds	r3, #36	@ 0x24
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	4611      	mov	r1, r2
 80085b2:	4618      	mov	r0, r3
 80085b4:	f000 fdd8 	bl	8009168 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80085b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085ba:	f000 f8b7 	bl	800872c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80085be:	f000 fc05 	bl	8008dcc <xTaskResumeAll>
 80085c2:	4603      	mov	r3, r0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d189      	bne.n	80084dc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80085c8:	4b0f      	ldr	r3, [pc, #60]	@ (8008608 <xQueueReceive+0x1c0>)
 80085ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085ce:	601a      	str	r2, [r3, #0]
 80085d0:	f3bf 8f4f 	dsb	sy
 80085d4:	f3bf 8f6f 	isb	sy
 80085d8:	e780      	b.n	80084dc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80085da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085dc:	f000 f8a6 	bl	800872c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80085e0:	f000 fbf4 	bl	8008dcc <xTaskResumeAll>
 80085e4:	e77a      	b.n	80084dc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80085e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085e8:	f000 f8a0 	bl	800872c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80085ec:	f000 fbee 	bl	8008dcc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80085f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085f2:	f000 f8ed 	bl	80087d0 <prvIsQueueEmpty>
 80085f6:	4603      	mov	r3, r0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	f43f af6f 	beq.w	80084dc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80085fe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008600:	4618      	mov	r0, r3
 8008602:	3730      	adds	r7, #48	@ 0x30
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}
 8008608:	e000ed04 	.word	0xe000ed04

0800860c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b086      	sub	sp, #24
 8008610:	af00      	add	r7, sp, #0
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	60b9      	str	r1, [r7, #8]
 8008616:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008618:	2300      	movs	r3, #0
 800861a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008620:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008626:	2b00      	cmp	r3, #0
 8008628:	d10d      	bne.n	8008646 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d14d      	bne.n	80086ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	4618      	mov	r0, r3
 8008638:	f000 ffcc 	bl	80095d4 <xTaskPriorityDisinherit>
 800863c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2200      	movs	r2, #0
 8008642:	609a      	str	r2, [r3, #8]
 8008644:	e043      	b.n	80086ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d119      	bne.n	8008680 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	6858      	ldr	r0, [r3, #4]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008654:	461a      	mov	r2, r3
 8008656:	68b9      	ldr	r1, [r7, #8]
 8008658:	f002 f8a2 	bl	800a7a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	685a      	ldr	r2, [r3, #4]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008664:	441a      	add	r2, r3
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	685a      	ldr	r2, [r3, #4]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	429a      	cmp	r2, r3
 8008674:	d32b      	bcc.n	80086ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	605a      	str	r2, [r3, #4]
 800867e:	e026      	b.n	80086ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	68d8      	ldr	r0, [r3, #12]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008688:	461a      	mov	r2, r3
 800868a:	68b9      	ldr	r1, [r7, #8]
 800868c:	f002 f888 	bl	800a7a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	68da      	ldr	r2, [r3, #12]
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008698:	425b      	negs	r3, r3
 800869a:	441a      	add	r2, r3
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	68da      	ldr	r2, [r3, #12]
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d207      	bcs.n	80086bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	689a      	ldr	r2, [r3, #8]
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086b4:	425b      	negs	r3, r3
 80086b6:	441a      	add	r2, r3
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2b02      	cmp	r3, #2
 80086c0:	d105      	bne.n	80086ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d002      	beq.n	80086ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	3b01      	subs	r3, #1
 80086cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	1c5a      	adds	r2, r3, #1
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80086d6:	697b      	ldr	r3, [r7, #20]
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3718      	adds	r7, #24
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b082      	sub	sp, #8
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d018      	beq.n	8008724 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	68da      	ldr	r2, [r3, #12]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086fa:	441a      	add	r2, r3
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	68da      	ldr	r2, [r3, #12]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	429a      	cmp	r2, r3
 800870a:	d303      	bcc.n	8008714 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681a      	ldr	r2, [r3, #0]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	68d9      	ldr	r1, [r3, #12]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800871c:	461a      	mov	r2, r3
 800871e:	6838      	ldr	r0, [r7, #0]
 8008720:	f002 f83e 	bl	800a7a0 <memcpy>
	}
}
 8008724:	bf00      	nop
 8008726:	3708      	adds	r7, #8
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008734:	f001 fca0 	bl	800a078 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800873e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008740:	e011      	b.n	8008766 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008746:	2b00      	cmp	r3, #0
 8008748:	d012      	beq.n	8008770 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	3324      	adds	r3, #36	@ 0x24
 800874e:	4618      	mov	r0, r3
 8008750:	f000 fd5c 	bl	800920c <xTaskRemoveFromEventList>
 8008754:	4603      	mov	r3, r0
 8008756:	2b00      	cmp	r3, #0
 8008758:	d001      	beq.n	800875e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800875a:	f000 fe35 	bl	80093c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800875e:	7bfb      	ldrb	r3, [r7, #15]
 8008760:	3b01      	subs	r3, #1
 8008762:	b2db      	uxtb	r3, r3
 8008764:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800876a:	2b00      	cmp	r3, #0
 800876c:	dce9      	bgt.n	8008742 <prvUnlockQueue+0x16>
 800876e:	e000      	b.n	8008772 <prvUnlockQueue+0x46>
					break;
 8008770:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	22ff      	movs	r2, #255	@ 0xff
 8008776:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800877a:	f001 fcaf 	bl	800a0dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800877e:	f001 fc7b 	bl	800a078 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008788:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800878a:	e011      	b.n	80087b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	691b      	ldr	r3, [r3, #16]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d012      	beq.n	80087ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	3310      	adds	r3, #16
 8008798:	4618      	mov	r0, r3
 800879a:	f000 fd37 	bl	800920c <xTaskRemoveFromEventList>
 800879e:	4603      	mov	r3, r0
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d001      	beq.n	80087a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80087a4:	f000 fe10 	bl	80093c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80087a8:	7bbb      	ldrb	r3, [r7, #14]
 80087aa:	3b01      	subs	r3, #1
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80087b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	dce9      	bgt.n	800878c <prvUnlockQueue+0x60>
 80087b8:	e000      	b.n	80087bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80087ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	22ff      	movs	r2, #255	@ 0xff
 80087c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80087c4:	f001 fc8a 	bl	800a0dc <vPortExitCritical>
}
 80087c8:	bf00      	nop
 80087ca:	3710      	adds	r7, #16
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80087d8:	f001 fc4e 	bl	800a078 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d102      	bne.n	80087ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80087e4:	2301      	movs	r3, #1
 80087e6:	60fb      	str	r3, [r7, #12]
 80087e8:	e001      	b.n	80087ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80087ea:	2300      	movs	r3, #0
 80087ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80087ee:	f001 fc75 	bl	800a0dc <vPortExitCritical>

	return xReturn;
 80087f2:	68fb      	ldr	r3, [r7, #12]
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3710      	adds	r7, #16
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008804:	f001 fc38 	bl	800a078 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008810:	429a      	cmp	r2, r3
 8008812:	d102      	bne.n	800881a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008814:	2301      	movs	r3, #1
 8008816:	60fb      	str	r3, [r7, #12]
 8008818:	e001      	b.n	800881e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800881a:	2300      	movs	r3, #0
 800881c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800881e:	f001 fc5d 	bl	800a0dc <vPortExitCritical>

	return xReturn;
 8008822:	68fb      	ldr	r3, [r7, #12]
}
 8008824:	4618      	mov	r0, r3
 8008826:	3710      	adds	r7, #16
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800882c:	b480      	push	{r7}
 800882e:	b085      	sub	sp, #20
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008836:	2300      	movs	r3, #0
 8008838:	60fb      	str	r3, [r7, #12]
 800883a:	e014      	b.n	8008866 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800883c:	4a0f      	ldr	r2, [pc, #60]	@ (800887c <vQueueAddToRegistry+0x50>)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d10b      	bne.n	8008860 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008848:	490c      	ldr	r1, [pc, #48]	@ (800887c <vQueueAddToRegistry+0x50>)
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	683a      	ldr	r2, [r7, #0]
 800884e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008852:	4a0a      	ldr	r2, [pc, #40]	@ (800887c <vQueueAddToRegistry+0x50>)
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	00db      	lsls	r3, r3, #3
 8008858:	4413      	add	r3, r2
 800885a:	687a      	ldr	r2, [r7, #4]
 800885c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800885e:	e006      	b.n	800886e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	3301      	adds	r3, #1
 8008864:	60fb      	str	r3, [r7, #12]
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2b07      	cmp	r3, #7
 800886a:	d9e7      	bls.n	800883c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800886c:	bf00      	nop
 800886e:	bf00      	nop
 8008870:	3714      	adds	r7, #20
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr
 800887a:	bf00      	nop
 800887c:	20000a48 	.word	0x20000a48

08008880 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008880:	b580      	push	{r7, lr}
 8008882:	b086      	sub	sp, #24
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008890:	f001 fbf2 	bl	800a078 <vPortEnterCritical>
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800889a:	b25b      	sxtb	r3, r3
 800889c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088a0:	d103      	bne.n	80088aa <vQueueWaitForMessageRestricted+0x2a>
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	2200      	movs	r2, #0
 80088a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80088b0:	b25b      	sxtb	r3, r3
 80088b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088b6:	d103      	bne.n	80088c0 <vQueueWaitForMessageRestricted+0x40>
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	2200      	movs	r2, #0
 80088bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80088c0:	f001 fc0c 	bl	800a0dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d106      	bne.n	80088da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	3324      	adds	r3, #36	@ 0x24
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	68b9      	ldr	r1, [r7, #8]
 80088d4:	4618      	mov	r0, r3
 80088d6:	f000 fc6d 	bl	80091b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80088da:	6978      	ldr	r0, [r7, #20]
 80088dc:	f7ff ff26 	bl	800872c <prvUnlockQueue>
	}
 80088e0:	bf00      	nop
 80088e2:	3718      	adds	r7, #24
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b08e      	sub	sp, #56	@ 0x38
 80088ec:	af04      	add	r7, sp, #16
 80088ee:	60f8      	str	r0, [r7, #12]
 80088f0:	60b9      	str	r1, [r7, #8]
 80088f2:	607a      	str	r2, [r7, #4]
 80088f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80088f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d10b      	bne.n	8008914 <xTaskCreateStatic+0x2c>
	__asm volatile
 80088fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008900:	f383 8811 	msr	BASEPRI, r3
 8008904:	f3bf 8f6f 	isb	sy
 8008908:	f3bf 8f4f 	dsb	sy
 800890c:	623b      	str	r3, [r7, #32]
}
 800890e:	bf00      	nop
 8008910:	bf00      	nop
 8008912:	e7fd      	b.n	8008910 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008916:	2b00      	cmp	r3, #0
 8008918:	d10b      	bne.n	8008932 <xTaskCreateStatic+0x4a>
	__asm volatile
 800891a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800891e:	f383 8811 	msr	BASEPRI, r3
 8008922:	f3bf 8f6f 	isb	sy
 8008926:	f3bf 8f4f 	dsb	sy
 800892a:	61fb      	str	r3, [r7, #28]
}
 800892c:	bf00      	nop
 800892e:	bf00      	nop
 8008930:	e7fd      	b.n	800892e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008932:	23a8      	movs	r3, #168	@ 0xa8
 8008934:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	2ba8      	cmp	r3, #168	@ 0xa8
 800893a:	d00b      	beq.n	8008954 <xTaskCreateStatic+0x6c>
	__asm volatile
 800893c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008940:	f383 8811 	msr	BASEPRI, r3
 8008944:	f3bf 8f6f 	isb	sy
 8008948:	f3bf 8f4f 	dsb	sy
 800894c:	61bb      	str	r3, [r7, #24]
}
 800894e:	bf00      	nop
 8008950:	bf00      	nop
 8008952:	e7fd      	b.n	8008950 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008954:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008958:	2b00      	cmp	r3, #0
 800895a:	d01e      	beq.n	800899a <xTaskCreateStatic+0xb2>
 800895c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800895e:	2b00      	cmp	r3, #0
 8008960:	d01b      	beq.n	800899a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008964:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008968:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800896a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800896c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800896e:	2202      	movs	r2, #2
 8008970:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008974:	2300      	movs	r3, #0
 8008976:	9303      	str	r3, [sp, #12]
 8008978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800897a:	9302      	str	r3, [sp, #8]
 800897c:	f107 0314 	add.w	r3, r7, #20
 8008980:	9301      	str	r3, [sp, #4]
 8008982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008984:	9300      	str	r3, [sp, #0]
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	68b9      	ldr	r1, [r7, #8]
 800898c:	68f8      	ldr	r0, [r7, #12]
 800898e:	f000 f851 	bl	8008a34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008992:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008994:	f000 f8f6 	bl	8008b84 <prvAddNewTaskToReadyList>
 8008998:	e001      	b.n	800899e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800899a:	2300      	movs	r3, #0
 800899c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800899e:	697b      	ldr	r3, [r7, #20]
	}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3728      	adds	r7, #40	@ 0x28
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b08c      	sub	sp, #48	@ 0x30
 80089ac:	af04      	add	r7, sp, #16
 80089ae:	60f8      	str	r0, [r7, #12]
 80089b0:	60b9      	str	r1, [r7, #8]
 80089b2:	603b      	str	r3, [r7, #0]
 80089b4:	4613      	mov	r3, r2
 80089b6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80089b8:	88fb      	ldrh	r3, [r7, #6]
 80089ba:	009b      	lsls	r3, r3, #2
 80089bc:	4618      	mov	r0, r3
 80089be:	f001 fc7d 	bl	800a2bc <pvPortMalloc>
 80089c2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d00e      	beq.n	80089e8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80089ca:	20a8      	movs	r0, #168	@ 0xa8
 80089cc:	f001 fc76 	bl	800a2bc <pvPortMalloc>
 80089d0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80089d2:	69fb      	ldr	r3, [r7, #28]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d003      	beq.n	80089e0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	697a      	ldr	r2, [r7, #20]
 80089dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80089de:	e005      	b.n	80089ec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80089e0:	6978      	ldr	r0, [r7, #20]
 80089e2:	f001 fd39 	bl	800a458 <vPortFree>
 80089e6:	e001      	b.n	80089ec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80089e8:	2300      	movs	r3, #0
 80089ea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80089ec:	69fb      	ldr	r3, [r7, #28]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d017      	beq.n	8008a22 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80089f2:	69fb      	ldr	r3, [r7, #28]
 80089f4:	2200      	movs	r2, #0
 80089f6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80089fa:	88fa      	ldrh	r2, [r7, #6]
 80089fc:	2300      	movs	r3, #0
 80089fe:	9303      	str	r3, [sp, #12]
 8008a00:	69fb      	ldr	r3, [r7, #28]
 8008a02:	9302      	str	r3, [sp, #8]
 8008a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a06:	9301      	str	r3, [sp, #4]
 8008a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a0a:	9300      	str	r3, [sp, #0]
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	68b9      	ldr	r1, [r7, #8]
 8008a10:	68f8      	ldr	r0, [r7, #12]
 8008a12:	f000 f80f 	bl	8008a34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a16:	69f8      	ldr	r0, [r7, #28]
 8008a18:	f000 f8b4 	bl	8008b84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	61bb      	str	r3, [r7, #24]
 8008a20:	e002      	b.n	8008a28 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008a22:	f04f 33ff 	mov.w	r3, #4294967295
 8008a26:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008a28:	69bb      	ldr	r3, [r7, #24]
	}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3720      	adds	r7, #32
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}
	...

08008a34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b088      	sub	sp, #32
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	60f8      	str	r0, [r7, #12]
 8008a3c:	60b9      	str	r1, [r7, #8]
 8008a3e:	607a      	str	r2, [r7, #4]
 8008a40:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a44:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	21a5      	movs	r1, #165	@ 0xa5
 8008a4e:	f001 fe23 	bl	800a698 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008a5c:	3b01      	subs	r3, #1
 8008a5e:	009b      	lsls	r3, r3, #2
 8008a60:	4413      	add	r3, r2
 8008a62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008a64:	69bb      	ldr	r3, [r7, #24]
 8008a66:	f023 0307 	bic.w	r3, r3, #7
 8008a6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008a6c:	69bb      	ldr	r3, [r7, #24]
 8008a6e:	f003 0307 	and.w	r3, r3, #7
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d00b      	beq.n	8008a8e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a7a:	f383 8811 	msr	BASEPRI, r3
 8008a7e:	f3bf 8f6f 	isb	sy
 8008a82:	f3bf 8f4f 	dsb	sy
 8008a86:	617b      	str	r3, [r7, #20]
}
 8008a88:	bf00      	nop
 8008a8a:	bf00      	nop
 8008a8c:	e7fd      	b.n	8008a8a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d01f      	beq.n	8008ad4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008a94:	2300      	movs	r3, #0
 8008a96:	61fb      	str	r3, [r7, #28]
 8008a98:	e012      	b.n	8008ac0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a9a:	68ba      	ldr	r2, [r7, #8]
 8008a9c:	69fb      	ldr	r3, [r7, #28]
 8008a9e:	4413      	add	r3, r2
 8008aa0:	7819      	ldrb	r1, [r3, #0]
 8008aa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	4413      	add	r3, r2
 8008aa8:	3334      	adds	r3, #52	@ 0x34
 8008aaa:	460a      	mov	r2, r1
 8008aac:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008aae:	68ba      	ldr	r2, [r7, #8]
 8008ab0:	69fb      	ldr	r3, [r7, #28]
 8008ab2:	4413      	add	r3, r2
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d006      	beq.n	8008ac8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	3301      	adds	r3, #1
 8008abe:	61fb      	str	r3, [r7, #28]
 8008ac0:	69fb      	ldr	r3, [r7, #28]
 8008ac2:	2b0f      	cmp	r3, #15
 8008ac4:	d9e9      	bls.n	8008a9a <prvInitialiseNewTask+0x66>
 8008ac6:	e000      	b.n	8008aca <prvInitialiseNewTask+0x96>
			{
				break;
 8008ac8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008acc:	2200      	movs	r2, #0
 8008ace:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008ad2:	e003      	b.n	8008adc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ade:	2b37      	cmp	r3, #55	@ 0x37
 8008ae0:	d901      	bls.n	8008ae6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008ae2:	2337      	movs	r3, #55	@ 0x37
 8008ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008aea:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008af0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af4:	2200      	movs	r2, #0
 8008af6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008afa:	3304      	adds	r3, #4
 8008afc:	4618      	mov	r0, r3
 8008afe:	f7ff f965 	bl	8007dcc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b04:	3318      	adds	r3, #24
 8008b06:	4618      	mov	r0, r3
 8008b08:	f7ff f960 	bl	8007dcc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b10:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b14:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b1a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b20:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b24:	2200      	movs	r2, #0
 8008b26:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b34:	3354      	adds	r3, #84	@ 0x54
 8008b36:	224c      	movs	r2, #76	@ 0x4c
 8008b38:	2100      	movs	r1, #0
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f001 fdac 	bl	800a698 <memset>
 8008b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b42:	4a0d      	ldr	r2, [pc, #52]	@ (8008b78 <prvInitialiseNewTask+0x144>)
 8008b44:	659a      	str	r2, [r3, #88]	@ 0x58
 8008b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b48:	4a0c      	ldr	r2, [pc, #48]	@ (8008b7c <prvInitialiseNewTask+0x148>)
 8008b4a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b4e:	4a0c      	ldr	r2, [pc, #48]	@ (8008b80 <prvInitialiseNewTask+0x14c>)
 8008b50:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008b52:	683a      	ldr	r2, [r7, #0]
 8008b54:	68f9      	ldr	r1, [r7, #12]
 8008b56:	69b8      	ldr	r0, [r7, #24]
 8008b58:	f001 f95a 	bl	8009e10 <pxPortInitialiseStack>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b60:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008b62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d002      	beq.n	8008b6e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b6e:	bf00      	nop
 8008b70:	3720      	adds	r7, #32
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	20001c94 	.word	0x20001c94
 8008b7c:	20001cfc 	.word	0x20001cfc
 8008b80:	20001d64 	.word	0x20001d64

08008b84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008b8c:	f001 fa74 	bl	800a078 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008b90:	4b2d      	ldr	r3, [pc, #180]	@ (8008c48 <prvAddNewTaskToReadyList+0xc4>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	3301      	adds	r3, #1
 8008b96:	4a2c      	ldr	r2, [pc, #176]	@ (8008c48 <prvAddNewTaskToReadyList+0xc4>)
 8008b98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008b9a:	4b2c      	ldr	r3, [pc, #176]	@ (8008c4c <prvAddNewTaskToReadyList+0xc8>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d109      	bne.n	8008bb6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008ba2:	4a2a      	ldr	r2, [pc, #168]	@ (8008c4c <prvAddNewTaskToReadyList+0xc8>)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008ba8:	4b27      	ldr	r3, [pc, #156]	@ (8008c48 <prvAddNewTaskToReadyList+0xc4>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d110      	bne.n	8008bd2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008bb0:	f000 fc2e 	bl	8009410 <prvInitialiseTaskLists>
 8008bb4:	e00d      	b.n	8008bd2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008bb6:	4b26      	ldr	r3, [pc, #152]	@ (8008c50 <prvAddNewTaskToReadyList+0xcc>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d109      	bne.n	8008bd2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008bbe:	4b23      	ldr	r3, [pc, #140]	@ (8008c4c <prvAddNewTaskToReadyList+0xc8>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d802      	bhi.n	8008bd2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008bcc:	4a1f      	ldr	r2, [pc, #124]	@ (8008c4c <prvAddNewTaskToReadyList+0xc8>)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008bd2:	4b20      	ldr	r3, [pc, #128]	@ (8008c54 <prvAddNewTaskToReadyList+0xd0>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	4a1e      	ldr	r2, [pc, #120]	@ (8008c54 <prvAddNewTaskToReadyList+0xd0>)
 8008bda:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008bdc:	4b1d      	ldr	r3, [pc, #116]	@ (8008c54 <prvAddNewTaskToReadyList+0xd0>)
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008be8:	4b1b      	ldr	r3, [pc, #108]	@ (8008c58 <prvAddNewTaskToReadyList+0xd4>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d903      	bls.n	8008bf8 <prvAddNewTaskToReadyList+0x74>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bf4:	4a18      	ldr	r2, [pc, #96]	@ (8008c58 <prvAddNewTaskToReadyList+0xd4>)
 8008bf6:	6013      	str	r3, [r2, #0]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bfc:	4613      	mov	r3, r2
 8008bfe:	009b      	lsls	r3, r3, #2
 8008c00:	4413      	add	r3, r2
 8008c02:	009b      	lsls	r3, r3, #2
 8008c04:	4a15      	ldr	r2, [pc, #84]	@ (8008c5c <prvAddNewTaskToReadyList+0xd8>)
 8008c06:	441a      	add	r2, r3
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	3304      	adds	r3, #4
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	4610      	mov	r0, r2
 8008c10:	f7ff f8e9 	bl	8007de6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008c14:	f001 fa62 	bl	800a0dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008c18:	4b0d      	ldr	r3, [pc, #52]	@ (8008c50 <prvAddNewTaskToReadyList+0xcc>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d00e      	beq.n	8008c3e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008c20:	4b0a      	ldr	r3, [pc, #40]	@ (8008c4c <prvAddNewTaskToReadyList+0xc8>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d207      	bcs.n	8008c3e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8008c60 <prvAddNewTaskToReadyList+0xdc>)
 8008c30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c34:	601a      	str	r2, [r3, #0]
 8008c36:	f3bf 8f4f 	dsb	sy
 8008c3a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c3e:	bf00      	nop
 8008c40:	3708      	adds	r7, #8
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
 8008c46:	bf00      	nop
 8008c48:	20000f5c 	.word	0x20000f5c
 8008c4c:	20000a88 	.word	0x20000a88
 8008c50:	20000f68 	.word	0x20000f68
 8008c54:	20000f78 	.word	0x20000f78
 8008c58:	20000f64 	.word	0x20000f64
 8008c5c:	20000a8c 	.word	0x20000a8c
 8008c60:	e000ed04 	.word	0xe000ed04

08008c64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b084      	sub	sp, #16
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d018      	beq.n	8008ca8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008c76:	4b14      	ldr	r3, [pc, #80]	@ (8008cc8 <vTaskDelay+0x64>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d00b      	beq.n	8008c96 <vTaskDelay+0x32>
	__asm volatile
 8008c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c82:	f383 8811 	msr	BASEPRI, r3
 8008c86:	f3bf 8f6f 	isb	sy
 8008c8a:	f3bf 8f4f 	dsb	sy
 8008c8e:	60bb      	str	r3, [r7, #8]
}
 8008c90:	bf00      	nop
 8008c92:	bf00      	nop
 8008c94:	e7fd      	b.n	8008c92 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008c96:	f000 f88b 	bl	8008db0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008c9a:	2100      	movs	r1, #0
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 fd09 	bl	80096b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008ca2:	f000 f893 	bl	8008dcc <xTaskResumeAll>
 8008ca6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d107      	bne.n	8008cbe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008cae:	4b07      	ldr	r3, [pc, #28]	@ (8008ccc <vTaskDelay+0x68>)
 8008cb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cb4:	601a      	str	r2, [r3, #0]
 8008cb6:	f3bf 8f4f 	dsb	sy
 8008cba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008cbe:	bf00      	nop
 8008cc0:	3710      	adds	r7, #16
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
 8008cc6:	bf00      	nop
 8008cc8:	20000f84 	.word	0x20000f84
 8008ccc:	e000ed04 	.word	0xe000ed04

08008cd0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b08a      	sub	sp, #40	@ 0x28
 8008cd4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008cde:	463a      	mov	r2, r7
 8008ce0:	1d39      	adds	r1, r7, #4
 8008ce2:	f107 0308 	add.w	r3, r7, #8
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f7ff f81c 	bl	8007d24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008cec:	6839      	ldr	r1, [r7, #0]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	68ba      	ldr	r2, [r7, #8]
 8008cf2:	9202      	str	r2, [sp, #8]
 8008cf4:	9301      	str	r3, [sp, #4]
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	9300      	str	r3, [sp, #0]
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	460a      	mov	r2, r1
 8008cfe:	4924      	ldr	r1, [pc, #144]	@ (8008d90 <vTaskStartScheduler+0xc0>)
 8008d00:	4824      	ldr	r0, [pc, #144]	@ (8008d94 <vTaskStartScheduler+0xc4>)
 8008d02:	f7ff fdf1 	bl	80088e8 <xTaskCreateStatic>
 8008d06:	4603      	mov	r3, r0
 8008d08:	4a23      	ldr	r2, [pc, #140]	@ (8008d98 <vTaskStartScheduler+0xc8>)
 8008d0a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008d0c:	4b22      	ldr	r3, [pc, #136]	@ (8008d98 <vTaskStartScheduler+0xc8>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d002      	beq.n	8008d1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008d14:	2301      	movs	r3, #1
 8008d16:	617b      	str	r3, [r7, #20]
 8008d18:	e001      	b.n	8008d1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d102      	bne.n	8008d2a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008d24:	f000 fd1a 	bl	800975c <xTimerCreateTimerTask>
 8008d28:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d11b      	bne.n	8008d68 <vTaskStartScheduler+0x98>
	__asm volatile
 8008d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d34:	f383 8811 	msr	BASEPRI, r3
 8008d38:	f3bf 8f6f 	isb	sy
 8008d3c:	f3bf 8f4f 	dsb	sy
 8008d40:	613b      	str	r3, [r7, #16]
}
 8008d42:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008d44:	4b15      	ldr	r3, [pc, #84]	@ (8008d9c <vTaskStartScheduler+0xcc>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	3354      	adds	r3, #84	@ 0x54
 8008d4a:	4a15      	ldr	r2, [pc, #84]	@ (8008da0 <vTaskStartScheduler+0xd0>)
 8008d4c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008d4e:	4b15      	ldr	r3, [pc, #84]	@ (8008da4 <vTaskStartScheduler+0xd4>)
 8008d50:	f04f 32ff 	mov.w	r2, #4294967295
 8008d54:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008d56:	4b14      	ldr	r3, [pc, #80]	@ (8008da8 <vTaskStartScheduler+0xd8>)
 8008d58:	2201      	movs	r2, #1
 8008d5a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008d5c:	4b13      	ldr	r3, [pc, #76]	@ (8008dac <vTaskStartScheduler+0xdc>)
 8008d5e:	2200      	movs	r2, #0
 8008d60:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008d62:	f001 f8e5 	bl	8009f30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008d66:	e00f      	b.n	8008d88 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d6e:	d10b      	bne.n	8008d88 <vTaskStartScheduler+0xb8>
	__asm volatile
 8008d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d74:	f383 8811 	msr	BASEPRI, r3
 8008d78:	f3bf 8f6f 	isb	sy
 8008d7c:	f3bf 8f4f 	dsb	sy
 8008d80:	60fb      	str	r3, [r7, #12]
}
 8008d82:	bf00      	nop
 8008d84:	bf00      	nop
 8008d86:	e7fd      	b.n	8008d84 <vTaskStartScheduler+0xb4>
}
 8008d88:	bf00      	nop
 8008d8a:	3718      	adds	r7, #24
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}
 8008d90:	0800a8cc 	.word	0x0800a8cc
 8008d94:	080093e1 	.word	0x080093e1
 8008d98:	20000f80 	.word	0x20000f80
 8008d9c:	20000a88 	.word	0x20000a88
 8008da0:	20000010 	.word	0x20000010
 8008da4:	20000f7c 	.word	0x20000f7c
 8008da8:	20000f68 	.word	0x20000f68
 8008dac:	20000f60 	.word	0x20000f60

08008db0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008db0:	b480      	push	{r7}
 8008db2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008db4:	4b04      	ldr	r3, [pc, #16]	@ (8008dc8 <vTaskSuspendAll+0x18>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	3301      	adds	r3, #1
 8008dba:	4a03      	ldr	r2, [pc, #12]	@ (8008dc8 <vTaskSuspendAll+0x18>)
 8008dbc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008dbe:	bf00      	nop
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr
 8008dc8:	20000f84 	.word	0x20000f84

08008dcc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b084      	sub	sp, #16
 8008dd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008dda:	4b42      	ldr	r3, [pc, #264]	@ (8008ee4 <xTaskResumeAll+0x118>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d10b      	bne.n	8008dfa <xTaskResumeAll+0x2e>
	__asm volatile
 8008de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008de6:	f383 8811 	msr	BASEPRI, r3
 8008dea:	f3bf 8f6f 	isb	sy
 8008dee:	f3bf 8f4f 	dsb	sy
 8008df2:	603b      	str	r3, [r7, #0]
}
 8008df4:	bf00      	nop
 8008df6:	bf00      	nop
 8008df8:	e7fd      	b.n	8008df6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008dfa:	f001 f93d 	bl	800a078 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008dfe:	4b39      	ldr	r3, [pc, #228]	@ (8008ee4 <xTaskResumeAll+0x118>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	3b01      	subs	r3, #1
 8008e04:	4a37      	ldr	r2, [pc, #220]	@ (8008ee4 <xTaskResumeAll+0x118>)
 8008e06:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e08:	4b36      	ldr	r3, [pc, #216]	@ (8008ee4 <xTaskResumeAll+0x118>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d162      	bne.n	8008ed6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008e10:	4b35      	ldr	r3, [pc, #212]	@ (8008ee8 <xTaskResumeAll+0x11c>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d05e      	beq.n	8008ed6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e18:	e02f      	b.n	8008e7a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e1a:	4b34      	ldr	r3, [pc, #208]	@ (8008eec <xTaskResumeAll+0x120>)
 8008e1c:	68db      	ldr	r3, [r3, #12]
 8008e1e:	68db      	ldr	r3, [r3, #12]
 8008e20:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	3318      	adds	r3, #24
 8008e26:	4618      	mov	r0, r3
 8008e28:	f7ff f83a 	bl	8007ea0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	3304      	adds	r3, #4
 8008e30:	4618      	mov	r0, r3
 8008e32:	f7ff f835 	bl	8007ea0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e3a:	4b2d      	ldr	r3, [pc, #180]	@ (8008ef0 <xTaskResumeAll+0x124>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d903      	bls.n	8008e4a <xTaskResumeAll+0x7e>
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e46:	4a2a      	ldr	r2, [pc, #168]	@ (8008ef0 <xTaskResumeAll+0x124>)
 8008e48:	6013      	str	r3, [r2, #0]
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e4e:	4613      	mov	r3, r2
 8008e50:	009b      	lsls	r3, r3, #2
 8008e52:	4413      	add	r3, r2
 8008e54:	009b      	lsls	r3, r3, #2
 8008e56:	4a27      	ldr	r2, [pc, #156]	@ (8008ef4 <xTaskResumeAll+0x128>)
 8008e58:	441a      	add	r2, r3
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	3304      	adds	r3, #4
 8008e5e:	4619      	mov	r1, r3
 8008e60:	4610      	mov	r0, r2
 8008e62:	f7fe ffc0 	bl	8007de6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e6a:	4b23      	ldr	r3, [pc, #140]	@ (8008ef8 <xTaskResumeAll+0x12c>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d302      	bcc.n	8008e7a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008e74:	4b21      	ldr	r3, [pc, #132]	@ (8008efc <xTaskResumeAll+0x130>)
 8008e76:	2201      	movs	r2, #1
 8008e78:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e7a:	4b1c      	ldr	r3, [pc, #112]	@ (8008eec <xTaskResumeAll+0x120>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d1cb      	bne.n	8008e1a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d001      	beq.n	8008e8c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008e88:	f000 fb66 	bl	8009558 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008e8c:	4b1c      	ldr	r3, [pc, #112]	@ (8008f00 <xTaskResumeAll+0x134>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d010      	beq.n	8008eba <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008e98:	f000 f846 	bl	8008f28 <xTaskIncrementTick>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d002      	beq.n	8008ea8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008ea2:	4b16      	ldr	r3, [pc, #88]	@ (8008efc <xTaskResumeAll+0x130>)
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	3b01      	subs	r3, #1
 8008eac:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d1f1      	bne.n	8008e98 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008eb4:	4b12      	ldr	r3, [pc, #72]	@ (8008f00 <xTaskResumeAll+0x134>)
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008eba:	4b10      	ldr	r3, [pc, #64]	@ (8008efc <xTaskResumeAll+0x130>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d009      	beq.n	8008ed6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8008f04 <xTaskResumeAll+0x138>)
 8008ec8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ecc:	601a      	str	r2, [r3, #0]
 8008ece:	f3bf 8f4f 	dsb	sy
 8008ed2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008ed6:	f001 f901 	bl	800a0dc <vPortExitCritical>

	return xAlreadyYielded;
 8008eda:	68bb      	ldr	r3, [r7, #8]
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3710      	adds	r7, #16
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	20000f84 	.word	0x20000f84
 8008ee8:	20000f5c 	.word	0x20000f5c
 8008eec:	20000f1c 	.word	0x20000f1c
 8008ef0:	20000f64 	.word	0x20000f64
 8008ef4:	20000a8c 	.word	0x20000a8c
 8008ef8:	20000a88 	.word	0x20000a88
 8008efc:	20000f70 	.word	0x20000f70
 8008f00:	20000f6c 	.word	0x20000f6c
 8008f04:	e000ed04 	.word	0xe000ed04

08008f08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b083      	sub	sp, #12
 8008f0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008f0e:	4b05      	ldr	r3, [pc, #20]	@ (8008f24 <xTaskGetTickCount+0x1c>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008f14:	687b      	ldr	r3, [r7, #4]
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	370c      	adds	r7, #12
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr
 8008f22:	bf00      	nop
 8008f24:	20000f60 	.word	0x20000f60

08008f28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b086      	sub	sp, #24
 8008f2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f32:	4b4f      	ldr	r3, [pc, #316]	@ (8009070 <xTaskIncrementTick+0x148>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	f040 8090 	bne.w	800905c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008f3c:	4b4d      	ldr	r3, [pc, #308]	@ (8009074 <xTaskIncrementTick+0x14c>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	3301      	adds	r3, #1
 8008f42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008f44:	4a4b      	ldr	r2, [pc, #300]	@ (8009074 <xTaskIncrementTick+0x14c>)
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d121      	bne.n	8008f94 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008f50:	4b49      	ldr	r3, [pc, #292]	@ (8009078 <xTaskIncrementTick+0x150>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d00b      	beq.n	8008f72 <xTaskIncrementTick+0x4a>
	__asm volatile
 8008f5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f5e:	f383 8811 	msr	BASEPRI, r3
 8008f62:	f3bf 8f6f 	isb	sy
 8008f66:	f3bf 8f4f 	dsb	sy
 8008f6a:	603b      	str	r3, [r7, #0]
}
 8008f6c:	bf00      	nop
 8008f6e:	bf00      	nop
 8008f70:	e7fd      	b.n	8008f6e <xTaskIncrementTick+0x46>
 8008f72:	4b41      	ldr	r3, [pc, #260]	@ (8009078 <xTaskIncrementTick+0x150>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	60fb      	str	r3, [r7, #12]
 8008f78:	4b40      	ldr	r3, [pc, #256]	@ (800907c <xTaskIncrementTick+0x154>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4a3e      	ldr	r2, [pc, #248]	@ (8009078 <xTaskIncrementTick+0x150>)
 8008f7e:	6013      	str	r3, [r2, #0]
 8008f80:	4a3e      	ldr	r2, [pc, #248]	@ (800907c <xTaskIncrementTick+0x154>)
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	6013      	str	r3, [r2, #0]
 8008f86:	4b3e      	ldr	r3, [pc, #248]	@ (8009080 <xTaskIncrementTick+0x158>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	4a3c      	ldr	r2, [pc, #240]	@ (8009080 <xTaskIncrementTick+0x158>)
 8008f8e:	6013      	str	r3, [r2, #0]
 8008f90:	f000 fae2 	bl	8009558 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008f94:	4b3b      	ldr	r3, [pc, #236]	@ (8009084 <xTaskIncrementTick+0x15c>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	693a      	ldr	r2, [r7, #16]
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d349      	bcc.n	8009032 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f9e:	4b36      	ldr	r3, [pc, #216]	@ (8009078 <xTaskIncrementTick+0x150>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d104      	bne.n	8008fb2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fa8:	4b36      	ldr	r3, [pc, #216]	@ (8009084 <xTaskIncrementTick+0x15c>)
 8008faa:	f04f 32ff 	mov.w	r2, #4294967295
 8008fae:	601a      	str	r2, [r3, #0]
					break;
 8008fb0:	e03f      	b.n	8009032 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fb2:	4b31      	ldr	r3, [pc, #196]	@ (8009078 <xTaskIncrementTick+0x150>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	68db      	ldr	r3, [r3, #12]
 8008fba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008fc2:	693a      	ldr	r2, [r7, #16]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d203      	bcs.n	8008fd2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008fca:	4a2e      	ldr	r2, [pc, #184]	@ (8009084 <xTaskIncrementTick+0x15c>)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008fd0:	e02f      	b.n	8009032 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	3304      	adds	r3, #4
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f7fe ff62 	bl	8007ea0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d004      	beq.n	8008fee <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	3318      	adds	r3, #24
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f7fe ff59 	bl	8007ea0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ff2:	4b25      	ldr	r3, [pc, #148]	@ (8009088 <xTaskIncrementTick+0x160>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d903      	bls.n	8009002 <xTaskIncrementTick+0xda>
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ffe:	4a22      	ldr	r2, [pc, #136]	@ (8009088 <xTaskIncrementTick+0x160>)
 8009000:	6013      	str	r3, [r2, #0]
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009006:	4613      	mov	r3, r2
 8009008:	009b      	lsls	r3, r3, #2
 800900a:	4413      	add	r3, r2
 800900c:	009b      	lsls	r3, r3, #2
 800900e:	4a1f      	ldr	r2, [pc, #124]	@ (800908c <xTaskIncrementTick+0x164>)
 8009010:	441a      	add	r2, r3
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	3304      	adds	r3, #4
 8009016:	4619      	mov	r1, r3
 8009018:	4610      	mov	r0, r2
 800901a:	f7fe fee4 	bl	8007de6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009022:	4b1b      	ldr	r3, [pc, #108]	@ (8009090 <xTaskIncrementTick+0x168>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009028:	429a      	cmp	r2, r3
 800902a:	d3b8      	bcc.n	8008f9e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800902c:	2301      	movs	r3, #1
 800902e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009030:	e7b5      	b.n	8008f9e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009032:	4b17      	ldr	r3, [pc, #92]	@ (8009090 <xTaskIncrementTick+0x168>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009038:	4914      	ldr	r1, [pc, #80]	@ (800908c <xTaskIncrementTick+0x164>)
 800903a:	4613      	mov	r3, r2
 800903c:	009b      	lsls	r3, r3, #2
 800903e:	4413      	add	r3, r2
 8009040:	009b      	lsls	r3, r3, #2
 8009042:	440b      	add	r3, r1
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	2b01      	cmp	r3, #1
 8009048:	d901      	bls.n	800904e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800904a:	2301      	movs	r3, #1
 800904c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800904e:	4b11      	ldr	r3, [pc, #68]	@ (8009094 <xTaskIncrementTick+0x16c>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d007      	beq.n	8009066 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009056:	2301      	movs	r3, #1
 8009058:	617b      	str	r3, [r7, #20]
 800905a:	e004      	b.n	8009066 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800905c:	4b0e      	ldr	r3, [pc, #56]	@ (8009098 <xTaskIncrementTick+0x170>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	3301      	adds	r3, #1
 8009062:	4a0d      	ldr	r2, [pc, #52]	@ (8009098 <xTaskIncrementTick+0x170>)
 8009064:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009066:	697b      	ldr	r3, [r7, #20]
}
 8009068:	4618      	mov	r0, r3
 800906a:	3718      	adds	r7, #24
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}
 8009070:	20000f84 	.word	0x20000f84
 8009074:	20000f60 	.word	0x20000f60
 8009078:	20000f14 	.word	0x20000f14
 800907c:	20000f18 	.word	0x20000f18
 8009080:	20000f74 	.word	0x20000f74
 8009084:	20000f7c 	.word	0x20000f7c
 8009088:	20000f64 	.word	0x20000f64
 800908c:	20000a8c 	.word	0x20000a8c
 8009090:	20000a88 	.word	0x20000a88
 8009094:	20000f70 	.word	0x20000f70
 8009098:	20000f6c 	.word	0x20000f6c

0800909c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800909c:	b480      	push	{r7}
 800909e:	b085      	sub	sp, #20
 80090a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80090a2:	4b2b      	ldr	r3, [pc, #172]	@ (8009150 <vTaskSwitchContext+0xb4>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d003      	beq.n	80090b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80090aa:	4b2a      	ldr	r3, [pc, #168]	@ (8009154 <vTaskSwitchContext+0xb8>)
 80090ac:	2201      	movs	r2, #1
 80090ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80090b0:	e047      	b.n	8009142 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80090b2:	4b28      	ldr	r3, [pc, #160]	@ (8009154 <vTaskSwitchContext+0xb8>)
 80090b4:	2200      	movs	r2, #0
 80090b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090b8:	4b27      	ldr	r3, [pc, #156]	@ (8009158 <vTaskSwitchContext+0xbc>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	60fb      	str	r3, [r7, #12]
 80090be:	e011      	b.n	80090e4 <vTaskSwitchContext+0x48>
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d10b      	bne.n	80090de <vTaskSwitchContext+0x42>
	__asm volatile
 80090c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090ca:	f383 8811 	msr	BASEPRI, r3
 80090ce:	f3bf 8f6f 	isb	sy
 80090d2:	f3bf 8f4f 	dsb	sy
 80090d6:	607b      	str	r3, [r7, #4]
}
 80090d8:	bf00      	nop
 80090da:	bf00      	nop
 80090dc:	e7fd      	b.n	80090da <vTaskSwitchContext+0x3e>
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	3b01      	subs	r3, #1
 80090e2:	60fb      	str	r3, [r7, #12]
 80090e4:	491d      	ldr	r1, [pc, #116]	@ (800915c <vTaskSwitchContext+0xc0>)
 80090e6:	68fa      	ldr	r2, [r7, #12]
 80090e8:	4613      	mov	r3, r2
 80090ea:	009b      	lsls	r3, r3, #2
 80090ec:	4413      	add	r3, r2
 80090ee:	009b      	lsls	r3, r3, #2
 80090f0:	440b      	add	r3, r1
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d0e3      	beq.n	80090c0 <vTaskSwitchContext+0x24>
 80090f8:	68fa      	ldr	r2, [r7, #12]
 80090fa:	4613      	mov	r3, r2
 80090fc:	009b      	lsls	r3, r3, #2
 80090fe:	4413      	add	r3, r2
 8009100:	009b      	lsls	r3, r3, #2
 8009102:	4a16      	ldr	r2, [pc, #88]	@ (800915c <vTaskSwitchContext+0xc0>)
 8009104:	4413      	add	r3, r2
 8009106:	60bb      	str	r3, [r7, #8]
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	685a      	ldr	r2, [r3, #4]
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	605a      	str	r2, [r3, #4]
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	685a      	ldr	r2, [r3, #4]
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	3308      	adds	r3, #8
 800911a:	429a      	cmp	r2, r3
 800911c:	d104      	bne.n	8009128 <vTaskSwitchContext+0x8c>
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	685a      	ldr	r2, [r3, #4]
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	605a      	str	r2, [r3, #4]
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	68db      	ldr	r3, [r3, #12]
 800912e:	4a0c      	ldr	r2, [pc, #48]	@ (8009160 <vTaskSwitchContext+0xc4>)
 8009130:	6013      	str	r3, [r2, #0]
 8009132:	4a09      	ldr	r2, [pc, #36]	@ (8009158 <vTaskSwitchContext+0xbc>)
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009138:	4b09      	ldr	r3, [pc, #36]	@ (8009160 <vTaskSwitchContext+0xc4>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	3354      	adds	r3, #84	@ 0x54
 800913e:	4a09      	ldr	r2, [pc, #36]	@ (8009164 <vTaskSwitchContext+0xc8>)
 8009140:	6013      	str	r3, [r2, #0]
}
 8009142:	bf00      	nop
 8009144:	3714      	adds	r7, #20
 8009146:	46bd      	mov	sp, r7
 8009148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914c:	4770      	bx	lr
 800914e:	bf00      	nop
 8009150:	20000f84 	.word	0x20000f84
 8009154:	20000f70 	.word	0x20000f70
 8009158:	20000f64 	.word	0x20000f64
 800915c:	20000a8c 	.word	0x20000a8c
 8009160:	20000a88 	.word	0x20000a88
 8009164:	20000010 	.word	0x20000010

08009168 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d10b      	bne.n	8009190 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800917c:	f383 8811 	msr	BASEPRI, r3
 8009180:	f3bf 8f6f 	isb	sy
 8009184:	f3bf 8f4f 	dsb	sy
 8009188:	60fb      	str	r3, [r7, #12]
}
 800918a:	bf00      	nop
 800918c:	bf00      	nop
 800918e:	e7fd      	b.n	800918c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009190:	4b07      	ldr	r3, [pc, #28]	@ (80091b0 <vTaskPlaceOnEventList+0x48>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	3318      	adds	r3, #24
 8009196:	4619      	mov	r1, r3
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f7fe fe48 	bl	8007e2e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800919e:	2101      	movs	r1, #1
 80091a0:	6838      	ldr	r0, [r7, #0]
 80091a2:	f000 fa87 	bl	80096b4 <prvAddCurrentTaskToDelayedList>
}
 80091a6:	bf00      	nop
 80091a8:	3710      	adds	r7, #16
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	bf00      	nop
 80091b0:	20000a88 	.word	0x20000a88

080091b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b086      	sub	sp, #24
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	60f8      	str	r0, [r7, #12]
 80091bc:	60b9      	str	r1, [r7, #8]
 80091be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d10b      	bne.n	80091de <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80091c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ca:	f383 8811 	msr	BASEPRI, r3
 80091ce:	f3bf 8f6f 	isb	sy
 80091d2:	f3bf 8f4f 	dsb	sy
 80091d6:	617b      	str	r3, [r7, #20]
}
 80091d8:	bf00      	nop
 80091da:	bf00      	nop
 80091dc:	e7fd      	b.n	80091da <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80091de:	4b0a      	ldr	r3, [pc, #40]	@ (8009208 <vTaskPlaceOnEventListRestricted+0x54>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	3318      	adds	r3, #24
 80091e4:	4619      	mov	r1, r3
 80091e6:	68f8      	ldr	r0, [r7, #12]
 80091e8:	f7fe fdfd 	bl	8007de6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d002      	beq.n	80091f8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80091f2:	f04f 33ff 	mov.w	r3, #4294967295
 80091f6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80091f8:	6879      	ldr	r1, [r7, #4]
 80091fa:	68b8      	ldr	r0, [r7, #8]
 80091fc:	f000 fa5a 	bl	80096b4 <prvAddCurrentTaskToDelayedList>
	}
 8009200:	bf00      	nop
 8009202:	3718      	adds	r7, #24
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}
 8009208:	20000a88 	.word	0x20000a88

0800920c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b086      	sub	sp, #24
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	68db      	ldr	r3, [r3, #12]
 8009218:	68db      	ldr	r3, [r3, #12]
 800921a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d10b      	bne.n	800923a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009226:	f383 8811 	msr	BASEPRI, r3
 800922a:	f3bf 8f6f 	isb	sy
 800922e:	f3bf 8f4f 	dsb	sy
 8009232:	60fb      	str	r3, [r7, #12]
}
 8009234:	bf00      	nop
 8009236:	bf00      	nop
 8009238:	e7fd      	b.n	8009236 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	3318      	adds	r3, #24
 800923e:	4618      	mov	r0, r3
 8009240:	f7fe fe2e 	bl	8007ea0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009244:	4b1d      	ldr	r3, [pc, #116]	@ (80092bc <xTaskRemoveFromEventList+0xb0>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d11d      	bne.n	8009288 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	3304      	adds	r3, #4
 8009250:	4618      	mov	r0, r3
 8009252:	f7fe fe25 	bl	8007ea0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800925a:	4b19      	ldr	r3, [pc, #100]	@ (80092c0 <xTaskRemoveFromEventList+0xb4>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	429a      	cmp	r2, r3
 8009260:	d903      	bls.n	800926a <xTaskRemoveFromEventList+0x5e>
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009266:	4a16      	ldr	r2, [pc, #88]	@ (80092c0 <xTaskRemoveFromEventList+0xb4>)
 8009268:	6013      	str	r3, [r2, #0]
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800926e:	4613      	mov	r3, r2
 8009270:	009b      	lsls	r3, r3, #2
 8009272:	4413      	add	r3, r2
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	4a13      	ldr	r2, [pc, #76]	@ (80092c4 <xTaskRemoveFromEventList+0xb8>)
 8009278:	441a      	add	r2, r3
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	3304      	adds	r3, #4
 800927e:	4619      	mov	r1, r3
 8009280:	4610      	mov	r0, r2
 8009282:	f7fe fdb0 	bl	8007de6 <vListInsertEnd>
 8009286:	e005      	b.n	8009294 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	3318      	adds	r3, #24
 800928c:	4619      	mov	r1, r3
 800928e:	480e      	ldr	r0, [pc, #56]	@ (80092c8 <xTaskRemoveFromEventList+0xbc>)
 8009290:	f7fe fda9 	bl	8007de6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009298:	4b0c      	ldr	r3, [pc, #48]	@ (80092cc <xTaskRemoveFromEventList+0xc0>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800929e:	429a      	cmp	r2, r3
 80092a0:	d905      	bls.n	80092ae <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80092a2:	2301      	movs	r3, #1
 80092a4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80092a6:	4b0a      	ldr	r3, [pc, #40]	@ (80092d0 <xTaskRemoveFromEventList+0xc4>)
 80092a8:	2201      	movs	r2, #1
 80092aa:	601a      	str	r2, [r3, #0]
 80092ac:	e001      	b.n	80092b2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80092ae:	2300      	movs	r3, #0
 80092b0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80092b2:	697b      	ldr	r3, [r7, #20]
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3718      	adds	r7, #24
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}
 80092bc:	20000f84 	.word	0x20000f84
 80092c0:	20000f64 	.word	0x20000f64
 80092c4:	20000a8c 	.word	0x20000a8c
 80092c8:	20000f1c 	.word	0x20000f1c
 80092cc:	20000a88 	.word	0x20000a88
 80092d0:	20000f70 	.word	0x20000f70

080092d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80092d4:	b480      	push	{r7}
 80092d6:	b083      	sub	sp, #12
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80092dc:	4b06      	ldr	r3, [pc, #24]	@ (80092f8 <vTaskInternalSetTimeOutState+0x24>)
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80092e4:	4b05      	ldr	r3, [pc, #20]	@ (80092fc <vTaskInternalSetTimeOutState+0x28>)
 80092e6:	681a      	ldr	r2, [r3, #0]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	605a      	str	r2, [r3, #4]
}
 80092ec:	bf00      	nop
 80092ee:	370c      	adds	r7, #12
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr
 80092f8:	20000f74 	.word	0x20000f74
 80092fc:	20000f60 	.word	0x20000f60

08009300 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b088      	sub	sp, #32
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d10b      	bne.n	8009328 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009314:	f383 8811 	msr	BASEPRI, r3
 8009318:	f3bf 8f6f 	isb	sy
 800931c:	f3bf 8f4f 	dsb	sy
 8009320:	613b      	str	r3, [r7, #16]
}
 8009322:	bf00      	nop
 8009324:	bf00      	nop
 8009326:	e7fd      	b.n	8009324 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d10b      	bne.n	8009346 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800932e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009332:	f383 8811 	msr	BASEPRI, r3
 8009336:	f3bf 8f6f 	isb	sy
 800933a:	f3bf 8f4f 	dsb	sy
 800933e:	60fb      	str	r3, [r7, #12]
}
 8009340:	bf00      	nop
 8009342:	bf00      	nop
 8009344:	e7fd      	b.n	8009342 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009346:	f000 fe97 	bl	800a078 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800934a:	4b1d      	ldr	r3, [pc, #116]	@ (80093c0 <xTaskCheckForTimeOut+0xc0>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	69ba      	ldr	r2, [r7, #24]
 8009356:	1ad3      	subs	r3, r2, r3
 8009358:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009362:	d102      	bne.n	800936a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009364:	2300      	movs	r3, #0
 8009366:	61fb      	str	r3, [r7, #28]
 8009368:	e023      	b.n	80093b2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681a      	ldr	r2, [r3, #0]
 800936e:	4b15      	ldr	r3, [pc, #84]	@ (80093c4 <xTaskCheckForTimeOut+0xc4>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	429a      	cmp	r2, r3
 8009374:	d007      	beq.n	8009386 <xTaskCheckForTimeOut+0x86>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	685b      	ldr	r3, [r3, #4]
 800937a:	69ba      	ldr	r2, [r7, #24]
 800937c:	429a      	cmp	r2, r3
 800937e:	d302      	bcc.n	8009386 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009380:	2301      	movs	r3, #1
 8009382:	61fb      	str	r3, [r7, #28]
 8009384:	e015      	b.n	80093b2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	697a      	ldr	r2, [r7, #20]
 800938c:	429a      	cmp	r2, r3
 800938e:	d20b      	bcs.n	80093a8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	1ad2      	subs	r2, r2, r3
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f7ff ff99 	bl	80092d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80093a2:	2300      	movs	r3, #0
 80093a4:	61fb      	str	r3, [r7, #28]
 80093a6:	e004      	b.n	80093b2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	2200      	movs	r2, #0
 80093ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80093ae:	2301      	movs	r3, #1
 80093b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80093b2:	f000 fe93 	bl	800a0dc <vPortExitCritical>

	return xReturn;
 80093b6:	69fb      	ldr	r3, [r7, #28]
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3720      	adds	r7, #32
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}
 80093c0:	20000f60 	.word	0x20000f60
 80093c4:	20000f74 	.word	0x20000f74

080093c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80093c8:	b480      	push	{r7}
 80093ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80093cc:	4b03      	ldr	r3, [pc, #12]	@ (80093dc <vTaskMissedYield+0x14>)
 80093ce:	2201      	movs	r2, #1
 80093d0:	601a      	str	r2, [r3, #0]
}
 80093d2:	bf00      	nop
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr
 80093dc:	20000f70 	.word	0x20000f70

080093e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b082      	sub	sp, #8
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80093e8:	f000 f852 	bl	8009490 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80093ec:	4b06      	ldr	r3, [pc, #24]	@ (8009408 <prvIdleTask+0x28>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d9f9      	bls.n	80093e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80093f4:	4b05      	ldr	r3, [pc, #20]	@ (800940c <prvIdleTask+0x2c>)
 80093f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093fa:	601a      	str	r2, [r3, #0]
 80093fc:	f3bf 8f4f 	dsb	sy
 8009400:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009404:	e7f0      	b.n	80093e8 <prvIdleTask+0x8>
 8009406:	bf00      	nop
 8009408:	20000a8c 	.word	0x20000a8c
 800940c:	e000ed04 	.word	0xe000ed04

08009410 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b082      	sub	sp, #8
 8009414:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009416:	2300      	movs	r3, #0
 8009418:	607b      	str	r3, [r7, #4]
 800941a:	e00c      	b.n	8009436 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800941c:	687a      	ldr	r2, [r7, #4]
 800941e:	4613      	mov	r3, r2
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	4413      	add	r3, r2
 8009424:	009b      	lsls	r3, r3, #2
 8009426:	4a12      	ldr	r2, [pc, #72]	@ (8009470 <prvInitialiseTaskLists+0x60>)
 8009428:	4413      	add	r3, r2
 800942a:	4618      	mov	r0, r3
 800942c:	f7fe fcae 	bl	8007d8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	3301      	adds	r3, #1
 8009434:	607b      	str	r3, [r7, #4]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2b37      	cmp	r3, #55	@ 0x37
 800943a:	d9ef      	bls.n	800941c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800943c:	480d      	ldr	r0, [pc, #52]	@ (8009474 <prvInitialiseTaskLists+0x64>)
 800943e:	f7fe fca5 	bl	8007d8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009442:	480d      	ldr	r0, [pc, #52]	@ (8009478 <prvInitialiseTaskLists+0x68>)
 8009444:	f7fe fca2 	bl	8007d8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009448:	480c      	ldr	r0, [pc, #48]	@ (800947c <prvInitialiseTaskLists+0x6c>)
 800944a:	f7fe fc9f 	bl	8007d8c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800944e:	480c      	ldr	r0, [pc, #48]	@ (8009480 <prvInitialiseTaskLists+0x70>)
 8009450:	f7fe fc9c 	bl	8007d8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009454:	480b      	ldr	r0, [pc, #44]	@ (8009484 <prvInitialiseTaskLists+0x74>)
 8009456:	f7fe fc99 	bl	8007d8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800945a:	4b0b      	ldr	r3, [pc, #44]	@ (8009488 <prvInitialiseTaskLists+0x78>)
 800945c:	4a05      	ldr	r2, [pc, #20]	@ (8009474 <prvInitialiseTaskLists+0x64>)
 800945e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009460:	4b0a      	ldr	r3, [pc, #40]	@ (800948c <prvInitialiseTaskLists+0x7c>)
 8009462:	4a05      	ldr	r2, [pc, #20]	@ (8009478 <prvInitialiseTaskLists+0x68>)
 8009464:	601a      	str	r2, [r3, #0]
}
 8009466:	bf00      	nop
 8009468:	3708      	adds	r7, #8
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}
 800946e:	bf00      	nop
 8009470:	20000a8c 	.word	0x20000a8c
 8009474:	20000eec 	.word	0x20000eec
 8009478:	20000f00 	.word	0x20000f00
 800947c:	20000f1c 	.word	0x20000f1c
 8009480:	20000f30 	.word	0x20000f30
 8009484:	20000f48 	.word	0x20000f48
 8009488:	20000f14 	.word	0x20000f14
 800948c:	20000f18 	.word	0x20000f18

08009490 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b082      	sub	sp, #8
 8009494:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009496:	e019      	b.n	80094cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009498:	f000 fdee 	bl	800a078 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800949c:	4b10      	ldr	r3, [pc, #64]	@ (80094e0 <prvCheckTasksWaitingTermination+0x50>)
 800949e:	68db      	ldr	r3, [r3, #12]
 80094a0:	68db      	ldr	r3, [r3, #12]
 80094a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	3304      	adds	r3, #4
 80094a8:	4618      	mov	r0, r3
 80094aa:	f7fe fcf9 	bl	8007ea0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80094ae:	4b0d      	ldr	r3, [pc, #52]	@ (80094e4 <prvCheckTasksWaitingTermination+0x54>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	3b01      	subs	r3, #1
 80094b4:	4a0b      	ldr	r2, [pc, #44]	@ (80094e4 <prvCheckTasksWaitingTermination+0x54>)
 80094b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80094b8:	4b0b      	ldr	r3, [pc, #44]	@ (80094e8 <prvCheckTasksWaitingTermination+0x58>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	3b01      	subs	r3, #1
 80094be:	4a0a      	ldr	r2, [pc, #40]	@ (80094e8 <prvCheckTasksWaitingTermination+0x58>)
 80094c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80094c2:	f000 fe0b 	bl	800a0dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f000 f810 	bl	80094ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80094cc:	4b06      	ldr	r3, [pc, #24]	@ (80094e8 <prvCheckTasksWaitingTermination+0x58>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d1e1      	bne.n	8009498 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80094d4:	bf00      	nop
 80094d6:	bf00      	nop
 80094d8:	3708      	adds	r7, #8
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	bf00      	nop
 80094e0:	20000f30 	.word	0x20000f30
 80094e4:	20000f5c 	.word	0x20000f5c
 80094e8:	20000f44 	.word	0x20000f44

080094ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b084      	sub	sp, #16
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	3354      	adds	r3, #84	@ 0x54
 80094f8:	4618      	mov	r0, r3
 80094fa:	f001 f8d5 	bl	800a6a8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009504:	2b00      	cmp	r3, #0
 8009506:	d108      	bne.n	800951a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800950c:	4618      	mov	r0, r3
 800950e:	f000 ffa3 	bl	800a458 <vPortFree>
				vPortFree( pxTCB );
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 ffa0 	bl	800a458 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009518:	e019      	b.n	800954e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009520:	2b01      	cmp	r3, #1
 8009522:	d103      	bne.n	800952c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 ff97 	bl	800a458 <vPortFree>
	}
 800952a:	e010      	b.n	800954e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009532:	2b02      	cmp	r3, #2
 8009534:	d00b      	beq.n	800954e <prvDeleteTCB+0x62>
	__asm volatile
 8009536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800953a:	f383 8811 	msr	BASEPRI, r3
 800953e:	f3bf 8f6f 	isb	sy
 8009542:	f3bf 8f4f 	dsb	sy
 8009546:	60fb      	str	r3, [r7, #12]
}
 8009548:	bf00      	nop
 800954a:	bf00      	nop
 800954c:	e7fd      	b.n	800954a <prvDeleteTCB+0x5e>
	}
 800954e:	bf00      	nop
 8009550:	3710      	adds	r7, #16
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
	...

08009558 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009558:	b480      	push	{r7}
 800955a:	b083      	sub	sp, #12
 800955c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800955e:	4b0c      	ldr	r3, [pc, #48]	@ (8009590 <prvResetNextTaskUnblockTime+0x38>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d104      	bne.n	8009572 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009568:	4b0a      	ldr	r3, [pc, #40]	@ (8009594 <prvResetNextTaskUnblockTime+0x3c>)
 800956a:	f04f 32ff 	mov.w	r2, #4294967295
 800956e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009570:	e008      	b.n	8009584 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009572:	4b07      	ldr	r3, [pc, #28]	@ (8009590 <prvResetNextTaskUnblockTime+0x38>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	68db      	ldr	r3, [r3, #12]
 8009578:	68db      	ldr	r3, [r3, #12]
 800957a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	4a04      	ldr	r2, [pc, #16]	@ (8009594 <prvResetNextTaskUnblockTime+0x3c>)
 8009582:	6013      	str	r3, [r2, #0]
}
 8009584:	bf00      	nop
 8009586:	370c      	adds	r7, #12
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr
 8009590:	20000f14 	.word	0x20000f14
 8009594:	20000f7c 	.word	0x20000f7c

08009598 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009598:	b480      	push	{r7}
 800959a:	b083      	sub	sp, #12
 800959c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800959e:	4b0b      	ldr	r3, [pc, #44]	@ (80095cc <xTaskGetSchedulerState+0x34>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d102      	bne.n	80095ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80095a6:	2301      	movs	r3, #1
 80095a8:	607b      	str	r3, [r7, #4]
 80095aa:	e008      	b.n	80095be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095ac:	4b08      	ldr	r3, [pc, #32]	@ (80095d0 <xTaskGetSchedulerState+0x38>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d102      	bne.n	80095ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80095b4:	2302      	movs	r3, #2
 80095b6:	607b      	str	r3, [r7, #4]
 80095b8:	e001      	b.n	80095be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80095ba:	2300      	movs	r3, #0
 80095bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80095be:	687b      	ldr	r3, [r7, #4]
	}
 80095c0:	4618      	mov	r0, r3
 80095c2:	370c      	adds	r7, #12
 80095c4:	46bd      	mov	sp, r7
 80095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ca:	4770      	bx	lr
 80095cc:	20000f68 	.word	0x20000f68
 80095d0:	20000f84 	.word	0x20000f84

080095d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b086      	sub	sp, #24
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80095e0:	2300      	movs	r3, #0
 80095e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d058      	beq.n	800969c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80095ea:	4b2f      	ldr	r3, [pc, #188]	@ (80096a8 <xTaskPriorityDisinherit+0xd4>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	693a      	ldr	r2, [r7, #16]
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d00b      	beq.n	800960c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80095f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095f8:	f383 8811 	msr	BASEPRI, r3
 80095fc:	f3bf 8f6f 	isb	sy
 8009600:	f3bf 8f4f 	dsb	sy
 8009604:	60fb      	str	r3, [r7, #12]
}
 8009606:	bf00      	nop
 8009608:	bf00      	nop
 800960a:	e7fd      	b.n	8009608 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009610:	2b00      	cmp	r3, #0
 8009612:	d10b      	bne.n	800962c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009618:	f383 8811 	msr	BASEPRI, r3
 800961c:	f3bf 8f6f 	isb	sy
 8009620:	f3bf 8f4f 	dsb	sy
 8009624:	60bb      	str	r3, [r7, #8]
}
 8009626:	bf00      	nop
 8009628:	bf00      	nop
 800962a:	e7fd      	b.n	8009628 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009630:	1e5a      	subs	r2, r3, #1
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800963e:	429a      	cmp	r2, r3
 8009640:	d02c      	beq.n	800969c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009646:	2b00      	cmp	r3, #0
 8009648:	d128      	bne.n	800969c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	3304      	adds	r3, #4
 800964e:	4618      	mov	r0, r3
 8009650:	f7fe fc26 	bl	8007ea0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009660:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800966c:	4b0f      	ldr	r3, [pc, #60]	@ (80096ac <xTaskPriorityDisinherit+0xd8>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	429a      	cmp	r2, r3
 8009672:	d903      	bls.n	800967c <xTaskPriorityDisinherit+0xa8>
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009678:	4a0c      	ldr	r2, [pc, #48]	@ (80096ac <xTaskPriorityDisinherit+0xd8>)
 800967a:	6013      	str	r3, [r2, #0]
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009680:	4613      	mov	r3, r2
 8009682:	009b      	lsls	r3, r3, #2
 8009684:	4413      	add	r3, r2
 8009686:	009b      	lsls	r3, r3, #2
 8009688:	4a09      	ldr	r2, [pc, #36]	@ (80096b0 <xTaskPriorityDisinherit+0xdc>)
 800968a:	441a      	add	r2, r3
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	3304      	adds	r3, #4
 8009690:	4619      	mov	r1, r3
 8009692:	4610      	mov	r0, r2
 8009694:	f7fe fba7 	bl	8007de6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009698:	2301      	movs	r3, #1
 800969a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800969c:	697b      	ldr	r3, [r7, #20]
	}
 800969e:	4618      	mov	r0, r3
 80096a0:	3718      	adds	r7, #24
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	bf00      	nop
 80096a8:	20000a88 	.word	0x20000a88
 80096ac:	20000f64 	.word	0x20000f64
 80096b0:	20000a8c 	.word	0x20000a8c

080096b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b084      	sub	sp, #16
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80096be:	4b21      	ldr	r3, [pc, #132]	@ (8009744 <prvAddCurrentTaskToDelayedList+0x90>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096c4:	4b20      	ldr	r3, [pc, #128]	@ (8009748 <prvAddCurrentTaskToDelayedList+0x94>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	3304      	adds	r3, #4
 80096ca:	4618      	mov	r0, r3
 80096cc:	f7fe fbe8 	bl	8007ea0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096d6:	d10a      	bne.n	80096ee <prvAddCurrentTaskToDelayedList+0x3a>
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d007      	beq.n	80096ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096de:	4b1a      	ldr	r3, [pc, #104]	@ (8009748 <prvAddCurrentTaskToDelayedList+0x94>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	3304      	adds	r3, #4
 80096e4:	4619      	mov	r1, r3
 80096e6:	4819      	ldr	r0, [pc, #100]	@ (800974c <prvAddCurrentTaskToDelayedList+0x98>)
 80096e8:	f7fe fb7d 	bl	8007de6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80096ec:	e026      	b.n	800973c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80096ee:	68fa      	ldr	r2, [r7, #12]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	4413      	add	r3, r2
 80096f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80096f6:	4b14      	ldr	r3, [pc, #80]	@ (8009748 <prvAddCurrentTaskToDelayedList+0x94>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	68ba      	ldr	r2, [r7, #8]
 80096fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80096fe:	68ba      	ldr	r2, [r7, #8]
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	429a      	cmp	r2, r3
 8009704:	d209      	bcs.n	800971a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009706:	4b12      	ldr	r3, [pc, #72]	@ (8009750 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009708:	681a      	ldr	r2, [r3, #0]
 800970a:	4b0f      	ldr	r3, [pc, #60]	@ (8009748 <prvAddCurrentTaskToDelayedList+0x94>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	3304      	adds	r3, #4
 8009710:	4619      	mov	r1, r3
 8009712:	4610      	mov	r0, r2
 8009714:	f7fe fb8b 	bl	8007e2e <vListInsert>
}
 8009718:	e010      	b.n	800973c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800971a:	4b0e      	ldr	r3, [pc, #56]	@ (8009754 <prvAddCurrentTaskToDelayedList+0xa0>)
 800971c:	681a      	ldr	r2, [r3, #0]
 800971e:	4b0a      	ldr	r3, [pc, #40]	@ (8009748 <prvAddCurrentTaskToDelayedList+0x94>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	3304      	adds	r3, #4
 8009724:	4619      	mov	r1, r3
 8009726:	4610      	mov	r0, r2
 8009728:	f7fe fb81 	bl	8007e2e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800972c:	4b0a      	ldr	r3, [pc, #40]	@ (8009758 <prvAddCurrentTaskToDelayedList+0xa4>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	68ba      	ldr	r2, [r7, #8]
 8009732:	429a      	cmp	r2, r3
 8009734:	d202      	bcs.n	800973c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009736:	4a08      	ldr	r2, [pc, #32]	@ (8009758 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	6013      	str	r3, [r2, #0]
}
 800973c:	bf00      	nop
 800973e:	3710      	adds	r7, #16
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}
 8009744:	20000f60 	.word	0x20000f60
 8009748:	20000a88 	.word	0x20000a88
 800974c:	20000f48 	.word	0x20000f48
 8009750:	20000f18 	.word	0x20000f18
 8009754:	20000f14 	.word	0x20000f14
 8009758:	20000f7c 	.word	0x20000f7c

0800975c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b08a      	sub	sp, #40	@ 0x28
 8009760:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009762:	2300      	movs	r3, #0
 8009764:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009766:	f000 fb13 	bl	8009d90 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800976a:	4b1d      	ldr	r3, [pc, #116]	@ (80097e0 <xTimerCreateTimerTask+0x84>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d021      	beq.n	80097b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009772:	2300      	movs	r3, #0
 8009774:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009776:	2300      	movs	r3, #0
 8009778:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800977a:	1d3a      	adds	r2, r7, #4
 800977c:	f107 0108 	add.w	r1, r7, #8
 8009780:	f107 030c 	add.w	r3, r7, #12
 8009784:	4618      	mov	r0, r3
 8009786:	f7fe fae7 	bl	8007d58 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800978a:	6879      	ldr	r1, [r7, #4]
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	68fa      	ldr	r2, [r7, #12]
 8009790:	9202      	str	r2, [sp, #8]
 8009792:	9301      	str	r3, [sp, #4]
 8009794:	2302      	movs	r3, #2
 8009796:	9300      	str	r3, [sp, #0]
 8009798:	2300      	movs	r3, #0
 800979a:	460a      	mov	r2, r1
 800979c:	4911      	ldr	r1, [pc, #68]	@ (80097e4 <xTimerCreateTimerTask+0x88>)
 800979e:	4812      	ldr	r0, [pc, #72]	@ (80097e8 <xTimerCreateTimerTask+0x8c>)
 80097a0:	f7ff f8a2 	bl	80088e8 <xTaskCreateStatic>
 80097a4:	4603      	mov	r3, r0
 80097a6:	4a11      	ldr	r2, [pc, #68]	@ (80097ec <xTimerCreateTimerTask+0x90>)
 80097a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80097aa:	4b10      	ldr	r3, [pc, #64]	@ (80097ec <xTimerCreateTimerTask+0x90>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d001      	beq.n	80097b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80097b2:	2301      	movs	r3, #1
 80097b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d10b      	bne.n	80097d4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80097bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097c0:	f383 8811 	msr	BASEPRI, r3
 80097c4:	f3bf 8f6f 	isb	sy
 80097c8:	f3bf 8f4f 	dsb	sy
 80097cc:	613b      	str	r3, [r7, #16]
}
 80097ce:	bf00      	nop
 80097d0:	bf00      	nop
 80097d2:	e7fd      	b.n	80097d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80097d4:	697b      	ldr	r3, [r7, #20]
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3718      	adds	r7, #24
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop
 80097e0:	20000fb8 	.word	0x20000fb8
 80097e4:	0800a8d4 	.word	0x0800a8d4
 80097e8:	08009929 	.word	0x08009929
 80097ec:	20000fbc 	.word	0x20000fbc

080097f0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b08a      	sub	sp, #40	@ 0x28
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	60f8      	str	r0, [r7, #12]
 80097f8:	60b9      	str	r1, [r7, #8]
 80097fa:	607a      	str	r2, [r7, #4]
 80097fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80097fe:	2300      	movs	r3, #0
 8009800:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d10b      	bne.n	8009820 <xTimerGenericCommand+0x30>
	__asm volatile
 8009808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800980c:	f383 8811 	msr	BASEPRI, r3
 8009810:	f3bf 8f6f 	isb	sy
 8009814:	f3bf 8f4f 	dsb	sy
 8009818:	623b      	str	r3, [r7, #32]
}
 800981a:	bf00      	nop
 800981c:	bf00      	nop
 800981e:	e7fd      	b.n	800981c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009820:	4b19      	ldr	r3, [pc, #100]	@ (8009888 <xTimerGenericCommand+0x98>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d02a      	beq.n	800987e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	2b05      	cmp	r3, #5
 8009838:	dc18      	bgt.n	800986c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800983a:	f7ff fead 	bl	8009598 <xTaskGetSchedulerState>
 800983e:	4603      	mov	r3, r0
 8009840:	2b02      	cmp	r3, #2
 8009842:	d109      	bne.n	8009858 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009844:	4b10      	ldr	r3, [pc, #64]	@ (8009888 <xTimerGenericCommand+0x98>)
 8009846:	6818      	ldr	r0, [r3, #0]
 8009848:	f107 0110 	add.w	r1, r7, #16
 800984c:	2300      	movs	r3, #0
 800984e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009850:	f7fe fc5a 	bl	8008108 <xQueueGenericSend>
 8009854:	6278      	str	r0, [r7, #36]	@ 0x24
 8009856:	e012      	b.n	800987e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009858:	4b0b      	ldr	r3, [pc, #44]	@ (8009888 <xTimerGenericCommand+0x98>)
 800985a:	6818      	ldr	r0, [r3, #0]
 800985c:	f107 0110 	add.w	r1, r7, #16
 8009860:	2300      	movs	r3, #0
 8009862:	2200      	movs	r2, #0
 8009864:	f7fe fc50 	bl	8008108 <xQueueGenericSend>
 8009868:	6278      	str	r0, [r7, #36]	@ 0x24
 800986a:	e008      	b.n	800987e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800986c:	4b06      	ldr	r3, [pc, #24]	@ (8009888 <xTimerGenericCommand+0x98>)
 800986e:	6818      	ldr	r0, [r3, #0]
 8009870:	f107 0110 	add.w	r1, r7, #16
 8009874:	2300      	movs	r3, #0
 8009876:	683a      	ldr	r2, [r7, #0]
 8009878:	f7fe fd48 	bl	800830c <xQueueGenericSendFromISR>
 800987c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800987e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009880:	4618      	mov	r0, r3
 8009882:	3728      	adds	r7, #40	@ 0x28
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}
 8009888:	20000fb8 	.word	0x20000fb8

0800988c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b088      	sub	sp, #32
 8009890:	af02      	add	r7, sp, #8
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009896:	4b23      	ldr	r3, [pc, #140]	@ (8009924 <prvProcessExpiredTimer+0x98>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	68db      	ldr	r3, [r3, #12]
 800989c:	68db      	ldr	r3, [r3, #12]
 800989e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	3304      	adds	r3, #4
 80098a4:	4618      	mov	r0, r3
 80098a6:	f7fe fafb 	bl	8007ea0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80098b0:	f003 0304 	and.w	r3, r3, #4
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d023      	beq.n	8009900 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	699a      	ldr	r2, [r3, #24]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	18d1      	adds	r1, r2, r3
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	683a      	ldr	r2, [r7, #0]
 80098c4:	6978      	ldr	r0, [r7, #20]
 80098c6:	f000 f8d5 	bl	8009a74 <prvInsertTimerInActiveList>
 80098ca:	4603      	mov	r3, r0
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d020      	beq.n	8009912 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80098d0:	2300      	movs	r3, #0
 80098d2:	9300      	str	r3, [sp, #0]
 80098d4:	2300      	movs	r3, #0
 80098d6:	687a      	ldr	r2, [r7, #4]
 80098d8:	2100      	movs	r1, #0
 80098da:	6978      	ldr	r0, [r7, #20]
 80098dc:	f7ff ff88 	bl	80097f0 <xTimerGenericCommand>
 80098e0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d114      	bne.n	8009912 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80098e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098ec:	f383 8811 	msr	BASEPRI, r3
 80098f0:	f3bf 8f6f 	isb	sy
 80098f4:	f3bf 8f4f 	dsb	sy
 80098f8:	60fb      	str	r3, [r7, #12]
}
 80098fa:	bf00      	nop
 80098fc:	bf00      	nop
 80098fe:	e7fd      	b.n	80098fc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009906:	f023 0301 	bic.w	r3, r3, #1
 800990a:	b2da      	uxtb	r2, r3
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	6a1b      	ldr	r3, [r3, #32]
 8009916:	6978      	ldr	r0, [r7, #20]
 8009918:	4798      	blx	r3
}
 800991a:	bf00      	nop
 800991c:	3718      	adds	r7, #24
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}
 8009922:	bf00      	nop
 8009924:	20000fb0 	.word	0x20000fb0

08009928 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b084      	sub	sp, #16
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009930:	f107 0308 	add.w	r3, r7, #8
 8009934:	4618      	mov	r0, r3
 8009936:	f000 f859 	bl	80099ec <prvGetNextExpireTime>
 800993a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	4619      	mov	r1, r3
 8009940:	68f8      	ldr	r0, [r7, #12]
 8009942:	f000 f805 	bl	8009950 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009946:	f000 f8d7 	bl	8009af8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800994a:	bf00      	nop
 800994c:	e7f0      	b.n	8009930 <prvTimerTask+0x8>
	...

08009950 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b084      	sub	sp, #16
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
 8009958:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800995a:	f7ff fa29 	bl	8008db0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800995e:	f107 0308 	add.w	r3, r7, #8
 8009962:	4618      	mov	r0, r3
 8009964:	f000 f866 	bl	8009a34 <prvSampleTimeNow>
 8009968:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d130      	bne.n	80099d2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d10a      	bne.n	800998c <prvProcessTimerOrBlockTask+0x3c>
 8009976:	687a      	ldr	r2, [r7, #4]
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	429a      	cmp	r2, r3
 800997c:	d806      	bhi.n	800998c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800997e:	f7ff fa25 	bl	8008dcc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009982:	68f9      	ldr	r1, [r7, #12]
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f7ff ff81 	bl	800988c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800998a:	e024      	b.n	80099d6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d008      	beq.n	80099a4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009992:	4b13      	ldr	r3, [pc, #76]	@ (80099e0 <prvProcessTimerOrBlockTask+0x90>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d101      	bne.n	80099a0 <prvProcessTimerOrBlockTask+0x50>
 800999c:	2301      	movs	r3, #1
 800999e:	e000      	b.n	80099a2 <prvProcessTimerOrBlockTask+0x52>
 80099a0:	2300      	movs	r3, #0
 80099a2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80099a4:	4b0f      	ldr	r3, [pc, #60]	@ (80099e4 <prvProcessTimerOrBlockTask+0x94>)
 80099a6:	6818      	ldr	r0, [r3, #0]
 80099a8:	687a      	ldr	r2, [r7, #4]
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	1ad3      	subs	r3, r2, r3
 80099ae:	683a      	ldr	r2, [r7, #0]
 80099b0:	4619      	mov	r1, r3
 80099b2:	f7fe ff65 	bl	8008880 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80099b6:	f7ff fa09 	bl	8008dcc <xTaskResumeAll>
 80099ba:	4603      	mov	r3, r0
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d10a      	bne.n	80099d6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80099c0:	4b09      	ldr	r3, [pc, #36]	@ (80099e8 <prvProcessTimerOrBlockTask+0x98>)
 80099c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099c6:	601a      	str	r2, [r3, #0]
 80099c8:	f3bf 8f4f 	dsb	sy
 80099cc:	f3bf 8f6f 	isb	sy
}
 80099d0:	e001      	b.n	80099d6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80099d2:	f7ff f9fb 	bl	8008dcc <xTaskResumeAll>
}
 80099d6:	bf00      	nop
 80099d8:	3710      	adds	r7, #16
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
 80099de:	bf00      	nop
 80099e0:	20000fb4 	.word	0x20000fb4
 80099e4:	20000fb8 	.word	0x20000fb8
 80099e8:	e000ed04 	.word	0xe000ed04

080099ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80099ec:	b480      	push	{r7}
 80099ee:	b085      	sub	sp, #20
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80099f4:	4b0e      	ldr	r3, [pc, #56]	@ (8009a30 <prvGetNextExpireTime+0x44>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d101      	bne.n	8009a02 <prvGetNextExpireTime+0x16>
 80099fe:	2201      	movs	r2, #1
 8009a00:	e000      	b.n	8009a04 <prvGetNextExpireTime+0x18>
 8009a02:	2200      	movs	r2, #0
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d105      	bne.n	8009a1c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a10:	4b07      	ldr	r3, [pc, #28]	@ (8009a30 <prvGetNextExpireTime+0x44>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	68db      	ldr	r3, [r3, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	60fb      	str	r3, [r7, #12]
 8009a1a:	e001      	b.n	8009a20 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009a20:	68fb      	ldr	r3, [r7, #12]
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3714      	adds	r7, #20
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr
 8009a2e:	bf00      	nop
 8009a30:	20000fb0 	.word	0x20000fb0

08009a34 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b084      	sub	sp, #16
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009a3c:	f7ff fa64 	bl	8008f08 <xTaskGetTickCount>
 8009a40:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009a42:	4b0b      	ldr	r3, [pc, #44]	@ (8009a70 <prvSampleTimeNow+0x3c>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	68fa      	ldr	r2, [r7, #12]
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	d205      	bcs.n	8009a58 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009a4c:	f000 f93a 	bl	8009cc4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2201      	movs	r2, #1
 8009a54:	601a      	str	r2, [r3, #0]
 8009a56:	e002      	b.n	8009a5e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009a5e:	4a04      	ldr	r2, [pc, #16]	@ (8009a70 <prvSampleTimeNow+0x3c>)
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009a64:	68fb      	ldr	r3, [r7, #12]
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3710      	adds	r7, #16
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
 8009a6e:	bf00      	nop
 8009a70:	20000fc0 	.word	0x20000fc0

08009a74 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b086      	sub	sp, #24
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	60f8      	str	r0, [r7, #12]
 8009a7c:	60b9      	str	r1, [r7, #8]
 8009a7e:	607a      	str	r2, [r7, #4]
 8009a80:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009a82:	2300      	movs	r3, #0
 8009a84:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	68ba      	ldr	r2, [r7, #8]
 8009a8a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	68fa      	ldr	r2, [r7, #12]
 8009a90:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009a92:	68ba      	ldr	r2, [r7, #8]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	429a      	cmp	r2, r3
 8009a98:	d812      	bhi.n	8009ac0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a9a:	687a      	ldr	r2, [r7, #4]
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	1ad2      	subs	r2, r2, r3
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	699b      	ldr	r3, [r3, #24]
 8009aa4:	429a      	cmp	r2, r3
 8009aa6:	d302      	bcc.n	8009aae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	617b      	str	r3, [r7, #20]
 8009aac:	e01b      	b.n	8009ae6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009aae:	4b10      	ldr	r3, [pc, #64]	@ (8009af0 <prvInsertTimerInActiveList+0x7c>)
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	3304      	adds	r3, #4
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	4610      	mov	r0, r2
 8009aba:	f7fe f9b8 	bl	8007e2e <vListInsert>
 8009abe:	e012      	b.n	8009ae6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009ac0:	687a      	ldr	r2, [r7, #4]
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	429a      	cmp	r2, r3
 8009ac6:	d206      	bcs.n	8009ad6 <prvInsertTimerInActiveList+0x62>
 8009ac8:	68ba      	ldr	r2, [r7, #8]
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d302      	bcc.n	8009ad6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	617b      	str	r3, [r7, #20]
 8009ad4:	e007      	b.n	8009ae6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009ad6:	4b07      	ldr	r3, [pc, #28]	@ (8009af4 <prvInsertTimerInActiveList+0x80>)
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	3304      	adds	r3, #4
 8009ade:	4619      	mov	r1, r3
 8009ae0:	4610      	mov	r0, r2
 8009ae2:	f7fe f9a4 	bl	8007e2e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009ae6:	697b      	ldr	r3, [r7, #20]
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3718      	adds	r7, #24
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}
 8009af0:	20000fb4 	.word	0x20000fb4
 8009af4:	20000fb0 	.word	0x20000fb0

08009af8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b08e      	sub	sp, #56	@ 0x38
 8009afc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009afe:	e0ce      	b.n	8009c9e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	da19      	bge.n	8009b3a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009b06:	1d3b      	adds	r3, r7, #4
 8009b08:	3304      	adds	r3, #4
 8009b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d10b      	bne.n	8009b2a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b16:	f383 8811 	msr	BASEPRI, r3
 8009b1a:	f3bf 8f6f 	isb	sy
 8009b1e:	f3bf 8f4f 	dsb	sy
 8009b22:	61fb      	str	r3, [r7, #28]
}
 8009b24:	bf00      	nop
 8009b26:	bf00      	nop
 8009b28:	e7fd      	b.n	8009b26 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009b2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b30:	6850      	ldr	r0, [r2, #4]
 8009b32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b34:	6892      	ldr	r2, [r2, #8]
 8009b36:	4611      	mov	r1, r2
 8009b38:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	f2c0 80ae 	blt.w	8009c9e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b48:	695b      	ldr	r3, [r3, #20]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d004      	beq.n	8009b58 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b50:	3304      	adds	r3, #4
 8009b52:	4618      	mov	r0, r3
 8009b54:	f7fe f9a4 	bl	8007ea0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009b58:	463b      	mov	r3, r7
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f7ff ff6a 	bl	8009a34 <prvSampleTimeNow>
 8009b60:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2b09      	cmp	r3, #9
 8009b66:	f200 8097 	bhi.w	8009c98 <prvProcessReceivedCommands+0x1a0>
 8009b6a:	a201      	add	r2, pc, #4	@ (adr r2, 8009b70 <prvProcessReceivedCommands+0x78>)
 8009b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b70:	08009b99 	.word	0x08009b99
 8009b74:	08009b99 	.word	0x08009b99
 8009b78:	08009b99 	.word	0x08009b99
 8009b7c:	08009c0f 	.word	0x08009c0f
 8009b80:	08009c23 	.word	0x08009c23
 8009b84:	08009c6f 	.word	0x08009c6f
 8009b88:	08009b99 	.word	0x08009b99
 8009b8c:	08009b99 	.word	0x08009b99
 8009b90:	08009c0f 	.word	0x08009c0f
 8009b94:	08009c23 	.word	0x08009c23
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b9a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b9e:	f043 0301 	orr.w	r3, r3, #1
 8009ba2:	b2da      	uxtb	r2, r3
 8009ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ba6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009baa:	68ba      	ldr	r2, [r7, #8]
 8009bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bae:	699b      	ldr	r3, [r3, #24]
 8009bb0:	18d1      	adds	r1, r2, r3
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009bb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009bb8:	f7ff ff5c 	bl	8009a74 <prvInsertTimerInActiveList>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d06c      	beq.n	8009c9c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bc4:	6a1b      	ldr	r3, [r3, #32]
 8009bc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009bc8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bcc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009bd0:	f003 0304 	and.w	r3, r3, #4
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d061      	beq.n	8009c9c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009bd8:	68ba      	ldr	r2, [r7, #8]
 8009bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bdc:	699b      	ldr	r3, [r3, #24]
 8009bde:	441a      	add	r2, r3
 8009be0:	2300      	movs	r3, #0
 8009be2:	9300      	str	r3, [sp, #0]
 8009be4:	2300      	movs	r3, #0
 8009be6:	2100      	movs	r1, #0
 8009be8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009bea:	f7ff fe01 	bl	80097f0 <xTimerGenericCommand>
 8009bee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009bf0:	6a3b      	ldr	r3, [r7, #32]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d152      	bne.n	8009c9c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bfa:	f383 8811 	msr	BASEPRI, r3
 8009bfe:	f3bf 8f6f 	isb	sy
 8009c02:	f3bf 8f4f 	dsb	sy
 8009c06:	61bb      	str	r3, [r7, #24]
}
 8009c08:	bf00      	nop
 8009c0a:	bf00      	nop
 8009c0c:	e7fd      	b.n	8009c0a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c14:	f023 0301 	bic.w	r3, r3, #1
 8009c18:	b2da      	uxtb	r2, r3
 8009c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c1c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009c20:	e03d      	b.n	8009c9e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c28:	f043 0301 	orr.w	r3, r3, #1
 8009c2c:	b2da      	uxtb	r2, r3
 8009c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c30:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009c34:	68ba      	ldr	r2, [r7, #8]
 8009c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c38:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c3c:	699b      	ldr	r3, [r3, #24]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d10b      	bne.n	8009c5a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c46:	f383 8811 	msr	BASEPRI, r3
 8009c4a:	f3bf 8f6f 	isb	sy
 8009c4e:	f3bf 8f4f 	dsb	sy
 8009c52:	617b      	str	r3, [r7, #20]
}
 8009c54:	bf00      	nop
 8009c56:	bf00      	nop
 8009c58:	e7fd      	b.n	8009c56 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c5c:	699a      	ldr	r2, [r3, #24]
 8009c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c60:	18d1      	adds	r1, r2, r3
 8009c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c68:	f7ff ff04 	bl	8009a74 <prvInsertTimerInActiveList>
					break;
 8009c6c:	e017      	b.n	8009c9e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c74:	f003 0302 	and.w	r3, r3, #2
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d103      	bne.n	8009c84 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009c7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c7e:	f000 fbeb 	bl	800a458 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009c82:	e00c      	b.n	8009c9e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c86:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c8a:	f023 0301 	bic.w	r3, r3, #1
 8009c8e:	b2da      	uxtb	r2, r3
 8009c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c92:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009c96:	e002      	b.n	8009c9e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009c98:	bf00      	nop
 8009c9a:	e000      	b.n	8009c9e <prvProcessReceivedCommands+0x1a6>
					break;
 8009c9c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009c9e:	4b08      	ldr	r3, [pc, #32]	@ (8009cc0 <prvProcessReceivedCommands+0x1c8>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	1d39      	adds	r1, r7, #4
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f7fe fbce 	bl	8008448 <xQueueReceive>
 8009cac:	4603      	mov	r3, r0
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	f47f af26 	bne.w	8009b00 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009cb4:	bf00      	nop
 8009cb6:	bf00      	nop
 8009cb8:	3730      	adds	r7, #48	@ 0x30
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}
 8009cbe:	bf00      	nop
 8009cc0:	20000fb8 	.word	0x20000fb8

08009cc4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b088      	sub	sp, #32
 8009cc8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009cca:	e049      	b.n	8009d60 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ccc:	4b2e      	ldr	r3, [pc, #184]	@ (8009d88 <prvSwitchTimerLists+0xc4>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	68db      	ldr	r3, [r3, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cd6:	4b2c      	ldr	r3, [pc, #176]	@ (8009d88 <prvSwitchTimerLists+0xc4>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	68db      	ldr	r3, [r3, #12]
 8009cdc:	68db      	ldr	r3, [r3, #12]
 8009cde:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	3304      	adds	r3, #4
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f7fe f8db 	bl	8007ea0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	6a1b      	ldr	r3, [r3, #32]
 8009cee:	68f8      	ldr	r0, [r7, #12]
 8009cf0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009cf8:	f003 0304 	and.w	r3, r3, #4
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d02f      	beq.n	8009d60 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	699b      	ldr	r3, [r3, #24]
 8009d04:	693a      	ldr	r2, [r7, #16]
 8009d06:	4413      	add	r3, r2
 8009d08:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009d0a:	68ba      	ldr	r2, [r7, #8]
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	429a      	cmp	r2, r3
 8009d10:	d90e      	bls.n	8009d30 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	68ba      	ldr	r2, [r7, #8]
 8009d16:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	68fa      	ldr	r2, [r7, #12]
 8009d1c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8009d88 <prvSwitchTimerLists+0xc4>)
 8009d20:	681a      	ldr	r2, [r3, #0]
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	3304      	adds	r3, #4
 8009d26:	4619      	mov	r1, r3
 8009d28:	4610      	mov	r0, r2
 8009d2a:	f7fe f880 	bl	8007e2e <vListInsert>
 8009d2e:	e017      	b.n	8009d60 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009d30:	2300      	movs	r3, #0
 8009d32:	9300      	str	r3, [sp, #0]
 8009d34:	2300      	movs	r3, #0
 8009d36:	693a      	ldr	r2, [r7, #16]
 8009d38:	2100      	movs	r1, #0
 8009d3a:	68f8      	ldr	r0, [r7, #12]
 8009d3c:	f7ff fd58 	bl	80097f0 <xTimerGenericCommand>
 8009d40:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d10b      	bne.n	8009d60 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d4c:	f383 8811 	msr	BASEPRI, r3
 8009d50:	f3bf 8f6f 	isb	sy
 8009d54:	f3bf 8f4f 	dsb	sy
 8009d58:	603b      	str	r3, [r7, #0]
}
 8009d5a:	bf00      	nop
 8009d5c:	bf00      	nop
 8009d5e:	e7fd      	b.n	8009d5c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009d60:	4b09      	ldr	r3, [pc, #36]	@ (8009d88 <prvSwitchTimerLists+0xc4>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d1b0      	bne.n	8009ccc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009d6a:	4b07      	ldr	r3, [pc, #28]	@ (8009d88 <prvSwitchTimerLists+0xc4>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009d70:	4b06      	ldr	r3, [pc, #24]	@ (8009d8c <prvSwitchTimerLists+0xc8>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4a04      	ldr	r2, [pc, #16]	@ (8009d88 <prvSwitchTimerLists+0xc4>)
 8009d76:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009d78:	4a04      	ldr	r2, [pc, #16]	@ (8009d8c <prvSwitchTimerLists+0xc8>)
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	6013      	str	r3, [r2, #0]
}
 8009d7e:	bf00      	nop
 8009d80:	3718      	adds	r7, #24
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}
 8009d86:	bf00      	nop
 8009d88:	20000fb0 	.word	0x20000fb0
 8009d8c:	20000fb4 	.word	0x20000fb4

08009d90 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b082      	sub	sp, #8
 8009d94:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009d96:	f000 f96f 	bl	800a078 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009d9a:	4b15      	ldr	r3, [pc, #84]	@ (8009df0 <prvCheckForValidListAndQueue+0x60>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d120      	bne.n	8009de4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009da2:	4814      	ldr	r0, [pc, #80]	@ (8009df4 <prvCheckForValidListAndQueue+0x64>)
 8009da4:	f7fd fff2 	bl	8007d8c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009da8:	4813      	ldr	r0, [pc, #76]	@ (8009df8 <prvCheckForValidListAndQueue+0x68>)
 8009daa:	f7fd ffef 	bl	8007d8c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009dae:	4b13      	ldr	r3, [pc, #76]	@ (8009dfc <prvCheckForValidListAndQueue+0x6c>)
 8009db0:	4a10      	ldr	r2, [pc, #64]	@ (8009df4 <prvCheckForValidListAndQueue+0x64>)
 8009db2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009db4:	4b12      	ldr	r3, [pc, #72]	@ (8009e00 <prvCheckForValidListAndQueue+0x70>)
 8009db6:	4a10      	ldr	r2, [pc, #64]	@ (8009df8 <prvCheckForValidListAndQueue+0x68>)
 8009db8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009dba:	2300      	movs	r3, #0
 8009dbc:	9300      	str	r3, [sp, #0]
 8009dbe:	4b11      	ldr	r3, [pc, #68]	@ (8009e04 <prvCheckForValidListAndQueue+0x74>)
 8009dc0:	4a11      	ldr	r2, [pc, #68]	@ (8009e08 <prvCheckForValidListAndQueue+0x78>)
 8009dc2:	2110      	movs	r1, #16
 8009dc4:	200a      	movs	r0, #10
 8009dc6:	f7fe f8ff 	bl	8007fc8 <xQueueGenericCreateStatic>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	4a08      	ldr	r2, [pc, #32]	@ (8009df0 <prvCheckForValidListAndQueue+0x60>)
 8009dce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009dd0:	4b07      	ldr	r3, [pc, #28]	@ (8009df0 <prvCheckForValidListAndQueue+0x60>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d005      	beq.n	8009de4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009dd8:	4b05      	ldr	r3, [pc, #20]	@ (8009df0 <prvCheckForValidListAndQueue+0x60>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	490b      	ldr	r1, [pc, #44]	@ (8009e0c <prvCheckForValidListAndQueue+0x7c>)
 8009dde:	4618      	mov	r0, r3
 8009de0:	f7fe fd24 	bl	800882c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009de4:	f000 f97a 	bl	800a0dc <vPortExitCritical>
}
 8009de8:	bf00      	nop
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}
 8009dee:	bf00      	nop
 8009df0:	20000fb8 	.word	0x20000fb8
 8009df4:	20000f88 	.word	0x20000f88
 8009df8:	20000f9c 	.word	0x20000f9c
 8009dfc:	20000fb0 	.word	0x20000fb0
 8009e00:	20000fb4 	.word	0x20000fb4
 8009e04:	20001064 	.word	0x20001064
 8009e08:	20000fc4 	.word	0x20000fc4
 8009e0c:	0800a8dc 	.word	0x0800a8dc

08009e10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009e10:	b480      	push	{r7}
 8009e12:	b085      	sub	sp, #20
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	60f8      	str	r0, [r7, #12]
 8009e18:	60b9      	str	r1, [r7, #8]
 8009e1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	3b04      	subs	r3, #4
 8009e20:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009e28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	3b04      	subs	r3, #4
 8009e2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	f023 0201 	bic.w	r2, r3, #1
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	3b04      	subs	r3, #4
 8009e3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009e40:	4a0c      	ldr	r2, [pc, #48]	@ (8009e74 <pxPortInitialiseStack+0x64>)
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	3b14      	subs	r3, #20
 8009e4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009e4c:	687a      	ldr	r2, [r7, #4]
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	3b04      	subs	r3, #4
 8009e56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f06f 0202 	mvn.w	r2, #2
 8009e5e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	3b20      	subs	r3, #32
 8009e64:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009e66:	68fb      	ldr	r3, [r7, #12]
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3714      	adds	r7, #20
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e72:	4770      	bx	lr
 8009e74:	08009e79 	.word	0x08009e79

08009e78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b085      	sub	sp, #20
 8009e7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009e82:	4b13      	ldr	r3, [pc, #76]	@ (8009ed0 <prvTaskExitError+0x58>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e8a:	d00b      	beq.n	8009ea4 <prvTaskExitError+0x2c>
	__asm volatile
 8009e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e90:	f383 8811 	msr	BASEPRI, r3
 8009e94:	f3bf 8f6f 	isb	sy
 8009e98:	f3bf 8f4f 	dsb	sy
 8009e9c:	60fb      	str	r3, [r7, #12]
}
 8009e9e:	bf00      	nop
 8009ea0:	bf00      	nop
 8009ea2:	e7fd      	b.n	8009ea0 <prvTaskExitError+0x28>
	__asm volatile
 8009ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ea8:	f383 8811 	msr	BASEPRI, r3
 8009eac:	f3bf 8f6f 	isb	sy
 8009eb0:	f3bf 8f4f 	dsb	sy
 8009eb4:	60bb      	str	r3, [r7, #8]
}
 8009eb6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009eb8:	bf00      	nop
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d0fc      	beq.n	8009eba <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009ec0:	bf00      	nop
 8009ec2:	bf00      	nop
 8009ec4:	3714      	adds	r7, #20
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ecc:	4770      	bx	lr
 8009ece:	bf00      	nop
 8009ed0:	2000000c 	.word	0x2000000c
	...

08009ee0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009ee0:	4b07      	ldr	r3, [pc, #28]	@ (8009f00 <pxCurrentTCBConst2>)
 8009ee2:	6819      	ldr	r1, [r3, #0]
 8009ee4:	6808      	ldr	r0, [r1, #0]
 8009ee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eea:	f380 8809 	msr	PSP, r0
 8009eee:	f3bf 8f6f 	isb	sy
 8009ef2:	f04f 0000 	mov.w	r0, #0
 8009ef6:	f380 8811 	msr	BASEPRI, r0
 8009efa:	4770      	bx	lr
 8009efc:	f3af 8000 	nop.w

08009f00 <pxCurrentTCBConst2>:
 8009f00:	20000a88 	.word	0x20000a88
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009f04:	bf00      	nop
 8009f06:	bf00      	nop

08009f08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009f08:	4808      	ldr	r0, [pc, #32]	@ (8009f2c <prvPortStartFirstTask+0x24>)
 8009f0a:	6800      	ldr	r0, [r0, #0]
 8009f0c:	6800      	ldr	r0, [r0, #0]
 8009f0e:	f380 8808 	msr	MSP, r0
 8009f12:	f04f 0000 	mov.w	r0, #0
 8009f16:	f380 8814 	msr	CONTROL, r0
 8009f1a:	b662      	cpsie	i
 8009f1c:	b661      	cpsie	f
 8009f1e:	f3bf 8f4f 	dsb	sy
 8009f22:	f3bf 8f6f 	isb	sy
 8009f26:	df00      	svc	0
 8009f28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009f2a:	bf00      	nop
 8009f2c:	e000ed08 	.word	0xe000ed08

08009f30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b086      	sub	sp, #24
 8009f34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009f36:	4b47      	ldr	r3, [pc, #284]	@ (800a054 <xPortStartScheduler+0x124>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a47      	ldr	r2, [pc, #284]	@ (800a058 <xPortStartScheduler+0x128>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d10b      	bne.n	8009f58 <xPortStartScheduler+0x28>
	__asm volatile
 8009f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f44:	f383 8811 	msr	BASEPRI, r3
 8009f48:	f3bf 8f6f 	isb	sy
 8009f4c:	f3bf 8f4f 	dsb	sy
 8009f50:	613b      	str	r3, [r7, #16]
}
 8009f52:	bf00      	nop
 8009f54:	bf00      	nop
 8009f56:	e7fd      	b.n	8009f54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009f58:	4b3e      	ldr	r3, [pc, #248]	@ (800a054 <xPortStartScheduler+0x124>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4a3f      	ldr	r2, [pc, #252]	@ (800a05c <xPortStartScheduler+0x12c>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d10b      	bne.n	8009f7a <xPortStartScheduler+0x4a>
	__asm volatile
 8009f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f66:	f383 8811 	msr	BASEPRI, r3
 8009f6a:	f3bf 8f6f 	isb	sy
 8009f6e:	f3bf 8f4f 	dsb	sy
 8009f72:	60fb      	str	r3, [r7, #12]
}
 8009f74:	bf00      	nop
 8009f76:	bf00      	nop
 8009f78:	e7fd      	b.n	8009f76 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009f7a:	4b39      	ldr	r3, [pc, #228]	@ (800a060 <xPortStartScheduler+0x130>)
 8009f7c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	b2db      	uxtb	r3, r3
 8009f84:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	22ff      	movs	r2, #255	@ 0xff
 8009f8a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	781b      	ldrb	r3, [r3, #0]
 8009f90:	b2db      	uxtb	r3, r3
 8009f92:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009f94:	78fb      	ldrb	r3, [r7, #3]
 8009f96:	b2db      	uxtb	r3, r3
 8009f98:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009f9c:	b2da      	uxtb	r2, r3
 8009f9e:	4b31      	ldr	r3, [pc, #196]	@ (800a064 <xPortStartScheduler+0x134>)
 8009fa0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009fa2:	4b31      	ldr	r3, [pc, #196]	@ (800a068 <xPortStartScheduler+0x138>)
 8009fa4:	2207      	movs	r2, #7
 8009fa6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009fa8:	e009      	b.n	8009fbe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009faa:	4b2f      	ldr	r3, [pc, #188]	@ (800a068 <xPortStartScheduler+0x138>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	3b01      	subs	r3, #1
 8009fb0:	4a2d      	ldr	r2, [pc, #180]	@ (800a068 <xPortStartScheduler+0x138>)
 8009fb2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009fb4:	78fb      	ldrb	r3, [r7, #3]
 8009fb6:	b2db      	uxtb	r3, r3
 8009fb8:	005b      	lsls	r3, r3, #1
 8009fba:	b2db      	uxtb	r3, r3
 8009fbc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009fbe:	78fb      	ldrb	r3, [r7, #3]
 8009fc0:	b2db      	uxtb	r3, r3
 8009fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fc6:	2b80      	cmp	r3, #128	@ 0x80
 8009fc8:	d0ef      	beq.n	8009faa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009fca:	4b27      	ldr	r3, [pc, #156]	@ (800a068 <xPortStartScheduler+0x138>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f1c3 0307 	rsb	r3, r3, #7
 8009fd2:	2b04      	cmp	r3, #4
 8009fd4:	d00b      	beq.n	8009fee <xPortStartScheduler+0xbe>
	__asm volatile
 8009fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fda:	f383 8811 	msr	BASEPRI, r3
 8009fde:	f3bf 8f6f 	isb	sy
 8009fe2:	f3bf 8f4f 	dsb	sy
 8009fe6:	60bb      	str	r3, [r7, #8]
}
 8009fe8:	bf00      	nop
 8009fea:	bf00      	nop
 8009fec:	e7fd      	b.n	8009fea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009fee:	4b1e      	ldr	r3, [pc, #120]	@ (800a068 <xPortStartScheduler+0x138>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	021b      	lsls	r3, r3, #8
 8009ff4:	4a1c      	ldr	r2, [pc, #112]	@ (800a068 <xPortStartScheduler+0x138>)
 8009ff6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009ff8:	4b1b      	ldr	r3, [pc, #108]	@ (800a068 <xPortStartScheduler+0x138>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a000:	4a19      	ldr	r2, [pc, #100]	@ (800a068 <xPortStartScheduler+0x138>)
 800a002:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	b2da      	uxtb	r2, r3
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a00c:	4b17      	ldr	r3, [pc, #92]	@ (800a06c <xPortStartScheduler+0x13c>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	4a16      	ldr	r2, [pc, #88]	@ (800a06c <xPortStartScheduler+0x13c>)
 800a012:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a016:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a018:	4b14      	ldr	r3, [pc, #80]	@ (800a06c <xPortStartScheduler+0x13c>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	4a13      	ldr	r2, [pc, #76]	@ (800a06c <xPortStartScheduler+0x13c>)
 800a01e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a022:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a024:	f000 f8da 	bl	800a1dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a028:	4b11      	ldr	r3, [pc, #68]	@ (800a070 <xPortStartScheduler+0x140>)
 800a02a:	2200      	movs	r2, #0
 800a02c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a02e:	f000 f8f9 	bl	800a224 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a032:	4b10      	ldr	r3, [pc, #64]	@ (800a074 <xPortStartScheduler+0x144>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4a0f      	ldr	r2, [pc, #60]	@ (800a074 <xPortStartScheduler+0x144>)
 800a038:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a03c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a03e:	f7ff ff63 	bl	8009f08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a042:	f7ff f82b 	bl	800909c <vTaskSwitchContext>
	prvTaskExitError();
 800a046:	f7ff ff17 	bl	8009e78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a04a:	2300      	movs	r3, #0
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3718      	adds	r7, #24
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}
 800a054:	e000ed00 	.word	0xe000ed00
 800a058:	410fc271 	.word	0x410fc271
 800a05c:	410fc270 	.word	0x410fc270
 800a060:	e000e400 	.word	0xe000e400
 800a064:	200010b4 	.word	0x200010b4
 800a068:	200010b8 	.word	0x200010b8
 800a06c:	e000ed20 	.word	0xe000ed20
 800a070:	2000000c 	.word	0x2000000c
 800a074:	e000ef34 	.word	0xe000ef34

0800a078 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a078:	b480      	push	{r7}
 800a07a:	b083      	sub	sp, #12
 800a07c:	af00      	add	r7, sp, #0
	__asm volatile
 800a07e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a082:	f383 8811 	msr	BASEPRI, r3
 800a086:	f3bf 8f6f 	isb	sy
 800a08a:	f3bf 8f4f 	dsb	sy
 800a08e:	607b      	str	r3, [r7, #4]
}
 800a090:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a092:	4b10      	ldr	r3, [pc, #64]	@ (800a0d4 <vPortEnterCritical+0x5c>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	3301      	adds	r3, #1
 800a098:	4a0e      	ldr	r2, [pc, #56]	@ (800a0d4 <vPortEnterCritical+0x5c>)
 800a09a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a09c:	4b0d      	ldr	r3, [pc, #52]	@ (800a0d4 <vPortEnterCritical+0x5c>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d110      	bne.n	800a0c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a0a4:	4b0c      	ldr	r3, [pc, #48]	@ (800a0d8 <vPortEnterCritical+0x60>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	b2db      	uxtb	r3, r3
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d00b      	beq.n	800a0c6 <vPortEnterCritical+0x4e>
	__asm volatile
 800a0ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0b2:	f383 8811 	msr	BASEPRI, r3
 800a0b6:	f3bf 8f6f 	isb	sy
 800a0ba:	f3bf 8f4f 	dsb	sy
 800a0be:	603b      	str	r3, [r7, #0]
}
 800a0c0:	bf00      	nop
 800a0c2:	bf00      	nop
 800a0c4:	e7fd      	b.n	800a0c2 <vPortEnterCritical+0x4a>
	}
}
 800a0c6:	bf00      	nop
 800a0c8:	370c      	adds	r7, #12
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr
 800a0d2:	bf00      	nop
 800a0d4:	2000000c 	.word	0x2000000c
 800a0d8:	e000ed04 	.word	0xe000ed04

0800a0dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a0e2:	4b12      	ldr	r3, [pc, #72]	@ (800a12c <vPortExitCritical+0x50>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d10b      	bne.n	800a102 <vPortExitCritical+0x26>
	__asm volatile
 800a0ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0ee:	f383 8811 	msr	BASEPRI, r3
 800a0f2:	f3bf 8f6f 	isb	sy
 800a0f6:	f3bf 8f4f 	dsb	sy
 800a0fa:	607b      	str	r3, [r7, #4]
}
 800a0fc:	bf00      	nop
 800a0fe:	bf00      	nop
 800a100:	e7fd      	b.n	800a0fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a102:	4b0a      	ldr	r3, [pc, #40]	@ (800a12c <vPortExitCritical+0x50>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	3b01      	subs	r3, #1
 800a108:	4a08      	ldr	r2, [pc, #32]	@ (800a12c <vPortExitCritical+0x50>)
 800a10a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a10c:	4b07      	ldr	r3, [pc, #28]	@ (800a12c <vPortExitCritical+0x50>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d105      	bne.n	800a120 <vPortExitCritical+0x44>
 800a114:	2300      	movs	r3, #0
 800a116:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	f383 8811 	msr	BASEPRI, r3
}
 800a11e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a120:	bf00      	nop
 800a122:	370c      	adds	r7, #12
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr
 800a12c:	2000000c 	.word	0x2000000c

0800a130 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a130:	f3ef 8009 	mrs	r0, PSP
 800a134:	f3bf 8f6f 	isb	sy
 800a138:	4b15      	ldr	r3, [pc, #84]	@ (800a190 <pxCurrentTCBConst>)
 800a13a:	681a      	ldr	r2, [r3, #0]
 800a13c:	f01e 0f10 	tst.w	lr, #16
 800a140:	bf08      	it	eq
 800a142:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a146:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a14a:	6010      	str	r0, [r2, #0]
 800a14c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a150:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a154:	f380 8811 	msr	BASEPRI, r0
 800a158:	f3bf 8f4f 	dsb	sy
 800a15c:	f3bf 8f6f 	isb	sy
 800a160:	f7fe ff9c 	bl	800909c <vTaskSwitchContext>
 800a164:	f04f 0000 	mov.w	r0, #0
 800a168:	f380 8811 	msr	BASEPRI, r0
 800a16c:	bc09      	pop	{r0, r3}
 800a16e:	6819      	ldr	r1, [r3, #0]
 800a170:	6808      	ldr	r0, [r1, #0]
 800a172:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a176:	f01e 0f10 	tst.w	lr, #16
 800a17a:	bf08      	it	eq
 800a17c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a180:	f380 8809 	msr	PSP, r0
 800a184:	f3bf 8f6f 	isb	sy
 800a188:	4770      	bx	lr
 800a18a:	bf00      	nop
 800a18c:	f3af 8000 	nop.w

0800a190 <pxCurrentTCBConst>:
 800a190:	20000a88 	.word	0x20000a88
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a194:	bf00      	nop
 800a196:	bf00      	nop

0800a198 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b082      	sub	sp, #8
 800a19c:	af00      	add	r7, sp, #0
	__asm volatile
 800a19e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1a2:	f383 8811 	msr	BASEPRI, r3
 800a1a6:	f3bf 8f6f 	isb	sy
 800a1aa:	f3bf 8f4f 	dsb	sy
 800a1ae:	607b      	str	r3, [r7, #4]
}
 800a1b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a1b2:	f7fe feb9 	bl	8008f28 <xTaskIncrementTick>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d003      	beq.n	800a1c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a1bc:	4b06      	ldr	r3, [pc, #24]	@ (800a1d8 <xPortSysTickHandler+0x40>)
 800a1be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1c2:	601a      	str	r2, [r3, #0]
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	f383 8811 	msr	BASEPRI, r3
}
 800a1ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a1d0:	bf00      	nop
 800a1d2:	3708      	adds	r7, #8
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}
 800a1d8:	e000ed04 	.word	0xe000ed04

0800a1dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a1dc:	b480      	push	{r7}
 800a1de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a1e0:	4b0b      	ldr	r3, [pc, #44]	@ (800a210 <vPortSetupTimerInterrupt+0x34>)
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a1e6:	4b0b      	ldr	r3, [pc, #44]	@ (800a214 <vPortSetupTimerInterrupt+0x38>)
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a1ec:	4b0a      	ldr	r3, [pc, #40]	@ (800a218 <vPortSetupTimerInterrupt+0x3c>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4a0a      	ldr	r2, [pc, #40]	@ (800a21c <vPortSetupTimerInterrupt+0x40>)
 800a1f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a1f6:	099b      	lsrs	r3, r3, #6
 800a1f8:	4a09      	ldr	r2, [pc, #36]	@ (800a220 <vPortSetupTimerInterrupt+0x44>)
 800a1fa:	3b01      	subs	r3, #1
 800a1fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a1fe:	4b04      	ldr	r3, [pc, #16]	@ (800a210 <vPortSetupTimerInterrupt+0x34>)
 800a200:	2207      	movs	r2, #7
 800a202:	601a      	str	r2, [r3, #0]
}
 800a204:	bf00      	nop
 800a206:	46bd      	mov	sp, r7
 800a208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20c:	4770      	bx	lr
 800a20e:	bf00      	nop
 800a210:	e000e010 	.word	0xe000e010
 800a214:	e000e018 	.word	0xe000e018
 800a218:	20000000 	.word	0x20000000
 800a21c:	10624dd3 	.word	0x10624dd3
 800a220:	e000e014 	.word	0xe000e014

0800a224 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a224:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a234 <vPortEnableVFP+0x10>
 800a228:	6801      	ldr	r1, [r0, #0]
 800a22a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a22e:	6001      	str	r1, [r0, #0]
 800a230:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a232:	bf00      	nop
 800a234:	e000ed88 	.word	0xe000ed88

0800a238 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a238:	b480      	push	{r7}
 800a23a:	b085      	sub	sp, #20
 800a23c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a23e:	f3ef 8305 	mrs	r3, IPSR
 800a242:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2b0f      	cmp	r3, #15
 800a248:	d915      	bls.n	800a276 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a24a:	4a18      	ldr	r2, [pc, #96]	@ (800a2ac <vPortValidateInterruptPriority+0x74>)
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	4413      	add	r3, r2
 800a250:	781b      	ldrb	r3, [r3, #0]
 800a252:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a254:	4b16      	ldr	r3, [pc, #88]	@ (800a2b0 <vPortValidateInterruptPriority+0x78>)
 800a256:	781b      	ldrb	r3, [r3, #0]
 800a258:	7afa      	ldrb	r2, [r7, #11]
 800a25a:	429a      	cmp	r2, r3
 800a25c:	d20b      	bcs.n	800a276 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a25e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a262:	f383 8811 	msr	BASEPRI, r3
 800a266:	f3bf 8f6f 	isb	sy
 800a26a:	f3bf 8f4f 	dsb	sy
 800a26e:	607b      	str	r3, [r7, #4]
}
 800a270:	bf00      	nop
 800a272:	bf00      	nop
 800a274:	e7fd      	b.n	800a272 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a276:	4b0f      	ldr	r3, [pc, #60]	@ (800a2b4 <vPortValidateInterruptPriority+0x7c>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a27e:	4b0e      	ldr	r3, [pc, #56]	@ (800a2b8 <vPortValidateInterruptPriority+0x80>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	429a      	cmp	r2, r3
 800a284:	d90b      	bls.n	800a29e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a28a:	f383 8811 	msr	BASEPRI, r3
 800a28e:	f3bf 8f6f 	isb	sy
 800a292:	f3bf 8f4f 	dsb	sy
 800a296:	603b      	str	r3, [r7, #0]
}
 800a298:	bf00      	nop
 800a29a:	bf00      	nop
 800a29c:	e7fd      	b.n	800a29a <vPortValidateInterruptPriority+0x62>
	}
 800a29e:	bf00      	nop
 800a2a0:	3714      	adds	r7, #20
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a8:	4770      	bx	lr
 800a2aa:	bf00      	nop
 800a2ac:	e000e3f0 	.word	0xe000e3f0
 800a2b0:	200010b4 	.word	0x200010b4
 800a2b4:	e000ed0c 	.word	0xe000ed0c
 800a2b8:	200010b8 	.word	0x200010b8

0800a2bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b08a      	sub	sp, #40	@ 0x28
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a2c8:	f7fe fd72 	bl	8008db0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a2cc:	4b5c      	ldr	r3, [pc, #368]	@ (800a440 <pvPortMalloc+0x184>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d101      	bne.n	800a2d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a2d4:	f000 f924 	bl	800a520 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a2d8:	4b5a      	ldr	r3, [pc, #360]	@ (800a444 <pvPortMalloc+0x188>)
 800a2da:	681a      	ldr	r2, [r3, #0]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	4013      	ands	r3, r2
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	f040 8095 	bne.w	800a410 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d01e      	beq.n	800a32a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a2ec:	2208      	movs	r2, #8
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	4413      	add	r3, r2
 800a2f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f003 0307 	and.w	r3, r3, #7
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d015      	beq.n	800a32a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f023 0307 	bic.w	r3, r3, #7
 800a304:	3308      	adds	r3, #8
 800a306:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f003 0307 	and.w	r3, r3, #7
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d00b      	beq.n	800a32a <pvPortMalloc+0x6e>
	__asm volatile
 800a312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a316:	f383 8811 	msr	BASEPRI, r3
 800a31a:	f3bf 8f6f 	isb	sy
 800a31e:	f3bf 8f4f 	dsb	sy
 800a322:	617b      	str	r3, [r7, #20]
}
 800a324:	bf00      	nop
 800a326:	bf00      	nop
 800a328:	e7fd      	b.n	800a326 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d06f      	beq.n	800a410 <pvPortMalloc+0x154>
 800a330:	4b45      	ldr	r3, [pc, #276]	@ (800a448 <pvPortMalloc+0x18c>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	429a      	cmp	r2, r3
 800a338:	d86a      	bhi.n	800a410 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a33a:	4b44      	ldr	r3, [pc, #272]	@ (800a44c <pvPortMalloc+0x190>)
 800a33c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a33e:	4b43      	ldr	r3, [pc, #268]	@ (800a44c <pvPortMalloc+0x190>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a344:	e004      	b.n	800a350 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a348:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a34a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	687a      	ldr	r2, [r7, #4]
 800a356:	429a      	cmp	r2, r3
 800a358:	d903      	bls.n	800a362 <pvPortMalloc+0xa6>
 800a35a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d1f1      	bne.n	800a346 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a362:	4b37      	ldr	r3, [pc, #220]	@ (800a440 <pvPortMalloc+0x184>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a368:	429a      	cmp	r2, r3
 800a36a:	d051      	beq.n	800a410 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a36c:	6a3b      	ldr	r3, [r7, #32]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	2208      	movs	r2, #8
 800a372:	4413      	add	r3, r2
 800a374:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a378:	681a      	ldr	r2, [r3, #0]
 800a37a:	6a3b      	ldr	r3, [r7, #32]
 800a37c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a37e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a380:	685a      	ldr	r2, [r3, #4]
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	1ad2      	subs	r2, r2, r3
 800a386:	2308      	movs	r3, #8
 800a388:	005b      	lsls	r3, r3, #1
 800a38a:	429a      	cmp	r2, r3
 800a38c:	d920      	bls.n	800a3d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a38e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	4413      	add	r3, r2
 800a394:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a396:	69bb      	ldr	r3, [r7, #24]
 800a398:	f003 0307 	and.w	r3, r3, #7
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d00b      	beq.n	800a3b8 <pvPortMalloc+0xfc>
	__asm volatile
 800a3a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3a4:	f383 8811 	msr	BASEPRI, r3
 800a3a8:	f3bf 8f6f 	isb	sy
 800a3ac:	f3bf 8f4f 	dsb	sy
 800a3b0:	613b      	str	r3, [r7, #16]
}
 800a3b2:	bf00      	nop
 800a3b4:	bf00      	nop
 800a3b6:	e7fd      	b.n	800a3b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a3b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ba:	685a      	ldr	r2, [r3, #4]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	1ad2      	subs	r2, r2, r3
 800a3c0:	69bb      	ldr	r3, [r7, #24]
 800a3c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a3c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a3ca:	69b8      	ldr	r0, [r7, #24]
 800a3cc:	f000 f90a 	bl	800a5e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a3d0:	4b1d      	ldr	r3, [pc, #116]	@ (800a448 <pvPortMalloc+0x18c>)
 800a3d2:	681a      	ldr	r2, [r3, #0]
 800a3d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	1ad3      	subs	r3, r2, r3
 800a3da:	4a1b      	ldr	r2, [pc, #108]	@ (800a448 <pvPortMalloc+0x18c>)
 800a3dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a3de:	4b1a      	ldr	r3, [pc, #104]	@ (800a448 <pvPortMalloc+0x18c>)
 800a3e0:	681a      	ldr	r2, [r3, #0]
 800a3e2:	4b1b      	ldr	r3, [pc, #108]	@ (800a450 <pvPortMalloc+0x194>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d203      	bcs.n	800a3f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a3ea:	4b17      	ldr	r3, [pc, #92]	@ (800a448 <pvPortMalloc+0x18c>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	4a18      	ldr	r2, [pc, #96]	@ (800a450 <pvPortMalloc+0x194>)
 800a3f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a3f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3f4:	685a      	ldr	r2, [r3, #4]
 800a3f6:	4b13      	ldr	r3, [pc, #76]	@ (800a444 <pvPortMalloc+0x188>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	431a      	orrs	r2, r3
 800a3fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a402:	2200      	movs	r2, #0
 800a404:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a406:	4b13      	ldr	r3, [pc, #76]	@ (800a454 <pvPortMalloc+0x198>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	3301      	adds	r3, #1
 800a40c:	4a11      	ldr	r2, [pc, #68]	@ (800a454 <pvPortMalloc+0x198>)
 800a40e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a410:	f7fe fcdc 	bl	8008dcc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a414:	69fb      	ldr	r3, [r7, #28]
 800a416:	f003 0307 	and.w	r3, r3, #7
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d00b      	beq.n	800a436 <pvPortMalloc+0x17a>
	__asm volatile
 800a41e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a422:	f383 8811 	msr	BASEPRI, r3
 800a426:	f3bf 8f6f 	isb	sy
 800a42a:	f3bf 8f4f 	dsb	sy
 800a42e:	60fb      	str	r3, [r7, #12]
}
 800a430:	bf00      	nop
 800a432:	bf00      	nop
 800a434:	e7fd      	b.n	800a432 <pvPortMalloc+0x176>
	return pvReturn;
 800a436:	69fb      	ldr	r3, [r7, #28]
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3728      	adds	r7, #40	@ 0x28
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}
 800a440:	20001c7c 	.word	0x20001c7c
 800a444:	20001c90 	.word	0x20001c90
 800a448:	20001c80 	.word	0x20001c80
 800a44c:	20001c74 	.word	0x20001c74
 800a450:	20001c84 	.word	0x20001c84
 800a454:	20001c88 	.word	0x20001c88

0800a458 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b086      	sub	sp, #24
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d04f      	beq.n	800a50a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a46a:	2308      	movs	r3, #8
 800a46c:	425b      	negs	r3, r3
 800a46e:	697a      	ldr	r2, [r7, #20]
 800a470:	4413      	add	r3, r2
 800a472:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	685a      	ldr	r2, [r3, #4]
 800a47c:	4b25      	ldr	r3, [pc, #148]	@ (800a514 <vPortFree+0xbc>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4013      	ands	r3, r2
 800a482:	2b00      	cmp	r3, #0
 800a484:	d10b      	bne.n	800a49e <vPortFree+0x46>
	__asm volatile
 800a486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a48a:	f383 8811 	msr	BASEPRI, r3
 800a48e:	f3bf 8f6f 	isb	sy
 800a492:	f3bf 8f4f 	dsb	sy
 800a496:	60fb      	str	r3, [r7, #12]
}
 800a498:	bf00      	nop
 800a49a:	bf00      	nop
 800a49c:	e7fd      	b.n	800a49a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d00b      	beq.n	800a4be <vPortFree+0x66>
	__asm volatile
 800a4a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4aa:	f383 8811 	msr	BASEPRI, r3
 800a4ae:	f3bf 8f6f 	isb	sy
 800a4b2:	f3bf 8f4f 	dsb	sy
 800a4b6:	60bb      	str	r3, [r7, #8]
}
 800a4b8:	bf00      	nop
 800a4ba:	bf00      	nop
 800a4bc:	e7fd      	b.n	800a4ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	685a      	ldr	r2, [r3, #4]
 800a4c2:	4b14      	ldr	r3, [pc, #80]	@ (800a514 <vPortFree+0xbc>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4013      	ands	r3, r2
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d01e      	beq.n	800a50a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a4cc:	693b      	ldr	r3, [r7, #16]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d11a      	bne.n	800a50a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a4d4:	693b      	ldr	r3, [r7, #16]
 800a4d6:	685a      	ldr	r2, [r3, #4]
 800a4d8:	4b0e      	ldr	r3, [pc, #56]	@ (800a514 <vPortFree+0xbc>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	43db      	mvns	r3, r3
 800a4de:	401a      	ands	r2, r3
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a4e4:	f7fe fc64 	bl	8008db0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	685a      	ldr	r2, [r3, #4]
 800a4ec:	4b0a      	ldr	r3, [pc, #40]	@ (800a518 <vPortFree+0xc0>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	4413      	add	r3, r2
 800a4f2:	4a09      	ldr	r2, [pc, #36]	@ (800a518 <vPortFree+0xc0>)
 800a4f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a4f6:	6938      	ldr	r0, [r7, #16]
 800a4f8:	f000 f874 	bl	800a5e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a4fc:	4b07      	ldr	r3, [pc, #28]	@ (800a51c <vPortFree+0xc4>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	3301      	adds	r3, #1
 800a502:	4a06      	ldr	r2, [pc, #24]	@ (800a51c <vPortFree+0xc4>)
 800a504:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a506:	f7fe fc61 	bl	8008dcc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a50a:	bf00      	nop
 800a50c:	3718      	adds	r7, #24
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}
 800a512:	bf00      	nop
 800a514:	20001c90 	.word	0x20001c90
 800a518:	20001c80 	.word	0x20001c80
 800a51c:	20001c8c 	.word	0x20001c8c

0800a520 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a520:	b480      	push	{r7}
 800a522:	b085      	sub	sp, #20
 800a524:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a526:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800a52a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a52c:	4b27      	ldr	r3, [pc, #156]	@ (800a5cc <prvHeapInit+0xac>)
 800a52e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f003 0307 	and.w	r3, r3, #7
 800a536:	2b00      	cmp	r3, #0
 800a538:	d00c      	beq.n	800a554 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	3307      	adds	r3, #7
 800a53e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	f023 0307 	bic.w	r3, r3, #7
 800a546:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a548:	68ba      	ldr	r2, [r7, #8]
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	1ad3      	subs	r3, r2, r3
 800a54e:	4a1f      	ldr	r2, [pc, #124]	@ (800a5cc <prvHeapInit+0xac>)
 800a550:	4413      	add	r3, r2
 800a552:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a558:	4a1d      	ldr	r2, [pc, #116]	@ (800a5d0 <prvHeapInit+0xb0>)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a55e:	4b1c      	ldr	r3, [pc, #112]	@ (800a5d0 <prvHeapInit+0xb0>)
 800a560:	2200      	movs	r2, #0
 800a562:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	68ba      	ldr	r2, [r7, #8]
 800a568:	4413      	add	r3, r2
 800a56a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a56c:	2208      	movs	r2, #8
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	1a9b      	subs	r3, r3, r2
 800a572:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f023 0307 	bic.w	r3, r3, #7
 800a57a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	4a15      	ldr	r2, [pc, #84]	@ (800a5d4 <prvHeapInit+0xb4>)
 800a580:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a582:	4b14      	ldr	r3, [pc, #80]	@ (800a5d4 <prvHeapInit+0xb4>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	2200      	movs	r2, #0
 800a588:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a58a:	4b12      	ldr	r3, [pc, #72]	@ (800a5d4 <prvHeapInit+0xb4>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	2200      	movs	r2, #0
 800a590:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	68fa      	ldr	r2, [r7, #12]
 800a59a:	1ad2      	subs	r2, r2, r3
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a5a0:	4b0c      	ldr	r3, [pc, #48]	@ (800a5d4 <prvHeapInit+0xb4>)
 800a5a2:	681a      	ldr	r2, [r3, #0]
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	685b      	ldr	r3, [r3, #4]
 800a5ac:	4a0a      	ldr	r2, [pc, #40]	@ (800a5d8 <prvHeapInit+0xb8>)
 800a5ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	685b      	ldr	r3, [r3, #4]
 800a5b4:	4a09      	ldr	r2, [pc, #36]	@ (800a5dc <prvHeapInit+0xbc>)
 800a5b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a5b8:	4b09      	ldr	r3, [pc, #36]	@ (800a5e0 <prvHeapInit+0xc0>)
 800a5ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a5be:	601a      	str	r2, [r3, #0]
}
 800a5c0:	bf00      	nop
 800a5c2:	3714      	adds	r7, #20
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr
 800a5cc:	200010bc 	.word	0x200010bc
 800a5d0:	20001c74 	.word	0x20001c74
 800a5d4:	20001c7c 	.word	0x20001c7c
 800a5d8:	20001c84 	.word	0x20001c84
 800a5dc:	20001c80 	.word	0x20001c80
 800a5e0:	20001c90 	.word	0x20001c90

0800a5e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b085      	sub	sp, #20
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a5ec:	4b28      	ldr	r3, [pc, #160]	@ (800a690 <prvInsertBlockIntoFreeList+0xac>)
 800a5ee:	60fb      	str	r3, [r7, #12]
 800a5f0:	e002      	b.n	800a5f8 <prvInsertBlockIntoFreeList+0x14>
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	60fb      	str	r3, [r7, #12]
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	687a      	ldr	r2, [r7, #4]
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d8f7      	bhi.n	800a5f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	68ba      	ldr	r2, [r7, #8]
 800a60c:	4413      	add	r3, r2
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	429a      	cmp	r2, r3
 800a612:	d108      	bne.n	800a626 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	685a      	ldr	r2, [r3, #4]
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	441a      	add	r2, r3
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	68ba      	ldr	r2, [r7, #8]
 800a630:	441a      	add	r2, r3
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	429a      	cmp	r2, r3
 800a638:	d118      	bne.n	800a66c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681a      	ldr	r2, [r3, #0]
 800a63e:	4b15      	ldr	r3, [pc, #84]	@ (800a694 <prvInsertBlockIntoFreeList+0xb0>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	429a      	cmp	r2, r3
 800a644:	d00d      	beq.n	800a662 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	685a      	ldr	r2, [r3, #4]
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	685b      	ldr	r3, [r3, #4]
 800a650:	441a      	add	r2, r3
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	681a      	ldr	r2, [r3, #0]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	601a      	str	r2, [r3, #0]
 800a660:	e008      	b.n	800a674 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a662:	4b0c      	ldr	r3, [pc, #48]	@ (800a694 <prvInsertBlockIntoFreeList+0xb0>)
 800a664:	681a      	ldr	r2, [r3, #0]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	601a      	str	r2, [r3, #0]
 800a66a:	e003      	b.n	800a674 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681a      	ldr	r2, [r3, #0]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a674:	68fa      	ldr	r2, [r7, #12]
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	429a      	cmp	r2, r3
 800a67a:	d002      	beq.n	800a682 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a682:	bf00      	nop
 800a684:	3714      	adds	r7, #20
 800a686:	46bd      	mov	sp, r7
 800a688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68c:	4770      	bx	lr
 800a68e:	bf00      	nop
 800a690:	20001c74 	.word	0x20001c74
 800a694:	20001c7c 	.word	0x20001c7c

0800a698 <memset>:
 800a698:	4402      	add	r2, r0
 800a69a:	4603      	mov	r3, r0
 800a69c:	4293      	cmp	r3, r2
 800a69e:	d100      	bne.n	800a6a2 <memset+0xa>
 800a6a0:	4770      	bx	lr
 800a6a2:	f803 1b01 	strb.w	r1, [r3], #1
 800a6a6:	e7f9      	b.n	800a69c <memset+0x4>

0800a6a8 <_reclaim_reent>:
 800a6a8:	4b29      	ldr	r3, [pc, #164]	@ (800a750 <_reclaim_reent+0xa8>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	4283      	cmp	r3, r0
 800a6ae:	b570      	push	{r4, r5, r6, lr}
 800a6b0:	4604      	mov	r4, r0
 800a6b2:	d04b      	beq.n	800a74c <_reclaim_reent+0xa4>
 800a6b4:	69c3      	ldr	r3, [r0, #28]
 800a6b6:	b1ab      	cbz	r3, 800a6e4 <_reclaim_reent+0x3c>
 800a6b8:	68db      	ldr	r3, [r3, #12]
 800a6ba:	b16b      	cbz	r3, 800a6d8 <_reclaim_reent+0x30>
 800a6bc:	2500      	movs	r5, #0
 800a6be:	69e3      	ldr	r3, [r4, #28]
 800a6c0:	68db      	ldr	r3, [r3, #12]
 800a6c2:	5959      	ldr	r1, [r3, r5]
 800a6c4:	2900      	cmp	r1, #0
 800a6c6:	d13b      	bne.n	800a740 <_reclaim_reent+0x98>
 800a6c8:	3504      	adds	r5, #4
 800a6ca:	2d80      	cmp	r5, #128	@ 0x80
 800a6cc:	d1f7      	bne.n	800a6be <_reclaim_reent+0x16>
 800a6ce:	69e3      	ldr	r3, [r4, #28]
 800a6d0:	4620      	mov	r0, r4
 800a6d2:	68d9      	ldr	r1, [r3, #12]
 800a6d4:	f000 f872 	bl	800a7bc <_free_r>
 800a6d8:	69e3      	ldr	r3, [r4, #28]
 800a6da:	6819      	ldr	r1, [r3, #0]
 800a6dc:	b111      	cbz	r1, 800a6e4 <_reclaim_reent+0x3c>
 800a6de:	4620      	mov	r0, r4
 800a6e0:	f000 f86c 	bl	800a7bc <_free_r>
 800a6e4:	6961      	ldr	r1, [r4, #20]
 800a6e6:	b111      	cbz	r1, 800a6ee <_reclaim_reent+0x46>
 800a6e8:	4620      	mov	r0, r4
 800a6ea:	f000 f867 	bl	800a7bc <_free_r>
 800a6ee:	69e1      	ldr	r1, [r4, #28]
 800a6f0:	b111      	cbz	r1, 800a6f8 <_reclaim_reent+0x50>
 800a6f2:	4620      	mov	r0, r4
 800a6f4:	f000 f862 	bl	800a7bc <_free_r>
 800a6f8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a6fa:	b111      	cbz	r1, 800a702 <_reclaim_reent+0x5a>
 800a6fc:	4620      	mov	r0, r4
 800a6fe:	f000 f85d 	bl	800a7bc <_free_r>
 800a702:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a704:	b111      	cbz	r1, 800a70c <_reclaim_reent+0x64>
 800a706:	4620      	mov	r0, r4
 800a708:	f000 f858 	bl	800a7bc <_free_r>
 800a70c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a70e:	b111      	cbz	r1, 800a716 <_reclaim_reent+0x6e>
 800a710:	4620      	mov	r0, r4
 800a712:	f000 f853 	bl	800a7bc <_free_r>
 800a716:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a718:	b111      	cbz	r1, 800a720 <_reclaim_reent+0x78>
 800a71a:	4620      	mov	r0, r4
 800a71c:	f000 f84e 	bl	800a7bc <_free_r>
 800a720:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a722:	b111      	cbz	r1, 800a72a <_reclaim_reent+0x82>
 800a724:	4620      	mov	r0, r4
 800a726:	f000 f849 	bl	800a7bc <_free_r>
 800a72a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a72c:	b111      	cbz	r1, 800a734 <_reclaim_reent+0x8c>
 800a72e:	4620      	mov	r0, r4
 800a730:	f000 f844 	bl	800a7bc <_free_r>
 800a734:	6a23      	ldr	r3, [r4, #32]
 800a736:	b14b      	cbz	r3, 800a74c <_reclaim_reent+0xa4>
 800a738:	4620      	mov	r0, r4
 800a73a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a73e:	4718      	bx	r3
 800a740:	680e      	ldr	r6, [r1, #0]
 800a742:	4620      	mov	r0, r4
 800a744:	f000 f83a 	bl	800a7bc <_free_r>
 800a748:	4631      	mov	r1, r6
 800a74a:	e7bb      	b.n	800a6c4 <_reclaim_reent+0x1c>
 800a74c:	bd70      	pop	{r4, r5, r6, pc}
 800a74e:	bf00      	nop
 800a750:	20000010 	.word	0x20000010

0800a754 <__libc_init_array>:
 800a754:	b570      	push	{r4, r5, r6, lr}
 800a756:	4d0d      	ldr	r5, [pc, #52]	@ (800a78c <__libc_init_array+0x38>)
 800a758:	4c0d      	ldr	r4, [pc, #52]	@ (800a790 <__libc_init_array+0x3c>)
 800a75a:	1b64      	subs	r4, r4, r5
 800a75c:	10a4      	asrs	r4, r4, #2
 800a75e:	2600      	movs	r6, #0
 800a760:	42a6      	cmp	r6, r4
 800a762:	d109      	bne.n	800a778 <__libc_init_array+0x24>
 800a764:	4d0b      	ldr	r5, [pc, #44]	@ (800a794 <__libc_init_array+0x40>)
 800a766:	4c0c      	ldr	r4, [pc, #48]	@ (800a798 <__libc_init_array+0x44>)
 800a768:	f000 f87e 	bl	800a868 <_init>
 800a76c:	1b64      	subs	r4, r4, r5
 800a76e:	10a4      	asrs	r4, r4, #2
 800a770:	2600      	movs	r6, #0
 800a772:	42a6      	cmp	r6, r4
 800a774:	d105      	bne.n	800a782 <__libc_init_array+0x2e>
 800a776:	bd70      	pop	{r4, r5, r6, pc}
 800a778:	f855 3b04 	ldr.w	r3, [r5], #4
 800a77c:	4798      	blx	r3
 800a77e:	3601      	adds	r6, #1
 800a780:	e7ee      	b.n	800a760 <__libc_init_array+0xc>
 800a782:	f855 3b04 	ldr.w	r3, [r5], #4
 800a786:	4798      	blx	r3
 800a788:	3601      	adds	r6, #1
 800a78a:	e7f2      	b.n	800a772 <__libc_init_array+0x1e>
 800a78c:	0800a9c4 	.word	0x0800a9c4
 800a790:	0800a9c4 	.word	0x0800a9c4
 800a794:	0800a9c4 	.word	0x0800a9c4
 800a798:	0800a9c8 	.word	0x0800a9c8

0800a79c <__retarget_lock_acquire_recursive>:
 800a79c:	4770      	bx	lr

0800a79e <__retarget_lock_release_recursive>:
 800a79e:	4770      	bx	lr

0800a7a0 <memcpy>:
 800a7a0:	440a      	add	r2, r1
 800a7a2:	4291      	cmp	r1, r2
 800a7a4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a7a8:	d100      	bne.n	800a7ac <memcpy+0xc>
 800a7aa:	4770      	bx	lr
 800a7ac:	b510      	push	{r4, lr}
 800a7ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7b6:	4291      	cmp	r1, r2
 800a7b8:	d1f9      	bne.n	800a7ae <memcpy+0xe>
 800a7ba:	bd10      	pop	{r4, pc}

0800a7bc <_free_r>:
 800a7bc:	b538      	push	{r3, r4, r5, lr}
 800a7be:	4605      	mov	r5, r0
 800a7c0:	2900      	cmp	r1, #0
 800a7c2:	d041      	beq.n	800a848 <_free_r+0x8c>
 800a7c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7c8:	1f0c      	subs	r4, r1, #4
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	bfb8      	it	lt
 800a7ce:	18e4      	addlt	r4, r4, r3
 800a7d0:	f000 f83e 	bl	800a850 <__malloc_lock>
 800a7d4:	4a1d      	ldr	r2, [pc, #116]	@ (800a84c <_free_r+0x90>)
 800a7d6:	6813      	ldr	r3, [r2, #0]
 800a7d8:	b933      	cbnz	r3, 800a7e8 <_free_r+0x2c>
 800a7da:	6063      	str	r3, [r4, #4]
 800a7dc:	6014      	str	r4, [r2, #0]
 800a7de:	4628      	mov	r0, r5
 800a7e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7e4:	f000 b83a 	b.w	800a85c <__malloc_unlock>
 800a7e8:	42a3      	cmp	r3, r4
 800a7ea:	d908      	bls.n	800a7fe <_free_r+0x42>
 800a7ec:	6820      	ldr	r0, [r4, #0]
 800a7ee:	1821      	adds	r1, r4, r0
 800a7f0:	428b      	cmp	r3, r1
 800a7f2:	bf01      	itttt	eq
 800a7f4:	6819      	ldreq	r1, [r3, #0]
 800a7f6:	685b      	ldreq	r3, [r3, #4]
 800a7f8:	1809      	addeq	r1, r1, r0
 800a7fa:	6021      	streq	r1, [r4, #0]
 800a7fc:	e7ed      	b.n	800a7da <_free_r+0x1e>
 800a7fe:	461a      	mov	r2, r3
 800a800:	685b      	ldr	r3, [r3, #4]
 800a802:	b10b      	cbz	r3, 800a808 <_free_r+0x4c>
 800a804:	42a3      	cmp	r3, r4
 800a806:	d9fa      	bls.n	800a7fe <_free_r+0x42>
 800a808:	6811      	ldr	r1, [r2, #0]
 800a80a:	1850      	adds	r0, r2, r1
 800a80c:	42a0      	cmp	r0, r4
 800a80e:	d10b      	bne.n	800a828 <_free_r+0x6c>
 800a810:	6820      	ldr	r0, [r4, #0]
 800a812:	4401      	add	r1, r0
 800a814:	1850      	adds	r0, r2, r1
 800a816:	4283      	cmp	r3, r0
 800a818:	6011      	str	r1, [r2, #0]
 800a81a:	d1e0      	bne.n	800a7de <_free_r+0x22>
 800a81c:	6818      	ldr	r0, [r3, #0]
 800a81e:	685b      	ldr	r3, [r3, #4]
 800a820:	6053      	str	r3, [r2, #4]
 800a822:	4408      	add	r0, r1
 800a824:	6010      	str	r0, [r2, #0]
 800a826:	e7da      	b.n	800a7de <_free_r+0x22>
 800a828:	d902      	bls.n	800a830 <_free_r+0x74>
 800a82a:	230c      	movs	r3, #12
 800a82c:	602b      	str	r3, [r5, #0]
 800a82e:	e7d6      	b.n	800a7de <_free_r+0x22>
 800a830:	6820      	ldr	r0, [r4, #0]
 800a832:	1821      	adds	r1, r4, r0
 800a834:	428b      	cmp	r3, r1
 800a836:	bf04      	itt	eq
 800a838:	6819      	ldreq	r1, [r3, #0]
 800a83a:	685b      	ldreq	r3, [r3, #4]
 800a83c:	6063      	str	r3, [r4, #4]
 800a83e:	bf04      	itt	eq
 800a840:	1809      	addeq	r1, r1, r0
 800a842:	6021      	streq	r1, [r4, #0]
 800a844:	6054      	str	r4, [r2, #4]
 800a846:	e7ca      	b.n	800a7de <_free_r+0x22>
 800a848:	bd38      	pop	{r3, r4, r5, pc}
 800a84a:	bf00      	nop
 800a84c:	20001dd0 	.word	0x20001dd0

0800a850 <__malloc_lock>:
 800a850:	4801      	ldr	r0, [pc, #4]	@ (800a858 <__malloc_lock+0x8>)
 800a852:	f7ff bfa3 	b.w	800a79c <__retarget_lock_acquire_recursive>
 800a856:	bf00      	nop
 800a858:	20001dcc 	.word	0x20001dcc

0800a85c <__malloc_unlock>:
 800a85c:	4801      	ldr	r0, [pc, #4]	@ (800a864 <__malloc_unlock+0x8>)
 800a85e:	f7ff bf9e 	b.w	800a79e <__retarget_lock_release_recursive>
 800a862:	bf00      	nop
 800a864:	20001dcc 	.word	0x20001dcc

0800a868 <_init>:
 800a868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a86a:	bf00      	nop
 800a86c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a86e:	bc08      	pop	{r3}
 800a870:	469e      	mov	lr, r3
 800a872:	4770      	bx	lr

0800a874 <_fini>:
 800a874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a876:	bf00      	nop
 800a878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a87a:	bc08      	pop	{r3}
 800a87c:	469e      	mov	lr, r3
 800a87e:	4770      	bx	lr
