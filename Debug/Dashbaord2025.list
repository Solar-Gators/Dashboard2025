
Dashbaord2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ce0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08009e90  08009e90  0000ae90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fb4  08009fb4  0000b060  2**0
                  CONTENTS
  4 .ARM          00000008  08009fb4  08009fb4  0000afb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fbc  08009fbc  0000b060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fbc  08009fbc  0000afbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009fc0  08009fc0  0000afc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08009fc4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d1c  20000060  0800a024  0000b060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d7c  0800a024  0000bd7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000264f2  00000000  00000000  0000b090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004978  00000000  00000000  00031582  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002078  00000000  00000000  00035f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000195f  00000000  00000000  00037f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dd6f  00000000  00000000  000398d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023c75  00000000  00000000  00067646  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012434a  00000000  00000000  0008b2bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001af605  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f00  00000000  00000000  001af648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  001b8548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009e78 	.word	0x08009e78

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	08009e78 	.word	0x08009e78

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000204:	f000 b96a 	b.w	80004dc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	460c      	mov	r4, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14e      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022c:	4694      	mov	ip, r2
 800022e:	458c      	cmp	ip, r1
 8000230:	4686      	mov	lr, r0
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	d962      	bls.n	80002fe <__udivmoddi4+0xde>
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0320 	rsb	r3, r2, #32
 800023e:	4091      	lsls	r1, r2
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	fa0c fc02 	lsl.w	ip, ip, r2
 8000248:	4319      	orrs	r1, r3
 800024a:	fa00 fe02 	lsl.w	lr, r0, r2
 800024e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000252:	fa1f f68c 	uxth.w	r6, ip
 8000256:	fbb1 f4f7 	udiv	r4, r1, r7
 800025a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025e:	fb07 1114 	mls	r1, r7, r4, r1
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	fb04 f106 	mul.w	r1, r4, r6
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000276:	f080 8112 	bcs.w	800049e <__udivmoddi4+0x27e>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 810f 	bls.w	800049e <__udivmoddi4+0x27e>
 8000280:	3c02      	subs	r4, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a59      	subs	r1, r3, r1
 8000286:	fa1f f38e 	uxth.w	r3, lr
 800028a:	fbb1 f0f7 	udiv	r0, r1, r7
 800028e:	fb07 1110 	mls	r1, r7, r0, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb00 f606 	mul.w	r6, r0, r6
 800029a:	429e      	cmp	r6, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x94>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002a6:	f080 80fc 	bcs.w	80004a2 <__udivmoddi4+0x282>
 80002aa:	429e      	cmp	r6, r3
 80002ac:	f240 80f9 	bls.w	80004a2 <__udivmoddi4+0x282>
 80002b0:	4463      	add	r3, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	1b9b      	subs	r3, r3, r6
 80002b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11d      	cbz	r5, 80002c6 <__udivmoddi4+0xa6>
 80002be:	40d3      	lsrs	r3, r2
 80002c0:	2200      	movs	r2, #0
 80002c2:	e9c5 3200 	strd	r3, r2, [r5]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d905      	bls.n	80002da <__udivmoddi4+0xba>
 80002ce:	b10d      	cbz	r5, 80002d4 <__udivmoddi4+0xb4>
 80002d0:	e9c5 0100 	strd	r0, r1, [r5]
 80002d4:	2100      	movs	r1, #0
 80002d6:	4608      	mov	r0, r1
 80002d8:	e7f5      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d146      	bne.n	8000370 <__udivmoddi4+0x150>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xcc>
 80002e6:	4290      	cmp	r0, r2
 80002e8:	f0c0 80f0 	bcc.w	80004cc <__udivmoddi4+0x2ac>
 80002ec:	1a86      	subs	r6, r0, r2
 80002ee:	eb64 0303 	sbc.w	r3, r4, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d0e6      	beq.n	80002c6 <__udivmoddi4+0xa6>
 80002f8:	e9c5 6300 	strd	r6, r3, [r5]
 80002fc:	e7e3      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x204>
 8000304:	eba1 040c 	sub.w	r4, r1, ip
 8000308:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800030c:	fa1f f78c 	uxth.w	r7, ip
 8000310:	2101      	movs	r1, #1
 8000312:	fbb4 f6f8 	udiv	r6, r4, r8
 8000316:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031a:	fb08 4416 	mls	r4, r8, r6, r4
 800031e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000322:	fb07 f006 	mul.w	r0, r7, r6
 8000326:	4298      	cmp	r0, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x11c>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x11a>
 8000334:	4298      	cmp	r0, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 800033a:	4626      	mov	r6, r4
 800033c:	1a1c      	subs	r4, r3, r0
 800033e:	fa1f f38e 	uxth.w	r3, lr
 8000342:	fbb4 f0f8 	udiv	r0, r4, r8
 8000346:	fb08 4410 	mls	r4, r8, r0, r4
 800034a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034e:	fb00 f707 	mul.w	r7, r0, r7
 8000352:	429f      	cmp	r7, r3
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x148>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x146>
 8000360:	429f      	cmp	r7, r3
 8000362:	f200 80b0 	bhi.w	80004c6 <__udivmoddi4+0x2a6>
 8000366:	4620      	mov	r0, r4
 8000368:	1bdb      	subs	r3, r3, r7
 800036a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0x9c>
 8000370:	f1c1 0620 	rsb	r6, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 f706 	lsr.w	r7, r2, r6
 800037a:	431f      	orrs	r7, r3
 800037c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000380:	fa04 f301 	lsl.w	r3, r4, r1
 8000384:	ea43 030c 	orr.w	r3, r3, ip
 8000388:	40f4      	lsrs	r4, r6
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	0c38      	lsrs	r0, r7, #16
 8000390:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000394:	fbb4 fef0 	udiv	lr, r4, r0
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	fb00 441e 	mls	r4, r0, lr, r4
 80003a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a4:	fb0e f90c 	mul.w	r9, lr, ip
 80003a8:	45a1      	cmp	r9, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x1a6>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003b6:	f080 8084 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80003ba:	45a1      	cmp	r9, r4
 80003bc:	f240 8081 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80003c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	eba4 0409 	sub.w	r4, r4, r9
 80003ca:	fa1f f983 	uxth.w	r9, r3
 80003ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d2:	fb00 4413 	mls	r4, r0, r3, r4
 80003d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003da:	fb03 fc0c 	mul.w	ip, r3, ip
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x1d2>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003e8:	d267      	bcs.n	80004ba <__udivmoddi4+0x29a>
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d965      	bls.n	80004ba <__udivmoddi4+0x29a>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	443c      	add	r4, r7
 80003f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f6:	fba0 9302 	umull	r9, r3, r0, r2
 80003fa:	eba4 040c 	sub.w	r4, r4, ip
 80003fe:	429c      	cmp	r4, r3
 8000400:	46ce      	mov	lr, r9
 8000402:	469c      	mov	ip, r3
 8000404:	d351      	bcc.n	80004aa <__udivmoddi4+0x28a>
 8000406:	d04e      	beq.n	80004a6 <__udivmoddi4+0x286>
 8000408:	b155      	cbz	r5, 8000420 <__udivmoddi4+0x200>
 800040a:	ebb8 030e 	subs.w	r3, r8, lr
 800040e:	eb64 040c 	sbc.w	r4, r4, ip
 8000412:	fa04 f606 	lsl.w	r6, r4, r6
 8000416:	40cb      	lsrs	r3, r1
 8000418:	431e      	orrs	r6, r3
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c5 6400 	strd	r6, r4, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	e750      	b.n	80002c6 <__udivmoddi4+0xa6>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f103 	lsr.w	r1, r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa24 f303 	lsr.w	r3, r4, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	430c      	orrs	r4, r1
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000440:	fa1f f78c 	uxth.w	r7, ip
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3110 	mls	r1, r8, r0, r3
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000452:	fb00 f107 	mul.w	r1, r0, r7
 8000456:	4299      	cmp	r1, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x24c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000462:	d22c      	bcs.n	80004be <__udivmoddi4+0x29e>
 8000464:	4299      	cmp	r1, r3
 8000466:	d92a      	bls.n	80004be <__udivmoddi4+0x29e>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb3 f1f8 	udiv	r1, r3, r8
 8000474:	fb08 3311 	mls	r3, r8, r1, r3
 8000478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047c:	fb01 f307 	mul.w	r3, r1, r7
 8000480:	42a3      	cmp	r3, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x276>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800048c:	d213      	bcs.n	80004b6 <__udivmoddi4+0x296>
 800048e:	42a3      	cmp	r3, r4
 8000490:	d911      	bls.n	80004b6 <__udivmoddi4+0x296>
 8000492:	3902      	subs	r1, #2
 8000494:	4464      	add	r4, ip
 8000496:	1ae4      	subs	r4, r4, r3
 8000498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049c:	e739      	b.n	8000312 <__udivmoddi4+0xf2>
 800049e:	4604      	mov	r4, r0
 80004a0:	e6f0      	b.n	8000284 <__udivmoddi4+0x64>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e706      	b.n	80002b4 <__udivmoddi4+0x94>
 80004a6:	45c8      	cmp	r8, r9
 80004a8:	d2ae      	bcs.n	8000408 <__udivmoddi4+0x1e8>
 80004aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7a8      	b.n	8000408 <__udivmoddi4+0x1e8>
 80004b6:	4631      	mov	r1, r6
 80004b8:	e7ed      	b.n	8000496 <__udivmoddi4+0x276>
 80004ba:	4603      	mov	r3, r0
 80004bc:	e799      	b.n	80003f2 <__udivmoddi4+0x1d2>
 80004be:	4630      	mov	r0, r6
 80004c0:	e7d4      	b.n	800046c <__udivmoddi4+0x24c>
 80004c2:	46d6      	mov	lr, sl
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1a6>
 80004c6:	4463      	add	r3, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e74d      	b.n	8000368 <__udivmoddi4+0x148>
 80004cc:	4606      	mov	r6, r0
 80004ce:	4623      	mov	r3, r4
 80004d0:	4608      	mov	r0, r1
 80004d2:	e70f      	b.n	80002f4 <__udivmoddi4+0xd4>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	e730      	b.n	800033c <__udivmoddi4+0x11c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <TCAL9538RSVR_INIT>:
*/



uint8_t TCAL9538RSVR_INIT(TCAL9538RSVR *dev, I2C_HandleTypeDef *i2cHandle, uint8_t hardwareAddress, uint8_t direction_bitMask, uint8_t interrupt_bitMask)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b086      	sub	sp, #24
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	4611      	mov	r1, r2
 80004ec:	461a      	mov	r2, r3
 80004ee:	460b      	mov	r3, r1
 80004f0:	71fb      	strb	r3, [r7, #7]
 80004f2:	4613      	mov	r3, r2
 80004f4:	71bb      	strb	r3, [r7, #6]
	uint8_t errNum = 0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef status;
	dev->input = direction_bitMask;
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	79ba      	ldrb	r2, [r7, #6]
 80004fe:	719a      	strb	r2, [r3, #6]


    dev->i2cHandle = i2cHandle;
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	68ba      	ldr	r2, [r7, #8]
 8000504:	601a      	str	r2, [r3, #0]
    dev->portValues = 0;
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	2200      	movs	r2, #0
 800050a:	715a      	strb	r2, [r3, #5]
    // hardware address should be from 0-3
    // (A0 = GND, A1 = GND) == 0
    hardwareAddress &= 0b00000011;
 800050c:	79fb      	ldrb	r3, [r7, #7]
 800050e:	f003 0303 	and.w	r3, r3, #3
 8000512:	71fb      	strb	r3, [r7, #7]
    dev->deviceAddress = TCAL9538RSVR_ADDR | (hardwareAddress<<1);
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	005b      	lsls	r3, r3, #1
 8000518:	b25b      	sxtb	r3, r3
 800051a:	f063 031f 	orn	r3, r3, #31
 800051e:	b25b      	sxtb	r3, r3
 8000520:	b2da      	uxtb	r2, r3
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	711a      	strb	r2, [r3, #4]
    uint8_t hold_bitMask = direction_bitMask;
 8000526:	79bb      	ldrb	r3, [r7, #6]
 8000528:	757b      	strb	r3, [r7, #21]

    status = TCAL9538RSVR_SetDirection(dev, &hold_bitMask);
 800052a:	f107 0315 	add.w	r3, r7, #21
 800052e:	4619      	mov	r1, r3
 8000530:	68f8      	ldr	r0, [r7, #12]
 8000532:	f000 f838 	bl	80005a6 <TCAL9538RSVR_SetDirection>
 8000536:	4603      	mov	r3, r0
 8000538:	75bb      	strb	r3, [r7, #22]
    errNum += (status != HAL_OK);
 800053a:	7dbb      	ldrb	r3, [r7, #22]
 800053c:	2b00      	cmp	r3, #0
 800053e:	bf14      	ite	ne
 8000540:	2301      	movne	r3, #1
 8000542:	2300      	moveq	r3, #0
 8000544:	b2db      	uxtb	r3, r3
 8000546:	461a      	mov	r2, r3
 8000548:	7dfb      	ldrb	r3, [r7, #23]
 800054a:	4413      	add	r3, r2
 800054c:	75fb      	strb	r3, [r7, #23]

//    TCAL9538RSVR_ReadRegister(dev, TCAL9538RSVR_GPIO_INPUT, &hold_bitMask);

    status = TCAL9538RSVR_SetInterrupts(dev, interrupt_bitMask);
 800054e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000552:	4619      	mov	r1, r3
 8000554:	68f8      	ldr	r0, [r7, #12]
 8000556:	f000 f835 	bl	80005c4 <TCAL9538RSVR_SetInterrupts>
 800055a:	4603      	mov	r3, r0
 800055c:	75bb      	strb	r3, [r7, #22]
    errNum += (status != HAL_OK);
 800055e:	7dbb      	ldrb	r3, [r7, #22]
 8000560:	2b00      	cmp	r3, #0
 8000562:	bf14      	ite	ne
 8000564:	2301      	movne	r3, #1
 8000566:	2300      	moveq	r3, #0
 8000568:	b2db      	uxtb	r3, r3
 800056a:	461a      	mov	r2, r3
 800056c:	7dfb      	ldrb	r3, [r7, #23]
 800056e:	4413      	add	r3, r2
 8000570:	75fb      	strb	r3, [r7, #23]

    uint8_t full = 0xFF;
 8000572:	23ff      	movs	r3, #255	@ 0xff
 8000574:	753b      	strb	r3, [r7, #20]
//    {
//    	status = TCAL9538RSVR_WriteRegister(dev, 0x42, &full);
//    	errNum += (status != HAL_OK);
//    }

    status = TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_GPIO_INVERSION, &full);
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	461a      	mov	r2, r3
 800057c:	2102      	movs	r1, #2
 800057e:	68f8      	ldr	r0, [r7, #12]
 8000580:	f000 f8a6 	bl	80006d0 <TCAL9538RSVR_WriteRegister>
 8000584:	4603      	mov	r3, r0
 8000586:	75bb      	strb	r3, [r7, #22]
    errNum += (status != HAL_OK);
 8000588:	7dbb      	ldrb	r3, [r7, #22]
 800058a:	2b00      	cmp	r3, #0
 800058c:	bf14      	ite	ne
 800058e:	2301      	movne	r3, #1
 8000590:	2300      	moveq	r3, #0
 8000592:	b2db      	uxtb	r3, r3
 8000594:	461a      	mov	r2, r3
 8000596:	7dfb      	ldrb	r3, [r7, #23]
 8000598:	4413      	add	r3, r2
 800059a:	75fb      	strb	r3, [r7, #23]

    return (errNum);
 800059c:	7dfb      	ldrb	r3, [r7, #23]
}
 800059e:	4618      	mov	r0, r3
 80005a0:	3718      	adds	r7, #24
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}

080005a6 <TCAL9538RSVR_SetDirection>:
 * @param uint8_t : bitMask -> '1' is input
 * 					default is input
 * @retval HAL_StatusTypeDef : HAL_Status
 */
HAL_StatusTypeDef TCAL9538RSVR_SetDirection(TCAL9538RSVR* dev, uint8_t* bitMask)
{
 80005a6:	b580      	push	{r7, lr}
 80005a8:	b082      	sub	sp, #8
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	6078      	str	r0, [r7, #4]
 80005ae:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_DIR_CONFIG, bitMask);
 80005b0:	683a      	ldr	r2, [r7, #0]
 80005b2:	2103      	movs	r1, #3
 80005b4:	6878      	ldr	r0, [r7, #4]
 80005b6:	f000 f88b 	bl	80006d0 <TCAL9538RSVR_WriteRegister>
 80005ba:	4603      	mov	r3, r0
}
 80005bc:	4618      	mov	r0, r3
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <TCAL9538RSVR_SetInterrupts>:
 * @brief Sets interrupt register
 * @param uint8_t : bitMask -> '0' will enable interrupts for that pin
 * @retval HAL_StatusTypeDef : HAL_Status
 */
HAL_StatusTypeDef TCAL9538RSVR_SetInterrupts(TCAL9538RSVR* dev, uint8_t bitMask)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	460b      	mov	r3, r1
 80005ce:	70fb      	strb	r3, [r7, #3]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_INT_CONFIG, &bitMask);
 80005d0:	1cfb      	adds	r3, r7, #3
 80005d2:	461a      	mov	r2, r3
 80005d4:	2145      	movs	r1, #69	@ 0x45
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f000 f87a 	bl	80006d0 <TCAL9538RSVR_WriteRegister>
 80005dc:	4603      	mov	r3, r0
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}

080005e6 <TCAL9538RSVR_HandleInterrupt>:
 * @brief Handles interrupt and returns pin# that triggered
 * 			stores triggered pin in dev->triggeredInterrupt
 * @retval uint8_t : errNum
 */
HAL_StatusTypeDef TCAL9538RSVR_HandleInterrupt(TCAL9538RSVR* dev)
{
 80005e6:	b580      	push	{r7, lr}
 80005e8:	b084      	sub	sp, #16
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6078      	str	r0, [r7, #4]
    uint8_t errNum = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status;
    uint8_t triggeredInterrupts = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	737b      	strb	r3, [r7, #13]


    // read interrupt status register, puts a bit mask of the pin that triggered the interrupt in intPinBitMask
    status = TCAL9538RSVR_ReadRegister(dev, TCAL9538RSVR_INT_STATUS, &triggeredInterrupts);
 80005f6:	f107 030d 	add.w	r3, r7, #13
 80005fa:	461a      	mov	r2, r3
 80005fc:	2146      	movs	r1, #70	@ 0x46
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f000 f849 	bl	8000696 <TCAL9538RSVR_ReadRegister>
 8000604:	4603      	mov	r3, r0
 8000606:	73bb      	strb	r3, [r7, #14]
    errNum += (status != HAL_OK);
 8000608:	7bbb      	ldrb	r3, [r7, #14]
 800060a:	2b00      	cmp	r3, #0
 800060c:	bf14      	ite	ne
 800060e:	2301      	movne	r3, #1
 8000610:	2300      	moveq	r3, #0
 8000612:	b2db      	uxtb	r3, r3
 8000614:	461a      	mov	r2, r3
 8000616:	7bfb      	ldrb	r3, [r7, #15]
 8000618:	4413      	add	r3, r2
 800061a:	73fb      	strb	r3, [r7, #15]

    // Read updated input values
    status = TCAL9538RSVR_ReadInput(dev, &dev->portValues);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	3305      	adds	r3, #5
 8000620:	4619      	mov	r1, r3
 8000622:	6878      	ldr	r0, [r7, #4]
 8000624:	f000 f819 	bl	800065a <TCAL9538RSVR_ReadInput>
 8000628:	4603      	mov	r3, r0
 800062a:	73bb      	strb	r3, [r7, #14]
    uint8_t test1 = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	733b      	strb	r3, [r7, #12]
    TCAL9538RSVR_ReadRegister(dev, 0x45, &test1);
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	461a      	mov	r2, r3
 8000636:	2145      	movs	r1, #69	@ 0x45
 8000638:	6878      	ldr	r0, [r7, #4]
 800063a:	f000 f82c 	bl	8000696 <TCAL9538RSVR_ReadRegister>
    uint8_t test2 = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	72fb      	strb	r3, [r7, #11]
    TCAL9538RSVR_ReadRegister(dev, 0x46, &test2);
 8000642:	f107 030b 	add.w	r3, r7, #11
 8000646:	461a      	mov	r2, r3
 8000648:	2146      	movs	r1, #70	@ 0x46
 800064a:	6878      	ldr	r0, [r7, #4]
 800064c:	f000 f823 	bl	8000696 <TCAL9538RSVR_ReadRegister>
    {
    	status = TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_INT_STATUS, &triggeredInterrupts);
    	errNum += (status != HAL_OK);
    }*/

    return (errNum);
 8000650:	7bfb      	ldrb	r3, [r7, #15]
}
 8000652:	4618      	mov	r0, r3
 8000654:	3710      	adds	r7, #16
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}

0800065a <TCAL9538RSVR_ReadInput>:




HAL_StatusTypeDef TCAL9538RSVR_ReadInput(TCAL9538RSVR* dev, uint8_t *data)
{
 800065a:	b580      	push	{r7, lr}
 800065c:	b082      	sub	sp, #8
 800065e:	af00      	add	r7, sp, #0
 8000660:	6078      	str	r0, [r7, #4]
 8000662:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_ReadRegister(dev, TCAL9538RSVR_GPIO_INPUT, data);
 8000664:	683a      	ldr	r2, [r7, #0]
 8000666:	2100      	movs	r1, #0
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f000 f814 	bl	8000696 <TCAL9538RSVR_ReadRegister>
 800066e:	4603      	mov	r3, r0
}
 8000670:	4618      	mov	r0, r3
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <TCAL9538RSVR_SetOutput>:
HAL_StatusTypeDef TCAL9538RSVR_SetOutput(TCAL9538RSVR* dev, uint8_t *data)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_GPIO_OUTPUT, data);
 8000682:	683a      	ldr	r2, [r7, #0]
 8000684:	2101      	movs	r1, #1
 8000686:	6878      	ldr	r0, [r7, #4]
 8000688:	f000 f822 	bl	80006d0 <TCAL9538RSVR_WriteRegister>
 800068c:	4603      	mov	r3, r0
}
 800068e:	4618      	mov	r0, r3
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}

08000696 <TCAL9538RSVR_ReadRegister>:

//low level functions
HAL_StatusTypeDef TCAL9538RSVR_ReadRegister(TCAL9538RSVR *dev, uint8_t reg, uint8_t *data)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	b088      	sub	sp, #32
 800069a:	af04      	add	r7, sp, #16
 800069c:	60f8      	str	r0, [r7, #12]
 800069e:	460b      	mov	r3, r1
 80006a0:	607a      	str	r2, [r7, #4]
 80006a2:	72fb      	strb	r3, [r7, #11]
    return(HAL_I2C_Mem_Read(dev->i2cHandle, dev->deviceAddress, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY));
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	6818      	ldr	r0, [r3, #0]
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	791b      	ldrb	r3, [r3, #4]
 80006ac:	4619      	mov	r1, r3
 80006ae:	7afb      	ldrb	r3, [r7, #11]
 80006b0:	b29a      	uxth	r2, r3
 80006b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006b6:	9302      	str	r3, [sp, #8]
 80006b8:	2301      	movs	r3, #1
 80006ba:	9301      	str	r3, [sp, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	9300      	str	r3, [sp, #0]
 80006c0:	2301      	movs	r3, #1
 80006c2:	f002 fd47 	bl	8003154 <HAL_I2C_Mem_Read>
 80006c6:	4603      	mov	r3, r0
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <TCAL9538RSVR_WriteRegister>:
HAL_StatusTypeDef TCAL9538RSVR_WriteRegister(TCAL9538RSVR *dev, uint8_t reg, uint8_t *data)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b088      	sub	sp, #32
 80006d4:	af04      	add	r7, sp, #16
 80006d6:	60f8      	str	r0, [r7, #12]
 80006d8:	460b      	mov	r3, r1
 80006da:	607a      	str	r2, [r7, #4]
 80006dc:	72fb      	strb	r3, [r7, #11]
    return(HAL_I2C_Mem_Write(dev->i2cHandle, dev->deviceAddress, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY));
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	6818      	ldr	r0, [r3, #0]
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	791b      	ldrb	r3, [r3, #4]
 80006e6:	4619      	mov	r1, r3
 80006e8:	7afb      	ldrb	r3, [r7, #11]
 80006ea:	b29a      	uxth	r2, r3
 80006ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006f0:	9302      	str	r3, [sp, #8]
 80006f2:	2301      	movs	r3, #1
 80006f4:	9301      	str	r3, [sp, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	2301      	movs	r3, #1
 80006fc:	f002 fc16 	bl	8002f2c <HAL_I2C_Mem_Write>
 8000700:	4603      	mov	r3, r0
}
 8000702:	4618      	mov	r0, r3
 8000704:	3710      	adds	r7, #16
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
	...

0800070c <Update_CAN_Message1>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Update_CAN_Message1(uint8_t flags[8], uint8_t* Input1, uint8_t* Input2)
{
 800070c:	b480      	push	{r7}
 800070e:	b087      	sub	sp, #28
 8000710:	af00      	add	r7, sp, #0
 8000712:	60f8      	str	r0, [r7, #12]
 8000714:	60b9      	str	r1, [r7, #8]
 8000716:	607a      	str	r2, [r7, #4]
	 * Debounce buttons
	 *
	 *
	 */

	uint8_t prev_flag1 = flags[1];
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	785b      	ldrb	r3, [r3, #1]
 800071c:	75fb      	strb	r3, [r7, #23]
	uint8_t prev_flag2 = flags[2];
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	789b      	ldrb	r3, [r3, #2]
 8000722:	75bb      	strb	r3, [r7, #22]

	flags[1] = 0;
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	3301      	adds	r3, #1
 8000728:	2200      	movs	r2, #0
 800072a:	701a      	strb	r2, [r3, #0]
	flags[2] = 0;
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	3302      	adds	r3, #2
 8000730:	2200      	movs	r2, #0
 8000732:	701a      	strb	r2, [r3, #0]
	flags[3] = 0;
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	3303      	adds	r3, #3
 8000738:	2200      	movs	r2, #0
 800073a:	701a      	strb	r2, [r3, #0]
	flags[4] = 0;
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	3304      	adds	r3, #4
 8000740:	2200      	movs	r2, #0
 8000742:	701a      	strb	r2, [r3, #0]

	uint8_t new_flag1 = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	757b      	strb	r3, [r7, #21]
	new_flag1 |= CHECK_BIT(*Input2, 4) << 0; // Main
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	f003 0310 	and.w	r3, r3, #16
 8000750:	2b00      	cmp	r3, #0
 8000752:	bf14      	ite	ne
 8000754:	2301      	movne	r3, #1
 8000756:	2300      	moveq	r3, #0
 8000758:	b2db      	uxtb	r3, r3
 800075a:	b25a      	sxtb	r2, r3
 800075c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000760:	4313      	orrs	r3, r2
 8000762:	b25b      	sxtb	r3, r3
 8000764:	757b      	strb	r3, [r7, #21]
	new_flag1 |= CHECK_BIT(*Input2, 5) << 1; // Break
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	111b      	asrs	r3, r3, #4
 800076c:	b25b      	sxtb	r3, r3
 800076e:	f003 0302 	and.w	r3, r3, #2
 8000772:	b25a      	sxtb	r2, r3
 8000774:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000778:	4313      	orrs	r3, r2
 800077a:	b25b      	sxtb	r3, r3
 800077c:	757b      	strb	r3, [r7, #21]
	new_flag1 |= CHECK_BIT(*Input2, 0) << 2; // Mode
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	b25b      	sxtb	r3, r3
 8000786:	f003 0304 	and.w	r3, r3, #4
 800078a:	b25a      	sxtb	r2, r3
 800078c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000790:	4313      	orrs	r3, r2
 8000792:	b25b      	sxtb	r3, r3
 8000794:	757b      	strb	r3, [r7, #21]
	new_flag1 |= CHECK_BIT(*Input1, 5) << 3; // MC
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	109b      	asrs	r3, r3, #2
 800079c:	b25b      	sxtb	r3, r3
 800079e:	f003 0308 	and.w	r3, r3, #8
 80007a2:	b25a      	sxtb	r2, r3
 80007a4:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80007a8:	4313      	orrs	r3, r2
 80007aa:	b25b      	sxtb	r3, r3
 80007ac:	757b      	strb	r3, [r7, #21]
	new_flag1 |= CHECK_BIT(*Input1, 6) << 4; // Array
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	109b      	asrs	r3, r3, #2
 80007b4:	b25b      	sxtb	r3, r3
 80007b6:	f003 0310 	and.w	r3, r3, #16
 80007ba:	b25a      	sxtb	r2, r3
 80007bc:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80007c0:	4313      	orrs	r3, r2
 80007c2:	b25b      	sxtb	r3, r3
 80007c4:	757b      	strb	r3, [r7, #21]
	new_flag1 |= CHECK_BIT(*Input1, 4) << 5; // Extra 1
 80007c6:	68bb      	ldr	r3, [r7, #8]
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	005b      	lsls	r3, r3, #1
 80007cc:	b25b      	sxtb	r3, r3
 80007ce:	f003 0320 	and.w	r3, r3, #32
 80007d2:	b25a      	sxtb	r2, r3
 80007d4:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80007d8:	4313      	orrs	r3, r2
 80007da:	b25b      	sxtb	r3, r3
 80007dc:	757b      	strb	r3, [r7, #21]
	new_flag1 |= CHECK_BIT(outputPortState, 5) << 6; // Horn
 80007de:	4b37      	ldr	r3, [pc, #220]	@ (80008bc <Update_CAN_Message1+0x1b0>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	b25b      	sxtb	r3, r3
 80007e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007ea:	b25a      	sxtb	r2, r3
 80007ec:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80007f0:	4313      	orrs	r3, r2
 80007f2:	b25b      	sxtb	r3, r3
 80007f4:	757b      	strb	r3, [r7, #21]
	new_flag1 |= CHECK_BIT(outputPortState, 6) << 7; // PTT
 80007f6:	4b31      	ldr	r3, [pc, #196]	@ (80008bc <Update_CAN_Message1+0x1b0>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	b25b      	sxtb	r3, r3
 80007fe:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000802:	b25a      	sxtb	r2, r3
 8000804:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000808:	4313      	orrs	r3, r2
 800080a:	b25b      	sxtb	r3, r3
 800080c:	757b      	strb	r3, [r7, #21]

	uint8_t new_flag2 = 0;
 800080e:	2300      	movs	r3, #0
 8000810:	753b      	strb	r3, [r7, #20]
	new_flag2 |= CHECK_BIT(outputPortState, 2) << 0; // Blinkers
 8000812:	4b2a      	ldr	r3, [pc, #168]	@ (80008bc <Update_CAN_Message1+0x1b0>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	2b00      	cmp	r3, #0
 800081c:	bf14      	ite	ne
 800081e:	2301      	movne	r3, #1
 8000820:	2300      	moveq	r3, #0
 8000822:	b2db      	uxtb	r3, r3
 8000824:	b25a      	sxtb	r2, r3
 8000826:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800082a:	4313      	orrs	r3, r2
 800082c:	b25b      	sxtb	r3, r3
 800082e:	753b      	strb	r3, [r7, #20]
	new_flag2 |= CHECK_BIT(outputPortState, 0) << 1; // Left Turn Signal
 8000830:	4b22      	ldr	r3, [pc, #136]	@ (80008bc <Update_CAN_Message1+0x1b0>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	b25b      	sxtb	r3, r3
 8000838:	f003 0302 	and.w	r3, r3, #2
 800083c:	b25a      	sxtb	r2, r3
 800083e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8000842:	4313      	orrs	r3, r2
 8000844:	b25b      	sxtb	r3, r3
 8000846:	753b      	strb	r3, [r7, #20]
	new_flag2 |= CHECK_BIT(outputPortState, 1) << 2; // Right Turn Signal
 8000848:	4b1c      	ldr	r3, [pc, #112]	@ (80008bc <Update_CAN_Message1+0x1b0>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	b25b      	sxtb	r3, r3
 8000850:	f003 0304 	and.w	r3, r3, #4
 8000854:	b25a      	sxtb	r2, r3
 8000856:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800085a:	4313      	orrs	r3, r2
 800085c:	b25b      	sxtb	r3, r3
 800085e:	753b      	strb	r3, [r7, #20]
	new_flag2 |= CHECK_BIT(*Input1, 7) << 2; // Right Turn Signal
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	b25b      	sxtb	r3, r3
 8000866:	115b      	asrs	r3, r3, #5
 8000868:	b25b      	sxtb	r3, r3
 800086a:	f003 0304 	and.w	r3, r3, #4
 800086e:	b25a      	sxtb	r2, r3
 8000870:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8000874:	4313      	orrs	r3, r2
 8000876:	b25b      	sxtb	r3, r3
 8000878:	753b      	strb	r3, [r7, #20]

	// Detect rising edges for each flag
	uint8_t risingEdges_flag1 = (~prev_flag1) & new_flag1;
 800087a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800087e:	43db      	mvns	r3, r3
 8000880:	b25a      	sxtb	r2, r3
 8000882:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000886:	4013      	ands	r3, r2
 8000888:	b25b      	sxtb	r3, r3
 800088a:	74fb      	strb	r3, [r7, #19]
	uint8_t risingEdges_flag2 = (~prev_flag2) & new_flag2;
 800088c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000890:	43db      	mvns	r3, r3
 8000892:	b25a      	sxtb	r2, r3
 8000894:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8000898:	4013      	ands	r3, r2
 800089a:	b25b      	sxtb	r3, r3
 800089c:	74bb      	strb	r3, [r7, #18]

	flags[1] = risingEdges_flag1;
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	3301      	adds	r3, #1
 80008a2:	7cfa      	ldrb	r2, [r7, #19]
 80008a4:	701a      	strb	r2, [r3, #0]
	flags[2] = risingEdges_flag2;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	3302      	adds	r3, #2
 80008aa:	7cba      	ldrb	r2, [r7, #18]
 80008ac:	701a      	strb	r2, [r3, #0]

}
 80008ae:	bf00      	nop
 80008b0:	371c      	adds	r7, #28
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	20000244 	.word	0x20000244

080008c0 <HAL_GPIO_EXTI_Callback>:
	// -> if off,
}

// GPIO Expander Interrupt Handler
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	80fb      	strh	r3, [r7, #6]
	GPIO_Interrupt_Triggered = 1;
 80008ca:	4b04      	ldr	r3, [pc, #16]	@ (80008dc <HAL_GPIO_EXTI_Callback+0x1c>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	701a      	strb	r2, [r3, #0]
}
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	20000238 	.word	0x20000238

080008e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008e6:	f000 fdf8 	bl	80014da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ea:	f000 f87d 	bl	80009e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ee:	f000 fa0f 	bl	8000d10 <MX_GPIO_Init>
  MX_ADC1_Init();
 80008f2:	f000 f8bf 	bl	8000a74 <MX_ADC1_Init>
  MX_I2C4_Init();
 80008f6:	f000 f99b 	bl	8000c30 <MX_I2C4_Init>
  MX_CAN1_Init();
 80008fa:	f000 f931 	bl	8000b60 <MX_CAN1_Init>
  MX_CAN2_Init();
 80008fe:	f000 f963 	bl	8000bc8 <MX_CAN2_Init>
  MX_UART4_Init();
 8000902:	f000 f9d5 	bl	8000cb0 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  if (TCAL9538RSVR_INIT(&U5, &hi2c4, 0b10, 0xFF, 0x00) != HAL_OK) { Error_Handler(); } // inputs
 8000906:	2300      	movs	r3, #0
 8000908:	9300      	str	r3, [sp, #0]
 800090a:	23ff      	movs	r3, #255	@ 0xff
 800090c:	2202      	movs	r2, #2
 800090e:	4925      	ldr	r1, [pc, #148]	@ (80009a4 <main+0xc4>)
 8000910:	4825      	ldr	r0, [pc, #148]	@ (80009a8 <main+0xc8>)
 8000912:	f7ff fde5 	bl	80004e0 <TCAL9538RSVR_INIT>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <main+0x40>
 800091c:	f000 fb00 	bl	8000f20 <Error_Handler>
  uint8_t reg_read_hold;
  TCAL9538RSVR_ReadRegister(&U5, 0x45, &reg_read_hold);
 8000920:	1dfb      	adds	r3, r7, #7
 8000922:	461a      	mov	r2, r3
 8000924:	2145      	movs	r1, #69	@ 0x45
 8000926:	4820      	ldr	r0, [pc, #128]	@ (80009a8 <main+0xc8>)
 8000928:	f7ff feb5 	bl	8000696 <TCAL9538RSVR_ReadRegister>
  //if (TCAL9538RSVR_INIT(&U16, &hi2c4, 0b01, 0b00111111, 0b11000000) != HAL_OK) { Error_Handler(); }
  if (TCAL9538RSVR_INIT(&U7, &hi2c4, 0x00, 0b00000000, 0b00000000) != HAL_OK) { Error_Handler(); } // output
 800092c:	2300      	movs	r3, #0
 800092e:	9300      	str	r3, [sp, #0]
 8000930:	2300      	movs	r3, #0
 8000932:	2200      	movs	r2, #0
 8000934:	491b      	ldr	r1, [pc, #108]	@ (80009a4 <main+0xc4>)
 8000936:	481d      	ldr	r0, [pc, #116]	@ (80009ac <main+0xcc>)
 8000938:	f7ff fdd2 	bl	80004e0 <TCAL9538RSVR_INIT>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <main+0x66>
 8000942:	f000 faed 	bl	8000f20 <Error_Handler>

  HAL_CAN_Start(&hcan1);
 8000946:	481a      	ldr	r0, [pc, #104]	@ (80009b0 <main+0xd0>)
 8000948:	f001 fed1 	bl	80026ee <HAL_CAN_Start>


  HAL_UART_Receive_IT(&huart4, &uart_rx, 1); // enables uart interrupt, it will call the interrupt when one byte is recieved
 800094c:	2201      	movs	r2, #1
 800094e:	4919      	ldr	r1, [pc, #100]	@ (80009b4 <main+0xd4>)
 8000950:	4819      	ldr	r0, [pc, #100]	@ (80009b8 <main+0xd8>)
 8000952:	f004 ff25 	bl	80057a0 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000956:	f006 fa79 	bl	8006e4c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of CAN_Mutex */
  CAN_MutexHandle = osSemaphoreNew(1, 1, &CAN_Mutex_attributes);
 800095a:	4a18      	ldr	r2, [pc, #96]	@ (80009bc <main+0xdc>)
 800095c:	2101      	movs	r1, #1
 800095e:	2001      	movs	r0, #1
 8000960:	f006 fb6b 	bl	800703a <osSemaphoreNew>
 8000964:	4603      	mov	r3, r0
 8000966:	4a16      	ldr	r2, [pc, #88]	@ (80009c0 <main+0xe0>)
 8000968:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HeartBeat */
  HeartBeatHandle = osThreadNew(StartTask01, NULL, &HeartBeat_attributes);
 800096a:	4a16      	ldr	r2, [pc, #88]	@ (80009c4 <main+0xe4>)
 800096c:	2100      	movs	r1, #0
 800096e:	4816      	ldr	r0, [pc, #88]	@ (80009c8 <main+0xe8>)
 8000970:	f006 fab6 	bl	8006ee0 <osThreadNew>
 8000974:	4603      	mov	r3, r0
 8000976:	4a15      	ldr	r2, [pc, #84]	@ (80009cc <main+0xec>)
 8000978:	6013      	str	r3, [r2, #0]

  /* creation of Critical_Inputs */
  //Critical_InputsHandle = osThreadNew(StartTask02, NULL, &Critical_Inputs_attributes);

  /* creation of ReadIOExpander */
  ReadIOExpanderHandle = osThreadNew(StartTask03, NULL, &ReadIOExpander_attributes);
 800097a:	4a15      	ldr	r2, [pc, #84]	@ (80009d0 <main+0xf0>)
 800097c:	2100      	movs	r1, #0
 800097e:	4815      	ldr	r0, [pc, #84]	@ (80009d4 <main+0xf4>)
 8000980:	f006 faae 	bl	8006ee0 <osThreadNew>
 8000984:	4603      	mov	r3, r0
 8000986:	4a14      	ldr	r2, [pc, #80]	@ (80009d8 <main+0xf8>)
 8000988:	6013      	str	r3, [r2, #0]

  /* creation of Outputs_Control */
  Outputs_ControlHandle = osThreadNew(StartTask04, NULL, &Outputs_Control_attributes);
 800098a:	4a14      	ldr	r2, [pc, #80]	@ (80009dc <main+0xfc>)
 800098c:	2100      	movs	r1, #0
 800098e:	4814      	ldr	r0, [pc, #80]	@ (80009e0 <main+0x100>)
 8000990:	f006 faa6 	bl	8006ee0 <osThreadNew>
 8000994:	4603      	mov	r3, r0
 8000996:	4a13      	ldr	r2, [pc, #76]	@ (80009e4 <main+0x104>)
 8000998:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800099a:	f006 fa7b 	bl	8006e94 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800099e:	bf00      	nop
 80009a0:	e7fd      	b.n	800099e <main+0xbe>
 80009a2:	bf00      	nop
 80009a4:	20000134 	.word	0x20000134
 80009a8:	20000220 	.word	0x20000220
 80009ac:	20000230 	.word	0x20000230
 80009b0:	200000e4 	.word	0x200000e4
 80009b4:	20000245 	.word	0x20000245
 80009b8:	20000188 	.word	0x20000188
 80009bc:	08009f5c 	.word	0x08009f5c
 80009c0:	2000021c 	.word	0x2000021c
 80009c4:	08009ef0 	.word	0x08009ef0
 80009c8:	08000e15 	.word	0x08000e15
 80009cc:	20000210 	.word	0x20000210
 80009d0:	08009f14 	.word	0x08009f14
 80009d4:	08000e45 	.word	0x08000e45
 80009d8:	20000214 	.word	0x20000214
 80009dc:	08009f38 	.word	0x08009f38
 80009e0:	08000ed1 	.word	0x08000ed1
 80009e4:	20000218 	.word	0x20000218

080009e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b096      	sub	sp, #88	@ 0x58
 80009ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	2244      	movs	r2, #68	@ 0x44
 80009f4:	2100      	movs	r1, #0
 80009f6:	4618      	mov	r0, r3
 80009f8:	f009 f956 	bl	8009ca8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009fc:	463b      	mov	r3, r7
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
 8000a08:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a0a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a0e:	f003 f823 	bl	8003a58 <HAL_PWREx_ControlVoltageScaling>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a18:	f000 fa82 	bl	8000f20 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000a1c:	2310      	movs	r3, #16
 8000a1e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a20:	2301      	movs	r3, #1
 8000a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a28:	2360      	movs	r3, #96	@ 0x60
 8000a2a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4618      	mov	r0, r3
 8000a36:	f003 f865 	bl	8003b04 <HAL_RCC_OscConfig>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000a40:	f000 fa6e 	bl	8000f20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a44:	230f      	movs	r3, #15
 8000a46:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a54:	2300      	movs	r3, #0
 8000a56:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a58:	463b      	mov	r3, r7
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f003 fc6b 	bl	8004338 <HAL_RCC_ClockConfig>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000a68:	f000 fa5a 	bl	8000f20 <Error_Handler>
  }
}
 8000a6c:	bf00      	nop
 8000a6e:	3758      	adds	r7, #88	@ 0x58
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08a      	sub	sp, #40	@ 0x28
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
 8000a94:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a96:	4b2f      	ldr	r3, [pc, #188]	@ (8000b54 <MX_ADC1_Init+0xe0>)
 8000a98:	4a2f      	ldr	r2, [pc, #188]	@ (8000b58 <MX_ADC1_Init+0xe4>)
 8000a9a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a9c:	4b2d      	ldr	r3, [pc, #180]	@ (8000b54 <MX_ADC1_Init+0xe0>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000aa2:	4b2c      	ldr	r3, [pc, #176]	@ (8000b54 <MX_ADC1_Init+0xe0>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000aa8:	4b2a      	ldr	r3, [pc, #168]	@ (8000b54 <MX_ADC1_Init+0xe0>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000aae:	4b29      	ldr	r3, [pc, #164]	@ (8000b54 <MX_ADC1_Init+0xe0>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ab4:	4b27      	ldr	r3, [pc, #156]	@ (8000b54 <MX_ADC1_Init+0xe0>)
 8000ab6:	2204      	movs	r2, #4
 8000ab8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000aba:	4b26      	ldr	r3, [pc, #152]	@ (8000b54 <MX_ADC1_Init+0xe0>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ac0:	4b24      	ldr	r3, [pc, #144]	@ (8000b54 <MX_ADC1_Init+0xe0>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000ac6:	4b23      	ldr	r3, [pc, #140]	@ (8000b54 <MX_ADC1_Init+0xe0>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000acc:	4b21      	ldr	r3, [pc, #132]	@ (8000b54 <MX_ADC1_Init+0xe0>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ad4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b54 <MX_ADC1_Init+0xe0>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ada:	4b1e      	ldr	r3, [pc, #120]	@ (8000b54 <MX_ADC1_Init+0xe0>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ae0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b54 <MX_ADC1_Init+0xe0>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ae8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b54 <MX_ADC1_Init+0xe0>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000aee:	4b19      	ldr	r3, [pc, #100]	@ (8000b54 <MX_ADC1_Init+0xe0>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000af6:	4817      	ldr	r0, [pc, #92]	@ (8000b54 <MX_ADC1_Init+0xe0>)
 8000af8:	f000 fec8 	bl	800188c <HAL_ADC_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000b02:	f000 fa0d 	bl	8000f20 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b0a:	f107 031c 	add.w	r3, r7, #28
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4810      	ldr	r0, [pc, #64]	@ (8000b54 <MX_ADC1_Init+0xe0>)
 8000b12:	f001 fc41 	bl	8002398 <HAL_ADCEx_MultiModeConfigChannel>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000b1c:	f000 fa00 	bl	8000f20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b20:	4b0e      	ldr	r3, [pc, #56]	@ (8000b5c <MX_ADC1_Init+0xe8>)
 8000b22:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b24:	2306      	movs	r3, #6
 8000b26:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b2c:	237f      	movs	r3, #127	@ 0x7f
 8000b2e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b30:	2304      	movs	r3, #4
 8000b32:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4805      	ldr	r0, [pc, #20]	@ (8000b54 <MX_ADC1_Init+0xe0>)
 8000b3e:	f000 fff9 	bl	8001b34 <HAL_ADC_ConfigChannel>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000b48:	f000 f9ea 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b4c:	bf00      	nop
 8000b4e:	3728      	adds	r7, #40	@ 0x28
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	2000007c 	.word	0x2000007c
 8000b58:	50040000 	.word	0x50040000
 8000b5c:	04300002 	.word	0x04300002

08000b60 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000b64:	4b16      	ldr	r3, [pc, #88]	@ (8000bc0 <MX_CAN1_Init+0x60>)
 8000b66:	4a17      	ldr	r2, [pc, #92]	@ (8000bc4 <MX_CAN1_Init+0x64>)
 8000b68:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000b6a:	4b15      	ldr	r3, [pc, #84]	@ (8000bc0 <MX_CAN1_Init+0x60>)
 8000b6c:	2210      	movs	r2, #16
 8000b6e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000b70:	4b13      	ldr	r3, [pc, #76]	@ (8000bc0 <MX_CAN1_Init+0x60>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000b76:	4b12      	ldr	r3, [pc, #72]	@ (8000bc0 <MX_CAN1_Init+0x60>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000b7c:	4b10      	ldr	r3, [pc, #64]	@ (8000bc0 <MX_CAN1_Init+0x60>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000b82:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc0 <MX_CAN1_Init+0x60>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000b88:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc0 <MX_CAN1_Init+0x60>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc0 <MX_CAN1_Init+0x60>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000b94:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc0 <MX_CAN1_Init+0x60>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000b9a:	4b09      	ldr	r3, [pc, #36]	@ (8000bc0 <MX_CAN1_Init+0x60>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000ba0:	4b07      	ldr	r3, [pc, #28]	@ (8000bc0 <MX_CAN1_Init+0x60>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ba6:	4b06      	ldr	r3, [pc, #24]	@ (8000bc0 <MX_CAN1_Init+0x60>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000bac:	4804      	ldr	r0, [pc, #16]	@ (8000bc0 <MX_CAN1_Init+0x60>)
 8000bae:	f001 fca3 	bl	80024f8 <HAL_CAN_Init>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000bb8:	f000 f9b2 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	200000e4 	.word	0x200000e4
 8000bc4:	40006400 	.word	0x40006400

08000bc8 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000bcc:	4b16      	ldr	r3, [pc, #88]	@ (8000c28 <MX_CAN2_Init+0x60>)
 8000bce:	4a17      	ldr	r2, [pc, #92]	@ (8000c2c <MX_CAN2_Init+0x64>)
 8000bd0:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000bd2:	4b15      	ldr	r3, [pc, #84]	@ (8000c28 <MX_CAN2_Init+0x60>)
 8000bd4:	2210      	movs	r2, #16
 8000bd6:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000bd8:	4b13      	ldr	r3, [pc, #76]	@ (8000c28 <MX_CAN2_Init+0x60>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000bde:	4b12      	ldr	r3, [pc, #72]	@ (8000c28 <MX_CAN2_Init+0x60>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000be4:	4b10      	ldr	r3, [pc, #64]	@ (8000c28 <MX_CAN2_Init+0x60>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000bea:	4b0f      	ldr	r3, [pc, #60]	@ (8000c28 <MX_CAN2_Init+0x60>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000bf0:	4b0d      	ldr	r3, [pc, #52]	@ (8000c28 <MX_CAN2_Init+0x60>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8000c28 <MX_CAN2_Init+0x60>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8000c28 <MX_CAN2_Init+0x60>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000c02:	4b09      	ldr	r3, [pc, #36]	@ (8000c28 <MX_CAN2_Init+0x60>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000c08:	4b07      	ldr	r3, [pc, #28]	@ (8000c28 <MX_CAN2_Init+0x60>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000c0e:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <MX_CAN2_Init+0x60>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000c14:	4804      	ldr	r0, [pc, #16]	@ (8000c28 <MX_CAN2_Init+0x60>)
 8000c16:	f001 fc6f 	bl	80024f8 <HAL_CAN_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8000c20:	f000 f97e 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	2000010c 	.word	0x2000010c
 8000c2c:	40006800 	.word	0x40006800

08000c30 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000c34:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca4 <MX_I2C4_Init+0x74>)
 8000c36:	4a1c      	ldr	r2, [pc, #112]	@ (8000ca8 <MX_I2C4_Init+0x78>)
 8000c38:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00100D14;
 8000c3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca4 <MX_I2C4_Init+0x74>)
 8000c3c:	4a1b      	ldr	r2, [pc, #108]	@ (8000cac <MX_I2C4_Init+0x7c>)
 8000c3e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000c40:	4b18      	ldr	r3, [pc, #96]	@ (8000ca4 <MX_I2C4_Init+0x74>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c46:	4b17      	ldr	r3, [pc, #92]	@ (8000ca4 <MX_I2C4_Init+0x74>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c4c:	4b15      	ldr	r3, [pc, #84]	@ (8000ca4 <MX_I2C4_Init+0x74>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000c52:	4b14      	ldr	r3, [pc, #80]	@ (8000ca4 <MX_I2C4_Init+0x74>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c58:	4b12      	ldr	r3, [pc, #72]	@ (8000ca4 <MX_I2C4_Init+0x74>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c5e:	4b11      	ldr	r3, [pc, #68]	@ (8000ca4 <MX_I2C4_Init+0x74>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c64:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca4 <MX_I2C4_Init+0x74>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000c6a:	480e      	ldr	r0, [pc, #56]	@ (8000ca4 <MX_I2C4_Init+0x74>)
 8000c6c:	f002 f8c2 	bl	8002df4 <HAL_I2C_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000c76:	f000 f953 	bl	8000f20 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	4809      	ldr	r0, [pc, #36]	@ (8000ca4 <MX_I2C4_Init+0x74>)
 8000c7e:	f002 fe45 	bl	800390c <HAL_I2CEx_ConfigAnalogFilter>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000c88:	f000 f94a 	bl	8000f20 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4805      	ldr	r0, [pc, #20]	@ (8000ca4 <MX_I2C4_Init+0x74>)
 8000c90:	f002 fe87 	bl	80039a2 <HAL_I2CEx_ConfigDigitalFilter>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000c9a:	f000 f941 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000134 	.word	0x20000134
 8000ca8:	40008400 	.word	0x40008400
 8000cac:	00100d14 	.word	0x00100d14

08000cb0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000cb4:	4b14      	ldr	r3, [pc, #80]	@ (8000d08 <MX_UART4_Init+0x58>)
 8000cb6:	4a15      	ldr	r2, [pc, #84]	@ (8000d0c <MX_UART4_Init+0x5c>)
 8000cb8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000cba:	4b13      	ldr	r3, [pc, #76]	@ (8000d08 <MX_UART4_Init+0x58>)
 8000cbc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000cc0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000cc2:	4b11      	ldr	r3, [pc, #68]	@ (8000d08 <MX_UART4_Init+0x58>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8000d08 <MX_UART4_Init+0x58>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000cce:	4b0e      	ldr	r3, [pc, #56]	@ (8000d08 <MX_UART4_Init+0x58>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000d08 <MX_UART4_Init+0x58>)
 8000cd6:	220c      	movs	r2, #12
 8000cd8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cda:	4b0b      	ldr	r3, [pc, #44]	@ (8000d08 <MX_UART4_Init+0x58>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce0:	4b09      	ldr	r3, [pc, #36]	@ (8000d08 <MX_UART4_Init+0x58>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ce6:	4b08      	ldr	r3, [pc, #32]	@ (8000d08 <MX_UART4_Init+0x58>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cec:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <MX_UART4_Init+0x58>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000cf2:	4805      	ldr	r0, [pc, #20]	@ (8000d08 <MX_UART4_Init+0x58>)
 8000cf4:	f004 fd06 	bl	8005704 <HAL_UART_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000cfe:	f000 f90f 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000188 	.word	0x20000188
 8000d0c:	40004c00 	.word	0x40004c00

08000d10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d16:	f107 030c 	add.w	r3, r7, #12
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
 8000d24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d26:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd0 <MX_GPIO_Init+0xc0>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d2a:	4a29      	ldr	r2, [pc, #164]	@ (8000dd0 <MX_GPIO_Init+0xc0>)
 8000d2c:	f043 0304 	orr.w	r3, r3, #4
 8000d30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d32:	4b27      	ldr	r3, [pc, #156]	@ (8000dd0 <MX_GPIO_Init+0xc0>)
 8000d34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d36:	f003 0304 	and.w	r3, r3, #4
 8000d3a:	60bb      	str	r3, [r7, #8]
 8000d3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3e:	4b24      	ldr	r3, [pc, #144]	@ (8000dd0 <MX_GPIO_Init+0xc0>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d42:	4a23      	ldr	r2, [pc, #140]	@ (8000dd0 <MX_GPIO_Init+0xc0>)
 8000d44:	f043 0302 	orr.w	r3, r3, #2
 8000d48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d4a:	4b21      	ldr	r3, [pc, #132]	@ (8000dd0 <MX_GPIO_Init+0xc0>)
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d4e:	f003 0302 	and.w	r3, r3, #2
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd0 <MX_GPIO_Init+0xc0>)
 8000d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d5a:	4a1d      	ldr	r2, [pc, #116]	@ (8000dd0 <MX_GPIO_Init+0xc0>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d62:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd0 <MX_GPIO_Init+0xc0>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	603b      	str	r3, [r7, #0]
 8000d6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OK_LED_GPIO_Port, OK_LED_Pin, GPIO_PIN_RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d78:	f001 fff2 	bl	8002d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Alert1_Pin */
  GPIO_InitStruct.Pin = Alert1_Pin;
 8000d7c:	2304      	movs	r3, #4
 8000d7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d80:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d86:	2301      	movs	r3, #1
 8000d88:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Alert1_GPIO_Port, &GPIO_InitStruct);
 8000d8a:	f107 030c 	add.w	r3, r7, #12
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4810      	ldr	r0, [pc, #64]	@ (8000dd4 <MX_GPIO_Init+0xc4>)
 8000d92:	f001 fe53 	bl	8002a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : OK_LED_Pin */
  GPIO_InitStruct.Pin = OK_LED_Pin;
 8000d96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(OK_LED_GPIO_Port, &GPIO_InitStruct);
 8000da8:	f107 030c 	add.w	r3, r7, #12
 8000dac:	4619      	mov	r1, r3
 8000dae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000db2:	f001 fe43 	bl	8002a3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2105      	movs	r1, #5
 8000dba:	2008      	movs	r0, #8
 8000dbc:	f001 fd94 	bl	80028e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000dc0:	2008      	movs	r0, #8
 8000dc2:	f001 fdad 	bl	8002920 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dc6:	bf00      	nop
 8000dc8:	3720      	adds	r7, #32
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	48000800 	.word	0x48000800

08000dd8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  // code for handling the data received over uart
  if(huart->Instance == UART4)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a07      	ldr	r2, [pc, #28]	@ (8000e04 <HAL_UART_RxCpltCallback+0x2c>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d103      	bne.n	8000df2 <HAL_UART_RxCpltCallback+0x1a>
    }
    */



    prev_uart_rx = uart_rx;
 8000dea:	4b07      	ldr	r3, [pc, #28]	@ (8000e08 <HAL_UART_RxCpltCallback+0x30>)
 8000dec:	781a      	ldrb	r2, [r3, #0]
 8000dee:	4b07      	ldr	r3, [pc, #28]	@ (8000e0c <HAL_UART_RxCpltCallback+0x34>)
 8000df0:	701a      	strb	r2, [r3, #0]
  }

  HAL_UART_Receive_IT(&huart4, &uart_rx, 1); // reenables uart interrupt
 8000df2:	2201      	movs	r2, #1
 8000df4:	4904      	ldr	r1, [pc, #16]	@ (8000e08 <HAL_UART_RxCpltCallback+0x30>)
 8000df6:	4806      	ldr	r0, [pc, #24]	@ (8000e10 <HAL_UART_RxCpltCallback+0x38>)
 8000df8:	f004 fcd2 	bl	80057a0 <HAL_UART_Receive_IT>
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40004c00 	.word	0x40004c00
 8000e08:	20000245 	.word	0x20000245
 8000e0c:	20000246 	.word	0x20000246
 8000e10:	20000188 	.word	0x20000188

08000e14 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	//uint8_t var = 0b11111111;
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, OK_LED_Pin);
 8000e1c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e24:	f001 ffb4 	bl	8002d90 <HAL_GPIO_TogglePin>
	//var = ~var;
	//TCAL9538RSVR_SetOutput(&U7, &var);
	uint8_t val = TxData[1];
 8000e28:	4b05      	ldr	r3, [pc, #20]	@ (8000e40 <StartTask01+0x2c>)
 8000e2a:	785b      	ldrb	r3, [r3, #1]
 8000e2c:	73fb      	strb	r3, [r7, #15]
	uint8_t val2 = TxData[2];
 8000e2e:	4b04      	ldr	r3, [pc, #16]	@ (8000e40 <StartTask01+0x2c>)
 8000e30:	789b      	ldrb	r3, [r3, #2]
 8000e32:	73bb      	strb	r3, [r7, #14]
    osDelay(5000);
 8000e34:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000e38:	f006 f8e4 	bl	8007004 <osDelay>
  {
 8000e3c:	bf00      	nop
 8000e3e:	e7ed      	b.n	8000e1c <StartTask01+0x8>
 8000e40:	2000023c 	.word	0x2000023c

08000e44 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08a      	sub	sp, #40	@ 0x28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */

	int debounce_count = 0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	627b      	str	r3, [r7, #36]	@ 0x24

	CAN_TxHeaderTypeDef TxHeader;
	//uint8_t TxData[8] = { 0 };
	uint32_t TxMailbox;

	TxHeader.IDE = CAN_ID_STD; // Standard ID (not extended)
 8000e50:	2300      	movs	r3, #0
 8000e52:	613b      	str	r3, [r7, #16]
	TxHeader.StdId = 0x3FF; // 11 bit Identifier !!Change!!
 8000e54:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8000e58:	60bb      	str	r3, [r7, #8]
	TxHeader.RTR = CAN_RTR_DATA; // Std RTR Data frame
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
	TxHeader.DLC = 8; // 8 bytes being transmitted
 8000e5e:	2308      	movs	r3, #8
 8000e60:	61bb      	str	r3, [r7, #24]

	Update_CAN_Message1(TxData, &U5.portValues, &U16.portValues);
 8000e62:	4a16      	ldr	r2, [pc, #88]	@ (8000ebc <StartTask03+0x78>)
 8000e64:	4916      	ldr	r1, [pc, #88]	@ (8000ec0 <StartTask03+0x7c>)
 8000e66:	4817      	ldr	r0, [pc, #92]	@ (8000ec4 <StartTask03+0x80>)
 8000e68:	f7ff fc50 	bl	800070c <Update_CAN_Message1>

	/* Infinite loop */
	for(;;)
	{
	  // Read TCAL Input and update flags
	  if (GPIO_Interrupt_Triggered && debounce_count++ <= 2)
 8000e6c:	4b16      	ldr	r3, [pc, #88]	@ (8000ec8 <StartTask03+0x84>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d01e      	beq.n	8000eb2 <StartTask03+0x6e>
 8000e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e76:	1c5a      	adds	r2, r3, #1
 8000e78:	627a      	str	r2, [r7, #36]	@ 0x24
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	dc19      	bgt.n	8000eb2 <StartTask03+0x6e>
	  {
		  if (TCAL9538RSVR_HandleInterrupt(&U5) != HAL_OK){ Error_Handler(); }
 8000e7e:	4813      	ldr	r0, [pc, #76]	@ (8000ecc <StartTask03+0x88>)
 8000e80:	f7ff fbb1 	bl	80005e6 <TCAL9538RSVR_HandleInterrupt>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <StartTask03+0x4a>
 8000e8a:	f000 f849 	bl	8000f20 <Error_Handler>
		  //if (TCAL9538RSVR_HandleInterrupt(&U16) != HAL_OK){ Error_Handler(); }


		  Update_CAN_Message1(TxData, &U5.portValues, &U16.portValues);
 8000e8e:	4a0b      	ldr	r2, [pc, #44]	@ (8000ebc <StartTask03+0x78>)
 8000e90:	490b      	ldr	r1, [pc, #44]	@ (8000ec0 <StartTask03+0x7c>)
 8000e92:	480c      	ldr	r0, [pc, #48]	@ (8000ec4 <StartTask03+0x80>)
 8000e94:	f7ff fc3a 	bl	800070c <Update_CAN_Message1>
		  uint8_t val = TxData[0];
 8000e98:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec4 <StartTask03+0x80>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		  uint8_t val2 = TxData[1];
 8000ea0:	4b08      	ldr	r3, [pc, #32]	@ (8000ec4 <StartTask03+0x80>)
 8000ea2:	785b      	ldrb	r3, [r3, #1]
 8000ea4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		  GPIO_Interrupt_Triggered = 0;
 8000ea8:	4b07      	ldr	r3, [pc, #28]	@ (8000ec8 <StartTask03+0x84>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	701a      	strb	r2, [r3, #0]
		  debounce_count = 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	627b      	str	r3, [r7, #36]	@ 0x24
//	  while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
//	  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
//	  {
//		  Error_Handler();
//	  }
	  osDelay(1);
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	f006 f8a6 	bl	8007004 <osDelay>
	  if (GPIO_Interrupt_Triggered && debounce_count++ <= 2)
 8000eb8:	e7d8      	b.n	8000e6c <StartTask03+0x28>
 8000eba:	bf00      	nop
 8000ebc:	2000022d 	.word	0x2000022d
 8000ec0:	20000225 	.word	0x20000225
 8000ec4:	2000023c 	.word	0x2000023c
 8000ec8:	20000238 	.word	0x20000238
 8000ecc:	20000220 	.word	0x20000220

08000ed0 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  for(;;)
  {

    // outputPortState needs to be updated somewhere here / in a uart interrupt

    if(TCAL9538RSVR_SetOutput(&U7, &outputPortState) != HAL_OK)
 8000ed8:	4906      	ldr	r1, [pc, #24]	@ (8000ef4 <StartTask04+0x24>)
 8000eda:	4807      	ldr	r0, [pc, #28]	@ (8000ef8 <StartTask04+0x28>)
 8000edc:	f7ff fbcc 	bl	8000678 <TCAL9538RSVR_SetOutput>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <StartTask04+0x1a>
    {
    	Error_Handler();
 8000ee6:	f000 f81b 	bl	8000f20 <Error_Handler>
    }

    osDelay(50);
 8000eea:	2032      	movs	r0, #50	@ 0x32
 8000eec:	f006 f88a 	bl	8007004 <osDelay>
    if(TCAL9538RSVR_SetOutput(&U7, &outputPortState) != HAL_OK)
 8000ef0:	e7f2      	b.n	8000ed8 <StartTask04+0x8>
 8000ef2:	bf00      	nop
 8000ef4:	20000244 	.word	0x20000244
 8000ef8:	20000230 	.word	0x20000230

08000efc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a04      	ldr	r2, [pc, #16]	@ (8000f1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d101      	bne.n	8000f12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f0e:	f000 fafd 	bl	800150c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40000400 	.word	0x40000400

08000f20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f24:	b672      	cpsid	i
}
 8000f26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <Error_Handler+0x8>

08000f2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f32:	4b11      	ldr	r3, [pc, #68]	@ (8000f78 <HAL_MspInit+0x4c>)
 8000f34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f36:	4a10      	ldr	r2, [pc, #64]	@ (8000f78 <HAL_MspInit+0x4c>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f78 <HAL_MspInit+0x4c>)
 8000f40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f78 <HAL_MspInit+0x4c>)
 8000f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f78 <HAL_MspInit+0x4c>)
 8000f50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f54:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f56:	4b08      	ldr	r3, [pc, #32]	@ (8000f78 <HAL_MspInit+0x4c>)
 8000f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f5e:	603b      	str	r3, [r7, #0]
 8000f60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	210f      	movs	r1, #15
 8000f66:	f06f 0001 	mvn.w	r0, #1
 8000f6a:	f001 fcbd 	bl	80028e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40021000 	.word	0x40021000

08000f7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b0ac      	sub	sp, #176	@ 0xb0
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f94:	f107 0310 	add.w	r3, r7, #16
 8000f98:	228c      	movs	r2, #140	@ 0x8c
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f008 fe83 	bl	8009ca8 <memset>
  if(hadc->Instance==ADC1)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a1f      	ldr	r2, [pc, #124]	@ (8001024 <HAL_ADC_MspInit+0xa8>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d137      	bne.n	800101c <HAL_ADC_MspInit+0xa0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fac:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000fb0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000fb2:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8000fb6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fba:	f107 0310 	add.w	r3, r7, #16
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f003 fc10 	bl	80047e4 <HAL_RCCEx_PeriphCLKConfig>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000fca:	f7ff ffa9 	bl	8000f20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000fce:	4b16      	ldr	r3, [pc, #88]	@ (8001028 <HAL_ADC_MspInit+0xac>)
 8000fd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd2:	4a15      	ldr	r2, [pc, #84]	@ (8001028 <HAL_ADC_MspInit+0xac>)
 8000fd4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000fd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fda:	4b13      	ldr	r3, [pc, #76]	@ (8001028 <HAL_ADC_MspInit+0xac>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe6:	4b10      	ldr	r3, [pc, #64]	@ (8001028 <HAL_ADC_MspInit+0xac>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fea:	4a0f      	ldr	r2, [pc, #60]	@ (8001028 <HAL_ADC_MspInit+0xac>)
 8000fec:	f043 0304 	orr.w	r3, r3, #4
 8000ff0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8001028 <HAL_ADC_MspInit+0xac>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff6:	f003 0304 	and.w	r3, r3, #4
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ffe:	2301      	movs	r3, #1
 8001000:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001004:	2303      	movs	r3, #3
 8001006:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001010:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001014:	4619      	mov	r1, r3
 8001016:	4805      	ldr	r0, [pc, #20]	@ (800102c <HAL_ADC_MspInit+0xb0>)
 8001018:	f001 fd10 	bl	8002a3c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800101c:	bf00      	nop
 800101e:	37b0      	adds	r7, #176	@ 0xb0
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	50040000 	.word	0x50040000
 8001028:	40021000 	.word	0x40021000
 800102c:	48000800 	.word	0x48000800

08001030 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08c      	sub	sp, #48	@ 0x30
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	f107 031c 	add.w	r3, r7, #28
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a45      	ldr	r2, [pc, #276]	@ (8001164 <HAL_CAN_MspInit+0x134>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d132      	bne.n	80010b8 <HAL_CAN_MspInit+0x88>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001052:	4b45      	ldr	r3, [pc, #276]	@ (8001168 <HAL_CAN_MspInit+0x138>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	3301      	adds	r3, #1
 8001058:	4a43      	ldr	r2, [pc, #268]	@ (8001168 <HAL_CAN_MspInit+0x138>)
 800105a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800105c:	4b42      	ldr	r3, [pc, #264]	@ (8001168 <HAL_CAN_MspInit+0x138>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d10b      	bne.n	800107c <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001064:	4b41      	ldr	r3, [pc, #260]	@ (800116c <HAL_CAN_MspInit+0x13c>)
 8001066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001068:	4a40      	ldr	r2, [pc, #256]	@ (800116c <HAL_CAN_MspInit+0x13c>)
 800106a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800106e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001070:	4b3e      	ldr	r3, [pc, #248]	@ (800116c <HAL_CAN_MspInit+0x13c>)
 8001072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001074:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001078:	61bb      	str	r3, [r7, #24]
 800107a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800107c:	4b3b      	ldr	r3, [pc, #236]	@ (800116c <HAL_CAN_MspInit+0x13c>)
 800107e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001080:	4a3a      	ldr	r2, [pc, #232]	@ (800116c <HAL_CAN_MspInit+0x13c>)
 8001082:	f043 0302 	orr.w	r3, r3, #2
 8001086:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001088:	4b38      	ldr	r3, [pc, #224]	@ (800116c <HAL_CAN_MspInit+0x13c>)
 800108a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108c:	f003 0302 	and.w	r3, r3, #2
 8001090:	617b      	str	r3, [r7, #20]
 8001092:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001094:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001098:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109a:	2302      	movs	r3, #2
 800109c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a2:	2303      	movs	r3, #3
 80010a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80010a6:	2309      	movs	r3, #9
 80010a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010aa:	f107 031c 	add.w	r3, r7, #28
 80010ae:	4619      	mov	r1, r3
 80010b0:	482f      	ldr	r0, [pc, #188]	@ (8001170 <HAL_CAN_MspInit+0x140>)
 80010b2:	f001 fcc3 	bl	8002a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80010b6:	e051      	b.n	800115c <HAL_CAN_MspInit+0x12c>
  else if(hcan->Instance==CAN2)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a2d      	ldr	r2, [pc, #180]	@ (8001174 <HAL_CAN_MspInit+0x144>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d14c      	bne.n	800115c <HAL_CAN_MspInit+0x12c>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80010c2:	4b2a      	ldr	r3, [pc, #168]	@ (800116c <HAL_CAN_MspInit+0x13c>)
 80010c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010c6:	4a29      	ldr	r2, [pc, #164]	@ (800116c <HAL_CAN_MspInit+0x13c>)
 80010c8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80010cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80010ce:	4b27      	ldr	r3, [pc, #156]	@ (800116c <HAL_CAN_MspInit+0x13c>)
 80010d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010d2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80010da:	4b23      	ldr	r3, [pc, #140]	@ (8001168 <HAL_CAN_MspInit+0x138>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	3301      	adds	r3, #1
 80010e0:	4a21      	ldr	r2, [pc, #132]	@ (8001168 <HAL_CAN_MspInit+0x138>)
 80010e2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80010e4:	4b20      	ldr	r3, [pc, #128]	@ (8001168 <HAL_CAN_MspInit+0x138>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d10b      	bne.n	8001104 <HAL_CAN_MspInit+0xd4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80010ec:	4b1f      	ldr	r3, [pc, #124]	@ (800116c <HAL_CAN_MspInit+0x13c>)
 80010ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010f0:	4a1e      	ldr	r2, [pc, #120]	@ (800116c <HAL_CAN_MspInit+0x13c>)
 80010f2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80010f8:	4b1c      	ldr	r3, [pc, #112]	@ (800116c <HAL_CAN_MspInit+0x13c>)
 80010fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001104:	4b19      	ldr	r3, [pc, #100]	@ (800116c <HAL_CAN_MspInit+0x13c>)
 8001106:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001108:	4a18      	ldr	r2, [pc, #96]	@ (800116c <HAL_CAN_MspInit+0x13c>)
 800110a:	f043 0302 	orr.w	r3, r3, #2
 800110e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001110:	4b16      	ldr	r3, [pc, #88]	@ (800116c <HAL_CAN_MspInit+0x13c>)
 8001112:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800111c:	2320      	movs	r3, #32
 800111e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001128:	2303      	movs	r3, #3
 800112a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_CAN2;
 800112c:	2303      	movs	r3, #3
 800112e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001130:	f107 031c 	add.w	r3, r7, #28
 8001134:	4619      	mov	r1, r3
 8001136:	480e      	ldr	r0, [pc, #56]	@ (8001170 <HAL_CAN_MspInit+0x140>)
 8001138:	f001 fc80 	bl	8002a3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800113c:	2340      	movs	r3, #64	@ 0x40
 800113e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	2302      	movs	r3, #2
 8001142:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001148:	2303      	movs	r3, #3
 800114a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN2;
 800114c:	2308      	movs	r3, #8
 800114e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001150:	f107 031c 	add.w	r3, r7, #28
 8001154:	4619      	mov	r1, r3
 8001156:	4806      	ldr	r0, [pc, #24]	@ (8001170 <HAL_CAN_MspInit+0x140>)
 8001158:	f001 fc70 	bl	8002a3c <HAL_GPIO_Init>
}
 800115c:	bf00      	nop
 800115e:	3730      	adds	r7, #48	@ 0x30
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40006400 	.word	0x40006400
 8001168:	20000248 	.word	0x20000248
 800116c:	40021000 	.word	0x40021000
 8001170:	48000400 	.word	0x48000400
 8001174:	40006800 	.word	0x40006800

08001178 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b0ac      	sub	sp, #176	@ 0xb0
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001190:	f107 0310 	add.w	r3, r7, #16
 8001194:	228c      	movs	r2, #140	@ 0x8c
 8001196:	2100      	movs	r1, #0
 8001198:	4618      	mov	r0, r3
 800119a:	f008 fd85 	bl	8009ca8 <memset>
  if(hi2c->Instance==I2C4)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a22      	ldr	r2, [pc, #136]	@ (800122c <HAL_I2C_MspInit+0xb4>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d13c      	bne.n	8001222 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80011a8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80011ac:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80011ae:	2300      	movs	r3, #0
 80011b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011b2:	f107 0310 	add.w	r3, r7, #16
 80011b6:	4618      	mov	r0, r3
 80011b8:	f003 fb14 	bl	80047e4 <HAL_RCCEx_PeriphCLKConfig>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80011c2:	f7ff fead 	bl	8000f20 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001230 <HAL_I2C_MspInit+0xb8>)
 80011c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ca:	4a19      	ldr	r2, [pc, #100]	@ (8001230 <HAL_I2C_MspInit+0xb8>)
 80011cc:	f043 0302 	orr.w	r3, r3, #2
 80011d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011d2:	4b17      	ldr	r3, [pc, #92]	@ (8001230 <HAL_I2C_MspInit+0xb8>)
 80011d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PB10     ------> I2C4_SCL
    PB11     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80011de:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80011e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011e6:	2312      	movs	r3, #18
 80011e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f2:	2303      	movs	r3, #3
 80011f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 80011f8:	2303      	movs	r3, #3
 80011fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fe:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001202:	4619      	mov	r1, r3
 8001204:	480b      	ldr	r0, [pc, #44]	@ (8001234 <HAL_I2C_MspInit+0xbc>)
 8001206:	f001 fc19 	bl	8002a3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 800120a:	4b09      	ldr	r3, [pc, #36]	@ (8001230 <HAL_I2C_MspInit+0xb8>)
 800120c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800120e:	4a08      	ldr	r2, [pc, #32]	@ (8001230 <HAL_I2C_MspInit+0xb8>)
 8001210:	f043 0302 	orr.w	r3, r3, #2
 8001214:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001216:	4b06      	ldr	r3, [pc, #24]	@ (8001230 <HAL_I2C_MspInit+0xb8>)
 8001218:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 8001222:	bf00      	nop
 8001224:	37b0      	adds	r7, #176	@ 0xb0
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40008400 	.word	0x40008400
 8001230:	40021000 	.word	0x40021000
 8001234:	48000400 	.word	0x48000400

08001238 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b0ac      	sub	sp, #176	@ 0xb0
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001250:	f107 0310 	add.w	r3, r7, #16
 8001254:	228c      	movs	r2, #140	@ 0x8c
 8001256:	2100      	movs	r1, #0
 8001258:	4618      	mov	r0, r3
 800125a:	f008 fd25 	bl	8009ca8 <memset>
  if(huart->Instance==UART4)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a25      	ldr	r2, [pc, #148]	@ (80012f8 <HAL_UART_MspInit+0xc0>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d143      	bne.n	80012f0 <HAL_UART_MspInit+0xb8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001268:	2308      	movs	r3, #8
 800126a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800126c:	2300      	movs	r3, #0
 800126e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001270:	f107 0310 	add.w	r3, r7, #16
 8001274:	4618      	mov	r0, r3
 8001276:	f003 fab5 	bl	80047e4 <HAL_RCCEx_PeriphCLKConfig>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001280:	f7ff fe4e 	bl	8000f20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001284:	4b1d      	ldr	r3, [pc, #116]	@ (80012fc <HAL_UART_MspInit+0xc4>)
 8001286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001288:	4a1c      	ldr	r2, [pc, #112]	@ (80012fc <HAL_UART_MspInit+0xc4>)
 800128a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800128e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001290:	4b1a      	ldr	r3, [pc, #104]	@ (80012fc <HAL_UART_MspInit+0xc4>)
 8001292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001294:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800129c:	4b17      	ldr	r3, [pc, #92]	@ (80012fc <HAL_UART_MspInit+0xc4>)
 800129e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a0:	4a16      	ldr	r2, [pc, #88]	@ (80012fc <HAL_UART_MspInit+0xc4>)
 80012a2:	f043 0304 	orr.w	r3, r3, #4
 80012a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012a8:	4b14      	ldr	r3, [pc, #80]	@ (80012fc <HAL_UART_MspInit+0xc4>)
 80012aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ac:	f003 0304 	and.w	r3, r3, #4
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80012b4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80012b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012bc:	2302      	movs	r3, #2
 80012be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c8:	2303      	movs	r3, #3
 80012ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80012ce:	2308      	movs	r3, #8
 80012d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012d4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012d8:	4619      	mov	r1, r3
 80012da:	4809      	ldr	r0, [pc, #36]	@ (8001300 <HAL_UART_MspInit+0xc8>)
 80012dc:	f001 fbae 	bl	8002a3c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80012e0:	2200      	movs	r2, #0
 80012e2:	2105      	movs	r1, #5
 80012e4:	2034      	movs	r0, #52	@ 0x34
 80012e6:	f001 faff 	bl	80028e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80012ea:	2034      	movs	r0, #52	@ 0x34
 80012ec:	f001 fb18 	bl	8002920 <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 80012f0:	bf00      	nop
 80012f2:	37b0      	adds	r7, #176	@ 0xb0
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40004c00 	.word	0x40004c00
 80012fc:	40021000 	.word	0x40021000
 8001300:	48000800 	.word	0x48000800

08001304 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08e      	sub	sp, #56	@ 0x38
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800130c:	2300      	movs	r3, #0
 800130e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001312:	4b34      	ldr	r3, [pc, #208]	@ (80013e4 <HAL_InitTick+0xe0>)
 8001314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001316:	4a33      	ldr	r2, [pc, #204]	@ (80013e4 <HAL_InitTick+0xe0>)
 8001318:	f043 0302 	orr.w	r3, r3, #2
 800131c:	6593      	str	r3, [r2, #88]	@ 0x58
 800131e:	4b31      	ldr	r3, [pc, #196]	@ (80013e4 <HAL_InitTick+0xe0>)
 8001320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800132a:	f107 0210 	add.w	r2, r7, #16
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	4611      	mov	r1, r2
 8001334:	4618      	mov	r0, r3
 8001336:	f003 f9c3 	bl	80046c0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800133a:	6a3b      	ldr	r3, [r7, #32]
 800133c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800133e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001340:	2b00      	cmp	r3, #0
 8001342:	d103      	bne.n	800134c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001344:	f003 f990 	bl	8004668 <HAL_RCC_GetPCLK1Freq>
 8001348:	6378      	str	r0, [r7, #52]	@ 0x34
 800134a:	e004      	b.n	8001356 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800134c:	f003 f98c 	bl	8004668 <HAL_RCC_GetPCLK1Freq>
 8001350:	4603      	mov	r3, r0
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001358:	4a23      	ldr	r2, [pc, #140]	@ (80013e8 <HAL_InitTick+0xe4>)
 800135a:	fba2 2303 	umull	r2, r3, r2, r3
 800135e:	0c9b      	lsrs	r3, r3, #18
 8001360:	3b01      	subs	r3, #1
 8001362:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001364:	4b21      	ldr	r3, [pc, #132]	@ (80013ec <HAL_InitTick+0xe8>)
 8001366:	4a22      	ldr	r2, [pc, #136]	@ (80013f0 <HAL_InitTick+0xec>)
 8001368:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 800136a:	4b20      	ldr	r3, [pc, #128]	@ (80013ec <HAL_InitTick+0xe8>)
 800136c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001370:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8001372:	4a1e      	ldr	r2, [pc, #120]	@ (80013ec <HAL_InitTick+0xe8>)
 8001374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001376:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001378:	4b1c      	ldr	r3, [pc, #112]	@ (80013ec <HAL_InitTick+0xe8>)
 800137a:	2200      	movs	r2, #0
 800137c:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137e:	4b1b      	ldr	r3, [pc, #108]	@ (80013ec <HAL_InitTick+0xe8>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001384:	4b19      	ldr	r3, [pc, #100]	@ (80013ec <HAL_InitTick+0xe8>)
 8001386:	2200      	movs	r2, #0
 8001388:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 800138a:	4818      	ldr	r0, [pc, #96]	@ (80013ec <HAL_InitTick+0xe8>)
 800138c:	f003 fef4 	bl	8005178 <HAL_TIM_Base_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001396:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800139a:	2b00      	cmp	r3, #0
 800139c:	d11b      	bne.n	80013d6 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 800139e:	4813      	ldr	r0, [pc, #76]	@ (80013ec <HAL_InitTick+0xe8>)
 80013a0:	f003 ff4c 	bl	800523c <HAL_TIM_Base_Start_IT>
 80013a4:	4603      	mov	r3, r0
 80013a6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80013aa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d111      	bne.n	80013d6 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80013b2:	201d      	movs	r0, #29
 80013b4:	f001 fab4 	bl	8002920 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b0f      	cmp	r3, #15
 80013bc:	d808      	bhi.n	80013d0 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 80013be:	2200      	movs	r2, #0
 80013c0:	6879      	ldr	r1, [r7, #4]
 80013c2:	201d      	movs	r0, #29
 80013c4:	f001 fa90 	bl	80028e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013c8:	4a0a      	ldr	r2, [pc, #40]	@ (80013f4 <HAL_InitTick+0xf0>)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6013      	str	r3, [r2, #0]
 80013ce:	e002      	b.n	80013d6 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80013d6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3738      	adds	r7, #56	@ 0x38
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40021000 	.word	0x40021000
 80013e8:	431bde83 	.word	0x431bde83
 80013ec:	2000024c 	.word	0x2000024c
 80013f0:	40000400 	.word	0x40000400
 80013f4:	20000004 	.word	0x20000004

080013f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013fc:	bf00      	nop
 80013fe:	e7fd      	b.n	80013fc <NMI_Handler+0x4>

08001400 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <HardFault_Handler+0x4>

08001408 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800140c:	bf00      	nop
 800140e:	e7fd      	b.n	800140c <MemManage_Handler+0x4>

08001410 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001414:	bf00      	nop
 8001416:	e7fd      	b.n	8001414 <BusFault_Handler+0x4>

08001418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800141c:	bf00      	nop
 800141e:	e7fd      	b.n	800141c <UsageFault_Handler+0x4>

08001420 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Alert1_Pin);
 8001432:	2004      	movs	r0, #4
 8001434:	f001 fcc6 	bl	8002dc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}

0800143c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001440:	4802      	ldr	r0, [pc, #8]	@ (800144c <TIM3_IRQHandler+0x10>)
 8001442:	f003 ff6b 	bl	800531c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	2000024c 	.word	0x2000024c

08001450 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001454:	4802      	ldr	r0, [pc, #8]	@ (8001460 <UART4_IRQHandler+0x10>)
 8001456:	f004 f9ef 	bl	8005838 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000188 	.word	0x20000188

08001464 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001468:	4b06      	ldr	r3, [pc, #24]	@ (8001484 <SystemInit+0x20>)
 800146a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800146e:	4a05      	ldr	r2, [pc, #20]	@ (8001484 <SystemInit+0x20>)
 8001470:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001474:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001488:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800148c:	f7ff ffea 	bl	8001464 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001490:	480c      	ldr	r0, [pc, #48]	@ (80014c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001492:	490d      	ldr	r1, [pc, #52]	@ (80014c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001494:	4a0d      	ldr	r2, [pc, #52]	@ (80014cc <LoopForever+0xe>)
  movs r3, #0
 8001496:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001498:	e002      	b.n	80014a0 <LoopCopyDataInit>

0800149a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800149a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800149c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800149e:	3304      	adds	r3, #4

080014a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a4:	d3f9      	bcc.n	800149a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014a6:	4a0a      	ldr	r2, [pc, #40]	@ (80014d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014a8:	4c0a      	ldr	r4, [pc, #40]	@ (80014d4 <LoopForever+0x16>)
  movs r3, #0
 80014aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014ac:	e001      	b.n	80014b2 <LoopFillZerobss>

080014ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b0:	3204      	adds	r2, #4

080014b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b4:	d3fb      	bcc.n	80014ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014b6:	f008 fc55 	bl	8009d64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014ba:	f7ff fa11 	bl	80008e0 <main>

080014be <LoopForever>:

LoopForever:
    b LoopForever
 80014be:	e7fe      	b.n	80014be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014c0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80014c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014c8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80014cc:	08009fc4 	.word	0x08009fc4
  ldr r2, =_sbss
 80014d0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80014d4:	20001d7c 	.word	0x20001d7c

080014d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014d8:	e7fe      	b.n	80014d8 <ADC1_2_IRQHandler>

080014da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014e0:	2300      	movs	r3, #0
 80014e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e4:	2003      	movs	r0, #3
 80014e6:	f001 f9f4 	bl	80028d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014ea:	200f      	movs	r0, #15
 80014ec:	f7ff ff0a 	bl	8001304 <HAL_InitTick>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d002      	beq.n	80014fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	71fb      	strb	r3, [r7, #7]
 80014fa:	e001      	b.n	8001500 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014fc:	f7ff fd16 	bl	8000f2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001500:	79fb      	ldrb	r3, [r7, #7]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
	...

0800150c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001510:	4b06      	ldr	r3, [pc, #24]	@ (800152c <HAL_IncTick+0x20>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	461a      	mov	r2, r3
 8001516:	4b06      	ldr	r3, [pc, #24]	@ (8001530 <HAL_IncTick+0x24>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4413      	add	r3, r2
 800151c:	4a04      	ldr	r2, [pc, #16]	@ (8001530 <HAL_IncTick+0x24>)
 800151e:	6013      	str	r3, [r2, #0]
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	20000008 	.word	0x20000008
 8001530:	20000298 	.word	0x20000298

08001534 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  return uwTick;
 8001538:	4b03      	ldr	r3, [pc, #12]	@ (8001548 <HAL_GetTick+0x14>)
 800153a:	681b      	ldr	r3, [r3, #0]
}
 800153c:	4618      	mov	r0, r3
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	20000298 	.word	0x20000298

0800154c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	431a      	orrs	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	609a      	str	r2, [r3, #8]
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001572:	b480      	push	{r7}
 8001574:	b083      	sub	sp, #12
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
 800157a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	431a      	orrs	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	609a      	str	r2, [r3, #8]
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b087      	sub	sp, #28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
 80015c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	3360      	adds	r3, #96	@ 0x60
 80015c6:	461a      	mov	r2, r3
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4413      	add	r3, r2
 80015ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4b08      	ldr	r3, [pc, #32]	@ (80015f8 <LL_ADC_SetOffset+0x44>)
 80015d6:	4013      	ands	r3, r2
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	430a      	orrs	r2, r1
 80015e2:	4313      	orrs	r3, r2
 80015e4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80015ec:	bf00      	nop
 80015ee:	371c      	adds	r7, #28
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	03fff000 	.word	0x03fff000

080015fc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	3360      	adds	r3, #96	@ 0x60
 800160a:	461a      	mov	r2, r3
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800161c:	4618      	mov	r0, r3
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001628:	b480      	push	{r7}
 800162a:	b087      	sub	sp, #28
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	3360      	adds	r3, #96	@ 0x60
 8001638:	461a      	mov	r2, r3
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4413      	add	r3, r2
 8001640:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	431a      	orrs	r2, r3
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001652:	bf00      	nop
 8001654:	371c      	adds	r7, #28
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800165e:	b480      	push	{r7}
 8001660:	b083      	sub	sp, #12
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
 8001666:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	695b      	ldr	r3, [r3, #20]
 800166c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	431a      	orrs	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	615a      	str	r2, [r3, #20]
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001684:	b480      	push	{r7}
 8001686:	b087      	sub	sp, #28
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	3330      	adds	r3, #48	@ 0x30
 8001694:	461a      	mov	r2, r3
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	0a1b      	lsrs	r3, r3, #8
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	f003 030c 	and.w	r3, r3, #12
 80016a0:	4413      	add	r3, r2
 80016a2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	f003 031f 	and.w	r3, r3, #31
 80016ae:	211f      	movs	r1, #31
 80016b0:	fa01 f303 	lsl.w	r3, r1, r3
 80016b4:	43db      	mvns	r3, r3
 80016b6:	401a      	ands	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	0e9b      	lsrs	r3, r3, #26
 80016bc:	f003 011f 	and.w	r1, r3, #31
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	f003 031f 	and.w	r3, r3, #31
 80016c6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ca:	431a      	orrs	r2, r3
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80016d0:	bf00      	nop
 80016d2:	371c      	adds	r7, #28
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80016dc:	b480      	push	{r7}
 80016de:	b087      	sub	sp, #28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	3314      	adds	r3, #20
 80016ec:	461a      	mov	r2, r3
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	0e5b      	lsrs	r3, r3, #25
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	f003 0304 	and.w	r3, r3, #4
 80016f8:	4413      	add	r3, r2
 80016fa:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	0d1b      	lsrs	r3, r3, #20
 8001704:	f003 031f 	and.w	r3, r3, #31
 8001708:	2107      	movs	r1, #7
 800170a:	fa01 f303 	lsl.w	r3, r1, r3
 800170e:	43db      	mvns	r3, r3
 8001710:	401a      	ands	r2, r3
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	0d1b      	lsrs	r3, r3, #20
 8001716:	f003 031f 	and.w	r3, r3, #31
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	fa01 f303 	lsl.w	r3, r1, r3
 8001720:	431a      	orrs	r2, r3
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001726:	bf00      	nop
 8001728:	371c      	adds	r7, #28
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
	...

08001734 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800174c:	43db      	mvns	r3, r3
 800174e:	401a      	ands	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f003 0318 	and.w	r3, r3, #24
 8001756:	4908      	ldr	r1, [pc, #32]	@ (8001778 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001758:	40d9      	lsrs	r1, r3
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	400b      	ands	r3, r1
 800175e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001762:	431a      	orrs	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800176a:	bf00      	nop
 800176c:	3714      	adds	r7, #20
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	0007ffff 	.word	0x0007ffff

0800177c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800178c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	6093      	str	r3, [r2, #8]
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80017b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80017b4:	d101      	bne.n	80017ba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80017b6:	2301      	movs	r3, #1
 80017b8:	e000      	b.n	80017bc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80017d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80017dc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001800:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001804:	d101      	bne.n	800180a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001806:	2301      	movs	r3, #1
 8001808:	e000      	b.n	800180c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800180a:	2300      	movs	r3, #0
}
 800180c:	4618      	mov	r0, r3
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	2b01      	cmp	r3, #1
 800182a:	d101      	bne.n	8001830 <LL_ADC_IsEnabled+0x18>
 800182c:	2301      	movs	r3, #1
 800182e:	e000      	b.n	8001832 <LL_ADC_IsEnabled+0x1a>
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800183e:	b480      	push	{r7}
 8001840:	b083      	sub	sp, #12
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 0304 	and.w	r3, r3, #4
 800184e:	2b04      	cmp	r3, #4
 8001850:	d101      	bne.n	8001856 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f003 0308 	and.w	r3, r3, #8
 8001874:	2b08      	cmp	r3, #8
 8001876:	d101      	bne.n	800187c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001878:	2301      	movs	r3, #1
 800187a:	e000      	b.n	800187e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
	...

0800188c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800188c:	b590      	push	{r4, r7, lr}
 800188e:	b089      	sub	sp, #36	@ 0x24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001894:	2300      	movs	r3, #0
 8001896:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001898:	2300      	movs	r3, #0
 800189a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e133      	b.n	8001b0e <HAL_ADC_Init+0x282>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d109      	bne.n	80018c8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff fb61 	bl	8000f7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff ff67 	bl	80017a0 <LL_ADC_IsDeepPowerDownEnabled>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d004      	beq.n	80018e2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff ff4d 	bl	800177c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff ff82 	bl	80017f0 <LL_ADC_IsInternalRegulatorEnabled>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d115      	bne.n	800191e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff ff66 	bl	80017c8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018fc:	4b86      	ldr	r3, [pc, #536]	@ (8001b18 <HAL_ADC_Init+0x28c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	099b      	lsrs	r3, r3, #6
 8001902:	4a86      	ldr	r2, [pc, #536]	@ (8001b1c <HAL_ADC_Init+0x290>)
 8001904:	fba2 2303 	umull	r2, r3, r2, r3
 8001908:	099b      	lsrs	r3, r3, #6
 800190a:	3301      	adds	r3, #1
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001910:	e002      	b.n	8001918 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	3b01      	subs	r3, #1
 8001916:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1f9      	bne.n	8001912 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff ff64 	bl	80017f0 <LL_ADC_IsInternalRegulatorEnabled>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d10d      	bne.n	800194a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001932:	f043 0210 	orr.w	r2, r3, #16
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800193e:	f043 0201 	orr.w	r2, r3, #1
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff ff75 	bl	800183e <LL_ADC_REG_IsConversionOngoing>
 8001954:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800195a:	f003 0310 	and.w	r3, r3, #16
 800195e:	2b00      	cmp	r3, #0
 8001960:	f040 80cc 	bne.w	8001afc <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	2b00      	cmp	r3, #0
 8001968:	f040 80c8 	bne.w	8001afc <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001970:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001974:	f043 0202 	orr.w	r2, r3, #2
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff ff49 	bl	8001818 <LL_ADC_IsEnabled>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d115      	bne.n	80019b8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800198c:	4864      	ldr	r0, [pc, #400]	@ (8001b20 <HAL_ADC_Init+0x294>)
 800198e:	f7ff ff43 	bl	8001818 <LL_ADC_IsEnabled>
 8001992:	4604      	mov	r4, r0
 8001994:	4863      	ldr	r0, [pc, #396]	@ (8001b24 <HAL_ADC_Init+0x298>)
 8001996:	f7ff ff3f 	bl	8001818 <LL_ADC_IsEnabled>
 800199a:	4603      	mov	r3, r0
 800199c:	431c      	orrs	r4, r3
 800199e:	4862      	ldr	r0, [pc, #392]	@ (8001b28 <HAL_ADC_Init+0x29c>)
 80019a0:	f7ff ff3a 	bl	8001818 <LL_ADC_IsEnabled>
 80019a4:	4603      	mov	r3, r0
 80019a6:	4323      	orrs	r3, r4
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d105      	bne.n	80019b8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	4619      	mov	r1, r3
 80019b2:	485e      	ldr	r0, [pc, #376]	@ (8001b2c <HAL_ADC_Init+0x2a0>)
 80019b4:	f7ff fdca 	bl	800154c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	7e5b      	ldrb	r3, [r3, #25]
 80019bc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019c2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80019c8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80019ce:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019d6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019d8:	4313      	orrs	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d106      	bne.n	80019f4 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ea:	3b01      	subs	r3, #1
 80019ec:	045b      	lsls	r3, r3, #17
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d009      	beq.n	8001a10 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a00:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a08:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	68da      	ldr	r2, [r3, #12]
 8001a16:	4b46      	ldr	r3, [pc, #280]	@ (8001b30 <HAL_ADC_Init+0x2a4>)
 8001a18:	4013      	ands	r3, r2
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	6812      	ldr	r2, [r2, #0]
 8001a1e:	69b9      	ldr	r1, [r7, #24]
 8001a20:	430b      	orrs	r3, r1
 8001a22:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff ff1b 	bl	8001864 <LL_ADC_INJ_IsConversionOngoing>
 8001a2e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d140      	bne.n	8001ab8 <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d13d      	bne.n	8001ab8 <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	7e1b      	ldrb	r3, [r3, #24]
 8001a44:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a46:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001a4e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a50:	4313      	orrs	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001a5e:	f023 0306 	bic.w	r3, r3, #6
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	6812      	ldr	r2, [r2, #0]
 8001a66:	69b9      	ldr	r1, [r7, #24]
 8001a68:	430b      	orrs	r3, r1
 8001a6a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d118      	bne.n	8001aa8 <HAL_ADC_Init+0x21c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	691b      	ldr	r3, [r3, #16]
 8001a7c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001a80:	f023 0304 	bic.w	r3, r3, #4
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001a8c:	4311      	orrs	r1, r2
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001a92:	4311      	orrs	r1, r2
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f042 0201 	orr.w	r2, r2, #1
 8001aa4:	611a      	str	r2, [r3, #16]
 8001aa6:	e007      	b.n	8001ab8 <HAL_ADC_Init+0x22c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	691a      	ldr	r2, [r3, #16]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f022 0201 	bic.w	r2, r2, #1
 8001ab6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d10c      	bne.n	8001ada <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac6:	f023 010f 	bic.w	r1, r3, #15
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	1e5a      	subs	r2, r3, #1
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ad8:	e007      	b.n	8001aea <HAL_ADC_Init+0x25e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f022 020f 	bic.w	r2, r2, #15
 8001ae8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aee:	f023 0303 	bic.w	r3, r3, #3
 8001af2:	f043 0201 	orr.w	r2, r3, #1
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	659a      	str	r2, [r3, #88]	@ 0x58
 8001afa:	e007      	b.n	8001b0c <HAL_ADC_Init+0x280>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b00:	f043 0210 	orr.w	r2, r3, #16
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b0c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3724      	adds	r7, #36	@ 0x24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd90      	pop	{r4, r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000000 	.word	0x20000000
 8001b1c:	053e2d63 	.word	0x053e2d63
 8001b20:	50040000 	.word	0x50040000
 8001b24:	50040100 	.word	0x50040100
 8001b28:	50040200 	.word	0x50040200
 8001b2c:	50040300 	.word	0x50040300
 8001b30:	fff0c007 	.word	0xfff0c007

08001b34 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b0b6      	sub	sp, #216	@ 0xd8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d101      	bne.n	8001b56 <HAL_ADC_ConfigChannel+0x22>
 8001b52:	2302      	movs	r3, #2
 8001b54:	e3e3      	b.n	800231e <HAL_ADC_ConfigChannel+0x7ea>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fe6b 	bl	800183e <LL_ADC_REG_IsConversionOngoing>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f040 83c4 	bne.w	80022f8 <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	2b05      	cmp	r3, #5
 8001b7e:	d824      	bhi.n	8001bca <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	3b02      	subs	r3, #2
 8001b86:	2b03      	cmp	r3, #3
 8001b88:	d81b      	bhi.n	8001bc2 <HAL_ADC_ConfigChannel+0x8e>
 8001b8a:	a201      	add	r2, pc, #4	@ (adr r2, 8001b90 <HAL_ADC_ConfigChannel+0x5c>)
 8001b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b90:	08001ba1 	.word	0x08001ba1
 8001b94:	08001ba9 	.word	0x08001ba9
 8001b98:	08001bb1 	.word	0x08001bb1
 8001b9c:	08001bb9 	.word	0x08001bb9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001ba0:	230c      	movs	r3, #12
 8001ba2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001ba6:	e010      	b.n	8001bca <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001ba8:	2312      	movs	r3, #18
 8001baa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001bae:	e00c      	b.n	8001bca <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001bb0:	2318      	movs	r3, #24
 8001bb2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001bb6:	e008      	b.n	8001bca <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001bb8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001bc0:	e003      	b.n	8001bca <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001bc2:	2306      	movs	r3, #6
 8001bc4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001bc8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6818      	ldr	r0, [r3, #0]
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001bd8:	f7ff fd54 	bl	8001684 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff fe2c 	bl	800183e <LL_ADC_REG_IsConversionOngoing>
 8001be6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff fe38 	bl	8001864 <LL_ADC_INJ_IsConversionOngoing>
 8001bf4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bf8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f040 81bf 	bne.w	8001f80 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	f040 81ba 	bne.w	8001f80 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001c14:	d10f      	bne.n	8001c36 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6818      	ldr	r0, [r3, #0]
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	4619      	mov	r1, r3
 8001c22:	f7ff fd5b 	bl	80016dc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff fd15 	bl	800165e <LL_ADC_SetSamplingTimeCommonConfig>
 8001c34:	e00e      	b.n	8001c54 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6818      	ldr	r0, [r3, #0]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	6819      	ldr	r1, [r3, #0]
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	461a      	mov	r2, r3
 8001c44:	f7ff fd4a 	bl	80016dc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff fd05 	bl	800165e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	695a      	ldr	r2, [r3, #20]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	08db      	lsrs	r3, r3, #3
 8001c60:	f003 0303 	and.w	r3, r3, #3
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	2b04      	cmp	r3, #4
 8001c74:	d00a      	beq.n	8001c8c <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6818      	ldr	r0, [r3, #0]
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	6919      	ldr	r1, [r3, #16]
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001c86:	f7ff fc95 	bl	80015b4 <LL_ADC_SetOffset>
 8001c8a:	e179      	b.n	8001f80 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2100      	movs	r1, #0
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff fcb2 	bl	80015fc <LL_ADC_GetOffsetChannel>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d10a      	bne.n	8001cb8 <HAL_ADC_ConfigChannel+0x184>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff fca7 	bl	80015fc <LL_ADC_GetOffsetChannel>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	0e9b      	lsrs	r3, r3, #26
 8001cb2:	f003 021f 	and.w	r2, r3, #31
 8001cb6:	e01e      	b.n	8001cf6 <HAL_ADC_ConfigChannel+0x1c2>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff fc9c 	bl	80015fc <LL_ADC_GetOffsetChannel>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001cce:	fa93 f3a3 	rbit	r3, r3
 8001cd2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001cd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001cda:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001cde:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8001ce6:	2320      	movs	r3, #32
 8001ce8:	e004      	b.n	8001cf4 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8001cea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001cee:	fab3 f383 	clz	r3, r3
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d105      	bne.n	8001d0e <HAL_ADC_ConfigChannel+0x1da>
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	0e9b      	lsrs	r3, r3, #26
 8001d08:	f003 031f 	and.w	r3, r3, #31
 8001d0c:	e018      	b.n	8001d40 <HAL_ADC_ConfigChannel+0x20c>
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001d1a:	fa93 f3a3 	rbit	r3, r3
 8001d1e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001d22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d26:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001d2a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8001d32:	2320      	movs	r3, #32
 8001d34:	e004      	b.n	8001d40 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8001d36:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d3a:	fab3 f383 	clz	r3, r3
 8001d3e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d106      	bne.n	8001d52 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff fc6b 	bl	8001628 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2101      	movs	r1, #1
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff fc4f 	bl	80015fc <LL_ADC_GetOffsetChannel>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d10a      	bne.n	8001d7e <HAL_ADC_ConfigChannel+0x24a>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff fc44 	bl	80015fc <LL_ADC_GetOffsetChannel>
 8001d74:	4603      	mov	r3, r0
 8001d76:	0e9b      	lsrs	r3, r3, #26
 8001d78:	f003 021f 	and.w	r2, r3, #31
 8001d7c:	e01e      	b.n	8001dbc <HAL_ADC_ConfigChannel+0x288>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2101      	movs	r1, #1
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff fc39 	bl	80015fc <LL_ADC_GetOffsetChannel>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d90:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001d94:	fa93 f3a3 	rbit	r3, r3
 8001d98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001d9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001da0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001da4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d101      	bne.n	8001db0 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8001dac:	2320      	movs	r3, #32
 8001dae:	e004      	b.n	8001dba <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8001db0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001db4:	fab3 f383 	clz	r3, r3
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d105      	bne.n	8001dd4 <HAL_ADC_ConfigChannel+0x2a0>
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	0e9b      	lsrs	r3, r3, #26
 8001dce:	f003 031f 	and.w	r3, r3, #31
 8001dd2:	e018      	b.n	8001e06 <HAL_ADC_ConfigChannel+0x2d2>
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ddc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001de0:	fa93 f3a3 	rbit	r3, r3
 8001de4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001de8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001dec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001df0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d101      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8001df8:	2320      	movs	r3, #32
 8001dfa:	e004      	b.n	8001e06 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8001dfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001e00:	fab3 f383 	clz	r3, r3
 8001e04:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d106      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2101      	movs	r1, #1
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff fc08 	bl	8001628 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2102      	movs	r1, #2
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff fbec 	bl	80015fc <LL_ADC_GetOffsetChannel>
 8001e24:	4603      	mov	r3, r0
 8001e26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10a      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x310>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2102      	movs	r1, #2
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff fbe1 	bl	80015fc <LL_ADC_GetOffsetChannel>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	0e9b      	lsrs	r3, r3, #26
 8001e3e:	f003 021f 	and.w	r2, r3, #31
 8001e42:	e01e      	b.n	8001e82 <HAL_ADC_ConfigChannel+0x34e>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2102      	movs	r1, #2
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff fbd6 	bl	80015fc <LL_ADC_GetOffsetChannel>
 8001e50:	4603      	mov	r3, r0
 8001e52:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e56:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001e5a:	fa93 f3a3 	rbit	r3, r3
 8001e5e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001e62:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001e66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001e6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8001e72:	2320      	movs	r3, #32
 8001e74:	e004      	b.n	8001e80 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8001e76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e7a:	fab3 f383 	clz	r3, r3
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d105      	bne.n	8001e9a <HAL_ADC_ConfigChannel+0x366>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	0e9b      	lsrs	r3, r3, #26
 8001e94:	f003 031f 	and.w	r3, r3, #31
 8001e98:	e014      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x390>
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001ea2:	fa93 f3a3 	rbit	r3, r3
 8001ea6:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001ea8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001eaa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001eae:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8001eb6:	2320      	movs	r3, #32
 8001eb8:	e004      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8001eba:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001ebe:	fab3 f383 	clz	r3, r3
 8001ec2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d106      	bne.n	8001ed6 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	2102      	movs	r1, #2
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff fba9 	bl	8001628 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2103      	movs	r1, #3
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff fb8d 	bl	80015fc <LL_ADC_GetOffsetChannel>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d10a      	bne.n	8001f02 <HAL_ADC_ConfigChannel+0x3ce>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2103      	movs	r1, #3
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff fb82 	bl	80015fc <LL_ADC_GetOffsetChannel>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	0e9b      	lsrs	r3, r3, #26
 8001efc:	f003 021f 	and.w	r2, r3, #31
 8001f00:	e017      	b.n	8001f32 <HAL_ADC_ConfigChannel+0x3fe>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2103      	movs	r1, #3
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff fb77 	bl	80015fc <LL_ADC_GetOffsetChannel>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f14:	fa93 f3a3 	rbit	r3, r3
 8001f18:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001f1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f1c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001f1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8001f24:	2320      	movs	r3, #32
 8001f26:	e003      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8001f28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f2a:	fab3 f383 	clz	r3, r3
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d105      	bne.n	8001f4a <HAL_ADC_ConfigChannel+0x416>
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	0e9b      	lsrs	r3, r3, #26
 8001f44:	f003 031f 	and.w	r3, r3, #31
 8001f48:	e011      	b.n	8001f6e <HAL_ADC_ConfigChannel+0x43a>
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f52:	fa93 f3a3 	rbit	r3, r3
 8001f56:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001f58:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f5a:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001f5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8001f62:	2320      	movs	r3, #32
 8001f64:	e003      	b.n	8001f6e <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8001f66:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f68:	fab3 f383 	clz	r3, r3
 8001f6c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d106      	bne.n	8001f80 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2200      	movs	r2, #0
 8001f78:	2103      	movs	r1, #3
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff fb54 	bl	8001628 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff fc47 	bl	8001818 <LL_ADC_IsEnabled>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f040 813f 	bne.w	8002210 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6818      	ldr	r0, [r3, #0]
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	6819      	ldr	r1, [r3, #0]
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	f7ff fbc8 	bl	8001734 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	4a8e      	ldr	r2, [pc, #568]	@ (80021e4 <HAL_ADC_ConfigChannel+0x6b0>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	f040 8130 	bne.w	8002210 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d10b      	bne.n	8001fd8 <HAL_ADC_ConfigChannel+0x4a4>
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	0e9b      	lsrs	r3, r3, #26
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	f003 031f 	and.w	r3, r3, #31
 8001fcc:	2b09      	cmp	r3, #9
 8001fce:	bf94      	ite	ls
 8001fd0:	2301      	movls	r3, #1
 8001fd2:	2300      	movhi	r3, #0
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	e019      	b.n	800200c <HAL_ADC_ConfigChannel+0x4d8>
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fde:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001fe0:	fa93 f3a3 	rbit	r3, r3
 8001fe4:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001fe6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fe8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001fea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d101      	bne.n	8001ff4 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8001ff0:	2320      	movs	r3, #32
 8001ff2:	e003      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8001ff4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ff6:	fab3 f383 	clz	r3, r3
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	f003 031f 	and.w	r3, r3, #31
 8002002:	2b09      	cmp	r3, #9
 8002004:	bf94      	ite	ls
 8002006:	2301      	movls	r3, #1
 8002008:	2300      	movhi	r3, #0
 800200a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800200c:	2b00      	cmp	r3, #0
 800200e:	d079      	beq.n	8002104 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002018:	2b00      	cmp	r3, #0
 800201a:	d107      	bne.n	800202c <HAL_ADC_ConfigChannel+0x4f8>
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	0e9b      	lsrs	r3, r3, #26
 8002022:	3301      	adds	r3, #1
 8002024:	069b      	lsls	r3, r3, #26
 8002026:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800202a:	e015      	b.n	8002058 <HAL_ADC_ConfigChannel+0x524>
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002032:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002034:	fa93 f3a3 	rbit	r3, r3
 8002038:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800203a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800203c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800203e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002040:	2b00      	cmp	r3, #0
 8002042:	d101      	bne.n	8002048 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002044:	2320      	movs	r3, #32
 8002046:	e003      	b.n	8002050 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002048:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800204a:	fab3 f383 	clz	r3, r3
 800204e:	b2db      	uxtb	r3, r3
 8002050:	3301      	adds	r3, #1
 8002052:	069b      	lsls	r3, r3, #26
 8002054:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002060:	2b00      	cmp	r3, #0
 8002062:	d109      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x544>
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	0e9b      	lsrs	r3, r3, #26
 800206a:	3301      	adds	r3, #1
 800206c:	f003 031f 	and.w	r3, r3, #31
 8002070:	2101      	movs	r1, #1
 8002072:	fa01 f303 	lsl.w	r3, r1, r3
 8002076:	e017      	b.n	80020a8 <HAL_ADC_ConfigChannel+0x574>
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002080:	fa93 f3a3 	rbit	r3, r3
 8002084:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002088:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800208a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800208c:	2b00      	cmp	r3, #0
 800208e:	d101      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002090:	2320      	movs	r3, #32
 8002092:	e003      	b.n	800209c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002094:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002096:	fab3 f383 	clz	r3, r3
 800209a:	b2db      	uxtb	r3, r3
 800209c:	3301      	adds	r3, #1
 800209e:	f003 031f 	and.w	r3, r3, #31
 80020a2:	2101      	movs	r1, #1
 80020a4:	fa01 f303 	lsl.w	r3, r1, r3
 80020a8:	ea42 0103 	orr.w	r1, r2, r3
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d10a      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x59a>
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	0e9b      	lsrs	r3, r3, #26
 80020be:	3301      	adds	r3, #1
 80020c0:	f003 021f 	and.w	r2, r3, #31
 80020c4:	4613      	mov	r3, r2
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	4413      	add	r3, r2
 80020ca:	051b      	lsls	r3, r3, #20
 80020cc:	e018      	b.n	8002100 <HAL_ADC_ConfigChannel+0x5cc>
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020d6:	fa93 f3a3 	rbit	r3, r3
 80020da:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80020dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020de:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80020e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80020e6:	2320      	movs	r3, #32
 80020e8:	e003      	b.n	80020f2 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80020ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020ec:	fab3 f383 	clz	r3, r3
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	3301      	adds	r3, #1
 80020f4:	f003 021f 	and.w	r2, r3, #31
 80020f8:	4613      	mov	r3, r2
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	4413      	add	r3, r2
 80020fe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002100:	430b      	orrs	r3, r1
 8002102:	e080      	b.n	8002206 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800210c:	2b00      	cmp	r3, #0
 800210e:	d107      	bne.n	8002120 <HAL_ADC_ConfigChannel+0x5ec>
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	0e9b      	lsrs	r3, r3, #26
 8002116:	3301      	adds	r3, #1
 8002118:	069b      	lsls	r3, r3, #26
 800211a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800211e:	e015      	b.n	800214c <HAL_ADC_ConfigChannel+0x618>
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002128:	fa93 f3a3 	rbit	r3, r3
 800212c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800212e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002130:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002134:	2b00      	cmp	r3, #0
 8002136:	d101      	bne.n	800213c <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002138:	2320      	movs	r3, #32
 800213a:	e003      	b.n	8002144 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 800213c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800213e:	fab3 f383 	clz	r3, r3
 8002142:	b2db      	uxtb	r3, r3
 8002144:	3301      	adds	r3, #1
 8002146:	069b      	lsls	r3, r3, #26
 8002148:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002154:	2b00      	cmp	r3, #0
 8002156:	d109      	bne.n	800216c <HAL_ADC_ConfigChannel+0x638>
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	0e9b      	lsrs	r3, r3, #26
 800215e:	3301      	adds	r3, #1
 8002160:	f003 031f 	and.w	r3, r3, #31
 8002164:	2101      	movs	r1, #1
 8002166:	fa01 f303 	lsl.w	r3, r1, r3
 800216a:	e017      	b.n	800219c <HAL_ADC_ConfigChannel+0x668>
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	fa93 f3a3 	rbit	r3, r3
 8002178:	61bb      	str	r3, [r7, #24]
  return result;
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800217e:	6a3b      	ldr	r3, [r7, #32]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002184:	2320      	movs	r3, #32
 8002186:	e003      	b.n	8002190 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002188:	6a3b      	ldr	r3, [r7, #32]
 800218a:	fab3 f383 	clz	r3, r3
 800218e:	b2db      	uxtb	r3, r3
 8002190:	3301      	adds	r3, #1
 8002192:	f003 031f 	and.w	r3, r3, #31
 8002196:	2101      	movs	r1, #1
 8002198:	fa01 f303 	lsl.w	r3, r1, r3
 800219c:	ea42 0103 	orr.w	r1, r2, r3
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d10d      	bne.n	80021c8 <HAL_ADC_ConfigChannel+0x694>
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	0e9b      	lsrs	r3, r3, #26
 80021b2:	3301      	adds	r3, #1
 80021b4:	f003 021f 	and.w	r2, r3, #31
 80021b8:	4613      	mov	r3, r2
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	4413      	add	r3, r2
 80021be:	3b1e      	subs	r3, #30
 80021c0:	051b      	lsls	r3, r3, #20
 80021c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80021c6:	e01d      	b.n	8002204 <HAL_ADC_ConfigChannel+0x6d0>
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	fa93 f3a3 	rbit	r3, r3
 80021d4:	60fb      	str	r3, [r7, #12]
  return result;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d103      	bne.n	80021e8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80021e0:	2320      	movs	r3, #32
 80021e2:	e005      	b.n	80021f0 <HAL_ADC_ConfigChannel+0x6bc>
 80021e4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	fab3 f383 	clz	r3, r3
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	3301      	adds	r3, #1
 80021f2:	f003 021f 	and.w	r2, r3, #31
 80021f6:	4613      	mov	r3, r2
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	4413      	add	r3, r2
 80021fc:	3b1e      	subs	r3, #30
 80021fe:	051b      	lsls	r3, r3, #20
 8002200:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002204:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800220a:	4619      	mov	r1, r3
 800220c:	f7ff fa66 	bl	80016dc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	4b44      	ldr	r3, [pc, #272]	@ (8002328 <HAL_ADC_ConfigChannel+0x7f4>)
 8002216:	4013      	ands	r3, r2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d07a      	beq.n	8002312 <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800221c:	4843      	ldr	r0, [pc, #268]	@ (800232c <HAL_ADC_ConfigChannel+0x7f8>)
 800221e:	f7ff f9bb 	bl	8001598 <LL_ADC_GetCommonPathInternalCh>
 8002222:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a41      	ldr	r2, [pc, #260]	@ (8002330 <HAL_ADC_ConfigChannel+0x7fc>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d12c      	bne.n	800228a <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002230:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002234:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d126      	bne.n	800228a <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a3c      	ldr	r2, [pc, #240]	@ (8002334 <HAL_ADC_ConfigChannel+0x800>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d004      	beq.n	8002250 <HAL_ADC_ConfigChannel+0x71c>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a3b      	ldr	r2, [pc, #236]	@ (8002338 <HAL_ADC_ConfigChannel+0x804>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d15d      	bne.n	800230c <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002250:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002254:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002258:	4619      	mov	r1, r3
 800225a:	4834      	ldr	r0, [pc, #208]	@ (800232c <HAL_ADC_ConfigChannel+0x7f8>)
 800225c:	f7ff f989 	bl	8001572 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002260:	4b36      	ldr	r3, [pc, #216]	@ (800233c <HAL_ADC_ConfigChannel+0x808>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	099b      	lsrs	r3, r3, #6
 8002266:	4a36      	ldr	r2, [pc, #216]	@ (8002340 <HAL_ADC_ConfigChannel+0x80c>)
 8002268:	fba2 2303 	umull	r2, r3, r2, r3
 800226c:	099b      	lsrs	r3, r3, #6
 800226e:	1c5a      	adds	r2, r3, #1
 8002270:	4613      	mov	r3, r2
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	4413      	add	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800227a:	e002      	b.n	8002282 <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	3b01      	subs	r3, #1
 8002280:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1f9      	bne.n	800227c <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002288:	e040      	b.n	800230c <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a2d      	ldr	r2, [pc, #180]	@ (8002344 <HAL_ADC_ConfigChannel+0x810>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d118      	bne.n	80022c6 <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002294:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002298:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d112      	bne.n	80022c6 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a23      	ldr	r2, [pc, #140]	@ (8002334 <HAL_ADC_ConfigChannel+0x800>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d004      	beq.n	80022b4 <HAL_ADC_ConfigChannel+0x780>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a22      	ldr	r2, [pc, #136]	@ (8002338 <HAL_ADC_ConfigChannel+0x804>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d12d      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80022b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022bc:	4619      	mov	r1, r3
 80022be:	481b      	ldr	r0, [pc, #108]	@ (800232c <HAL_ADC_ConfigChannel+0x7f8>)
 80022c0:	f7ff f957 	bl	8001572 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022c4:	e024      	b.n	8002310 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a1f      	ldr	r2, [pc, #124]	@ (8002348 <HAL_ADC_ConfigChannel+0x814>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d120      	bne.n	8002312 <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80022d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80022d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d11a      	bne.n	8002312 <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a14      	ldr	r2, [pc, #80]	@ (8002334 <HAL_ADC_ConfigChannel+0x800>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d115      	bne.n	8002312 <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80022ea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80022ee:	4619      	mov	r1, r3
 80022f0:	480e      	ldr	r0, [pc, #56]	@ (800232c <HAL_ADC_ConfigChannel+0x7f8>)
 80022f2:	f7ff f93e 	bl	8001572 <LL_ADC_SetCommonPathInternalCh>
 80022f6:	e00c      	b.n	8002312 <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022fc:	f043 0220 	orr.w	r2, r3, #32
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800230a:	e002      	b.n	8002312 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800230c:	bf00      	nop
 800230e:	e000      	b.n	8002312 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002310:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800231a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800231e:	4618      	mov	r0, r3
 8002320:	37d8      	adds	r7, #216	@ 0xd8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	80080000 	.word	0x80080000
 800232c:	50040300 	.word	0x50040300
 8002330:	c7520000 	.word	0xc7520000
 8002334:	50040000 	.word	0x50040000
 8002338:	50040200 	.word	0x50040200
 800233c:	20000000 	.word	0x20000000
 8002340:	053e2d63 	.word	0x053e2d63
 8002344:	cb840000 	.word	0xcb840000
 8002348:	80000001 	.word	0x80000001

0800234c <LL_ADC_IsEnabled>:
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	2b01      	cmp	r3, #1
 800235e:	d101      	bne.n	8002364 <LL_ADC_IsEnabled+0x18>
 8002360:	2301      	movs	r3, #1
 8002362:	e000      	b.n	8002366 <LL_ADC_IsEnabled+0x1a>
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <LL_ADC_REG_IsConversionOngoing>:
{
 8002372:	b480      	push	{r7}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 0304 	and.w	r3, r3, #4
 8002382:	2b04      	cmp	r3, #4
 8002384:	d101      	bne.n	800238a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002386:	2301      	movs	r3, #1
 8002388:	e000      	b.n	800238c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002398:	b590      	push	{r4, r7, lr}
 800239a:	b0a1      	sub	sp, #132	@ 0x84
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023a2:	2300      	movs	r3, #0
 80023a4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d101      	bne.n	80023b6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80023b2:	2302      	movs	r3, #2
 80023b4:	e093      	b.n	80024de <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80023be:	2300      	movs	r3, #0
 80023c0:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80023c2:	2300      	movs	r3, #0
 80023c4:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a47      	ldr	r2, [pc, #284]	@ (80024e8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d102      	bne.n	80023d6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80023d0:	4b46      	ldr	r3, [pc, #280]	@ (80024ec <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	e001      	b.n	80023da <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80023d6:	2300      	movs	r3, #0
 80023d8:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d10b      	bne.n	80023f8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e4:	f043 0220 	orr.w	r2, r3, #32
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e072      	b.n	80024de <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff ffb9 	bl	8002372 <LL_ADC_REG_IsConversionOngoing>
 8002400:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff ffb3 	bl	8002372 <LL_ADC_REG_IsConversionOngoing>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d154      	bne.n	80024bc <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002412:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002414:	2b00      	cmp	r3, #0
 8002416:	d151      	bne.n	80024bc <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002418:	4b35      	ldr	r3, [pc, #212]	@ (80024f0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800241a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d02c      	beq.n	800247e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002424:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	6859      	ldr	r1, [r3, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002436:	035b      	lsls	r3, r3, #13
 8002438:	430b      	orrs	r3, r1
 800243a:	431a      	orrs	r2, r3
 800243c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800243e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002440:	4829      	ldr	r0, [pc, #164]	@ (80024e8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002442:	f7ff ff83 	bl	800234c <LL_ADC_IsEnabled>
 8002446:	4604      	mov	r4, r0
 8002448:	4828      	ldr	r0, [pc, #160]	@ (80024ec <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800244a:	f7ff ff7f 	bl	800234c <LL_ADC_IsEnabled>
 800244e:	4603      	mov	r3, r0
 8002450:	431c      	orrs	r4, r3
 8002452:	4828      	ldr	r0, [pc, #160]	@ (80024f4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002454:	f7ff ff7a 	bl	800234c <LL_ADC_IsEnabled>
 8002458:	4603      	mov	r3, r0
 800245a:	4323      	orrs	r3, r4
 800245c:	2b00      	cmp	r3, #0
 800245e:	d137      	bne.n	80024d0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002460:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002468:	f023 030f 	bic.w	r3, r3, #15
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	6811      	ldr	r1, [r2, #0]
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	6892      	ldr	r2, [r2, #8]
 8002474:	430a      	orrs	r2, r1
 8002476:	431a      	orrs	r2, r3
 8002478:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800247a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800247c:	e028      	b.n	80024d0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800247e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002486:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002488:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800248a:	4817      	ldr	r0, [pc, #92]	@ (80024e8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800248c:	f7ff ff5e 	bl	800234c <LL_ADC_IsEnabled>
 8002490:	4604      	mov	r4, r0
 8002492:	4816      	ldr	r0, [pc, #88]	@ (80024ec <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002494:	f7ff ff5a 	bl	800234c <LL_ADC_IsEnabled>
 8002498:	4603      	mov	r3, r0
 800249a:	431c      	orrs	r4, r3
 800249c:	4815      	ldr	r0, [pc, #84]	@ (80024f4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800249e:	f7ff ff55 	bl	800234c <LL_ADC_IsEnabled>
 80024a2:	4603      	mov	r3, r0
 80024a4:	4323      	orrs	r3, r4
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d112      	bne.n	80024d0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80024aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80024b2:	f023 030f 	bic.w	r3, r3, #15
 80024b6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80024b8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80024ba:	e009      	b.n	80024d0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c0:	f043 0220 	orr.w	r2, r3, #32
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80024ce:	e000      	b.n	80024d2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80024d0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80024da:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3784      	adds	r7, #132	@ 0x84
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd90      	pop	{r4, r7, pc}
 80024e6:	bf00      	nop
 80024e8:	50040000 	.word	0x50040000
 80024ec:	50040100 	.word	0x50040100
 80024f0:	50040300 	.word	0x50040300
 80024f4:	50040200 	.word	0x50040200

080024f8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e0ed      	b.n	80026e6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d102      	bne.n	800251c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7fe fd8a 	bl	8001030 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f042 0201 	orr.w	r2, r2, #1
 800252a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800252c:	f7ff f802 	bl	8001534 <HAL_GetTick>
 8002530:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002532:	e012      	b.n	800255a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002534:	f7fe fffe 	bl	8001534 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b0a      	cmp	r3, #10
 8002540:	d90b      	bls.n	800255a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002546:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2205      	movs	r2, #5
 8002552:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e0c5      	b.n	80026e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0e5      	beq.n	8002534 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 0202 	bic.w	r2, r2, #2
 8002576:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002578:	f7fe ffdc 	bl	8001534 <HAL_GetTick>
 800257c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800257e:	e012      	b.n	80025a6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002580:	f7fe ffd8 	bl	8001534 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b0a      	cmp	r3, #10
 800258c:	d90b      	bls.n	80025a6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002592:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2205      	movs	r2, #5
 800259e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e09f      	b.n	80026e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1e5      	bne.n	8002580 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	7e1b      	ldrb	r3, [r3, #24]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d108      	bne.n	80025ce <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	e007      	b.n	80025de <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80025dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	7e5b      	ldrb	r3, [r3, #25]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d108      	bne.n	80025f8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	e007      	b.n	8002608 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002606:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	7e9b      	ldrb	r3, [r3, #26]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d108      	bne.n	8002622 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f042 0220 	orr.w	r2, r2, #32
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	e007      	b.n	8002632 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 0220 	bic.w	r2, r2, #32
 8002630:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	7edb      	ldrb	r3, [r3, #27]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d108      	bne.n	800264c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 0210 	bic.w	r2, r2, #16
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	e007      	b.n	800265c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f042 0210 	orr.w	r2, r2, #16
 800265a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	7f1b      	ldrb	r3, [r3, #28]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d108      	bne.n	8002676 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f042 0208 	orr.w	r2, r2, #8
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	e007      	b.n	8002686 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 0208 	bic.w	r2, r2, #8
 8002684:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	7f5b      	ldrb	r3, [r3, #29]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d108      	bne.n	80026a0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f042 0204 	orr.w	r2, r2, #4
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	e007      	b.n	80026b0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 0204 	bic.w	r2, r2, #4
 80026ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	431a      	orrs	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	431a      	orrs	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	ea42 0103 	orr.w	r1, r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	1e5a      	subs	r2, r3, #1
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b084      	sub	sp, #16
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d12e      	bne.n	8002760 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2202      	movs	r2, #2
 8002706:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 0201 	bic.w	r2, r2, #1
 8002718:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800271a:	f7fe ff0b 	bl	8001534 <HAL_GetTick>
 800271e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002720:	e012      	b.n	8002748 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002722:	f7fe ff07 	bl	8001534 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b0a      	cmp	r3, #10
 800272e:	d90b      	bls.n	8002748 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002734:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2205      	movs	r2, #5
 8002740:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e012      	b.n	800276e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1e5      	bne.n	8002722 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800275c:	2300      	movs	r3, #0
 800275e:	e006      	b.n	800276e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002764:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
  }
}
 800276e:	4618      	mov	r0, r3
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
	...

08002778 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002788:	4b0c      	ldr	r3, [pc, #48]	@ (80027bc <__NVIC_SetPriorityGrouping+0x44>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800278e:	68ba      	ldr	r2, [r7, #8]
 8002790:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002794:	4013      	ands	r3, r2
 8002796:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027aa:	4a04      	ldr	r2, [pc, #16]	@ (80027bc <__NVIC_SetPriorityGrouping+0x44>)
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	60d3      	str	r3, [r2, #12]
}
 80027b0:	bf00      	nop
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	e000ed00 	.word	0xe000ed00

080027c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027c4:	4b04      	ldr	r3, [pc, #16]	@ (80027d8 <__NVIC_GetPriorityGrouping+0x18>)
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	0a1b      	lsrs	r3, r3, #8
 80027ca:	f003 0307 	and.w	r3, r3, #7
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	e000ed00 	.word	0xe000ed00

080027dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	4603      	mov	r3, r0
 80027e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	db0b      	blt.n	8002806 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ee:	79fb      	ldrb	r3, [r7, #7]
 80027f0:	f003 021f 	and.w	r2, r3, #31
 80027f4:	4907      	ldr	r1, [pc, #28]	@ (8002814 <__NVIC_EnableIRQ+0x38>)
 80027f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fa:	095b      	lsrs	r3, r3, #5
 80027fc:	2001      	movs	r0, #1
 80027fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	e000e100 	.word	0xe000e100

08002818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	6039      	str	r1, [r7, #0]
 8002822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002828:	2b00      	cmp	r3, #0
 800282a:	db0a      	blt.n	8002842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	b2da      	uxtb	r2, r3
 8002830:	490c      	ldr	r1, [pc, #48]	@ (8002864 <__NVIC_SetPriority+0x4c>)
 8002832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002836:	0112      	lsls	r2, r2, #4
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	440b      	add	r3, r1
 800283c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002840:	e00a      	b.n	8002858 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	b2da      	uxtb	r2, r3
 8002846:	4908      	ldr	r1, [pc, #32]	@ (8002868 <__NVIC_SetPriority+0x50>)
 8002848:	79fb      	ldrb	r3, [r7, #7]
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	3b04      	subs	r3, #4
 8002850:	0112      	lsls	r2, r2, #4
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	440b      	add	r3, r1
 8002856:	761a      	strb	r2, [r3, #24]
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	e000e100 	.word	0xe000e100
 8002868:	e000ed00 	.word	0xe000ed00

0800286c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800286c:	b480      	push	{r7}
 800286e:	b089      	sub	sp, #36	@ 0x24
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	f1c3 0307 	rsb	r3, r3, #7
 8002886:	2b04      	cmp	r3, #4
 8002888:	bf28      	it	cs
 800288a:	2304      	movcs	r3, #4
 800288c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	3304      	adds	r3, #4
 8002892:	2b06      	cmp	r3, #6
 8002894:	d902      	bls.n	800289c <NVIC_EncodePriority+0x30>
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	3b03      	subs	r3, #3
 800289a:	e000      	b.n	800289e <NVIC_EncodePriority+0x32>
 800289c:	2300      	movs	r3, #0
 800289e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	43da      	mvns	r2, r3
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	401a      	ands	r2, r3
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	fa01 f303 	lsl.w	r3, r1, r3
 80028be:	43d9      	mvns	r1, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c4:	4313      	orrs	r3, r2
         );
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3724      	adds	r7, #36	@ 0x24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b082      	sub	sp, #8
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7ff ff4c 	bl	8002778 <__NVIC_SetPriorityGrouping>
}
 80028e0:	bf00      	nop
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	4603      	mov	r3, r0
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
 80028f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80028f6:	2300      	movs	r3, #0
 80028f8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028fa:	f7ff ff61 	bl	80027c0 <__NVIC_GetPriorityGrouping>
 80028fe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	68b9      	ldr	r1, [r7, #8]
 8002904:	6978      	ldr	r0, [r7, #20]
 8002906:	f7ff ffb1 	bl	800286c <NVIC_EncodePriority>
 800290a:	4602      	mov	r2, r0
 800290c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002910:	4611      	mov	r1, r2
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff ff80 	bl	8002818 <__NVIC_SetPriority>
}
 8002918:	bf00      	nop
 800291a:	3718      	adds	r7, #24
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	4603      	mov	r3, r0
 8002928:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800292a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff ff54 	bl	80027dc <__NVIC_EnableIRQ>
}
 8002934:	bf00      	nop
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002944:	2300      	movs	r3, #0
 8002946:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d008      	beq.n	8002966 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2204      	movs	r2, #4
 8002958:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e022      	b.n	80029ac <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 020e 	bic.w	r2, r2, #14
 8002974:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 0201 	bic.w	r2, r2, #1
 8002984:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800298a:	f003 021c 	and.w	r2, r3, #28
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002992:	2101      	movs	r1, #1
 8002994:	fa01 f202 	lsl.w	r2, r1, r2
 8002998:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3714      	adds	r7, #20
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029c0:	2300      	movs	r3, #0
 80029c2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d005      	beq.n	80029dc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2204      	movs	r2, #4
 80029d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	73fb      	strb	r3, [r7, #15]
 80029da:	e029      	b.n	8002a30 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 020e 	bic.w	r2, r2, #14
 80029ea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 0201 	bic.w	r2, r2, #1
 80029fa:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a00:	f003 021c 	and.w	r2, r3, #28
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a08:	2101      	movs	r1, #1
 8002a0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a0e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d003      	beq.n	8002a30 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	4798      	blx	r3
    }
  }
  return status;
 8002a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
	...

08002a3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b087      	sub	sp, #28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a46:	2300      	movs	r3, #0
 8002a48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a4a:	e166      	b.n	8002d1a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	2101      	movs	r1, #1
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	fa01 f303 	lsl.w	r3, r1, r3
 8002a58:	4013      	ands	r3, r2
 8002a5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f000 8158 	beq.w	8002d14 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 0303 	and.w	r3, r3, #3
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d005      	beq.n	8002a7c <HAL_GPIO_Init+0x40>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f003 0303 	and.w	r3, r3, #3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d130      	bne.n	8002ade <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	2203      	movs	r2, #3
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	4013      	ands	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	68da      	ldr	r2, [r3, #12]
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	43db      	mvns	r3, r3
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	091b      	lsrs	r3, r3, #4
 8002ac8:	f003 0201 	and.w	r2, r3, #1
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f003 0303 	and.w	r3, r3, #3
 8002ae6:	2b03      	cmp	r3, #3
 8002ae8:	d017      	beq.n	8002b1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	2203      	movs	r2, #3
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	43db      	mvns	r3, r3
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	4013      	ands	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	689a      	ldr	r2, [r3, #8]
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f003 0303 	and.w	r3, r3, #3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d123      	bne.n	8002b6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	08da      	lsrs	r2, r3, #3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	3208      	adds	r2, #8
 8002b2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	220f      	movs	r2, #15
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	43db      	mvns	r3, r3
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	4013      	ands	r3, r2
 8002b48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	691a      	ldr	r2, [r3, #16]
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	08da      	lsrs	r2, r3, #3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3208      	adds	r2, #8
 8002b68:	6939      	ldr	r1, [r7, #16]
 8002b6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	2203      	movs	r2, #3
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	43db      	mvns	r3, r3
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	4013      	ands	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f003 0203 	and.w	r2, r3, #3
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f000 80b2 	beq.w	8002d14 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bb0:	4b61      	ldr	r3, [pc, #388]	@ (8002d38 <HAL_GPIO_Init+0x2fc>)
 8002bb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bb4:	4a60      	ldr	r2, [pc, #384]	@ (8002d38 <HAL_GPIO_Init+0x2fc>)
 8002bb6:	f043 0301 	orr.w	r3, r3, #1
 8002bba:	6613      	str	r3, [r2, #96]	@ 0x60
 8002bbc:	4b5e      	ldr	r3, [pc, #376]	@ (8002d38 <HAL_GPIO_Init+0x2fc>)
 8002bbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	60bb      	str	r3, [r7, #8]
 8002bc6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002bc8:	4a5c      	ldr	r2, [pc, #368]	@ (8002d3c <HAL_GPIO_Init+0x300>)
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	089b      	lsrs	r3, r3, #2
 8002bce:	3302      	adds	r3, #2
 8002bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	f003 0303 	and.w	r3, r3, #3
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	220f      	movs	r2, #15
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	43db      	mvns	r3, r3
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	4013      	ands	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002bf2:	d02b      	beq.n	8002c4c <HAL_GPIO_Init+0x210>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a52      	ldr	r2, [pc, #328]	@ (8002d40 <HAL_GPIO_Init+0x304>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d025      	beq.n	8002c48 <HAL_GPIO_Init+0x20c>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a51      	ldr	r2, [pc, #324]	@ (8002d44 <HAL_GPIO_Init+0x308>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d01f      	beq.n	8002c44 <HAL_GPIO_Init+0x208>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a50      	ldr	r2, [pc, #320]	@ (8002d48 <HAL_GPIO_Init+0x30c>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d019      	beq.n	8002c40 <HAL_GPIO_Init+0x204>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a4f      	ldr	r2, [pc, #316]	@ (8002d4c <HAL_GPIO_Init+0x310>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d013      	beq.n	8002c3c <HAL_GPIO_Init+0x200>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a4e      	ldr	r2, [pc, #312]	@ (8002d50 <HAL_GPIO_Init+0x314>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d00d      	beq.n	8002c38 <HAL_GPIO_Init+0x1fc>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a4d      	ldr	r2, [pc, #308]	@ (8002d54 <HAL_GPIO_Init+0x318>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d007      	beq.n	8002c34 <HAL_GPIO_Init+0x1f8>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a4c      	ldr	r2, [pc, #304]	@ (8002d58 <HAL_GPIO_Init+0x31c>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d101      	bne.n	8002c30 <HAL_GPIO_Init+0x1f4>
 8002c2c:	2307      	movs	r3, #7
 8002c2e:	e00e      	b.n	8002c4e <HAL_GPIO_Init+0x212>
 8002c30:	2308      	movs	r3, #8
 8002c32:	e00c      	b.n	8002c4e <HAL_GPIO_Init+0x212>
 8002c34:	2306      	movs	r3, #6
 8002c36:	e00a      	b.n	8002c4e <HAL_GPIO_Init+0x212>
 8002c38:	2305      	movs	r3, #5
 8002c3a:	e008      	b.n	8002c4e <HAL_GPIO_Init+0x212>
 8002c3c:	2304      	movs	r3, #4
 8002c3e:	e006      	b.n	8002c4e <HAL_GPIO_Init+0x212>
 8002c40:	2303      	movs	r3, #3
 8002c42:	e004      	b.n	8002c4e <HAL_GPIO_Init+0x212>
 8002c44:	2302      	movs	r3, #2
 8002c46:	e002      	b.n	8002c4e <HAL_GPIO_Init+0x212>
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e000      	b.n	8002c4e <HAL_GPIO_Init+0x212>
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	f002 0203 	and.w	r2, r2, #3
 8002c54:	0092      	lsls	r2, r2, #2
 8002c56:	4093      	lsls	r3, r2
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c5e:	4937      	ldr	r1, [pc, #220]	@ (8002d3c <HAL_GPIO_Init+0x300>)
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	089b      	lsrs	r3, r3, #2
 8002c64:	3302      	adds	r3, #2
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c6c:	4b3b      	ldr	r3, [pc, #236]	@ (8002d5c <HAL_GPIO_Init+0x320>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	43db      	mvns	r3, r3
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d003      	beq.n	8002c90 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c90:	4a32      	ldr	r2, [pc, #200]	@ (8002d5c <HAL_GPIO_Init+0x320>)
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c96:	4b31      	ldr	r3, [pc, #196]	@ (8002d5c <HAL_GPIO_Init+0x320>)
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	43db      	mvns	r3, r3
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002cba:	4a28      	ldr	r2, [pc, #160]	@ (8002d5c <HAL_GPIO_Init+0x320>)
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002cc0:	4b26      	ldr	r3, [pc, #152]	@ (8002d5c <HAL_GPIO_Init+0x320>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d003      	beq.n	8002ce4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ce4:	4a1d      	ldr	r2, [pc, #116]	@ (8002d5c <HAL_GPIO_Init+0x320>)
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002cea:	4b1c      	ldr	r3, [pc, #112]	@ (8002d5c <HAL_GPIO_Init+0x320>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	43db      	mvns	r3, r3
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d0e:	4a13      	ldr	r2, [pc, #76]	@ (8002d5c <HAL_GPIO_Init+0x320>)
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	3301      	adds	r3, #1
 8002d18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	fa22 f303 	lsr.w	r3, r2, r3
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f47f ae91 	bne.w	8002a4c <HAL_GPIO_Init+0x10>
  }
}
 8002d2a:	bf00      	nop
 8002d2c:	bf00      	nop
 8002d2e:	371c      	adds	r7, #28
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	40010000 	.word	0x40010000
 8002d40:	48000400 	.word	0x48000400
 8002d44:	48000800 	.word	0x48000800
 8002d48:	48000c00 	.word	0x48000c00
 8002d4c:	48001000 	.word	0x48001000
 8002d50:	48001400 	.word	0x48001400
 8002d54:	48001800 	.word	0x48001800
 8002d58:	48001c00 	.word	0x48001c00
 8002d5c:	40010400 	.word	0x40010400

08002d60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	460b      	mov	r3, r1
 8002d6a:	807b      	strh	r3, [r7, #2]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d70:	787b      	ldrb	r3, [r7, #1]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d76:	887a      	ldrh	r2, [r7, #2]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d7c:	e002      	b.n	8002d84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d7e:	887a      	ldrh	r2, [r7, #2]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	460b      	mov	r3, r1
 8002d9a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002da2:	887a      	ldrh	r2, [r7, #2]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	4013      	ands	r3, r2
 8002da8:	041a      	lsls	r2, r3, #16
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	43d9      	mvns	r1, r3
 8002dae:	887b      	ldrh	r3, [r7, #2]
 8002db0:	400b      	ands	r3, r1
 8002db2:	431a      	orrs	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	619a      	str	r2, [r3, #24]
}
 8002db8:	bf00      	nop
 8002dba:	3714      	adds	r7, #20
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	4603      	mov	r3, r0
 8002dcc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002dce:	4b08      	ldr	r3, [pc, #32]	@ (8002df0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dd0:	695a      	ldr	r2, [r3, #20]
 8002dd2:	88fb      	ldrh	r3, [r7, #6]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d006      	beq.n	8002de8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002dda:	4a05      	ldr	r2, [pc, #20]	@ (8002df0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ddc:	88fb      	ldrh	r3, [r7, #6]
 8002dde:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002de0:	88fb      	ldrh	r3, [r7, #6]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fd fd6c 	bl	80008c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002de8:	bf00      	nop
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40010400 	.word	0x40010400

08002df4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e08d      	b.n	8002f22 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d106      	bne.n	8002e20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7fe f9ac 	bl	8001178 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2224      	movs	r2, #36	@ 0x24
 8002e24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 0201 	bic.w	r2, r2, #1
 8002e36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e44:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e54:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d107      	bne.n	8002e6e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689a      	ldr	r2, [r3, #8]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e6a:	609a      	str	r2, [r3, #8]
 8002e6c:	e006      	b.n	8002e7c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689a      	ldr	r2, [r3, #8]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002e7a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d108      	bne.n	8002e96 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685a      	ldr	r2, [r3, #4]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e92:	605a      	str	r2, [r3, #4]
 8002e94:	e007      	b.n	8002ea6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ea4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	6812      	ldr	r2, [r2, #0]
 8002eb0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002eb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002eb8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68da      	ldr	r2, [r3, #12]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ec8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	691a      	ldr	r2, [r3, #16]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	69d9      	ldr	r1, [r3, #28]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a1a      	ldr	r2, [r3, #32]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f042 0201 	orr.w	r2, r2, #1
 8002f02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2220      	movs	r2, #32
 8002f0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
	...

08002f2c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b088      	sub	sp, #32
 8002f30:	af02      	add	r7, sp, #8
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	4608      	mov	r0, r1
 8002f36:	4611      	mov	r1, r2
 8002f38:	461a      	mov	r2, r3
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	817b      	strh	r3, [r7, #10]
 8002f3e:	460b      	mov	r3, r1
 8002f40:	813b      	strh	r3, [r7, #8]
 8002f42:	4613      	mov	r3, r2
 8002f44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b20      	cmp	r3, #32
 8002f50:	f040 80f9 	bne.w	8003146 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f54:	6a3b      	ldr	r3, [r7, #32]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <HAL_I2C_Mem_Write+0x34>
 8002f5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d105      	bne.n	8002f6c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f66:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e0ed      	b.n	8003148 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d101      	bne.n	8002f7a <HAL_I2C_Mem_Write+0x4e>
 8002f76:	2302      	movs	r3, #2
 8002f78:	e0e6      	b.n	8003148 <HAL_I2C_Mem_Write+0x21c>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f82:	f7fe fad7 	bl	8001534 <HAL_GetTick>
 8002f86:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	2319      	movs	r3, #25
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f000 fac3 	bl	8003520 <I2C_WaitOnFlagUntilTimeout>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e0d1      	b.n	8003148 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2221      	movs	r2, #33	@ 0x21
 8002fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2240      	movs	r2, #64	@ 0x40
 8002fb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6a3a      	ldr	r2, [r7, #32]
 8002fbe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002fc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fcc:	88f8      	ldrh	r0, [r7, #6]
 8002fce:	893a      	ldrh	r2, [r7, #8]
 8002fd0:	8979      	ldrh	r1, [r7, #10]
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	9301      	str	r3, [sp, #4]
 8002fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fd8:	9300      	str	r3, [sp, #0]
 8002fda:	4603      	mov	r3, r0
 8002fdc:	68f8      	ldr	r0, [r7, #12]
 8002fde:	f000 f9d3 	bl	8003388 <I2C_RequestMemoryWrite>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d005      	beq.n	8002ff4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e0a9      	b.n	8003148 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	2bff      	cmp	r3, #255	@ 0xff
 8002ffc:	d90e      	bls.n	800301c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	22ff      	movs	r2, #255	@ 0xff
 8003002:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003008:	b2da      	uxtb	r2, r3
 800300a:	8979      	ldrh	r1, [r7, #10]
 800300c:	2300      	movs	r3, #0
 800300e:	9300      	str	r3, [sp, #0]
 8003010:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003014:	68f8      	ldr	r0, [r7, #12]
 8003016:	f000 fc47 	bl	80038a8 <I2C_TransferConfig>
 800301a:	e00f      	b.n	800303c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003020:	b29a      	uxth	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800302a:	b2da      	uxtb	r2, r3
 800302c:	8979      	ldrh	r1, [r7, #10]
 800302e:	2300      	movs	r3, #0
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 fc36 	bl	80038a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f000 fac6 	bl	80035d2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e07b      	b.n	8003148 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003054:	781a      	ldrb	r2, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003060:	1c5a      	adds	r2, r3, #1
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800306a:	b29b      	uxth	r3, r3
 800306c:	3b01      	subs	r3, #1
 800306e:	b29a      	uxth	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003078:	3b01      	subs	r3, #1
 800307a:	b29a      	uxth	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003084:	b29b      	uxth	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d034      	beq.n	80030f4 <HAL_I2C_Mem_Write+0x1c8>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800308e:	2b00      	cmp	r3, #0
 8003090:	d130      	bne.n	80030f4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003098:	2200      	movs	r2, #0
 800309a:	2180      	movs	r1, #128	@ 0x80
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f000 fa3f 	bl	8003520 <I2C_WaitOnFlagUntilTimeout>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e04d      	b.n	8003148 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	2bff      	cmp	r3, #255	@ 0xff
 80030b4:	d90e      	bls.n	80030d4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	22ff      	movs	r2, #255	@ 0xff
 80030ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	8979      	ldrh	r1, [r7, #10]
 80030c4:	2300      	movs	r3, #0
 80030c6:	9300      	str	r3, [sp, #0]
 80030c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f000 fbeb 	bl	80038a8 <I2C_TransferConfig>
 80030d2:	e00f      	b.n	80030f4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030d8:	b29a      	uxth	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030e2:	b2da      	uxtb	r2, r3
 80030e4:	8979      	ldrh	r1, [r7, #10]
 80030e6:	2300      	movs	r3, #0
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f000 fbda 	bl	80038a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d19e      	bne.n	800303c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 faac 	bl	8003660 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e01a      	b.n	8003148 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2220      	movs	r2, #32
 8003118:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6859      	ldr	r1, [r3, #4]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	4b0a      	ldr	r3, [pc, #40]	@ (8003150 <HAL_I2C_Mem_Write+0x224>)
 8003126:	400b      	ands	r3, r1
 8003128:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2220      	movs	r2, #32
 800312e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003142:	2300      	movs	r3, #0
 8003144:	e000      	b.n	8003148 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003146:	2302      	movs	r3, #2
  }
}
 8003148:	4618      	mov	r0, r3
 800314a:	3718      	adds	r7, #24
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	fe00e800 	.word	0xfe00e800

08003154 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b088      	sub	sp, #32
 8003158:	af02      	add	r7, sp, #8
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	4608      	mov	r0, r1
 800315e:	4611      	mov	r1, r2
 8003160:	461a      	mov	r2, r3
 8003162:	4603      	mov	r3, r0
 8003164:	817b      	strh	r3, [r7, #10]
 8003166:	460b      	mov	r3, r1
 8003168:	813b      	strh	r3, [r7, #8]
 800316a:	4613      	mov	r3, r2
 800316c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b20      	cmp	r3, #32
 8003178:	f040 80fd 	bne.w	8003376 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800317c:	6a3b      	ldr	r3, [r7, #32]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d002      	beq.n	8003188 <HAL_I2C_Mem_Read+0x34>
 8003182:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003184:	2b00      	cmp	r3, #0
 8003186:	d105      	bne.n	8003194 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800318e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e0f1      	b.n	8003378 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800319a:	2b01      	cmp	r3, #1
 800319c:	d101      	bne.n	80031a2 <HAL_I2C_Mem_Read+0x4e>
 800319e:	2302      	movs	r3, #2
 80031a0:	e0ea      	b.n	8003378 <HAL_I2C_Mem_Read+0x224>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031aa:	f7fe f9c3 	bl	8001534 <HAL_GetTick>
 80031ae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	2319      	movs	r3, #25
 80031b6:	2201      	movs	r2, #1
 80031b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f000 f9af 	bl	8003520 <I2C_WaitOnFlagUntilTimeout>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e0d5      	b.n	8003378 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2222      	movs	r2, #34	@ 0x22
 80031d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2240      	movs	r2, #64	@ 0x40
 80031d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6a3a      	ldr	r2, [r7, #32]
 80031e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80031ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031f4:	88f8      	ldrh	r0, [r7, #6]
 80031f6:	893a      	ldrh	r2, [r7, #8]
 80031f8:	8979      	ldrh	r1, [r7, #10]
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	9301      	str	r3, [sp, #4]
 80031fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003200:	9300      	str	r3, [sp, #0]
 8003202:	4603      	mov	r3, r0
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	f000 f913 	bl	8003430 <I2C_RequestMemoryRead>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d005      	beq.n	800321c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e0ad      	b.n	8003378 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003220:	b29b      	uxth	r3, r3
 8003222:	2bff      	cmp	r3, #255	@ 0xff
 8003224:	d90e      	bls.n	8003244 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2201      	movs	r2, #1
 800322a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003230:	b2da      	uxtb	r2, r3
 8003232:	8979      	ldrh	r1, [r7, #10]
 8003234:	4b52      	ldr	r3, [pc, #328]	@ (8003380 <HAL_I2C_Mem_Read+0x22c>)
 8003236:	9300      	str	r3, [sp, #0]
 8003238:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f000 fb33 	bl	80038a8 <I2C_TransferConfig>
 8003242:	e00f      	b.n	8003264 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003248:	b29a      	uxth	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003252:	b2da      	uxtb	r2, r3
 8003254:	8979      	ldrh	r1, [r7, #10]
 8003256:	4b4a      	ldr	r3, [pc, #296]	@ (8003380 <HAL_I2C_Mem_Read+0x22c>)
 8003258:	9300      	str	r3, [sp, #0]
 800325a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f000 fb22 	bl	80038a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800326a:	2200      	movs	r2, #0
 800326c:	2104      	movs	r1, #4
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f000 f956 	bl	8003520 <I2C_WaitOnFlagUntilTimeout>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e07c      	b.n	8003378 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003288:	b2d2      	uxtb	r2, r2
 800328a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003290:	1c5a      	adds	r2, r3, #1
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800329a:	3b01      	subs	r3, #1
 800329c:	b29a      	uxth	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d034      	beq.n	8003324 <HAL_I2C_Mem_Read+0x1d0>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d130      	bne.n	8003324 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032c8:	2200      	movs	r2, #0
 80032ca:	2180      	movs	r1, #128	@ 0x80
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f000 f927 	bl	8003520 <I2C_WaitOnFlagUntilTimeout>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e04d      	b.n	8003378 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	2bff      	cmp	r3, #255	@ 0xff
 80032e4:	d90e      	bls.n	8003304 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2201      	movs	r2, #1
 80032ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	8979      	ldrh	r1, [r7, #10]
 80032f4:	2300      	movs	r3, #0
 80032f6:	9300      	str	r3, [sp, #0]
 80032f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f000 fad3 	bl	80038a8 <I2C_TransferConfig>
 8003302:	e00f      	b.n	8003324 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003308:	b29a      	uxth	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003312:	b2da      	uxtb	r2, r3
 8003314:	8979      	ldrh	r1, [r7, #10]
 8003316:	2300      	movs	r3, #0
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 fac2 	bl	80038a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003328:	b29b      	uxth	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d19a      	bne.n	8003264 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f000 f994 	bl	8003660 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e01a      	b.n	8003378 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2220      	movs	r2, #32
 8003348:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6859      	ldr	r1, [r3, #4]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	4b0b      	ldr	r3, [pc, #44]	@ (8003384 <HAL_I2C_Mem_Read+0x230>)
 8003356:	400b      	ands	r3, r1
 8003358:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2220      	movs	r2, #32
 800335e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003372:	2300      	movs	r3, #0
 8003374:	e000      	b.n	8003378 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003376:	2302      	movs	r3, #2
  }
}
 8003378:	4618      	mov	r0, r3
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	80002400 	.word	0x80002400
 8003384:	fe00e800 	.word	0xfe00e800

08003388 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af02      	add	r7, sp, #8
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	4608      	mov	r0, r1
 8003392:	4611      	mov	r1, r2
 8003394:	461a      	mov	r2, r3
 8003396:	4603      	mov	r3, r0
 8003398:	817b      	strh	r3, [r7, #10]
 800339a:	460b      	mov	r3, r1
 800339c:	813b      	strh	r3, [r7, #8]
 800339e:	4613      	mov	r3, r2
 80033a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80033a2:	88fb      	ldrh	r3, [r7, #6]
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	8979      	ldrh	r1, [r7, #10]
 80033a8:	4b20      	ldr	r3, [pc, #128]	@ (800342c <I2C_RequestMemoryWrite+0xa4>)
 80033aa:	9300      	str	r3, [sp, #0]
 80033ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f000 fa79 	bl	80038a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033b6:	69fa      	ldr	r2, [r7, #28]
 80033b8:	69b9      	ldr	r1, [r7, #24]
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f000 f909 	bl	80035d2 <I2C_WaitOnTXISFlagUntilTimeout>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e02c      	b.n	8003424 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033ca:	88fb      	ldrh	r3, [r7, #6]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d105      	bne.n	80033dc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033d0:	893b      	ldrh	r3, [r7, #8]
 80033d2:	b2da      	uxtb	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80033da:	e015      	b.n	8003408 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80033dc:	893b      	ldrh	r3, [r7, #8]
 80033de:	0a1b      	lsrs	r3, r3, #8
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	b2da      	uxtb	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ea:	69fa      	ldr	r2, [r7, #28]
 80033ec:	69b9      	ldr	r1, [r7, #24]
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f000 f8ef 	bl	80035d2 <I2C_WaitOnTXISFlagUntilTimeout>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e012      	b.n	8003424 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033fe:	893b      	ldrh	r3, [r7, #8]
 8003400:	b2da      	uxtb	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	9300      	str	r3, [sp, #0]
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	2200      	movs	r2, #0
 8003410:	2180      	movs	r1, #128	@ 0x80
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 f884 	bl	8003520 <I2C_WaitOnFlagUntilTimeout>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e000      	b.n	8003424 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	80002000 	.word	0x80002000

08003430 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af02      	add	r7, sp, #8
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	4608      	mov	r0, r1
 800343a:	4611      	mov	r1, r2
 800343c:	461a      	mov	r2, r3
 800343e:	4603      	mov	r3, r0
 8003440:	817b      	strh	r3, [r7, #10]
 8003442:	460b      	mov	r3, r1
 8003444:	813b      	strh	r3, [r7, #8]
 8003446:	4613      	mov	r3, r2
 8003448:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800344a:	88fb      	ldrh	r3, [r7, #6]
 800344c:	b2da      	uxtb	r2, r3
 800344e:	8979      	ldrh	r1, [r7, #10]
 8003450:	4b20      	ldr	r3, [pc, #128]	@ (80034d4 <I2C_RequestMemoryRead+0xa4>)
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	2300      	movs	r3, #0
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 fa26 	bl	80038a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800345c:	69fa      	ldr	r2, [r7, #28]
 800345e:	69b9      	ldr	r1, [r7, #24]
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f000 f8b6 	bl	80035d2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e02c      	b.n	80034ca <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003470:	88fb      	ldrh	r3, [r7, #6]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d105      	bne.n	8003482 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003476:	893b      	ldrh	r3, [r7, #8]
 8003478:	b2da      	uxtb	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003480:	e015      	b.n	80034ae <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003482:	893b      	ldrh	r3, [r7, #8]
 8003484:	0a1b      	lsrs	r3, r3, #8
 8003486:	b29b      	uxth	r3, r3
 8003488:	b2da      	uxtb	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003490:	69fa      	ldr	r2, [r7, #28]
 8003492:	69b9      	ldr	r1, [r7, #24]
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f000 f89c 	bl	80035d2 <I2C_WaitOnTXISFlagUntilTimeout>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d001      	beq.n	80034a4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e012      	b.n	80034ca <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034a4:	893b      	ldrh	r3, [r7, #8]
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	2200      	movs	r2, #0
 80034b6:	2140      	movs	r1, #64	@ 0x40
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f000 f831 	bl	8003520 <I2C_WaitOnFlagUntilTimeout>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e000      	b.n	80034ca <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	80002000 	.word	0x80002000

080034d8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d103      	bne.n	80034f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2200      	movs	r2, #0
 80034f4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b01      	cmp	r3, #1
 8003502:	d007      	beq.n	8003514 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	699a      	ldr	r2, [r3, #24]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f042 0201 	orr.w	r2, r2, #1
 8003512:	619a      	str	r2, [r3, #24]
  }
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	603b      	str	r3, [r7, #0]
 800352c:	4613      	mov	r3, r2
 800352e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003530:	e03b      	b.n	80035aa <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	6839      	ldr	r1, [r7, #0]
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f000 f8d6 	bl	80036e8 <I2C_IsErrorOccurred>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e041      	b.n	80035ca <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800354c:	d02d      	beq.n	80035aa <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800354e:	f7fd fff1 	bl	8001534 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	683a      	ldr	r2, [r7, #0]
 800355a:	429a      	cmp	r2, r3
 800355c:	d302      	bcc.n	8003564 <I2C_WaitOnFlagUntilTimeout+0x44>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d122      	bne.n	80035aa <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	699a      	ldr	r2, [r3, #24]
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	4013      	ands	r3, r2
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	429a      	cmp	r2, r3
 8003572:	bf0c      	ite	eq
 8003574:	2301      	moveq	r3, #1
 8003576:	2300      	movne	r3, #0
 8003578:	b2db      	uxtb	r3, r3
 800357a:	461a      	mov	r2, r3
 800357c:	79fb      	ldrb	r3, [r7, #7]
 800357e:	429a      	cmp	r2, r3
 8003580:	d113      	bne.n	80035aa <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003586:	f043 0220 	orr.w	r2, r3, #32
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2220      	movs	r2, #32
 8003592:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e00f      	b.n	80035ca <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	699a      	ldr	r2, [r3, #24]
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	4013      	ands	r3, r2
 80035b4:	68ba      	ldr	r2, [r7, #8]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	bf0c      	ite	eq
 80035ba:	2301      	moveq	r3, #1
 80035bc:	2300      	movne	r3, #0
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	461a      	mov	r2, r3
 80035c2:	79fb      	ldrb	r3, [r7, #7]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d0b4      	beq.n	8003532 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b084      	sub	sp, #16
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	60f8      	str	r0, [r7, #12]
 80035da:	60b9      	str	r1, [r7, #8]
 80035dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035de:	e033      	b.n	8003648 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	68b9      	ldr	r1, [r7, #8]
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 f87f 	bl	80036e8 <I2C_IsErrorOccurred>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e031      	b.n	8003658 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035fa:	d025      	beq.n	8003648 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035fc:	f7fd ff9a 	bl	8001534 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	429a      	cmp	r2, r3
 800360a:	d302      	bcc.n	8003612 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d11a      	bne.n	8003648 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b02      	cmp	r3, #2
 800361e:	d013      	beq.n	8003648 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003624:	f043 0220 	orr.w	r2, r3, #32
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2220      	movs	r2, #32
 8003630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e007      	b.n	8003658 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b02      	cmp	r3, #2
 8003654:	d1c4      	bne.n	80035e0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800366c:	e02f      	b.n	80036ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	68b9      	ldr	r1, [r7, #8]
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f000 f838 	bl	80036e8 <I2C_IsErrorOccurred>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e02d      	b.n	80036de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003682:	f7fd ff57 	bl	8001534 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	429a      	cmp	r2, r3
 8003690:	d302      	bcc.n	8003698 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d11a      	bne.n	80036ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	f003 0320 	and.w	r3, r3, #32
 80036a2:	2b20      	cmp	r3, #32
 80036a4:	d013      	beq.n	80036ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036aa:	f043 0220 	orr.w	r2, r3, #32
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2220      	movs	r2, #32
 80036b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e007      	b.n	80036de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	f003 0320 	and.w	r3, r3, #32
 80036d8:	2b20      	cmp	r3, #32
 80036da:	d1c8      	bne.n	800366e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
	...

080036e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b08a      	sub	sp, #40	@ 0x28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036f4:	2300      	movs	r3, #0
 80036f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003702:	2300      	movs	r3, #0
 8003704:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	f003 0310 	and.w	r3, r3, #16
 8003710:	2b00      	cmp	r3, #0
 8003712:	d068      	beq.n	80037e6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2210      	movs	r2, #16
 800371a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800371c:	e049      	b.n	80037b2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003724:	d045      	beq.n	80037b2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003726:	f7fd ff05 	bl	8001534 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	68ba      	ldr	r2, [r7, #8]
 8003732:	429a      	cmp	r2, r3
 8003734:	d302      	bcc.n	800373c <I2C_IsErrorOccurred+0x54>
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d13a      	bne.n	80037b2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003746:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800374e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800375a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800375e:	d121      	bne.n	80037a4 <I2C_IsErrorOccurred+0xbc>
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003766:	d01d      	beq.n	80037a4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003768:	7cfb      	ldrb	r3, [r7, #19]
 800376a:	2b20      	cmp	r3, #32
 800376c:	d01a      	beq.n	80037a4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800377c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800377e:	f7fd fed9 	bl	8001534 <HAL_GetTick>
 8003782:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003784:	e00e      	b.n	80037a4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003786:	f7fd fed5 	bl	8001534 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b19      	cmp	r3, #25
 8003792:	d907      	bls.n	80037a4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003794:	6a3b      	ldr	r3, [r7, #32]
 8003796:	f043 0320 	orr.w	r3, r3, #32
 800379a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80037a2:	e006      	b.n	80037b2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	f003 0320 	and.w	r3, r3, #32
 80037ae:	2b20      	cmp	r3, #32
 80037b0:	d1e9      	bne.n	8003786 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	f003 0320 	and.w	r3, r3, #32
 80037bc:	2b20      	cmp	r3, #32
 80037be:	d003      	beq.n	80037c8 <I2C_IsErrorOccurred+0xe0>
 80037c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d0aa      	beq.n	800371e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80037c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d103      	bne.n	80037d8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2220      	movs	r2, #32
 80037d6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80037d8:	6a3b      	ldr	r3, [r7, #32]
 80037da:	f043 0304 	orr.w	r3, r3, #4
 80037de:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00b      	beq.n	8003810 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80037f8:	6a3b      	ldr	r3, [r7, #32]
 80037fa:	f043 0301 	orr.w	r3, r3, #1
 80037fe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003808:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00b      	beq.n	8003832 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	f043 0308 	orr.w	r3, r3, #8
 8003820:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800382a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00b      	beq.n	8003854 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800383c:	6a3b      	ldr	r3, [r7, #32]
 800383e:	f043 0302 	orr.w	r3, r3, #2
 8003842:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800384c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003854:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003858:	2b00      	cmp	r3, #0
 800385a:	d01c      	beq.n	8003896 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f7ff fe3b 	bl	80034d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	6859      	ldr	r1, [r3, #4]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	4b0d      	ldr	r3, [pc, #52]	@ (80038a4 <I2C_IsErrorOccurred+0x1bc>)
 800386e:	400b      	ands	r3, r1
 8003870:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003876:	6a3b      	ldr	r3, [r7, #32]
 8003878:	431a      	orrs	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2220      	movs	r2, #32
 8003882:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003896:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800389a:	4618      	mov	r0, r3
 800389c:	3728      	adds	r7, #40	@ 0x28
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	fe00e800 	.word	0xfe00e800

080038a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b087      	sub	sp, #28
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	607b      	str	r3, [r7, #4]
 80038b2:	460b      	mov	r3, r1
 80038b4:	817b      	strh	r3, [r7, #10]
 80038b6:	4613      	mov	r3, r2
 80038b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038ba:	897b      	ldrh	r3, [r7, #10]
 80038bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038c0:	7a7b      	ldrb	r3, [r7, #9]
 80038c2:	041b      	lsls	r3, r3, #16
 80038c4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038c8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038ce:	6a3b      	ldr	r3, [r7, #32]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80038d6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	6a3b      	ldr	r3, [r7, #32]
 80038e0:	0d5b      	lsrs	r3, r3, #21
 80038e2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80038e6:	4b08      	ldr	r3, [pc, #32]	@ (8003908 <I2C_TransferConfig+0x60>)
 80038e8:	430b      	orrs	r3, r1
 80038ea:	43db      	mvns	r3, r3
 80038ec:	ea02 0103 	and.w	r1, r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	430a      	orrs	r2, r1
 80038f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80038fa:	bf00      	nop
 80038fc:	371c      	adds	r7, #28
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	03ff63ff 	.word	0x03ff63ff

0800390c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b20      	cmp	r3, #32
 8003920:	d138      	bne.n	8003994 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003928:	2b01      	cmp	r3, #1
 800392a:	d101      	bne.n	8003930 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800392c:	2302      	movs	r3, #2
 800392e:	e032      	b.n	8003996 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2224      	movs	r2, #36	@ 0x24
 800393c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 0201 	bic.w	r2, r2, #1
 800394e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800395e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	6819      	ldr	r1, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f042 0201 	orr.w	r2, r2, #1
 800397e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2220      	movs	r2, #32
 8003984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003990:	2300      	movs	r3, #0
 8003992:	e000      	b.n	8003996 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003994:	2302      	movs	r3, #2
  }
}
 8003996:	4618      	mov	r0, r3
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr

080039a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80039a2:	b480      	push	{r7}
 80039a4:	b085      	sub	sp, #20
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
 80039aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b20      	cmp	r3, #32
 80039b6:	d139      	bne.n	8003a2c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d101      	bne.n	80039c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80039c2:	2302      	movs	r3, #2
 80039c4:	e033      	b.n	8003a2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2224      	movs	r2, #36	@ 0x24
 80039d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 0201 	bic.w	r2, r2, #1
 80039e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80039f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	021b      	lsls	r3, r3, #8
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f042 0201 	orr.w	r2, r2, #1
 8003a16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	e000      	b.n	8003a2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a2c:	2302      	movs	r3, #2
  }
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3714      	adds	r7, #20
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
	...

08003a3c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003a40:	4b04      	ldr	r3, [pc, #16]	@ (8003a54 <HAL_PWREx_GetVoltageRange+0x18>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	40007000 	.word	0x40007000

08003a58 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a66:	d130      	bne.n	8003aca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a68:	4b23      	ldr	r3, [pc, #140]	@ (8003af8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003a70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a74:	d038      	beq.n	8003ae8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a76:	4b20      	ldr	r3, [pc, #128]	@ (8003af8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a7e:	4a1e      	ldr	r2, [pc, #120]	@ (8003af8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a80:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a84:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a86:	4b1d      	ldr	r3, [pc, #116]	@ (8003afc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2232      	movs	r2, #50	@ 0x32
 8003a8c:	fb02 f303 	mul.w	r3, r2, r3
 8003a90:	4a1b      	ldr	r2, [pc, #108]	@ (8003b00 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003a92:	fba2 2303 	umull	r2, r3, r2, r3
 8003a96:	0c9b      	lsrs	r3, r3, #18
 8003a98:	3301      	adds	r3, #1
 8003a9a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a9c:	e002      	b.n	8003aa4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003aa4:	4b14      	ldr	r3, [pc, #80]	@ (8003af8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003aa6:	695b      	ldr	r3, [r3, #20]
 8003aa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ab0:	d102      	bne.n	8003ab8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1f2      	bne.n	8003a9e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8003af8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003aba:	695b      	ldr	r3, [r3, #20]
 8003abc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ac0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ac4:	d110      	bne.n	8003ae8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e00f      	b.n	8003aea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003aca:	4b0b      	ldr	r3, [pc, #44]	@ (8003af8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003ad2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ad6:	d007      	beq.n	8003ae8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ad8:	4b07      	ldr	r3, [pc, #28]	@ (8003af8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003ae0:	4a05      	ldr	r2, [pc, #20]	@ (8003af8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ae2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003ae6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3714      	adds	r7, #20
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	40007000 	.word	0x40007000
 8003afc:	20000000 	.word	0x20000000
 8003b00:	431bde83 	.word	0x431bde83

08003b04 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b088      	sub	sp, #32
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d102      	bne.n	8003b18 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	f000 bc08 	b.w	8004328 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b18:	4b96      	ldr	r3, [pc, #600]	@ (8003d74 <HAL_RCC_OscConfig+0x270>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f003 030c 	and.w	r3, r3, #12
 8003b20:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b22:	4b94      	ldr	r3, [pc, #592]	@ (8003d74 <HAL_RCC_OscConfig+0x270>)
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f003 0303 	and.w	r3, r3, #3
 8003b2a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0310 	and.w	r3, r3, #16
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 80e4 	beq.w	8003d02 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d007      	beq.n	8003b50 <HAL_RCC_OscConfig+0x4c>
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	2b0c      	cmp	r3, #12
 8003b44:	f040 808b 	bne.w	8003c5e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	f040 8087 	bne.w	8003c5e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b50:	4b88      	ldr	r3, [pc, #544]	@ (8003d74 <HAL_RCC_OscConfig+0x270>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0302 	and.w	r3, r3, #2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d005      	beq.n	8003b68 <HAL_RCC_OscConfig+0x64>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d101      	bne.n	8003b68 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e3df      	b.n	8004328 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a1a      	ldr	r2, [r3, #32]
 8003b6c:	4b81      	ldr	r3, [pc, #516]	@ (8003d74 <HAL_RCC_OscConfig+0x270>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0308 	and.w	r3, r3, #8
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d004      	beq.n	8003b82 <HAL_RCC_OscConfig+0x7e>
 8003b78:	4b7e      	ldr	r3, [pc, #504]	@ (8003d74 <HAL_RCC_OscConfig+0x270>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b80:	e005      	b.n	8003b8e <HAL_RCC_OscConfig+0x8a>
 8003b82:	4b7c      	ldr	r3, [pc, #496]	@ (8003d74 <HAL_RCC_OscConfig+0x270>)
 8003b84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b88:	091b      	lsrs	r3, r3, #4
 8003b8a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d223      	bcs.n	8003bda <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 fdc4 	bl	8004724 <RCC_SetFlashLatencyFromMSIRange>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e3c0      	b.n	8004328 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ba6:	4b73      	ldr	r3, [pc, #460]	@ (8003d74 <HAL_RCC_OscConfig+0x270>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a72      	ldr	r2, [pc, #456]	@ (8003d74 <HAL_RCC_OscConfig+0x270>)
 8003bac:	f043 0308 	orr.w	r3, r3, #8
 8003bb0:	6013      	str	r3, [r2, #0]
 8003bb2:	4b70      	ldr	r3, [pc, #448]	@ (8003d74 <HAL_RCC_OscConfig+0x270>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	496d      	ldr	r1, [pc, #436]	@ (8003d74 <HAL_RCC_OscConfig+0x270>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bc4:	4b6b      	ldr	r3, [pc, #428]	@ (8003d74 <HAL_RCC_OscConfig+0x270>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	69db      	ldr	r3, [r3, #28]
 8003bd0:	021b      	lsls	r3, r3, #8
 8003bd2:	4968      	ldr	r1, [pc, #416]	@ (8003d74 <HAL_RCC_OscConfig+0x270>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	604b      	str	r3, [r1, #4]
 8003bd8:	e025      	b.n	8003c26 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bda:	4b66      	ldr	r3, [pc, #408]	@ (8003d74 <HAL_RCC_OscConfig+0x270>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a65      	ldr	r2, [pc, #404]	@ (8003d74 <HAL_RCC_OscConfig+0x270>)
 8003be0:	f043 0308 	orr.w	r3, r3, #8
 8003be4:	6013      	str	r3, [r2, #0]
 8003be6:	4b63      	ldr	r3, [pc, #396]	@ (8003d74 <HAL_RCC_OscConfig+0x270>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	4960      	ldr	r1, [pc, #384]	@ (8003d74 <HAL_RCC_OscConfig+0x270>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bf8:	4b5e      	ldr	r3, [pc, #376]	@ (8003d74 <HAL_RCC_OscConfig+0x270>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	69db      	ldr	r3, [r3, #28]
 8003c04:	021b      	lsls	r3, r3, #8
 8003c06:	495b      	ldr	r1, [pc, #364]	@ (8003d74 <HAL_RCC_OscConfig+0x270>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d109      	bne.n	8003c26 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f000 fd84 	bl	8004724 <RCC_SetFlashLatencyFromMSIRange>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e380      	b.n	8004328 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c26:	f000 fc87 	bl	8004538 <HAL_RCC_GetSysClockFreq>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	4b51      	ldr	r3, [pc, #324]	@ (8003d74 <HAL_RCC_OscConfig+0x270>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	091b      	lsrs	r3, r3, #4
 8003c32:	f003 030f 	and.w	r3, r3, #15
 8003c36:	4950      	ldr	r1, [pc, #320]	@ (8003d78 <HAL_RCC_OscConfig+0x274>)
 8003c38:	5ccb      	ldrb	r3, [r1, r3]
 8003c3a:	f003 031f 	and.w	r3, r3, #31
 8003c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c42:	4a4e      	ldr	r2, [pc, #312]	@ (8003d7c <HAL_RCC_OscConfig+0x278>)
 8003c44:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003c46:	4b4e      	ldr	r3, [pc, #312]	@ (8003d80 <HAL_RCC_OscConfig+0x27c>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7fd fb5a 	bl	8001304 <HAL_InitTick>
 8003c50:	4603      	mov	r3, r0
 8003c52:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003c54:	7bfb      	ldrb	r3, [r7, #15]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d052      	beq.n	8003d00 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003c5a:	7bfb      	ldrb	r3, [r7, #15]
 8003c5c:	e364      	b.n	8004328 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d032      	beq.n	8003ccc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003c66:	4b43      	ldr	r3, [pc, #268]	@ (8003d74 <HAL_RCC_OscConfig+0x270>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a42      	ldr	r2, [pc, #264]	@ (8003d74 <HAL_RCC_OscConfig+0x270>)
 8003c6c:	f043 0301 	orr.w	r3, r3, #1
 8003c70:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c72:	f7fd fc5f 	bl	8001534 <HAL_GetTick>
 8003c76:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c78:	e008      	b.n	8003c8c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c7a:	f7fd fc5b 	bl	8001534 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d901      	bls.n	8003c8c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e34d      	b.n	8004328 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c8c:	4b39      	ldr	r3, [pc, #228]	@ (8003d74 <HAL_RCC_OscConfig+0x270>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0302 	and.w	r3, r3, #2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d0f0      	beq.n	8003c7a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c98:	4b36      	ldr	r3, [pc, #216]	@ (8003d74 <HAL_RCC_OscConfig+0x270>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a35      	ldr	r2, [pc, #212]	@ (8003d74 <HAL_RCC_OscConfig+0x270>)
 8003c9e:	f043 0308 	orr.w	r3, r3, #8
 8003ca2:	6013      	str	r3, [r2, #0]
 8003ca4:	4b33      	ldr	r3, [pc, #204]	@ (8003d74 <HAL_RCC_OscConfig+0x270>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a1b      	ldr	r3, [r3, #32]
 8003cb0:	4930      	ldr	r1, [pc, #192]	@ (8003d74 <HAL_RCC_OscConfig+0x270>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cb6:	4b2f      	ldr	r3, [pc, #188]	@ (8003d74 <HAL_RCC_OscConfig+0x270>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	69db      	ldr	r3, [r3, #28]
 8003cc2:	021b      	lsls	r3, r3, #8
 8003cc4:	492b      	ldr	r1, [pc, #172]	@ (8003d74 <HAL_RCC_OscConfig+0x270>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	604b      	str	r3, [r1, #4]
 8003cca:	e01a      	b.n	8003d02 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ccc:	4b29      	ldr	r3, [pc, #164]	@ (8003d74 <HAL_RCC_OscConfig+0x270>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a28      	ldr	r2, [pc, #160]	@ (8003d74 <HAL_RCC_OscConfig+0x270>)
 8003cd2:	f023 0301 	bic.w	r3, r3, #1
 8003cd6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003cd8:	f7fd fc2c 	bl	8001534 <HAL_GetTick>
 8003cdc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ce0:	f7fd fc28 	bl	8001534 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e31a      	b.n	8004328 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003cf2:	4b20      	ldr	r3, [pc, #128]	@ (8003d74 <HAL_RCC_OscConfig+0x270>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1f0      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x1dc>
 8003cfe:	e000      	b.n	8003d02 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d00:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d073      	beq.n	8003df6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	2b08      	cmp	r3, #8
 8003d12:	d005      	beq.n	8003d20 <HAL_RCC_OscConfig+0x21c>
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	2b0c      	cmp	r3, #12
 8003d18:	d10e      	bne.n	8003d38 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	2b03      	cmp	r3, #3
 8003d1e:	d10b      	bne.n	8003d38 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d20:	4b14      	ldr	r3, [pc, #80]	@ (8003d74 <HAL_RCC_OscConfig+0x270>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d063      	beq.n	8003df4 <HAL_RCC_OscConfig+0x2f0>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d15f      	bne.n	8003df4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e2f7      	b.n	8004328 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d40:	d106      	bne.n	8003d50 <HAL_RCC_OscConfig+0x24c>
 8003d42:	4b0c      	ldr	r3, [pc, #48]	@ (8003d74 <HAL_RCC_OscConfig+0x270>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a0b      	ldr	r2, [pc, #44]	@ (8003d74 <HAL_RCC_OscConfig+0x270>)
 8003d48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d4c:	6013      	str	r3, [r2, #0]
 8003d4e:	e025      	b.n	8003d9c <HAL_RCC_OscConfig+0x298>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d58:	d114      	bne.n	8003d84 <HAL_RCC_OscConfig+0x280>
 8003d5a:	4b06      	ldr	r3, [pc, #24]	@ (8003d74 <HAL_RCC_OscConfig+0x270>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a05      	ldr	r2, [pc, #20]	@ (8003d74 <HAL_RCC_OscConfig+0x270>)
 8003d60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d64:	6013      	str	r3, [r2, #0]
 8003d66:	4b03      	ldr	r3, [pc, #12]	@ (8003d74 <HAL_RCC_OscConfig+0x270>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a02      	ldr	r2, [pc, #8]	@ (8003d74 <HAL_RCC_OscConfig+0x270>)
 8003d6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d70:	6013      	str	r3, [r2, #0]
 8003d72:	e013      	b.n	8003d9c <HAL_RCC_OscConfig+0x298>
 8003d74:	40021000 	.word	0x40021000
 8003d78:	08009f6c 	.word	0x08009f6c
 8003d7c:	20000000 	.word	0x20000000
 8003d80:	20000004 	.word	0x20000004
 8003d84:	4ba0      	ldr	r3, [pc, #640]	@ (8004008 <HAL_RCC_OscConfig+0x504>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a9f      	ldr	r2, [pc, #636]	@ (8004008 <HAL_RCC_OscConfig+0x504>)
 8003d8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d8e:	6013      	str	r3, [r2, #0]
 8003d90:	4b9d      	ldr	r3, [pc, #628]	@ (8004008 <HAL_RCC_OscConfig+0x504>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a9c      	ldr	r2, [pc, #624]	@ (8004008 <HAL_RCC_OscConfig+0x504>)
 8003d96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d013      	beq.n	8003dcc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da4:	f7fd fbc6 	bl	8001534 <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dac:	f7fd fbc2 	bl	8001534 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b64      	cmp	r3, #100	@ 0x64
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e2b4      	b.n	8004328 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dbe:	4b92      	ldr	r3, [pc, #584]	@ (8004008 <HAL_RCC_OscConfig+0x504>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d0f0      	beq.n	8003dac <HAL_RCC_OscConfig+0x2a8>
 8003dca:	e014      	b.n	8003df6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dcc:	f7fd fbb2 	bl	8001534 <HAL_GetTick>
 8003dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dd2:	e008      	b.n	8003de6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dd4:	f7fd fbae 	bl	8001534 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b64      	cmp	r3, #100	@ 0x64
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e2a0      	b.n	8004328 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003de6:	4b88      	ldr	r3, [pc, #544]	@ (8004008 <HAL_RCC_OscConfig+0x504>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1f0      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x2d0>
 8003df2:	e000      	b.n	8003df6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003df4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d060      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	2b04      	cmp	r3, #4
 8003e06:	d005      	beq.n	8003e14 <HAL_RCC_OscConfig+0x310>
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	2b0c      	cmp	r3, #12
 8003e0c:	d119      	bne.n	8003e42 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d116      	bne.n	8003e42 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e14:	4b7c      	ldr	r3, [pc, #496]	@ (8004008 <HAL_RCC_OscConfig+0x504>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d005      	beq.n	8003e2c <HAL_RCC_OscConfig+0x328>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d101      	bne.n	8003e2c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e27d      	b.n	8004328 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e2c:	4b76      	ldr	r3, [pc, #472]	@ (8004008 <HAL_RCC_OscConfig+0x504>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	061b      	lsls	r3, r3, #24
 8003e3a:	4973      	ldr	r1, [pc, #460]	@ (8004008 <HAL_RCC_OscConfig+0x504>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e40:	e040      	b.n	8003ec4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d023      	beq.n	8003e92 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e4a:	4b6f      	ldr	r3, [pc, #444]	@ (8004008 <HAL_RCC_OscConfig+0x504>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a6e      	ldr	r2, [pc, #440]	@ (8004008 <HAL_RCC_OscConfig+0x504>)
 8003e50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e56:	f7fd fb6d 	bl	8001534 <HAL_GetTick>
 8003e5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e5c:	e008      	b.n	8003e70 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e5e:	f7fd fb69 	bl	8001534 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d901      	bls.n	8003e70 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e25b      	b.n	8004328 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e70:	4b65      	ldr	r3, [pc, #404]	@ (8004008 <HAL_RCC_OscConfig+0x504>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d0f0      	beq.n	8003e5e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e7c:	4b62      	ldr	r3, [pc, #392]	@ (8004008 <HAL_RCC_OscConfig+0x504>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	061b      	lsls	r3, r3, #24
 8003e8a:	495f      	ldr	r1, [pc, #380]	@ (8004008 <HAL_RCC_OscConfig+0x504>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	604b      	str	r3, [r1, #4]
 8003e90:	e018      	b.n	8003ec4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e92:	4b5d      	ldr	r3, [pc, #372]	@ (8004008 <HAL_RCC_OscConfig+0x504>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a5c      	ldr	r2, [pc, #368]	@ (8004008 <HAL_RCC_OscConfig+0x504>)
 8003e98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e9e:	f7fd fb49 	bl	8001534 <HAL_GetTick>
 8003ea2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ea4:	e008      	b.n	8003eb8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ea6:	f7fd fb45 	bl	8001534 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d901      	bls.n	8003eb8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e237      	b.n	8004328 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003eb8:	4b53      	ldr	r3, [pc, #332]	@ (8004008 <HAL_RCC_OscConfig+0x504>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1f0      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0308 	and.w	r3, r3, #8
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d03c      	beq.n	8003f4a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d01c      	beq.n	8003f12 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ed8:	4b4b      	ldr	r3, [pc, #300]	@ (8004008 <HAL_RCC_OscConfig+0x504>)
 8003eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ede:	4a4a      	ldr	r2, [pc, #296]	@ (8004008 <HAL_RCC_OscConfig+0x504>)
 8003ee0:	f043 0301 	orr.w	r3, r3, #1
 8003ee4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee8:	f7fd fb24 	bl	8001534 <HAL_GetTick>
 8003eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003eee:	e008      	b.n	8003f02 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ef0:	f7fd fb20 	bl	8001534 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e212      	b.n	8004328 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f02:	4b41      	ldr	r3, [pc, #260]	@ (8004008 <HAL_RCC_OscConfig+0x504>)
 8003f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d0ef      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x3ec>
 8003f10:	e01b      	b.n	8003f4a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f12:	4b3d      	ldr	r3, [pc, #244]	@ (8004008 <HAL_RCC_OscConfig+0x504>)
 8003f14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f18:	4a3b      	ldr	r2, [pc, #236]	@ (8004008 <HAL_RCC_OscConfig+0x504>)
 8003f1a:	f023 0301 	bic.w	r3, r3, #1
 8003f1e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f22:	f7fd fb07 	bl	8001534 <HAL_GetTick>
 8003f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f28:	e008      	b.n	8003f3c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f2a:	f7fd fb03 	bl	8001534 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d901      	bls.n	8003f3c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e1f5      	b.n	8004328 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f3c:	4b32      	ldr	r3, [pc, #200]	@ (8004008 <HAL_RCC_OscConfig+0x504>)
 8003f3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1ef      	bne.n	8003f2a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0304 	and.w	r3, r3, #4
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f000 80a6 	beq.w	80040a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003f5c:	4b2a      	ldr	r3, [pc, #168]	@ (8004008 <HAL_RCC_OscConfig+0x504>)
 8003f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d10d      	bne.n	8003f84 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f68:	4b27      	ldr	r3, [pc, #156]	@ (8004008 <HAL_RCC_OscConfig+0x504>)
 8003f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f6c:	4a26      	ldr	r2, [pc, #152]	@ (8004008 <HAL_RCC_OscConfig+0x504>)
 8003f6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f72:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f74:	4b24      	ldr	r3, [pc, #144]	@ (8004008 <HAL_RCC_OscConfig+0x504>)
 8003f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f7c:	60bb      	str	r3, [r7, #8]
 8003f7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f80:	2301      	movs	r3, #1
 8003f82:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f84:	4b21      	ldr	r3, [pc, #132]	@ (800400c <HAL_RCC_OscConfig+0x508>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d118      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f90:	4b1e      	ldr	r3, [pc, #120]	@ (800400c <HAL_RCC_OscConfig+0x508>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a1d      	ldr	r2, [pc, #116]	@ (800400c <HAL_RCC_OscConfig+0x508>)
 8003f96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f9c:	f7fd faca 	bl	8001534 <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fa4:	f7fd fac6 	bl	8001534 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e1b8      	b.n	8004328 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fb6:	4b15      	ldr	r3, [pc, #84]	@ (800400c <HAL_RCC_OscConfig+0x508>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d0f0      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d108      	bne.n	8003fdc <HAL_RCC_OscConfig+0x4d8>
 8003fca:	4b0f      	ldr	r3, [pc, #60]	@ (8004008 <HAL_RCC_OscConfig+0x504>)
 8003fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fd0:	4a0d      	ldr	r2, [pc, #52]	@ (8004008 <HAL_RCC_OscConfig+0x504>)
 8003fd2:	f043 0301 	orr.w	r3, r3, #1
 8003fd6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003fda:	e029      	b.n	8004030 <HAL_RCC_OscConfig+0x52c>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	2b05      	cmp	r3, #5
 8003fe2:	d115      	bne.n	8004010 <HAL_RCC_OscConfig+0x50c>
 8003fe4:	4b08      	ldr	r3, [pc, #32]	@ (8004008 <HAL_RCC_OscConfig+0x504>)
 8003fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fea:	4a07      	ldr	r2, [pc, #28]	@ (8004008 <HAL_RCC_OscConfig+0x504>)
 8003fec:	f043 0304 	orr.w	r3, r3, #4
 8003ff0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ff4:	4b04      	ldr	r3, [pc, #16]	@ (8004008 <HAL_RCC_OscConfig+0x504>)
 8003ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ffa:	4a03      	ldr	r2, [pc, #12]	@ (8004008 <HAL_RCC_OscConfig+0x504>)
 8003ffc:	f043 0301 	orr.w	r3, r3, #1
 8004000:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004004:	e014      	b.n	8004030 <HAL_RCC_OscConfig+0x52c>
 8004006:	bf00      	nop
 8004008:	40021000 	.word	0x40021000
 800400c:	40007000 	.word	0x40007000
 8004010:	4b9d      	ldr	r3, [pc, #628]	@ (8004288 <HAL_RCC_OscConfig+0x784>)
 8004012:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004016:	4a9c      	ldr	r2, [pc, #624]	@ (8004288 <HAL_RCC_OscConfig+0x784>)
 8004018:	f023 0301 	bic.w	r3, r3, #1
 800401c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004020:	4b99      	ldr	r3, [pc, #612]	@ (8004288 <HAL_RCC_OscConfig+0x784>)
 8004022:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004026:	4a98      	ldr	r2, [pc, #608]	@ (8004288 <HAL_RCC_OscConfig+0x784>)
 8004028:	f023 0304 	bic.w	r3, r3, #4
 800402c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d016      	beq.n	8004066 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004038:	f7fd fa7c 	bl	8001534 <HAL_GetTick>
 800403c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800403e:	e00a      	b.n	8004056 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004040:	f7fd fa78 	bl	8001534 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800404e:	4293      	cmp	r3, r2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e168      	b.n	8004328 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004056:	4b8c      	ldr	r3, [pc, #560]	@ (8004288 <HAL_RCC_OscConfig+0x784>)
 8004058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d0ed      	beq.n	8004040 <HAL_RCC_OscConfig+0x53c>
 8004064:	e015      	b.n	8004092 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004066:	f7fd fa65 	bl	8001534 <HAL_GetTick>
 800406a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800406c:	e00a      	b.n	8004084 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800406e:	f7fd fa61 	bl	8001534 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	f241 3288 	movw	r2, #5000	@ 0x1388
 800407c:	4293      	cmp	r3, r2
 800407e:	d901      	bls.n	8004084 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e151      	b.n	8004328 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004084:	4b80      	ldr	r3, [pc, #512]	@ (8004288 <HAL_RCC_OscConfig+0x784>)
 8004086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1ed      	bne.n	800406e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004092:	7ffb      	ldrb	r3, [r7, #31]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d105      	bne.n	80040a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004098:	4b7b      	ldr	r3, [pc, #492]	@ (8004288 <HAL_RCC_OscConfig+0x784>)
 800409a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800409c:	4a7a      	ldr	r2, [pc, #488]	@ (8004288 <HAL_RCC_OscConfig+0x784>)
 800409e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040a2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0320 	and.w	r3, r3, #32
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d03c      	beq.n	800412a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d01c      	beq.n	80040f2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80040b8:	4b73      	ldr	r3, [pc, #460]	@ (8004288 <HAL_RCC_OscConfig+0x784>)
 80040ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040be:	4a72      	ldr	r2, [pc, #456]	@ (8004288 <HAL_RCC_OscConfig+0x784>)
 80040c0:	f043 0301 	orr.w	r3, r3, #1
 80040c4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c8:	f7fd fa34 	bl	8001534 <HAL_GetTick>
 80040cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80040ce:	e008      	b.n	80040e2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040d0:	f7fd fa30 	bl	8001534 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e122      	b.n	8004328 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80040e2:	4b69      	ldr	r3, [pc, #420]	@ (8004288 <HAL_RCC_OscConfig+0x784>)
 80040e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d0ef      	beq.n	80040d0 <HAL_RCC_OscConfig+0x5cc>
 80040f0:	e01b      	b.n	800412a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80040f2:	4b65      	ldr	r3, [pc, #404]	@ (8004288 <HAL_RCC_OscConfig+0x784>)
 80040f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040f8:	4a63      	ldr	r2, [pc, #396]	@ (8004288 <HAL_RCC_OscConfig+0x784>)
 80040fa:	f023 0301 	bic.w	r3, r3, #1
 80040fe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004102:	f7fd fa17 	bl	8001534 <HAL_GetTick>
 8004106:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004108:	e008      	b.n	800411c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800410a:	f7fd fa13 	bl	8001534 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	2b02      	cmp	r3, #2
 8004116:	d901      	bls.n	800411c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e105      	b.n	8004328 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800411c:	4b5a      	ldr	r3, [pc, #360]	@ (8004288 <HAL_RCC_OscConfig+0x784>)
 800411e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1ef      	bne.n	800410a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800412e:	2b00      	cmp	r3, #0
 8004130:	f000 80f9 	beq.w	8004326 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004138:	2b02      	cmp	r3, #2
 800413a:	f040 80cf 	bne.w	80042dc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800413e:	4b52      	ldr	r3, [pc, #328]	@ (8004288 <HAL_RCC_OscConfig+0x784>)
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	f003 0203 	and.w	r2, r3, #3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800414e:	429a      	cmp	r2, r3
 8004150:	d12c      	bne.n	80041ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800415c:	3b01      	subs	r3, #1
 800415e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004160:	429a      	cmp	r2, r3
 8004162:	d123      	bne.n	80041ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800416e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004170:	429a      	cmp	r2, r3
 8004172:	d11b      	bne.n	80041ac <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800417e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004180:	429a      	cmp	r2, r3
 8004182:	d113      	bne.n	80041ac <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800418e:	085b      	lsrs	r3, r3, #1
 8004190:	3b01      	subs	r3, #1
 8004192:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004194:	429a      	cmp	r2, r3
 8004196:	d109      	bne.n	80041ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a2:	085b      	lsrs	r3, r3, #1
 80041a4:	3b01      	subs	r3, #1
 80041a6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d071      	beq.n	8004290 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	2b0c      	cmp	r3, #12
 80041b0:	d068      	beq.n	8004284 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80041b2:	4b35      	ldr	r3, [pc, #212]	@ (8004288 <HAL_RCC_OscConfig+0x784>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d105      	bne.n	80041ca <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80041be:	4b32      	ldr	r3, [pc, #200]	@ (8004288 <HAL_RCC_OscConfig+0x784>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e0ac      	b.n	8004328 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80041ce:	4b2e      	ldr	r3, [pc, #184]	@ (8004288 <HAL_RCC_OscConfig+0x784>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a2d      	ldr	r2, [pc, #180]	@ (8004288 <HAL_RCC_OscConfig+0x784>)
 80041d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041d8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80041da:	f7fd f9ab 	bl	8001534 <HAL_GetTick>
 80041de:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041e0:	e008      	b.n	80041f4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041e2:	f7fd f9a7 	bl	8001534 <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d901      	bls.n	80041f4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e099      	b.n	8004328 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041f4:	4b24      	ldr	r3, [pc, #144]	@ (8004288 <HAL_RCC_OscConfig+0x784>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1f0      	bne.n	80041e2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004200:	4b21      	ldr	r3, [pc, #132]	@ (8004288 <HAL_RCC_OscConfig+0x784>)
 8004202:	68da      	ldr	r2, [r3, #12]
 8004204:	4b21      	ldr	r3, [pc, #132]	@ (800428c <HAL_RCC_OscConfig+0x788>)
 8004206:	4013      	ands	r3, r2
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004210:	3a01      	subs	r2, #1
 8004212:	0112      	lsls	r2, r2, #4
 8004214:	4311      	orrs	r1, r2
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800421a:	0212      	lsls	r2, r2, #8
 800421c:	4311      	orrs	r1, r2
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004222:	0852      	lsrs	r2, r2, #1
 8004224:	3a01      	subs	r2, #1
 8004226:	0552      	lsls	r2, r2, #21
 8004228:	4311      	orrs	r1, r2
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800422e:	0852      	lsrs	r2, r2, #1
 8004230:	3a01      	subs	r2, #1
 8004232:	0652      	lsls	r2, r2, #25
 8004234:	4311      	orrs	r1, r2
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800423a:	06d2      	lsls	r2, r2, #27
 800423c:	430a      	orrs	r2, r1
 800423e:	4912      	ldr	r1, [pc, #72]	@ (8004288 <HAL_RCC_OscConfig+0x784>)
 8004240:	4313      	orrs	r3, r2
 8004242:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004244:	4b10      	ldr	r3, [pc, #64]	@ (8004288 <HAL_RCC_OscConfig+0x784>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a0f      	ldr	r2, [pc, #60]	@ (8004288 <HAL_RCC_OscConfig+0x784>)
 800424a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800424e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004250:	4b0d      	ldr	r3, [pc, #52]	@ (8004288 <HAL_RCC_OscConfig+0x784>)
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	4a0c      	ldr	r2, [pc, #48]	@ (8004288 <HAL_RCC_OscConfig+0x784>)
 8004256:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800425a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800425c:	f7fd f96a 	bl	8001534 <HAL_GetTick>
 8004260:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004262:	e008      	b.n	8004276 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004264:	f7fd f966 	bl	8001534 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	2b02      	cmp	r3, #2
 8004270:	d901      	bls.n	8004276 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e058      	b.n	8004328 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004276:	4b04      	ldr	r3, [pc, #16]	@ (8004288 <HAL_RCC_OscConfig+0x784>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d0f0      	beq.n	8004264 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004282:	e050      	b.n	8004326 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e04f      	b.n	8004328 <HAL_RCC_OscConfig+0x824>
 8004288:	40021000 	.word	0x40021000
 800428c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004290:	4b27      	ldr	r3, [pc, #156]	@ (8004330 <HAL_RCC_OscConfig+0x82c>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d144      	bne.n	8004326 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800429c:	4b24      	ldr	r3, [pc, #144]	@ (8004330 <HAL_RCC_OscConfig+0x82c>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a23      	ldr	r2, [pc, #140]	@ (8004330 <HAL_RCC_OscConfig+0x82c>)
 80042a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042a8:	4b21      	ldr	r3, [pc, #132]	@ (8004330 <HAL_RCC_OscConfig+0x82c>)
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	4a20      	ldr	r2, [pc, #128]	@ (8004330 <HAL_RCC_OscConfig+0x82c>)
 80042ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80042b4:	f7fd f93e 	bl	8001534 <HAL_GetTick>
 80042b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042ba:	e008      	b.n	80042ce <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042bc:	f7fd f93a 	bl	8001534 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e02c      	b.n	8004328 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042ce:	4b18      	ldr	r3, [pc, #96]	@ (8004330 <HAL_RCC_OscConfig+0x82c>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d0f0      	beq.n	80042bc <HAL_RCC_OscConfig+0x7b8>
 80042da:	e024      	b.n	8004326 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	2b0c      	cmp	r3, #12
 80042e0:	d01f      	beq.n	8004322 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042e2:	4b13      	ldr	r3, [pc, #76]	@ (8004330 <HAL_RCC_OscConfig+0x82c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a12      	ldr	r2, [pc, #72]	@ (8004330 <HAL_RCC_OscConfig+0x82c>)
 80042e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ee:	f7fd f921 	bl	8001534 <HAL_GetTick>
 80042f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042f4:	e008      	b.n	8004308 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042f6:	f7fd f91d 	bl	8001534 <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d901      	bls.n	8004308 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e00f      	b.n	8004328 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004308:	4b09      	ldr	r3, [pc, #36]	@ (8004330 <HAL_RCC_OscConfig+0x82c>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1f0      	bne.n	80042f6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004314:	4b06      	ldr	r3, [pc, #24]	@ (8004330 <HAL_RCC_OscConfig+0x82c>)
 8004316:	68da      	ldr	r2, [r3, #12]
 8004318:	4905      	ldr	r1, [pc, #20]	@ (8004330 <HAL_RCC_OscConfig+0x82c>)
 800431a:	4b06      	ldr	r3, [pc, #24]	@ (8004334 <HAL_RCC_OscConfig+0x830>)
 800431c:	4013      	ands	r3, r2
 800431e:	60cb      	str	r3, [r1, #12]
 8004320:	e001      	b.n	8004326 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e000      	b.n	8004328 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3720      	adds	r7, #32
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	40021000 	.word	0x40021000
 8004334:	feeefffc 	.word	0xfeeefffc

08004338 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d101      	bne.n	800434c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e0e7      	b.n	800451c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800434c:	4b75      	ldr	r3, [pc, #468]	@ (8004524 <HAL_RCC_ClockConfig+0x1ec>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0307 	and.w	r3, r3, #7
 8004354:	683a      	ldr	r2, [r7, #0]
 8004356:	429a      	cmp	r2, r3
 8004358:	d910      	bls.n	800437c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800435a:	4b72      	ldr	r3, [pc, #456]	@ (8004524 <HAL_RCC_ClockConfig+0x1ec>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f023 0207 	bic.w	r2, r3, #7
 8004362:	4970      	ldr	r1, [pc, #448]	@ (8004524 <HAL_RCC_ClockConfig+0x1ec>)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	4313      	orrs	r3, r2
 8004368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800436a:	4b6e      	ldr	r3, [pc, #440]	@ (8004524 <HAL_RCC_ClockConfig+0x1ec>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0307 	and.w	r3, r3, #7
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	429a      	cmp	r2, r3
 8004376:	d001      	beq.n	800437c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e0cf      	b.n	800451c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d010      	beq.n	80043aa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689a      	ldr	r2, [r3, #8]
 800438c:	4b66      	ldr	r3, [pc, #408]	@ (8004528 <HAL_RCC_ClockConfig+0x1f0>)
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004394:	429a      	cmp	r2, r3
 8004396:	d908      	bls.n	80043aa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004398:	4b63      	ldr	r3, [pc, #396]	@ (8004528 <HAL_RCC_ClockConfig+0x1f0>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	4960      	ldr	r1, [pc, #384]	@ (8004528 <HAL_RCC_ClockConfig+0x1f0>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d04c      	beq.n	8004450 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	2b03      	cmp	r3, #3
 80043bc:	d107      	bne.n	80043ce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043be:	4b5a      	ldr	r3, [pc, #360]	@ (8004528 <HAL_RCC_ClockConfig+0x1f0>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d121      	bne.n	800440e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e0a6      	b.n	800451c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d107      	bne.n	80043e6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043d6:	4b54      	ldr	r3, [pc, #336]	@ (8004528 <HAL_RCC_ClockConfig+0x1f0>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d115      	bne.n	800440e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e09a      	b.n	800451c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d107      	bne.n	80043fe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043ee:	4b4e      	ldr	r3, [pc, #312]	@ (8004528 <HAL_RCC_ClockConfig+0x1f0>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d109      	bne.n	800440e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e08e      	b.n	800451c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043fe:	4b4a      	ldr	r3, [pc, #296]	@ (8004528 <HAL_RCC_ClockConfig+0x1f0>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e086      	b.n	800451c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800440e:	4b46      	ldr	r3, [pc, #280]	@ (8004528 <HAL_RCC_ClockConfig+0x1f0>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f023 0203 	bic.w	r2, r3, #3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	4943      	ldr	r1, [pc, #268]	@ (8004528 <HAL_RCC_ClockConfig+0x1f0>)
 800441c:	4313      	orrs	r3, r2
 800441e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004420:	f7fd f888 	bl	8001534 <HAL_GetTick>
 8004424:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004426:	e00a      	b.n	800443e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004428:	f7fd f884 	bl	8001534 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004436:	4293      	cmp	r3, r2
 8004438:	d901      	bls.n	800443e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e06e      	b.n	800451c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800443e:	4b3a      	ldr	r3, [pc, #232]	@ (8004528 <HAL_RCC_ClockConfig+0x1f0>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f003 020c 	and.w	r2, r3, #12
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	429a      	cmp	r2, r3
 800444e:	d1eb      	bne.n	8004428 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d010      	beq.n	800447e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	689a      	ldr	r2, [r3, #8]
 8004460:	4b31      	ldr	r3, [pc, #196]	@ (8004528 <HAL_RCC_ClockConfig+0x1f0>)
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004468:	429a      	cmp	r2, r3
 800446a:	d208      	bcs.n	800447e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800446c:	4b2e      	ldr	r3, [pc, #184]	@ (8004528 <HAL_RCC_ClockConfig+0x1f0>)
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	492b      	ldr	r1, [pc, #172]	@ (8004528 <HAL_RCC_ClockConfig+0x1f0>)
 800447a:	4313      	orrs	r3, r2
 800447c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800447e:	4b29      	ldr	r3, [pc, #164]	@ (8004524 <HAL_RCC_ClockConfig+0x1ec>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0307 	and.w	r3, r3, #7
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	429a      	cmp	r2, r3
 800448a:	d210      	bcs.n	80044ae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800448c:	4b25      	ldr	r3, [pc, #148]	@ (8004524 <HAL_RCC_ClockConfig+0x1ec>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f023 0207 	bic.w	r2, r3, #7
 8004494:	4923      	ldr	r1, [pc, #140]	@ (8004524 <HAL_RCC_ClockConfig+0x1ec>)
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	4313      	orrs	r3, r2
 800449a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800449c:	4b21      	ldr	r3, [pc, #132]	@ (8004524 <HAL_RCC_ClockConfig+0x1ec>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0307 	and.w	r3, r3, #7
 80044a4:	683a      	ldr	r2, [r7, #0]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d001      	beq.n	80044ae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e036      	b.n	800451c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0304 	and.w	r3, r3, #4
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d008      	beq.n	80044cc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044ba:	4b1b      	ldr	r3, [pc, #108]	@ (8004528 <HAL_RCC_ClockConfig+0x1f0>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	4918      	ldr	r1, [pc, #96]	@ (8004528 <HAL_RCC_ClockConfig+0x1f0>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0308 	and.w	r3, r3, #8
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d009      	beq.n	80044ec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044d8:	4b13      	ldr	r3, [pc, #76]	@ (8004528 <HAL_RCC_ClockConfig+0x1f0>)
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	00db      	lsls	r3, r3, #3
 80044e6:	4910      	ldr	r1, [pc, #64]	@ (8004528 <HAL_RCC_ClockConfig+0x1f0>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044ec:	f000 f824 	bl	8004538 <HAL_RCC_GetSysClockFreq>
 80044f0:	4602      	mov	r2, r0
 80044f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004528 <HAL_RCC_ClockConfig+0x1f0>)
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	091b      	lsrs	r3, r3, #4
 80044f8:	f003 030f 	and.w	r3, r3, #15
 80044fc:	490b      	ldr	r1, [pc, #44]	@ (800452c <HAL_RCC_ClockConfig+0x1f4>)
 80044fe:	5ccb      	ldrb	r3, [r1, r3]
 8004500:	f003 031f 	and.w	r3, r3, #31
 8004504:	fa22 f303 	lsr.w	r3, r2, r3
 8004508:	4a09      	ldr	r2, [pc, #36]	@ (8004530 <HAL_RCC_ClockConfig+0x1f8>)
 800450a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800450c:	4b09      	ldr	r3, [pc, #36]	@ (8004534 <HAL_RCC_ClockConfig+0x1fc>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4618      	mov	r0, r3
 8004512:	f7fc fef7 	bl	8001304 <HAL_InitTick>
 8004516:	4603      	mov	r3, r0
 8004518:	72fb      	strb	r3, [r7, #11]

  return status;
 800451a:	7afb      	ldrb	r3, [r7, #11]
}
 800451c:	4618      	mov	r0, r3
 800451e:	3710      	adds	r7, #16
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	40022000 	.word	0x40022000
 8004528:	40021000 	.word	0x40021000
 800452c:	08009f6c 	.word	0x08009f6c
 8004530:	20000000 	.word	0x20000000
 8004534:	20000004 	.word	0x20000004

08004538 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004538:	b480      	push	{r7}
 800453a:	b089      	sub	sp, #36	@ 0x24
 800453c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800453e:	2300      	movs	r3, #0
 8004540:	61fb      	str	r3, [r7, #28]
 8004542:	2300      	movs	r3, #0
 8004544:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004546:	4b3e      	ldr	r3, [pc, #248]	@ (8004640 <HAL_RCC_GetSysClockFreq+0x108>)
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f003 030c 	and.w	r3, r3, #12
 800454e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004550:	4b3b      	ldr	r3, [pc, #236]	@ (8004640 <HAL_RCC_GetSysClockFreq+0x108>)
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	f003 0303 	and.w	r3, r3, #3
 8004558:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d005      	beq.n	800456c <HAL_RCC_GetSysClockFreq+0x34>
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	2b0c      	cmp	r3, #12
 8004564:	d121      	bne.n	80045aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d11e      	bne.n	80045aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800456c:	4b34      	ldr	r3, [pc, #208]	@ (8004640 <HAL_RCC_GetSysClockFreq+0x108>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0308 	and.w	r3, r3, #8
 8004574:	2b00      	cmp	r3, #0
 8004576:	d107      	bne.n	8004588 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004578:	4b31      	ldr	r3, [pc, #196]	@ (8004640 <HAL_RCC_GetSysClockFreq+0x108>)
 800457a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800457e:	0a1b      	lsrs	r3, r3, #8
 8004580:	f003 030f 	and.w	r3, r3, #15
 8004584:	61fb      	str	r3, [r7, #28]
 8004586:	e005      	b.n	8004594 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004588:	4b2d      	ldr	r3, [pc, #180]	@ (8004640 <HAL_RCC_GetSysClockFreq+0x108>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	091b      	lsrs	r3, r3, #4
 800458e:	f003 030f 	and.w	r3, r3, #15
 8004592:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004594:	4a2b      	ldr	r2, [pc, #172]	@ (8004644 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800459c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10d      	bne.n	80045c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045a8:	e00a      	b.n	80045c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	2b04      	cmp	r3, #4
 80045ae:	d102      	bne.n	80045b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80045b0:	4b25      	ldr	r3, [pc, #148]	@ (8004648 <HAL_RCC_GetSysClockFreq+0x110>)
 80045b2:	61bb      	str	r3, [r7, #24]
 80045b4:	e004      	b.n	80045c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	2b08      	cmp	r3, #8
 80045ba:	d101      	bne.n	80045c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80045bc:	4b23      	ldr	r3, [pc, #140]	@ (800464c <HAL_RCC_GetSysClockFreq+0x114>)
 80045be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	2b0c      	cmp	r3, #12
 80045c4:	d134      	bne.n	8004630 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80045c6:	4b1e      	ldr	r3, [pc, #120]	@ (8004640 <HAL_RCC_GetSysClockFreq+0x108>)
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	f003 0303 	and.w	r3, r3, #3
 80045ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d003      	beq.n	80045de <HAL_RCC_GetSysClockFreq+0xa6>
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	2b03      	cmp	r3, #3
 80045da:	d003      	beq.n	80045e4 <HAL_RCC_GetSysClockFreq+0xac>
 80045dc:	e005      	b.n	80045ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80045de:	4b1a      	ldr	r3, [pc, #104]	@ (8004648 <HAL_RCC_GetSysClockFreq+0x110>)
 80045e0:	617b      	str	r3, [r7, #20]
      break;
 80045e2:	e005      	b.n	80045f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80045e4:	4b19      	ldr	r3, [pc, #100]	@ (800464c <HAL_RCC_GetSysClockFreq+0x114>)
 80045e6:	617b      	str	r3, [r7, #20]
      break;
 80045e8:	e002      	b.n	80045f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	617b      	str	r3, [r7, #20]
      break;
 80045ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045f0:	4b13      	ldr	r3, [pc, #76]	@ (8004640 <HAL_RCC_GetSysClockFreq+0x108>)
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	091b      	lsrs	r3, r3, #4
 80045f6:	f003 0307 	and.w	r3, r3, #7
 80045fa:	3301      	adds	r3, #1
 80045fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80045fe:	4b10      	ldr	r3, [pc, #64]	@ (8004640 <HAL_RCC_GetSysClockFreq+0x108>)
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	0a1b      	lsrs	r3, r3, #8
 8004604:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	fb03 f202 	mul.w	r2, r3, r2
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	fbb2 f3f3 	udiv	r3, r2, r3
 8004614:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004616:	4b0a      	ldr	r3, [pc, #40]	@ (8004640 <HAL_RCC_GetSysClockFreq+0x108>)
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	0e5b      	lsrs	r3, r3, #25
 800461c:	f003 0303 	and.w	r3, r3, #3
 8004620:	3301      	adds	r3, #1
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	fbb2 f3f3 	udiv	r3, r2, r3
 800462e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004630:	69bb      	ldr	r3, [r7, #24]
}
 8004632:	4618      	mov	r0, r3
 8004634:	3724      	adds	r7, #36	@ 0x24
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	40021000 	.word	0x40021000
 8004644:	08009f84 	.word	0x08009f84
 8004648:	00f42400 	.word	0x00f42400
 800464c:	007a1200 	.word	0x007a1200

08004650 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004650:	b480      	push	{r7}
 8004652:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004654:	4b03      	ldr	r3, [pc, #12]	@ (8004664 <HAL_RCC_GetHCLKFreq+0x14>)
 8004656:	681b      	ldr	r3, [r3, #0]
}
 8004658:	4618      	mov	r0, r3
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	20000000 	.word	0x20000000

08004668 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800466c:	f7ff fff0 	bl	8004650 <HAL_RCC_GetHCLKFreq>
 8004670:	4602      	mov	r2, r0
 8004672:	4b06      	ldr	r3, [pc, #24]	@ (800468c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	0a1b      	lsrs	r3, r3, #8
 8004678:	f003 0307 	and.w	r3, r3, #7
 800467c:	4904      	ldr	r1, [pc, #16]	@ (8004690 <HAL_RCC_GetPCLK1Freq+0x28>)
 800467e:	5ccb      	ldrb	r3, [r1, r3]
 8004680:	f003 031f 	and.w	r3, r3, #31
 8004684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004688:	4618      	mov	r0, r3
 800468a:	bd80      	pop	{r7, pc}
 800468c:	40021000 	.word	0x40021000
 8004690:	08009f7c 	.word	0x08009f7c

08004694 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004698:	f7ff ffda 	bl	8004650 <HAL_RCC_GetHCLKFreq>
 800469c:	4602      	mov	r2, r0
 800469e:	4b06      	ldr	r3, [pc, #24]	@ (80046b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	0adb      	lsrs	r3, r3, #11
 80046a4:	f003 0307 	and.w	r3, r3, #7
 80046a8:	4904      	ldr	r1, [pc, #16]	@ (80046bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80046aa:	5ccb      	ldrb	r3, [r1, r3]
 80046ac:	f003 031f 	and.w	r3, r3, #31
 80046b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	40021000 	.word	0x40021000
 80046bc:	08009f7c 	.word	0x08009f7c

080046c0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	220f      	movs	r2, #15
 80046ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80046d0:	4b12      	ldr	r3, [pc, #72]	@ (800471c <HAL_RCC_GetClockConfig+0x5c>)
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f003 0203 	and.w	r2, r3, #3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80046dc:	4b0f      	ldr	r3, [pc, #60]	@ (800471c <HAL_RCC_GetClockConfig+0x5c>)
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80046e8:	4b0c      	ldr	r3, [pc, #48]	@ (800471c <HAL_RCC_GetClockConfig+0x5c>)
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80046f4:	4b09      	ldr	r3, [pc, #36]	@ (800471c <HAL_RCC_GetClockConfig+0x5c>)
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	08db      	lsrs	r3, r3, #3
 80046fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004702:	4b07      	ldr	r3, [pc, #28]	@ (8004720 <HAL_RCC_GetClockConfig+0x60>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0207 	and.w	r2, r3, #7
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	601a      	str	r2, [r3, #0]
}
 800470e:	bf00      	nop
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	40021000 	.word	0x40021000
 8004720:	40022000 	.word	0x40022000

08004724 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800472c:	2300      	movs	r3, #0
 800472e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004730:	4b2a      	ldr	r3, [pc, #168]	@ (80047dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004734:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d003      	beq.n	8004744 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800473c:	f7ff f97e 	bl	8003a3c <HAL_PWREx_GetVoltageRange>
 8004740:	6178      	str	r0, [r7, #20]
 8004742:	e014      	b.n	800476e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004744:	4b25      	ldr	r3, [pc, #148]	@ (80047dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004748:	4a24      	ldr	r2, [pc, #144]	@ (80047dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800474a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800474e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004750:	4b22      	ldr	r3, [pc, #136]	@ (80047dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004754:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004758:	60fb      	str	r3, [r7, #12]
 800475a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800475c:	f7ff f96e 	bl	8003a3c <HAL_PWREx_GetVoltageRange>
 8004760:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004762:	4b1e      	ldr	r3, [pc, #120]	@ (80047dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004766:	4a1d      	ldr	r2, [pc, #116]	@ (80047dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004768:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800476c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004774:	d10b      	bne.n	800478e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2b80      	cmp	r3, #128	@ 0x80
 800477a:	d919      	bls.n	80047b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2ba0      	cmp	r3, #160	@ 0xa0
 8004780:	d902      	bls.n	8004788 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004782:	2302      	movs	r3, #2
 8004784:	613b      	str	r3, [r7, #16]
 8004786:	e013      	b.n	80047b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004788:	2301      	movs	r3, #1
 800478a:	613b      	str	r3, [r7, #16]
 800478c:	e010      	b.n	80047b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b80      	cmp	r3, #128	@ 0x80
 8004792:	d902      	bls.n	800479a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004794:	2303      	movs	r3, #3
 8004796:	613b      	str	r3, [r7, #16]
 8004798:	e00a      	b.n	80047b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2b80      	cmp	r3, #128	@ 0x80
 800479e:	d102      	bne.n	80047a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80047a0:	2302      	movs	r3, #2
 80047a2:	613b      	str	r3, [r7, #16]
 80047a4:	e004      	b.n	80047b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2b70      	cmp	r3, #112	@ 0x70
 80047aa:	d101      	bne.n	80047b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80047ac:	2301      	movs	r3, #1
 80047ae:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80047b0:	4b0b      	ldr	r3, [pc, #44]	@ (80047e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f023 0207 	bic.w	r2, r3, #7
 80047b8:	4909      	ldr	r1, [pc, #36]	@ (80047e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	4313      	orrs	r3, r2
 80047be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80047c0:	4b07      	ldr	r3, [pc, #28]	@ (80047e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0307 	and.w	r3, r3, #7
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d001      	beq.n	80047d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e000      	b.n	80047d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3718      	adds	r7, #24
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	40021000 	.word	0x40021000
 80047e0:	40022000 	.word	0x40022000

080047e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047ec:	2300      	movs	r3, #0
 80047ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047f0:	2300      	movs	r3, #0
 80047f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d041      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004804:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004808:	d02a      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800480a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800480e:	d824      	bhi.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004810:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004814:	d008      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004816:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800481a:	d81e      	bhi.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00a      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004820:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004824:	d010      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004826:	e018      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004828:	4b86      	ldr	r3, [pc, #536]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	4a85      	ldr	r2, [pc, #532]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800482e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004832:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004834:	e015      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	3304      	adds	r3, #4
 800483a:	2100      	movs	r1, #0
 800483c:	4618      	mov	r0, r3
 800483e:	f000 facd 	bl	8004ddc <RCCEx_PLLSAI1_Config>
 8004842:	4603      	mov	r3, r0
 8004844:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004846:	e00c      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	3320      	adds	r3, #32
 800484c:	2100      	movs	r1, #0
 800484e:	4618      	mov	r0, r3
 8004850:	f000 fbb6 	bl	8004fc0 <RCCEx_PLLSAI2_Config>
 8004854:	4603      	mov	r3, r0
 8004856:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004858:	e003      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	74fb      	strb	r3, [r7, #19]
      break;
 800485e:	e000      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004860:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004862:	7cfb      	ldrb	r3, [r7, #19]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10b      	bne.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004868:	4b76      	ldr	r3, [pc, #472]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800486a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800486e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004876:	4973      	ldr	r1, [pc, #460]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004878:	4313      	orrs	r3, r2
 800487a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800487e:	e001      	b.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004880:	7cfb      	ldrb	r3, [r7, #19]
 8004882:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d041      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004894:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004898:	d02a      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800489a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800489e:	d824      	bhi.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80048a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80048a4:	d008      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80048a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80048aa:	d81e      	bhi.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00a      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80048b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048b4:	d010      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80048b6:	e018      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80048b8:	4b62      	ldr	r3, [pc, #392]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	4a61      	ldr	r2, [pc, #388]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048c2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048c4:	e015      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	3304      	adds	r3, #4
 80048ca:	2100      	movs	r1, #0
 80048cc:	4618      	mov	r0, r3
 80048ce:	f000 fa85 	bl	8004ddc <RCCEx_PLLSAI1_Config>
 80048d2:	4603      	mov	r3, r0
 80048d4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048d6:	e00c      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	3320      	adds	r3, #32
 80048dc:	2100      	movs	r1, #0
 80048de:	4618      	mov	r0, r3
 80048e0:	f000 fb6e 	bl	8004fc0 <RCCEx_PLLSAI2_Config>
 80048e4:	4603      	mov	r3, r0
 80048e6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048e8:	e003      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	74fb      	strb	r3, [r7, #19]
      break;
 80048ee:	e000      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80048f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048f2:	7cfb      	ldrb	r3, [r7, #19]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10b      	bne.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80048f8:	4b52      	ldr	r3, [pc, #328]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048fe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004906:	494f      	ldr	r1, [pc, #316]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004908:	4313      	orrs	r3, r2
 800490a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800490e:	e001      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004910:	7cfb      	ldrb	r3, [r7, #19]
 8004912:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800491c:	2b00      	cmp	r3, #0
 800491e:	f000 80a0 	beq.w	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004922:	2300      	movs	r3, #0
 8004924:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004926:	4b47      	ldr	r3, [pc, #284]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800492a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d101      	bne.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004932:	2301      	movs	r3, #1
 8004934:	e000      	b.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004936:	2300      	movs	r3, #0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00d      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800493c:	4b41      	ldr	r3, [pc, #260]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800493e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004940:	4a40      	ldr	r2, [pc, #256]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004942:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004946:	6593      	str	r3, [r2, #88]	@ 0x58
 8004948:	4b3e      	ldr	r3, [pc, #248]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800494a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800494c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004950:	60bb      	str	r3, [r7, #8]
 8004952:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004954:	2301      	movs	r3, #1
 8004956:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004958:	4b3b      	ldr	r3, [pc, #236]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a3a      	ldr	r2, [pc, #232]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800495e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004962:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004964:	f7fc fde6 	bl	8001534 <HAL_GetTick>
 8004968:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800496a:	e009      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800496c:	f7fc fde2 	bl	8001534 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	2b02      	cmp	r3, #2
 8004978:	d902      	bls.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	74fb      	strb	r3, [r7, #19]
        break;
 800497e:	e005      	b.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004980:	4b31      	ldr	r3, [pc, #196]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004988:	2b00      	cmp	r3, #0
 800498a:	d0ef      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800498c:	7cfb      	ldrb	r3, [r7, #19]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d15c      	bne.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004992:	4b2c      	ldr	r3, [pc, #176]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004994:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004998:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800499c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d01f      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d019      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049b0:	4b24      	ldr	r3, [pc, #144]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049bc:	4b21      	ldr	r3, [pc, #132]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049c2:	4a20      	ldr	r2, [pc, #128]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049cc:	4b1d      	ldr	r3, [pc, #116]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049d2:	4a1c      	ldr	r2, [pc, #112]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049dc:	4a19      	ldr	r2, [pc, #100]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d016      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ee:	f7fc fda1 	bl	8001534 <HAL_GetTick>
 80049f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049f4:	e00b      	b.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049f6:	f7fc fd9d 	bl	8001534 <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d902      	bls.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	74fb      	strb	r3, [r7, #19]
            break;
 8004a0c:	e006      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a14:	f003 0302 	and.w	r3, r3, #2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d0ec      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004a1c:	7cfb      	ldrb	r3, [r7, #19]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10c      	bne.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a22:	4b08      	ldr	r3, [pc, #32]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a28:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a32:	4904      	ldr	r1, [pc, #16]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004a3a:	e009      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a3c:	7cfb      	ldrb	r3, [r7, #19]
 8004a3e:	74bb      	strb	r3, [r7, #18]
 8004a40:	e006      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004a42:	bf00      	nop
 8004a44:	40021000 	.word	0x40021000
 8004a48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a4c:	7cfb      	ldrb	r3, [r7, #19]
 8004a4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a50:	7c7b      	ldrb	r3, [r7, #17]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d105      	bne.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a56:	4ba6      	ldr	r3, [pc, #664]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a5a:	4aa5      	ldr	r2, [pc, #660]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a60:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00a      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a6e:	4ba0      	ldr	r3, [pc, #640]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a74:	f023 0203 	bic.w	r2, r3, #3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a7c:	499c      	ldr	r1, [pc, #624]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0302 	and.w	r3, r3, #2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00a      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a90:	4b97      	ldr	r3, [pc, #604]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a96:	f023 020c 	bic.w	r2, r3, #12
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a9e:	4994      	ldr	r1, [pc, #592]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0304 	and.w	r3, r3, #4
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00a      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ab2:	4b8f      	ldr	r3, [pc, #572]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ab8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac0:	498b      	ldr	r1, [pc, #556]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0308 	and.w	r3, r3, #8
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00a      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ad4:	4b86      	ldr	r3, [pc, #536]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ada:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ae2:	4983      	ldr	r1, [pc, #524]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0310 	and.w	r3, r3, #16
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00a      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004af6:	4b7e      	ldr	r3, [pc, #504]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004afc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b04:	497a      	ldr	r1, [pc, #488]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0320 	and.w	r3, r3, #32
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00a      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b18:	4b75      	ldr	r3, [pc, #468]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b1e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b26:	4972      	ldr	r1, [pc, #456]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00a      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b3a:	4b6d      	ldr	r3, [pc, #436]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b40:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b48:	4969      	ldr	r1, [pc, #420]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00a      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b5c:	4b64      	ldr	r3, [pc, #400]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b62:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b6a:	4961      	ldr	r1, [pc, #388]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00a      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b7e:	4b5c      	ldr	r3, [pc, #368]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b84:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b8c:	4958      	ldr	r1, [pc, #352]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00a      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ba0:	4b53      	ldr	r3, [pc, #332]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ba6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bae:	4950      	ldr	r1, [pc, #320]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00a      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bc2:	4b4b      	ldr	r3, [pc, #300]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bc8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bd0:	4947      	ldr	r1, [pc, #284]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00a      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004be4:	4b42      	ldr	r3, [pc, #264]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004be6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004bea:	f023 0203 	bic.w	r2, r3, #3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bf2:	493f      	ldr	r1, [pc, #252]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d028      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c06:	4b3a      	ldr	r3, [pc, #232]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c0c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c14:	4936      	ldr	r1, [pc, #216]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c24:	d106      	bne.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c26:	4b32      	ldr	r3, [pc, #200]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	4a31      	ldr	r2, [pc, #196]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004c2c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c30:	60d3      	str	r3, [r2, #12]
 8004c32:	e011      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c38:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c3c:	d10c      	bne.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	3304      	adds	r3, #4
 8004c42:	2101      	movs	r1, #1
 8004c44:	4618      	mov	r0, r3
 8004c46:	f000 f8c9 	bl	8004ddc <RCCEx_PLLSAI1_Config>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004c4e:	7cfb      	ldrb	r3, [r7, #19]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d001      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8004c54:	7cfb      	ldrb	r3, [r7, #19]
 8004c56:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d028      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c64:	4b22      	ldr	r3, [pc, #136]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c6a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c72:	491f      	ldr	r1, [pc, #124]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c82:	d106      	bne.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c84:	4b1a      	ldr	r3, [pc, #104]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	4a19      	ldr	r2, [pc, #100]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004c8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c8e:	60d3      	str	r3, [r2, #12]
 8004c90:	e011      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c96:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c9a:	d10c      	bne.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	3304      	adds	r3, #4
 8004ca0:	2101      	movs	r1, #1
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 f89a 	bl	8004ddc <RCCEx_PLLSAI1_Config>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cac:	7cfb      	ldrb	r3, [r7, #19]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d001      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8004cb2:	7cfb      	ldrb	r3, [r7, #19]
 8004cb4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d02a      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cc8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004cd0:	4907      	ldr	r1, [pc, #28]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004cdc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ce0:	d108      	bne.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ce2:	4b03      	ldr	r3, [pc, #12]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	4a02      	ldr	r2, [pc, #8]	@ (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004ce8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004cec:	60d3      	str	r3, [r2, #12]
 8004cee:	e013      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8004cf0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004cf8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004cfc:	d10c      	bne.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	3304      	adds	r3, #4
 8004d02:	2101      	movs	r1, #1
 8004d04:	4618      	mov	r0, r3
 8004d06:	f000 f869 	bl	8004ddc <RCCEx_PLLSAI1_Config>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d0e:	7cfb      	ldrb	r3, [r7, #19]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d001      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8004d14:	7cfb      	ldrb	r3, [r7, #19]
 8004d16:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d02f      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d24:	4b2c      	ldr	r3, [pc, #176]	@ (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d2a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d32:	4929      	ldr	r1, [pc, #164]	@ (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d42:	d10d      	bne.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	3304      	adds	r3, #4
 8004d48:	2102      	movs	r1, #2
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 f846 	bl	8004ddc <RCCEx_PLLSAI1_Config>
 8004d50:	4603      	mov	r3, r0
 8004d52:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d54:	7cfb      	ldrb	r3, [r7, #19]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d014      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8004d5a:	7cfb      	ldrb	r3, [r7, #19]
 8004d5c:	74bb      	strb	r3, [r7, #18]
 8004d5e:	e011      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d68:	d10c      	bne.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	3320      	adds	r3, #32
 8004d6e:	2102      	movs	r1, #2
 8004d70:	4618      	mov	r0, r3
 8004d72:	f000 f925 	bl	8004fc0 <RCCEx_PLLSAI2_Config>
 8004d76:	4603      	mov	r3, r0
 8004d78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d7a:	7cfb      	ldrb	r3, [r7, #19]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d001      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8004d80:	7cfb      	ldrb	r3, [r7, #19]
 8004d82:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00b      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d90:	4b11      	ldr	r3, [pc, #68]	@ (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d96:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004da0:	490d      	ldr	r1, [pc, #52]	@ (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00b      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004db4:	4b08      	ldr	r3, [pc, #32]	@ (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004dc4:	4904      	ldr	r1, [pc, #16]	@ (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004dcc:	7cbb      	ldrb	r3, [r7, #18]
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3718      	adds	r7, #24
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	40021000 	.word	0x40021000

08004ddc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004de6:	2300      	movs	r3, #0
 8004de8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004dea:	4b74      	ldr	r3, [pc, #464]	@ (8004fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	f003 0303 	and.w	r3, r3, #3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d018      	beq.n	8004e28 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004df6:	4b71      	ldr	r3, [pc, #452]	@ (8004fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	f003 0203 	and.w	r2, r3, #3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d10d      	bne.n	8004e22 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
       ||
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d009      	beq.n	8004e22 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004e0e:	4b6b      	ldr	r3, [pc, #428]	@ (8004fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	091b      	lsrs	r3, r3, #4
 8004e14:	f003 0307 	and.w	r3, r3, #7
 8004e18:	1c5a      	adds	r2, r3, #1
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
       ||
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d047      	beq.n	8004eb2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	73fb      	strb	r3, [r7, #15]
 8004e26:	e044      	b.n	8004eb2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2b03      	cmp	r3, #3
 8004e2e:	d018      	beq.n	8004e62 <RCCEx_PLLSAI1_Config+0x86>
 8004e30:	2b03      	cmp	r3, #3
 8004e32:	d825      	bhi.n	8004e80 <RCCEx_PLLSAI1_Config+0xa4>
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d002      	beq.n	8004e3e <RCCEx_PLLSAI1_Config+0x62>
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d009      	beq.n	8004e50 <RCCEx_PLLSAI1_Config+0x74>
 8004e3c:	e020      	b.n	8004e80 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e3e:	4b5f      	ldr	r3, [pc, #380]	@ (8004fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d11d      	bne.n	8004e86 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e4e:	e01a      	b.n	8004e86 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e50:	4b5a      	ldr	r3, [pc, #360]	@ (8004fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d116      	bne.n	8004e8a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e60:	e013      	b.n	8004e8a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e62:	4b56      	ldr	r3, [pc, #344]	@ (8004fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10f      	bne.n	8004e8e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e6e:	4b53      	ldr	r3, [pc, #332]	@ (8004fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d109      	bne.n	8004e8e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e7e:	e006      	b.n	8004e8e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	73fb      	strb	r3, [r7, #15]
      break;
 8004e84:	e004      	b.n	8004e90 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e86:	bf00      	nop
 8004e88:	e002      	b.n	8004e90 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e8a:	bf00      	nop
 8004e8c:	e000      	b.n	8004e90 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e8e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e90:	7bfb      	ldrb	r3, [r7, #15]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d10d      	bne.n	8004eb2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e96:	4b49      	ldr	r3, [pc, #292]	@ (8004fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6819      	ldr	r1, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	011b      	lsls	r3, r3, #4
 8004eaa:	430b      	orrs	r3, r1
 8004eac:	4943      	ldr	r1, [pc, #268]	@ (8004fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004eb2:	7bfb      	ldrb	r3, [r7, #15]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d17c      	bne.n	8004fb2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004eb8:	4b40      	ldr	r3, [pc, #256]	@ (8004fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a3f      	ldr	r2, [pc, #252]	@ (8004fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ebe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ec2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ec4:	f7fc fb36 	bl	8001534 <HAL_GetTick>
 8004ec8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004eca:	e009      	b.n	8004ee0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ecc:	f7fc fb32 	bl	8001534 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d902      	bls.n	8004ee0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	73fb      	strb	r3, [r7, #15]
        break;
 8004ede:	e005      	b.n	8004eec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ee0:	4b36      	ldr	r3, [pc, #216]	@ (8004fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1ef      	bne.n	8004ecc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004eec:	7bfb      	ldrb	r3, [r7, #15]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d15f      	bne.n	8004fb2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d110      	bne.n	8004f1a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ef8:	4b30      	ldr	r3, [pc, #192]	@ (8004fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004f00:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	6892      	ldr	r2, [r2, #8]
 8004f08:	0211      	lsls	r1, r2, #8
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	68d2      	ldr	r2, [r2, #12]
 8004f0e:	06d2      	lsls	r2, r2, #27
 8004f10:	430a      	orrs	r2, r1
 8004f12:	492a      	ldr	r1, [pc, #168]	@ (8004fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	610b      	str	r3, [r1, #16]
 8004f18:	e027      	b.n	8004f6a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d112      	bne.n	8004f46 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f20:	4b26      	ldr	r3, [pc, #152]	@ (8004fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004f28:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	6892      	ldr	r2, [r2, #8]
 8004f30:	0211      	lsls	r1, r2, #8
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	6912      	ldr	r2, [r2, #16]
 8004f36:	0852      	lsrs	r2, r2, #1
 8004f38:	3a01      	subs	r2, #1
 8004f3a:	0552      	lsls	r2, r2, #21
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	491f      	ldr	r1, [pc, #124]	@ (8004fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	610b      	str	r3, [r1, #16]
 8004f44:	e011      	b.n	8004f6a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f46:	4b1d      	ldr	r3, [pc, #116]	@ (8004fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004f4e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	6892      	ldr	r2, [r2, #8]
 8004f56:	0211      	lsls	r1, r2, #8
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	6952      	ldr	r2, [r2, #20]
 8004f5c:	0852      	lsrs	r2, r2, #1
 8004f5e:	3a01      	subs	r2, #1
 8004f60:	0652      	lsls	r2, r2, #25
 8004f62:	430a      	orrs	r2, r1
 8004f64:	4915      	ldr	r1, [pc, #84]	@ (8004fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004f6a:	4b14      	ldr	r3, [pc, #80]	@ (8004fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a13      	ldr	r2, [pc, #76]	@ (8004fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f70:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004f74:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f76:	f7fc fadd 	bl	8001534 <HAL_GetTick>
 8004f7a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f7c:	e009      	b.n	8004f92 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f7e:	f7fc fad9 	bl	8001534 <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d902      	bls.n	8004f92 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	73fb      	strb	r3, [r7, #15]
          break;
 8004f90:	e005      	b.n	8004f9e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f92:	4b0a      	ldr	r3, [pc, #40]	@ (8004fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d0ef      	beq.n	8004f7e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004f9e:	7bfb      	ldrb	r3, [r7, #15]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d106      	bne.n	8004fb2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004fa4:	4b05      	ldr	r3, [pc, #20]	@ (8004fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fa6:	691a      	ldr	r2, [r3, #16]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	4903      	ldr	r1, [pc, #12]	@ (8004fbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3710      	adds	r7, #16
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	40021000 	.word	0x40021000

08004fc0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004fce:	4b69      	ldr	r3, [pc, #420]	@ (8005174 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	f003 0303 	and.w	r3, r3, #3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d018      	beq.n	800500c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004fda:	4b66      	ldr	r3, [pc, #408]	@ (8005174 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	f003 0203 	and.w	r2, r3, #3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d10d      	bne.n	8005006 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
       ||
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d009      	beq.n	8005006 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004ff2:	4b60      	ldr	r3, [pc, #384]	@ (8005174 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	091b      	lsrs	r3, r3, #4
 8004ff8:	f003 0307 	and.w	r3, r3, #7
 8004ffc:	1c5a      	adds	r2, r3, #1
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	685b      	ldr	r3, [r3, #4]
       ||
 8005002:	429a      	cmp	r2, r3
 8005004:	d047      	beq.n	8005096 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	73fb      	strb	r3, [r7, #15]
 800500a:	e044      	b.n	8005096 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2b03      	cmp	r3, #3
 8005012:	d018      	beq.n	8005046 <RCCEx_PLLSAI2_Config+0x86>
 8005014:	2b03      	cmp	r3, #3
 8005016:	d825      	bhi.n	8005064 <RCCEx_PLLSAI2_Config+0xa4>
 8005018:	2b01      	cmp	r3, #1
 800501a:	d002      	beq.n	8005022 <RCCEx_PLLSAI2_Config+0x62>
 800501c:	2b02      	cmp	r3, #2
 800501e:	d009      	beq.n	8005034 <RCCEx_PLLSAI2_Config+0x74>
 8005020:	e020      	b.n	8005064 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005022:	4b54      	ldr	r3, [pc, #336]	@ (8005174 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	2b00      	cmp	r3, #0
 800502c:	d11d      	bne.n	800506a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005032:	e01a      	b.n	800506a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005034:	4b4f      	ldr	r3, [pc, #316]	@ (8005174 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800503c:	2b00      	cmp	r3, #0
 800503e:	d116      	bne.n	800506e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005044:	e013      	b.n	800506e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005046:	4b4b      	ldr	r3, [pc, #300]	@ (8005174 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10f      	bne.n	8005072 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005052:	4b48      	ldr	r3, [pc, #288]	@ (8005174 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d109      	bne.n	8005072 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005062:	e006      	b.n	8005072 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	73fb      	strb	r3, [r7, #15]
      break;
 8005068:	e004      	b.n	8005074 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800506a:	bf00      	nop
 800506c:	e002      	b.n	8005074 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800506e:	bf00      	nop
 8005070:	e000      	b.n	8005074 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005072:	bf00      	nop
    }

    if(status == HAL_OK)
 8005074:	7bfb      	ldrb	r3, [r7, #15]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10d      	bne.n	8005096 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800507a:	4b3e      	ldr	r3, [pc, #248]	@ (8005174 <RCCEx_PLLSAI2_Config+0x1b4>)
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6819      	ldr	r1, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	3b01      	subs	r3, #1
 800508c:	011b      	lsls	r3, r3, #4
 800508e:	430b      	orrs	r3, r1
 8005090:	4938      	ldr	r1, [pc, #224]	@ (8005174 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005092:	4313      	orrs	r3, r2
 8005094:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005096:	7bfb      	ldrb	r3, [r7, #15]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d166      	bne.n	800516a <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800509c:	4b35      	ldr	r3, [pc, #212]	@ (8005174 <RCCEx_PLLSAI2_Config+0x1b4>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a34      	ldr	r2, [pc, #208]	@ (8005174 <RCCEx_PLLSAI2_Config+0x1b4>)
 80050a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050a8:	f7fc fa44 	bl	8001534 <HAL_GetTick>
 80050ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80050ae:	e009      	b.n	80050c4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80050b0:	f7fc fa40 	bl	8001534 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d902      	bls.n	80050c4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	73fb      	strb	r3, [r7, #15]
        break;
 80050c2:	e005      	b.n	80050d0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80050c4:	4b2b      	ldr	r3, [pc, #172]	@ (8005174 <RCCEx_PLLSAI2_Config+0x1b4>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d1ef      	bne.n	80050b0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80050d0:	7bfb      	ldrb	r3, [r7, #15]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d149      	bne.n	800516a <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d110      	bne.n	80050fe <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80050dc:	4b25      	ldr	r3, [pc, #148]	@ (8005174 <RCCEx_PLLSAI2_Config+0x1b4>)
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80050e4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	6892      	ldr	r2, [r2, #8]
 80050ec:	0211      	lsls	r1, r2, #8
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	68d2      	ldr	r2, [r2, #12]
 80050f2:	06d2      	lsls	r2, r2, #27
 80050f4:	430a      	orrs	r2, r1
 80050f6:	491f      	ldr	r1, [pc, #124]	@ (8005174 <RCCEx_PLLSAI2_Config+0x1b4>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	614b      	str	r3, [r1, #20]
 80050fc:	e011      	b.n	8005122 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80050fe:	4b1d      	ldr	r3, [pc, #116]	@ (8005174 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005106:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	6892      	ldr	r2, [r2, #8]
 800510e:	0211      	lsls	r1, r2, #8
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	6912      	ldr	r2, [r2, #16]
 8005114:	0852      	lsrs	r2, r2, #1
 8005116:	3a01      	subs	r2, #1
 8005118:	0652      	lsls	r2, r2, #25
 800511a:	430a      	orrs	r2, r1
 800511c:	4915      	ldr	r1, [pc, #84]	@ (8005174 <RCCEx_PLLSAI2_Config+0x1b4>)
 800511e:	4313      	orrs	r3, r2
 8005120:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005122:	4b14      	ldr	r3, [pc, #80]	@ (8005174 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a13      	ldr	r2, [pc, #76]	@ (8005174 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005128:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800512c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800512e:	f7fc fa01 	bl	8001534 <HAL_GetTick>
 8005132:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005134:	e009      	b.n	800514a <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005136:	f7fc f9fd 	bl	8001534 <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	2b02      	cmp	r3, #2
 8005142:	d902      	bls.n	800514a <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	73fb      	strb	r3, [r7, #15]
          break;
 8005148:	e005      	b.n	8005156 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800514a:	4b0a      	ldr	r3, [pc, #40]	@ (8005174 <RCCEx_PLLSAI2_Config+0x1b4>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d0ef      	beq.n	8005136 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8005156:	7bfb      	ldrb	r3, [r7, #15]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d106      	bne.n	800516a <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800515c:	4b05      	ldr	r3, [pc, #20]	@ (8005174 <RCCEx_PLLSAI2_Config+0x1b4>)
 800515e:	695a      	ldr	r2, [r3, #20]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	695b      	ldr	r3, [r3, #20]
 8005164:	4903      	ldr	r1, [pc, #12]	@ (8005174 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005166:	4313      	orrs	r3, r2
 8005168:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800516a:	7bfb      	ldrb	r3, [r7, #15]
}
 800516c:	4618      	mov	r0, r3
 800516e:	3710      	adds	r7, #16
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	40021000 	.word	0x40021000

08005178 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e049      	b.n	800521e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d106      	bne.n	80051a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 f841 	bl	8005226 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2202      	movs	r2, #2
 80051a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	3304      	adds	r3, #4
 80051b4:	4619      	mov	r1, r3
 80051b6:	4610      	mov	r0, r2
 80051b8:	f000 f9e0 	bl	800557c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3708      	adds	r7, #8
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005226:	b480      	push	{r7}
 8005228:	b083      	sub	sp, #12
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800522e:	bf00      	nop
 8005230:	370c      	adds	r7, #12
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
	...

0800523c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800524a:	b2db      	uxtb	r3, r3
 800524c:	2b01      	cmp	r3, #1
 800524e:	d001      	beq.n	8005254 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e04f      	b.n	80052f4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2202      	movs	r2, #2
 8005258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68da      	ldr	r2, [r3, #12]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f042 0201 	orr.w	r2, r2, #1
 800526a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a23      	ldr	r2, [pc, #140]	@ (8005300 <HAL_TIM_Base_Start_IT+0xc4>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d01d      	beq.n	80052b2 <HAL_TIM_Base_Start_IT+0x76>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800527e:	d018      	beq.n	80052b2 <HAL_TIM_Base_Start_IT+0x76>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a1f      	ldr	r2, [pc, #124]	@ (8005304 <HAL_TIM_Base_Start_IT+0xc8>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d013      	beq.n	80052b2 <HAL_TIM_Base_Start_IT+0x76>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a1e      	ldr	r2, [pc, #120]	@ (8005308 <HAL_TIM_Base_Start_IT+0xcc>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d00e      	beq.n	80052b2 <HAL_TIM_Base_Start_IT+0x76>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a1c      	ldr	r2, [pc, #112]	@ (800530c <HAL_TIM_Base_Start_IT+0xd0>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d009      	beq.n	80052b2 <HAL_TIM_Base_Start_IT+0x76>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a1b      	ldr	r2, [pc, #108]	@ (8005310 <HAL_TIM_Base_Start_IT+0xd4>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d004      	beq.n	80052b2 <HAL_TIM_Base_Start_IT+0x76>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a19      	ldr	r2, [pc, #100]	@ (8005314 <HAL_TIM_Base_Start_IT+0xd8>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d115      	bne.n	80052de <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	689a      	ldr	r2, [r3, #8]
 80052b8:	4b17      	ldr	r3, [pc, #92]	@ (8005318 <HAL_TIM_Base_Start_IT+0xdc>)
 80052ba:	4013      	ands	r3, r2
 80052bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2b06      	cmp	r3, #6
 80052c2:	d015      	beq.n	80052f0 <HAL_TIM_Base_Start_IT+0xb4>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052ca:	d011      	beq.n	80052f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f042 0201 	orr.w	r2, r2, #1
 80052da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052dc:	e008      	b.n	80052f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f042 0201 	orr.w	r2, r2, #1
 80052ec:	601a      	str	r2, [r3, #0]
 80052ee:	e000      	b.n	80052f2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3714      	adds	r7, #20
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	40012c00 	.word	0x40012c00
 8005304:	40000400 	.word	0x40000400
 8005308:	40000800 	.word	0x40000800
 800530c:	40000c00 	.word	0x40000c00
 8005310:	40013400 	.word	0x40013400
 8005314:	40014000 	.word	0x40014000
 8005318:	00010007 	.word	0x00010007

0800531c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	2b00      	cmp	r3, #0
 800533c:	d020      	beq.n	8005380 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f003 0302 	and.w	r3, r3, #2
 8005344:	2b00      	cmp	r3, #0
 8005346:	d01b      	beq.n	8005380 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f06f 0202 	mvn.w	r2, #2
 8005350:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2201      	movs	r2, #1
 8005356:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	f003 0303 	and.w	r3, r3, #3
 8005362:	2b00      	cmp	r3, #0
 8005364:	d003      	beq.n	800536e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f8e9 	bl	800553e <HAL_TIM_IC_CaptureCallback>
 800536c:	e005      	b.n	800537a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f8db 	bl	800552a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 f8ec 	bl	8005552 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	f003 0304 	and.w	r3, r3, #4
 8005386:	2b00      	cmp	r3, #0
 8005388:	d020      	beq.n	80053cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f003 0304 	and.w	r3, r3, #4
 8005390:	2b00      	cmp	r3, #0
 8005392:	d01b      	beq.n	80053cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f06f 0204 	mvn.w	r2, #4
 800539c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2202      	movs	r2, #2
 80053a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d003      	beq.n	80053ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 f8c3 	bl	800553e <HAL_TIM_IC_CaptureCallback>
 80053b8:	e005      	b.n	80053c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 f8b5 	bl	800552a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 f8c6 	bl	8005552 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	f003 0308 	and.w	r3, r3, #8
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d020      	beq.n	8005418 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f003 0308 	and.w	r3, r3, #8
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d01b      	beq.n	8005418 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f06f 0208 	mvn.w	r2, #8
 80053e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2204      	movs	r2, #4
 80053ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	69db      	ldr	r3, [r3, #28]
 80053f6:	f003 0303 	and.w	r3, r3, #3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d003      	beq.n	8005406 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 f89d 	bl	800553e <HAL_TIM_IC_CaptureCallback>
 8005404:	e005      	b.n	8005412 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 f88f 	bl	800552a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 f8a0 	bl	8005552 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	f003 0310 	and.w	r3, r3, #16
 800541e:	2b00      	cmp	r3, #0
 8005420:	d020      	beq.n	8005464 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f003 0310 	and.w	r3, r3, #16
 8005428:	2b00      	cmp	r3, #0
 800542a:	d01b      	beq.n	8005464 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f06f 0210 	mvn.w	r2, #16
 8005434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2208      	movs	r2, #8
 800543a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	69db      	ldr	r3, [r3, #28]
 8005442:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005446:	2b00      	cmp	r3, #0
 8005448:	d003      	beq.n	8005452 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 f877 	bl	800553e <HAL_TIM_IC_CaptureCallback>
 8005450:	e005      	b.n	800545e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f869 	bl	800552a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 f87a 	bl	8005552 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00c      	beq.n	8005488 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	2b00      	cmp	r3, #0
 8005476:	d007      	beq.n	8005488 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f06f 0201 	mvn.w	r2, #1
 8005480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f7fb fd3a 	bl	8000efc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800548e:	2b00      	cmp	r3, #0
 8005490:	d104      	bne.n	800549c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00c      	beq.n	80054b6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d007      	beq.n	80054b6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80054ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 f913 	bl	80056dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00c      	beq.n	80054da <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d007      	beq.n	80054da <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80054d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 f90b 	bl	80056f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00c      	beq.n	80054fe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d007      	beq.n	80054fe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80054f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 f834 	bl	8005566 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	f003 0320 	and.w	r3, r3, #32
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00c      	beq.n	8005522 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f003 0320 	and.w	r3, r3, #32
 800550e:	2b00      	cmp	r3, #0
 8005510:	d007      	beq.n	8005522 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f06f 0220 	mvn.w	r2, #32
 800551a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 f8d3 	bl	80056c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005522:	bf00      	nop
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800552a:	b480      	push	{r7}
 800552c:	b083      	sub	sp, #12
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005532:	bf00      	nop
 8005534:	370c      	adds	r7, #12
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr

0800553e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800553e:	b480      	push	{r7}
 8005540:	b083      	sub	sp, #12
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005546:	bf00      	nop
 8005548:	370c      	adds	r7, #12
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr

08005552 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005552:	b480      	push	{r7}
 8005554:	b083      	sub	sp, #12
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800555a:	bf00      	nop
 800555c:	370c      	adds	r7, #12
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr

08005566 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005566:	b480      	push	{r7}
 8005568:	b083      	sub	sp, #12
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800556e:	bf00      	nop
 8005570:	370c      	adds	r7, #12
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
	...

0800557c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a46      	ldr	r2, [pc, #280]	@ (80056a8 <TIM_Base_SetConfig+0x12c>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d013      	beq.n	80055bc <TIM_Base_SetConfig+0x40>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800559a:	d00f      	beq.n	80055bc <TIM_Base_SetConfig+0x40>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a43      	ldr	r2, [pc, #268]	@ (80056ac <TIM_Base_SetConfig+0x130>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d00b      	beq.n	80055bc <TIM_Base_SetConfig+0x40>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a42      	ldr	r2, [pc, #264]	@ (80056b0 <TIM_Base_SetConfig+0x134>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d007      	beq.n	80055bc <TIM_Base_SetConfig+0x40>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a41      	ldr	r2, [pc, #260]	@ (80056b4 <TIM_Base_SetConfig+0x138>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d003      	beq.n	80055bc <TIM_Base_SetConfig+0x40>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a40      	ldr	r2, [pc, #256]	@ (80056b8 <TIM_Base_SetConfig+0x13c>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d108      	bne.n	80055ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a35      	ldr	r2, [pc, #212]	@ (80056a8 <TIM_Base_SetConfig+0x12c>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d01f      	beq.n	8005616 <TIM_Base_SetConfig+0x9a>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055dc:	d01b      	beq.n	8005616 <TIM_Base_SetConfig+0x9a>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a32      	ldr	r2, [pc, #200]	@ (80056ac <TIM_Base_SetConfig+0x130>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d017      	beq.n	8005616 <TIM_Base_SetConfig+0x9a>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a31      	ldr	r2, [pc, #196]	@ (80056b0 <TIM_Base_SetConfig+0x134>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d013      	beq.n	8005616 <TIM_Base_SetConfig+0x9a>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a30      	ldr	r2, [pc, #192]	@ (80056b4 <TIM_Base_SetConfig+0x138>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d00f      	beq.n	8005616 <TIM_Base_SetConfig+0x9a>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a2f      	ldr	r2, [pc, #188]	@ (80056b8 <TIM_Base_SetConfig+0x13c>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d00b      	beq.n	8005616 <TIM_Base_SetConfig+0x9a>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a2e      	ldr	r2, [pc, #184]	@ (80056bc <TIM_Base_SetConfig+0x140>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d007      	beq.n	8005616 <TIM_Base_SetConfig+0x9a>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a2d      	ldr	r2, [pc, #180]	@ (80056c0 <TIM_Base_SetConfig+0x144>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d003      	beq.n	8005616 <TIM_Base_SetConfig+0x9a>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a2c      	ldr	r2, [pc, #176]	@ (80056c4 <TIM_Base_SetConfig+0x148>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d108      	bne.n	8005628 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800561c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	4313      	orrs	r3, r2
 8005626:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	4313      	orrs	r3, r2
 8005634:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	689a      	ldr	r2, [r3, #8]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a16      	ldr	r2, [pc, #88]	@ (80056a8 <TIM_Base_SetConfig+0x12c>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d00f      	beq.n	8005674 <TIM_Base_SetConfig+0xf8>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a18      	ldr	r2, [pc, #96]	@ (80056b8 <TIM_Base_SetConfig+0x13c>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d00b      	beq.n	8005674 <TIM_Base_SetConfig+0xf8>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a17      	ldr	r2, [pc, #92]	@ (80056bc <TIM_Base_SetConfig+0x140>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d007      	beq.n	8005674 <TIM_Base_SetConfig+0xf8>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a16      	ldr	r2, [pc, #88]	@ (80056c0 <TIM_Base_SetConfig+0x144>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d003      	beq.n	8005674 <TIM_Base_SetConfig+0xf8>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a15      	ldr	r2, [pc, #84]	@ (80056c4 <TIM_Base_SetConfig+0x148>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d103      	bne.n	800567c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	691a      	ldr	r2, [r3, #16]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	f003 0301 	and.w	r3, r3, #1
 800568a:	2b01      	cmp	r3, #1
 800568c:	d105      	bne.n	800569a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	f023 0201 	bic.w	r2, r3, #1
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	611a      	str	r2, [r3, #16]
  }
}
 800569a:	bf00      	nop
 800569c:	3714      	adds	r7, #20
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	40012c00 	.word	0x40012c00
 80056ac:	40000400 	.word	0x40000400
 80056b0:	40000800 	.word	0x40000800
 80056b4:	40000c00 	.word	0x40000c00
 80056b8:	40013400 	.word	0x40013400
 80056bc:	40014000 	.word	0x40014000
 80056c0:	40014400 	.word	0x40014400
 80056c4:	40014800 	.word	0x40014800

080056c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d101      	bne.n	8005716 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e040      	b.n	8005798 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800571a:	2b00      	cmp	r3, #0
 800571c:	d106      	bne.n	800572c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f7fb fd86 	bl	8001238 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2224      	movs	r2, #36	@ 0x24
 8005730:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f022 0201 	bic.w	r2, r2, #1
 8005740:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005746:	2b00      	cmp	r3, #0
 8005748:	d002      	beq.n	8005750 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 fe52 	bl	80063f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 fb97 	bl	8005e84 <UART_SetConfig>
 8005756:	4603      	mov	r3, r0
 8005758:	2b01      	cmp	r3, #1
 800575a:	d101      	bne.n	8005760 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e01b      	b.n	8005798 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	685a      	ldr	r2, [r3, #4]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800576e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	689a      	ldr	r2, [r3, #8]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800577e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f042 0201 	orr.w	r2, r2, #1
 800578e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 fed1 	bl	8006538 <UART_CheckIdleState>
 8005796:	4603      	mov	r3, r0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3708      	adds	r7, #8
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b08a      	sub	sp, #40	@ 0x28
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	4613      	mov	r3, r2
 80057ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057b4:	2b20      	cmp	r3, #32
 80057b6:	d137      	bne.n	8005828 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d002      	beq.n	80057c4 <HAL_UART_Receive_IT+0x24>
 80057be:	88fb      	ldrh	r3, [r7, #6]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d101      	bne.n	80057c8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e030      	b.n	800582a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a18      	ldr	r2, [pc, #96]	@ (8005834 <HAL_UART_Receive_IT+0x94>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d01f      	beq.n	8005818 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d018      	beq.n	8005818 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	e853 3f00 	ldrex	r3, [r3]
 80057f2:	613b      	str	r3, [r7, #16]
   return(result);
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80057fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	461a      	mov	r2, r3
 8005802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005804:	623b      	str	r3, [r7, #32]
 8005806:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005808:	69f9      	ldr	r1, [r7, #28]
 800580a:	6a3a      	ldr	r2, [r7, #32]
 800580c:	e841 2300 	strex	r3, r2, [r1]
 8005810:	61bb      	str	r3, [r7, #24]
   return(result);
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d1e6      	bne.n	80057e6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005818:	88fb      	ldrh	r3, [r7, #6]
 800581a:	461a      	mov	r2, r3
 800581c:	68b9      	ldr	r1, [r7, #8]
 800581e:	68f8      	ldr	r0, [r7, #12]
 8005820:	f000 ffa0 	bl	8006764 <UART_Start_Receive_IT>
 8005824:	4603      	mov	r3, r0
 8005826:	e000      	b.n	800582a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005828:	2302      	movs	r3, #2
  }
}
 800582a:	4618      	mov	r0, r3
 800582c:	3728      	adds	r7, #40	@ 0x28
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	40008000 	.word	0x40008000

08005838 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b0ba      	sub	sp, #232	@ 0xe8
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	69db      	ldr	r3, [r3, #28]
 8005846:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800585e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005862:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005866:	4013      	ands	r3, r2
 8005868:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800586c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005870:	2b00      	cmp	r3, #0
 8005872:	d115      	bne.n	80058a0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005878:	f003 0320 	and.w	r3, r3, #32
 800587c:	2b00      	cmp	r3, #0
 800587e:	d00f      	beq.n	80058a0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005884:	f003 0320 	and.w	r3, r3, #32
 8005888:	2b00      	cmp	r3, #0
 800588a:	d009      	beq.n	80058a0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005890:	2b00      	cmp	r3, #0
 8005892:	f000 82ca 	beq.w	8005e2a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	4798      	blx	r3
      }
      return;
 800589e:	e2c4      	b.n	8005e2a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80058a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f000 8117 	beq.w	8005ad8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80058aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d106      	bne.n	80058c4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80058b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80058ba:	4b85      	ldr	r3, [pc, #532]	@ (8005ad0 <HAL_UART_IRQHandler+0x298>)
 80058bc:	4013      	ands	r3, r2
 80058be:	2b00      	cmp	r3, #0
 80058c0:	f000 810a 	beq.w	8005ad8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80058c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058c8:	f003 0301 	and.w	r3, r3, #1
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d011      	beq.n	80058f4 <HAL_UART_IRQHandler+0xbc>
 80058d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00b      	beq.n	80058f4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2201      	movs	r2, #1
 80058e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058ea:	f043 0201 	orr.w	r2, r3, #1
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058f8:	f003 0302 	and.w	r3, r3, #2
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d011      	beq.n	8005924 <HAL_UART_IRQHandler+0xec>
 8005900:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005904:	f003 0301 	and.w	r3, r3, #1
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00b      	beq.n	8005924 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2202      	movs	r2, #2
 8005912:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800591a:	f043 0204 	orr.w	r2, r3, #4
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005928:	f003 0304 	and.w	r3, r3, #4
 800592c:	2b00      	cmp	r3, #0
 800592e:	d011      	beq.n	8005954 <HAL_UART_IRQHandler+0x11c>
 8005930:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005934:	f003 0301 	and.w	r3, r3, #1
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00b      	beq.n	8005954 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2204      	movs	r2, #4
 8005942:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800594a:	f043 0202 	orr.w	r2, r3, #2
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005958:	f003 0308 	and.w	r3, r3, #8
 800595c:	2b00      	cmp	r3, #0
 800595e:	d017      	beq.n	8005990 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005964:	f003 0320 	and.w	r3, r3, #32
 8005968:	2b00      	cmp	r3, #0
 800596a:	d105      	bne.n	8005978 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800596c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005970:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00b      	beq.n	8005990 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2208      	movs	r2, #8
 800597e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005986:	f043 0208 	orr.w	r2, r3, #8
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005994:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005998:	2b00      	cmp	r3, #0
 800599a:	d012      	beq.n	80059c2 <HAL_UART_IRQHandler+0x18a>
 800599c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00c      	beq.n	80059c2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80059b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059b8:	f043 0220 	orr.w	r2, r3, #32
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f000 8230 	beq.w	8005e2e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80059ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059d2:	f003 0320 	and.w	r3, r3, #32
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00d      	beq.n	80059f6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80059da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059de:	f003 0320 	and.w	r3, r3, #32
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d007      	beq.n	80059f6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d003      	beq.n	80059f6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a0a:	2b40      	cmp	r3, #64	@ 0x40
 8005a0c:	d005      	beq.n	8005a1a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005a0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a12:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d04f      	beq.n	8005aba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 ff68 	bl	80068f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a2a:	2b40      	cmp	r3, #64	@ 0x40
 8005a2c:	d141      	bne.n	8005ab2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	3308      	adds	r3, #8
 8005a34:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a38:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005a3c:	e853 3f00 	ldrex	r3, [r3]
 8005a40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005a44:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005a48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	3308      	adds	r3, #8
 8005a56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005a5a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005a5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005a66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005a6a:	e841 2300 	strex	r3, r2, [r1]
 8005a6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005a72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1d9      	bne.n	8005a2e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d013      	beq.n	8005aaa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a86:	4a13      	ldr	r2, [pc, #76]	@ (8005ad4 <HAL_UART_IRQHandler+0x29c>)
 8005a88:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7fc ff92 	bl	80029b8 <HAL_DMA_Abort_IT>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d017      	beq.n	8005aca <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005aa4:	4610      	mov	r0, r2
 8005aa6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aa8:	e00f      	b.n	8005aca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 f9d4 	bl	8005e58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ab0:	e00b      	b.n	8005aca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 f9d0 	bl	8005e58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ab8:	e007      	b.n	8005aca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 f9cc 	bl	8005e58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005ac8:	e1b1      	b.n	8005e2e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aca:	bf00      	nop
    return;
 8005acc:	e1af      	b.n	8005e2e <HAL_UART_IRQHandler+0x5f6>
 8005ace:	bf00      	nop
 8005ad0:	04000120 	.word	0x04000120
 8005ad4:	080069b9 	.word	0x080069b9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	f040 816a 	bne.w	8005db6 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ae6:	f003 0310 	and.w	r3, r3, #16
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	f000 8163 	beq.w	8005db6 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005af0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005af4:	f003 0310 	and.w	r3, r3, #16
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f000 815c 	beq.w	8005db6 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2210      	movs	r2, #16
 8005b04:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b10:	2b40      	cmp	r3, #64	@ 0x40
 8005b12:	f040 80d4 	bne.w	8005cbe <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b22:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f000 80ad 	beq.w	8005c86 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005b32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005b36:	429a      	cmp	r2, r3
 8005b38:	f080 80a5 	bcs.w	8005c86 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005b42:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0320 	and.w	r3, r3, #32
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	f040 8086 	bne.w	8005c64 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b60:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005b64:	e853 3f00 	ldrex	r3, [r3]
 8005b68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005b6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005b70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005b82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005b86:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005b8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005b92:	e841 2300 	strex	r3, r2, [r1]
 8005b96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005b9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1da      	bne.n	8005b58 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	3308      	adds	r3, #8
 8005ba8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005baa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005bac:	e853 3f00 	ldrex	r3, [r3]
 8005bb0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005bb2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005bb4:	f023 0301 	bic.w	r3, r3, #1
 8005bb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	3308      	adds	r3, #8
 8005bc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005bc6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005bca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bcc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005bce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005bd2:	e841 2300 	strex	r3, r2, [r1]
 8005bd6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005bd8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1e1      	bne.n	8005ba2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	3308      	adds	r3, #8
 8005be4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005be8:	e853 3f00 	ldrex	r3, [r3]
 8005bec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005bee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005bf0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bf4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	3308      	adds	r3, #8
 8005bfe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005c02:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005c04:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c06:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005c08:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005c0a:	e841 2300 	strex	r3, r2, [r1]
 8005c0e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005c10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d1e3      	bne.n	8005bde <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2220      	movs	r2, #32
 8005c1a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c2c:	e853 3f00 	ldrex	r3, [r3]
 8005c30:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005c32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c34:	f023 0310 	bic.w	r3, r3, #16
 8005c38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	461a      	mov	r2, r3
 8005c42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005c46:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c48:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005c4c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005c4e:	e841 2300 	strex	r3, r2, [r1]
 8005c52:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005c54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1e4      	bne.n	8005c24 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7fc fe6c 	bl	800293c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2202      	movs	r2, #2
 8005c68:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 f8f4 	bl	8005e6c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005c84:	e0d5      	b.n	8005e32 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005c8c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005c90:	429a      	cmp	r2, r3
 8005c92:	f040 80ce 	bne.w	8005e32 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0320 	and.w	r3, r3, #32
 8005ca2:	2b20      	cmp	r3, #32
 8005ca4:	f040 80c5 	bne.w	8005e32 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2202      	movs	r2, #2
 8005cac:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 f8d8 	bl	8005e6c <HAL_UARTEx_RxEventCallback>
      return;
 8005cbc:	e0b9      	b.n	8005e32 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	f000 80ab 	beq.w	8005e36 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8005ce0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	f000 80a6 	beq.w	8005e36 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cf2:	e853 3f00 	ldrex	r3, [r3]
 8005cf6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005cf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cfa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005cfe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	461a      	mov	r2, r3
 8005d08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005d0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d0e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d14:	e841 2300 	strex	r3, r2, [r1]
 8005d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d1e4      	bne.n	8005cea <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	3308      	adds	r3, #8
 8005d26:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2a:	e853 3f00 	ldrex	r3, [r3]
 8005d2e:	623b      	str	r3, [r7, #32]
   return(result);
 8005d30:	6a3b      	ldr	r3, [r7, #32]
 8005d32:	f023 0301 	bic.w	r3, r3, #1
 8005d36:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	3308      	adds	r3, #8
 8005d40:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005d44:	633a      	str	r2, [r7, #48]	@ 0x30
 8005d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d4c:	e841 2300 	strex	r3, r2, [r1]
 8005d50:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d1e3      	bne.n	8005d20 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2220      	movs	r2, #32
 8005d5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	e853 3f00 	ldrex	r3, [r3]
 8005d78:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f023 0310 	bic.w	r3, r3, #16
 8005d80:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	461a      	mov	r2, r3
 8005d8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005d8e:	61fb      	str	r3, [r7, #28]
 8005d90:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d92:	69b9      	ldr	r1, [r7, #24]
 8005d94:	69fa      	ldr	r2, [r7, #28]
 8005d96:	e841 2300 	strex	r3, r2, [r1]
 8005d9a:	617b      	str	r3, [r7, #20]
   return(result);
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1e4      	bne.n	8005d6c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2202      	movs	r2, #2
 8005da6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005da8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005dac:	4619      	mov	r1, r3
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f85c 	bl	8005e6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005db4:	e03f      	b.n	8005e36 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00e      	beq.n	8005de0 <HAL_UART_IRQHandler+0x5a8>
 8005dc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005dc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d008      	beq.n	8005de0 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005dd6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 ffe9 	bl	8006db0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005dde:	e02d      	b.n	8005e3c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005de0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005de4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00e      	beq.n	8005e0a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005df0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d008      	beq.n	8005e0a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d01c      	beq.n	8005e3a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	4798      	blx	r3
    }
    return;
 8005e08:	e017      	b.n	8005e3a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d012      	beq.n	8005e3c <HAL_UART_IRQHandler+0x604>
 8005e16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00c      	beq.n	8005e3c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 fdde 	bl	80069e4 <UART_EndTransmit_IT>
    return;
 8005e28:	e008      	b.n	8005e3c <HAL_UART_IRQHandler+0x604>
      return;
 8005e2a:	bf00      	nop
 8005e2c:	e006      	b.n	8005e3c <HAL_UART_IRQHandler+0x604>
    return;
 8005e2e:	bf00      	nop
 8005e30:	e004      	b.n	8005e3c <HAL_UART_IRQHandler+0x604>
      return;
 8005e32:	bf00      	nop
 8005e34:	e002      	b.n	8005e3c <HAL_UART_IRQHandler+0x604>
      return;
 8005e36:	bf00      	nop
 8005e38:	e000      	b.n	8005e3c <HAL_UART_IRQHandler+0x604>
    return;
 8005e3a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005e3c:	37e8      	adds	r7, #232	@ 0xe8
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop

08005e44 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005e4c:	bf00      	nop
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	460b      	mov	r3, r1
 8005e76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e88:	b08a      	sub	sp, #40	@ 0x28
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	689a      	ldr	r2, [r3, #8]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	431a      	orrs	r2, r3
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	431a      	orrs	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	69db      	ldr	r3, [r3, #28]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	4ba4      	ldr	r3, [pc, #656]	@ (8006144 <UART_SetConfig+0x2c0>)
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	6812      	ldr	r2, [r2, #0]
 8005eba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ebc:	430b      	orrs	r3, r1
 8005ebe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	68da      	ldr	r2, [r3, #12]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a99      	ldr	r2, [pc, #612]	@ (8006148 <UART_SetConfig+0x2c4>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d004      	beq.n	8005ef0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eec:	4313      	orrs	r3, r2
 8005eee:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f00:	430a      	orrs	r2, r1
 8005f02:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a90      	ldr	r2, [pc, #576]	@ (800614c <UART_SetConfig+0x2c8>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d126      	bne.n	8005f5c <UART_SetConfig+0xd8>
 8005f0e:	4b90      	ldr	r3, [pc, #576]	@ (8006150 <UART_SetConfig+0x2cc>)
 8005f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f14:	f003 0303 	and.w	r3, r3, #3
 8005f18:	2b03      	cmp	r3, #3
 8005f1a:	d81b      	bhi.n	8005f54 <UART_SetConfig+0xd0>
 8005f1c:	a201      	add	r2, pc, #4	@ (adr r2, 8005f24 <UART_SetConfig+0xa0>)
 8005f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f22:	bf00      	nop
 8005f24:	08005f35 	.word	0x08005f35
 8005f28:	08005f45 	.word	0x08005f45
 8005f2c:	08005f3d 	.word	0x08005f3d
 8005f30:	08005f4d 	.word	0x08005f4d
 8005f34:	2301      	movs	r3, #1
 8005f36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f3a:	e116      	b.n	800616a <UART_SetConfig+0x2e6>
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f42:	e112      	b.n	800616a <UART_SetConfig+0x2e6>
 8005f44:	2304      	movs	r3, #4
 8005f46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f4a:	e10e      	b.n	800616a <UART_SetConfig+0x2e6>
 8005f4c:	2308      	movs	r3, #8
 8005f4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f52:	e10a      	b.n	800616a <UART_SetConfig+0x2e6>
 8005f54:	2310      	movs	r3, #16
 8005f56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f5a:	e106      	b.n	800616a <UART_SetConfig+0x2e6>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a7c      	ldr	r2, [pc, #496]	@ (8006154 <UART_SetConfig+0x2d0>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d138      	bne.n	8005fd8 <UART_SetConfig+0x154>
 8005f66:	4b7a      	ldr	r3, [pc, #488]	@ (8006150 <UART_SetConfig+0x2cc>)
 8005f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f6c:	f003 030c 	and.w	r3, r3, #12
 8005f70:	2b0c      	cmp	r3, #12
 8005f72:	d82d      	bhi.n	8005fd0 <UART_SetConfig+0x14c>
 8005f74:	a201      	add	r2, pc, #4	@ (adr r2, 8005f7c <UART_SetConfig+0xf8>)
 8005f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f7a:	bf00      	nop
 8005f7c:	08005fb1 	.word	0x08005fb1
 8005f80:	08005fd1 	.word	0x08005fd1
 8005f84:	08005fd1 	.word	0x08005fd1
 8005f88:	08005fd1 	.word	0x08005fd1
 8005f8c:	08005fc1 	.word	0x08005fc1
 8005f90:	08005fd1 	.word	0x08005fd1
 8005f94:	08005fd1 	.word	0x08005fd1
 8005f98:	08005fd1 	.word	0x08005fd1
 8005f9c:	08005fb9 	.word	0x08005fb9
 8005fa0:	08005fd1 	.word	0x08005fd1
 8005fa4:	08005fd1 	.word	0x08005fd1
 8005fa8:	08005fd1 	.word	0x08005fd1
 8005fac:	08005fc9 	.word	0x08005fc9
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fb6:	e0d8      	b.n	800616a <UART_SetConfig+0x2e6>
 8005fb8:	2302      	movs	r3, #2
 8005fba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fbe:	e0d4      	b.n	800616a <UART_SetConfig+0x2e6>
 8005fc0:	2304      	movs	r3, #4
 8005fc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fc6:	e0d0      	b.n	800616a <UART_SetConfig+0x2e6>
 8005fc8:	2308      	movs	r3, #8
 8005fca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fce:	e0cc      	b.n	800616a <UART_SetConfig+0x2e6>
 8005fd0:	2310      	movs	r3, #16
 8005fd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fd6:	e0c8      	b.n	800616a <UART_SetConfig+0x2e6>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a5e      	ldr	r2, [pc, #376]	@ (8006158 <UART_SetConfig+0x2d4>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d125      	bne.n	800602e <UART_SetConfig+0x1aa>
 8005fe2:	4b5b      	ldr	r3, [pc, #364]	@ (8006150 <UART_SetConfig+0x2cc>)
 8005fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fe8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005fec:	2b30      	cmp	r3, #48	@ 0x30
 8005fee:	d016      	beq.n	800601e <UART_SetConfig+0x19a>
 8005ff0:	2b30      	cmp	r3, #48	@ 0x30
 8005ff2:	d818      	bhi.n	8006026 <UART_SetConfig+0x1a2>
 8005ff4:	2b20      	cmp	r3, #32
 8005ff6:	d00a      	beq.n	800600e <UART_SetConfig+0x18a>
 8005ff8:	2b20      	cmp	r3, #32
 8005ffa:	d814      	bhi.n	8006026 <UART_SetConfig+0x1a2>
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d002      	beq.n	8006006 <UART_SetConfig+0x182>
 8006000:	2b10      	cmp	r3, #16
 8006002:	d008      	beq.n	8006016 <UART_SetConfig+0x192>
 8006004:	e00f      	b.n	8006026 <UART_SetConfig+0x1a2>
 8006006:	2300      	movs	r3, #0
 8006008:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800600c:	e0ad      	b.n	800616a <UART_SetConfig+0x2e6>
 800600e:	2302      	movs	r3, #2
 8006010:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006014:	e0a9      	b.n	800616a <UART_SetConfig+0x2e6>
 8006016:	2304      	movs	r3, #4
 8006018:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800601c:	e0a5      	b.n	800616a <UART_SetConfig+0x2e6>
 800601e:	2308      	movs	r3, #8
 8006020:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006024:	e0a1      	b.n	800616a <UART_SetConfig+0x2e6>
 8006026:	2310      	movs	r3, #16
 8006028:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800602c:	e09d      	b.n	800616a <UART_SetConfig+0x2e6>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a4a      	ldr	r2, [pc, #296]	@ (800615c <UART_SetConfig+0x2d8>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d125      	bne.n	8006084 <UART_SetConfig+0x200>
 8006038:	4b45      	ldr	r3, [pc, #276]	@ (8006150 <UART_SetConfig+0x2cc>)
 800603a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800603e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006042:	2bc0      	cmp	r3, #192	@ 0xc0
 8006044:	d016      	beq.n	8006074 <UART_SetConfig+0x1f0>
 8006046:	2bc0      	cmp	r3, #192	@ 0xc0
 8006048:	d818      	bhi.n	800607c <UART_SetConfig+0x1f8>
 800604a:	2b80      	cmp	r3, #128	@ 0x80
 800604c:	d00a      	beq.n	8006064 <UART_SetConfig+0x1e0>
 800604e:	2b80      	cmp	r3, #128	@ 0x80
 8006050:	d814      	bhi.n	800607c <UART_SetConfig+0x1f8>
 8006052:	2b00      	cmp	r3, #0
 8006054:	d002      	beq.n	800605c <UART_SetConfig+0x1d8>
 8006056:	2b40      	cmp	r3, #64	@ 0x40
 8006058:	d008      	beq.n	800606c <UART_SetConfig+0x1e8>
 800605a:	e00f      	b.n	800607c <UART_SetConfig+0x1f8>
 800605c:	2300      	movs	r3, #0
 800605e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006062:	e082      	b.n	800616a <UART_SetConfig+0x2e6>
 8006064:	2302      	movs	r3, #2
 8006066:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800606a:	e07e      	b.n	800616a <UART_SetConfig+0x2e6>
 800606c:	2304      	movs	r3, #4
 800606e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006072:	e07a      	b.n	800616a <UART_SetConfig+0x2e6>
 8006074:	2308      	movs	r3, #8
 8006076:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800607a:	e076      	b.n	800616a <UART_SetConfig+0x2e6>
 800607c:	2310      	movs	r3, #16
 800607e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006082:	e072      	b.n	800616a <UART_SetConfig+0x2e6>
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a35      	ldr	r2, [pc, #212]	@ (8006160 <UART_SetConfig+0x2dc>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d12a      	bne.n	80060e4 <UART_SetConfig+0x260>
 800608e:	4b30      	ldr	r3, [pc, #192]	@ (8006150 <UART_SetConfig+0x2cc>)
 8006090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006094:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006098:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800609c:	d01a      	beq.n	80060d4 <UART_SetConfig+0x250>
 800609e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060a2:	d81b      	bhi.n	80060dc <UART_SetConfig+0x258>
 80060a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060a8:	d00c      	beq.n	80060c4 <UART_SetConfig+0x240>
 80060aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060ae:	d815      	bhi.n	80060dc <UART_SetConfig+0x258>
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d003      	beq.n	80060bc <UART_SetConfig+0x238>
 80060b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060b8:	d008      	beq.n	80060cc <UART_SetConfig+0x248>
 80060ba:	e00f      	b.n	80060dc <UART_SetConfig+0x258>
 80060bc:	2300      	movs	r3, #0
 80060be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060c2:	e052      	b.n	800616a <UART_SetConfig+0x2e6>
 80060c4:	2302      	movs	r3, #2
 80060c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060ca:	e04e      	b.n	800616a <UART_SetConfig+0x2e6>
 80060cc:	2304      	movs	r3, #4
 80060ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060d2:	e04a      	b.n	800616a <UART_SetConfig+0x2e6>
 80060d4:	2308      	movs	r3, #8
 80060d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060da:	e046      	b.n	800616a <UART_SetConfig+0x2e6>
 80060dc:	2310      	movs	r3, #16
 80060de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060e2:	e042      	b.n	800616a <UART_SetConfig+0x2e6>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a17      	ldr	r2, [pc, #92]	@ (8006148 <UART_SetConfig+0x2c4>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d13a      	bne.n	8006164 <UART_SetConfig+0x2e0>
 80060ee:	4b18      	ldr	r3, [pc, #96]	@ (8006150 <UART_SetConfig+0x2cc>)
 80060f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060f4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80060f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80060fc:	d01a      	beq.n	8006134 <UART_SetConfig+0x2b0>
 80060fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006102:	d81b      	bhi.n	800613c <UART_SetConfig+0x2b8>
 8006104:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006108:	d00c      	beq.n	8006124 <UART_SetConfig+0x2a0>
 800610a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800610e:	d815      	bhi.n	800613c <UART_SetConfig+0x2b8>
 8006110:	2b00      	cmp	r3, #0
 8006112:	d003      	beq.n	800611c <UART_SetConfig+0x298>
 8006114:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006118:	d008      	beq.n	800612c <UART_SetConfig+0x2a8>
 800611a:	e00f      	b.n	800613c <UART_SetConfig+0x2b8>
 800611c:	2300      	movs	r3, #0
 800611e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006122:	e022      	b.n	800616a <UART_SetConfig+0x2e6>
 8006124:	2302      	movs	r3, #2
 8006126:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800612a:	e01e      	b.n	800616a <UART_SetConfig+0x2e6>
 800612c:	2304      	movs	r3, #4
 800612e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006132:	e01a      	b.n	800616a <UART_SetConfig+0x2e6>
 8006134:	2308      	movs	r3, #8
 8006136:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800613a:	e016      	b.n	800616a <UART_SetConfig+0x2e6>
 800613c:	2310      	movs	r3, #16
 800613e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006142:	e012      	b.n	800616a <UART_SetConfig+0x2e6>
 8006144:	efff69f3 	.word	0xefff69f3
 8006148:	40008000 	.word	0x40008000
 800614c:	40013800 	.word	0x40013800
 8006150:	40021000 	.word	0x40021000
 8006154:	40004400 	.word	0x40004400
 8006158:	40004800 	.word	0x40004800
 800615c:	40004c00 	.word	0x40004c00
 8006160:	40005000 	.word	0x40005000
 8006164:	2310      	movs	r3, #16
 8006166:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a9f      	ldr	r2, [pc, #636]	@ (80063ec <UART_SetConfig+0x568>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d17a      	bne.n	800626a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006174:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006178:	2b08      	cmp	r3, #8
 800617a:	d824      	bhi.n	80061c6 <UART_SetConfig+0x342>
 800617c:	a201      	add	r2, pc, #4	@ (adr r2, 8006184 <UART_SetConfig+0x300>)
 800617e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006182:	bf00      	nop
 8006184:	080061a9 	.word	0x080061a9
 8006188:	080061c7 	.word	0x080061c7
 800618c:	080061b1 	.word	0x080061b1
 8006190:	080061c7 	.word	0x080061c7
 8006194:	080061b7 	.word	0x080061b7
 8006198:	080061c7 	.word	0x080061c7
 800619c:	080061c7 	.word	0x080061c7
 80061a0:	080061c7 	.word	0x080061c7
 80061a4:	080061bf 	.word	0x080061bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061a8:	f7fe fa5e 	bl	8004668 <HAL_RCC_GetPCLK1Freq>
 80061ac:	61f8      	str	r0, [r7, #28]
        break;
 80061ae:	e010      	b.n	80061d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061b0:	4b8f      	ldr	r3, [pc, #572]	@ (80063f0 <UART_SetConfig+0x56c>)
 80061b2:	61fb      	str	r3, [r7, #28]
        break;
 80061b4:	e00d      	b.n	80061d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061b6:	f7fe f9bf 	bl	8004538 <HAL_RCC_GetSysClockFreq>
 80061ba:	61f8      	str	r0, [r7, #28]
        break;
 80061bc:	e009      	b.n	80061d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061c2:	61fb      	str	r3, [r7, #28]
        break;
 80061c4:	e005      	b.n	80061d2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80061c6:	2300      	movs	r3, #0
 80061c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80061d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f000 80fb 	beq.w	80063d0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	685a      	ldr	r2, [r3, #4]
 80061de:	4613      	mov	r3, r2
 80061e0:	005b      	lsls	r3, r3, #1
 80061e2:	4413      	add	r3, r2
 80061e4:	69fa      	ldr	r2, [r7, #28]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d305      	bcc.n	80061f6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80061f0:	69fa      	ldr	r2, [r7, #28]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d903      	bls.n	80061fe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80061fc:	e0e8      	b.n	80063d0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	2200      	movs	r2, #0
 8006202:	461c      	mov	r4, r3
 8006204:	4615      	mov	r5, r2
 8006206:	f04f 0200 	mov.w	r2, #0
 800620a:	f04f 0300 	mov.w	r3, #0
 800620e:	022b      	lsls	r3, r5, #8
 8006210:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006214:	0222      	lsls	r2, r4, #8
 8006216:	68f9      	ldr	r1, [r7, #12]
 8006218:	6849      	ldr	r1, [r1, #4]
 800621a:	0849      	lsrs	r1, r1, #1
 800621c:	2000      	movs	r0, #0
 800621e:	4688      	mov	r8, r1
 8006220:	4681      	mov	r9, r0
 8006222:	eb12 0a08 	adds.w	sl, r2, r8
 8006226:	eb43 0b09 	adc.w	fp, r3, r9
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	603b      	str	r3, [r7, #0]
 8006232:	607a      	str	r2, [r7, #4]
 8006234:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006238:	4650      	mov	r0, sl
 800623a:	4659      	mov	r1, fp
 800623c:	f7f9 ffd8 	bl	80001f0 <__aeabi_uldivmod>
 8006240:	4602      	mov	r2, r0
 8006242:	460b      	mov	r3, r1
 8006244:	4613      	mov	r3, r2
 8006246:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800624e:	d308      	bcc.n	8006262 <UART_SetConfig+0x3de>
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006256:	d204      	bcs.n	8006262 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	69ba      	ldr	r2, [r7, #24]
 800625e:	60da      	str	r2, [r3, #12]
 8006260:	e0b6      	b.n	80063d0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006268:	e0b2      	b.n	80063d0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	69db      	ldr	r3, [r3, #28]
 800626e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006272:	d15e      	bne.n	8006332 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006274:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006278:	2b08      	cmp	r3, #8
 800627a:	d828      	bhi.n	80062ce <UART_SetConfig+0x44a>
 800627c:	a201      	add	r2, pc, #4	@ (adr r2, 8006284 <UART_SetConfig+0x400>)
 800627e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006282:	bf00      	nop
 8006284:	080062a9 	.word	0x080062a9
 8006288:	080062b1 	.word	0x080062b1
 800628c:	080062b9 	.word	0x080062b9
 8006290:	080062cf 	.word	0x080062cf
 8006294:	080062bf 	.word	0x080062bf
 8006298:	080062cf 	.word	0x080062cf
 800629c:	080062cf 	.word	0x080062cf
 80062a0:	080062cf 	.word	0x080062cf
 80062a4:	080062c7 	.word	0x080062c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062a8:	f7fe f9de 	bl	8004668 <HAL_RCC_GetPCLK1Freq>
 80062ac:	61f8      	str	r0, [r7, #28]
        break;
 80062ae:	e014      	b.n	80062da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062b0:	f7fe f9f0 	bl	8004694 <HAL_RCC_GetPCLK2Freq>
 80062b4:	61f8      	str	r0, [r7, #28]
        break;
 80062b6:	e010      	b.n	80062da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062b8:	4b4d      	ldr	r3, [pc, #308]	@ (80063f0 <UART_SetConfig+0x56c>)
 80062ba:	61fb      	str	r3, [r7, #28]
        break;
 80062bc:	e00d      	b.n	80062da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062be:	f7fe f93b 	bl	8004538 <HAL_RCC_GetSysClockFreq>
 80062c2:	61f8      	str	r0, [r7, #28]
        break;
 80062c4:	e009      	b.n	80062da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062ca:	61fb      	str	r3, [r7, #28]
        break;
 80062cc:	e005      	b.n	80062da <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80062ce:	2300      	movs	r3, #0
 80062d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80062d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d077      	beq.n	80063d0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	005a      	lsls	r2, r3, #1
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	085b      	lsrs	r3, r3, #1
 80062ea:	441a      	add	r2, r3
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062f4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	2b0f      	cmp	r3, #15
 80062fa:	d916      	bls.n	800632a <UART_SetConfig+0x4a6>
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006302:	d212      	bcs.n	800632a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	b29b      	uxth	r3, r3
 8006308:	f023 030f 	bic.w	r3, r3, #15
 800630c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	085b      	lsrs	r3, r3, #1
 8006312:	b29b      	uxth	r3, r3
 8006314:	f003 0307 	and.w	r3, r3, #7
 8006318:	b29a      	uxth	r2, r3
 800631a:	8afb      	ldrh	r3, [r7, #22]
 800631c:	4313      	orrs	r3, r2
 800631e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	8afa      	ldrh	r2, [r7, #22]
 8006326:	60da      	str	r2, [r3, #12]
 8006328:	e052      	b.n	80063d0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006330:	e04e      	b.n	80063d0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006332:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006336:	2b08      	cmp	r3, #8
 8006338:	d827      	bhi.n	800638a <UART_SetConfig+0x506>
 800633a:	a201      	add	r2, pc, #4	@ (adr r2, 8006340 <UART_SetConfig+0x4bc>)
 800633c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006340:	08006365 	.word	0x08006365
 8006344:	0800636d 	.word	0x0800636d
 8006348:	08006375 	.word	0x08006375
 800634c:	0800638b 	.word	0x0800638b
 8006350:	0800637b 	.word	0x0800637b
 8006354:	0800638b 	.word	0x0800638b
 8006358:	0800638b 	.word	0x0800638b
 800635c:	0800638b 	.word	0x0800638b
 8006360:	08006383 	.word	0x08006383
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006364:	f7fe f980 	bl	8004668 <HAL_RCC_GetPCLK1Freq>
 8006368:	61f8      	str	r0, [r7, #28]
        break;
 800636a:	e014      	b.n	8006396 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800636c:	f7fe f992 	bl	8004694 <HAL_RCC_GetPCLK2Freq>
 8006370:	61f8      	str	r0, [r7, #28]
        break;
 8006372:	e010      	b.n	8006396 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006374:	4b1e      	ldr	r3, [pc, #120]	@ (80063f0 <UART_SetConfig+0x56c>)
 8006376:	61fb      	str	r3, [r7, #28]
        break;
 8006378:	e00d      	b.n	8006396 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800637a:	f7fe f8dd 	bl	8004538 <HAL_RCC_GetSysClockFreq>
 800637e:	61f8      	str	r0, [r7, #28]
        break;
 8006380:	e009      	b.n	8006396 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006382:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006386:	61fb      	str	r3, [r7, #28]
        break;
 8006388:	e005      	b.n	8006396 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800638a:	2300      	movs	r3, #0
 800638c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006394:	bf00      	nop
    }

    if (pclk != 0U)
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d019      	beq.n	80063d0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	085a      	lsrs	r2, r3, #1
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	441a      	add	r2, r3
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	2b0f      	cmp	r3, #15
 80063b4:	d909      	bls.n	80063ca <UART_SetConfig+0x546>
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063bc:	d205      	bcs.n	80063ca <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	60da      	str	r2, [r3, #12]
 80063c8:	e002      	b.n	80063d0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80063dc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3728      	adds	r7, #40	@ 0x28
 80063e4:	46bd      	mov	sp, r7
 80063e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063ea:	bf00      	nop
 80063ec:	40008000 	.word	0x40008000
 80063f0:	00f42400 	.word	0x00f42400

080063f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006400:	f003 0308 	and.w	r3, r3, #8
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00a      	beq.n	800641e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	430a      	orrs	r2, r1
 800641c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00a      	beq.n	8006440 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	430a      	orrs	r2, r1
 800643e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006444:	f003 0302 	and.w	r3, r3, #2
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00a      	beq.n	8006462 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	430a      	orrs	r2, r1
 8006460:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006466:	f003 0304 	and.w	r3, r3, #4
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00a      	beq.n	8006484 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	430a      	orrs	r2, r1
 8006482:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006488:	f003 0310 	and.w	r3, r3, #16
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00a      	beq.n	80064a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	430a      	orrs	r2, r1
 80064a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064aa:	f003 0320 	and.w	r3, r3, #32
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00a      	beq.n	80064c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	430a      	orrs	r2, r1
 80064c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d01a      	beq.n	800650a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	430a      	orrs	r2, r1
 80064e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064f2:	d10a      	bne.n	800650a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	430a      	orrs	r2, r1
 8006508:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800650e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00a      	beq.n	800652c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	430a      	orrs	r2, r1
 800652a:	605a      	str	r2, [r3, #4]
  }
}
 800652c:	bf00      	nop
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b098      	sub	sp, #96	@ 0x60
 800653c:	af02      	add	r7, sp, #8
 800653e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006548:	f7fa fff4 	bl	8001534 <HAL_GetTick>
 800654c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0308 	and.w	r3, r3, #8
 8006558:	2b08      	cmp	r3, #8
 800655a:	d12e      	bne.n	80065ba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800655c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006560:	9300      	str	r3, [sp, #0]
 8006562:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006564:	2200      	movs	r2, #0
 8006566:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f88c 	bl	8006688 <UART_WaitOnFlagUntilTimeout>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d021      	beq.n	80065ba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800657e:	e853 3f00 	ldrex	r3, [r3]
 8006582:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006586:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800658a:	653b      	str	r3, [r7, #80]	@ 0x50
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	461a      	mov	r2, r3
 8006592:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006594:	647b      	str	r3, [r7, #68]	@ 0x44
 8006596:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006598:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800659a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800659c:	e841 2300 	strex	r3, r2, [r1]
 80065a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80065a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1e6      	bne.n	8006576 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2220      	movs	r2, #32
 80065ac:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	e062      	b.n	8006680 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 0304 	and.w	r3, r3, #4
 80065c4:	2b04      	cmp	r3, #4
 80065c6:	d149      	bne.n	800665c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80065cc:	9300      	str	r3, [sp, #0]
 80065ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065d0:	2200      	movs	r2, #0
 80065d2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 f856 	bl	8006688 <UART_WaitOnFlagUntilTimeout>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d03c      	beq.n	800665c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ea:	e853 3f00 	ldrex	r3, [r3]
 80065ee:	623b      	str	r3, [r7, #32]
   return(result);
 80065f0:	6a3b      	ldr	r3, [r7, #32]
 80065f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	461a      	mov	r2, r3
 80065fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006600:	633b      	str	r3, [r7, #48]	@ 0x30
 8006602:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006604:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006606:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006608:	e841 2300 	strex	r3, r2, [r1]
 800660c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800660e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1e6      	bne.n	80065e2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	3308      	adds	r3, #8
 800661a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	e853 3f00 	ldrex	r3, [r3]
 8006622:	60fb      	str	r3, [r7, #12]
   return(result);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f023 0301 	bic.w	r3, r3, #1
 800662a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	3308      	adds	r3, #8
 8006632:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006634:	61fa      	str	r2, [r7, #28]
 8006636:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006638:	69b9      	ldr	r1, [r7, #24]
 800663a:	69fa      	ldr	r2, [r7, #28]
 800663c:	e841 2300 	strex	r3, r2, [r1]
 8006640:	617b      	str	r3, [r7, #20]
   return(result);
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d1e5      	bne.n	8006614 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2220      	movs	r2, #32
 800664c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006658:	2303      	movs	r3, #3
 800665a:	e011      	b.n	8006680 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2220      	movs	r2, #32
 8006660:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2220      	movs	r2, #32
 8006666:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3758      	adds	r7, #88	@ 0x58
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	603b      	str	r3, [r7, #0]
 8006694:	4613      	mov	r3, r2
 8006696:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006698:	e04f      	b.n	800673a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80066a0:	d04b      	beq.n	800673a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066a2:	f7fa ff47 	bl	8001534 <HAL_GetTick>
 80066a6:	4602      	mov	r2, r0
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	69ba      	ldr	r2, [r7, #24]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d302      	bcc.n	80066b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d101      	bne.n	80066bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80066b8:	2303      	movs	r3, #3
 80066ba:	e04e      	b.n	800675a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 0304 	and.w	r3, r3, #4
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d037      	beq.n	800673a <UART_WaitOnFlagUntilTimeout+0xb2>
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	2b80      	cmp	r3, #128	@ 0x80
 80066ce:	d034      	beq.n	800673a <UART_WaitOnFlagUntilTimeout+0xb2>
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	2b40      	cmp	r3, #64	@ 0x40
 80066d4:	d031      	beq.n	800673a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	69db      	ldr	r3, [r3, #28]
 80066dc:	f003 0308 	and.w	r3, r3, #8
 80066e0:	2b08      	cmp	r3, #8
 80066e2:	d110      	bne.n	8006706 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2208      	movs	r2, #8
 80066ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	f000 f8ff 	bl	80068f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2208      	movs	r2, #8
 80066f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e029      	b.n	800675a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	69db      	ldr	r3, [r3, #28]
 800670c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006710:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006714:	d111      	bne.n	800673a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800671e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f000 f8e5 	bl	80068f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2220      	movs	r2, #32
 800672a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	e00f      	b.n	800675a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	69da      	ldr	r2, [r3, #28]
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	4013      	ands	r3, r2
 8006744:	68ba      	ldr	r2, [r7, #8]
 8006746:	429a      	cmp	r2, r3
 8006748:	bf0c      	ite	eq
 800674a:	2301      	moveq	r3, #1
 800674c:	2300      	movne	r3, #0
 800674e:	b2db      	uxtb	r3, r3
 8006750:	461a      	mov	r2, r3
 8006752:	79fb      	ldrb	r3, [r7, #7]
 8006754:	429a      	cmp	r2, r3
 8006756:	d0a0      	beq.n	800669a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3710      	adds	r7, #16
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
	...

08006764 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006764:	b480      	push	{r7}
 8006766:	b097      	sub	sp, #92	@ 0x5c
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	4613      	mov	r3, r2
 8006770:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	68ba      	ldr	r2, [r7, #8]
 8006776:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	88fa      	ldrh	r2, [r7, #6]
 800677c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	88fa      	ldrh	r2, [r7, #6]
 8006784:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2200      	movs	r2, #0
 800678c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006796:	d10e      	bne.n	80067b6 <UART_Start_Receive_IT+0x52>
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d105      	bne.n	80067ac <UART_Start_Receive_IT+0x48>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80067a6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80067aa:	e02d      	b.n	8006808 <UART_Start_Receive_IT+0xa4>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	22ff      	movs	r2, #255	@ 0xff
 80067b0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80067b4:	e028      	b.n	8006808 <UART_Start_Receive_IT+0xa4>
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d10d      	bne.n	80067da <UART_Start_Receive_IT+0x76>
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d104      	bne.n	80067d0 <UART_Start_Receive_IT+0x6c>
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	22ff      	movs	r2, #255	@ 0xff
 80067ca:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80067ce:	e01b      	b.n	8006808 <UART_Start_Receive_IT+0xa4>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	227f      	movs	r2, #127	@ 0x7f
 80067d4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80067d8:	e016      	b.n	8006808 <UART_Start_Receive_IT+0xa4>
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067e2:	d10d      	bne.n	8006800 <UART_Start_Receive_IT+0x9c>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d104      	bne.n	80067f6 <UART_Start_Receive_IT+0x92>
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	227f      	movs	r2, #127	@ 0x7f
 80067f0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80067f4:	e008      	b.n	8006808 <UART_Start_Receive_IT+0xa4>
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	223f      	movs	r2, #63	@ 0x3f
 80067fa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80067fe:	e003      	b.n	8006808 <UART_Start_Receive_IT+0xa4>
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2200      	movs	r2, #0
 8006804:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2200      	movs	r2, #0
 800680c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2222      	movs	r2, #34	@ 0x22
 8006814:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	3308      	adds	r3, #8
 800681e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006820:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006822:	e853 3f00 	ldrex	r3, [r3]
 8006826:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800682a:	f043 0301 	orr.w	r3, r3, #1
 800682e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	3308      	adds	r3, #8
 8006836:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006838:	64ba      	str	r2, [r7, #72]	@ 0x48
 800683a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800683e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006840:	e841 2300 	strex	r3, r2, [r1]
 8006844:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006846:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1e5      	bne.n	8006818 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006854:	d107      	bne.n	8006866 <UART_Start_Receive_IT+0x102>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d103      	bne.n	8006866 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	4a21      	ldr	r2, [pc, #132]	@ (80068e8 <UART_Start_Receive_IT+0x184>)
 8006862:	669a      	str	r2, [r3, #104]	@ 0x68
 8006864:	e002      	b.n	800686c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	4a20      	ldr	r2, [pc, #128]	@ (80068ec <UART_Start_Receive_IT+0x188>)
 800686a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d019      	beq.n	80068a8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800687c:	e853 3f00 	ldrex	r3, [r3]
 8006880:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006884:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006888:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	461a      	mov	r2, r3
 8006890:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006892:	637b      	str	r3, [r7, #52]	@ 0x34
 8006894:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006896:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006898:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800689a:	e841 2300 	strex	r3, r2, [r1]
 800689e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80068a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1e6      	bne.n	8006874 <UART_Start_Receive_IT+0x110>
 80068a6:	e018      	b.n	80068da <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	e853 3f00 	ldrex	r3, [r3]
 80068b4:	613b      	str	r3, [r7, #16]
   return(result);
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	f043 0320 	orr.w	r3, r3, #32
 80068bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	461a      	mov	r2, r3
 80068c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068c6:	623b      	str	r3, [r7, #32]
 80068c8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ca:	69f9      	ldr	r1, [r7, #28]
 80068cc:	6a3a      	ldr	r2, [r7, #32]
 80068ce:	e841 2300 	strex	r3, r2, [r1]
 80068d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1e6      	bne.n	80068a8 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	375c      	adds	r7, #92	@ 0x5c
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr
 80068e8:	08006bf5 	.word	0x08006bf5
 80068ec:	08006a39 	.word	0x08006a39

080068f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b095      	sub	sp, #84	@ 0x54
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006900:	e853 3f00 	ldrex	r3, [r3]
 8006904:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006908:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800690c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	461a      	mov	r2, r3
 8006914:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006916:	643b      	str	r3, [r7, #64]	@ 0x40
 8006918:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800691c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800691e:	e841 2300 	strex	r3, r2, [r1]
 8006922:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1e6      	bne.n	80068f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	3308      	adds	r3, #8
 8006930:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006932:	6a3b      	ldr	r3, [r7, #32]
 8006934:	e853 3f00 	ldrex	r3, [r3]
 8006938:	61fb      	str	r3, [r7, #28]
   return(result);
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	f023 0301 	bic.w	r3, r3, #1
 8006940:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	3308      	adds	r3, #8
 8006948:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800694a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800694c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006950:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006952:	e841 2300 	strex	r3, r2, [r1]
 8006956:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800695a:	2b00      	cmp	r3, #0
 800695c:	d1e5      	bne.n	800692a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006962:	2b01      	cmp	r3, #1
 8006964:	d118      	bne.n	8006998 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	e853 3f00 	ldrex	r3, [r3]
 8006972:	60bb      	str	r3, [r7, #8]
   return(result);
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	f023 0310 	bic.w	r3, r3, #16
 800697a:	647b      	str	r3, [r7, #68]	@ 0x44
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	461a      	mov	r2, r3
 8006982:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006984:	61bb      	str	r3, [r7, #24]
 8006986:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006988:	6979      	ldr	r1, [r7, #20]
 800698a:	69ba      	ldr	r2, [r7, #24]
 800698c:	e841 2300 	strex	r3, r2, [r1]
 8006990:	613b      	str	r3, [r7, #16]
   return(result);
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d1e6      	bne.n	8006966 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2220      	movs	r2, #32
 800699c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80069ac:	bf00      	nop
 80069ae:	3754      	adds	r7, #84	@ 0x54
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069d6:	68f8      	ldr	r0, [r7, #12]
 80069d8:	f7ff fa3e 	bl	8005e58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069dc:	bf00      	nop
 80069de:	3710      	adds	r7, #16
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b088      	sub	sp, #32
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	e853 3f00 	ldrex	r3, [r3]
 80069f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a00:	61fb      	str	r3, [r7, #28]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	461a      	mov	r2, r3
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	61bb      	str	r3, [r7, #24]
 8006a0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a0e:	6979      	ldr	r1, [r7, #20]
 8006a10:	69ba      	ldr	r2, [r7, #24]
 8006a12:	e841 2300 	strex	r3, r2, [r1]
 8006a16:	613b      	str	r3, [r7, #16]
   return(result);
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1e6      	bne.n	80069ec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2220      	movs	r2, #32
 8006a22:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f7ff fa0a 	bl	8005e44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a30:	bf00      	nop
 8006a32:	3720      	adds	r7, #32
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b09c      	sub	sp, #112	@ 0x70
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006a46:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a50:	2b22      	cmp	r3, #34	@ 0x22
 8006a52:	f040 80be 	bne.w	8006bd2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006a5c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006a60:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006a64:	b2d9      	uxtb	r1, r3
 8006a66:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006a6a:	b2da      	uxtb	r2, r3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a70:	400a      	ands	r2, r1
 8006a72:	b2d2      	uxtb	r2, r2
 8006a74:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a7a:	1c5a      	adds	r2, r3, #1
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	b29a      	uxth	r2, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	f040 80a3 	bne.w	8006be6 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006aa8:	e853 3f00 	ldrex	r3, [r3]
 8006aac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006aae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ab0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ab4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	461a      	mov	r2, r3
 8006abc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006abe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ac0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006ac4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006ac6:	e841 2300 	strex	r3, r2, [r1]
 8006aca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006acc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1e6      	bne.n	8006aa0 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	3308      	adds	r3, #8
 8006ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006adc:	e853 3f00 	ldrex	r3, [r3]
 8006ae0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ae4:	f023 0301 	bic.w	r3, r3, #1
 8006ae8:	667b      	str	r3, [r7, #100]	@ 0x64
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	3308      	adds	r3, #8
 8006af0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006af2:	647a      	str	r2, [r7, #68]	@ 0x44
 8006af4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006af8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006afa:	e841 2300 	strex	r3, r2, [r1]
 8006afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1e5      	bne.n	8006ad2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2220      	movs	r2, #32
 8006b0a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a34      	ldr	r2, [pc, #208]	@ (8006bf0 <UART_RxISR_8BIT+0x1b8>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d01f      	beq.n	8006b64 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d018      	beq.n	8006b64 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b3a:	e853 3f00 	ldrex	r3, [r3]
 8006b3e:	623b      	str	r3, [r7, #32]
   return(result);
 8006b40:	6a3b      	ldr	r3, [r7, #32]
 8006b42:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006b46:	663b      	str	r3, [r7, #96]	@ 0x60
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b50:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b52:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b58:	e841 2300 	strex	r3, r2, [r1]
 8006b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d1e6      	bne.n	8006b32 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d12e      	bne.n	8006bca <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	e853 3f00 	ldrex	r3, [r3]
 8006b7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f023 0310 	bic.w	r3, r3, #16
 8006b86:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b90:	61fb      	str	r3, [r7, #28]
 8006b92:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b94:	69b9      	ldr	r1, [r7, #24]
 8006b96:	69fa      	ldr	r2, [r7, #28]
 8006b98:	e841 2300 	strex	r3, r2, [r1]
 8006b9c:	617b      	str	r3, [r7, #20]
   return(result);
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d1e6      	bne.n	8006b72 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	69db      	ldr	r3, [r3, #28]
 8006baa:	f003 0310 	and.w	r3, r3, #16
 8006bae:	2b10      	cmp	r3, #16
 8006bb0:	d103      	bne.n	8006bba <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2210      	movs	r2, #16
 8006bb8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f7ff f952 	bl	8005e6c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006bc8:	e00d      	b.n	8006be6 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f7fa f904 	bl	8000dd8 <HAL_UART_RxCpltCallback>
}
 8006bd0:	e009      	b.n	8006be6 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	8b1b      	ldrh	r3, [r3, #24]
 8006bd8:	b29a      	uxth	r2, r3
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f042 0208 	orr.w	r2, r2, #8
 8006be2:	b292      	uxth	r2, r2
 8006be4:	831a      	strh	r2, [r3, #24]
}
 8006be6:	bf00      	nop
 8006be8:	3770      	adds	r7, #112	@ 0x70
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	40008000 	.word	0x40008000

08006bf4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b09c      	sub	sp, #112	@ 0x70
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006c02:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c0c:	2b22      	cmp	r3, #34	@ 0x22
 8006c0e:	f040 80be 	bne.w	8006d8e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006c18:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c20:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006c22:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006c26:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	b29a      	uxth	r2, r3
 8006c2e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006c30:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c36:	1c9a      	adds	r2, r3, #2
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	3b01      	subs	r3, #1
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	f040 80a3 	bne.w	8006da2 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c64:	e853 3f00 	ldrex	r3, [r3]
 8006c68:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006c6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c70:	667b      	str	r3, [r7, #100]	@ 0x64
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	461a      	mov	r2, r3
 8006c78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c7c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006c80:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006c82:	e841 2300 	strex	r3, r2, [r1]
 8006c86:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006c88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d1e6      	bne.n	8006c5c <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	3308      	adds	r3, #8
 8006c94:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c98:	e853 3f00 	ldrex	r3, [r3]
 8006c9c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca0:	f023 0301 	bic.w	r3, r3, #1
 8006ca4:	663b      	str	r3, [r7, #96]	@ 0x60
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	3308      	adds	r3, #8
 8006cac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006cae:	643a      	str	r2, [r7, #64]	@ 0x40
 8006cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006cb4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006cb6:	e841 2300 	strex	r3, r2, [r1]
 8006cba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d1e5      	bne.n	8006c8e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2220      	movs	r2, #32
 8006cc6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a34      	ldr	r2, [pc, #208]	@ (8006dac <UART_RxISR_16BIT+0x1b8>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d01f      	beq.n	8006d20 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d018      	beq.n	8006d20 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf4:	6a3b      	ldr	r3, [r7, #32]
 8006cf6:	e853 3f00 	ldrex	r3, [r3]
 8006cfa:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006d02:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	461a      	mov	r2, r3
 8006d0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d0e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d14:	e841 2300 	strex	r3, r2, [r1]
 8006d18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d1e6      	bne.n	8006cee <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d12e      	bne.n	8006d86 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	e853 3f00 	ldrex	r3, [r3]
 8006d3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	f023 0310 	bic.w	r3, r3, #16
 8006d42:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	461a      	mov	r2, r3
 8006d4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006d4c:	61bb      	str	r3, [r7, #24]
 8006d4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d50:	6979      	ldr	r1, [r7, #20]
 8006d52:	69ba      	ldr	r2, [r7, #24]
 8006d54:	e841 2300 	strex	r3, r2, [r1]
 8006d58:	613b      	str	r3, [r7, #16]
   return(result);
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d1e6      	bne.n	8006d2e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	69db      	ldr	r3, [r3, #28]
 8006d66:	f003 0310 	and.w	r3, r3, #16
 8006d6a:	2b10      	cmp	r3, #16
 8006d6c:	d103      	bne.n	8006d76 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	2210      	movs	r2, #16
 8006d74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f7ff f874 	bl	8005e6c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d84:	e00d      	b.n	8006da2 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f7fa f826 	bl	8000dd8 <HAL_UART_RxCpltCallback>
}
 8006d8c:	e009      	b.n	8006da2 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	8b1b      	ldrh	r3, [r3, #24]
 8006d94:	b29a      	uxth	r2, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f042 0208 	orr.w	r2, r2, #8
 8006d9e:	b292      	uxth	r2, r2
 8006da0:	831a      	strh	r2, [r3, #24]
}
 8006da2:	bf00      	nop
 8006da4:	3770      	adds	r7, #112	@ 0x70
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	40008000 	.word	0x40008000

08006db0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006db8:	bf00      	nop
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <__NVIC_SetPriority>:
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	4603      	mov	r3, r0
 8006dcc:	6039      	str	r1, [r7, #0]
 8006dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	db0a      	blt.n	8006dee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	b2da      	uxtb	r2, r3
 8006ddc:	490c      	ldr	r1, [pc, #48]	@ (8006e10 <__NVIC_SetPriority+0x4c>)
 8006dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006de2:	0112      	lsls	r2, r2, #4
 8006de4:	b2d2      	uxtb	r2, r2
 8006de6:	440b      	add	r3, r1
 8006de8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006dec:	e00a      	b.n	8006e04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	b2da      	uxtb	r2, r3
 8006df2:	4908      	ldr	r1, [pc, #32]	@ (8006e14 <__NVIC_SetPriority+0x50>)
 8006df4:	79fb      	ldrb	r3, [r7, #7]
 8006df6:	f003 030f 	and.w	r3, r3, #15
 8006dfa:	3b04      	subs	r3, #4
 8006dfc:	0112      	lsls	r2, r2, #4
 8006dfe:	b2d2      	uxtb	r2, r2
 8006e00:	440b      	add	r3, r1
 8006e02:	761a      	strb	r2, [r3, #24]
}
 8006e04:	bf00      	nop
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr
 8006e10:	e000e100 	.word	0xe000e100
 8006e14:	e000ed00 	.word	0xe000ed00

08006e18 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006e1c:	4b05      	ldr	r3, [pc, #20]	@ (8006e34 <SysTick_Handler+0x1c>)
 8006e1e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006e20:	f001 fec6 	bl	8008bb0 <xTaskGetSchedulerState>
 8006e24:	4603      	mov	r3, r0
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d001      	beq.n	8006e2e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006e2a:	f002 fcbd 	bl	80097a8 <xPortSysTickHandler>
  }
}
 8006e2e:	bf00      	nop
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	e000e010 	.word	0xe000e010

08006e38 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006e3c:	2100      	movs	r1, #0
 8006e3e:	f06f 0004 	mvn.w	r0, #4
 8006e42:	f7ff ffbf 	bl	8006dc4 <__NVIC_SetPriority>
#endif
}
 8006e46:	bf00      	nop
 8006e48:	bd80      	pop	{r7, pc}
	...

08006e4c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e52:	f3ef 8305 	mrs	r3, IPSR
 8006e56:	603b      	str	r3, [r7, #0]
  return(result);
 8006e58:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d003      	beq.n	8006e66 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006e5e:	f06f 0305 	mvn.w	r3, #5
 8006e62:	607b      	str	r3, [r7, #4]
 8006e64:	e00c      	b.n	8006e80 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006e66:	4b0a      	ldr	r3, [pc, #40]	@ (8006e90 <osKernelInitialize+0x44>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d105      	bne.n	8006e7a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006e6e:	4b08      	ldr	r3, [pc, #32]	@ (8006e90 <osKernelInitialize+0x44>)
 8006e70:	2201      	movs	r2, #1
 8006e72:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006e74:	2300      	movs	r3, #0
 8006e76:	607b      	str	r3, [r7, #4]
 8006e78:	e002      	b.n	8006e80 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006e7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006e7e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006e80:	687b      	ldr	r3, [r7, #4]
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	370c      	adds	r7, #12
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr
 8006e8e:	bf00      	nop
 8006e90:	2000029c 	.word	0x2000029c

08006e94 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b082      	sub	sp, #8
 8006e98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e9a:	f3ef 8305 	mrs	r3, IPSR
 8006e9e:	603b      	str	r3, [r7, #0]
  return(result);
 8006ea0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d003      	beq.n	8006eae <osKernelStart+0x1a>
    stat = osErrorISR;
 8006ea6:	f06f 0305 	mvn.w	r3, #5
 8006eaa:	607b      	str	r3, [r7, #4]
 8006eac:	e010      	b.n	8006ed0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006eae:	4b0b      	ldr	r3, [pc, #44]	@ (8006edc <osKernelStart+0x48>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d109      	bne.n	8006eca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006eb6:	f7ff ffbf 	bl	8006e38 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006eba:	4b08      	ldr	r3, [pc, #32]	@ (8006edc <osKernelStart+0x48>)
 8006ebc:	2202      	movs	r2, #2
 8006ebe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006ec0:	f001 fa12 	bl	80082e8 <vTaskStartScheduler>
      stat = osOK;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	607b      	str	r3, [r7, #4]
 8006ec8:	e002      	b.n	8006ed0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006eca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006ece:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006ed0:	687b      	ldr	r3, [r7, #4]
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3708      	adds	r7, #8
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	2000029c 	.word	0x2000029c

08006ee0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b08e      	sub	sp, #56	@ 0x38
 8006ee4:	af04      	add	r7, sp, #16
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006eec:	2300      	movs	r3, #0
 8006eee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ef0:	f3ef 8305 	mrs	r3, IPSR
 8006ef4:	617b      	str	r3, [r7, #20]
  return(result);
 8006ef6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d17e      	bne.n	8006ffa <osThreadNew+0x11a>
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d07b      	beq.n	8006ffa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006f02:	2380      	movs	r3, #128	@ 0x80
 8006f04:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006f06:	2318      	movs	r3, #24
 8006f08:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006f0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006f12:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d045      	beq.n	8006fa6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d002      	beq.n	8006f28 <osThreadNew+0x48>
        name = attr->name;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	699b      	ldr	r3, [r3, #24]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d002      	beq.n	8006f36 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	699b      	ldr	r3, [r3, #24]
 8006f34:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d008      	beq.n	8006f4e <osThreadNew+0x6e>
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	2b38      	cmp	r3, #56	@ 0x38
 8006f40:	d805      	bhi.n	8006f4e <osThreadNew+0x6e>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	f003 0301 	and.w	r3, r3, #1
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d001      	beq.n	8006f52 <osThreadNew+0x72>
        return (NULL);
 8006f4e:	2300      	movs	r3, #0
 8006f50:	e054      	b.n	8006ffc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	695b      	ldr	r3, [r3, #20]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d003      	beq.n	8006f62 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	695b      	ldr	r3, [r3, #20]
 8006f5e:	089b      	lsrs	r3, r3, #2
 8006f60:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d00e      	beq.n	8006f88 <osThreadNew+0xa8>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	2ba7      	cmp	r3, #167	@ 0xa7
 8006f70:	d90a      	bls.n	8006f88 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d006      	beq.n	8006f88 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	695b      	ldr	r3, [r3, #20]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d002      	beq.n	8006f88 <osThreadNew+0xa8>
        mem = 1;
 8006f82:	2301      	movs	r3, #1
 8006f84:	61bb      	str	r3, [r7, #24]
 8006f86:	e010      	b.n	8006faa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d10c      	bne.n	8006faa <osThreadNew+0xca>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d108      	bne.n	8006faa <osThreadNew+0xca>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	691b      	ldr	r3, [r3, #16]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d104      	bne.n	8006faa <osThreadNew+0xca>
          mem = 0;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	61bb      	str	r3, [r7, #24]
 8006fa4:	e001      	b.n	8006faa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d110      	bne.n	8006fd2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006fb8:	9202      	str	r2, [sp, #8]
 8006fba:	9301      	str	r3, [sp, #4]
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	9300      	str	r3, [sp, #0]
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	6a3a      	ldr	r2, [r7, #32]
 8006fc4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006fc6:	68f8      	ldr	r0, [r7, #12]
 8006fc8:	f000 ff9a 	bl	8007f00 <xTaskCreateStatic>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	613b      	str	r3, [r7, #16]
 8006fd0:	e013      	b.n	8006ffa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d110      	bne.n	8006ffa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006fd8:	6a3b      	ldr	r3, [r7, #32]
 8006fda:	b29a      	uxth	r2, r3
 8006fdc:	f107 0310 	add.w	r3, r7, #16
 8006fe0:	9301      	str	r3, [sp, #4]
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	9300      	str	r3, [sp, #0]
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006fea:	68f8      	ldr	r0, [r7, #12]
 8006fec:	f000 ffe8 	bl	8007fc0 <xTaskCreate>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d001      	beq.n	8006ffa <osThreadNew+0x11a>
            hTask = NULL;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006ffa:	693b      	ldr	r3, [r7, #16]
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3728      	adds	r7, #40	@ 0x28
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800700c:	f3ef 8305 	mrs	r3, IPSR
 8007010:	60bb      	str	r3, [r7, #8]
  return(result);
 8007012:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007014:	2b00      	cmp	r3, #0
 8007016:	d003      	beq.n	8007020 <osDelay+0x1c>
    stat = osErrorISR;
 8007018:	f06f 0305 	mvn.w	r3, #5
 800701c:	60fb      	str	r3, [r7, #12]
 800701e:	e007      	b.n	8007030 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007020:	2300      	movs	r3, #0
 8007022:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d002      	beq.n	8007030 <osDelay+0x2c>
      vTaskDelay(ticks);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f001 f926 	bl	800827c <vTaskDelay>
    }
  }

  return (stat);
 8007030:	68fb      	ldr	r3, [r7, #12]
}
 8007032:	4618      	mov	r0, r3
 8007034:	3710      	adds	r7, #16
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}

0800703a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800703a:	b580      	push	{r7, lr}
 800703c:	b08a      	sub	sp, #40	@ 0x28
 800703e:	af02      	add	r7, sp, #8
 8007040:	60f8      	str	r0, [r7, #12]
 8007042:	60b9      	str	r1, [r7, #8]
 8007044:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007046:	2300      	movs	r3, #0
 8007048:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800704a:	f3ef 8305 	mrs	r3, IPSR
 800704e:	613b      	str	r3, [r7, #16]
  return(result);
 8007050:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007052:	2b00      	cmp	r3, #0
 8007054:	d175      	bne.n	8007142 <osSemaphoreNew+0x108>
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d072      	beq.n	8007142 <osSemaphoreNew+0x108>
 800705c:	68ba      	ldr	r2, [r7, #8]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	429a      	cmp	r2, r3
 8007062:	d86e      	bhi.n	8007142 <osSemaphoreNew+0x108>
    mem = -1;
 8007064:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007068:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d015      	beq.n	800709c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d006      	beq.n	8007086 <osSemaphoreNew+0x4c>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	2b4f      	cmp	r3, #79	@ 0x4f
 800707e:	d902      	bls.n	8007086 <osSemaphoreNew+0x4c>
        mem = 1;
 8007080:	2301      	movs	r3, #1
 8007082:	61bb      	str	r3, [r7, #24]
 8007084:	e00c      	b.n	80070a0 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d108      	bne.n	80070a0 <osSemaphoreNew+0x66>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d104      	bne.n	80070a0 <osSemaphoreNew+0x66>
          mem = 0;
 8007096:	2300      	movs	r3, #0
 8007098:	61bb      	str	r3, [r7, #24]
 800709a:	e001      	b.n	80070a0 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800709c:	2300      	movs	r3, #0
 800709e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80070a0:	69bb      	ldr	r3, [r7, #24]
 80070a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80070a6:	d04c      	beq.n	8007142 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d128      	bne.n	8007100 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d10a      	bne.n	80070ca <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	2203      	movs	r2, #3
 80070ba:	9200      	str	r2, [sp, #0]
 80070bc:	2200      	movs	r2, #0
 80070be:	2100      	movs	r1, #0
 80070c0:	2001      	movs	r0, #1
 80070c2:	f000 f995 	bl	80073f0 <xQueueGenericCreateStatic>
 80070c6:	61f8      	str	r0, [r7, #28]
 80070c8:	e005      	b.n	80070d6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80070ca:	2203      	movs	r2, #3
 80070cc:	2100      	movs	r1, #0
 80070ce:	2001      	movs	r0, #1
 80070d0:	f000 fa0b 	bl	80074ea <xQueueGenericCreate>
 80070d4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d022      	beq.n	8007122 <osSemaphoreNew+0xe8>
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d01f      	beq.n	8007122 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80070e2:	2300      	movs	r3, #0
 80070e4:	2200      	movs	r2, #0
 80070e6:	2100      	movs	r1, #0
 80070e8:	69f8      	ldr	r0, [r7, #28]
 80070ea:	f000 facb 	bl	8007684 <xQueueGenericSend>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d016      	beq.n	8007122 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80070f4:	69f8      	ldr	r0, [r7, #28]
 80070f6:	f000 fd47 	bl	8007b88 <vQueueDelete>
            hSemaphore = NULL;
 80070fa:	2300      	movs	r3, #0
 80070fc:	61fb      	str	r3, [r7, #28]
 80070fe:	e010      	b.n	8007122 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	2b01      	cmp	r3, #1
 8007104:	d108      	bne.n	8007118 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	461a      	mov	r2, r3
 800710c:	68b9      	ldr	r1, [r7, #8]
 800710e:	68f8      	ldr	r0, [r7, #12]
 8007110:	f000 fa49 	bl	80075a6 <xQueueCreateCountingSemaphoreStatic>
 8007114:	61f8      	str	r0, [r7, #28]
 8007116:	e004      	b.n	8007122 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007118:	68b9      	ldr	r1, [r7, #8]
 800711a:	68f8      	ldr	r0, [r7, #12]
 800711c:	f000 fa7c 	bl	8007618 <xQueueCreateCountingSemaphore>
 8007120:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d00c      	beq.n	8007142 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d003      	beq.n	8007136 <osSemaphoreNew+0xfc>
          name = attr->name;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	617b      	str	r3, [r7, #20]
 8007134:	e001      	b.n	800713a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8007136:	2300      	movs	r3, #0
 8007138:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800713a:	6979      	ldr	r1, [r7, #20]
 800713c:	69f8      	ldr	r0, [r7, #28]
 800713e:	f000 fe57 	bl	8007df0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007142:	69fb      	ldr	r3, [r7, #28]
}
 8007144:	4618      	mov	r0, r3
 8007146:	3720      	adds	r7, #32
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800714c:	b480      	push	{r7}
 800714e:	b085      	sub	sp, #20
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	4a07      	ldr	r2, [pc, #28]	@ (8007178 <vApplicationGetIdleTaskMemory+0x2c>)
 800715c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	4a06      	ldr	r2, [pc, #24]	@ (800717c <vApplicationGetIdleTaskMemory+0x30>)
 8007162:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2280      	movs	r2, #128	@ 0x80
 8007168:	601a      	str	r2, [r3, #0]
}
 800716a:	bf00      	nop
 800716c:	3714      	adds	r7, #20
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	200002a0 	.word	0x200002a0
 800717c:	20000348 	.word	0x20000348

08007180 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007180:	b480      	push	{r7}
 8007182:	b085      	sub	sp, #20
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	4a07      	ldr	r2, [pc, #28]	@ (80071ac <vApplicationGetTimerTaskMemory+0x2c>)
 8007190:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	4a06      	ldr	r2, [pc, #24]	@ (80071b0 <vApplicationGetTimerTaskMemory+0x30>)
 8007196:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800719e:	601a      	str	r2, [r3, #0]
}
 80071a0:	bf00      	nop
 80071a2:	3714      	adds	r7, #20
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr
 80071ac:	20000548 	.word	0x20000548
 80071b0:	200005f0 	.word	0x200005f0

080071b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f103 0208 	add.w	r2, r3, #8
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80071cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f103 0208 	add.w	r2, r3, #8
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f103 0208 	add.w	r2, r3, #8
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80071e8:	bf00      	nop
 80071ea:	370c      	adds	r7, #12
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr

080071f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007202:	bf00      	nop
 8007204:	370c      	adds	r7, #12
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr

0800720e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800720e:	b480      	push	{r7}
 8007210:	b085      	sub	sp, #20
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
 8007216:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	689a      	ldr	r2, [r3, #8]
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	683a      	ldr	r2, [r7, #0]
 8007232:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	683a      	ldr	r2, [r7, #0]
 8007238:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	1c5a      	adds	r2, r3, #1
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	601a      	str	r2, [r3, #0]
}
 800724a:	bf00      	nop
 800724c:	3714      	adds	r7, #20
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr

08007256 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007256:	b480      	push	{r7}
 8007258:	b085      	sub	sp, #20
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
 800725e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800726c:	d103      	bne.n	8007276 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	691b      	ldr	r3, [r3, #16]
 8007272:	60fb      	str	r3, [r7, #12]
 8007274:	e00c      	b.n	8007290 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	3308      	adds	r3, #8
 800727a:	60fb      	str	r3, [r7, #12]
 800727c:	e002      	b.n	8007284 <vListInsert+0x2e>
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	60fb      	str	r3, [r7, #12]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68ba      	ldr	r2, [r7, #8]
 800728c:	429a      	cmp	r2, r3
 800728e:	d2f6      	bcs.n	800727e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	685a      	ldr	r2, [r3, #4]
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	683a      	ldr	r2, [r7, #0]
 800729e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	68fa      	ldr	r2, [r7, #12]
 80072a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	683a      	ldr	r2, [r7, #0]
 80072aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	1c5a      	adds	r2, r3, #1
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	601a      	str	r2, [r3, #0]
}
 80072bc:	bf00      	nop
 80072be:	3714      	adds	r7, #20
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80072c8:	b480      	push	{r7}
 80072ca:	b085      	sub	sp, #20
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	691b      	ldr	r3, [r3, #16]
 80072d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	6892      	ldr	r2, [r2, #8]
 80072de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	6852      	ldr	r2, [r2, #4]
 80072e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d103      	bne.n	80072fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	689a      	ldr	r2, [r3, #8]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	1e5a      	subs	r2, r3, #1
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
}
 8007310:	4618      	mov	r0, r3
 8007312:	3714      	adds	r7, #20
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d10b      	bne.n	8007348 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007334:	f383 8811 	msr	BASEPRI, r3
 8007338:	f3bf 8f6f 	isb	sy
 800733c:	f3bf 8f4f 	dsb	sy
 8007340:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007342:	bf00      	nop
 8007344:	bf00      	nop
 8007346:	e7fd      	b.n	8007344 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007348:	f002 f99e 	bl	8009688 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007354:	68f9      	ldr	r1, [r7, #12]
 8007356:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007358:	fb01 f303 	mul.w	r3, r1, r3
 800735c:	441a      	add	r2, r3
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2200      	movs	r2, #0
 8007366:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007378:	3b01      	subs	r3, #1
 800737a:	68f9      	ldr	r1, [r7, #12]
 800737c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800737e:	fb01 f303 	mul.w	r3, r1, r3
 8007382:	441a      	add	r2, r3
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	22ff      	movs	r2, #255	@ 0xff
 800738c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	22ff      	movs	r2, #255	@ 0xff
 8007394:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d114      	bne.n	80073c8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d01a      	beq.n	80073dc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	3310      	adds	r3, #16
 80073aa:	4618      	mov	r0, r3
 80073ac:	f001 fa3a 	bl	8008824 <xTaskRemoveFromEventList>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d012      	beq.n	80073dc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80073b6:	4b0d      	ldr	r3, [pc, #52]	@ (80073ec <xQueueGenericReset+0xd0>)
 80073b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073bc:	601a      	str	r2, [r3, #0]
 80073be:	f3bf 8f4f 	dsb	sy
 80073c2:	f3bf 8f6f 	isb	sy
 80073c6:	e009      	b.n	80073dc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	3310      	adds	r3, #16
 80073cc:	4618      	mov	r0, r3
 80073ce:	f7ff fef1 	bl	80071b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	3324      	adds	r3, #36	@ 0x24
 80073d6:	4618      	mov	r0, r3
 80073d8:	f7ff feec 	bl	80071b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80073dc:	f002 f986 	bl	80096ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80073e0:	2301      	movs	r3, #1
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	e000ed04 	.word	0xe000ed04

080073f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b08e      	sub	sp, #56	@ 0x38
 80073f4:	af02      	add	r7, sp, #8
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	607a      	str	r2, [r7, #4]
 80073fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d10b      	bne.n	800741c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007408:	f383 8811 	msr	BASEPRI, r3
 800740c:	f3bf 8f6f 	isb	sy
 8007410:	f3bf 8f4f 	dsb	sy
 8007414:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007416:	bf00      	nop
 8007418:	bf00      	nop
 800741a:	e7fd      	b.n	8007418 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d10b      	bne.n	800743a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007426:	f383 8811 	msr	BASEPRI, r3
 800742a:	f3bf 8f6f 	isb	sy
 800742e:	f3bf 8f4f 	dsb	sy
 8007432:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007434:	bf00      	nop
 8007436:	bf00      	nop
 8007438:	e7fd      	b.n	8007436 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d002      	beq.n	8007446 <xQueueGenericCreateStatic+0x56>
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d001      	beq.n	800744a <xQueueGenericCreateStatic+0x5a>
 8007446:	2301      	movs	r3, #1
 8007448:	e000      	b.n	800744c <xQueueGenericCreateStatic+0x5c>
 800744a:	2300      	movs	r3, #0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d10b      	bne.n	8007468 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007454:	f383 8811 	msr	BASEPRI, r3
 8007458:	f3bf 8f6f 	isb	sy
 800745c:	f3bf 8f4f 	dsb	sy
 8007460:	623b      	str	r3, [r7, #32]
}
 8007462:	bf00      	nop
 8007464:	bf00      	nop
 8007466:	e7fd      	b.n	8007464 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d102      	bne.n	8007474 <xQueueGenericCreateStatic+0x84>
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d101      	bne.n	8007478 <xQueueGenericCreateStatic+0x88>
 8007474:	2301      	movs	r3, #1
 8007476:	e000      	b.n	800747a <xQueueGenericCreateStatic+0x8a>
 8007478:	2300      	movs	r3, #0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d10b      	bne.n	8007496 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800747e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007482:	f383 8811 	msr	BASEPRI, r3
 8007486:	f3bf 8f6f 	isb	sy
 800748a:	f3bf 8f4f 	dsb	sy
 800748e:	61fb      	str	r3, [r7, #28]
}
 8007490:	bf00      	nop
 8007492:	bf00      	nop
 8007494:	e7fd      	b.n	8007492 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007496:	2350      	movs	r3, #80	@ 0x50
 8007498:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	2b50      	cmp	r3, #80	@ 0x50
 800749e:	d00b      	beq.n	80074b8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80074a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074a4:	f383 8811 	msr	BASEPRI, r3
 80074a8:	f3bf 8f6f 	isb	sy
 80074ac:	f3bf 8f4f 	dsb	sy
 80074b0:	61bb      	str	r3, [r7, #24]
}
 80074b2:	bf00      	nop
 80074b4:	bf00      	nop
 80074b6:	e7fd      	b.n	80074b4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80074b8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80074be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d00d      	beq.n	80074e0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80074c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074c6:	2201      	movs	r2, #1
 80074c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80074cc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80074d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074d2:	9300      	str	r3, [sp, #0]
 80074d4:	4613      	mov	r3, r2
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	68b9      	ldr	r1, [r7, #8]
 80074da:	68f8      	ldr	r0, [r7, #12]
 80074dc:	f000 f840 	bl	8007560 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80074e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3730      	adds	r7, #48	@ 0x30
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}

080074ea <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80074ea:	b580      	push	{r7, lr}
 80074ec:	b08a      	sub	sp, #40	@ 0x28
 80074ee:	af02      	add	r7, sp, #8
 80074f0:	60f8      	str	r0, [r7, #12]
 80074f2:	60b9      	str	r1, [r7, #8]
 80074f4:	4613      	mov	r3, r2
 80074f6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d10b      	bne.n	8007516 <xQueueGenericCreate+0x2c>
	__asm volatile
 80074fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007502:	f383 8811 	msr	BASEPRI, r3
 8007506:	f3bf 8f6f 	isb	sy
 800750a:	f3bf 8f4f 	dsb	sy
 800750e:	613b      	str	r3, [r7, #16]
}
 8007510:	bf00      	nop
 8007512:	bf00      	nop
 8007514:	e7fd      	b.n	8007512 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	68ba      	ldr	r2, [r7, #8]
 800751a:	fb02 f303 	mul.w	r3, r2, r3
 800751e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	3350      	adds	r3, #80	@ 0x50
 8007524:	4618      	mov	r0, r3
 8007526:	f002 f9d1 	bl	80098cc <pvPortMalloc>
 800752a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800752c:	69bb      	ldr	r3, [r7, #24]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d011      	beq.n	8007556 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	3350      	adds	r3, #80	@ 0x50
 800753a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800753c:	69bb      	ldr	r3, [r7, #24]
 800753e:	2200      	movs	r2, #0
 8007540:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007544:	79fa      	ldrb	r2, [r7, #7]
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	9300      	str	r3, [sp, #0]
 800754a:	4613      	mov	r3, r2
 800754c:	697a      	ldr	r2, [r7, #20]
 800754e:	68b9      	ldr	r1, [r7, #8]
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f000 f805 	bl	8007560 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007556:	69bb      	ldr	r3, [r7, #24]
	}
 8007558:	4618      	mov	r0, r3
 800755a:	3720      	adds	r7, #32
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]
 800756c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d103      	bne.n	800757c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	69ba      	ldr	r2, [r7, #24]
 8007578:	601a      	str	r2, [r3, #0]
 800757a:	e002      	b.n	8007582 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007582:	69bb      	ldr	r3, [r7, #24]
 8007584:	68fa      	ldr	r2, [r7, #12]
 8007586:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	68ba      	ldr	r2, [r7, #8]
 800758c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800758e:	2101      	movs	r1, #1
 8007590:	69b8      	ldr	r0, [r7, #24]
 8007592:	f7ff fec3 	bl	800731c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	78fa      	ldrb	r2, [r7, #3]
 800759a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800759e:	bf00      	nop
 80075a0:	3710      	adds	r7, #16
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}

080075a6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b08a      	sub	sp, #40	@ 0x28
 80075aa:	af02      	add	r7, sp, #8
 80075ac:	60f8      	str	r0, [r7, #12]
 80075ae:	60b9      	str	r1, [r7, #8]
 80075b0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d10b      	bne.n	80075d0 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 80075b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075bc:	f383 8811 	msr	BASEPRI, r3
 80075c0:	f3bf 8f6f 	isb	sy
 80075c4:	f3bf 8f4f 	dsb	sy
 80075c8:	61bb      	str	r3, [r7, #24]
}
 80075ca:	bf00      	nop
 80075cc:	bf00      	nop
 80075ce:	e7fd      	b.n	80075cc <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80075d0:	68ba      	ldr	r2, [r7, #8]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d90b      	bls.n	80075f0 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 80075d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075dc:	f383 8811 	msr	BASEPRI, r3
 80075e0:	f3bf 8f6f 	isb	sy
 80075e4:	f3bf 8f4f 	dsb	sy
 80075e8:	617b      	str	r3, [r7, #20]
}
 80075ea:	bf00      	nop
 80075ec:	bf00      	nop
 80075ee:	e7fd      	b.n	80075ec <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80075f0:	2302      	movs	r3, #2
 80075f2:	9300      	str	r3, [sp, #0]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	2100      	movs	r1, #0
 80075fa:	68f8      	ldr	r0, [r7, #12]
 80075fc:	f7ff fef8 	bl	80073f0 <xQueueGenericCreateStatic>
 8007600:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d002      	beq.n	800760e <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	68ba      	ldr	r2, [r7, #8]
 800760c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800760e:	69fb      	ldr	r3, [r7, #28]
	}
 8007610:	4618      	mov	r0, r3
 8007612:	3720      	adds	r7, #32
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007618:	b580      	push	{r7, lr}
 800761a:	b086      	sub	sp, #24
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d10b      	bne.n	8007640 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8007628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800762c:	f383 8811 	msr	BASEPRI, r3
 8007630:	f3bf 8f6f 	isb	sy
 8007634:	f3bf 8f4f 	dsb	sy
 8007638:	613b      	str	r3, [r7, #16]
}
 800763a:	bf00      	nop
 800763c:	bf00      	nop
 800763e:	e7fd      	b.n	800763c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007640:	683a      	ldr	r2, [r7, #0]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	429a      	cmp	r2, r3
 8007646:	d90b      	bls.n	8007660 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8007648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800764c:	f383 8811 	msr	BASEPRI, r3
 8007650:	f3bf 8f6f 	isb	sy
 8007654:	f3bf 8f4f 	dsb	sy
 8007658:	60fb      	str	r3, [r7, #12]
}
 800765a:	bf00      	nop
 800765c:	bf00      	nop
 800765e:	e7fd      	b.n	800765c <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007660:	2202      	movs	r2, #2
 8007662:	2100      	movs	r1, #0
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f7ff ff40 	bl	80074ea <xQueueGenericCreate>
 800766a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d002      	beq.n	8007678 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	683a      	ldr	r2, [r7, #0]
 8007676:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007678:	697b      	ldr	r3, [r7, #20]
	}
 800767a:	4618      	mov	r0, r3
 800767c:	3718      	adds	r7, #24
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
	...

08007684 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b08e      	sub	sp, #56	@ 0x38
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	607a      	str	r2, [r7, #4]
 8007690:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007692:	2300      	movs	r3, #0
 8007694:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800769a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800769c:	2b00      	cmp	r3, #0
 800769e:	d10b      	bne.n	80076b8 <xQueueGenericSend+0x34>
	__asm volatile
 80076a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076a4:	f383 8811 	msr	BASEPRI, r3
 80076a8:	f3bf 8f6f 	isb	sy
 80076ac:	f3bf 8f4f 	dsb	sy
 80076b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80076b2:	bf00      	nop
 80076b4:	bf00      	nop
 80076b6:	e7fd      	b.n	80076b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d103      	bne.n	80076c6 <xQueueGenericSend+0x42>
 80076be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d101      	bne.n	80076ca <xQueueGenericSend+0x46>
 80076c6:	2301      	movs	r3, #1
 80076c8:	e000      	b.n	80076cc <xQueueGenericSend+0x48>
 80076ca:	2300      	movs	r3, #0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d10b      	bne.n	80076e8 <xQueueGenericSend+0x64>
	__asm volatile
 80076d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076d4:	f383 8811 	msr	BASEPRI, r3
 80076d8:	f3bf 8f6f 	isb	sy
 80076dc:	f3bf 8f4f 	dsb	sy
 80076e0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80076e2:	bf00      	nop
 80076e4:	bf00      	nop
 80076e6:	e7fd      	b.n	80076e4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	d103      	bne.n	80076f6 <xQueueGenericSend+0x72>
 80076ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d101      	bne.n	80076fa <xQueueGenericSend+0x76>
 80076f6:	2301      	movs	r3, #1
 80076f8:	e000      	b.n	80076fc <xQueueGenericSend+0x78>
 80076fa:	2300      	movs	r3, #0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d10b      	bne.n	8007718 <xQueueGenericSend+0x94>
	__asm volatile
 8007700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007704:	f383 8811 	msr	BASEPRI, r3
 8007708:	f3bf 8f6f 	isb	sy
 800770c:	f3bf 8f4f 	dsb	sy
 8007710:	623b      	str	r3, [r7, #32]
}
 8007712:	bf00      	nop
 8007714:	bf00      	nop
 8007716:	e7fd      	b.n	8007714 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007718:	f001 fa4a 	bl	8008bb0 <xTaskGetSchedulerState>
 800771c:	4603      	mov	r3, r0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d102      	bne.n	8007728 <xQueueGenericSend+0xa4>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d101      	bne.n	800772c <xQueueGenericSend+0xa8>
 8007728:	2301      	movs	r3, #1
 800772a:	e000      	b.n	800772e <xQueueGenericSend+0xaa>
 800772c:	2300      	movs	r3, #0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d10b      	bne.n	800774a <xQueueGenericSend+0xc6>
	__asm volatile
 8007732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007736:	f383 8811 	msr	BASEPRI, r3
 800773a:	f3bf 8f6f 	isb	sy
 800773e:	f3bf 8f4f 	dsb	sy
 8007742:	61fb      	str	r3, [r7, #28]
}
 8007744:	bf00      	nop
 8007746:	bf00      	nop
 8007748:	e7fd      	b.n	8007746 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800774a:	f001 ff9d 	bl	8009688 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800774e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007750:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007756:	429a      	cmp	r2, r3
 8007758:	d302      	bcc.n	8007760 <xQueueGenericSend+0xdc>
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	2b02      	cmp	r3, #2
 800775e:	d129      	bne.n	80077b4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007760:	683a      	ldr	r2, [r7, #0]
 8007762:	68b9      	ldr	r1, [r7, #8]
 8007764:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007766:	f000 fa33 	bl	8007bd0 <prvCopyDataToQueue>
 800776a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800776c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800776e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007770:	2b00      	cmp	r3, #0
 8007772:	d010      	beq.n	8007796 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007776:	3324      	adds	r3, #36	@ 0x24
 8007778:	4618      	mov	r0, r3
 800777a:	f001 f853 	bl	8008824 <xTaskRemoveFromEventList>
 800777e:	4603      	mov	r3, r0
 8007780:	2b00      	cmp	r3, #0
 8007782:	d013      	beq.n	80077ac <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007784:	4b3f      	ldr	r3, [pc, #252]	@ (8007884 <xQueueGenericSend+0x200>)
 8007786:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800778a:	601a      	str	r2, [r3, #0]
 800778c:	f3bf 8f4f 	dsb	sy
 8007790:	f3bf 8f6f 	isb	sy
 8007794:	e00a      	b.n	80077ac <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007798:	2b00      	cmp	r3, #0
 800779a:	d007      	beq.n	80077ac <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800779c:	4b39      	ldr	r3, [pc, #228]	@ (8007884 <xQueueGenericSend+0x200>)
 800779e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077a2:	601a      	str	r2, [r3, #0]
 80077a4:	f3bf 8f4f 	dsb	sy
 80077a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80077ac:	f001 ff9e 	bl	80096ec <vPortExitCritical>
				return pdPASS;
 80077b0:	2301      	movs	r3, #1
 80077b2:	e063      	b.n	800787c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d103      	bne.n	80077c2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80077ba:	f001 ff97 	bl	80096ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80077be:	2300      	movs	r3, #0
 80077c0:	e05c      	b.n	800787c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80077c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d106      	bne.n	80077d6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80077c8:	f107 0314 	add.w	r3, r7, #20
 80077cc:	4618      	mov	r0, r3
 80077ce:	f001 f88d 	bl	80088ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80077d2:	2301      	movs	r3, #1
 80077d4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80077d6:	f001 ff89 	bl	80096ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80077da:	f000 fdf5 	bl	80083c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80077de:	f001 ff53 	bl	8009688 <vPortEnterCritical>
 80077e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80077e8:	b25b      	sxtb	r3, r3
 80077ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80077ee:	d103      	bne.n	80077f8 <xQueueGenericSend+0x174>
 80077f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f2:	2200      	movs	r2, #0
 80077f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80077f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80077fe:	b25b      	sxtb	r3, r3
 8007800:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007804:	d103      	bne.n	800780e <xQueueGenericSend+0x18a>
 8007806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007808:	2200      	movs	r2, #0
 800780a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800780e:	f001 ff6d 	bl	80096ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007812:	1d3a      	adds	r2, r7, #4
 8007814:	f107 0314 	add.w	r3, r7, #20
 8007818:	4611      	mov	r1, r2
 800781a:	4618      	mov	r0, r3
 800781c:	f001 f87c 	bl	8008918 <xTaskCheckForTimeOut>
 8007820:	4603      	mov	r3, r0
 8007822:	2b00      	cmp	r3, #0
 8007824:	d124      	bne.n	8007870 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007826:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007828:	f000 faca 	bl	8007dc0 <prvIsQueueFull>
 800782c:	4603      	mov	r3, r0
 800782e:	2b00      	cmp	r3, #0
 8007830:	d018      	beq.n	8007864 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007834:	3310      	adds	r3, #16
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	4611      	mov	r1, r2
 800783a:	4618      	mov	r0, r3
 800783c:	f000 ffa0 	bl	8008780 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007840:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007842:	f000 fa55 	bl	8007cf0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007846:	f000 fdcd 	bl	80083e4 <xTaskResumeAll>
 800784a:	4603      	mov	r3, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	f47f af7c 	bne.w	800774a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007852:	4b0c      	ldr	r3, [pc, #48]	@ (8007884 <xQueueGenericSend+0x200>)
 8007854:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007858:	601a      	str	r2, [r3, #0]
 800785a:	f3bf 8f4f 	dsb	sy
 800785e:	f3bf 8f6f 	isb	sy
 8007862:	e772      	b.n	800774a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007864:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007866:	f000 fa43 	bl	8007cf0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800786a:	f000 fdbb 	bl	80083e4 <xTaskResumeAll>
 800786e:	e76c      	b.n	800774a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007870:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007872:	f000 fa3d 	bl	8007cf0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007876:	f000 fdb5 	bl	80083e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800787a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800787c:	4618      	mov	r0, r3
 800787e:	3738      	adds	r7, #56	@ 0x38
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	e000ed04 	.word	0xe000ed04

08007888 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b090      	sub	sp, #64	@ 0x40
 800788c:	af00      	add	r7, sp, #0
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	60b9      	str	r1, [r7, #8]
 8007892:	607a      	str	r2, [r7, #4]
 8007894:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800789a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800789c:	2b00      	cmp	r3, #0
 800789e:	d10b      	bne.n	80078b8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80078a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078a4:	f383 8811 	msr	BASEPRI, r3
 80078a8:	f3bf 8f6f 	isb	sy
 80078ac:	f3bf 8f4f 	dsb	sy
 80078b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80078b2:	bf00      	nop
 80078b4:	bf00      	nop
 80078b6:	e7fd      	b.n	80078b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d103      	bne.n	80078c6 <xQueueGenericSendFromISR+0x3e>
 80078be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d101      	bne.n	80078ca <xQueueGenericSendFromISR+0x42>
 80078c6:	2301      	movs	r3, #1
 80078c8:	e000      	b.n	80078cc <xQueueGenericSendFromISR+0x44>
 80078ca:	2300      	movs	r3, #0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d10b      	bne.n	80078e8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80078d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078d4:	f383 8811 	msr	BASEPRI, r3
 80078d8:	f3bf 8f6f 	isb	sy
 80078dc:	f3bf 8f4f 	dsb	sy
 80078e0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80078e2:	bf00      	nop
 80078e4:	bf00      	nop
 80078e6:	e7fd      	b.n	80078e4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	2b02      	cmp	r3, #2
 80078ec:	d103      	bne.n	80078f6 <xQueueGenericSendFromISR+0x6e>
 80078ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d101      	bne.n	80078fa <xQueueGenericSendFromISR+0x72>
 80078f6:	2301      	movs	r3, #1
 80078f8:	e000      	b.n	80078fc <xQueueGenericSendFromISR+0x74>
 80078fa:	2300      	movs	r3, #0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d10b      	bne.n	8007918 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007904:	f383 8811 	msr	BASEPRI, r3
 8007908:	f3bf 8f6f 	isb	sy
 800790c:	f3bf 8f4f 	dsb	sy
 8007910:	623b      	str	r3, [r7, #32]
}
 8007912:	bf00      	nop
 8007914:	bf00      	nop
 8007916:	e7fd      	b.n	8007914 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007918:	f001 ff96 	bl	8009848 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800791c:	f3ef 8211 	mrs	r2, BASEPRI
 8007920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007924:	f383 8811 	msr	BASEPRI, r3
 8007928:	f3bf 8f6f 	isb	sy
 800792c:	f3bf 8f4f 	dsb	sy
 8007930:	61fa      	str	r2, [r7, #28]
 8007932:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007934:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007936:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800793a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800793c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800793e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007940:	429a      	cmp	r2, r3
 8007942:	d302      	bcc.n	800794a <xQueueGenericSendFromISR+0xc2>
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	2b02      	cmp	r3, #2
 8007948:	d12f      	bne.n	80079aa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800794a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800794c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007950:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007958:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800795a:	683a      	ldr	r2, [r7, #0]
 800795c:	68b9      	ldr	r1, [r7, #8]
 800795e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007960:	f000 f936 	bl	8007bd0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007964:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007968:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800796c:	d112      	bne.n	8007994 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800796e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007972:	2b00      	cmp	r3, #0
 8007974:	d016      	beq.n	80079a4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007978:	3324      	adds	r3, #36	@ 0x24
 800797a:	4618      	mov	r0, r3
 800797c:	f000 ff52 	bl	8008824 <xTaskRemoveFromEventList>
 8007980:	4603      	mov	r3, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	d00e      	beq.n	80079a4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d00b      	beq.n	80079a4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2201      	movs	r2, #1
 8007990:	601a      	str	r2, [r3, #0]
 8007992:	e007      	b.n	80079a4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007994:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007998:	3301      	adds	r3, #1
 800799a:	b2db      	uxtb	r3, r3
 800799c:	b25a      	sxtb	r2, r3
 800799e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80079a4:	2301      	movs	r3, #1
 80079a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80079a8:	e001      	b.n	80079ae <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80079aa:	2300      	movs	r3, #0
 80079ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80079ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079b0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80079b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80079ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3740      	adds	r7, #64	@ 0x40
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b08c      	sub	sp, #48	@ 0x30
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80079d0:	2300      	movs	r3, #0
 80079d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80079d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d10b      	bne.n	80079f6 <xQueueReceive+0x32>
	__asm volatile
 80079de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079e2:	f383 8811 	msr	BASEPRI, r3
 80079e6:	f3bf 8f6f 	isb	sy
 80079ea:	f3bf 8f4f 	dsb	sy
 80079ee:	623b      	str	r3, [r7, #32]
}
 80079f0:	bf00      	nop
 80079f2:	bf00      	nop
 80079f4:	e7fd      	b.n	80079f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d103      	bne.n	8007a04 <xQueueReceive+0x40>
 80079fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d101      	bne.n	8007a08 <xQueueReceive+0x44>
 8007a04:	2301      	movs	r3, #1
 8007a06:	e000      	b.n	8007a0a <xQueueReceive+0x46>
 8007a08:	2300      	movs	r3, #0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d10b      	bne.n	8007a26 <xQueueReceive+0x62>
	__asm volatile
 8007a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a12:	f383 8811 	msr	BASEPRI, r3
 8007a16:	f3bf 8f6f 	isb	sy
 8007a1a:	f3bf 8f4f 	dsb	sy
 8007a1e:	61fb      	str	r3, [r7, #28]
}
 8007a20:	bf00      	nop
 8007a22:	bf00      	nop
 8007a24:	e7fd      	b.n	8007a22 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a26:	f001 f8c3 	bl	8008bb0 <xTaskGetSchedulerState>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d102      	bne.n	8007a36 <xQueueReceive+0x72>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d101      	bne.n	8007a3a <xQueueReceive+0x76>
 8007a36:	2301      	movs	r3, #1
 8007a38:	e000      	b.n	8007a3c <xQueueReceive+0x78>
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d10b      	bne.n	8007a58 <xQueueReceive+0x94>
	__asm volatile
 8007a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a44:	f383 8811 	msr	BASEPRI, r3
 8007a48:	f3bf 8f6f 	isb	sy
 8007a4c:	f3bf 8f4f 	dsb	sy
 8007a50:	61bb      	str	r3, [r7, #24]
}
 8007a52:	bf00      	nop
 8007a54:	bf00      	nop
 8007a56:	e7fd      	b.n	8007a54 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007a58:	f001 fe16 	bl	8009688 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a60:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d01f      	beq.n	8007aa8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007a68:	68b9      	ldr	r1, [r7, #8]
 8007a6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a6c:	f000 f91a 	bl	8007ca4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a72:	1e5a      	subs	r2, r3, #1
 8007a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a76:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d00f      	beq.n	8007aa0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a82:	3310      	adds	r3, #16
 8007a84:	4618      	mov	r0, r3
 8007a86:	f000 fecd 	bl	8008824 <xTaskRemoveFromEventList>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d007      	beq.n	8007aa0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007a90:	4b3c      	ldr	r3, [pc, #240]	@ (8007b84 <xQueueReceive+0x1c0>)
 8007a92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a96:	601a      	str	r2, [r3, #0]
 8007a98:	f3bf 8f4f 	dsb	sy
 8007a9c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007aa0:	f001 fe24 	bl	80096ec <vPortExitCritical>
				return pdPASS;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e069      	b.n	8007b7c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d103      	bne.n	8007ab6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007aae:	f001 fe1d 	bl	80096ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	e062      	b.n	8007b7c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d106      	bne.n	8007aca <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007abc:	f107 0310 	add.w	r3, r7, #16
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f000 ff13 	bl	80088ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007aca:	f001 fe0f 	bl	80096ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ace:	f000 fc7b 	bl	80083c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ad2:	f001 fdd9 	bl	8009688 <vPortEnterCritical>
 8007ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ad8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007adc:	b25b      	sxtb	r3, r3
 8007ade:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ae2:	d103      	bne.n	8007aec <xQueueReceive+0x128>
 8007ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007af2:	b25b      	sxtb	r3, r3
 8007af4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007af8:	d103      	bne.n	8007b02 <xQueueReceive+0x13e>
 8007afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007afc:	2200      	movs	r2, #0
 8007afe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b02:	f001 fdf3 	bl	80096ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b06:	1d3a      	adds	r2, r7, #4
 8007b08:	f107 0310 	add.w	r3, r7, #16
 8007b0c:	4611      	mov	r1, r2
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f000 ff02 	bl	8008918 <xTaskCheckForTimeOut>
 8007b14:	4603      	mov	r3, r0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d123      	bne.n	8007b62 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b1c:	f000 f93a 	bl	8007d94 <prvIsQueueEmpty>
 8007b20:	4603      	mov	r3, r0
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d017      	beq.n	8007b56 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b28:	3324      	adds	r3, #36	@ 0x24
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	4611      	mov	r1, r2
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f000 fe26 	bl	8008780 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007b34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b36:	f000 f8db 	bl	8007cf0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007b3a:	f000 fc53 	bl	80083e4 <xTaskResumeAll>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d189      	bne.n	8007a58 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007b44:	4b0f      	ldr	r3, [pc, #60]	@ (8007b84 <xQueueReceive+0x1c0>)
 8007b46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b4a:	601a      	str	r2, [r3, #0]
 8007b4c:	f3bf 8f4f 	dsb	sy
 8007b50:	f3bf 8f6f 	isb	sy
 8007b54:	e780      	b.n	8007a58 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007b56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b58:	f000 f8ca 	bl	8007cf0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b5c:	f000 fc42 	bl	80083e4 <xTaskResumeAll>
 8007b60:	e77a      	b.n	8007a58 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007b62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b64:	f000 f8c4 	bl	8007cf0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b68:	f000 fc3c 	bl	80083e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b6e:	f000 f911 	bl	8007d94 <prvIsQueueEmpty>
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	f43f af6f 	beq.w	8007a58 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007b7a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3730      	adds	r7, #48	@ 0x30
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}
 8007b84:	e000ed04 	.word	0xe000ed04

08007b88 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d10b      	bne.n	8007bb2 <vQueueDelete+0x2a>
	__asm volatile
 8007b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b9e:	f383 8811 	msr	BASEPRI, r3
 8007ba2:	f3bf 8f6f 	isb	sy
 8007ba6:	f3bf 8f4f 	dsb	sy
 8007baa:	60bb      	str	r3, [r7, #8]
}
 8007bac:	bf00      	nop
 8007bae:	bf00      	nop
 8007bb0:	e7fd      	b.n	8007bae <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f000 f946 	bl	8007e44 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d102      	bne.n	8007bc8 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8007bc2:	68f8      	ldr	r0, [r7, #12]
 8007bc4:	f001 ff50 	bl	8009a68 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007bc8:	bf00      	nop
 8007bca:	3710      	adds	r7, #16
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b086      	sub	sp, #24
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	60f8      	str	r0, [r7, #12]
 8007bd8:	60b9      	str	r1, [r7, #8]
 8007bda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007be4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d10d      	bne.n	8007c0a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d14d      	bne.n	8007c92 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f000 fff6 	bl	8008bec <xTaskPriorityDisinherit>
 8007c00:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2200      	movs	r2, #0
 8007c06:	609a      	str	r2, [r3, #8]
 8007c08:	e043      	b.n	8007c92 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d119      	bne.n	8007c44 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6858      	ldr	r0, [r3, #4]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c18:	461a      	mov	r2, r3
 8007c1a:	68b9      	ldr	r1, [r7, #8]
 8007c1c:	f002 f8c8 	bl	8009db0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	685a      	ldr	r2, [r3, #4]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c28:	441a      	add	r2, r3
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	685a      	ldr	r2, [r3, #4]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d32b      	bcc.n	8007c92 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	605a      	str	r2, [r3, #4]
 8007c42:	e026      	b.n	8007c92 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	68d8      	ldr	r0, [r3, #12]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	68b9      	ldr	r1, [r7, #8]
 8007c50:	f002 f8ae 	bl	8009db0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	68da      	ldr	r2, [r3, #12]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c5c:	425b      	negs	r3, r3
 8007c5e:	441a      	add	r2, r3
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	68da      	ldr	r2, [r3, #12]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d207      	bcs.n	8007c80 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	689a      	ldr	r2, [r3, #8]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c78:	425b      	negs	r3, r3
 8007c7a:	441a      	add	r2, r3
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2b02      	cmp	r3, #2
 8007c84:	d105      	bne.n	8007c92 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d002      	beq.n	8007c92 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	1c5a      	adds	r2, r3, #1
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007c9a:	697b      	ldr	r3, [r7, #20]
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3718      	adds	r7, #24
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d018      	beq.n	8007ce8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	68da      	ldr	r2, [r3, #12]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cbe:	441a      	add	r2, r3
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	68da      	ldr	r2, [r3, #12]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d303      	bcc.n	8007cd8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	68d9      	ldr	r1, [r3, #12]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	6838      	ldr	r0, [r7, #0]
 8007ce4:	f002 f864 	bl	8009db0 <memcpy>
	}
}
 8007ce8:	bf00      	nop
 8007cea:	3708      	adds	r7, #8
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007cf8:	f001 fcc6 	bl	8009688 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d02:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d04:	e011      	b.n	8007d2a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d012      	beq.n	8007d34 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	3324      	adds	r3, #36	@ 0x24
 8007d12:	4618      	mov	r0, r3
 8007d14:	f000 fd86 	bl	8008824 <xTaskRemoveFromEventList>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d001      	beq.n	8007d22 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007d1e:	f000 fe5f 	bl	80089e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007d22:	7bfb      	ldrb	r3, [r7, #15]
 8007d24:	3b01      	subs	r3, #1
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	dce9      	bgt.n	8007d06 <prvUnlockQueue+0x16>
 8007d32:	e000      	b.n	8007d36 <prvUnlockQueue+0x46>
					break;
 8007d34:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	22ff      	movs	r2, #255	@ 0xff
 8007d3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007d3e:	f001 fcd5 	bl	80096ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007d42:	f001 fca1 	bl	8009688 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d4c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d4e:	e011      	b.n	8007d74 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	691b      	ldr	r3, [r3, #16]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d012      	beq.n	8007d7e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	3310      	adds	r3, #16
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f000 fd61 	bl	8008824 <xTaskRemoveFromEventList>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d001      	beq.n	8007d6c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007d68:	f000 fe3a 	bl	80089e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007d6c:	7bbb      	ldrb	r3, [r7, #14]
 8007d6e:	3b01      	subs	r3, #1
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	dce9      	bgt.n	8007d50 <prvUnlockQueue+0x60>
 8007d7c:	e000      	b.n	8007d80 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007d7e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	22ff      	movs	r2, #255	@ 0xff
 8007d84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007d88:	f001 fcb0 	bl	80096ec <vPortExitCritical>
}
 8007d8c:	bf00      	nop
 8007d8e:	3710      	adds	r7, #16
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007d9c:	f001 fc74 	bl	8009688 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d102      	bne.n	8007dae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007da8:	2301      	movs	r3, #1
 8007daa:	60fb      	str	r3, [r7, #12]
 8007dac:	e001      	b.n	8007db2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007dae:	2300      	movs	r3, #0
 8007db0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007db2:	f001 fc9b 	bl	80096ec <vPortExitCritical>

	return xReturn;
 8007db6:	68fb      	ldr	r3, [r7, #12]
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3710      	adds	r7, #16
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007dc8:	f001 fc5e 	bl	8009688 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d102      	bne.n	8007dde <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	60fb      	str	r3, [r7, #12]
 8007ddc:	e001      	b.n	8007de2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007dde:	2300      	movs	r3, #0
 8007de0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007de2:	f001 fc83 	bl	80096ec <vPortExitCritical>

	return xReturn;
 8007de6:	68fb      	ldr	r3, [r7, #12]
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3710      	adds	r7, #16
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007df0:	b480      	push	{r7}
 8007df2:	b085      	sub	sp, #20
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	60fb      	str	r3, [r7, #12]
 8007dfe:	e014      	b.n	8007e2a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007e00:	4a0f      	ldr	r2, [pc, #60]	@ (8007e40 <vQueueAddToRegistry+0x50>)
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d10b      	bne.n	8007e24 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007e0c:	490c      	ldr	r1, [pc, #48]	@ (8007e40 <vQueueAddToRegistry+0x50>)
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	683a      	ldr	r2, [r7, #0]
 8007e12:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007e16:	4a0a      	ldr	r2, [pc, #40]	@ (8007e40 <vQueueAddToRegistry+0x50>)
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	00db      	lsls	r3, r3, #3
 8007e1c:	4413      	add	r3, r2
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007e22:	e006      	b.n	8007e32 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	3301      	adds	r3, #1
 8007e28:	60fb      	str	r3, [r7, #12]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2b07      	cmp	r3, #7
 8007e2e:	d9e7      	bls.n	8007e00 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007e30:	bf00      	nop
 8007e32:	bf00      	nop
 8007e34:	3714      	adds	r7, #20
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr
 8007e3e:	bf00      	nop
 8007e40:	200009f0 	.word	0x200009f0

08007e44 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007e44:	b480      	push	{r7}
 8007e46:	b085      	sub	sp, #20
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	60fb      	str	r3, [r7, #12]
 8007e50:	e016      	b.n	8007e80 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007e52:	4a10      	ldr	r2, [pc, #64]	@ (8007e94 <vQueueUnregisterQueue+0x50>)
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	00db      	lsls	r3, r3, #3
 8007e58:	4413      	add	r3, r2
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d10b      	bne.n	8007e7a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007e62:	4a0c      	ldr	r2, [pc, #48]	@ (8007e94 <vQueueUnregisterQueue+0x50>)
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2100      	movs	r1, #0
 8007e68:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007e6c:	4a09      	ldr	r2, [pc, #36]	@ (8007e94 <vQueueUnregisterQueue+0x50>)
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	00db      	lsls	r3, r3, #3
 8007e72:	4413      	add	r3, r2
 8007e74:	2200      	movs	r2, #0
 8007e76:	605a      	str	r2, [r3, #4]
				break;
 8007e78:	e006      	b.n	8007e88 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	3301      	adds	r3, #1
 8007e7e:	60fb      	str	r3, [r7, #12]
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2b07      	cmp	r3, #7
 8007e84:	d9e5      	bls.n	8007e52 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007e86:	bf00      	nop
 8007e88:	bf00      	nop
 8007e8a:	3714      	adds	r7, #20
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr
 8007e94:	200009f0 	.word	0x200009f0

08007e98 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b086      	sub	sp, #24
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	60b9      	str	r1, [r7, #8]
 8007ea2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007ea8:	f001 fbee 	bl	8009688 <vPortEnterCritical>
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007eb2:	b25b      	sxtb	r3, r3
 8007eb4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007eb8:	d103      	bne.n	8007ec2 <vQueueWaitForMessageRestricted+0x2a>
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ec8:	b25b      	sxtb	r3, r3
 8007eca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ece:	d103      	bne.n	8007ed8 <vQueueWaitForMessageRestricted+0x40>
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ed8:	f001 fc08 	bl	80096ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d106      	bne.n	8007ef2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	3324      	adds	r3, #36	@ 0x24
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	68b9      	ldr	r1, [r7, #8]
 8007eec:	4618      	mov	r0, r3
 8007eee:	f000 fc6d 	bl	80087cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007ef2:	6978      	ldr	r0, [r7, #20]
 8007ef4:	f7ff fefc 	bl	8007cf0 <prvUnlockQueue>
	}
 8007ef8:	bf00      	nop
 8007efa:	3718      	adds	r7, #24
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b08e      	sub	sp, #56	@ 0x38
 8007f04:	af04      	add	r7, sp, #16
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	607a      	str	r2, [r7, #4]
 8007f0c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007f0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d10b      	bne.n	8007f2c <xTaskCreateStatic+0x2c>
	__asm volatile
 8007f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f18:	f383 8811 	msr	BASEPRI, r3
 8007f1c:	f3bf 8f6f 	isb	sy
 8007f20:	f3bf 8f4f 	dsb	sy
 8007f24:	623b      	str	r3, [r7, #32]
}
 8007f26:	bf00      	nop
 8007f28:	bf00      	nop
 8007f2a:	e7fd      	b.n	8007f28 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d10b      	bne.n	8007f4a <xTaskCreateStatic+0x4a>
	__asm volatile
 8007f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f36:	f383 8811 	msr	BASEPRI, r3
 8007f3a:	f3bf 8f6f 	isb	sy
 8007f3e:	f3bf 8f4f 	dsb	sy
 8007f42:	61fb      	str	r3, [r7, #28]
}
 8007f44:	bf00      	nop
 8007f46:	bf00      	nop
 8007f48:	e7fd      	b.n	8007f46 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007f4a:	23a8      	movs	r3, #168	@ 0xa8
 8007f4c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	2ba8      	cmp	r3, #168	@ 0xa8
 8007f52:	d00b      	beq.n	8007f6c <xTaskCreateStatic+0x6c>
	__asm volatile
 8007f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f58:	f383 8811 	msr	BASEPRI, r3
 8007f5c:	f3bf 8f6f 	isb	sy
 8007f60:	f3bf 8f4f 	dsb	sy
 8007f64:	61bb      	str	r3, [r7, #24]
}
 8007f66:	bf00      	nop
 8007f68:	bf00      	nop
 8007f6a:	e7fd      	b.n	8007f68 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007f6c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d01e      	beq.n	8007fb2 <xTaskCreateStatic+0xb2>
 8007f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d01b      	beq.n	8007fb2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f7c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f80:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f82:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f86:	2202      	movs	r2, #2
 8007f88:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	9303      	str	r3, [sp, #12]
 8007f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f92:	9302      	str	r3, [sp, #8]
 8007f94:	f107 0314 	add.w	r3, r7, #20
 8007f98:	9301      	str	r3, [sp, #4]
 8007f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f9c:	9300      	str	r3, [sp, #0]
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	68b9      	ldr	r1, [r7, #8]
 8007fa4:	68f8      	ldr	r0, [r7, #12]
 8007fa6:	f000 f851 	bl	800804c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007faa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007fac:	f000 f8f6 	bl	800819c <prvAddNewTaskToReadyList>
 8007fb0:	e001      	b.n	8007fb6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007fb6:	697b      	ldr	r3, [r7, #20]
	}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3728      	adds	r7, #40	@ 0x28
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b08c      	sub	sp, #48	@ 0x30
 8007fc4:	af04      	add	r7, sp, #16
 8007fc6:	60f8      	str	r0, [r7, #12]
 8007fc8:	60b9      	str	r1, [r7, #8]
 8007fca:	603b      	str	r3, [r7, #0]
 8007fcc:	4613      	mov	r3, r2
 8007fce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007fd0:	88fb      	ldrh	r3, [r7, #6]
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f001 fc79 	bl	80098cc <pvPortMalloc>
 8007fda:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d00e      	beq.n	8008000 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007fe2:	20a8      	movs	r0, #168	@ 0xa8
 8007fe4:	f001 fc72 	bl	80098cc <pvPortMalloc>
 8007fe8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007fea:	69fb      	ldr	r3, [r7, #28]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d003      	beq.n	8007ff8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	697a      	ldr	r2, [r7, #20]
 8007ff4:	631a      	str	r2, [r3, #48]	@ 0x30
 8007ff6:	e005      	b.n	8008004 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007ff8:	6978      	ldr	r0, [r7, #20]
 8007ffa:	f001 fd35 	bl	8009a68 <vPortFree>
 8007ffe:	e001      	b.n	8008004 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008000:	2300      	movs	r3, #0
 8008002:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008004:	69fb      	ldr	r3, [r7, #28]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d017      	beq.n	800803a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800800a:	69fb      	ldr	r3, [r7, #28]
 800800c:	2200      	movs	r2, #0
 800800e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008012:	88fa      	ldrh	r2, [r7, #6]
 8008014:	2300      	movs	r3, #0
 8008016:	9303      	str	r3, [sp, #12]
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	9302      	str	r3, [sp, #8]
 800801c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800801e:	9301      	str	r3, [sp, #4]
 8008020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008022:	9300      	str	r3, [sp, #0]
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	68b9      	ldr	r1, [r7, #8]
 8008028:	68f8      	ldr	r0, [r7, #12]
 800802a:	f000 f80f 	bl	800804c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800802e:	69f8      	ldr	r0, [r7, #28]
 8008030:	f000 f8b4 	bl	800819c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008034:	2301      	movs	r3, #1
 8008036:	61bb      	str	r3, [r7, #24]
 8008038:	e002      	b.n	8008040 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800803a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800803e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008040:	69bb      	ldr	r3, [r7, #24]
	}
 8008042:	4618      	mov	r0, r3
 8008044:	3720      	adds	r7, #32
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
	...

0800804c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b088      	sub	sp, #32
 8008050:	af00      	add	r7, sp, #0
 8008052:	60f8      	str	r0, [r7, #12]
 8008054:	60b9      	str	r1, [r7, #8]
 8008056:	607a      	str	r2, [r7, #4]
 8008058:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800805a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800805c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	461a      	mov	r2, r3
 8008064:	21a5      	movs	r1, #165	@ 0xa5
 8008066:	f001 fe1f 	bl	8009ca8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800806a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800806c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008074:	3b01      	subs	r3, #1
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	4413      	add	r3, r2
 800807a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800807c:	69bb      	ldr	r3, [r7, #24]
 800807e:	f023 0307 	bic.w	r3, r3, #7
 8008082:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008084:	69bb      	ldr	r3, [r7, #24]
 8008086:	f003 0307 	and.w	r3, r3, #7
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00b      	beq.n	80080a6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800808e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008092:	f383 8811 	msr	BASEPRI, r3
 8008096:	f3bf 8f6f 	isb	sy
 800809a:	f3bf 8f4f 	dsb	sy
 800809e:	617b      	str	r3, [r7, #20]
}
 80080a0:	bf00      	nop
 80080a2:	bf00      	nop
 80080a4:	e7fd      	b.n	80080a2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d01f      	beq.n	80080ec <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080ac:	2300      	movs	r3, #0
 80080ae:	61fb      	str	r3, [r7, #28]
 80080b0:	e012      	b.n	80080d8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80080b2:	68ba      	ldr	r2, [r7, #8]
 80080b4:	69fb      	ldr	r3, [r7, #28]
 80080b6:	4413      	add	r3, r2
 80080b8:	7819      	ldrb	r1, [r3, #0]
 80080ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080bc:	69fb      	ldr	r3, [r7, #28]
 80080be:	4413      	add	r3, r2
 80080c0:	3334      	adds	r3, #52	@ 0x34
 80080c2:	460a      	mov	r2, r1
 80080c4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80080c6:	68ba      	ldr	r2, [r7, #8]
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	4413      	add	r3, r2
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d006      	beq.n	80080e0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	3301      	adds	r3, #1
 80080d6:	61fb      	str	r3, [r7, #28]
 80080d8:	69fb      	ldr	r3, [r7, #28]
 80080da:	2b0f      	cmp	r3, #15
 80080dc:	d9e9      	bls.n	80080b2 <prvInitialiseNewTask+0x66>
 80080de:	e000      	b.n	80080e2 <prvInitialiseNewTask+0x96>
			{
				break;
 80080e0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80080e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080e4:	2200      	movs	r2, #0
 80080e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80080ea:	e003      	b.n	80080f4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80080ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ee:	2200      	movs	r2, #0
 80080f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80080f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080f6:	2b37      	cmp	r3, #55	@ 0x37
 80080f8:	d901      	bls.n	80080fe <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80080fa:	2337      	movs	r3, #55	@ 0x37
 80080fc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80080fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008100:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008102:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008106:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008108:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800810a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800810c:	2200      	movs	r2, #0
 800810e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008112:	3304      	adds	r3, #4
 8008114:	4618      	mov	r0, r3
 8008116:	f7ff f86d 	bl	80071f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800811a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800811c:	3318      	adds	r3, #24
 800811e:	4618      	mov	r0, r3
 8008120:	f7ff f868 	bl	80071f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008126:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008128:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800812a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800812c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008132:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008136:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008138:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800813a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800813c:	2200      	movs	r2, #0
 800813e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008144:	2200      	movs	r2, #0
 8008146:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800814a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800814c:	3354      	adds	r3, #84	@ 0x54
 800814e:	224c      	movs	r2, #76	@ 0x4c
 8008150:	2100      	movs	r1, #0
 8008152:	4618      	mov	r0, r3
 8008154:	f001 fda8 	bl	8009ca8 <memset>
 8008158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800815a:	4a0d      	ldr	r2, [pc, #52]	@ (8008190 <prvInitialiseNewTask+0x144>)
 800815c:	659a      	str	r2, [r3, #88]	@ 0x58
 800815e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008160:	4a0c      	ldr	r2, [pc, #48]	@ (8008194 <prvInitialiseNewTask+0x148>)
 8008162:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008166:	4a0c      	ldr	r2, [pc, #48]	@ (8008198 <prvInitialiseNewTask+0x14c>)
 8008168:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800816a:	683a      	ldr	r2, [r7, #0]
 800816c:	68f9      	ldr	r1, [r7, #12]
 800816e:	69b8      	ldr	r0, [r7, #24]
 8008170:	f001 f95a 	bl	8009428 <pxPortInitialiseStack>
 8008174:	4602      	mov	r2, r0
 8008176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008178:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800817a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800817c:	2b00      	cmp	r3, #0
 800817e:	d002      	beq.n	8008186 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008182:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008184:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008186:	bf00      	nop
 8008188:	3720      	adds	r7, #32
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	20001c3c 	.word	0x20001c3c
 8008194:	20001ca4 	.word	0x20001ca4
 8008198:	20001d0c 	.word	0x20001d0c

0800819c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b082      	sub	sp, #8
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80081a4:	f001 fa70 	bl	8009688 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80081a8:	4b2d      	ldr	r3, [pc, #180]	@ (8008260 <prvAddNewTaskToReadyList+0xc4>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	3301      	adds	r3, #1
 80081ae:	4a2c      	ldr	r2, [pc, #176]	@ (8008260 <prvAddNewTaskToReadyList+0xc4>)
 80081b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80081b2:	4b2c      	ldr	r3, [pc, #176]	@ (8008264 <prvAddNewTaskToReadyList+0xc8>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d109      	bne.n	80081ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80081ba:	4a2a      	ldr	r2, [pc, #168]	@ (8008264 <prvAddNewTaskToReadyList+0xc8>)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80081c0:	4b27      	ldr	r3, [pc, #156]	@ (8008260 <prvAddNewTaskToReadyList+0xc4>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d110      	bne.n	80081ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80081c8:	f000 fc2e 	bl	8008a28 <prvInitialiseTaskLists>
 80081cc:	e00d      	b.n	80081ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80081ce:	4b26      	ldr	r3, [pc, #152]	@ (8008268 <prvAddNewTaskToReadyList+0xcc>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d109      	bne.n	80081ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80081d6:	4b23      	ldr	r3, [pc, #140]	@ (8008264 <prvAddNewTaskToReadyList+0xc8>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d802      	bhi.n	80081ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80081e4:	4a1f      	ldr	r2, [pc, #124]	@ (8008264 <prvAddNewTaskToReadyList+0xc8>)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80081ea:	4b20      	ldr	r3, [pc, #128]	@ (800826c <prvAddNewTaskToReadyList+0xd0>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	3301      	adds	r3, #1
 80081f0:	4a1e      	ldr	r2, [pc, #120]	@ (800826c <prvAddNewTaskToReadyList+0xd0>)
 80081f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80081f4:	4b1d      	ldr	r3, [pc, #116]	@ (800826c <prvAddNewTaskToReadyList+0xd0>)
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008200:	4b1b      	ldr	r3, [pc, #108]	@ (8008270 <prvAddNewTaskToReadyList+0xd4>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	429a      	cmp	r2, r3
 8008206:	d903      	bls.n	8008210 <prvAddNewTaskToReadyList+0x74>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800820c:	4a18      	ldr	r2, [pc, #96]	@ (8008270 <prvAddNewTaskToReadyList+0xd4>)
 800820e:	6013      	str	r3, [r2, #0]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008214:	4613      	mov	r3, r2
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	4413      	add	r3, r2
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	4a15      	ldr	r2, [pc, #84]	@ (8008274 <prvAddNewTaskToReadyList+0xd8>)
 800821e:	441a      	add	r2, r3
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	3304      	adds	r3, #4
 8008224:	4619      	mov	r1, r3
 8008226:	4610      	mov	r0, r2
 8008228:	f7fe fff1 	bl	800720e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800822c:	f001 fa5e 	bl	80096ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008230:	4b0d      	ldr	r3, [pc, #52]	@ (8008268 <prvAddNewTaskToReadyList+0xcc>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d00e      	beq.n	8008256 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008238:	4b0a      	ldr	r3, [pc, #40]	@ (8008264 <prvAddNewTaskToReadyList+0xc8>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008242:	429a      	cmp	r2, r3
 8008244:	d207      	bcs.n	8008256 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008246:	4b0c      	ldr	r3, [pc, #48]	@ (8008278 <prvAddNewTaskToReadyList+0xdc>)
 8008248:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800824c:	601a      	str	r2, [r3, #0]
 800824e:	f3bf 8f4f 	dsb	sy
 8008252:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008256:	bf00      	nop
 8008258:	3708      	adds	r7, #8
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	20000f04 	.word	0x20000f04
 8008264:	20000a30 	.word	0x20000a30
 8008268:	20000f10 	.word	0x20000f10
 800826c:	20000f20 	.word	0x20000f20
 8008270:	20000f0c 	.word	0x20000f0c
 8008274:	20000a34 	.word	0x20000a34
 8008278:	e000ed04 	.word	0xe000ed04

0800827c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008284:	2300      	movs	r3, #0
 8008286:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d018      	beq.n	80082c0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800828e:	4b14      	ldr	r3, [pc, #80]	@ (80082e0 <vTaskDelay+0x64>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d00b      	beq.n	80082ae <vTaskDelay+0x32>
	__asm volatile
 8008296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800829a:	f383 8811 	msr	BASEPRI, r3
 800829e:	f3bf 8f6f 	isb	sy
 80082a2:	f3bf 8f4f 	dsb	sy
 80082a6:	60bb      	str	r3, [r7, #8]
}
 80082a8:	bf00      	nop
 80082aa:	bf00      	nop
 80082ac:	e7fd      	b.n	80082aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80082ae:	f000 f88b 	bl	80083c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80082b2:	2100      	movs	r1, #0
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 fd09 	bl	8008ccc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80082ba:	f000 f893 	bl	80083e4 <xTaskResumeAll>
 80082be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d107      	bne.n	80082d6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80082c6:	4b07      	ldr	r3, [pc, #28]	@ (80082e4 <vTaskDelay+0x68>)
 80082c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082cc:	601a      	str	r2, [r3, #0]
 80082ce:	f3bf 8f4f 	dsb	sy
 80082d2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80082d6:	bf00      	nop
 80082d8:	3710      	adds	r7, #16
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
 80082de:	bf00      	nop
 80082e0:	20000f2c 	.word	0x20000f2c
 80082e4:	e000ed04 	.word	0xe000ed04

080082e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b08a      	sub	sp, #40	@ 0x28
 80082ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80082ee:	2300      	movs	r3, #0
 80082f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80082f2:	2300      	movs	r3, #0
 80082f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80082f6:	463a      	mov	r2, r7
 80082f8:	1d39      	adds	r1, r7, #4
 80082fa:	f107 0308 	add.w	r3, r7, #8
 80082fe:	4618      	mov	r0, r3
 8008300:	f7fe ff24 	bl	800714c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008304:	6839      	ldr	r1, [r7, #0]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	68ba      	ldr	r2, [r7, #8]
 800830a:	9202      	str	r2, [sp, #8]
 800830c:	9301      	str	r3, [sp, #4]
 800830e:	2300      	movs	r3, #0
 8008310:	9300      	str	r3, [sp, #0]
 8008312:	2300      	movs	r3, #0
 8008314:	460a      	mov	r2, r1
 8008316:	4924      	ldr	r1, [pc, #144]	@ (80083a8 <vTaskStartScheduler+0xc0>)
 8008318:	4824      	ldr	r0, [pc, #144]	@ (80083ac <vTaskStartScheduler+0xc4>)
 800831a:	f7ff fdf1 	bl	8007f00 <xTaskCreateStatic>
 800831e:	4603      	mov	r3, r0
 8008320:	4a23      	ldr	r2, [pc, #140]	@ (80083b0 <vTaskStartScheduler+0xc8>)
 8008322:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008324:	4b22      	ldr	r3, [pc, #136]	@ (80083b0 <vTaskStartScheduler+0xc8>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d002      	beq.n	8008332 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800832c:	2301      	movs	r3, #1
 800832e:	617b      	str	r3, [r7, #20]
 8008330:	e001      	b.n	8008336 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008332:	2300      	movs	r3, #0
 8008334:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	2b01      	cmp	r3, #1
 800833a:	d102      	bne.n	8008342 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800833c:	f000 fd1a 	bl	8008d74 <xTimerCreateTimerTask>
 8008340:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	2b01      	cmp	r3, #1
 8008346:	d11b      	bne.n	8008380 <vTaskStartScheduler+0x98>
	__asm volatile
 8008348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800834c:	f383 8811 	msr	BASEPRI, r3
 8008350:	f3bf 8f6f 	isb	sy
 8008354:	f3bf 8f4f 	dsb	sy
 8008358:	613b      	str	r3, [r7, #16]
}
 800835a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800835c:	4b15      	ldr	r3, [pc, #84]	@ (80083b4 <vTaskStartScheduler+0xcc>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	3354      	adds	r3, #84	@ 0x54
 8008362:	4a15      	ldr	r2, [pc, #84]	@ (80083b8 <vTaskStartScheduler+0xd0>)
 8008364:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008366:	4b15      	ldr	r3, [pc, #84]	@ (80083bc <vTaskStartScheduler+0xd4>)
 8008368:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800836c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800836e:	4b14      	ldr	r3, [pc, #80]	@ (80083c0 <vTaskStartScheduler+0xd8>)
 8008370:	2201      	movs	r2, #1
 8008372:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008374:	4b13      	ldr	r3, [pc, #76]	@ (80083c4 <vTaskStartScheduler+0xdc>)
 8008376:	2200      	movs	r2, #0
 8008378:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800837a:	f001 f8e1 	bl	8009540 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800837e:	e00f      	b.n	80083a0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008386:	d10b      	bne.n	80083a0 <vTaskStartScheduler+0xb8>
	__asm volatile
 8008388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800838c:	f383 8811 	msr	BASEPRI, r3
 8008390:	f3bf 8f6f 	isb	sy
 8008394:	f3bf 8f4f 	dsb	sy
 8008398:	60fb      	str	r3, [r7, #12]
}
 800839a:	bf00      	nop
 800839c:	bf00      	nop
 800839e:	e7fd      	b.n	800839c <vTaskStartScheduler+0xb4>
}
 80083a0:	bf00      	nop
 80083a2:	3718      	adds	r7, #24
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	08009ed8 	.word	0x08009ed8
 80083ac:	080089f9 	.word	0x080089f9
 80083b0:	20000f28 	.word	0x20000f28
 80083b4:	20000a30 	.word	0x20000a30
 80083b8:	20000010 	.word	0x20000010
 80083bc:	20000f24 	.word	0x20000f24
 80083c0:	20000f10 	.word	0x20000f10
 80083c4:	20000f08 	.word	0x20000f08

080083c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80083c8:	b480      	push	{r7}
 80083ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80083cc:	4b04      	ldr	r3, [pc, #16]	@ (80083e0 <vTaskSuspendAll+0x18>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	3301      	adds	r3, #1
 80083d2:	4a03      	ldr	r2, [pc, #12]	@ (80083e0 <vTaskSuspendAll+0x18>)
 80083d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80083d6:	bf00      	nop
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr
 80083e0:	20000f2c 	.word	0x20000f2c

080083e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80083ea:	2300      	movs	r3, #0
 80083ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80083ee:	2300      	movs	r3, #0
 80083f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80083f2:	4b42      	ldr	r3, [pc, #264]	@ (80084fc <xTaskResumeAll+0x118>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d10b      	bne.n	8008412 <xTaskResumeAll+0x2e>
	__asm volatile
 80083fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083fe:	f383 8811 	msr	BASEPRI, r3
 8008402:	f3bf 8f6f 	isb	sy
 8008406:	f3bf 8f4f 	dsb	sy
 800840a:	603b      	str	r3, [r7, #0]
}
 800840c:	bf00      	nop
 800840e:	bf00      	nop
 8008410:	e7fd      	b.n	800840e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008412:	f001 f939 	bl	8009688 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008416:	4b39      	ldr	r3, [pc, #228]	@ (80084fc <xTaskResumeAll+0x118>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	3b01      	subs	r3, #1
 800841c:	4a37      	ldr	r2, [pc, #220]	@ (80084fc <xTaskResumeAll+0x118>)
 800841e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008420:	4b36      	ldr	r3, [pc, #216]	@ (80084fc <xTaskResumeAll+0x118>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d162      	bne.n	80084ee <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008428:	4b35      	ldr	r3, [pc, #212]	@ (8008500 <xTaskResumeAll+0x11c>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d05e      	beq.n	80084ee <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008430:	e02f      	b.n	8008492 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008432:	4b34      	ldr	r3, [pc, #208]	@ (8008504 <xTaskResumeAll+0x120>)
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	3318      	adds	r3, #24
 800843e:	4618      	mov	r0, r3
 8008440:	f7fe ff42 	bl	80072c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	3304      	adds	r3, #4
 8008448:	4618      	mov	r0, r3
 800844a:	f7fe ff3d 	bl	80072c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008452:	4b2d      	ldr	r3, [pc, #180]	@ (8008508 <xTaskResumeAll+0x124>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	429a      	cmp	r2, r3
 8008458:	d903      	bls.n	8008462 <xTaskResumeAll+0x7e>
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800845e:	4a2a      	ldr	r2, [pc, #168]	@ (8008508 <xTaskResumeAll+0x124>)
 8008460:	6013      	str	r3, [r2, #0]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008466:	4613      	mov	r3, r2
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	4413      	add	r3, r2
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	4a27      	ldr	r2, [pc, #156]	@ (800850c <xTaskResumeAll+0x128>)
 8008470:	441a      	add	r2, r3
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	3304      	adds	r3, #4
 8008476:	4619      	mov	r1, r3
 8008478:	4610      	mov	r0, r2
 800847a:	f7fe fec8 	bl	800720e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008482:	4b23      	ldr	r3, [pc, #140]	@ (8008510 <xTaskResumeAll+0x12c>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008488:	429a      	cmp	r2, r3
 800848a:	d302      	bcc.n	8008492 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800848c:	4b21      	ldr	r3, [pc, #132]	@ (8008514 <xTaskResumeAll+0x130>)
 800848e:	2201      	movs	r2, #1
 8008490:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008492:	4b1c      	ldr	r3, [pc, #112]	@ (8008504 <xTaskResumeAll+0x120>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d1cb      	bne.n	8008432 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d001      	beq.n	80084a4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80084a0:	f000 fb66 	bl	8008b70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80084a4:	4b1c      	ldr	r3, [pc, #112]	@ (8008518 <xTaskResumeAll+0x134>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d010      	beq.n	80084d2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80084b0:	f000 f846 	bl	8008540 <xTaskIncrementTick>
 80084b4:	4603      	mov	r3, r0
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d002      	beq.n	80084c0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80084ba:	4b16      	ldr	r3, [pc, #88]	@ (8008514 <xTaskResumeAll+0x130>)
 80084bc:	2201      	movs	r2, #1
 80084be:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	3b01      	subs	r3, #1
 80084c4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d1f1      	bne.n	80084b0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80084cc:	4b12      	ldr	r3, [pc, #72]	@ (8008518 <xTaskResumeAll+0x134>)
 80084ce:	2200      	movs	r2, #0
 80084d0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80084d2:	4b10      	ldr	r3, [pc, #64]	@ (8008514 <xTaskResumeAll+0x130>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d009      	beq.n	80084ee <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80084da:	2301      	movs	r3, #1
 80084dc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80084de:	4b0f      	ldr	r3, [pc, #60]	@ (800851c <xTaskResumeAll+0x138>)
 80084e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084e4:	601a      	str	r2, [r3, #0]
 80084e6:	f3bf 8f4f 	dsb	sy
 80084ea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80084ee:	f001 f8fd 	bl	80096ec <vPortExitCritical>

	return xAlreadyYielded;
 80084f2:	68bb      	ldr	r3, [r7, #8]
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3710      	adds	r7, #16
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}
 80084fc:	20000f2c 	.word	0x20000f2c
 8008500:	20000f04 	.word	0x20000f04
 8008504:	20000ec4 	.word	0x20000ec4
 8008508:	20000f0c 	.word	0x20000f0c
 800850c:	20000a34 	.word	0x20000a34
 8008510:	20000a30 	.word	0x20000a30
 8008514:	20000f18 	.word	0x20000f18
 8008518:	20000f14 	.word	0x20000f14
 800851c:	e000ed04 	.word	0xe000ed04

08008520 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008526:	4b05      	ldr	r3, [pc, #20]	@ (800853c <xTaskGetTickCount+0x1c>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800852c:	687b      	ldr	r3, [r7, #4]
}
 800852e:	4618      	mov	r0, r3
 8008530:	370c      	adds	r7, #12
 8008532:	46bd      	mov	sp, r7
 8008534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008538:	4770      	bx	lr
 800853a:	bf00      	nop
 800853c:	20000f08 	.word	0x20000f08

08008540 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b086      	sub	sp, #24
 8008544:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008546:	2300      	movs	r3, #0
 8008548:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800854a:	4b4f      	ldr	r3, [pc, #316]	@ (8008688 <xTaskIncrementTick+0x148>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	2b00      	cmp	r3, #0
 8008550:	f040 8090 	bne.w	8008674 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008554:	4b4d      	ldr	r3, [pc, #308]	@ (800868c <xTaskIncrementTick+0x14c>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	3301      	adds	r3, #1
 800855a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800855c:	4a4b      	ldr	r2, [pc, #300]	@ (800868c <xTaskIncrementTick+0x14c>)
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d121      	bne.n	80085ac <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008568:	4b49      	ldr	r3, [pc, #292]	@ (8008690 <xTaskIncrementTick+0x150>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d00b      	beq.n	800858a <xTaskIncrementTick+0x4a>
	__asm volatile
 8008572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008576:	f383 8811 	msr	BASEPRI, r3
 800857a:	f3bf 8f6f 	isb	sy
 800857e:	f3bf 8f4f 	dsb	sy
 8008582:	603b      	str	r3, [r7, #0]
}
 8008584:	bf00      	nop
 8008586:	bf00      	nop
 8008588:	e7fd      	b.n	8008586 <xTaskIncrementTick+0x46>
 800858a:	4b41      	ldr	r3, [pc, #260]	@ (8008690 <xTaskIncrementTick+0x150>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	60fb      	str	r3, [r7, #12]
 8008590:	4b40      	ldr	r3, [pc, #256]	@ (8008694 <xTaskIncrementTick+0x154>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a3e      	ldr	r2, [pc, #248]	@ (8008690 <xTaskIncrementTick+0x150>)
 8008596:	6013      	str	r3, [r2, #0]
 8008598:	4a3e      	ldr	r2, [pc, #248]	@ (8008694 <xTaskIncrementTick+0x154>)
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	6013      	str	r3, [r2, #0]
 800859e:	4b3e      	ldr	r3, [pc, #248]	@ (8008698 <xTaskIncrementTick+0x158>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	3301      	adds	r3, #1
 80085a4:	4a3c      	ldr	r2, [pc, #240]	@ (8008698 <xTaskIncrementTick+0x158>)
 80085a6:	6013      	str	r3, [r2, #0]
 80085a8:	f000 fae2 	bl	8008b70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80085ac:	4b3b      	ldr	r3, [pc, #236]	@ (800869c <xTaskIncrementTick+0x15c>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	693a      	ldr	r2, [r7, #16]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d349      	bcc.n	800864a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085b6:	4b36      	ldr	r3, [pc, #216]	@ (8008690 <xTaskIncrementTick+0x150>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d104      	bne.n	80085ca <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085c0:	4b36      	ldr	r3, [pc, #216]	@ (800869c <xTaskIncrementTick+0x15c>)
 80085c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80085c6:	601a      	str	r2, [r3, #0]
					break;
 80085c8:	e03f      	b.n	800864a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085ca:	4b31      	ldr	r3, [pc, #196]	@ (8008690 <xTaskIncrementTick+0x150>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	68db      	ldr	r3, [r3, #12]
 80085d0:	68db      	ldr	r3, [r3, #12]
 80085d2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80085da:	693a      	ldr	r2, [r7, #16]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	429a      	cmp	r2, r3
 80085e0:	d203      	bcs.n	80085ea <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80085e2:	4a2e      	ldr	r2, [pc, #184]	@ (800869c <xTaskIncrementTick+0x15c>)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80085e8:	e02f      	b.n	800864a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	3304      	adds	r3, #4
 80085ee:	4618      	mov	r0, r3
 80085f0:	f7fe fe6a 	bl	80072c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d004      	beq.n	8008606 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	3318      	adds	r3, #24
 8008600:	4618      	mov	r0, r3
 8008602:	f7fe fe61 	bl	80072c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800860a:	4b25      	ldr	r3, [pc, #148]	@ (80086a0 <xTaskIncrementTick+0x160>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	429a      	cmp	r2, r3
 8008610:	d903      	bls.n	800861a <xTaskIncrementTick+0xda>
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008616:	4a22      	ldr	r2, [pc, #136]	@ (80086a0 <xTaskIncrementTick+0x160>)
 8008618:	6013      	str	r3, [r2, #0]
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800861e:	4613      	mov	r3, r2
 8008620:	009b      	lsls	r3, r3, #2
 8008622:	4413      	add	r3, r2
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	4a1f      	ldr	r2, [pc, #124]	@ (80086a4 <xTaskIncrementTick+0x164>)
 8008628:	441a      	add	r2, r3
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	3304      	adds	r3, #4
 800862e:	4619      	mov	r1, r3
 8008630:	4610      	mov	r0, r2
 8008632:	f7fe fdec 	bl	800720e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800863a:	4b1b      	ldr	r3, [pc, #108]	@ (80086a8 <xTaskIncrementTick+0x168>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008640:	429a      	cmp	r2, r3
 8008642:	d3b8      	bcc.n	80085b6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008644:	2301      	movs	r3, #1
 8008646:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008648:	e7b5      	b.n	80085b6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800864a:	4b17      	ldr	r3, [pc, #92]	@ (80086a8 <xTaskIncrementTick+0x168>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008650:	4914      	ldr	r1, [pc, #80]	@ (80086a4 <xTaskIncrementTick+0x164>)
 8008652:	4613      	mov	r3, r2
 8008654:	009b      	lsls	r3, r3, #2
 8008656:	4413      	add	r3, r2
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	440b      	add	r3, r1
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	2b01      	cmp	r3, #1
 8008660:	d901      	bls.n	8008666 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008662:	2301      	movs	r3, #1
 8008664:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008666:	4b11      	ldr	r3, [pc, #68]	@ (80086ac <xTaskIncrementTick+0x16c>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d007      	beq.n	800867e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800866e:	2301      	movs	r3, #1
 8008670:	617b      	str	r3, [r7, #20]
 8008672:	e004      	b.n	800867e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008674:	4b0e      	ldr	r3, [pc, #56]	@ (80086b0 <xTaskIncrementTick+0x170>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	3301      	adds	r3, #1
 800867a:	4a0d      	ldr	r2, [pc, #52]	@ (80086b0 <xTaskIncrementTick+0x170>)
 800867c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800867e:	697b      	ldr	r3, [r7, #20]
}
 8008680:	4618      	mov	r0, r3
 8008682:	3718      	adds	r7, #24
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}
 8008688:	20000f2c 	.word	0x20000f2c
 800868c:	20000f08 	.word	0x20000f08
 8008690:	20000ebc 	.word	0x20000ebc
 8008694:	20000ec0 	.word	0x20000ec0
 8008698:	20000f1c 	.word	0x20000f1c
 800869c:	20000f24 	.word	0x20000f24
 80086a0:	20000f0c 	.word	0x20000f0c
 80086a4:	20000a34 	.word	0x20000a34
 80086a8:	20000a30 	.word	0x20000a30
 80086ac:	20000f18 	.word	0x20000f18
 80086b0:	20000f14 	.word	0x20000f14

080086b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80086b4:	b480      	push	{r7}
 80086b6:	b085      	sub	sp, #20
 80086b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80086ba:	4b2b      	ldr	r3, [pc, #172]	@ (8008768 <vTaskSwitchContext+0xb4>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d003      	beq.n	80086ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80086c2:	4b2a      	ldr	r3, [pc, #168]	@ (800876c <vTaskSwitchContext+0xb8>)
 80086c4:	2201      	movs	r2, #1
 80086c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80086c8:	e047      	b.n	800875a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80086ca:	4b28      	ldr	r3, [pc, #160]	@ (800876c <vTaskSwitchContext+0xb8>)
 80086cc:	2200      	movs	r2, #0
 80086ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086d0:	4b27      	ldr	r3, [pc, #156]	@ (8008770 <vTaskSwitchContext+0xbc>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	60fb      	str	r3, [r7, #12]
 80086d6:	e011      	b.n	80086fc <vTaskSwitchContext+0x48>
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d10b      	bne.n	80086f6 <vTaskSwitchContext+0x42>
	__asm volatile
 80086de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086e2:	f383 8811 	msr	BASEPRI, r3
 80086e6:	f3bf 8f6f 	isb	sy
 80086ea:	f3bf 8f4f 	dsb	sy
 80086ee:	607b      	str	r3, [r7, #4]
}
 80086f0:	bf00      	nop
 80086f2:	bf00      	nop
 80086f4:	e7fd      	b.n	80086f2 <vTaskSwitchContext+0x3e>
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	3b01      	subs	r3, #1
 80086fa:	60fb      	str	r3, [r7, #12]
 80086fc:	491d      	ldr	r1, [pc, #116]	@ (8008774 <vTaskSwitchContext+0xc0>)
 80086fe:	68fa      	ldr	r2, [r7, #12]
 8008700:	4613      	mov	r3, r2
 8008702:	009b      	lsls	r3, r3, #2
 8008704:	4413      	add	r3, r2
 8008706:	009b      	lsls	r3, r3, #2
 8008708:	440b      	add	r3, r1
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d0e3      	beq.n	80086d8 <vTaskSwitchContext+0x24>
 8008710:	68fa      	ldr	r2, [r7, #12]
 8008712:	4613      	mov	r3, r2
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	4413      	add	r3, r2
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	4a16      	ldr	r2, [pc, #88]	@ (8008774 <vTaskSwitchContext+0xc0>)
 800871c:	4413      	add	r3, r2
 800871e:	60bb      	str	r3, [r7, #8]
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	685a      	ldr	r2, [r3, #4]
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	605a      	str	r2, [r3, #4]
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	685a      	ldr	r2, [r3, #4]
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	3308      	adds	r3, #8
 8008732:	429a      	cmp	r2, r3
 8008734:	d104      	bne.n	8008740 <vTaskSwitchContext+0x8c>
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	685a      	ldr	r2, [r3, #4]
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	605a      	str	r2, [r3, #4]
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	68db      	ldr	r3, [r3, #12]
 8008746:	4a0c      	ldr	r2, [pc, #48]	@ (8008778 <vTaskSwitchContext+0xc4>)
 8008748:	6013      	str	r3, [r2, #0]
 800874a:	4a09      	ldr	r2, [pc, #36]	@ (8008770 <vTaskSwitchContext+0xbc>)
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008750:	4b09      	ldr	r3, [pc, #36]	@ (8008778 <vTaskSwitchContext+0xc4>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	3354      	adds	r3, #84	@ 0x54
 8008756:	4a09      	ldr	r2, [pc, #36]	@ (800877c <vTaskSwitchContext+0xc8>)
 8008758:	6013      	str	r3, [r2, #0]
}
 800875a:	bf00      	nop
 800875c:	3714      	adds	r7, #20
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr
 8008766:	bf00      	nop
 8008768:	20000f2c 	.word	0x20000f2c
 800876c:	20000f18 	.word	0x20000f18
 8008770:	20000f0c 	.word	0x20000f0c
 8008774:	20000a34 	.word	0x20000a34
 8008778:	20000a30 	.word	0x20000a30
 800877c:	20000010 	.word	0x20000010

08008780 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d10b      	bne.n	80087a8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008794:	f383 8811 	msr	BASEPRI, r3
 8008798:	f3bf 8f6f 	isb	sy
 800879c:	f3bf 8f4f 	dsb	sy
 80087a0:	60fb      	str	r3, [r7, #12]
}
 80087a2:	bf00      	nop
 80087a4:	bf00      	nop
 80087a6:	e7fd      	b.n	80087a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80087a8:	4b07      	ldr	r3, [pc, #28]	@ (80087c8 <vTaskPlaceOnEventList+0x48>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	3318      	adds	r3, #24
 80087ae:	4619      	mov	r1, r3
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f7fe fd50 	bl	8007256 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80087b6:	2101      	movs	r1, #1
 80087b8:	6838      	ldr	r0, [r7, #0]
 80087ba:	f000 fa87 	bl	8008ccc <prvAddCurrentTaskToDelayedList>
}
 80087be:	bf00      	nop
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	20000a30 	.word	0x20000a30

080087cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b086      	sub	sp, #24
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d10b      	bne.n	80087f6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80087de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087e2:	f383 8811 	msr	BASEPRI, r3
 80087e6:	f3bf 8f6f 	isb	sy
 80087ea:	f3bf 8f4f 	dsb	sy
 80087ee:	617b      	str	r3, [r7, #20]
}
 80087f0:	bf00      	nop
 80087f2:	bf00      	nop
 80087f4:	e7fd      	b.n	80087f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80087f6:	4b0a      	ldr	r3, [pc, #40]	@ (8008820 <vTaskPlaceOnEventListRestricted+0x54>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	3318      	adds	r3, #24
 80087fc:	4619      	mov	r1, r3
 80087fe:	68f8      	ldr	r0, [r7, #12]
 8008800:	f7fe fd05 	bl	800720e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d002      	beq.n	8008810 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800880a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800880e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008810:	6879      	ldr	r1, [r7, #4]
 8008812:	68b8      	ldr	r0, [r7, #8]
 8008814:	f000 fa5a 	bl	8008ccc <prvAddCurrentTaskToDelayedList>
	}
 8008818:	bf00      	nop
 800881a:	3718      	adds	r7, #24
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}
 8008820:	20000a30 	.word	0x20000a30

08008824 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b086      	sub	sp, #24
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	68db      	ldr	r3, [r3, #12]
 8008832:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d10b      	bne.n	8008852 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800883a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800883e:	f383 8811 	msr	BASEPRI, r3
 8008842:	f3bf 8f6f 	isb	sy
 8008846:	f3bf 8f4f 	dsb	sy
 800884a:	60fb      	str	r3, [r7, #12]
}
 800884c:	bf00      	nop
 800884e:	bf00      	nop
 8008850:	e7fd      	b.n	800884e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	3318      	adds	r3, #24
 8008856:	4618      	mov	r0, r3
 8008858:	f7fe fd36 	bl	80072c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800885c:	4b1d      	ldr	r3, [pc, #116]	@ (80088d4 <xTaskRemoveFromEventList+0xb0>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d11d      	bne.n	80088a0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	3304      	adds	r3, #4
 8008868:	4618      	mov	r0, r3
 800886a:	f7fe fd2d 	bl	80072c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008872:	4b19      	ldr	r3, [pc, #100]	@ (80088d8 <xTaskRemoveFromEventList+0xb4>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	429a      	cmp	r2, r3
 8008878:	d903      	bls.n	8008882 <xTaskRemoveFromEventList+0x5e>
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800887e:	4a16      	ldr	r2, [pc, #88]	@ (80088d8 <xTaskRemoveFromEventList+0xb4>)
 8008880:	6013      	str	r3, [r2, #0]
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008886:	4613      	mov	r3, r2
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	4413      	add	r3, r2
 800888c:	009b      	lsls	r3, r3, #2
 800888e:	4a13      	ldr	r2, [pc, #76]	@ (80088dc <xTaskRemoveFromEventList+0xb8>)
 8008890:	441a      	add	r2, r3
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	3304      	adds	r3, #4
 8008896:	4619      	mov	r1, r3
 8008898:	4610      	mov	r0, r2
 800889a:	f7fe fcb8 	bl	800720e <vListInsertEnd>
 800889e:	e005      	b.n	80088ac <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	3318      	adds	r3, #24
 80088a4:	4619      	mov	r1, r3
 80088a6:	480e      	ldr	r0, [pc, #56]	@ (80088e0 <xTaskRemoveFromEventList+0xbc>)
 80088a8:	f7fe fcb1 	bl	800720e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088b0:	4b0c      	ldr	r3, [pc, #48]	@ (80088e4 <xTaskRemoveFromEventList+0xc0>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d905      	bls.n	80088c6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80088ba:	2301      	movs	r3, #1
 80088bc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80088be:	4b0a      	ldr	r3, [pc, #40]	@ (80088e8 <xTaskRemoveFromEventList+0xc4>)
 80088c0:	2201      	movs	r2, #1
 80088c2:	601a      	str	r2, [r3, #0]
 80088c4:	e001      	b.n	80088ca <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80088c6:	2300      	movs	r3, #0
 80088c8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80088ca:	697b      	ldr	r3, [r7, #20]
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3718      	adds	r7, #24
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}
 80088d4:	20000f2c 	.word	0x20000f2c
 80088d8:	20000f0c 	.word	0x20000f0c
 80088dc:	20000a34 	.word	0x20000a34
 80088e0:	20000ec4 	.word	0x20000ec4
 80088e4:	20000a30 	.word	0x20000a30
 80088e8:	20000f18 	.word	0x20000f18

080088ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80088ec:	b480      	push	{r7}
 80088ee:	b083      	sub	sp, #12
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80088f4:	4b06      	ldr	r3, [pc, #24]	@ (8008910 <vTaskInternalSetTimeOutState+0x24>)
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80088fc:	4b05      	ldr	r3, [pc, #20]	@ (8008914 <vTaskInternalSetTimeOutState+0x28>)
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	605a      	str	r2, [r3, #4]
}
 8008904:	bf00      	nop
 8008906:	370c      	adds	r7, #12
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr
 8008910:	20000f1c 	.word	0x20000f1c
 8008914:	20000f08 	.word	0x20000f08

08008918 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b088      	sub	sp, #32
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d10b      	bne.n	8008940 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800892c:	f383 8811 	msr	BASEPRI, r3
 8008930:	f3bf 8f6f 	isb	sy
 8008934:	f3bf 8f4f 	dsb	sy
 8008938:	613b      	str	r3, [r7, #16]
}
 800893a:	bf00      	nop
 800893c:	bf00      	nop
 800893e:	e7fd      	b.n	800893c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d10b      	bne.n	800895e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800894a:	f383 8811 	msr	BASEPRI, r3
 800894e:	f3bf 8f6f 	isb	sy
 8008952:	f3bf 8f4f 	dsb	sy
 8008956:	60fb      	str	r3, [r7, #12]
}
 8008958:	bf00      	nop
 800895a:	bf00      	nop
 800895c:	e7fd      	b.n	800895a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800895e:	f000 fe93 	bl	8009688 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008962:	4b1d      	ldr	r3, [pc, #116]	@ (80089d8 <xTaskCheckForTimeOut+0xc0>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	69ba      	ldr	r2, [r7, #24]
 800896e:	1ad3      	subs	r3, r2, r3
 8008970:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800897a:	d102      	bne.n	8008982 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800897c:	2300      	movs	r3, #0
 800897e:	61fb      	str	r3, [r7, #28]
 8008980:	e023      	b.n	80089ca <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	4b15      	ldr	r3, [pc, #84]	@ (80089dc <xTaskCheckForTimeOut+0xc4>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	429a      	cmp	r2, r3
 800898c:	d007      	beq.n	800899e <xTaskCheckForTimeOut+0x86>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	69ba      	ldr	r2, [r7, #24]
 8008994:	429a      	cmp	r2, r3
 8008996:	d302      	bcc.n	800899e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008998:	2301      	movs	r3, #1
 800899a:	61fb      	str	r3, [r7, #28]
 800899c:	e015      	b.n	80089ca <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	697a      	ldr	r2, [r7, #20]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d20b      	bcs.n	80089c0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	1ad2      	subs	r2, r2, r3
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f7ff ff99 	bl	80088ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80089ba:	2300      	movs	r3, #0
 80089bc:	61fb      	str	r3, [r7, #28]
 80089be:	e004      	b.n	80089ca <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	2200      	movs	r2, #0
 80089c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80089c6:	2301      	movs	r3, #1
 80089c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80089ca:	f000 fe8f 	bl	80096ec <vPortExitCritical>

	return xReturn;
 80089ce:	69fb      	ldr	r3, [r7, #28]
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3720      	adds	r7, #32
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}
 80089d8:	20000f08 	.word	0x20000f08
 80089dc:	20000f1c 	.word	0x20000f1c

080089e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80089e0:	b480      	push	{r7}
 80089e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80089e4:	4b03      	ldr	r3, [pc, #12]	@ (80089f4 <vTaskMissedYield+0x14>)
 80089e6:	2201      	movs	r2, #1
 80089e8:	601a      	str	r2, [r3, #0]
}
 80089ea:	bf00      	nop
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr
 80089f4:	20000f18 	.word	0x20000f18

080089f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008a00:	f000 f852 	bl	8008aa8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008a04:	4b06      	ldr	r3, [pc, #24]	@ (8008a20 <prvIdleTask+0x28>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d9f9      	bls.n	8008a00 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008a0c:	4b05      	ldr	r3, [pc, #20]	@ (8008a24 <prvIdleTask+0x2c>)
 8008a0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a12:	601a      	str	r2, [r3, #0]
 8008a14:	f3bf 8f4f 	dsb	sy
 8008a18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008a1c:	e7f0      	b.n	8008a00 <prvIdleTask+0x8>
 8008a1e:	bf00      	nop
 8008a20:	20000a34 	.word	0x20000a34
 8008a24:	e000ed04 	.word	0xe000ed04

08008a28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b082      	sub	sp, #8
 8008a2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a2e:	2300      	movs	r3, #0
 8008a30:	607b      	str	r3, [r7, #4]
 8008a32:	e00c      	b.n	8008a4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	4613      	mov	r3, r2
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	4413      	add	r3, r2
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	4a12      	ldr	r2, [pc, #72]	@ (8008a88 <prvInitialiseTaskLists+0x60>)
 8008a40:	4413      	add	r3, r2
 8008a42:	4618      	mov	r0, r3
 8008a44:	f7fe fbb6 	bl	80071b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	607b      	str	r3, [r7, #4]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2b37      	cmp	r3, #55	@ 0x37
 8008a52:	d9ef      	bls.n	8008a34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008a54:	480d      	ldr	r0, [pc, #52]	@ (8008a8c <prvInitialiseTaskLists+0x64>)
 8008a56:	f7fe fbad 	bl	80071b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008a5a:	480d      	ldr	r0, [pc, #52]	@ (8008a90 <prvInitialiseTaskLists+0x68>)
 8008a5c:	f7fe fbaa 	bl	80071b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008a60:	480c      	ldr	r0, [pc, #48]	@ (8008a94 <prvInitialiseTaskLists+0x6c>)
 8008a62:	f7fe fba7 	bl	80071b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008a66:	480c      	ldr	r0, [pc, #48]	@ (8008a98 <prvInitialiseTaskLists+0x70>)
 8008a68:	f7fe fba4 	bl	80071b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008a6c:	480b      	ldr	r0, [pc, #44]	@ (8008a9c <prvInitialiseTaskLists+0x74>)
 8008a6e:	f7fe fba1 	bl	80071b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008a72:	4b0b      	ldr	r3, [pc, #44]	@ (8008aa0 <prvInitialiseTaskLists+0x78>)
 8008a74:	4a05      	ldr	r2, [pc, #20]	@ (8008a8c <prvInitialiseTaskLists+0x64>)
 8008a76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008a78:	4b0a      	ldr	r3, [pc, #40]	@ (8008aa4 <prvInitialiseTaskLists+0x7c>)
 8008a7a:	4a05      	ldr	r2, [pc, #20]	@ (8008a90 <prvInitialiseTaskLists+0x68>)
 8008a7c:	601a      	str	r2, [r3, #0]
}
 8008a7e:	bf00      	nop
 8008a80:	3708      	adds	r7, #8
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
 8008a86:	bf00      	nop
 8008a88:	20000a34 	.word	0x20000a34
 8008a8c:	20000e94 	.word	0x20000e94
 8008a90:	20000ea8 	.word	0x20000ea8
 8008a94:	20000ec4 	.word	0x20000ec4
 8008a98:	20000ed8 	.word	0x20000ed8
 8008a9c:	20000ef0 	.word	0x20000ef0
 8008aa0:	20000ebc 	.word	0x20000ebc
 8008aa4:	20000ec0 	.word	0x20000ec0

08008aa8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008aae:	e019      	b.n	8008ae4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008ab0:	f000 fdea 	bl	8009688 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ab4:	4b10      	ldr	r3, [pc, #64]	@ (8008af8 <prvCheckTasksWaitingTermination+0x50>)
 8008ab6:	68db      	ldr	r3, [r3, #12]
 8008ab8:	68db      	ldr	r3, [r3, #12]
 8008aba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	3304      	adds	r3, #4
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f7fe fc01 	bl	80072c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8008afc <prvCheckTasksWaitingTermination+0x54>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	3b01      	subs	r3, #1
 8008acc:	4a0b      	ldr	r2, [pc, #44]	@ (8008afc <prvCheckTasksWaitingTermination+0x54>)
 8008ace:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8008b00 <prvCheckTasksWaitingTermination+0x58>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	3b01      	subs	r3, #1
 8008ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8008b00 <prvCheckTasksWaitingTermination+0x58>)
 8008ad8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008ada:	f000 fe07 	bl	80096ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 f810 	bl	8008b04 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ae4:	4b06      	ldr	r3, [pc, #24]	@ (8008b00 <prvCheckTasksWaitingTermination+0x58>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d1e1      	bne.n	8008ab0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008aec:	bf00      	nop
 8008aee:	bf00      	nop
 8008af0:	3708      	adds	r7, #8
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	20000ed8 	.word	0x20000ed8
 8008afc:	20000f04 	.word	0x20000f04
 8008b00:	20000eec 	.word	0x20000eec

08008b04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b084      	sub	sp, #16
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	3354      	adds	r3, #84	@ 0x54
 8008b10:	4618      	mov	r0, r3
 8008b12:	f001 f8d1 	bl	8009cb8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d108      	bne.n	8008b32 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b24:	4618      	mov	r0, r3
 8008b26:	f000 ff9f 	bl	8009a68 <vPortFree>
				vPortFree( pxTCB );
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 ff9c 	bl	8009a68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008b30:	e019      	b.n	8008b66 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d103      	bne.n	8008b44 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 ff93 	bl	8009a68 <vPortFree>
	}
 8008b42:	e010      	b.n	8008b66 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008b4a:	2b02      	cmp	r3, #2
 8008b4c:	d00b      	beq.n	8008b66 <prvDeleteTCB+0x62>
	__asm volatile
 8008b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b52:	f383 8811 	msr	BASEPRI, r3
 8008b56:	f3bf 8f6f 	isb	sy
 8008b5a:	f3bf 8f4f 	dsb	sy
 8008b5e:	60fb      	str	r3, [r7, #12]
}
 8008b60:	bf00      	nop
 8008b62:	bf00      	nop
 8008b64:	e7fd      	b.n	8008b62 <prvDeleteTCB+0x5e>
	}
 8008b66:	bf00      	nop
 8008b68:	3710      	adds	r7, #16
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
	...

08008b70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008b70:	b480      	push	{r7}
 8008b72:	b083      	sub	sp, #12
 8008b74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b76:	4b0c      	ldr	r3, [pc, #48]	@ (8008ba8 <prvResetNextTaskUnblockTime+0x38>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d104      	bne.n	8008b8a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008b80:	4b0a      	ldr	r3, [pc, #40]	@ (8008bac <prvResetNextTaskUnblockTime+0x3c>)
 8008b82:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008b86:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008b88:	e008      	b.n	8008b9c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b8a:	4b07      	ldr	r3, [pc, #28]	@ (8008ba8 <prvResetNextTaskUnblockTime+0x38>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	68db      	ldr	r3, [r3, #12]
 8008b92:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	4a04      	ldr	r2, [pc, #16]	@ (8008bac <prvResetNextTaskUnblockTime+0x3c>)
 8008b9a:	6013      	str	r3, [r2, #0]
}
 8008b9c:	bf00      	nop
 8008b9e:	370c      	adds	r7, #12
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr
 8008ba8:	20000ebc 	.word	0x20000ebc
 8008bac:	20000f24 	.word	0x20000f24

08008bb0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b083      	sub	sp, #12
 8008bb4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8008be4 <xTaskGetSchedulerState+0x34>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d102      	bne.n	8008bc4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	607b      	str	r3, [r7, #4]
 8008bc2:	e008      	b.n	8008bd6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bc4:	4b08      	ldr	r3, [pc, #32]	@ (8008be8 <xTaskGetSchedulerState+0x38>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d102      	bne.n	8008bd2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008bcc:	2302      	movs	r3, #2
 8008bce:	607b      	str	r3, [r7, #4]
 8008bd0:	e001      	b.n	8008bd6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008bd6:	687b      	ldr	r3, [r7, #4]
	}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	370c      	adds	r7, #12
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr
 8008be4:	20000f10 	.word	0x20000f10
 8008be8:	20000f2c 	.word	0x20000f2c

08008bec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b086      	sub	sp, #24
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d058      	beq.n	8008cb4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008c02:	4b2f      	ldr	r3, [pc, #188]	@ (8008cc0 <xTaskPriorityDisinherit+0xd4>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	693a      	ldr	r2, [r7, #16]
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d00b      	beq.n	8008c24 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c10:	f383 8811 	msr	BASEPRI, r3
 8008c14:	f3bf 8f6f 	isb	sy
 8008c18:	f3bf 8f4f 	dsb	sy
 8008c1c:	60fb      	str	r3, [r7, #12]
}
 8008c1e:	bf00      	nop
 8008c20:	bf00      	nop
 8008c22:	e7fd      	b.n	8008c20 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d10b      	bne.n	8008c44 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c30:	f383 8811 	msr	BASEPRI, r3
 8008c34:	f3bf 8f6f 	isb	sy
 8008c38:	f3bf 8f4f 	dsb	sy
 8008c3c:	60bb      	str	r3, [r7, #8]
}
 8008c3e:	bf00      	nop
 8008c40:	bf00      	nop
 8008c42:	e7fd      	b.n	8008c40 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c48:	1e5a      	subs	r2, r3, #1
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d02c      	beq.n	8008cb4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d128      	bne.n	8008cb4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	3304      	adds	r3, #4
 8008c66:	4618      	mov	r0, r3
 8008c68:	f7fe fb2e 	bl	80072c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c78:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c84:	4b0f      	ldr	r3, [pc, #60]	@ (8008cc4 <xTaskPriorityDisinherit+0xd8>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d903      	bls.n	8008c94 <xTaskPriorityDisinherit+0xa8>
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c90:	4a0c      	ldr	r2, [pc, #48]	@ (8008cc4 <xTaskPriorityDisinherit+0xd8>)
 8008c92:	6013      	str	r3, [r2, #0]
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c98:	4613      	mov	r3, r2
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	4413      	add	r3, r2
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	4a09      	ldr	r2, [pc, #36]	@ (8008cc8 <xTaskPriorityDisinherit+0xdc>)
 8008ca2:	441a      	add	r2, r3
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	3304      	adds	r3, #4
 8008ca8:	4619      	mov	r1, r3
 8008caa:	4610      	mov	r0, r2
 8008cac:	f7fe faaf 	bl	800720e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008cb4:	697b      	ldr	r3, [r7, #20]
	}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3718      	adds	r7, #24
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	20000a30 	.word	0x20000a30
 8008cc4:	20000f0c 	.word	0x20000f0c
 8008cc8:	20000a34 	.word	0x20000a34

08008ccc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008cd6:	4b21      	ldr	r3, [pc, #132]	@ (8008d5c <prvAddCurrentTaskToDelayedList+0x90>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cdc:	4b20      	ldr	r3, [pc, #128]	@ (8008d60 <prvAddCurrentTaskToDelayedList+0x94>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	3304      	adds	r3, #4
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f7fe faf0 	bl	80072c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008cee:	d10a      	bne.n	8008d06 <prvAddCurrentTaskToDelayedList+0x3a>
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d007      	beq.n	8008d06 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cf6:	4b1a      	ldr	r3, [pc, #104]	@ (8008d60 <prvAddCurrentTaskToDelayedList+0x94>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	3304      	adds	r3, #4
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	4819      	ldr	r0, [pc, #100]	@ (8008d64 <prvAddCurrentTaskToDelayedList+0x98>)
 8008d00:	f7fe fa85 	bl	800720e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008d04:	e026      	b.n	8008d54 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008d06:	68fa      	ldr	r2, [r7, #12]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	4413      	add	r3, r2
 8008d0c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008d0e:	4b14      	ldr	r3, [pc, #80]	@ (8008d60 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	68ba      	ldr	r2, [r7, #8]
 8008d14:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008d16:	68ba      	ldr	r2, [r7, #8]
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d209      	bcs.n	8008d32 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d1e:	4b12      	ldr	r3, [pc, #72]	@ (8008d68 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008d20:	681a      	ldr	r2, [r3, #0]
 8008d22:	4b0f      	ldr	r3, [pc, #60]	@ (8008d60 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	3304      	adds	r3, #4
 8008d28:	4619      	mov	r1, r3
 8008d2a:	4610      	mov	r0, r2
 8008d2c:	f7fe fa93 	bl	8007256 <vListInsert>
}
 8008d30:	e010      	b.n	8008d54 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d32:	4b0e      	ldr	r3, [pc, #56]	@ (8008d6c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	4b0a      	ldr	r3, [pc, #40]	@ (8008d60 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	3304      	adds	r3, #4
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	4610      	mov	r0, r2
 8008d40:	f7fe fa89 	bl	8007256 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008d44:	4b0a      	ldr	r3, [pc, #40]	@ (8008d70 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	68ba      	ldr	r2, [r7, #8]
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d202      	bcs.n	8008d54 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008d4e:	4a08      	ldr	r2, [pc, #32]	@ (8008d70 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	6013      	str	r3, [r2, #0]
}
 8008d54:	bf00      	nop
 8008d56:	3710      	adds	r7, #16
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	20000f08 	.word	0x20000f08
 8008d60:	20000a30 	.word	0x20000a30
 8008d64:	20000ef0 	.word	0x20000ef0
 8008d68:	20000ec0 	.word	0x20000ec0
 8008d6c:	20000ebc 	.word	0x20000ebc
 8008d70:	20000f24 	.word	0x20000f24

08008d74 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b08a      	sub	sp, #40	@ 0x28
 8008d78:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008d7e:	f000 fb13 	bl	80093a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008d82:	4b1d      	ldr	r3, [pc, #116]	@ (8008df8 <xTimerCreateTimerTask+0x84>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d021      	beq.n	8008dce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008d92:	1d3a      	adds	r2, r7, #4
 8008d94:	f107 0108 	add.w	r1, r7, #8
 8008d98:	f107 030c 	add.w	r3, r7, #12
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f7fe f9ef 	bl	8007180 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008da2:	6879      	ldr	r1, [r7, #4]
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	68fa      	ldr	r2, [r7, #12]
 8008da8:	9202      	str	r2, [sp, #8]
 8008daa:	9301      	str	r3, [sp, #4]
 8008dac:	2302      	movs	r3, #2
 8008dae:	9300      	str	r3, [sp, #0]
 8008db0:	2300      	movs	r3, #0
 8008db2:	460a      	mov	r2, r1
 8008db4:	4911      	ldr	r1, [pc, #68]	@ (8008dfc <xTimerCreateTimerTask+0x88>)
 8008db6:	4812      	ldr	r0, [pc, #72]	@ (8008e00 <xTimerCreateTimerTask+0x8c>)
 8008db8:	f7ff f8a2 	bl	8007f00 <xTaskCreateStatic>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	4a11      	ldr	r2, [pc, #68]	@ (8008e04 <xTimerCreateTimerTask+0x90>)
 8008dc0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008dc2:	4b10      	ldr	r3, [pc, #64]	@ (8008e04 <xTimerCreateTimerTask+0x90>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d001      	beq.n	8008dce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d10b      	bne.n	8008dec <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dd8:	f383 8811 	msr	BASEPRI, r3
 8008ddc:	f3bf 8f6f 	isb	sy
 8008de0:	f3bf 8f4f 	dsb	sy
 8008de4:	613b      	str	r3, [r7, #16]
}
 8008de6:	bf00      	nop
 8008de8:	bf00      	nop
 8008dea:	e7fd      	b.n	8008de8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008dec:	697b      	ldr	r3, [r7, #20]
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3718      	adds	r7, #24
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	20000f60 	.word	0x20000f60
 8008dfc:	08009ee0 	.word	0x08009ee0
 8008e00:	08008f41 	.word	0x08008f41
 8008e04:	20000f64 	.word	0x20000f64

08008e08 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b08a      	sub	sp, #40	@ 0x28
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	607a      	str	r2, [r7, #4]
 8008e14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008e16:	2300      	movs	r3, #0
 8008e18:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d10b      	bne.n	8008e38 <xTimerGenericCommand+0x30>
	__asm volatile
 8008e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e24:	f383 8811 	msr	BASEPRI, r3
 8008e28:	f3bf 8f6f 	isb	sy
 8008e2c:	f3bf 8f4f 	dsb	sy
 8008e30:	623b      	str	r3, [r7, #32]
}
 8008e32:	bf00      	nop
 8008e34:	bf00      	nop
 8008e36:	e7fd      	b.n	8008e34 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008e38:	4b19      	ldr	r3, [pc, #100]	@ (8008ea0 <xTimerGenericCommand+0x98>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d02a      	beq.n	8008e96 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	2b05      	cmp	r3, #5
 8008e50:	dc18      	bgt.n	8008e84 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008e52:	f7ff fead 	bl	8008bb0 <xTaskGetSchedulerState>
 8008e56:	4603      	mov	r3, r0
 8008e58:	2b02      	cmp	r3, #2
 8008e5a:	d109      	bne.n	8008e70 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008e5c:	4b10      	ldr	r3, [pc, #64]	@ (8008ea0 <xTimerGenericCommand+0x98>)
 8008e5e:	6818      	ldr	r0, [r3, #0]
 8008e60:	f107 0110 	add.w	r1, r7, #16
 8008e64:	2300      	movs	r3, #0
 8008e66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e68:	f7fe fc0c 	bl	8007684 <xQueueGenericSend>
 8008e6c:	6278      	str	r0, [r7, #36]	@ 0x24
 8008e6e:	e012      	b.n	8008e96 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008e70:	4b0b      	ldr	r3, [pc, #44]	@ (8008ea0 <xTimerGenericCommand+0x98>)
 8008e72:	6818      	ldr	r0, [r3, #0]
 8008e74:	f107 0110 	add.w	r1, r7, #16
 8008e78:	2300      	movs	r3, #0
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f7fe fc02 	bl	8007684 <xQueueGenericSend>
 8008e80:	6278      	str	r0, [r7, #36]	@ 0x24
 8008e82:	e008      	b.n	8008e96 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008e84:	4b06      	ldr	r3, [pc, #24]	@ (8008ea0 <xTimerGenericCommand+0x98>)
 8008e86:	6818      	ldr	r0, [r3, #0]
 8008e88:	f107 0110 	add.w	r1, r7, #16
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	683a      	ldr	r2, [r7, #0]
 8008e90:	f7fe fcfa 	bl	8007888 <xQueueGenericSendFromISR>
 8008e94:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3728      	adds	r7, #40	@ 0x28
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}
 8008ea0:	20000f60 	.word	0x20000f60

08008ea4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b088      	sub	sp, #32
 8008ea8:	af02      	add	r7, sp, #8
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008eae:	4b23      	ldr	r3, [pc, #140]	@ (8008f3c <prvProcessExpiredTimer+0x98>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	68db      	ldr	r3, [r3, #12]
 8008eb4:	68db      	ldr	r3, [r3, #12]
 8008eb6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	3304      	adds	r3, #4
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f7fe fa03 	bl	80072c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008ec8:	f003 0304 	and.w	r3, r3, #4
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d023      	beq.n	8008f18 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	699a      	ldr	r2, [r3, #24]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	18d1      	adds	r1, r2, r3
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	683a      	ldr	r2, [r7, #0]
 8008edc:	6978      	ldr	r0, [r7, #20]
 8008ede:	f000 f8d5 	bl	800908c <prvInsertTimerInActiveList>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d020      	beq.n	8008f2a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ee8:	2300      	movs	r3, #0
 8008eea:	9300      	str	r3, [sp, #0]
 8008eec:	2300      	movs	r3, #0
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	2100      	movs	r1, #0
 8008ef2:	6978      	ldr	r0, [r7, #20]
 8008ef4:	f7ff ff88 	bl	8008e08 <xTimerGenericCommand>
 8008ef8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d114      	bne.n	8008f2a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f04:	f383 8811 	msr	BASEPRI, r3
 8008f08:	f3bf 8f6f 	isb	sy
 8008f0c:	f3bf 8f4f 	dsb	sy
 8008f10:	60fb      	str	r3, [r7, #12]
}
 8008f12:	bf00      	nop
 8008f14:	bf00      	nop
 8008f16:	e7fd      	b.n	8008f14 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f1e:	f023 0301 	bic.w	r3, r3, #1
 8008f22:	b2da      	uxtb	r2, r3
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	6a1b      	ldr	r3, [r3, #32]
 8008f2e:	6978      	ldr	r0, [r7, #20]
 8008f30:	4798      	blx	r3
}
 8008f32:	bf00      	nop
 8008f34:	3718      	adds	r7, #24
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	20000f58 	.word	0x20000f58

08008f40 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f48:	f107 0308 	add.w	r3, r7, #8
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f000 f859 	bl	8009004 <prvGetNextExpireTime>
 8008f52:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	4619      	mov	r1, r3
 8008f58:	68f8      	ldr	r0, [r7, #12]
 8008f5a:	f000 f805 	bl	8008f68 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008f5e:	f000 f8d7 	bl	8009110 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f62:	bf00      	nop
 8008f64:	e7f0      	b.n	8008f48 <prvTimerTask+0x8>
	...

08008f68 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b084      	sub	sp, #16
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008f72:	f7ff fa29 	bl	80083c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f76:	f107 0308 	add.w	r3, r7, #8
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f000 f866 	bl	800904c <prvSampleTimeNow>
 8008f80:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d130      	bne.n	8008fea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d10a      	bne.n	8008fa4 <prvProcessTimerOrBlockTask+0x3c>
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d806      	bhi.n	8008fa4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008f96:	f7ff fa25 	bl	80083e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008f9a:	68f9      	ldr	r1, [r7, #12]
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f7ff ff81 	bl	8008ea4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008fa2:	e024      	b.n	8008fee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d008      	beq.n	8008fbc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008faa:	4b13      	ldr	r3, [pc, #76]	@ (8008ff8 <prvProcessTimerOrBlockTask+0x90>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d101      	bne.n	8008fb8 <prvProcessTimerOrBlockTask+0x50>
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	e000      	b.n	8008fba <prvProcessTimerOrBlockTask+0x52>
 8008fb8:	2300      	movs	r3, #0
 8008fba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8008ffc <prvProcessTimerOrBlockTask+0x94>)
 8008fbe:	6818      	ldr	r0, [r3, #0]
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	1ad3      	subs	r3, r2, r3
 8008fc6:	683a      	ldr	r2, [r7, #0]
 8008fc8:	4619      	mov	r1, r3
 8008fca:	f7fe ff65 	bl	8007e98 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008fce:	f7ff fa09 	bl	80083e4 <xTaskResumeAll>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d10a      	bne.n	8008fee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008fd8:	4b09      	ldr	r3, [pc, #36]	@ (8009000 <prvProcessTimerOrBlockTask+0x98>)
 8008fda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fde:	601a      	str	r2, [r3, #0]
 8008fe0:	f3bf 8f4f 	dsb	sy
 8008fe4:	f3bf 8f6f 	isb	sy
}
 8008fe8:	e001      	b.n	8008fee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008fea:	f7ff f9fb 	bl	80083e4 <xTaskResumeAll>
}
 8008fee:	bf00      	nop
 8008ff0:	3710      	adds	r7, #16
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	bf00      	nop
 8008ff8:	20000f5c 	.word	0x20000f5c
 8008ffc:	20000f60 	.word	0x20000f60
 8009000:	e000ed04 	.word	0xe000ed04

08009004 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009004:	b480      	push	{r7}
 8009006:	b085      	sub	sp, #20
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800900c:	4b0e      	ldr	r3, [pc, #56]	@ (8009048 <prvGetNextExpireTime+0x44>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d101      	bne.n	800901a <prvGetNextExpireTime+0x16>
 8009016:	2201      	movs	r2, #1
 8009018:	e000      	b.n	800901c <prvGetNextExpireTime+0x18>
 800901a:	2200      	movs	r2, #0
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d105      	bne.n	8009034 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009028:	4b07      	ldr	r3, [pc, #28]	@ (8009048 <prvGetNextExpireTime+0x44>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	68db      	ldr	r3, [r3, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	60fb      	str	r3, [r7, #12]
 8009032:	e001      	b.n	8009038 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009034:	2300      	movs	r3, #0
 8009036:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009038:	68fb      	ldr	r3, [r7, #12]
}
 800903a:	4618      	mov	r0, r3
 800903c:	3714      	adds	r7, #20
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr
 8009046:	bf00      	nop
 8009048:	20000f58 	.word	0x20000f58

0800904c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009054:	f7ff fa64 	bl	8008520 <xTaskGetTickCount>
 8009058:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800905a:	4b0b      	ldr	r3, [pc, #44]	@ (8009088 <prvSampleTimeNow+0x3c>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	68fa      	ldr	r2, [r7, #12]
 8009060:	429a      	cmp	r2, r3
 8009062:	d205      	bcs.n	8009070 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009064:	f000 f93a 	bl	80092dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2201      	movs	r2, #1
 800906c:	601a      	str	r2, [r3, #0]
 800906e:	e002      	b.n	8009076 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2200      	movs	r2, #0
 8009074:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009076:	4a04      	ldr	r2, [pc, #16]	@ (8009088 <prvSampleTimeNow+0x3c>)
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800907c:	68fb      	ldr	r3, [r7, #12]
}
 800907e:	4618      	mov	r0, r3
 8009080:	3710      	adds	r7, #16
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
 8009086:	bf00      	nop
 8009088:	20000f68 	.word	0x20000f68

0800908c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b086      	sub	sp, #24
 8009090:	af00      	add	r7, sp, #0
 8009092:	60f8      	str	r0, [r7, #12]
 8009094:	60b9      	str	r1, [r7, #8]
 8009096:	607a      	str	r2, [r7, #4]
 8009098:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800909a:	2300      	movs	r3, #0
 800909c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	68ba      	ldr	r2, [r7, #8]
 80090a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	68fa      	ldr	r2, [r7, #12]
 80090a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80090aa:	68ba      	ldr	r2, [r7, #8]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d812      	bhi.n	80090d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	1ad2      	subs	r2, r2, r3
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	699b      	ldr	r3, [r3, #24]
 80090bc:	429a      	cmp	r2, r3
 80090be:	d302      	bcc.n	80090c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80090c0:	2301      	movs	r3, #1
 80090c2:	617b      	str	r3, [r7, #20]
 80090c4:	e01b      	b.n	80090fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80090c6:	4b10      	ldr	r3, [pc, #64]	@ (8009108 <prvInsertTimerInActiveList+0x7c>)
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	3304      	adds	r3, #4
 80090ce:	4619      	mov	r1, r3
 80090d0:	4610      	mov	r0, r2
 80090d2:	f7fe f8c0 	bl	8007256 <vListInsert>
 80090d6:	e012      	b.n	80090fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	429a      	cmp	r2, r3
 80090de:	d206      	bcs.n	80090ee <prvInsertTimerInActiveList+0x62>
 80090e0:	68ba      	ldr	r2, [r7, #8]
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d302      	bcc.n	80090ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80090e8:	2301      	movs	r3, #1
 80090ea:	617b      	str	r3, [r7, #20]
 80090ec:	e007      	b.n	80090fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80090ee:	4b07      	ldr	r3, [pc, #28]	@ (800910c <prvInsertTimerInActiveList+0x80>)
 80090f0:	681a      	ldr	r2, [r3, #0]
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	3304      	adds	r3, #4
 80090f6:	4619      	mov	r1, r3
 80090f8:	4610      	mov	r0, r2
 80090fa:	f7fe f8ac 	bl	8007256 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80090fe:	697b      	ldr	r3, [r7, #20]
}
 8009100:	4618      	mov	r0, r3
 8009102:	3718      	adds	r7, #24
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}
 8009108:	20000f5c 	.word	0x20000f5c
 800910c:	20000f58 	.word	0x20000f58

08009110 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b08e      	sub	sp, #56	@ 0x38
 8009114:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009116:	e0ce      	b.n	80092b6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2b00      	cmp	r3, #0
 800911c:	da19      	bge.n	8009152 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800911e:	1d3b      	adds	r3, r7, #4
 8009120:	3304      	adds	r3, #4
 8009122:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009126:	2b00      	cmp	r3, #0
 8009128:	d10b      	bne.n	8009142 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800912a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800912e:	f383 8811 	msr	BASEPRI, r3
 8009132:	f3bf 8f6f 	isb	sy
 8009136:	f3bf 8f4f 	dsb	sy
 800913a:	61fb      	str	r3, [r7, #28]
}
 800913c:	bf00      	nop
 800913e:	bf00      	nop
 8009140:	e7fd      	b.n	800913e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009148:	6850      	ldr	r0, [r2, #4]
 800914a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800914c:	6892      	ldr	r2, [r2, #8]
 800914e:	4611      	mov	r1, r2
 8009150:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2b00      	cmp	r3, #0
 8009156:	f2c0 80ae 	blt.w	80092b6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800915e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009160:	695b      	ldr	r3, [r3, #20]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d004      	beq.n	8009170 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009168:	3304      	adds	r3, #4
 800916a:	4618      	mov	r0, r3
 800916c:	f7fe f8ac 	bl	80072c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009170:	463b      	mov	r3, r7
 8009172:	4618      	mov	r0, r3
 8009174:	f7ff ff6a 	bl	800904c <prvSampleTimeNow>
 8009178:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2b09      	cmp	r3, #9
 800917e:	f200 8097 	bhi.w	80092b0 <prvProcessReceivedCommands+0x1a0>
 8009182:	a201      	add	r2, pc, #4	@ (adr r2, 8009188 <prvProcessReceivedCommands+0x78>)
 8009184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009188:	080091b1 	.word	0x080091b1
 800918c:	080091b1 	.word	0x080091b1
 8009190:	080091b1 	.word	0x080091b1
 8009194:	08009227 	.word	0x08009227
 8009198:	0800923b 	.word	0x0800923b
 800919c:	08009287 	.word	0x08009287
 80091a0:	080091b1 	.word	0x080091b1
 80091a4:	080091b1 	.word	0x080091b1
 80091a8:	08009227 	.word	0x08009227
 80091ac:	0800923b 	.word	0x0800923b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80091b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80091b6:	f043 0301 	orr.w	r3, r3, #1
 80091ba:	b2da      	uxtb	r2, r3
 80091bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80091c2:	68ba      	ldr	r2, [r7, #8]
 80091c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091c6:	699b      	ldr	r3, [r3, #24]
 80091c8:	18d1      	adds	r1, r2, r3
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091d0:	f7ff ff5c 	bl	800908c <prvInsertTimerInActiveList>
 80091d4:	4603      	mov	r3, r0
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d06c      	beq.n	80092b4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80091da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091dc:	6a1b      	ldr	r3, [r3, #32]
 80091de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80091e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80091e8:	f003 0304 	and.w	r3, r3, #4
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d061      	beq.n	80092b4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80091f0:	68ba      	ldr	r2, [r7, #8]
 80091f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091f4:	699b      	ldr	r3, [r3, #24]
 80091f6:	441a      	add	r2, r3
 80091f8:	2300      	movs	r3, #0
 80091fa:	9300      	str	r3, [sp, #0]
 80091fc:	2300      	movs	r3, #0
 80091fe:	2100      	movs	r1, #0
 8009200:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009202:	f7ff fe01 	bl	8008e08 <xTimerGenericCommand>
 8009206:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009208:	6a3b      	ldr	r3, [r7, #32]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d152      	bne.n	80092b4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800920e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009212:	f383 8811 	msr	BASEPRI, r3
 8009216:	f3bf 8f6f 	isb	sy
 800921a:	f3bf 8f4f 	dsb	sy
 800921e:	61bb      	str	r3, [r7, #24]
}
 8009220:	bf00      	nop
 8009222:	bf00      	nop
 8009224:	e7fd      	b.n	8009222 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009228:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800922c:	f023 0301 	bic.w	r3, r3, #1
 8009230:	b2da      	uxtb	r2, r3
 8009232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009234:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009238:	e03d      	b.n	80092b6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800923a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800923c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009240:	f043 0301 	orr.w	r3, r3, #1
 8009244:	b2da      	uxtb	r2, r3
 8009246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009248:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800924c:	68ba      	ldr	r2, [r7, #8]
 800924e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009250:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009254:	699b      	ldr	r3, [r3, #24]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d10b      	bne.n	8009272 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800925a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800925e:	f383 8811 	msr	BASEPRI, r3
 8009262:	f3bf 8f6f 	isb	sy
 8009266:	f3bf 8f4f 	dsb	sy
 800926a:	617b      	str	r3, [r7, #20]
}
 800926c:	bf00      	nop
 800926e:	bf00      	nop
 8009270:	e7fd      	b.n	800926e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009274:	699a      	ldr	r2, [r3, #24]
 8009276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009278:	18d1      	adds	r1, r2, r3
 800927a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800927c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800927e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009280:	f7ff ff04 	bl	800908c <prvInsertTimerInActiveList>
					break;
 8009284:	e017      	b.n	80092b6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009288:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800928c:	f003 0302 	and.w	r3, r3, #2
 8009290:	2b00      	cmp	r3, #0
 8009292:	d103      	bne.n	800929c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009294:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009296:	f000 fbe7 	bl	8009a68 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800929a:	e00c      	b.n	80092b6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800929c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800929e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80092a2:	f023 0301 	bic.w	r3, r3, #1
 80092a6:	b2da      	uxtb	r2, r3
 80092a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80092ae:	e002      	b.n	80092b6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80092b0:	bf00      	nop
 80092b2:	e000      	b.n	80092b6 <prvProcessReceivedCommands+0x1a6>
					break;
 80092b4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80092b6:	4b08      	ldr	r3, [pc, #32]	@ (80092d8 <prvProcessReceivedCommands+0x1c8>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	1d39      	adds	r1, r7, #4
 80092bc:	2200      	movs	r2, #0
 80092be:	4618      	mov	r0, r3
 80092c0:	f7fe fb80 	bl	80079c4 <xQueueReceive>
 80092c4:	4603      	mov	r3, r0
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	f47f af26 	bne.w	8009118 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80092cc:	bf00      	nop
 80092ce:	bf00      	nop
 80092d0:	3730      	adds	r7, #48	@ 0x30
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	bf00      	nop
 80092d8:	20000f60 	.word	0x20000f60

080092dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b088      	sub	sp, #32
 80092e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80092e2:	e049      	b.n	8009378 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80092e4:	4b2e      	ldr	r3, [pc, #184]	@ (80093a0 <prvSwitchTimerLists+0xc4>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	68db      	ldr	r3, [r3, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092ee:	4b2c      	ldr	r3, [pc, #176]	@ (80093a0 <prvSwitchTimerLists+0xc4>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	68db      	ldr	r3, [r3, #12]
 80092f4:	68db      	ldr	r3, [r3, #12]
 80092f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	3304      	adds	r3, #4
 80092fc:	4618      	mov	r0, r3
 80092fe:	f7fd ffe3 	bl	80072c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	6a1b      	ldr	r3, [r3, #32]
 8009306:	68f8      	ldr	r0, [r7, #12]
 8009308:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009310:	f003 0304 	and.w	r3, r3, #4
 8009314:	2b00      	cmp	r3, #0
 8009316:	d02f      	beq.n	8009378 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	699b      	ldr	r3, [r3, #24]
 800931c:	693a      	ldr	r2, [r7, #16]
 800931e:	4413      	add	r3, r2
 8009320:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009322:	68ba      	ldr	r2, [r7, #8]
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	429a      	cmp	r2, r3
 8009328:	d90e      	bls.n	8009348 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	68ba      	ldr	r2, [r7, #8]
 800932e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	68fa      	ldr	r2, [r7, #12]
 8009334:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009336:	4b1a      	ldr	r3, [pc, #104]	@ (80093a0 <prvSwitchTimerLists+0xc4>)
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	3304      	adds	r3, #4
 800933e:	4619      	mov	r1, r3
 8009340:	4610      	mov	r0, r2
 8009342:	f7fd ff88 	bl	8007256 <vListInsert>
 8009346:	e017      	b.n	8009378 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009348:	2300      	movs	r3, #0
 800934a:	9300      	str	r3, [sp, #0]
 800934c:	2300      	movs	r3, #0
 800934e:	693a      	ldr	r2, [r7, #16]
 8009350:	2100      	movs	r1, #0
 8009352:	68f8      	ldr	r0, [r7, #12]
 8009354:	f7ff fd58 	bl	8008e08 <xTimerGenericCommand>
 8009358:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d10b      	bne.n	8009378 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009364:	f383 8811 	msr	BASEPRI, r3
 8009368:	f3bf 8f6f 	isb	sy
 800936c:	f3bf 8f4f 	dsb	sy
 8009370:	603b      	str	r3, [r7, #0]
}
 8009372:	bf00      	nop
 8009374:	bf00      	nop
 8009376:	e7fd      	b.n	8009374 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009378:	4b09      	ldr	r3, [pc, #36]	@ (80093a0 <prvSwitchTimerLists+0xc4>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d1b0      	bne.n	80092e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009382:	4b07      	ldr	r3, [pc, #28]	@ (80093a0 <prvSwitchTimerLists+0xc4>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009388:	4b06      	ldr	r3, [pc, #24]	@ (80093a4 <prvSwitchTimerLists+0xc8>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	4a04      	ldr	r2, [pc, #16]	@ (80093a0 <prvSwitchTimerLists+0xc4>)
 800938e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009390:	4a04      	ldr	r2, [pc, #16]	@ (80093a4 <prvSwitchTimerLists+0xc8>)
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	6013      	str	r3, [r2, #0]
}
 8009396:	bf00      	nop
 8009398:	3718      	adds	r7, #24
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}
 800939e:	bf00      	nop
 80093a0:	20000f58 	.word	0x20000f58
 80093a4:	20000f5c 	.word	0x20000f5c

080093a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b082      	sub	sp, #8
 80093ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80093ae:	f000 f96b 	bl	8009688 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80093b2:	4b15      	ldr	r3, [pc, #84]	@ (8009408 <prvCheckForValidListAndQueue+0x60>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d120      	bne.n	80093fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80093ba:	4814      	ldr	r0, [pc, #80]	@ (800940c <prvCheckForValidListAndQueue+0x64>)
 80093bc:	f7fd fefa 	bl	80071b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80093c0:	4813      	ldr	r0, [pc, #76]	@ (8009410 <prvCheckForValidListAndQueue+0x68>)
 80093c2:	f7fd fef7 	bl	80071b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80093c6:	4b13      	ldr	r3, [pc, #76]	@ (8009414 <prvCheckForValidListAndQueue+0x6c>)
 80093c8:	4a10      	ldr	r2, [pc, #64]	@ (800940c <prvCheckForValidListAndQueue+0x64>)
 80093ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80093cc:	4b12      	ldr	r3, [pc, #72]	@ (8009418 <prvCheckForValidListAndQueue+0x70>)
 80093ce:	4a10      	ldr	r2, [pc, #64]	@ (8009410 <prvCheckForValidListAndQueue+0x68>)
 80093d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80093d2:	2300      	movs	r3, #0
 80093d4:	9300      	str	r3, [sp, #0]
 80093d6:	4b11      	ldr	r3, [pc, #68]	@ (800941c <prvCheckForValidListAndQueue+0x74>)
 80093d8:	4a11      	ldr	r2, [pc, #68]	@ (8009420 <prvCheckForValidListAndQueue+0x78>)
 80093da:	2110      	movs	r1, #16
 80093dc:	200a      	movs	r0, #10
 80093de:	f7fe f807 	bl	80073f0 <xQueueGenericCreateStatic>
 80093e2:	4603      	mov	r3, r0
 80093e4:	4a08      	ldr	r2, [pc, #32]	@ (8009408 <prvCheckForValidListAndQueue+0x60>)
 80093e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80093e8:	4b07      	ldr	r3, [pc, #28]	@ (8009408 <prvCheckForValidListAndQueue+0x60>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d005      	beq.n	80093fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80093f0:	4b05      	ldr	r3, [pc, #20]	@ (8009408 <prvCheckForValidListAndQueue+0x60>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	490b      	ldr	r1, [pc, #44]	@ (8009424 <prvCheckForValidListAndQueue+0x7c>)
 80093f6:	4618      	mov	r0, r3
 80093f8:	f7fe fcfa 	bl	8007df0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80093fc:	f000 f976 	bl	80096ec <vPortExitCritical>
}
 8009400:	bf00      	nop
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	20000f60 	.word	0x20000f60
 800940c:	20000f30 	.word	0x20000f30
 8009410:	20000f44 	.word	0x20000f44
 8009414:	20000f58 	.word	0x20000f58
 8009418:	20000f5c 	.word	0x20000f5c
 800941c:	2000100c 	.word	0x2000100c
 8009420:	20000f6c 	.word	0x20000f6c
 8009424:	08009ee8 	.word	0x08009ee8

08009428 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009428:	b480      	push	{r7}
 800942a:	b085      	sub	sp, #20
 800942c:	af00      	add	r7, sp, #0
 800942e:	60f8      	str	r0, [r7, #12]
 8009430:	60b9      	str	r1, [r7, #8]
 8009432:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	3b04      	subs	r3, #4
 8009438:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009440:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	3b04      	subs	r3, #4
 8009446:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	f023 0201 	bic.w	r2, r3, #1
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	3b04      	subs	r3, #4
 8009456:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009458:	4a0c      	ldr	r2, [pc, #48]	@ (800948c <pxPortInitialiseStack+0x64>)
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	3b14      	subs	r3, #20
 8009462:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009464:	687a      	ldr	r2, [r7, #4]
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	3b04      	subs	r3, #4
 800946e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f06f 0202 	mvn.w	r2, #2
 8009476:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	3b20      	subs	r3, #32
 800947c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800947e:	68fb      	ldr	r3, [r7, #12]
}
 8009480:	4618      	mov	r0, r3
 8009482:	3714      	adds	r7, #20
 8009484:	46bd      	mov	sp, r7
 8009486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948a:	4770      	bx	lr
 800948c:	08009491 	.word	0x08009491

08009490 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009490:	b480      	push	{r7}
 8009492:	b085      	sub	sp, #20
 8009494:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009496:	2300      	movs	r3, #0
 8009498:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800949a:	4b13      	ldr	r3, [pc, #76]	@ (80094e8 <prvTaskExitError+0x58>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80094a2:	d00b      	beq.n	80094bc <prvTaskExitError+0x2c>
	__asm volatile
 80094a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094a8:	f383 8811 	msr	BASEPRI, r3
 80094ac:	f3bf 8f6f 	isb	sy
 80094b0:	f3bf 8f4f 	dsb	sy
 80094b4:	60fb      	str	r3, [r7, #12]
}
 80094b6:	bf00      	nop
 80094b8:	bf00      	nop
 80094ba:	e7fd      	b.n	80094b8 <prvTaskExitError+0x28>
	__asm volatile
 80094bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094c0:	f383 8811 	msr	BASEPRI, r3
 80094c4:	f3bf 8f6f 	isb	sy
 80094c8:	f3bf 8f4f 	dsb	sy
 80094cc:	60bb      	str	r3, [r7, #8]
}
 80094ce:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80094d0:	bf00      	nop
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d0fc      	beq.n	80094d2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80094d8:	bf00      	nop
 80094da:	bf00      	nop
 80094dc:	3714      	adds	r7, #20
 80094de:	46bd      	mov	sp, r7
 80094e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e4:	4770      	bx	lr
 80094e6:	bf00      	nop
 80094e8:	2000000c 	.word	0x2000000c
 80094ec:	00000000 	.word	0x00000000

080094f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80094f0:	4b07      	ldr	r3, [pc, #28]	@ (8009510 <pxCurrentTCBConst2>)
 80094f2:	6819      	ldr	r1, [r3, #0]
 80094f4:	6808      	ldr	r0, [r1, #0]
 80094f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094fa:	f380 8809 	msr	PSP, r0
 80094fe:	f3bf 8f6f 	isb	sy
 8009502:	f04f 0000 	mov.w	r0, #0
 8009506:	f380 8811 	msr	BASEPRI, r0
 800950a:	4770      	bx	lr
 800950c:	f3af 8000 	nop.w

08009510 <pxCurrentTCBConst2>:
 8009510:	20000a30 	.word	0x20000a30
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009514:	bf00      	nop
 8009516:	bf00      	nop

08009518 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009518:	4808      	ldr	r0, [pc, #32]	@ (800953c <prvPortStartFirstTask+0x24>)
 800951a:	6800      	ldr	r0, [r0, #0]
 800951c:	6800      	ldr	r0, [r0, #0]
 800951e:	f380 8808 	msr	MSP, r0
 8009522:	f04f 0000 	mov.w	r0, #0
 8009526:	f380 8814 	msr	CONTROL, r0
 800952a:	b662      	cpsie	i
 800952c:	b661      	cpsie	f
 800952e:	f3bf 8f4f 	dsb	sy
 8009532:	f3bf 8f6f 	isb	sy
 8009536:	df00      	svc	0
 8009538:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800953a:	bf00      	nop
 800953c:	e000ed08 	.word	0xe000ed08

08009540 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b086      	sub	sp, #24
 8009544:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009546:	4b47      	ldr	r3, [pc, #284]	@ (8009664 <xPortStartScheduler+0x124>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a47      	ldr	r2, [pc, #284]	@ (8009668 <xPortStartScheduler+0x128>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d10b      	bne.n	8009568 <xPortStartScheduler+0x28>
	__asm volatile
 8009550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009554:	f383 8811 	msr	BASEPRI, r3
 8009558:	f3bf 8f6f 	isb	sy
 800955c:	f3bf 8f4f 	dsb	sy
 8009560:	613b      	str	r3, [r7, #16]
}
 8009562:	bf00      	nop
 8009564:	bf00      	nop
 8009566:	e7fd      	b.n	8009564 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009568:	4b3e      	ldr	r3, [pc, #248]	@ (8009664 <xPortStartScheduler+0x124>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4a3f      	ldr	r2, [pc, #252]	@ (800966c <xPortStartScheduler+0x12c>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d10b      	bne.n	800958a <xPortStartScheduler+0x4a>
	__asm volatile
 8009572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009576:	f383 8811 	msr	BASEPRI, r3
 800957a:	f3bf 8f6f 	isb	sy
 800957e:	f3bf 8f4f 	dsb	sy
 8009582:	60fb      	str	r3, [r7, #12]
}
 8009584:	bf00      	nop
 8009586:	bf00      	nop
 8009588:	e7fd      	b.n	8009586 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800958a:	4b39      	ldr	r3, [pc, #228]	@ (8009670 <xPortStartScheduler+0x130>)
 800958c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	b2db      	uxtb	r3, r3
 8009594:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	22ff      	movs	r2, #255	@ 0xff
 800959a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	781b      	ldrb	r3, [r3, #0]
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80095a4:	78fb      	ldrb	r3, [r7, #3]
 80095a6:	b2db      	uxtb	r3, r3
 80095a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80095ac:	b2da      	uxtb	r2, r3
 80095ae:	4b31      	ldr	r3, [pc, #196]	@ (8009674 <xPortStartScheduler+0x134>)
 80095b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80095b2:	4b31      	ldr	r3, [pc, #196]	@ (8009678 <xPortStartScheduler+0x138>)
 80095b4:	2207      	movs	r2, #7
 80095b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80095b8:	e009      	b.n	80095ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80095ba:	4b2f      	ldr	r3, [pc, #188]	@ (8009678 <xPortStartScheduler+0x138>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	3b01      	subs	r3, #1
 80095c0:	4a2d      	ldr	r2, [pc, #180]	@ (8009678 <xPortStartScheduler+0x138>)
 80095c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80095c4:	78fb      	ldrb	r3, [r7, #3]
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	005b      	lsls	r3, r3, #1
 80095ca:	b2db      	uxtb	r3, r3
 80095cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80095ce:	78fb      	ldrb	r3, [r7, #3]
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095d6:	2b80      	cmp	r3, #128	@ 0x80
 80095d8:	d0ef      	beq.n	80095ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80095da:	4b27      	ldr	r3, [pc, #156]	@ (8009678 <xPortStartScheduler+0x138>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f1c3 0307 	rsb	r3, r3, #7
 80095e2:	2b04      	cmp	r3, #4
 80095e4:	d00b      	beq.n	80095fe <xPortStartScheduler+0xbe>
	__asm volatile
 80095e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095ea:	f383 8811 	msr	BASEPRI, r3
 80095ee:	f3bf 8f6f 	isb	sy
 80095f2:	f3bf 8f4f 	dsb	sy
 80095f6:	60bb      	str	r3, [r7, #8]
}
 80095f8:	bf00      	nop
 80095fa:	bf00      	nop
 80095fc:	e7fd      	b.n	80095fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80095fe:	4b1e      	ldr	r3, [pc, #120]	@ (8009678 <xPortStartScheduler+0x138>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	021b      	lsls	r3, r3, #8
 8009604:	4a1c      	ldr	r2, [pc, #112]	@ (8009678 <xPortStartScheduler+0x138>)
 8009606:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009608:	4b1b      	ldr	r3, [pc, #108]	@ (8009678 <xPortStartScheduler+0x138>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009610:	4a19      	ldr	r2, [pc, #100]	@ (8009678 <xPortStartScheduler+0x138>)
 8009612:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	b2da      	uxtb	r2, r3
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800961c:	4b17      	ldr	r3, [pc, #92]	@ (800967c <xPortStartScheduler+0x13c>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a16      	ldr	r2, [pc, #88]	@ (800967c <xPortStartScheduler+0x13c>)
 8009622:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009626:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009628:	4b14      	ldr	r3, [pc, #80]	@ (800967c <xPortStartScheduler+0x13c>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a13      	ldr	r2, [pc, #76]	@ (800967c <xPortStartScheduler+0x13c>)
 800962e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009632:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009634:	f000 f8da 	bl	80097ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009638:	4b11      	ldr	r3, [pc, #68]	@ (8009680 <xPortStartScheduler+0x140>)
 800963a:	2200      	movs	r2, #0
 800963c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800963e:	f000 f8f9 	bl	8009834 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009642:	4b10      	ldr	r3, [pc, #64]	@ (8009684 <xPortStartScheduler+0x144>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a0f      	ldr	r2, [pc, #60]	@ (8009684 <xPortStartScheduler+0x144>)
 8009648:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800964c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800964e:	f7ff ff63 	bl	8009518 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009652:	f7ff f82f 	bl	80086b4 <vTaskSwitchContext>
	prvTaskExitError();
 8009656:	f7ff ff1b 	bl	8009490 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800965a:	2300      	movs	r3, #0
}
 800965c:	4618      	mov	r0, r3
 800965e:	3718      	adds	r7, #24
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}
 8009664:	e000ed00 	.word	0xe000ed00
 8009668:	410fc271 	.word	0x410fc271
 800966c:	410fc270 	.word	0x410fc270
 8009670:	e000e400 	.word	0xe000e400
 8009674:	2000105c 	.word	0x2000105c
 8009678:	20001060 	.word	0x20001060
 800967c:	e000ed20 	.word	0xe000ed20
 8009680:	2000000c 	.word	0x2000000c
 8009684:	e000ef34 	.word	0xe000ef34

08009688 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009688:	b480      	push	{r7}
 800968a:	b083      	sub	sp, #12
 800968c:	af00      	add	r7, sp, #0
	__asm volatile
 800968e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009692:	f383 8811 	msr	BASEPRI, r3
 8009696:	f3bf 8f6f 	isb	sy
 800969a:	f3bf 8f4f 	dsb	sy
 800969e:	607b      	str	r3, [r7, #4]
}
 80096a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80096a2:	4b10      	ldr	r3, [pc, #64]	@ (80096e4 <vPortEnterCritical+0x5c>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	3301      	adds	r3, #1
 80096a8:	4a0e      	ldr	r2, [pc, #56]	@ (80096e4 <vPortEnterCritical+0x5c>)
 80096aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80096ac:	4b0d      	ldr	r3, [pc, #52]	@ (80096e4 <vPortEnterCritical+0x5c>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d110      	bne.n	80096d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80096b4:	4b0c      	ldr	r3, [pc, #48]	@ (80096e8 <vPortEnterCritical+0x60>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d00b      	beq.n	80096d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80096be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096c2:	f383 8811 	msr	BASEPRI, r3
 80096c6:	f3bf 8f6f 	isb	sy
 80096ca:	f3bf 8f4f 	dsb	sy
 80096ce:	603b      	str	r3, [r7, #0]
}
 80096d0:	bf00      	nop
 80096d2:	bf00      	nop
 80096d4:	e7fd      	b.n	80096d2 <vPortEnterCritical+0x4a>
	}
}
 80096d6:	bf00      	nop
 80096d8:	370c      	adds	r7, #12
 80096da:	46bd      	mov	sp, r7
 80096dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e0:	4770      	bx	lr
 80096e2:	bf00      	nop
 80096e4:	2000000c 	.word	0x2000000c
 80096e8:	e000ed04 	.word	0xe000ed04

080096ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80096ec:	b480      	push	{r7}
 80096ee:	b083      	sub	sp, #12
 80096f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80096f2:	4b12      	ldr	r3, [pc, #72]	@ (800973c <vPortExitCritical+0x50>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d10b      	bne.n	8009712 <vPortExitCritical+0x26>
	__asm volatile
 80096fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096fe:	f383 8811 	msr	BASEPRI, r3
 8009702:	f3bf 8f6f 	isb	sy
 8009706:	f3bf 8f4f 	dsb	sy
 800970a:	607b      	str	r3, [r7, #4]
}
 800970c:	bf00      	nop
 800970e:	bf00      	nop
 8009710:	e7fd      	b.n	800970e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009712:	4b0a      	ldr	r3, [pc, #40]	@ (800973c <vPortExitCritical+0x50>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	3b01      	subs	r3, #1
 8009718:	4a08      	ldr	r2, [pc, #32]	@ (800973c <vPortExitCritical+0x50>)
 800971a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800971c:	4b07      	ldr	r3, [pc, #28]	@ (800973c <vPortExitCritical+0x50>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d105      	bne.n	8009730 <vPortExitCritical+0x44>
 8009724:	2300      	movs	r3, #0
 8009726:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	f383 8811 	msr	BASEPRI, r3
}
 800972e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009730:	bf00      	nop
 8009732:	370c      	adds	r7, #12
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr
 800973c:	2000000c 	.word	0x2000000c

08009740 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009740:	f3ef 8009 	mrs	r0, PSP
 8009744:	f3bf 8f6f 	isb	sy
 8009748:	4b15      	ldr	r3, [pc, #84]	@ (80097a0 <pxCurrentTCBConst>)
 800974a:	681a      	ldr	r2, [r3, #0]
 800974c:	f01e 0f10 	tst.w	lr, #16
 8009750:	bf08      	it	eq
 8009752:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009756:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800975a:	6010      	str	r0, [r2, #0]
 800975c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009760:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009764:	f380 8811 	msr	BASEPRI, r0
 8009768:	f3bf 8f4f 	dsb	sy
 800976c:	f3bf 8f6f 	isb	sy
 8009770:	f7fe ffa0 	bl	80086b4 <vTaskSwitchContext>
 8009774:	f04f 0000 	mov.w	r0, #0
 8009778:	f380 8811 	msr	BASEPRI, r0
 800977c:	bc09      	pop	{r0, r3}
 800977e:	6819      	ldr	r1, [r3, #0]
 8009780:	6808      	ldr	r0, [r1, #0]
 8009782:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009786:	f01e 0f10 	tst.w	lr, #16
 800978a:	bf08      	it	eq
 800978c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009790:	f380 8809 	msr	PSP, r0
 8009794:	f3bf 8f6f 	isb	sy
 8009798:	4770      	bx	lr
 800979a:	bf00      	nop
 800979c:	f3af 8000 	nop.w

080097a0 <pxCurrentTCBConst>:
 80097a0:	20000a30 	.word	0x20000a30
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80097a4:	bf00      	nop
 80097a6:	bf00      	nop

080097a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b082      	sub	sp, #8
 80097ac:	af00      	add	r7, sp, #0
	__asm volatile
 80097ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097b2:	f383 8811 	msr	BASEPRI, r3
 80097b6:	f3bf 8f6f 	isb	sy
 80097ba:	f3bf 8f4f 	dsb	sy
 80097be:	607b      	str	r3, [r7, #4]
}
 80097c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80097c2:	f7fe febd 	bl	8008540 <xTaskIncrementTick>
 80097c6:	4603      	mov	r3, r0
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d003      	beq.n	80097d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80097cc:	4b06      	ldr	r3, [pc, #24]	@ (80097e8 <xPortSysTickHandler+0x40>)
 80097ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097d2:	601a      	str	r2, [r3, #0]
 80097d4:	2300      	movs	r3, #0
 80097d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	f383 8811 	msr	BASEPRI, r3
}
 80097de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80097e0:	bf00      	nop
 80097e2:	3708      	adds	r7, #8
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}
 80097e8:	e000ed04 	.word	0xe000ed04

080097ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80097ec:	b480      	push	{r7}
 80097ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80097f0:	4b0b      	ldr	r3, [pc, #44]	@ (8009820 <vPortSetupTimerInterrupt+0x34>)
 80097f2:	2200      	movs	r2, #0
 80097f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80097f6:	4b0b      	ldr	r3, [pc, #44]	@ (8009824 <vPortSetupTimerInterrupt+0x38>)
 80097f8:	2200      	movs	r2, #0
 80097fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80097fc:	4b0a      	ldr	r3, [pc, #40]	@ (8009828 <vPortSetupTimerInterrupt+0x3c>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a0a      	ldr	r2, [pc, #40]	@ (800982c <vPortSetupTimerInterrupt+0x40>)
 8009802:	fba2 2303 	umull	r2, r3, r2, r3
 8009806:	099b      	lsrs	r3, r3, #6
 8009808:	4a09      	ldr	r2, [pc, #36]	@ (8009830 <vPortSetupTimerInterrupt+0x44>)
 800980a:	3b01      	subs	r3, #1
 800980c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800980e:	4b04      	ldr	r3, [pc, #16]	@ (8009820 <vPortSetupTimerInterrupt+0x34>)
 8009810:	2207      	movs	r2, #7
 8009812:	601a      	str	r2, [r3, #0]
}
 8009814:	bf00      	nop
 8009816:	46bd      	mov	sp, r7
 8009818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981c:	4770      	bx	lr
 800981e:	bf00      	nop
 8009820:	e000e010 	.word	0xe000e010
 8009824:	e000e018 	.word	0xe000e018
 8009828:	20000000 	.word	0x20000000
 800982c:	10624dd3 	.word	0x10624dd3
 8009830:	e000e014 	.word	0xe000e014

08009834 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009834:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009844 <vPortEnableVFP+0x10>
 8009838:	6801      	ldr	r1, [r0, #0]
 800983a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800983e:	6001      	str	r1, [r0, #0]
 8009840:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009842:	bf00      	nop
 8009844:	e000ed88 	.word	0xe000ed88

08009848 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009848:	b480      	push	{r7}
 800984a:	b085      	sub	sp, #20
 800984c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800984e:	f3ef 8305 	mrs	r3, IPSR
 8009852:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	2b0f      	cmp	r3, #15
 8009858:	d915      	bls.n	8009886 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800985a:	4a18      	ldr	r2, [pc, #96]	@ (80098bc <vPortValidateInterruptPriority+0x74>)
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	4413      	add	r3, r2
 8009860:	781b      	ldrb	r3, [r3, #0]
 8009862:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009864:	4b16      	ldr	r3, [pc, #88]	@ (80098c0 <vPortValidateInterruptPriority+0x78>)
 8009866:	781b      	ldrb	r3, [r3, #0]
 8009868:	7afa      	ldrb	r2, [r7, #11]
 800986a:	429a      	cmp	r2, r3
 800986c:	d20b      	bcs.n	8009886 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800986e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009872:	f383 8811 	msr	BASEPRI, r3
 8009876:	f3bf 8f6f 	isb	sy
 800987a:	f3bf 8f4f 	dsb	sy
 800987e:	607b      	str	r3, [r7, #4]
}
 8009880:	bf00      	nop
 8009882:	bf00      	nop
 8009884:	e7fd      	b.n	8009882 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009886:	4b0f      	ldr	r3, [pc, #60]	@ (80098c4 <vPortValidateInterruptPriority+0x7c>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800988e:	4b0e      	ldr	r3, [pc, #56]	@ (80098c8 <vPortValidateInterruptPriority+0x80>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	429a      	cmp	r2, r3
 8009894:	d90b      	bls.n	80098ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800989a:	f383 8811 	msr	BASEPRI, r3
 800989e:	f3bf 8f6f 	isb	sy
 80098a2:	f3bf 8f4f 	dsb	sy
 80098a6:	603b      	str	r3, [r7, #0]
}
 80098a8:	bf00      	nop
 80098aa:	bf00      	nop
 80098ac:	e7fd      	b.n	80098aa <vPortValidateInterruptPriority+0x62>
	}
 80098ae:	bf00      	nop
 80098b0:	3714      	adds	r7, #20
 80098b2:	46bd      	mov	sp, r7
 80098b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b8:	4770      	bx	lr
 80098ba:	bf00      	nop
 80098bc:	e000e3f0 	.word	0xe000e3f0
 80098c0:	2000105c 	.word	0x2000105c
 80098c4:	e000ed0c 	.word	0xe000ed0c
 80098c8:	20001060 	.word	0x20001060

080098cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b08a      	sub	sp, #40	@ 0x28
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80098d4:	2300      	movs	r3, #0
 80098d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80098d8:	f7fe fd76 	bl	80083c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80098dc:	4b5c      	ldr	r3, [pc, #368]	@ (8009a50 <pvPortMalloc+0x184>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d101      	bne.n	80098e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80098e4:	f000 f924 	bl	8009b30 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80098e8:	4b5a      	ldr	r3, [pc, #360]	@ (8009a54 <pvPortMalloc+0x188>)
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	4013      	ands	r3, r2
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	f040 8095 	bne.w	8009a20 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d01e      	beq.n	800993a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80098fc:	2208      	movs	r2, #8
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	4413      	add	r3, r2
 8009902:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f003 0307 	and.w	r3, r3, #7
 800990a:	2b00      	cmp	r3, #0
 800990c:	d015      	beq.n	800993a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f023 0307 	bic.w	r3, r3, #7
 8009914:	3308      	adds	r3, #8
 8009916:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f003 0307 	and.w	r3, r3, #7
 800991e:	2b00      	cmp	r3, #0
 8009920:	d00b      	beq.n	800993a <pvPortMalloc+0x6e>
	__asm volatile
 8009922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009926:	f383 8811 	msr	BASEPRI, r3
 800992a:	f3bf 8f6f 	isb	sy
 800992e:	f3bf 8f4f 	dsb	sy
 8009932:	617b      	str	r3, [r7, #20]
}
 8009934:	bf00      	nop
 8009936:	bf00      	nop
 8009938:	e7fd      	b.n	8009936 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d06f      	beq.n	8009a20 <pvPortMalloc+0x154>
 8009940:	4b45      	ldr	r3, [pc, #276]	@ (8009a58 <pvPortMalloc+0x18c>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	429a      	cmp	r2, r3
 8009948:	d86a      	bhi.n	8009a20 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800994a:	4b44      	ldr	r3, [pc, #272]	@ (8009a5c <pvPortMalloc+0x190>)
 800994c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800994e:	4b43      	ldr	r3, [pc, #268]	@ (8009a5c <pvPortMalloc+0x190>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009954:	e004      	b.n	8009960 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009958:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800995a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	687a      	ldr	r2, [r7, #4]
 8009966:	429a      	cmp	r2, r3
 8009968:	d903      	bls.n	8009972 <pvPortMalloc+0xa6>
 800996a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d1f1      	bne.n	8009956 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009972:	4b37      	ldr	r3, [pc, #220]	@ (8009a50 <pvPortMalloc+0x184>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009978:	429a      	cmp	r2, r3
 800997a:	d051      	beq.n	8009a20 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800997c:	6a3b      	ldr	r3, [r7, #32]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	2208      	movs	r2, #8
 8009982:	4413      	add	r3, r2
 8009984:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009988:	681a      	ldr	r2, [r3, #0]
 800998a:	6a3b      	ldr	r3, [r7, #32]
 800998c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800998e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009990:	685a      	ldr	r2, [r3, #4]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	1ad2      	subs	r2, r2, r3
 8009996:	2308      	movs	r3, #8
 8009998:	005b      	lsls	r3, r3, #1
 800999a:	429a      	cmp	r2, r3
 800999c:	d920      	bls.n	80099e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800999e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	4413      	add	r3, r2
 80099a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80099a6:	69bb      	ldr	r3, [r7, #24]
 80099a8:	f003 0307 	and.w	r3, r3, #7
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d00b      	beq.n	80099c8 <pvPortMalloc+0xfc>
	__asm volatile
 80099b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099b4:	f383 8811 	msr	BASEPRI, r3
 80099b8:	f3bf 8f6f 	isb	sy
 80099bc:	f3bf 8f4f 	dsb	sy
 80099c0:	613b      	str	r3, [r7, #16]
}
 80099c2:	bf00      	nop
 80099c4:	bf00      	nop
 80099c6:	e7fd      	b.n	80099c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80099c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ca:	685a      	ldr	r2, [r3, #4]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	1ad2      	subs	r2, r2, r3
 80099d0:	69bb      	ldr	r3, [r7, #24]
 80099d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80099d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099d6:	687a      	ldr	r2, [r7, #4]
 80099d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80099da:	69b8      	ldr	r0, [r7, #24]
 80099dc:	f000 f90a 	bl	8009bf4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80099e0:	4b1d      	ldr	r3, [pc, #116]	@ (8009a58 <pvPortMalloc+0x18c>)
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	1ad3      	subs	r3, r2, r3
 80099ea:	4a1b      	ldr	r2, [pc, #108]	@ (8009a58 <pvPortMalloc+0x18c>)
 80099ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80099ee:	4b1a      	ldr	r3, [pc, #104]	@ (8009a58 <pvPortMalloc+0x18c>)
 80099f0:	681a      	ldr	r2, [r3, #0]
 80099f2:	4b1b      	ldr	r3, [pc, #108]	@ (8009a60 <pvPortMalloc+0x194>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	429a      	cmp	r2, r3
 80099f8:	d203      	bcs.n	8009a02 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80099fa:	4b17      	ldr	r3, [pc, #92]	@ (8009a58 <pvPortMalloc+0x18c>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4a18      	ldr	r2, [pc, #96]	@ (8009a60 <pvPortMalloc+0x194>)
 8009a00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a04:	685a      	ldr	r2, [r3, #4]
 8009a06:	4b13      	ldr	r3, [pc, #76]	@ (8009a54 <pvPortMalloc+0x188>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	431a      	orrs	r2, r3
 8009a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a12:	2200      	movs	r2, #0
 8009a14:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009a16:	4b13      	ldr	r3, [pc, #76]	@ (8009a64 <pvPortMalloc+0x198>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	4a11      	ldr	r2, [pc, #68]	@ (8009a64 <pvPortMalloc+0x198>)
 8009a1e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009a20:	f7fe fce0 	bl	80083e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a24:	69fb      	ldr	r3, [r7, #28]
 8009a26:	f003 0307 	and.w	r3, r3, #7
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d00b      	beq.n	8009a46 <pvPortMalloc+0x17a>
	__asm volatile
 8009a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a32:	f383 8811 	msr	BASEPRI, r3
 8009a36:	f3bf 8f6f 	isb	sy
 8009a3a:	f3bf 8f4f 	dsb	sy
 8009a3e:	60fb      	str	r3, [r7, #12]
}
 8009a40:	bf00      	nop
 8009a42:	bf00      	nop
 8009a44:	e7fd      	b.n	8009a42 <pvPortMalloc+0x176>
	return pvReturn;
 8009a46:	69fb      	ldr	r3, [r7, #28]
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	3728      	adds	r7, #40	@ 0x28
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}
 8009a50:	20001c24 	.word	0x20001c24
 8009a54:	20001c38 	.word	0x20001c38
 8009a58:	20001c28 	.word	0x20001c28
 8009a5c:	20001c1c 	.word	0x20001c1c
 8009a60:	20001c2c 	.word	0x20001c2c
 8009a64:	20001c30 	.word	0x20001c30

08009a68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b086      	sub	sp, #24
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d04f      	beq.n	8009b1a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009a7a:	2308      	movs	r3, #8
 8009a7c:	425b      	negs	r3, r3
 8009a7e:	697a      	ldr	r2, [r7, #20]
 8009a80:	4413      	add	r3, r2
 8009a82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	685a      	ldr	r2, [r3, #4]
 8009a8c:	4b25      	ldr	r3, [pc, #148]	@ (8009b24 <vPortFree+0xbc>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4013      	ands	r3, r2
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d10b      	bne.n	8009aae <vPortFree+0x46>
	__asm volatile
 8009a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a9a:	f383 8811 	msr	BASEPRI, r3
 8009a9e:	f3bf 8f6f 	isb	sy
 8009aa2:	f3bf 8f4f 	dsb	sy
 8009aa6:	60fb      	str	r3, [r7, #12]
}
 8009aa8:	bf00      	nop
 8009aaa:	bf00      	nop
 8009aac:	e7fd      	b.n	8009aaa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d00b      	beq.n	8009ace <vPortFree+0x66>
	__asm volatile
 8009ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aba:	f383 8811 	msr	BASEPRI, r3
 8009abe:	f3bf 8f6f 	isb	sy
 8009ac2:	f3bf 8f4f 	dsb	sy
 8009ac6:	60bb      	str	r3, [r7, #8]
}
 8009ac8:	bf00      	nop
 8009aca:	bf00      	nop
 8009acc:	e7fd      	b.n	8009aca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	685a      	ldr	r2, [r3, #4]
 8009ad2:	4b14      	ldr	r3, [pc, #80]	@ (8009b24 <vPortFree+0xbc>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4013      	ands	r3, r2
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d01e      	beq.n	8009b1a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d11a      	bne.n	8009b1a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	685a      	ldr	r2, [r3, #4]
 8009ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8009b24 <vPortFree+0xbc>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	43db      	mvns	r3, r3
 8009aee:	401a      	ands	r2, r3
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009af4:	f7fe fc68 	bl	80083c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	685a      	ldr	r2, [r3, #4]
 8009afc:	4b0a      	ldr	r3, [pc, #40]	@ (8009b28 <vPortFree+0xc0>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4413      	add	r3, r2
 8009b02:	4a09      	ldr	r2, [pc, #36]	@ (8009b28 <vPortFree+0xc0>)
 8009b04:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009b06:	6938      	ldr	r0, [r7, #16]
 8009b08:	f000 f874 	bl	8009bf4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009b0c:	4b07      	ldr	r3, [pc, #28]	@ (8009b2c <vPortFree+0xc4>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	3301      	adds	r3, #1
 8009b12:	4a06      	ldr	r2, [pc, #24]	@ (8009b2c <vPortFree+0xc4>)
 8009b14:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009b16:	f7fe fc65 	bl	80083e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009b1a:	bf00      	nop
 8009b1c:	3718      	adds	r7, #24
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
 8009b22:	bf00      	nop
 8009b24:	20001c38 	.word	0x20001c38
 8009b28:	20001c28 	.word	0x20001c28
 8009b2c:	20001c34 	.word	0x20001c34

08009b30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009b30:	b480      	push	{r7}
 8009b32:	b085      	sub	sp, #20
 8009b34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009b36:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8009b3a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009b3c:	4b27      	ldr	r3, [pc, #156]	@ (8009bdc <prvHeapInit+0xac>)
 8009b3e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f003 0307 	and.w	r3, r3, #7
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d00c      	beq.n	8009b64 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	3307      	adds	r3, #7
 8009b4e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f023 0307 	bic.w	r3, r3, #7
 8009b56:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009b58:	68ba      	ldr	r2, [r7, #8]
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	1ad3      	subs	r3, r2, r3
 8009b5e:	4a1f      	ldr	r2, [pc, #124]	@ (8009bdc <prvHeapInit+0xac>)
 8009b60:	4413      	add	r3, r2
 8009b62:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009b68:	4a1d      	ldr	r2, [pc, #116]	@ (8009be0 <prvHeapInit+0xb0>)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8009be0 <prvHeapInit+0xb0>)
 8009b70:	2200      	movs	r2, #0
 8009b72:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	68ba      	ldr	r2, [r7, #8]
 8009b78:	4413      	add	r3, r2
 8009b7a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009b7c:	2208      	movs	r2, #8
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	1a9b      	subs	r3, r3, r2
 8009b82:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f023 0307 	bic.w	r3, r3, #7
 8009b8a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	4a15      	ldr	r2, [pc, #84]	@ (8009be4 <prvHeapInit+0xb4>)
 8009b90:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009b92:	4b14      	ldr	r3, [pc, #80]	@ (8009be4 <prvHeapInit+0xb4>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	2200      	movs	r2, #0
 8009b98:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009b9a:	4b12      	ldr	r3, [pc, #72]	@ (8009be4 <prvHeapInit+0xb4>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	68fa      	ldr	r2, [r7, #12]
 8009baa:	1ad2      	subs	r2, r2, r3
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8009be4 <prvHeapInit+0xb4>)
 8009bb2:	681a      	ldr	r2, [r3, #0]
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	4a0a      	ldr	r2, [pc, #40]	@ (8009be8 <prvHeapInit+0xb8>)
 8009bbe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	4a09      	ldr	r2, [pc, #36]	@ (8009bec <prvHeapInit+0xbc>)
 8009bc6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009bc8:	4b09      	ldr	r3, [pc, #36]	@ (8009bf0 <prvHeapInit+0xc0>)
 8009bca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009bce:	601a      	str	r2, [r3, #0]
}
 8009bd0:	bf00      	nop
 8009bd2:	3714      	adds	r7, #20
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr
 8009bdc:	20001064 	.word	0x20001064
 8009be0:	20001c1c 	.word	0x20001c1c
 8009be4:	20001c24 	.word	0x20001c24
 8009be8:	20001c2c 	.word	0x20001c2c
 8009bec:	20001c28 	.word	0x20001c28
 8009bf0:	20001c38 	.word	0x20001c38

08009bf4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b085      	sub	sp, #20
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009bfc:	4b28      	ldr	r3, [pc, #160]	@ (8009ca0 <prvInsertBlockIntoFreeList+0xac>)
 8009bfe:	60fb      	str	r3, [r7, #12]
 8009c00:	e002      	b.n	8009c08 <prvInsertBlockIntoFreeList+0x14>
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	60fb      	str	r3, [r7, #12]
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	687a      	ldr	r2, [r7, #4]
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d8f7      	bhi.n	8009c02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	685b      	ldr	r3, [r3, #4]
 8009c1a:	68ba      	ldr	r2, [r7, #8]
 8009c1c:	4413      	add	r3, r2
 8009c1e:	687a      	ldr	r2, [r7, #4]
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d108      	bne.n	8009c36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	685a      	ldr	r2, [r3, #4]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	441a      	add	r2, r3
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	68ba      	ldr	r2, [r7, #8]
 8009c40:	441a      	add	r2, r3
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	429a      	cmp	r2, r3
 8009c48:	d118      	bne.n	8009c7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681a      	ldr	r2, [r3, #0]
 8009c4e:	4b15      	ldr	r3, [pc, #84]	@ (8009ca4 <prvInsertBlockIntoFreeList+0xb0>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	429a      	cmp	r2, r3
 8009c54:	d00d      	beq.n	8009c72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	685a      	ldr	r2, [r3, #4]
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	441a      	add	r2, r3
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	601a      	str	r2, [r3, #0]
 8009c70:	e008      	b.n	8009c84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009c72:	4b0c      	ldr	r3, [pc, #48]	@ (8009ca4 <prvInsertBlockIntoFreeList+0xb0>)
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	601a      	str	r2, [r3, #0]
 8009c7a:	e003      	b.n	8009c84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681a      	ldr	r2, [r3, #0]
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009c84:	68fa      	ldr	r2, [r7, #12]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	d002      	beq.n	8009c92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c92:	bf00      	nop
 8009c94:	3714      	adds	r7, #20
 8009c96:	46bd      	mov	sp, r7
 8009c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9c:	4770      	bx	lr
 8009c9e:	bf00      	nop
 8009ca0:	20001c1c 	.word	0x20001c1c
 8009ca4:	20001c24 	.word	0x20001c24

08009ca8 <memset>:
 8009ca8:	4402      	add	r2, r0
 8009caa:	4603      	mov	r3, r0
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d100      	bne.n	8009cb2 <memset+0xa>
 8009cb0:	4770      	bx	lr
 8009cb2:	f803 1b01 	strb.w	r1, [r3], #1
 8009cb6:	e7f9      	b.n	8009cac <memset+0x4>

08009cb8 <_reclaim_reent>:
 8009cb8:	4b29      	ldr	r3, [pc, #164]	@ (8009d60 <_reclaim_reent+0xa8>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4283      	cmp	r3, r0
 8009cbe:	b570      	push	{r4, r5, r6, lr}
 8009cc0:	4604      	mov	r4, r0
 8009cc2:	d04b      	beq.n	8009d5c <_reclaim_reent+0xa4>
 8009cc4:	69c3      	ldr	r3, [r0, #28]
 8009cc6:	b1ab      	cbz	r3, 8009cf4 <_reclaim_reent+0x3c>
 8009cc8:	68db      	ldr	r3, [r3, #12]
 8009cca:	b16b      	cbz	r3, 8009ce8 <_reclaim_reent+0x30>
 8009ccc:	2500      	movs	r5, #0
 8009cce:	69e3      	ldr	r3, [r4, #28]
 8009cd0:	68db      	ldr	r3, [r3, #12]
 8009cd2:	5959      	ldr	r1, [r3, r5]
 8009cd4:	2900      	cmp	r1, #0
 8009cd6:	d13b      	bne.n	8009d50 <_reclaim_reent+0x98>
 8009cd8:	3504      	adds	r5, #4
 8009cda:	2d80      	cmp	r5, #128	@ 0x80
 8009cdc:	d1f7      	bne.n	8009cce <_reclaim_reent+0x16>
 8009cde:	69e3      	ldr	r3, [r4, #28]
 8009ce0:	4620      	mov	r0, r4
 8009ce2:	68d9      	ldr	r1, [r3, #12]
 8009ce4:	f000 f872 	bl	8009dcc <_free_r>
 8009ce8:	69e3      	ldr	r3, [r4, #28]
 8009cea:	6819      	ldr	r1, [r3, #0]
 8009cec:	b111      	cbz	r1, 8009cf4 <_reclaim_reent+0x3c>
 8009cee:	4620      	mov	r0, r4
 8009cf0:	f000 f86c 	bl	8009dcc <_free_r>
 8009cf4:	6961      	ldr	r1, [r4, #20]
 8009cf6:	b111      	cbz	r1, 8009cfe <_reclaim_reent+0x46>
 8009cf8:	4620      	mov	r0, r4
 8009cfa:	f000 f867 	bl	8009dcc <_free_r>
 8009cfe:	69e1      	ldr	r1, [r4, #28]
 8009d00:	b111      	cbz	r1, 8009d08 <_reclaim_reent+0x50>
 8009d02:	4620      	mov	r0, r4
 8009d04:	f000 f862 	bl	8009dcc <_free_r>
 8009d08:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009d0a:	b111      	cbz	r1, 8009d12 <_reclaim_reent+0x5a>
 8009d0c:	4620      	mov	r0, r4
 8009d0e:	f000 f85d 	bl	8009dcc <_free_r>
 8009d12:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009d14:	b111      	cbz	r1, 8009d1c <_reclaim_reent+0x64>
 8009d16:	4620      	mov	r0, r4
 8009d18:	f000 f858 	bl	8009dcc <_free_r>
 8009d1c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009d1e:	b111      	cbz	r1, 8009d26 <_reclaim_reent+0x6e>
 8009d20:	4620      	mov	r0, r4
 8009d22:	f000 f853 	bl	8009dcc <_free_r>
 8009d26:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009d28:	b111      	cbz	r1, 8009d30 <_reclaim_reent+0x78>
 8009d2a:	4620      	mov	r0, r4
 8009d2c:	f000 f84e 	bl	8009dcc <_free_r>
 8009d30:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009d32:	b111      	cbz	r1, 8009d3a <_reclaim_reent+0x82>
 8009d34:	4620      	mov	r0, r4
 8009d36:	f000 f849 	bl	8009dcc <_free_r>
 8009d3a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009d3c:	b111      	cbz	r1, 8009d44 <_reclaim_reent+0x8c>
 8009d3e:	4620      	mov	r0, r4
 8009d40:	f000 f844 	bl	8009dcc <_free_r>
 8009d44:	6a23      	ldr	r3, [r4, #32]
 8009d46:	b14b      	cbz	r3, 8009d5c <_reclaim_reent+0xa4>
 8009d48:	4620      	mov	r0, r4
 8009d4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009d4e:	4718      	bx	r3
 8009d50:	680e      	ldr	r6, [r1, #0]
 8009d52:	4620      	mov	r0, r4
 8009d54:	f000 f83a 	bl	8009dcc <_free_r>
 8009d58:	4631      	mov	r1, r6
 8009d5a:	e7bb      	b.n	8009cd4 <_reclaim_reent+0x1c>
 8009d5c:	bd70      	pop	{r4, r5, r6, pc}
 8009d5e:	bf00      	nop
 8009d60:	20000010 	.word	0x20000010

08009d64 <__libc_init_array>:
 8009d64:	b570      	push	{r4, r5, r6, lr}
 8009d66:	4d0d      	ldr	r5, [pc, #52]	@ (8009d9c <__libc_init_array+0x38>)
 8009d68:	4c0d      	ldr	r4, [pc, #52]	@ (8009da0 <__libc_init_array+0x3c>)
 8009d6a:	1b64      	subs	r4, r4, r5
 8009d6c:	10a4      	asrs	r4, r4, #2
 8009d6e:	2600      	movs	r6, #0
 8009d70:	42a6      	cmp	r6, r4
 8009d72:	d109      	bne.n	8009d88 <__libc_init_array+0x24>
 8009d74:	4d0b      	ldr	r5, [pc, #44]	@ (8009da4 <__libc_init_array+0x40>)
 8009d76:	4c0c      	ldr	r4, [pc, #48]	@ (8009da8 <__libc_init_array+0x44>)
 8009d78:	f000 f87e 	bl	8009e78 <_init>
 8009d7c:	1b64      	subs	r4, r4, r5
 8009d7e:	10a4      	asrs	r4, r4, #2
 8009d80:	2600      	movs	r6, #0
 8009d82:	42a6      	cmp	r6, r4
 8009d84:	d105      	bne.n	8009d92 <__libc_init_array+0x2e>
 8009d86:	bd70      	pop	{r4, r5, r6, pc}
 8009d88:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d8c:	4798      	blx	r3
 8009d8e:	3601      	adds	r6, #1
 8009d90:	e7ee      	b.n	8009d70 <__libc_init_array+0xc>
 8009d92:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d96:	4798      	blx	r3
 8009d98:	3601      	adds	r6, #1
 8009d9a:	e7f2      	b.n	8009d82 <__libc_init_array+0x1e>
 8009d9c:	08009fbc 	.word	0x08009fbc
 8009da0:	08009fbc 	.word	0x08009fbc
 8009da4:	08009fbc 	.word	0x08009fbc
 8009da8:	08009fc0 	.word	0x08009fc0

08009dac <__retarget_lock_acquire_recursive>:
 8009dac:	4770      	bx	lr

08009dae <__retarget_lock_release_recursive>:
 8009dae:	4770      	bx	lr

08009db0 <memcpy>:
 8009db0:	440a      	add	r2, r1
 8009db2:	4291      	cmp	r1, r2
 8009db4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009db8:	d100      	bne.n	8009dbc <memcpy+0xc>
 8009dba:	4770      	bx	lr
 8009dbc:	b510      	push	{r4, lr}
 8009dbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009dc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009dc6:	4291      	cmp	r1, r2
 8009dc8:	d1f9      	bne.n	8009dbe <memcpy+0xe>
 8009dca:	bd10      	pop	{r4, pc}

08009dcc <_free_r>:
 8009dcc:	b538      	push	{r3, r4, r5, lr}
 8009dce:	4605      	mov	r5, r0
 8009dd0:	2900      	cmp	r1, #0
 8009dd2:	d041      	beq.n	8009e58 <_free_r+0x8c>
 8009dd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009dd8:	1f0c      	subs	r4, r1, #4
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	bfb8      	it	lt
 8009dde:	18e4      	addlt	r4, r4, r3
 8009de0:	f000 f83e 	bl	8009e60 <__malloc_lock>
 8009de4:	4a1d      	ldr	r2, [pc, #116]	@ (8009e5c <_free_r+0x90>)
 8009de6:	6813      	ldr	r3, [r2, #0]
 8009de8:	b933      	cbnz	r3, 8009df8 <_free_r+0x2c>
 8009dea:	6063      	str	r3, [r4, #4]
 8009dec:	6014      	str	r4, [r2, #0]
 8009dee:	4628      	mov	r0, r5
 8009df0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009df4:	f000 b83a 	b.w	8009e6c <__malloc_unlock>
 8009df8:	42a3      	cmp	r3, r4
 8009dfa:	d908      	bls.n	8009e0e <_free_r+0x42>
 8009dfc:	6820      	ldr	r0, [r4, #0]
 8009dfe:	1821      	adds	r1, r4, r0
 8009e00:	428b      	cmp	r3, r1
 8009e02:	bf01      	itttt	eq
 8009e04:	6819      	ldreq	r1, [r3, #0]
 8009e06:	685b      	ldreq	r3, [r3, #4]
 8009e08:	1809      	addeq	r1, r1, r0
 8009e0a:	6021      	streq	r1, [r4, #0]
 8009e0c:	e7ed      	b.n	8009dea <_free_r+0x1e>
 8009e0e:	461a      	mov	r2, r3
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	b10b      	cbz	r3, 8009e18 <_free_r+0x4c>
 8009e14:	42a3      	cmp	r3, r4
 8009e16:	d9fa      	bls.n	8009e0e <_free_r+0x42>
 8009e18:	6811      	ldr	r1, [r2, #0]
 8009e1a:	1850      	adds	r0, r2, r1
 8009e1c:	42a0      	cmp	r0, r4
 8009e1e:	d10b      	bne.n	8009e38 <_free_r+0x6c>
 8009e20:	6820      	ldr	r0, [r4, #0]
 8009e22:	4401      	add	r1, r0
 8009e24:	1850      	adds	r0, r2, r1
 8009e26:	4283      	cmp	r3, r0
 8009e28:	6011      	str	r1, [r2, #0]
 8009e2a:	d1e0      	bne.n	8009dee <_free_r+0x22>
 8009e2c:	6818      	ldr	r0, [r3, #0]
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	6053      	str	r3, [r2, #4]
 8009e32:	4408      	add	r0, r1
 8009e34:	6010      	str	r0, [r2, #0]
 8009e36:	e7da      	b.n	8009dee <_free_r+0x22>
 8009e38:	d902      	bls.n	8009e40 <_free_r+0x74>
 8009e3a:	230c      	movs	r3, #12
 8009e3c:	602b      	str	r3, [r5, #0]
 8009e3e:	e7d6      	b.n	8009dee <_free_r+0x22>
 8009e40:	6820      	ldr	r0, [r4, #0]
 8009e42:	1821      	adds	r1, r4, r0
 8009e44:	428b      	cmp	r3, r1
 8009e46:	bf04      	itt	eq
 8009e48:	6819      	ldreq	r1, [r3, #0]
 8009e4a:	685b      	ldreq	r3, [r3, #4]
 8009e4c:	6063      	str	r3, [r4, #4]
 8009e4e:	bf04      	itt	eq
 8009e50:	1809      	addeq	r1, r1, r0
 8009e52:	6021      	streq	r1, [r4, #0]
 8009e54:	6054      	str	r4, [r2, #4]
 8009e56:	e7ca      	b.n	8009dee <_free_r+0x22>
 8009e58:	bd38      	pop	{r3, r4, r5, pc}
 8009e5a:	bf00      	nop
 8009e5c:	20001d78 	.word	0x20001d78

08009e60 <__malloc_lock>:
 8009e60:	4801      	ldr	r0, [pc, #4]	@ (8009e68 <__malloc_lock+0x8>)
 8009e62:	f7ff bfa3 	b.w	8009dac <__retarget_lock_acquire_recursive>
 8009e66:	bf00      	nop
 8009e68:	20001d74 	.word	0x20001d74

08009e6c <__malloc_unlock>:
 8009e6c:	4801      	ldr	r0, [pc, #4]	@ (8009e74 <__malloc_unlock+0x8>)
 8009e6e:	f7ff bf9e 	b.w	8009dae <__retarget_lock_release_recursive>
 8009e72:	bf00      	nop
 8009e74:	20001d74 	.word	0x20001d74

08009e78 <_init>:
 8009e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e7a:	bf00      	nop
 8009e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e7e:	bc08      	pop	{r3}
 8009e80:	469e      	mov	lr, r3
 8009e82:	4770      	bx	lr

08009e84 <_fini>:
 8009e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e86:	bf00      	nop
 8009e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e8a:	bc08      	pop	{r3}
 8009e8c:	469e      	mov	lr, r3
 8009e8e:	4770      	bx	lr
