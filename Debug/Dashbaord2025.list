
Dashbaord2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009430  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  080095e0  080095e0  0000a5e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800970c  0800970c  0000b060  2**0
                  CONTENTS
  4 .ARM          00000008  0800970c  0800970c  0000a70c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009714  08009714  0000b060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009714  08009714  0000a714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009718  08009718  0000a718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800971c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d10  20000060  0800977c  0000b060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d70  0800977c  0000bd70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002616a  00000000  00000000  0000b090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000490f  00000000  00000000  000311fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002060  00000000  00000000  00035b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000194b  00000000  00000000  00037b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dd02  00000000  00000000  000394bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025685  00000000  00000000  000671bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00124084  00000000  00000000  0008c842  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b08c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008e90  00000000  00000000  001b090c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001b979c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080095c8 	.word	0x080095c8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	080095c8 	.word	0x080095c8

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b96a 	b.w	80004dc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	460c      	mov	r4, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14e      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022c:	4694      	mov	ip, r2
 800022e:	458c      	cmp	ip, r1
 8000230:	4686      	mov	lr, r0
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	d962      	bls.n	80002fe <__udivmoddi4+0xde>
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0320 	rsb	r3, r2, #32
 800023e:	4091      	lsls	r1, r2
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	fa0c fc02 	lsl.w	ip, ip, r2
 8000248:	4319      	orrs	r1, r3
 800024a:	fa00 fe02 	lsl.w	lr, r0, r2
 800024e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000252:	fa1f f68c 	uxth.w	r6, ip
 8000256:	fbb1 f4f7 	udiv	r4, r1, r7
 800025a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025e:	fb07 1114 	mls	r1, r7, r4, r1
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	fb04 f106 	mul.w	r1, r4, r6
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f104 30ff 	add.w	r0, r4, #4294967295
 8000276:	f080 8112 	bcs.w	800049e <__udivmoddi4+0x27e>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 810f 	bls.w	800049e <__udivmoddi4+0x27e>
 8000280:	3c02      	subs	r4, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a59      	subs	r1, r3, r1
 8000286:	fa1f f38e 	uxth.w	r3, lr
 800028a:	fbb1 f0f7 	udiv	r0, r1, r7
 800028e:	fb07 1110 	mls	r1, r7, r0, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb00 f606 	mul.w	r6, r0, r6
 800029a:	429e      	cmp	r6, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x94>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a6:	f080 80fc 	bcs.w	80004a2 <__udivmoddi4+0x282>
 80002aa:	429e      	cmp	r6, r3
 80002ac:	f240 80f9 	bls.w	80004a2 <__udivmoddi4+0x282>
 80002b0:	4463      	add	r3, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	1b9b      	subs	r3, r3, r6
 80002b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11d      	cbz	r5, 80002c6 <__udivmoddi4+0xa6>
 80002be:	40d3      	lsrs	r3, r2
 80002c0:	2200      	movs	r2, #0
 80002c2:	e9c5 3200 	strd	r3, r2, [r5]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d905      	bls.n	80002da <__udivmoddi4+0xba>
 80002ce:	b10d      	cbz	r5, 80002d4 <__udivmoddi4+0xb4>
 80002d0:	e9c5 0100 	strd	r0, r1, [r5]
 80002d4:	2100      	movs	r1, #0
 80002d6:	4608      	mov	r0, r1
 80002d8:	e7f5      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d146      	bne.n	8000370 <__udivmoddi4+0x150>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xcc>
 80002e6:	4290      	cmp	r0, r2
 80002e8:	f0c0 80f0 	bcc.w	80004cc <__udivmoddi4+0x2ac>
 80002ec:	1a86      	subs	r6, r0, r2
 80002ee:	eb64 0303 	sbc.w	r3, r4, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d0e6      	beq.n	80002c6 <__udivmoddi4+0xa6>
 80002f8:	e9c5 6300 	strd	r6, r3, [r5]
 80002fc:	e7e3      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x204>
 8000304:	eba1 040c 	sub.w	r4, r1, ip
 8000308:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800030c:	fa1f f78c 	uxth.w	r7, ip
 8000310:	2101      	movs	r1, #1
 8000312:	fbb4 f6f8 	udiv	r6, r4, r8
 8000316:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031a:	fb08 4416 	mls	r4, r8, r6, r4
 800031e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000322:	fb07 f006 	mul.w	r0, r7, r6
 8000326:	4298      	cmp	r0, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x11c>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x11a>
 8000334:	4298      	cmp	r0, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 800033a:	4626      	mov	r6, r4
 800033c:	1a1c      	subs	r4, r3, r0
 800033e:	fa1f f38e 	uxth.w	r3, lr
 8000342:	fbb4 f0f8 	udiv	r0, r4, r8
 8000346:	fb08 4410 	mls	r4, r8, r0, r4
 800034a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034e:	fb00 f707 	mul.w	r7, r0, r7
 8000352:	429f      	cmp	r7, r3
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x148>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f100 34ff 	add.w	r4, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x146>
 8000360:	429f      	cmp	r7, r3
 8000362:	f200 80b0 	bhi.w	80004c6 <__udivmoddi4+0x2a6>
 8000366:	4620      	mov	r0, r4
 8000368:	1bdb      	subs	r3, r3, r7
 800036a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0x9c>
 8000370:	f1c1 0620 	rsb	r6, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 f706 	lsr.w	r7, r2, r6
 800037a:	431f      	orrs	r7, r3
 800037c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000380:	fa04 f301 	lsl.w	r3, r4, r1
 8000384:	ea43 030c 	orr.w	r3, r3, ip
 8000388:	40f4      	lsrs	r4, r6
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	0c38      	lsrs	r0, r7, #16
 8000390:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000394:	fbb4 fef0 	udiv	lr, r4, r0
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	fb00 441e 	mls	r4, r0, lr, r4
 80003a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a4:	fb0e f90c 	mul.w	r9, lr, ip
 80003a8:	45a1      	cmp	r9, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x1a6>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b6:	f080 8084 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80003ba:	45a1      	cmp	r9, r4
 80003bc:	f240 8081 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80003c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	eba4 0409 	sub.w	r4, r4, r9
 80003ca:	fa1f f983 	uxth.w	r9, r3
 80003ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d2:	fb00 4413 	mls	r4, r0, r3, r4
 80003d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003da:	fb03 fc0c 	mul.w	ip, r3, ip
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x1d2>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e8:	d267      	bcs.n	80004ba <__udivmoddi4+0x29a>
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d965      	bls.n	80004ba <__udivmoddi4+0x29a>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	443c      	add	r4, r7
 80003f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f6:	fba0 9302 	umull	r9, r3, r0, r2
 80003fa:	eba4 040c 	sub.w	r4, r4, ip
 80003fe:	429c      	cmp	r4, r3
 8000400:	46ce      	mov	lr, r9
 8000402:	469c      	mov	ip, r3
 8000404:	d351      	bcc.n	80004aa <__udivmoddi4+0x28a>
 8000406:	d04e      	beq.n	80004a6 <__udivmoddi4+0x286>
 8000408:	b155      	cbz	r5, 8000420 <__udivmoddi4+0x200>
 800040a:	ebb8 030e 	subs.w	r3, r8, lr
 800040e:	eb64 040c 	sbc.w	r4, r4, ip
 8000412:	fa04 f606 	lsl.w	r6, r4, r6
 8000416:	40cb      	lsrs	r3, r1
 8000418:	431e      	orrs	r6, r3
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c5 6400 	strd	r6, r4, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	e750      	b.n	80002c6 <__udivmoddi4+0xa6>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f103 	lsr.w	r1, r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa24 f303 	lsr.w	r3, r4, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	430c      	orrs	r4, r1
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000440:	fa1f f78c 	uxth.w	r7, ip
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3110 	mls	r1, r8, r0, r3
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000452:	fb00 f107 	mul.w	r1, r0, r7
 8000456:	4299      	cmp	r1, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x24c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000462:	d22c      	bcs.n	80004be <__udivmoddi4+0x29e>
 8000464:	4299      	cmp	r1, r3
 8000466:	d92a      	bls.n	80004be <__udivmoddi4+0x29e>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb3 f1f8 	udiv	r1, r3, r8
 8000474:	fb08 3311 	mls	r3, r8, r1, r3
 8000478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047c:	fb01 f307 	mul.w	r3, r1, r7
 8000480:	42a3      	cmp	r3, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x276>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f101 36ff 	add.w	r6, r1, #4294967295
 800048c:	d213      	bcs.n	80004b6 <__udivmoddi4+0x296>
 800048e:	42a3      	cmp	r3, r4
 8000490:	d911      	bls.n	80004b6 <__udivmoddi4+0x296>
 8000492:	3902      	subs	r1, #2
 8000494:	4464      	add	r4, ip
 8000496:	1ae4      	subs	r4, r4, r3
 8000498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049c:	e739      	b.n	8000312 <__udivmoddi4+0xf2>
 800049e:	4604      	mov	r4, r0
 80004a0:	e6f0      	b.n	8000284 <__udivmoddi4+0x64>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e706      	b.n	80002b4 <__udivmoddi4+0x94>
 80004a6:	45c8      	cmp	r8, r9
 80004a8:	d2ae      	bcs.n	8000408 <__udivmoddi4+0x1e8>
 80004aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7a8      	b.n	8000408 <__udivmoddi4+0x1e8>
 80004b6:	4631      	mov	r1, r6
 80004b8:	e7ed      	b.n	8000496 <__udivmoddi4+0x276>
 80004ba:	4603      	mov	r3, r0
 80004bc:	e799      	b.n	80003f2 <__udivmoddi4+0x1d2>
 80004be:	4630      	mov	r0, r6
 80004c0:	e7d4      	b.n	800046c <__udivmoddi4+0x24c>
 80004c2:	46d6      	mov	lr, sl
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1a6>
 80004c6:	4463      	add	r3, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e74d      	b.n	8000368 <__udivmoddi4+0x148>
 80004cc:	4606      	mov	r6, r0
 80004ce:	4623      	mov	r3, r4
 80004d0:	4608      	mov	r0, r1
 80004d2:	e70f      	b.n	80002f4 <__udivmoddi4+0xd4>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	e730      	b.n	800033c <__udivmoddi4+0x11c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <TCAL9538RSVR_INIT>:
    
    return pin_number; 
}

uint8_t TCAL9538RSVR_INIT(TCAL9538RSVR *dev, I2C_HandleTypeDef *i2cHandle, uint8_t hardwareAddress, uint8_t direction_bitMask, uint8_t interrupt_bitMask)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b086      	sub	sp, #24
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	4611      	mov	r1, r2
 80004ec:	461a      	mov	r2, r3
 80004ee:	460b      	mov	r3, r1
 80004f0:	71fb      	strb	r3, [r7, #7]
 80004f2:	4613      	mov	r3, r2
 80004f4:	71bb      	strb	r3, [r7, #6]
	uint8_t errNum = 0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef status;


    dev->i2cHandle = i2cHandle;
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	68ba      	ldr	r2, [r7, #8]
 80004fe:	601a      	str	r2, [r3, #0]
    dev->portValues = 0;
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	2200      	movs	r2, #0
 8000504:	715a      	strb	r2, [r3, #5]
    // hardware address should be from 0-3
    // (A0 = GND, A1 = GND) == 0
    hardwareAddress &= 0b00000011;
 8000506:	79fb      	ldrb	r3, [r7, #7]
 8000508:	f003 0303 	and.w	r3, r3, #3
 800050c:	71fb      	strb	r3, [r7, #7]
    dev->deviceAddress = TCAL9538RSVR_ADDR | (hardwareAddress << 1);
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	005b      	lsls	r3, r3, #1
 8000512:	b25b      	sxtb	r3, r3
 8000514:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8000518:	b25b      	sxtb	r3, r3
 800051a:	b2da      	uxtb	r2, r3
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	711a      	strb	r2, [r3, #4]

    status = TCAL9538RSVR_SetDirection(dev, direction_bitMask);
 8000520:	79bb      	ldrb	r3, [r7, #6]
 8000522:	4619      	mov	r1, r3
 8000524:	68f8      	ldr	r0, [r7, #12]
 8000526:	f000 f823 	bl	8000570 <TCAL9538RSVR_SetDirection>
 800052a:	4603      	mov	r3, r0
 800052c:	75bb      	strb	r3, [r7, #22]
    errNum += (status != HAL_OK);
 800052e:	7dbb      	ldrb	r3, [r7, #22]
 8000530:	2b00      	cmp	r3, #0
 8000532:	bf14      	ite	ne
 8000534:	2301      	movne	r3, #1
 8000536:	2300      	moveq	r3, #0
 8000538:	b2db      	uxtb	r3, r3
 800053a:	461a      	mov	r2, r3
 800053c:	7dfb      	ldrb	r3, [r7, #23]
 800053e:	4413      	add	r3, r2
 8000540:	75fb      	strb	r3, [r7, #23]

    status = TCAL9538RSVR_SetInterrupts(dev, interrupt_bitMask);
 8000542:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000546:	4619      	mov	r1, r3
 8000548:	68f8      	ldr	r0, [r7, #12]
 800054a:	f000 f822 	bl	8000592 <TCAL9538RSVR_SetInterrupts>
 800054e:	4603      	mov	r3, r0
 8000550:	75bb      	strb	r3, [r7, #22]
    errNum += (status != HAL_OK);
 8000552:	7dbb      	ldrb	r3, [r7, #22]
 8000554:	2b00      	cmp	r3, #0
 8000556:	bf14      	ite	ne
 8000558:	2301      	movne	r3, #1
 800055a:	2300      	moveq	r3, #0
 800055c:	b2db      	uxtb	r3, r3
 800055e:	461a      	mov	r2, r3
 8000560:	7dfb      	ldrb	r3, [r7, #23]
 8000562:	4413      	add	r3, r2
 8000564:	75fb      	strb	r3, [r7, #23]

    return (errNum);
 8000566:	7dfb      	ldrb	r3, [r7, #23]
}
 8000568:	4618      	mov	r0, r3
 800056a:	3718      	adds	r7, #24
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}

08000570 <TCAL9538RSVR_SetDirection>:
 * @param uint8_t : bitMask -> '1' is input
 * 					default is input
 * @retval HAL_StatusTypeDef : HAL_Status
 */
HAL_StatusTypeDef TCAL9538RSVR_SetDirection(TCAL9538RSVR* dev, uint8_t bitMask)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	460b      	mov	r3, r1
 800057a:	70fb      	strb	r3, [r7, #3]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_DIR_CONFIG, &bitMask);
 800057c:	1cfb      	adds	r3, r7, #3
 800057e:	461a      	mov	r2, r3
 8000580:	2103      	movs	r1, #3
 8000582:	6878      	ldr	r0, [r7, #4]
 8000584:	f000 f88c 	bl	80006a0 <TCAL9538RSVR_WriteRegister>
 8000588:	4603      	mov	r3, r0
}
 800058a:	4618      	mov	r0, r3
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}

08000592 <TCAL9538RSVR_SetInterrupts>:
 * @brief Sets interrupt register
 * @param uint8_t : bitMask -> '0' will enable interrupts for that pin
 * @retval HAL_StatusTypeDef : HAL_Status
 */
HAL_StatusTypeDef TCAL9538RSVR_SetInterrupts(TCAL9538RSVR* dev, uint8_t bitMask)
{
 8000592:	b580      	push	{r7, lr}
 8000594:	b082      	sub	sp, #8
 8000596:	af00      	add	r7, sp, #0
 8000598:	6078      	str	r0, [r7, #4]
 800059a:	460b      	mov	r3, r1
 800059c:	70fb      	strb	r3, [r7, #3]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_INT_CONFIG, &bitMask);
 800059e:	1cfb      	adds	r3, r7, #3
 80005a0:	461a      	mov	r2, r3
 80005a2:	2145      	movs	r1, #69	@ 0x45
 80005a4:	6878      	ldr	r0, [r7, #4]
 80005a6:	f000 f87b 	bl	80006a0 <TCAL9538RSVR_WriteRegister>
 80005aa:	4603      	mov	r3, r0
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <TCAL9538RSVR_HandleInterrupt>:
 * @brief Handles interrupt and returns pin# that triggered
 * 			stores triggered pin in dev->triggeredInterrupt
 * @retval uint8_t : errNum
 */
HAL_StatusTypeDef TCAL9538RSVR_HandleInterrupt(TCAL9538RSVR* dev)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
    uint8_t errNum = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status;
    uint8_t triggeredInterrupts = 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	737b      	strb	r3, [r7, #13]

    // read interrupt status register, puts a bit mask of the pin that triggered the interrupt in intPinBitMask
    status = TCAL9538RSVR_ReadInput(dev, &dev->portValues);
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	3305      	adds	r3, #5
 80005c8:	4619      	mov	r1, r3
 80005ca:	6878      	ldr	r0, [r7, #4]
 80005cc:	f000 f82d 	bl	800062a <TCAL9538RSVR_ReadInput>
 80005d0:	4603      	mov	r3, r0
 80005d2:	73bb      	strb	r3, [r7, #14]

    status = TCAL9538RSVR_ReadRegister(dev, TCAL9538RSVR_INT_STATUS, &triggeredInterrupts);
 80005d4:	f107 030d 	add.w	r3, r7, #13
 80005d8:	461a      	mov	r2, r3
 80005da:	2146      	movs	r1, #70	@ 0x46
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f000 f842 	bl	8000666 <TCAL9538RSVR_ReadRegister>
 80005e2:	4603      	mov	r3, r0
 80005e4:	73bb      	strb	r3, [r7, #14]
    errNum += (status != HAL_OK);
 80005e6:	7bbb      	ldrb	r3, [r7, #14]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	bf14      	ite	ne
 80005ec:	2301      	movne	r3, #1
 80005ee:	2300      	moveq	r3, #0
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	461a      	mov	r2, r3
 80005f4:	7bfb      	ldrb	r3, [r7, #15]
 80005f6:	4413      	add	r3, r2
 80005f8:	73fb      	strb	r3, [r7, #15]

    status = TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_INT_STATUS, &triggeredInterrupts);
 80005fa:	f107 030d 	add.w	r3, r7, #13
 80005fe:	461a      	mov	r2, r3
 8000600:	2146      	movs	r1, #70	@ 0x46
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	f000 f84c 	bl	80006a0 <TCAL9538RSVR_WriteRegister>
 8000608:	4603      	mov	r3, r0
 800060a:	73bb      	strb	r3, [r7, #14]
    errNum += (status != HAL_OK);
 800060c:	7bbb      	ldrb	r3, [r7, #14]
 800060e:	2b00      	cmp	r3, #0
 8000610:	bf14      	ite	ne
 8000612:	2301      	movne	r3, #1
 8000614:	2300      	moveq	r3, #0
 8000616:	b2db      	uxtb	r3, r3
 8000618:	461a      	mov	r2, r3
 800061a:	7bfb      	ldrb	r3, [r7, #15]
 800061c:	4413      	add	r3, r2
 800061e:	73fb      	strb	r3, [r7, #15]

    return (errNum);
 8000620:	7bfb      	ldrb	r3, [r7, #15]
}
 8000622:	4618      	mov	r0, r3
 8000624:	3710      	adds	r7, #16
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}

0800062a <TCAL9538RSVR_ReadInput>:
    
// }


HAL_StatusTypeDef TCAL9538RSVR_ReadInput(TCAL9538RSVR* dev, uint8_t *data)
{
 800062a:	b580      	push	{r7, lr}
 800062c:	b082      	sub	sp, #8
 800062e:	af00      	add	r7, sp, #0
 8000630:	6078      	str	r0, [r7, #4]
 8000632:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_ReadRegister(dev, TCAL9538RSVR_GPIO_INPUT, data);
 8000634:	683a      	ldr	r2, [r7, #0]
 8000636:	2100      	movs	r1, #0
 8000638:	6878      	ldr	r0, [r7, #4]
 800063a:	f000 f814 	bl	8000666 <TCAL9538RSVR_ReadRegister>
 800063e:	4603      	mov	r3, r0
}
 8000640:	4618      	mov	r0, r3
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <TCAL9538RSVR_SetOutput>:
HAL_StatusTypeDef TCAL9538RSVR_SetOutput(TCAL9538RSVR* dev, uint8_t *data)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_GPIO_OUTPUT, data);
 8000652:	683a      	ldr	r2, [r7, #0]
 8000654:	2101      	movs	r1, #1
 8000656:	6878      	ldr	r0, [r7, #4]
 8000658:	f000 f822 	bl	80006a0 <TCAL9538RSVR_WriteRegister>
 800065c:	4603      	mov	r3, r0
}
 800065e:	4618      	mov	r0, r3
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}

08000666 <TCAL9538RSVR_ReadRegister>:

//low level functions
HAL_StatusTypeDef TCAL9538RSVR_ReadRegister(TCAL9538RSVR *dev, uint8_t reg, uint8_t *data)
{
 8000666:	b580      	push	{r7, lr}
 8000668:	b088      	sub	sp, #32
 800066a:	af04      	add	r7, sp, #16
 800066c:	60f8      	str	r0, [r7, #12]
 800066e:	460b      	mov	r3, r1
 8000670:	607a      	str	r2, [r7, #4]
 8000672:	72fb      	strb	r3, [r7, #11]
    return(HAL_I2C_Mem_Read(dev->i2cHandle, dev->deviceAddress, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY));
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	6818      	ldr	r0, [r3, #0]
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	791b      	ldrb	r3, [r3, #4]
 800067c:	4619      	mov	r1, r3
 800067e:	7afb      	ldrb	r3, [r7, #11]
 8000680:	b29a      	uxth	r2, r3
 8000682:	f04f 33ff 	mov.w	r3, #4294967295
 8000686:	9302      	str	r3, [sp, #8]
 8000688:	2301      	movs	r3, #1
 800068a:	9301      	str	r3, [sp, #4]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	9300      	str	r3, [sp, #0]
 8000690:	2301      	movs	r3, #1
 8000692:	f002 facd 	bl	8002c30 <HAL_I2C_Mem_Read>
 8000696:	4603      	mov	r3, r0
}
 8000698:	4618      	mov	r0, r3
 800069a:	3710      	adds	r7, #16
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <TCAL9538RSVR_WriteRegister>:
HAL_StatusTypeDef TCAL9538RSVR_WriteRegister(TCAL9538RSVR *dev, uint8_t reg, uint8_t *data)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b088      	sub	sp, #32
 80006a4:	af04      	add	r7, sp, #16
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	460b      	mov	r3, r1
 80006aa:	607a      	str	r2, [r7, #4]
 80006ac:	72fb      	strb	r3, [r7, #11]
    return(HAL_I2C_Mem_Read(dev->i2cHandle, dev->deviceAddress, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY));
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	6818      	ldr	r0, [r3, #0]
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	791b      	ldrb	r3, [r3, #4]
 80006b6:	4619      	mov	r1, r3
 80006b8:	7afb      	ldrb	r3, [r7, #11]
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	f04f 33ff 	mov.w	r3, #4294967295
 80006c0:	9302      	str	r3, [sp, #8]
 80006c2:	2301      	movs	r3, #1
 80006c4:	9301      	str	r3, [sp, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	2301      	movs	r3, #1
 80006cc:	f002 fab0 	bl	8002c30 <HAL_I2C_Mem_Read>
 80006d0:	4603      	mov	r3, r0
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
	...

080006dc <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// GPIO Expander Interrupt Handler
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	80fb      	strh	r3, [r7, #6]
	if (TCAL9538RSVR_HandleInterrupt(&U5) != HAL_OK)
 80006e6:	480a      	ldr	r0, [pc, #40]	@ (8000710 <HAL_GPIO_EXTI_Callback+0x34>)
 80006e8:	f7ff ff64 	bl	80005b4 <TCAL9538RSVR_HandleInterrupt>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <HAL_GPIO_EXTI_Callback+0x1a>
	{
		Error_Handler();
 80006f2:	f000 facb 	bl	8000c8c <Error_Handler>
	}
	if(TCAL9538RSVR_HandleInterrupt(&U16) != HAL_OK)
 80006f6:	4807      	ldr	r0, [pc, #28]	@ (8000714 <HAL_GPIO_EXTI_Callback+0x38>)
 80006f8:	f7ff ff5c 	bl	80005b4 <TCAL9538RSVR_HandleInterrupt>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <HAL_GPIO_EXTI_Callback+0x2a>
	{
		Error_Handler();
 8000702:	f000 fac3 	bl	8000c8c <Error_Handler>
	}
}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000220 	.word	0x20000220
 8000714:	20000228 	.word	0x20000228

08000718 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800071e:	f000 fda2 	bl	8001266 <HAL_Init>

  /* USER CODE BEGIN Init */
  TCAL9538RSVR_INIT(&U5, &hi2c4, 0b10, 0b00001111, 0b00001111); // inputs
 8000722:	230f      	movs	r3, #15
 8000724:	9300      	str	r3, [sp, #0]
 8000726:	230f      	movs	r3, #15
 8000728:	2202      	movs	r2, #2
 800072a:	4926      	ldr	r1, [pc, #152]	@ (80007c4 <main+0xac>)
 800072c:	4826      	ldr	r0, [pc, #152]	@ (80007c8 <main+0xb0>)
 800072e:	f7ff fed7 	bl	80004e0 <TCAL9538RSVR_INIT>
  TCAL9538RSVR_INIT(&U16, &hi2c4, 0b01, 0b11000000, 0b11000000);
 8000732:	23c0      	movs	r3, #192	@ 0xc0
 8000734:	9300      	str	r3, [sp, #0]
 8000736:	23c0      	movs	r3, #192	@ 0xc0
 8000738:	2201      	movs	r2, #1
 800073a:	4922      	ldr	r1, [pc, #136]	@ (80007c4 <main+0xac>)
 800073c:	4823      	ldr	r0, [pc, #140]	@ (80007cc <main+0xb4>)
 800073e:	f7ff fecf 	bl	80004e0 <TCAL9538RSVR_INIT>
  TCAL9538RSVR_INIT(&U7, &hi2c4, 0b00, 0b00000000, 0b00000000); // output
 8000742:	2300      	movs	r3, #0
 8000744:	9300      	str	r3, [sp, #0]
 8000746:	2300      	movs	r3, #0
 8000748:	2200      	movs	r2, #0
 800074a:	491e      	ldr	r1, [pc, #120]	@ (80007c4 <main+0xac>)
 800074c:	4820      	ldr	r0, [pc, #128]	@ (80007d0 <main+0xb8>)
 800074e:	f7ff fec7 	bl	80004e0 <TCAL9538RSVR_INIT>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000752:	f000 f85b 	bl	800080c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000756:	f000 f9ed 	bl	8000b34 <MX_GPIO_Init>
  MX_ADC1_Init();
 800075a:	f000 f89d 	bl	8000898 <MX_ADC1_Init>
  MX_I2C4_Init();
 800075e:	f000 f979 	bl	8000a54 <MX_I2C4_Init>
  MX_CAN1_Init();
 8000762:	f000 f90f 	bl	8000984 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000766:	f000 f941 	bl	80009ec <MX_CAN2_Init>
  MX_UART4_Init();
 800076a:	f000 f9b3 	bl	8000ad4 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart4, &uart_rx, 1); // enables uart interrupt, it will call the interrupt when one byte is recieved
 800076e:	2201      	movs	r2, #1
 8000770:	4918      	ldr	r1, [pc, #96]	@ (80007d4 <main+0xbc>)
 8000772:	4819      	ldr	r0, [pc, #100]	@ (80007d8 <main+0xc0>)
 8000774:	f004 fd2e 	bl	80051d4 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000778:	f006 f88c 	bl	8006894 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HeartBeat */
  HeartBeatHandle = osThreadNew(StartTask01, NULL, &HeartBeat_attributes);
 800077c:	4a17      	ldr	r2, [pc, #92]	@ (80007dc <main+0xc4>)
 800077e:	2100      	movs	r1, #0
 8000780:	4817      	ldr	r0, [pc, #92]	@ (80007e0 <main+0xc8>)
 8000782:	f006 f8d1 	bl	8006928 <osThreadNew>
 8000786:	4603      	mov	r3, r0
 8000788:	4a16      	ldr	r2, [pc, #88]	@ (80007e4 <main+0xcc>)
 800078a:	6013      	str	r3, [r2, #0]

  /* creation of Critical_Inputs */
  Critical_InputsHandle = osThreadNew(StartTask02, NULL, &Critical_Inputs_attributes);
 800078c:	4a16      	ldr	r2, [pc, #88]	@ (80007e8 <main+0xd0>)
 800078e:	2100      	movs	r1, #0
 8000790:	4816      	ldr	r0, [pc, #88]	@ (80007ec <main+0xd4>)
 8000792:	f006 f8c9 	bl	8006928 <osThreadNew>
 8000796:	4603      	mov	r3, r0
 8000798:	4a15      	ldr	r2, [pc, #84]	@ (80007f0 <main+0xd8>)
 800079a:	6013      	str	r3, [r2, #0]

  /* creation of ReadIOExpander */
  ReadIOExpanderHandle = osThreadNew(StartTask03, NULL, &ReadIOExpander_attributes);
 800079c:	4a15      	ldr	r2, [pc, #84]	@ (80007f4 <main+0xdc>)
 800079e:	2100      	movs	r1, #0
 80007a0:	4815      	ldr	r0, [pc, #84]	@ (80007f8 <main+0xe0>)
 80007a2:	f006 f8c1 	bl	8006928 <osThreadNew>
 80007a6:	4603      	mov	r3, r0
 80007a8:	4a14      	ldr	r2, [pc, #80]	@ (80007fc <main+0xe4>)
 80007aa:	6013      	str	r3, [r2, #0]

  /* creation of Outputs_Control */
  Outputs_ControlHandle = osThreadNew(StartTask04, NULL, &Outputs_Control_attributes);
 80007ac:	4a14      	ldr	r2, [pc, #80]	@ (8000800 <main+0xe8>)
 80007ae:	2100      	movs	r1, #0
 80007b0:	4814      	ldr	r0, [pc, #80]	@ (8000804 <main+0xec>)
 80007b2:	f006 f8b9 	bl	8006928 <osThreadNew>
 80007b6:	4603      	mov	r3, r0
 80007b8:	4a13      	ldr	r2, [pc, #76]	@ (8000808 <main+0xf0>)
 80007ba:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80007bc:	f006 f88e 	bl	80068dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007c0:	bf00      	nop
 80007c2:	e7fd      	b.n	80007c0 <main+0xa8>
 80007c4:	20000134 	.word	0x20000134
 80007c8:	20000220 	.word	0x20000220
 80007cc:	20000228 	.word	0x20000228
 80007d0:	20000230 	.word	0x20000230
 80007d4:	20000239 	.word	0x20000239
 80007d8:	20000188 	.word	0x20000188
 80007dc:	08009634 	.word	0x08009634
 80007e0:	08000bfd 	.word	0x08000bfd
 80007e4:	20000210 	.word	0x20000210
 80007e8:	08009658 	.word	0x08009658
 80007ec:	08000c1d 	.word	0x08000c1d
 80007f0:	20000214 	.word	0x20000214
 80007f4:	0800967c 	.word	0x0800967c
 80007f8:	08000c2d 	.word	0x08000c2d
 80007fc:	20000218 	.word	0x20000218
 8000800:	080096a0 	.word	0x080096a0
 8000804:	08000c3d 	.word	0x08000c3d
 8000808:	2000021c 	.word	0x2000021c

0800080c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b096      	sub	sp, #88	@ 0x58
 8000810:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	2244      	movs	r2, #68	@ 0x44
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f008 fdec 	bl	80093f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000820:	463b      	mov	r3, r7
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
 800082c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800082e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000832:	f002 fe2b 	bl	800348c <HAL_PWREx_ControlVoltageScaling>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800083c:	f000 fa26 	bl	8000c8c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000840:	2310      	movs	r3, #16
 8000842:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000844:	2301      	movs	r3, #1
 8000846:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800084c:	2360      	movs	r3, #96	@ 0x60
 800084e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000850:	2300      	movs	r3, #0
 8000852:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	4618      	mov	r0, r3
 800085a:	f002 fe6d 	bl	8003538 <HAL_RCC_OscConfig>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000864:	f000 fa12 	bl	8000c8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000868:	230f      	movs	r3, #15
 800086a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800086c:	2300      	movs	r3, #0
 800086e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000870:	2300      	movs	r3, #0
 8000872:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000878:	2300      	movs	r3, #0
 800087a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800087c:	463b      	mov	r3, r7
 800087e:	2100      	movs	r1, #0
 8000880:	4618      	mov	r0, r3
 8000882:	f003 fa73 	bl	8003d6c <HAL_RCC_ClockConfig>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800088c:	f000 f9fe 	bl	8000c8c <Error_Handler>
  }
}
 8000890:	bf00      	nop
 8000892:	3758      	adds	r7, #88	@ 0x58
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08a      	sub	sp, #40	@ 0x28
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
 80008b8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008ba:	4b2f      	ldr	r3, [pc, #188]	@ (8000978 <MX_ADC1_Init+0xe0>)
 80008bc:	4a2f      	ldr	r2, [pc, #188]	@ (800097c <MX_ADC1_Init+0xe4>)
 80008be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008c0:	4b2d      	ldr	r3, [pc, #180]	@ (8000978 <MX_ADC1_Init+0xe0>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008c6:	4b2c      	ldr	r3, [pc, #176]	@ (8000978 <MX_ADC1_Init+0xe0>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008cc:	4b2a      	ldr	r3, [pc, #168]	@ (8000978 <MX_ADC1_Init+0xe0>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008d2:	4b29      	ldr	r3, [pc, #164]	@ (8000978 <MX_ADC1_Init+0xe0>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008d8:	4b27      	ldr	r3, [pc, #156]	@ (8000978 <MX_ADC1_Init+0xe0>)
 80008da:	2204      	movs	r2, #4
 80008dc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008de:	4b26      	ldr	r3, [pc, #152]	@ (8000978 <MX_ADC1_Init+0xe0>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008e4:	4b24      	ldr	r3, [pc, #144]	@ (8000978 <MX_ADC1_Init+0xe0>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80008ea:	4b23      	ldr	r3, [pc, #140]	@ (8000978 <MX_ADC1_Init+0xe0>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008f0:	4b21      	ldr	r3, [pc, #132]	@ (8000978 <MX_ADC1_Init+0xe0>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000978 <MX_ADC1_Init+0xe0>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008fe:	4b1e      	ldr	r3, [pc, #120]	@ (8000978 <MX_ADC1_Init+0xe0>)
 8000900:	2200      	movs	r2, #0
 8000902:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000904:	4b1c      	ldr	r3, [pc, #112]	@ (8000978 <MX_ADC1_Init+0xe0>)
 8000906:	2200      	movs	r2, #0
 8000908:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800090c:	4b1a      	ldr	r3, [pc, #104]	@ (8000978 <MX_ADC1_Init+0xe0>)
 800090e:	2200      	movs	r2, #0
 8000910:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000912:	4b19      	ldr	r3, [pc, #100]	@ (8000978 <MX_ADC1_Init+0xe0>)
 8000914:	2200      	movs	r2, #0
 8000916:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800091a:	4817      	ldr	r0, [pc, #92]	@ (8000978 <MX_ADC1_Init+0xe0>)
 800091c:	f000 fe7c 	bl	8001618 <HAL_ADC_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000926:	f000 f9b1 	bl	8000c8c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800092a:	2300      	movs	r3, #0
 800092c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	4810      	ldr	r0, [pc, #64]	@ (8000978 <MX_ADC1_Init+0xe0>)
 8000936:	f001 fbf5 	bl	8002124 <HAL_ADCEx_MultiModeConfigChannel>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000940:	f000 f9a4 	bl	8000c8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000944:	4b0e      	ldr	r3, [pc, #56]	@ (8000980 <MX_ADC1_Init+0xe8>)
 8000946:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000948:	2306      	movs	r3, #6
 800094a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000950:	237f      	movs	r3, #127	@ 0x7f
 8000952:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000954:	2304      	movs	r3, #4
 8000956:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	4619      	mov	r1, r3
 8000960:	4805      	ldr	r0, [pc, #20]	@ (8000978 <MX_ADC1_Init+0xe0>)
 8000962:	f000 ffad 	bl	80018c0 <HAL_ADC_ConfigChannel>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800096c:	f000 f98e 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	3728      	adds	r7, #40	@ 0x28
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	2000007c 	.word	0x2000007c
 800097c:	50040000 	.word	0x50040000
 8000980:	04300002 	.word	0x04300002

08000984 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000988:	4b16      	ldr	r3, [pc, #88]	@ (80009e4 <MX_CAN1_Init+0x60>)
 800098a:	4a17      	ldr	r2, [pc, #92]	@ (80009e8 <MX_CAN1_Init+0x64>)
 800098c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800098e:	4b15      	ldr	r3, [pc, #84]	@ (80009e4 <MX_CAN1_Init+0x60>)
 8000990:	2210      	movs	r2, #16
 8000992:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000994:	4b13      	ldr	r3, [pc, #76]	@ (80009e4 <MX_CAN1_Init+0x60>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800099a:	4b12      	ldr	r3, [pc, #72]	@ (80009e4 <MX_CAN1_Init+0x60>)
 800099c:	2200      	movs	r2, #0
 800099e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80009a0:	4b10      	ldr	r3, [pc, #64]	@ (80009e4 <MX_CAN1_Init+0x60>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80009a6:	4b0f      	ldr	r3, [pc, #60]	@ (80009e4 <MX_CAN1_Init+0x60>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80009ac:	4b0d      	ldr	r3, [pc, #52]	@ (80009e4 <MX_CAN1_Init+0x60>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80009b2:	4b0c      	ldr	r3, [pc, #48]	@ (80009e4 <MX_CAN1_Init+0x60>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80009b8:	4b0a      	ldr	r3, [pc, #40]	@ (80009e4 <MX_CAN1_Init+0x60>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80009be:	4b09      	ldr	r3, [pc, #36]	@ (80009e4 <MX_CAN1_Init+0x60>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80009c4:	4b07      	ldr	r3, [pc, #28]	@ (80009e4 <MX_CAN1_Init+0x60>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80009ca:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <MX_CAN1_Init+0x60>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80009d0:	4804      	ldr	r0, [pc, #16]	@ (80009e4 <MX_CAN1_Init+0x60>)
 80009d2:	f001 fc57 	bl	8002284 <HAL_CAN_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80009dc:	f000 f956 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	200000e4 	.word	0x200000e4
 80009e8:	40006400 	.word	0x40006400

080009ec <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80009f0:	4b16      	ldr	r3, [pc, #88]	@ (8000a4c <MX_CAN2_Init+0x60>)
 80009f2:	4a17      	ldr	r2, [pc, #92]	@ (8000a50 <MX_CAN2_Init+0x64>)
 80009f4:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 80009f6:	4b15      	ldr	r3, [pc, #84]	@ (8000a4c <MX_CAN2_Init+0x60>)
 80009f8:	2210      	movs	r2, #16
 80009fa:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80009fc:	4b13      	ldr	r3, [pc, #76]	@ (8000a4c <MX_CAN2_Init+0x60>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a02:	4b12      	ldr	r3, [pc, #72]	@ (8000a4c <MX_CAN2_Init+0x60>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000a08:	4b10      	ldr	r3, [pc, #64]	@ (8000a4c <MX_CAN2_Init+0x60>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000a0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a4c <MX_CAN2_Init+0x60>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000a14:	4b0d      	ldr	r3, [pc, #52]	@ (8000a4c <MX_CAN2_Init+0x60>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a4c <MX_CAN2_Init+0x60>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000a20:	4b0a      	ldr	r3, [pc, #40]	@ (8000a4c <MX_CAN2_Init+0x60>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000a26:	4b09      	ldr	r3, [pc, #36]	@ (8000a4c <MX_CAN2_Init+0x60>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000a2c:	4b07      	ldr	r3, [pc, #28]	@ (8000a4c <MX_CAN2_Init+0x60>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000a32:	4b06      	ldr	r3, [pc, #24]	@ (8000a4c <MX_CAN2_Init+0x60>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000a38:	4804      	ldr	r0, [pc, #16]	@ (8000a4c <MX_CAN2_Init+0x60>)
 8000a3a:	f001 fc23 	bl	8002284 <HAL_CAN_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8000a44:	f000 f922 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	2000010c 	.word	0x2000010c
 8000a50:	40006800 	.word	0x40006800

08000a54 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000a58:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac8 <MX_I2C4_Init+0x74>)
 8000a5a:	4a1c      	ldr	r2, [pc, #112]	@ (8000acc <MX_I2C4_Init+0x78>)
 8000a5c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00100D14;
 8000a5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac8 <MX_I2C4_Init+0x74>)
 8000a60:	4a1b      	ldr	r2, [pc, #108]	@ (8000ad0 <MX_I2C4_Init+0x7c>)
 8000a62:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000a64:	4b18      	ldr	r3, [pc, #96]	@ (8000ac8 <MX_I2C4_Init+0x74>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a6a:	4b17      	ldr	r3, [pc, #92]	@ (8000ac8 <MX_I2C4_Init+0x74>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a70:	4b15      	ldr	r3, [pc, #84]	@ (8000ac8 <MX_I2C4_Init+0x74>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000a76:	4b14      	ldr	r3, [pc, #80]	@ (8000ac8 <MX_I2C4_Init+0x74>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a7c:	4b12      	ldr	r3, [pc, #72]	@ (8000ac8 <MX_I2C4_Init+0x74>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a82:	4b11      	ldr	r3, [pc, #68]	@ (8000ac8 <MX_I2C4_Init+0x74>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a88:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac8 <MX_I2C4_Init+0x74>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000a8e:	480e      	ldr	r0, [pc, #56]	@ (8000ac8 <MX_I2C4_Init+0x74>)
 8000a90:	f002 f832 	bl	8002af8 <HAL_I2C_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000a9a:	f000 f8f7 	bl	8000c8c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	4809      	ldr	r0, [pc, #36]	@ (8000ac8 <MX_I2C4_Init+0x74>)
 8000aa2:	f002 fc4d 	bl	8003340 <HAL_I2CEx_ConfigAnalogFilter>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000aac:	f000 f8ee 	bl	8000c8c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4805      	ldr	r0, [pc, #20]	@ (8000ac8 <MX_I2C4_Init+0x74>)
 8000ab4:	f002 fc8f 	bl	80033d6 <HAL_I2CEx_ConfigDigitalFilter>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000abe:	f000 f8e5 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000134 	.word	0x20000134
 8000acc:	40008400 	.word	0x40008400
 8000ad0:	00100d14 	.word	0x00100d14

08000ad4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000ad8:	4b14      	ldr	r3, [pc, #80]	@ (8000b2c <MX_UART4_Init+0x58>)
 8000ada:	4a15      	ldr	r2, [pc, #84]	@ (8000b30 <MX_UART4_Init+0x5c>)
 8000adc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000ade:	4b13      	ldr	r3, [pc, #76]	@ (8000b2c <MX_UART4_Init+0x58>)
 8000ae0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000ae4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000ae6:	4b11      	ldr	r3, [pc, #68]	@ (8000b2c <MX_UART4_Init+0x58>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	@ (8000b2c <MX_UART4_Init+0x58>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000af2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b2c <MX_UART4_Init+0x58>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000af8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b2c <MX_UART4_Init+0x58>)
 8000afa:	220c      	movs	r2, #12
 8000afc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afe:	4b0b      	ldr	r3, [pc, #44]	@ (8000b2c <MX_UART4_Init+0x58>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b04:	4b09      	ldr	r3, [pc, #36]	@ (8000b2c <MX_UART4_Init+0x58>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b0a:	4b08      	ldr	r3, [pc, #32]	@ (8000b2c <MX_UART4_Init+0x58>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b10:	4b06      	ldr	r3, [pc, #24]	@ (8000b2c <MX_UART4_Init+0x58>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000b16:	4805      	ldr	r0, [pc, #20]	@ (8000b2c <MX_UART4_Init+0x58>)
 8000b18:	f004 fb0e 	bl	8005138 <HAL_UART_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000b22:	f000 f8b3 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000188 	.word	0x20000188
 8000b30:	40004c00 	.word	0x40004c00

08000b34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b088      	sub	sp, #32
 8000b38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3a:	f107 030c 	add.w	r3, r7, #12
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
 8000b48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4a:	4b2a      	ldr	r3, [pc, #168]	@ (8000bf4 <MX_GPIO_Init+0xc0>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b4e:	4a29      	ldr	r2, [pc, #164]	@ (8000bf4 <MX_GPIO_Init+0xc0>)
 8000b50:	f043 0304 	orr.w	r3, r3, #4
 8000b54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b56:	4b27      	ldr	r3, [pc, #156]	@ (8000bf4 <MX_GPIO_Init+0xc0>)
 8000b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b5a:	f003 0304 	and.w	r3, r3, #4
 8000b5e:	60bb      	str	r3, [r7, #8]
 8000b60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b62:	4b24      	ldr	r3, [pc, #144]	@ (8000bf4 <MX_GPIO_Init+0xc0>)
 8000b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b66:	4a23      	ldr	r2, [pc, #140]	@ (8000bf4 <MX_GPIO_Init+0xc0>)
 8000b68:	f043 0302 	orr.w	r3, r3, #2
 8000b6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b6e:	4b21      	ldr	r3, [pc, #132]	@ (8000bf4 <MX_GPIO_Init+0xc0>)
 8000b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b72:	f003 0302 	and.w	r3, r3, #2
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf4 <MX_GPIO_Init+0xc0>)
 8000b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b7e:	4a1d      	ldr	r2, [pc, #116]	@ (8000bf4 <MX_GPIO_Init+0xc0>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b86:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf4 <MX_GPIO_Init+0xc0>)
 8000b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OK_LED_GPIO_Port, OK_LED_Pin, GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b9c:	f001 ff62 	bl	8002a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ba0:	2304      	movs	r3, #4
 8000ba2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ba4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ba8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bae:	f107 030c 	add.w	r3, r7, #12
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4810      	ldr	r0, [pc, #64]	@ (8000bf8 <MX_GPIO_Init+0xc4>)
 8000bb6:	f001 fdc3 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pin : OK_LED_Pin */
  GPIO_InitStruct.Pin = OK_LED_Pin;
 8000bba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(OK_LED_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	f107 030c 	add.w	r3, r7, #12
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bd6:	f001 fdb3 	bl	8002740 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2105      	movs	r1, #5
 8000bde:	2008      	movs	r0, #8
 8000be0:	f001 fd04 	bl	80025ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000be4:	2008      	movs	r0, #8
 8000be6:	f001 fd1d 	bl	8002624 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bea:	bf00      	nop
 8000bec:	3720      	adds	r7, #32
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	48000800 	.word	0x48000800

08000bfc <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, OK_LED_Pin);
 8000c04:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c0c:	f001 ff42 	bl	8002a94 <HAL_GPIO_TogglePin>
    osDelay(500);
 8000c10:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c14:	f005 ff1a 	bl	8006a4c <osDelay>
	HAL_GPIO_TogglePin(GPIOA, OK_LED_Pin);
 8000c18:	bf00      	nop
 8000c1a:	e7f3      	b.n	8000c04 <StartTask01+0x8>

08000c1c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
	//Code for reading ADC values


	//code sending data over CAN

    osDelay(1);
 8000c24:	2001      	movs	r0, #1
 8000c26:	f005 ff11 	bl	8006a4c <osDelay>
 8000c2a:	e7fb      	b.n	8000c24 <StartTask02+0x8>

08000c2c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c34:	2001      	movs	r0, #1
 8000c36:	f005 ff09 	bl	8006a4c <osDelay>
 8000c3a:	e7fb      	b.n	8000c34 <StartTask03+0x8>

08000c3c <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  for(;;)
  {

    // outputPortState needs to be updated somewhere here / in a uart interrupt

    if(TCAL9538RSVR_SetOutput(&U7, &outputPortState) != HAL_OK)
 8000c44:	4906      	ldr	r1, [pc, #24]	@ (8000c60 <StartTask04+0x24>)
 8000c46:	4807      	ldr	r0, [pc, #28]	@ (8000c64 <StartTask04+0x28>)
 8000c48:	f7ff fcfe 	bl	8000648 <TCAL9538RSVR_SetOutput>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <StartTask04+0x1a>
    {
    	Error_Handler();
 8000c52:	f000 f81b 	bl	8000c8c <Error_Handler>
    }

    osDelay(50);
 8000c56:	2032      	movs	r0, #50	@ 0x32
 8000c58:	f005 fef8 	bl	8006a4c <osDelay>
    if(TCAL9538RSVR_SetOutput(&U7, &outputPortState) != HAL_OK)
 8000c5c:	e7f2      	b.n	8000c44 <StartTask04+0x8>
 8000c5e:	bf00      	nop
 8000c60:	20000238 	.word	0x20000238
 8000c64:	20000230 	.word	0x20000230

08000c68 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a04      	ldr	r2, [pc, #16]	@ (8000c88 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d101      	bne.n	8000c7e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c7a:	f000 fb0d 	bl	8001298 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40000400 	.word	0x40000400

08000c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c90:	b672      	cpsid	i
}
 8000c92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <Error_Handler+0x8>

08000c98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ce4 <HAL_MspInit+0x4c>)
 8000ca0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ca2:	4a10      	ldr	r2, [pc, #64]	@ (8000ce4 <HAL_MspInit+0x4c>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000caa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce4 <HAL_MspInit+0x4c>)
 8000cac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce4 <HAL_MspInit+0x4c>)
 8000cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce4 <HAL_MspInit+0x4c>)
 8000cbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cc2:	4b08      	ldr	r3, [pc, #32]	@ (8000ce4 <HAL_MspInit+0x4c>)
 8000cc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cca:	603b      	str	r3, [r7, #0]
 8000ccc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	210f      	movs	r1, #15
 8000cd2:	f06f 0001 	mvn.w	r0, #1
 8000cd6:	f001 fc89 	bl	80025ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40021000 	.word	0x40021000

08000ce8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b0ac      	sub	sp, #176	@ 0xb0
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d00:	f107 0310 	add.w	r3, r7, #16
 8000d04:	228c      	movs	r2, #140	@ 0x8c
 8000d06:	2100      	movs	r1, #0
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f008 fb75 	bl	80093f8 <memset>
  if(hadc->Instance==ADC1)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a27      	ldr	r2, [pc, #156]	@ (8000db0 <HAL_ADC_MspInit+0xc8>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d146      	bne.n	8000da6 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d18:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000d1c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000d1e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000d22:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000d26:	2301      	movs	r3, #1
 8000d28:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000d2e:	2310      	movs	r3, #16
 8000d30:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000d32:	2302      	movs	r3, #2
 8000d34:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000d36:	2302      	movs	r3, #2
 8000d38:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000d3e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d44:	f107 0310 	add.w	r3, r7, #16
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f003 fa65 	bl	8004218 <HAL_RCCEx_PeriphCLKConfig>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000d54:	f7ff ff9a 	bl	8000c8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d58:	4b16      	ldr	r3, [pc, #88]	@ (8000db4 <HAL_ADC_MspInit+0xcc>)
 8000d5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d5c:	4a15      	ldr	r2, [pc, #84]	@ (8000db4 <HAL_ADC_MspInit+0xcc>)
 8000d5e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d64:	4b13      	ldr	r3, [pc, #76]	@ (8000db4 <HAL_ADC_MspInit+0xcc>)
 8000d66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d70:	4b10      	ldr	r3, [pc, #64]	@ (8000db4 <HAL_ADC_MspInit+0xcc>)
 8000d72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d74:	4a0f      	ldr	r2, [pc, #60]	@ (8000db4 <HAL_ADC_MspInit+0xcc>)
 8000d76:	f043 0304 	orr.w	r3, r3, #4
 8000d7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d7c:	4b0d      	ldr	r3, [pc, #52]	@ (8000db4 <HAL_ADC_MspInit+0xcc>)
 8000d7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d80:	f003 0304 	and.w	r3, r3, #4
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d9a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4805      	ldr	r0, [pc, #20]	@ (8000db8 <HAL_ADC_MspInit+0xd0>)
 8000da2:	f001 fccd 	bl	8002740 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000da6:	bf00      	nop
 8000da8:	37b0      	adds	r7, #176	@ 0xb0
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	50040000 	.word	0x50040000
 8000db4:	40021000 	.word	0x40021000
 8000db8:	48000800 	.word	0x48000800

08000dbc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08c      	sub	sp, #48	@ 0x30
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 031c 	add.w	r3, r7, #28
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a45      	ldr	r2, [pc, #276]	@ (8000ef0 <HAL_CAN_MspInit+0x134>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d132      	bne.n	8000e44 <HAL_CAN_MspInit+0x88>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000dde:	4b45      	ldr	r3, [pc, #276]	@ (8000ef4 <HAL_CAN_MspInit+0x138>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	3301      	adds	r3, #1
 8000de4:	4a43      	ldr	r2, [pc, #268]	@ (8000ef4 <HAL_CAN_MspInit+0x138>)
 8000de6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000de8:	4b42      	ldr	r3, [pc, #264]	@ (8000ef4 <HAL_CAN_MspInit+0x138>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d10b      	bne.n	8000e08 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000df0:	4b41      	ldr	r3, [pc, #260]	@ (8000ef8 <HAL_CAN_MspInit+0x13c>)
 8000df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000df4:	4a40      	ldr	r2, [pc, #256]	@ (8000ef8 <HAL_CAN_MspInit+0x13c>)
 8000df6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000dfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dfc:	4b3e      	ldr	r3, [pc, #248]	@ (8000ef8 <HAL_CAN_MspInit+0x13c>)
 8000dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e04:	61bb      	str	r3, [r7, #24]
 8000e06:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e08:	4b3b      	ldr	r3, [pc, #236]	@ (8000ef8 <HAL_CAN_MspInit+0x13c>)
 8000e0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e0c:	4a3a      	ldr	r2, [pc, #232]	@ (8000ef8 <HAL_CAN_MspInit+0x13c>)
 8000e0e:	f043 0302 	orr.w	r3, r3, #2
 8000e12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e14:	4b38      	ldr	r3, [pc, #224]	@ (8000ef8 <HAL_CAN_MspInit+0x13c>)
 8000e16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e18:	f003 0302 	and.w	r3, r3, #2
 8000e1c:	617b      	str	r3, [r7, #20]
 8000e1e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e20:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e26:	2302      	movs	r3, #2
 8000e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000e32:	2309      	movs	r3, #9
 8000e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e36:	f107 031c 	add.w	r3, r7, #28
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	482f      	ldr	r0, [pc, #188]	@ (8000efc <HAL_CAN_MspInit+0x140>)
 8000e3e:	f001 fc7f 	bl	8002740 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000e42:	e051      	b.n	8000ee8 <HAL_CAN_MspInit+0x12c>
  else if(hcan->Instance==CAN2)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a2d      	ldr	r2, [pc, #180]	@ (8000f00 <HAL_CAN_MspInit+0x144>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d14c      	bne.n	8000ee8 <HAL_CAN_MspInit+0x12c>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000e4e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ef8 <HAL_CAN_MspInit+0x13c>)
 8000e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e52:	4a29      	ldr	r2, [pc, #164]	@ (8000ef8 <HAL_CAN_MspInit+0x13c>)
 8000e54:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000e58:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e5a:	4b27      	ldr	r3, [pc, #156]	@ (8000ef8 <HAL_CAN_MspInit+0x13c>)
 8000e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e5e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000e62:	613b      	str	r3, [r7, #16]
 8000e64:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000e66:	4b23      	ldr	r3, [pc, #140]	@ (8000ef4 <HAL_CAN_MspInit+0x138>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	4a21      	ldr	r2, [pc, #132]	@ (8000ef4 <HAL_CAN_MspInit+0x138>)
 8000e6e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000e70:	4b20      	ldr	r3, [pc, #128]	@ (8000ef4 <HAL_CAN_MspInit+0x138>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d10b      	bne.n	8000e90 <HAL_CAN_MspInit+0xd4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000e78:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef8 <HAL_CAN_MspInit+0x13c>)
 8000e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e7c:	4a1e      	ldr	r2, [pc, #120]	@ (8000ef8 <HAL_CAN_MspInit+0x13c>)
 8000e7e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e82:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e84:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef8 <HAL_CAN_MspInit+0x13c>)
 8000e86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e90:	4b19      	ldr	r3, [pc, #100]	@ (8000ef8 <HAL_CAN_MspInit+0x13c>)
 8000e92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e94:	4a18      	ldr	r2, [pc, #96]	@ (8000ef8 <HAL_CAN_MspInit+0x13c>)
 8000e96:	f043 0302 	orr.w	r3, r3, #2
 8000e9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e9c:	4b16      	ldr	r3, [pc, #88]	@ (8000ef8 <HAL_CAN_MspInit+0x13c>)
 8000e9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea0:	f003 0302 	and.w	r3, r3, #2
 8000ea4:	60bb      	str	r3, [r7, #8]
 8000ea6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ea8:	2320      	movs	r3, #32
 8000eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_CAN2;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ebc:	f107 031c 	add.w	r3, r7, #28
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	480e      	ldr	r0, [pc, #56]	@ (8000efc <HAL_CAN_MspInit+0x140>)
 8000ec4:	f001 fc3c 	bl	8002740 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ec8:	2340      	movs	r3, #64	@ 0x40
 8000eca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN2;
 8000ed8:	2308      	movs	r3, #8
 8000eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000edc:	f107 031c 	add.w	r3, r7, #28
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4806      	ldr	r0, [pc, #24]	@ (8000efc <HAL_CAN_MspInit+0x140>)
 8000ee4:	f001 fc2c 	bl	8002740 <HAL_GPIO_Init>
}
 8000ee8:	bf00      	nop
 8000eea:	3730      	adds	r7, #48	@ 0x30
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40006400 	.word	0x40006400
 8000ef4:	2000023c 	.word	0x2000023c
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	48000400 	.word	0x48000400
 8000f00:	40006800 	.word	0x40006800

08000f04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b0ac      	sub	sp, #176	@ 0xb0
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f1c:	f107 0310 	add.w	r3, r7, #16
 8000f20:	228c      	movs	r2, #140	@ 0x8c
 8000f22:	2100      	movs	r1, #0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f008 fa67 	bl	80093f8 <memset>
  if(hi2c->Instance==I2C4)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a22      	ldr	r2, [pc, #136]	@ (8000fb8 <HAL_I2C_MspInit+0xb4>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d13c      	bne.n	8000fae <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000f34:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000f38:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f3e:	f107 0310 	add.w	r3, r7, #16
 8000f42:	4618      	mov	r0, r3
 8000f44:	f003 f968 	bl	8004218 <HAL_RCCEx_PeriphCLKConfig>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000f4e:	f7ff fe9d 	bl	8000c8c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f52:	4b1a      	ldr	r3, [pc, #104]	@ (8000fbc <HAL_I2C_MspInit+0xb8>)
 8000f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f56:	4a19      	ldr	r2, [pc, #100]	@ (8000fbc <HAL_I2C_MspInit+0xb8>)
 8000f58:	f043 0302 	orr.w	r3, r3, #2
 8000f5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f5e:	4b17      	ldr	r3, [pc, #92]	@ (8000fbc <HAL_I2C_MspInit+0xb8>)
 8000f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PB10     ------> I2C4_SCL
    PB11     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f6a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000f6e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f72:	2312      	movs	r3, #18
 8000f74:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 8000f84:	2303      	movs	r3, #3
 8000f86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f8e:	4619      	mov	r1, r3
 8000f90:	480b      	ldr	r0, [pc, #44]	@ (8000fc0 <HAL_I2C_MspInit+0xbc>)
 8000f92:	f001 fbd5 	bl	8002740 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000f96:	4b09      	ldr	r3, [pc, #36]	@ (8000fbc <HAL_I2C_MspInit+0xb8>)
 8000f98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f9a:	4a08      	ldr	r2, [pc, #32]	@ (8000fbc <HAL_I2C_MspInit+0xb8>)
 8000f9c:	f043 0302 	orr.w	r3, r3, #2
 8000fa0:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000fa2:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <HAL_I2C_MspInit+0xb8>)
 8000fa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 8000fae:	bf00      	nop
 8000fb0:	37b0      	adds	r7, #176	@ 0xb0
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40008400 	.word	0x40008400
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	48000400 	.word	0x48000400

08000fc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b0ac      	sub	sp, #176	@ 0xb0
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fdc:	f107 0310 	add.w	r3, r7, #16
 8000fe0:	228c      	movs	r2, #140	@ 0x8c
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f008 fa07 	bl	80093f8 <memset>
  if(huart->Instance==UART4)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a25      	ldr	r2, [pc, #148]	@ (8001084 <HAL_UART_MspInit+0xc0>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d143      	bne.n	800107c <HAL_UART_MspInit+0xb8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000ff4:	2308      	movs	r3, #8
 8000ff6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ffc:	f107 0310 	add.w	r3, r7, #16
 8001000:	4618      	mov	r0, r3
 8001002:	f003 f909 	bl	8004218 <HAL_RCCEx_PeriphCLKConfig>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800100c:	f7ff fe3e 	bl	8000c8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001010:	4b1d      	ldr	r3, [pc, #116]	@ (8001088 <HAL_UART_MspInit+0xc4>)
 8001012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001014:	4a1c      	ldr	r2, [pc, #112]	@ (8001088 <HAL_UART_MspInit+0xc4>)
 8001016:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800101a:	6593      	str	r3, [r2, #88]	@ 0x58
 800101c:	4b1a      	ldr	r3, [pc, #104]	@ (8001088 <HAL_UART_MspInit+0xc4>)
 800101e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001020:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001028:	4b17      	ldr	r3, [pc, #92]	@ (8001088 <HAL_UART_MspInit+0xc4>)
 800102a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800102c:	4a16      	ldr	r2, [pc, #88]	@ (8001088 <HAL_UART_MspInit+0xc4>)
 800102e:	f043 0304 	orr.w	r3, r3, #4
 8001032:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001034:	4b14      	ldr	r3, [pc, #80]	@ (8001088 <HAL_UART_MspInit+0xc4>)
 8001036:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001038:	f003 0304 	and.w	r3, r3, #4
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001040:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001044:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001048:	2302      	movs	r3, #2
 800104a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001054:	2303      	movs	r3, #3
 8001056:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800105a:	2308      	movs	r3, #8
 800105c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001060:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001064:	4619      	mov	r1, r3
 8001066:	4809      	ldr	r0, [pc, #36]	@ (800108c <HAL_UART_MspInit+0xc8>)
 8001068:	f001 fb6a 	bl	8002740 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800106c:	2200      	movs	r2, #0
 800106e:	2105      	movs	r1, #5
 8001070:	2034      	movs	r0, #52	@ 0x34
 8001072:	f001 fabb 	bl	80025ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001076:	2034      	movs	r0, #52	@ 0x34
 8001078:	f001 fad4 	bl	8002624 <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 800107c:	bf00      	nop
 800107e:	37b0      	adds	r7, #176	@ 0xb0
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40004c00 	.word	0x40004c00
 8001088:	40021000 	.word	0x40021000
 800108c:	48000800 	.word	0x48000800

08001090 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08e      	sub	sp, #56	@ 0x38
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001098:	2300      	movs	r3, #0
 800109a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 800109e:	4b34      	ldr	r3, [pc, #208]	@ (8001170 <HAL_InitTick+0xe0>)
 80010a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010a2:	4a33      	ldr	r2, [pc, #204]	@ (8001170 <HAL_InitTick+0xe0>)
 80010a4:	f043 0302 	orr.w	r3, r3, #2
 80010a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80010aa:	4b31      	ldr	r3, [pc, #196]	@ (8001170 <HAL_InitTick+0xe0>)
 80010ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010b6:	f107 0210 	add.w	r2, r7, #16
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	4611      	mov	r1, r2
 80010c0:	4618      	mov	r0, r3
 80010c2:	f003 f817 	bl	80040f4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80010c6:	6a3b      	ldr	r3, [r7, #32]
 80010c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80010ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d103      	bne.n	80010d8 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80010d0:	f002 ffe4 	bl	800409c <HAL_RCC_GetPCLK1Freq>
 80010d4:	6378      	str	r0, [r7, #52]	@ 0x34
 80010d6:	e004      	b.n	80010e2 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80010d8:	f002 ffe0 	bl	800409c <HAL_RCC_GetPCLK1Freq>
 80010dc:	4603      	mov	r3, r0
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010e4:	4a23      	ldr	r2, [pc, #140]	@ (8001174 <HAL_InitTick+0xe4>)
 80010e6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ea:	0c9b      	lsrs	r3, r3, #18
 80010ec:	3b01      	subs	r3, #1
 80010ee:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80010f0:	4b21      	ldr	r3, [pc, #132]	@ (8001178 <HAL_InitTick+0xe8>)
 80010f2:	4a22      	ldr	r2, [pc, #136]	@ (800117c <HAL_InitTick+0xec>)
 80010f4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80010f6:	4b20      	ldr	r3, [pc, #128]	@ (8001178 <HAL_InitTick+0xe8>)
 80010f8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010fc:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80010fe:	4a1e      	ldr	r2, [pc, #120]	@ (8001178 <HAL_InitTick+0xe8>)
 8001100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001102:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001104:	4b1c      	ldr	r3, [pc, #112]	@ (8001178 <HAL_InitTick+0xe8>)
 8001106:	2200      	movs	r2, #0
 8001108:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800110a:	4b1b      	ldr	r3, [pc, #108]	@ (8001178 <HAL_InitTick+0xe8>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001110:	4b19      	ldr	r3, [pc, #100]	@ (8001178 <HAL_InitTick+0xe8>)
 8001112:	2200      	movs	r2, #0
 8001114:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8001116:	4818      	ldr	r0, [pc, #96]	@ (8001178 <HAL_InitTick+0xe8>)
 8001118:	f003 fd48 	bl	8004bac <HAL_TIM_Base_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001122:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001126:	2b00      	cmp	r3, #0
 8001128:	d11b      	bne.n	8001162 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 800112a:	4813      	ldr	r0, [pc, #76]	@ (8001178 <HAL_InitTick+0xe8>)
 800112c:	f003 fda0 	bl	8004c70 <HAL_TIM_Base_Start_IT>
 8001130:	4603      	mov	r3, r0
 8001132:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001136:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800113a:	2b00      	cmp	r3, #0
 800113c:	d111      	bne.n	8001162 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800113e:	201d      	movs	r0, #29
 8001140:	f001 fa70 	bl	8002624 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b0f      	cmp	r3, #15
 8001148:	d808      	bhi.n	800115c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 800114a:	2200      	movs	r2, #0
 800114c:	6879      	ldr	r1, [r7, #4]
 800114e:	201d      	movs	r0, #29
 8001150:	f001 fa4c 	bl	80025ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001154:	4a0a      	ldr	r2, [pc, #40]	@ (8001180 <HAL_InitTick+0xf0>)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6013      	str	r3, [r2, #0]
 800115a:	e002      	b.n	8001162 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001162:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001166:	4618      	mov	r0, r3
 8001168:	3738      	adds	r7, #56	@ 0x38
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40021000 	.word	0x40021000
 8001174:	431bde83 	.word	0x431bde83
 8001178:	20000240 	.word	0x20000240
 800117c:	40000400 	.word	0x40000400
 8001180:	20000004 	.word	0x20000004

08001184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <NMI_Handler+0x4>

0800118c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001190:	bf00      	nop
 8001192:	e7fd      	b.n	8001190 <HardFault_Handler+0x4>

08001194 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001198:	bf00      	nop
 800119a:	e7fd      	b.n	8001198 <MemManage_Handler+0x4>

0800119c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011a0:	bf00      	nop
 80011a2:	e7fd      	b.n	80011a0 <BusFault_Handler+0x4>

080011a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a8:	bf00      	nop
 80011aa:	e7fd      	b.n	80011a8 <UsageFault_Handler+0x4>

080011ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80011be:	2004      	movs	r0, #4
 80011c0:	f001 fc82 	bl	8002ac8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80011cc:	4802      	ldr	r0, [pc, #8]	@ (80011d8 <TIM3_IRQHandler+0x10>)
 80011ce:	f003 fdbf 	bl	8004d50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000240 	.word	0x20000240

080011dc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80011e0:	4802      	ldr	r0, [pc, #8]	@ (80011ec <UART4_IRQHandler+0x10>)
 80011e2:	f004 f843 	bl	800526c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000188 	.word	0x20000188

080011f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011f4:	4b06      	ldr	r3, [pc, #24]	@ (8001210 <SystemInit+0x20>)
 80011f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011fa:	4a05      	ldr	r2, [pc, #20]	@ (8001210 <SystemInit+0x20>)
 80011fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001200:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001214:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800124c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001218:	f7ff ffea 	bl	80011f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800121c:	480c      	ldr	r0, [pc, #48]	@ (8001250 <LoopForever+0x6>)
  ldr r1, =_edata
 800121e:	490d      	ldr	r1, [pc, #52]	@ (8001254 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001220:	4a0d      	ldr	r2, [pc, #52]	@ (8001258 <LoopForever+0xe>)
  movs r3, #0
 8001222:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001224:	e002      	b.n	800122c <LoopCopyDataInit>

08001226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800122a:	3304      	adds	r3, #4

0800122c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800122c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800122e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001230:	d3f9      	bcc.n	8001226 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001232:	4a0a      	ldr	r2, [pc, #40]	@ (800125c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001234:	4c0a      	ldr	r4, [pc, #40]	@ (8001260 <LoopForever+0x16>)
  movs r3, #0
 8001236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001238:	e001      	b.n	800123e <LoopFillZerobss>

0800123a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800123a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800123c:	3204      	adds	r2, #4

0800123e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800123e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001240:	d3fb      	bcc.n	800123a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001242:	f008 f937 	bl	80094b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001246:	f7ff fa67 	bl	8000718 <main>

0800124a <LoopForever>:

LoopForever:
    b LoopForever
 800124a:	e7fe      	b.n	800124a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800124c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001250:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001254:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001258:	0800971c 	.word	0x0800971c
  ldr r2, =_sbss
 800125c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001260:	20001d70 	.word	0x20001d70

08001264 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001264:	e7fe      	b.n	8001264 <ADC1_2_IRQHandler>

08001266 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b082      	sub	sp, #8
 800126a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800126c:	2300      	movs	r3, #0
 800126e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001270:	2003      	movs	r0, #3
 8001272:	f001 f9b0 	bl	80025d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001276:	200f      	movs	r0, #15
 8001278:	f7ff ff0a 	bl	8001090 <HAL_InitTick>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d002      	beq.n	8001288 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	71fb      	strb	r3, [r7, #7]
 8001286:	e001      	b.n	800128c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001288:	f7ff fd06 	bl	8000c98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800128c:	79fb      	ldrb	r3, [r7, #7]
}
 800128e:	4618      	mov	r0, r3
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800129c:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <HAL_IncTick+0x20>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b06      	ldr	r3, [pc, #24]	@ (80012bc <HAL_IncTick+0x24>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4413      	add	r3, r2
 80012a8:	4a04      	ldr	r2, [pc, #16]	@ (80012bc <HAL_IncTick+0x24>)
 80012aa:	6013      	str	r3, [r2, #0]
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	20000008 	.word	0x20000008
 80012bc:	2000028c 	.word	0x2000028c

080012c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return uwTick;
 80012c4:	4b03      	ldr	r3, [pc, #12]	@ (80012d4 <HAL_GetTick+0x14>)
 80012c6:	681b      	ldr	r3, [r3, #0]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	2000028c 	.word	0x2000028c

080012d8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	431a      	orrs	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	609a      	str	r2, [r3, #8]
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
 8001306:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	431a      	orrs	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	609a      	str	r2, [r3, #8]
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001334:	4618      	mov	r0, r3
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001340:	b480      	push	{r7}
 8001342:	b087      	sub	sp, #28
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
 800134c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	3360      	adds	r3, #96	@ 0x60
 8001352:	461a      	mov	r2, r3
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	4413      	add	r3, r2
 800135a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4b08      	ldr	r3, [pc, #32]	@ (8001384 <LL_ADC_SetOffset+0x44>)
 8001362:	4013      	ands	r3, r2
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800136a:	683a      	ldr	r2, [r7, #0]
 800136c:	430a      	orrs	r2, r1
 800136e:	4313      	orrs	r3, r2
 8001370:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001378:	bf00      	nop
 800137a:	371c      	adds	r7, #28
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	03fff000 	.word	0x03fff000

08001388 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	3360      	adds	r3, #96	@ 0x60
 8001396:	461a      	mov	r2, r3
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4413      	add	r3, r2
 800139e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b087      	sub	sp, #28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	3360      	adds	r3, #96	@ 0x60
 80013c4:	461a      	mov	r2, r3
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4413      	add	r3, r2
 80013cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	431a      	orrs	r2, r3
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80013de:	bf00      	nop
 80013e0:	371c      	adds	r7, #28
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b083      	sub	sp, #12
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
 80013f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	695b      	ldr	r3, [r3, #20]
 80013f8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	431a      	orrs	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	615a      	str	r2, [r3, #20]
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001410:	b480      	push	{r7}
 8001412:	b087      	sub	sp, #28
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	3330      	adds	r3, #48	@ 0x30
 8001420:	461a      	mov	r2, r3
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	0a1b      	lsrs	r3, r3, #8
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	f003 030c 	and.w	r3, r3, #12
 800142c:	4413      	add	r3, r2
 800142e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	f003 031f 	and.w	r3, r3, #31
 800143a:	211f      	movs	r1, #31
 800143c:	fa01 f303 	lsl.w	r3, r1, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	401a      	ands	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	0e9b      	lsrs	r3, r3, #26
 8001448:	f003 011f 	and.w	r1, r3, #31
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	f003 031f 	and.w	r3, r3, #31
 8001452:	fa01 f303 	lsl.w	r3, r1, r3
 8001456:	431a      	orrs	r2, r3
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800145c:	bf00      	nop
 800145e:	371c      	adds	r7, #28
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001468:	b480      	push	{r7}
 800146a:	b087      	sub	sp, #28
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	3314      	adds	r3, #20
 8001478:	461a      	mov	r2, r3
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	0e5b      	lsrs	r3, r3, #25
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	f003 0304 	and.w	r3, r3, #4
 8001484:	4413      	add	r3, r2
 8001486:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	0d1b      	lsrs	r3, r3, #20
 8001490:	f003 031f 	and.w	r3, r3, #31
 8001494:	2107      	movs	r1, #7
 8001496:	fa01 f303 	lsl.w	r3, r1, r3
 800149a:	43db      	mvns	r3, r3
 800149c:	401a      	ands	r2, r3
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	0d1b      	lsrs	r3, r3, #20
 80014a2:	f003 031f 	and.w	r3, r3, #31
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	fa01 f303 	lsl.w	r3, r1, r3
 80014ac:	431a      	orrs	r2, r3
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80014b2:	bf00      	nop
 80014b4:	371c      	adds	r7, #28
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
	...

080014c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014d8:	43db      	mvns	r3, r3
 80014da:	401a      	ands	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f003 0318 	and.w	r3, r3, #24
 80014e2:	4908      	ldr	r1, [pc, #32]	@ (8001504 <LL_ADC_SetChannelSingleDiff+0x44>)
 80014e4:	40d9      	lsrs	r1, r3
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	400b      	ands	r3, r1
 80014ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014ee:	431a      	orrs	r2, r3
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80014f6:	bf00      	nop
 80014f8:	3714      	adds	r7, #20
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	0007ffff 	.word	0x0007ffff

08001508 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001518:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	6093      	str	r3, [r2, #8]
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800153c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001540:	d101      	bne.n	8001546 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001542:	2301      	movs	r3, #1
 8001544:	e000      	b.n	8001548 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001546:	2300      	movs	r3, #0
}
 8001548:	4618      	mov	r0, r3
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001564:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001568:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800158c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001590:	d101      	bne.n	8001596 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001592:	2301      	movs	r3, #1
 8001594:	e000      	b.n	8001598 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f003 0301 	and.w	r3, r3, #1
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d101      	bne.n	80015bc <LL_ADC_IsEnabled+0x18>
 80015b8:	2301      	movs	r3, #1
 80015ba:	e000      	b.n	80015be <LL_ADC_IsEnabled+0x1a>
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b083      	sub	sp, #12
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f003 0304 	and.w	r3, r3, #4
 80015da:	2b04      	cmp	r3, #4
 80015dc:	d101      	bne.n	80015e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80015de:	2301      	movs	r3, #1
 80015e0:	e000      	b.n	80015e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80015e2:	2300      	movs	r3, #0
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f003 0308 	and.w	r3, r3, #8
 8001600:	2b08      	cmp	r3, #8
 8001602:	d101      	bne.n	8001608 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001604:	2301      	movs	r3, #1
 8001606:	e000      	b.n	800160a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
	...

08001618 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001618:	b590      	push	{r4, r7, lr}
 800161a:	b089      	sub	sp, #36	@ 0x24
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001620:	2300      	movs	r3, #0
 8001622:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001624:	2300      	movs	r3, #0
 8001626:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e133      	b.n	800189a <HAL_ADC_Init+0x282>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	691b      	ldr	r3, [r3, #16]
 8001636:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800163c:	2b00      	cmp	r3, #0
 800163e:	d109      	bne.n	8001654 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff fb51 	bl	8000ce8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff ff67 	bl	800152c <LL_ADC_IsDeepPowerDownEnabled>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d004      	beq.n	800166e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ff4d 	bl	8001508 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff ff82 	bl	800157c <LL_ADC_IsInternalRegulatorEnabled>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d115      	bne.n	80016aa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff ff66 	bl	8001554 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001688:	4b86      	ldr	r3, [pc, #536]	@ (80018a4 <HAL_ADC_Init+0x28c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	099b      	lsrs	r3, r3, #6
 800168e:	4a86      	ldr	r2, [pc, #536]	@ (80018a8 <HAL_ADC_Init+0x290>)
 8001690:	fba2 2303 	umull	r2, r3, r2, r3
 8001694:	099b      	lsrs	r3, r3, #6
 8001696:	3301      	adds	r3, #1
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800169c:	e002      	b.n	80016a4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	3b01      	subs	r3, #1
 80016a2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1f9      	bne.n	800169e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff ff64 	bl	800157c <LL_ADC_IsInternalRegulatorEnabled>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d10d      	bne.n	80016d6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016be:	f043 0210 	orr.w	r2, r3, #16
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016ca:	f043 0201 	orr.w	r2, r3, #1
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff ff75 	bl	80015ca <LL_ADC_REG_IsConversionOngoing>
 80016e0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e6:	f003 0310 	and.w	r3, r3, #16
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f040 80cc 	bne.w	8001888 <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f040 80c8 	bne.w	8001888 <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016fc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001700:	f043 0202 	orr.w	r2, r3, #2
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff ff49 	bl	80015a4 <LL_ADC_IsEnabled>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d115      	bne.n	8001744 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001718:	4864      	ldr	r0, [pc, #400]	@ (80018ac <HAL_ADC_Init+0x294>)
 800171a:	f7ff ff43 	bl	80015a4 <LL_ADC_IsEnabled>
 800171e:	4604      	mov	r4, r0
 8001720:	4863      	ldr	r0, [pc, #396]	@ (80018b0 <HAL_ADC_Init+0x298>)
 8001722:	f7ff ff3f 	bl	80015a4 <LL_ADC_IsEnabled>
 8001726:	4603      	mov	r3, r0
 8001728:	431c      	orrs	r4, r3
 800172a:	4862      	ldr	r0, [pc, #392]	@ (80018b4 <HAL_ADC_Init+0x29c>)
 800172c:	f7ff ff3a 	bl	80015a4 <LL_ADC_IsEnabled>
 8001730:	4603      	mov	r3, r0
 8001732:	4323      	orrs	r3, r4
 8001734:	2b00      	cmp	r3, #0
 8001736:	d105      	bne.n	8001744 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	4619      	mov	r1, r3
 800173e:	485e      	ldr	r0, [pc, #376]	@ (80018b8 <HAL_ADC_Init+0x2a0>)
 8001740:	f7ff fdca 	bl	80012d8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	7e5b      	ldrb	r3, [r3, #25]
 8001748:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800174e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001754:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800175a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001762:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001764:	4313      	orrs	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d106      	bne.n	8001780 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001776:	3b01      	subs	r3, #1
 8001778:	045b      	lsls	r3, r3, #17
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4313      	orrs	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001784:	2b00      	cmp	r3, #0
 8001786:	d009      	beq.n	800179c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800178c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001794:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	4313      	orrs	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	68da      	ldr	r2, [r3, #12]
 80017a2:	4b46      	ldr	r3, [pc, #280]	@ (80018bc <HAL_ADC_Init+0x2a4>)
 80017a4:	4013      	ands	r3, r2
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	6812      	ldr	r2, [r2, #0]
 80017aa:	69b9      	ldr	r1, [r7, #24]
 80017ac:	430b      	orrs	r3, r1
 80017ae:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff ff1b 	bl	80015f0 <LL_ADC_INJ_IsConversionOngoing>
 80017ba:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d140      	bne.n	8001844 <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d13d      	bne.n	8001844 <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	7e1b      	ldrb	r3, [r3, #24]
 80017d0:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80017d2:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80017da:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80017dc:	4313      	orrs	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80017ea:	f023 0306 	bic.w	r3, r3, #6
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	6812      	ldr	r2, [r2, #0]
 80017f2:	69b9      	ldr	r1, [r7, #24]
 80017f4:	430b      	orrs	r3, r1
 80017f6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d118      	bne.n	8001834 <HAL_ADC_Init+0x21c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800180c:	f023 0304 	bic.w	r3, r3, #4
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001818:	4311      	orrs	r1, r2
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800181e:	4311      	orrs	r1, r2
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001824:	430a      	orrs	r2, r1
 8001826:	431a      	orrs	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f042 0201 	orr.w	r2, r2, #1
 8001830:	611a      	str	r2, [r3, #16]
 8001832:	e007      	b.n	8001844 <HAL_ADC_Init+0x22c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	691a      	ldr	r2, [r3, #16]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f022 0201 	bic.w	r2, r2, #1
 8001842:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d10c      	bne.n	8001866 <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001852:	f023 010f 	bic.w	r1, r3, #15
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	1e5a      	subs	r2, r3, #1
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	430a      	orrs	r2, r1
 8001862:	631a      	str	r2, [r3, #48]	@ 0x30
 8001864:	e007      	b.n	8001876 <HAL_ADC_Init+0x25e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f022 020f 	bic.w	r2, r2, #15
 8001874:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800187a:	f023 0303 	bic.w	r3, r3, #3
 800187e:	f043 0201 	orr.w	r2, r3, #1
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	659a      	str	r2, [r3, #88]	@ 0x58
 8001886:	e007      	b.n	8001898 <HAL_ADC_Init+0x280>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800188c:	f043 0210 	orr.w	r2, r3, #16
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001898:	7ffb      	ldrb	r3, [r7, #31]
}
 800189a:	4618      	mov	r0, r3
 800189c:	3724      	adds	r7, #36	@ 0x24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd90      	pop	{r4, r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000000 	.word	0x20000000
 80018a8:	053e2d63 	.word	0x053e2d63
 80018ac:	50040000 	.word	0x50040000
 80018b0:	50040100 	.word	0x50040100
 80018b4:	50040200 	.word	0x50040200
 80018b8:	50040300 	.word	0x50040300
 80018bc:	fff0c007 	.word	0xfff0c007

080018c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b0b6      	sub	sp, #216	@ 0xd8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018ca:	2300      	movs	r3, #0
 80018cc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d101      	bne.n	80018e2 <HAL_ADC_ConfigChannel+0x22>
 80018de:	2302      	movs	r3, #2
 80018e0:	e3e3      	b.n	80020aa <HAL_ADC_ConfigChannel+0x7ea>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2201      	movs	r2, #1
 80018e6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff fe6b 	bl	80015ca <LL_ADC_REG_IsConversionOngoing>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f040 83c4 	bne.w	8002084 <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	2b05      	cmp	r3, #5
 800190a:	d824      	bhi.n	8001956 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	3b02      	subs	r3, #2
 8001912:	2b03      	cmp	r3, #3
 8001914:	d81b      	bhi.n	800194e <HAL_ADC_ConfigChannel+0x8e>
 8001916:	a201      	add	r2, pc, #4	@ (adr r2, 800191c <HAL_ADC_ConfigChannel+0x5c>)
 8001918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800191c:	0800192d 	.word	0x0800192d
 8001920:	08001935 	.word	0x08001935
 8001924:	0800193d 	.word	0x0800193d
 8001928:	08001945 	.word	0x08001945
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800192c:	230c      	movs	r3, #12
 800192e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001932:	e010      	b.n	8001956 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001934:	2312      	movs	r3, #18
 8001936:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800193a:	e00c      	b.n	8001956 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800193c:	2318      	movs	r3, #24
 800193e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001942:	e008      	b.n	8001956 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001944:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001948:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800194c:	e003      	b.n	8001956 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800194e:	2306      	movs	r3, #6
 8001950:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001954:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6818      	ldr	r0, [r3, #0]
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	461a      	mov	r2, r3
 8001960:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001964:	f7ff fd54 	bl	8001410 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fe2c 	bl	80015ca <LL_ADC_REG_IsConversionOngoing>
 8001972:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff fe38 	bl	80015f0 <LL_ADC_INJ_IsConversionOngoing>
 8001980:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001984:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001988:	2b00      	cmp	r3, #0
 800198a:	f040 81bf 	bne.w	8001d0c <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800198e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001992:	2b00      	cmp	r3, #0
 8001994:	f040 81ba 	bne.w	8001d0c <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80019a0:	d10f      	bne.n	80019c2 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6818      	ldr	r0, [r3, #0]
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2200      	movs	r2, #0
 80019ac:	4619      	mov	r1, r3
 80019ae:	f7ff fd5b 	bl	8001468 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff fd15 	bl	80013ea <LL_ADC_SetSamplingTimeCommonConfig>
 80019c0:	e00e      	b.n	80019e0 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6818      	ldr	r0, [r3, #0]
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	6819      	ldr	r1, [r3, #0]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	461a      	mov	r2, r3
 80019d0:	f7ff fd4a 	bl	8001468 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2100      	movs	r1, #0
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff fd05 	bl	80013ea <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	695a      	ldr	r2, [r3, #20]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	08db      	lsrs	r3, r3, #3
 80019ec:	f003 0303 	and.w	r3, r3, #3
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	2b04      	cmp	r3, #4
 8001a00:	d00a      	beq.n	8001a18 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6818      	ldr	r0, [r3, #0]
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	6919      	ldr	r1, [r3, #16]
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001a12:	f7ff fc95 	bl	8001340 <LL_ADC_SetOffset>
 8001a16:	e179      	b.n	8001d0c <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff fcb2 	bl	8001388 <LL_ADC_GetOffsetChannel>
 8001a24:	4603      	mov	r3, r0
 8001a26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10a      	bne.n	8001a44 <HAL_ADC_ConfigChannel+0x184>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2100      	movs	r1, #0
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff fca7 	bl	8001388 <LL_ADC_GetOffsetChannel>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	0e9b      	lsrs	r3, r3, #26
 8001a3e:	f003 021f 	and.w	r2, r3, #31
 8001a42:	e01e      	b.n	8001a82 <HAL_ADC_ConfigChannel+0x1c2>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2100      	movs	r1, #0
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff fc9c 	bl	8001388 <LL_ADC_GetOffsetChannel>
 8001a50:	4603      	mov	r3, r0
 8001a52:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001a5a:	fa93 f3a3 	rbit	r3, r3
 8001a5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001a66:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001a6a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8001a72:	2320      	movs	r3, #32
 8001a74:	e004      	b.n	8001a80 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8001a76:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001a7a:	fab3 f383 	clz	r3, r3
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d105      	bne.n	8001a9a <HAL_ADC_ConfigChannel+0x1da>
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	0e9b      	lsrs	r3, r3, #26
 8001a94:	f003 031f 	and.w	r3, r3, #31
 8001a98:	e018      	b.n	8001acc <HAL_ADC_ConfigChannel+0x20c>
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001aa6:	fa93 f3a3 	rbit	r3, r3
 8001aaa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001aae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001ab2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001ab6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8001abe:	2320      	movs	r3, #32
 8001ac0:	e004      	b.n	8001acc <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8001ac2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001ac6:	fab3 f383 	clz	r3, r3
 8001aca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d106      	bne.n	8001ade <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff fc6b 	bl	80013b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff fc4f 	bl	8001388 <LL_ADC_GetOffsetChannel>
 8001aea:	4603      	mov	r3, r0
 8001aec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d10a      	bne.n	8001b0a <HAL_ADC_ConfigChannel+0x24a>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2101      	movs	r1, #1
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff fc44 	bl	8001388 <LL_ADC_GetOffsetChannel>
 8001b00:	4603      	mov	r3, r0
 8001b02:	0e9b      	lsrs	r3, r3, #26
 8001b04:	f003 021f 	and.w	r2, r3, #31
 8001b08:	e01e      	b.n	8001b48 <HAL_ADC_ConfigChannel+0x288>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2101      	movs	r1, #1
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff fc39 	bl	8001388 <LL_ADC_GetOffsetChannel>
 8001b16:	4603      	mov	r3, r0
 8001b18:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001b20:	fa93 f3a3 	rbit	r3, r3
 8001b24:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001b28:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001b2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001b30:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d101      	bne.n	8001b3c <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8001b38:	2320      	movs	r3, #32
 8001b3a:	e004      	b.n	8001b46 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8001b3c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001b40:	fab3 f383 	clz	r3, r3
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d105      	bne.n	8001b60 <HAL_ADC_ConfigChannel+0x2a0>
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	0e9b      	lsrs	r3, r3, #26
 8001b5a:	f003 031f 	and.w	r3, r3, #31
 8001b5e:	e018      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x2d2>
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b68:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001b6c:	fa93 f3a3 	rbit	r3, r3
 8001b70:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001b74:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001b78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001b7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d101      	bne.n	8001b88 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8001b84:	2320      	movs	r3, #32
 8001b86:	e004      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8001b88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001b8c:	fab3 f383 	clz	r3, r3
 8001b90:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d106      	bne.n	8001ba4 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff fc08 	bl	80013b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2102      	movs	r1, #2
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff fbec 	bl	8001388 <LL_ADC_GetOffsetChannel>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10a      	bne.n	8001bd0 <HAL_ADC_ConfigChannel+0x310>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2102      	movs	r1, #2
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff fbe1 	bl	8001388 <LL_ADC_GetOffsetChannel>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	0e9b      	lsrs	r3, r3, #26
 8001bca:	f003 021f 	and.w	r2, r3, #31
 8001bce:	e01e      	b.n	8001c0e <HAL_ADC_ConfigChannel+0x34e>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2102      	movs	r1, #2
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff fbd6 	bl	8001388 <LL_ADC_GetOffsetChannel>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001be6:	fa93 f3a3 	rbit	r3, r3
 8001bea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001bee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001bf2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001bf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8001bfe:	2320      	movs	r3, #32
 8001c00:	e004      	b.n	8001c0c <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8001c02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c06:	fab3 f383 	clz	r3, r3
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d105      	bne.n	8001c26 <HAL_ADC_ConfigChannel+0x366>
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	0e9b      	lsrs	r3, r3, #26
 8001c20:	f003 031f 	and.w	r3, r3, #31
 8001c24:	e014      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x390>
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001c2e:	fa93 f3a3 	rbit	r3, r3
 8001c32:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001c34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001c36:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001c3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8001c42:	2320      	movs	r3, #32
 8001c44:	e004      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8001c46:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001c4a:	fab3 f383 	clz	r3, r3
 8001c4e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d106      	bne.n	8001c62 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2102      	movs	r1, #2
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff fba9 	bl	80013b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2103      	movs	r1, #3
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff fb8d 	bl	8001388 <LL_ADC_GetOffsetChannel>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d10a      	bne.n	8001c8e <HAL_ADC_ConfigChannel+0x3ce>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2103      	movs	r1, #3
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff fb82 	bl	8001388 <LL_ADC_GetOffsetChannel>
 8001c84:	4603      	mov	r3, r0
 8001c86:	0e9b      	lsrs	r3, r3, #26
 8001c88:	f003 021f 	and.w	r2, r3, #31
 8001c8c:	e017      	b.n	8001cbe <HAL_ADC_ConfigChannel+0x3fe>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2103      	movs	r1, #3
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff fb77 	bl	8001388 <LL_ADC_GetOffsetChannel>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001ca0:	fa93 f3a3 	rbit	r3, r3
 8001ca4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001ca6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ca8:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001caa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8001cb0:	2320      	movs	r3, #32
 8001cb2:	e003      	b.n	8001cbc <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8001cb4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001cb6:	fab3 f383 	clz	r3, r3
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d105      	bne.n	8001cd6 <HAL_ADC_ConfigChannel+0x416>
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	0e9b      	lsrs	r3, r3, #26
 8001cd0:	f003 031f 	and.w	r3, r3, #31
 8001cd4:	e011      	b.n	8001cfa <HAL_ADC_ConfigChannel+0x43a>
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cdc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001cde:	fa93 f3a3 	rbit	r3, r3
 8001ce2:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001ce4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001ce6:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001ce8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8001cee:	2320      	movs	r3, #32
 8001cf0:	e003      	b.n	8001cfa <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8001cf2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001cf4:	fab3 f383 	clz	r3, r3
 8001cf8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d106      	bne.n	8001d0c <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2200      	movs	r2, #0
 8001d04:	2103      	movs	r1, #3
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff fb54 	bl	80013b4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff fc47 	bl	80015a4 <LL_ADC_IsEnabled>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f040 813f 	bne.w	8001f9c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6818      	ldr	r0, [r3, #0]
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	6819      	ldr	r1, [r3, #0]
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	f7ff fbc8 	bl	80014c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	4a8e      	ldr	r2, [pc, #568]	@ (8001f70 <HAL_ADC_ConfigChannel+0x6b0>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	f040 8130 	bne.w	8001f9c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d10b      	bne.n	8001d64 <HAL_ADC_ConfigChannel+0x4a4>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	0e9b      	lsrs	r3, r3, #26
 8001d52:	3301      	adds	r3, #1
 8001d54:	f003 031f 	and.w	r3, r3, #31
 8001d58:	2b09      	cmp	r3, #9
 8001d5a:	bf94      	ite	ls
 8001d5c:	2301      	movls	r3, #1
 8001d5e:	2300      	movhi	r3, #0
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	e019      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x4d8>
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d6c:	fa93 f3a3 	rbit	r3, r3
 8001d70:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001d72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d74:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001d76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d101      	bne.n	8001d80 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8001d7c:	2320      	movs	r3, #32
 8001d7e:	e003      	b.n	8001d88 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8001d80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d82:	fab3 f383 	clz	r3, r3
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	3301      	adds	r3, #1
 8001d8a:	f003 031f 	and.w	r3, r3, #31
 8001d8e:	2b09      	cmp	r3, #9
 8001d90:	bf94      	ite	ls
 8001d92:	2301      	movls	r3, #1
 8001d94:	2300      	movhi	r3, #0
 8001d96:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d079      	beq.n	8001e90 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d107      	bne.n	8001db8 <HAL_ADC_ConfigChannel+0x4f8>
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	0e9b      	lsrs	r3, r3, #26
 8001dae:	3301      	adds	r3, #1
 8001db0:	069b      	lsls	r3, r3, #26
 8001db2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001db6:	e015      	b.n	8001de4 <HAL_ADC_ConfigChannel+0x524>
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001dc0:	fa93 f3a3 	rbit	r3, r3
 8001dc4:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001dc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001dc8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001dca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8001dd0:	2320      	movs	r3, #32
 8001dd2:	e003      	b.n	8001ddc <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8001dd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001dd6:	fab3 f383 	clz	r3, r3
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	3301      	adds	r3, #1
 8001dde:	069b      	lsls	r3, r3, #26
 8001de0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d109      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x544>
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	0e9b      	lsrs	r3, r3, #26
 8001df6:	3301      	adds	r3, #1
 8001df8:	f003 031f 	and.w	r3, r3, #31
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001e02:	e017      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x574>
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e0c:	fa93 f3a3 	rbit	r3, r3
 8001e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001e12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e14:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001e16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8001e1c:	2320      	movs	r3, #32
 8001e1e:	e003      	b.n	8001e28 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8001e20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e22:	fab3 f383 	clz	r3, r3
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	3301      	adds	r3, #1
 8001e2a:	f003 031f 	and.w	r3, r3, #31
 8001e2e:	2101      	movs	r1, #1
 8001e30:	fa01 f303 	lsl.w	r3, r1, r3
 8001e34:	ea42 0103 	orr.w	r1, r2, r3
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d10a      	bne.n	8001e5a <HAL_ADC_ConfigChannel+0x59a>
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	0e9b      	lsrs	r3, r3, #26
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	f003 021f 	and.w	r2, r3, #31
 8001e50:	4613      	mov	r3, r2
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	4413      	add	r3, r2
 8001e56:	051b      	lsls	r3, r3, #20
 8001e58:	e018      	b.n	8001e8c <HAL_ADC_ConfigChannel+0x5cc>
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e62:	fa93 f3a3 	rbit	r3, r3
 8001e66:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8001e72:	2320      	movs	r3, #32
 8001e74:	e003      	b.n	8001e7e <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8001e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e78:	fab3 f383 	clz	r3, r3
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	3301      	adds	r3, #1
 8001e80:	f003 021f 	and.w	r2, r3, #31
 8001e84:	4613      	mov	r3, r2
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	4413      	add	r3, r2
 8001e8a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e8c:	430b      	orrs	r3, r1
 8001e8e:	e080      	b.n	8001f92 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d107      	bne.n	8001eac <HAL_ADC_ConfigChannel+0x5ec>
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	0e9b      	lsrs	r3, r3, #26
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	069b      	lsls	r3, r3, #26
 8001ea6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001eaa:	e015      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0x618>
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eb4:	fa93 f3a3 	rbit	r3, r3
 8001eb8:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d101      	bne.n	8001ec8 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8001ec4:	2320      	movs	r3, #32
 8001ec6:	e003      	b.n	8001ed0 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8001ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eca:	fab3 f383 	clz	r3, r3
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	069b      	lsls	r3, r3, #26
 8001ed4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d109      	bne.n	8001ef8 <HAL_ADC_ConfigChannel+0x638>
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	0e9b      	lsrs	r3, r3, #26
 8001eea:	3301      	adds	r3, #1
 8001eec:	f003 031f 	and.w	r3, r3, #31
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef6:	e017      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x668>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	fa93 f3a3 	rbit	r3, r3
 8001f04:	61bb      	str	r3, [r7, #24]
  return result;
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001f0a:	6a3b      	ldr	r3, [r7, #32]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8001f10:	2320      	movs	r3, #32
 8001f12:	e003      	b.n	8001f1c <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8001f14:	6a3b      	ldr	r3, [r7, #32]
 8001f16:	fab3 f383 	clz	r3, r3
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	f003 031f 	and.w	r3, r3, #31
 8001f22:	2101      	movs	r1, #1
 8001f24:	fa01 f303 	lsl.w	r3, r1, r3
 8001f28:	ea42 0103 	orr.w	r1, r2, r3
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d10d      	bne.n	8001f54 <HAL_ADC_ConfigChannel+0x694>
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	0e9b      	lsrs	r3, r3, #26
 8001f3e:	3301      	adds	r3, #1
 8001f40:	f003 021f 	and.w	r2, r3, #31
 8001f44:	4613      	mov	r3, r2
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	4413      	add	r3, r2
 8001f4a:	3b1e      	subs	r3, #30
 8001f4c:	051b      	lsls	r3, r3, #20
 8001f4e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f52:	e01d      	b.n	8001f90 <HAL_ADC_ConfigChannel+0x6d0>
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	fa93 f3a3 	rbit	r3, r3
 8001f60:	60fb      	str	r3, [r7, #12]
  return result;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d103      	bne.n	8001f74 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001f6c:	2320      	movs	r3, #32
 8001f6e:	e005      	b.n	8001f7c <HAL_ADC_ConfigChannel+0x6bc>
 8001f70:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	fab3 f383 	clz	r3, r3
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	f003 021f 	and.w	r2, r3, #31
 8001f82:	4613      	mov	r3, r2
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	4413      	add	r3, r2
 8001f88:	3b1e      	subs	r3, #30
 8001f8a:	051b      	lsls	r3, r3, #20
 8001f8c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f90:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f96:	4619      	mov	r1, r3
 8001f98:	f7ff fa66 	bl	8001468 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	4b44      	ldr	r3, [pc, #272]	@ (80020b4 <HAL_ADC_ConfigChannel+0x7f4>)
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d07a      	beq.n	800209e <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fa8:	4843      	ldr	r0, [pc, #268]	@ (80020b8 <HAL_ADC_ConfigChannel+0x7f8>)
 8001faa:	f7ff f9bb 	bl	8001324 <LL_ADC_GetCommonPathInternalCh>
 8001fae:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a41      	ldr	r2, [pc, #260]	@ (80020bc <HAL_ADC_ConfigChannel+0x7fc>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d12c      	bne.n	8002016 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001fbc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001fc0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d126      	bne.n	8002016 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a3c      	ldr	r2, [pc, #240]	@ (80020c0 <HAL_ADC_ConfigChannel+0x800>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d004      	beq.n	8001fdc <HAL_ADC_ConfigChannel+0x71c>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a3b      	ldr	r2, [pc, #236]	@ (80020c4 <HAL_ADC_ConfigChannel+0x804>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d15d      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fdc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001fe0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4834      	ldr	r0, [pc, #208]	@ (80020b8 <HAL_ADC_ConfigChannel+0x7f8>)
 8001fe8:	f7ff f989 	bl	80012fe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fec:	4b36      	ldr	r3, [pc, #216]	@ (80020c8 <HAL_ADC_ConfigChannel+0x808>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	099b      	lsrs	r3, r3, #6
 8001ff2:	4a36      	ldr	r2, [pc, #216]	@ (80020cc <HAL_ADC_ConfigChannel+0x80c>)
 8001ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff8:	099b      	lsrs	r3, r3, #6
 8001ffa:	1c5a      	adds	r2, r3, #1
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	4413      	add	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002006:	e002      	b.n	800200e <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	3b01      	subs	r3, #1
 800200c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1f9      	bne.n	8002008 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002014:	e040      	b.n	8002098 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a2d      	ldr	r2, [pc, #180]	@ (80020d0 <HAL_ADC_ConfigChannel+0x810>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d118      	bne.n	8002052 <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002020:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002024:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d112      	bne.n	8002052 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a23      	ldr	r2, [pc, #140]	@ (80020c0 <HAL_ADC_ConfigChannel+0x800>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d004      	beq.n	8002040 <HAL_ADC_ConfigChannel+0x780>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a22      	ldr	r2, [pc, #136]	@ (80020c4 <HAL_ADC_ConfigChannel+0x804>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d12d      	bne.n	800209c <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002040:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002044:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002048:	4619      	mov	r1, r3
 800204a:	481b      	ldr	r0, [pc, #108]	@ (80020b8 <HAL_ADC_ConfigChannel+0x7f8>)
 800204c:	f7ff f957 	bl	80012fe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002050:	e024      	b.n	800209c <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a1f      	ldr	r2, [pc, #124]	@ (80020d4 <HAL_ADC_ConfigChannel+0x814>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d120      	bne.n	800209e <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800205c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002060:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d11a      	bne.n	800209e <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a14      	ldr	r2, [pc, #80]	@ (80020c0 <HAL_ADC_ConfigChannel+0x800>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d115      	bne.n	800209e <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002072:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002076:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800207a:	4619      	mov	r1, r3
 800207c:	480e      	ldr	r0, [pc, #56]	@ (80020b8 <HAL_ADC_ConfigChannel+0x7f8>)
 800207e:	f7ff f93e 	bl	80012fe <LL_ADC_SetCommonPathInternalCh>
 8002082:	e00c      	b.n	800209e <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002088:	f043 0220 	orr.w	r2, r3, #32
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002096:	e002      	b.n	800209e <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002098:	bf00      	nop
 800209a:	e000      	b.n	800209e <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800209c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80020a6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	37d8      	adds	r7, #216	@ 0xd8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	80080000 	.word	0x80080000
 80020b8:	50040300 	.word	0x50040300
 80020bc:	c7520000 	.word	0xc7520000
 80020c0:	50040000 	.word	0x50040000
 80020c4:	50040200 	.word	0x50040200
 80020c8:	20000000 	.word	0x20000000
 80020cc:	053e2d63 	.word	0x053e2d63
 80020d0:	cb840000 	.word	0xcb840000
 80020d4:	80000001 	.word	0x80000001

080020d8 <LL_ADC_IsEnabled>:
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d101      	bne.n	80020f0 <LL_ADC_IsEnabled+0x18>
 80020ec:	2301      	movs	r3, #1
 80020ee:	e000      	b.n	80020f2 <LL_ADC_IsEnabled+0x1a>
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <LL_ADC_REG_IsConversionOngoing>:
{
 80020fe:	b480      	push	{r7}
 8002100:	b083      	sub	sp, #12
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 0304 	and.w	r3, r3, #4
 800210e:	2b04      	cmp	r3, #4
 8002110:	d101      	bne.n	8002116 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002112:	2301      	movs	r3, #1
 8002114:	e000      	b.n	8002118 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002124:	b590      	push	{r4, r7, lr}
 8002126:	b0a1      	sub	sp, #132	@ 0x84
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800212e:	2300      	movs	r3, #0
 8002130:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800213a:	2b01      	cmp	r3, #1
 800213c:	d101      	bne.n	8002142 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800213e:	2302      	movs	r3, #2
 8002140:	e093      	b.n	800226a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800214a:	2300      	movs	r3, #0
 800214c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800214e:	2300      	movs	r3, #0
 8002150:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a47      	ldr	r2, [pc, #284]	@ (8002274 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d102      	bne.n	8002162 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800215c:	4b46      	ldr	r3, [pc, #280]	@ (8002278 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	e001      	b.n	8002166 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002162:	2300      	movs	r3, #0
 8002164:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d10b      	bne.n	8002184 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002170:	f043 0220 	orr.w	r2, r3, #32
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e072      	b.n	800226a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff ffb9 	bl	80020fe <LL_ADC_REG_IsConversionOngoing>
 800218c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff ffb3 	bl	80020fe <LL_ADC_REG_IsConversionOngoing>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d154      	bne.n	8002248 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800219e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d151      	bne.n	8002248 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80021a4:	4b35      	ldr	r3, [pc, #212]	@ (800227c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80021a6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d02c      	beq.n	800220a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80021b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	6859      	ldr	r1, [r3, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80021c2:	035b      	lsls	r3, r3, #13
 80021c4:	430b      	orrs	r3, r1
 80021c6:	431a      	orrs	r2, r3
 80021c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021ca:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021cc:	4829      	ldr	r0, [pc, #164]	@ (8002274 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80021ce:	f7ff ff83 	bl	80020d8 <LL_ADC_IsEnabled>
 80021d2:	4604      	mov	r4, r0
 80021d4:	4828      	ldr	r0, [pc, #160]	@ (8002278 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80021d6:	f7ff ff7f 	bl	80020d8 <LL_ADC_IsEnabled>
 80021da:	4603      	mov	r3, r0
 80021dc:	431c      	orrs	r4, r3
 80021de:	4828      	ldr	r0, [pc, #160]	@ (8002280 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80021e0:	f7ff ff7a 	bl	80020d8 <LL_ADC_IsEnabled>
 80021e4:	4603      	mov	r3, r0
 80021e6:	4323      	orrs	r3, r4
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d137      	bne.n	800225c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80021ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80021f4:	f023 030f 	bic.w	r3, r3, #15
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	6811      	ldr	r1, [r2, #0]
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	6892      	ldr	r2, [r2, #8]
 8002200:	430a      	orrs	r2, r1
 8002202:	431a      	orrs	r2, r3
 8002204:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002206:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002208:	e028      	b.n	800225c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800220a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002212:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002214:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002216:	4817      	ldr	r0, [pc, #92]	@ (8002274 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002218:	f7ff ff5e 	bl	80020d8 <LL_ADC_IsEnabled>
 800221c:	4604      	mov	r4, r0
 800221e:	4816      	ldr	r0, [pc, #88]	@ (8002278 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002220:	f7ff ff5a 	bl	80020d8 <LL_ADC_IsEnabled>
 8002224:	4603      	mov	r3, r0
 8002226:	431c      	orrs	r4, r3
 8002228:	4815      	ldr	r0, [pc, #84]	@ (8002280 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800222a:	f7ff ff55 	bl	80020d8 <LL_ADC_IsEnabled>
 800222e:	4603      	mov	r3, r0
 8002230:	4323      	orrs	r3, r4
 8002232:	2b00      	cmp	r3, #0
 8002234:	d112      	bne.n	800225c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002236:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800223e:	f023 030f 	bic.w	r3, r3, #15
 8002242:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002244:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002246:	e009      	b.n	800225c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800224c:	f043 0220 	orr.w	r2, r3, #32
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800225a:	e000      	b.n	800225e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800225c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002266:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800226a:	4618      	mov	r0, r3
 800226c:	3784      	adds	r7, #132	@ 0x84
 800226e:	46bd      	mov	sp, r7
 8002270:	bd90      	pop	{r4, r7, pc}
 8002272:	bf00      	nop
 8002274:	50040000 	.word	0x50040000
 8002278:	50040100 	.word	0x50040100
 800227c:	50040300 	.word	0x50040300
 8002280:	50040200 	.word	0x50040200

08002284 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e0ed      	b.n	8002472 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f893 3020 	ldrb.w	r3, [r3, #32]
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d102      	bne.n	80022a8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7fe fd8a 	bl	8000dbc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f042 0201 	orr.w	r2, r2, #1
 80022b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022b8:	f7ff f802 	bl	80012c0 <HAL_GetTick>
 80022bc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022be:	e012      	b.n	80022e6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80022c0:	f7fe fffe 	bl	80012c0 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b0a      	cmp	r3, #10
 80022cc:	d90b      	bls.n	80022e6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2205      	movs	r2, #5
 80022de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e0c5      	b.n	8002472 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d0e5      	beq.n	80022c0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 0202 	bic.w	r2, r2, #2
 8002302:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002304:	f7fe ffdc 	bl	80012c0 <HAL_GetTick>
 8002308:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800230a:	e012      	b.n	8002332 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800230c:	f7fe ffd8 	bl	80012c0 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b0a      	cmp	r3, #10
 8002318:	d90b      	bls.n	8002332 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2205      	movs	r2, #5
 800232a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e09f      	b.n	8002472 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1e5      	bne.n	800230c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	7e1b      	ldrb	r3, [r3, #24]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d108      	bne.n	800235a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	e007      	b.n	800236a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002368:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	7e5b      	ldrb	r3, [r3, #25]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d108      	bne.n	8002384 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	e007      	b.n	8002394 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002392:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	7e9b      	ldrb	r3, [r3, #26]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d108      	bne.n	80023ae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f042 0220 	orr.w	r2, r2, #32
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	e007      	b.n	80023be <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 0220 	bic.w	r2, r2, #32
 80023bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	7edb      	ldrb	r3, [r3, #27]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d108      	bne.n	80023d8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 0210 	bic.w	r2, r2, #16
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	e007      	b.n	80023e8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f042 0210 	orr.w	r2, r2, #16
 80023e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	7f1b      	ldrb	r3, [r3, #28]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d108      	bne.n	8002402 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f042 0208 	orr.w	r2, r2, #8
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	e007      	b.n	8002412 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 0208 	bic.w	r2, r2, #8
 8002410:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	7f5b      	ldrb	r3, [r3, #29]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d108      	bne.n	800242c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f042 0204 	orr.w	r2, r2, #4
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	e007      	b.n	800243c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f022 0204 	bic.w	r2, r2, #4
 800243a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	431a      	orrs	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	431a      	orrs	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	ea42 0103 	orr.w	r1, r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	1e5a      	subs	r2, r3, #1
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	430a      	orrs	r2, r1
 8002460:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
	...

0800247c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800248c:	4b0c      	ldr	r3, [pc, #48]	@ (80024c0 <__NVIC_SetPriorityGrouping+0x44>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002492:	68ba      	ldr	r2, [r7, #8]
 8002494:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002498:	4013      	ands	r3, r2
 800249a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ae:	4a04      	ldr	r2, [pc, #16]	@ (80024c0 <__NVIC_SetPriorityGrouping+0x44>)
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	60d3      	str	r3, [r2, #12]
}
 80024b4:	bf00      	nop
 80024b6:	3714      	adds	r7, #20
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	e000ed00 	.word	0xe000ed00

080024c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024c8:	4b04      	ldr	r3, [pc, #16]	@ (80024dc <__NVIC_GetPriorityGrouping+0x18>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	0a1b      	lsrs	r3, r3, #8
 80024ce:	f003 0307 	and.w	r3, r3, #7
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	e000ed00 	.word	0xe000ed00

080024e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	db0b      	blt.n	800250a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024f2:	79fb      	ldrb	r3, [r7, #7]
 80024f4:	f003 021f 	and.w	r2, r3, #31
 80024f8:	4907      	ldr	r1, [pc, #28]	@ (8002518 <__NVIC_EnableIRQ+0x38>)
 80024fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fe:	095b      	lsrs	r3, r3, #5
 8002500:	2001      	movs	r0, #1
 8002502:	fa00 f202 	lsl.w	r2, r0, r2
 8002506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	e000e100 	.word	0xe000e100

0800251c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	6039      	str	r1, [r7, #0]
 8002526:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252c:	2b00      	cmp	r3, #0
 800252e:	db0a      	blt.n	8002546 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	b2da      	uxtb	r2, r3
 8002534:	490c      	ldr	r1, [pc, #48]	@ (8002568 <__NVIC_SetPriority+0x4c>)
 8002536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253a:	0112      	lsls	r2, r2, #4
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	440b      	add	r3, r1
 8002540:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002544:	e00a      	b.n	800255c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	b2da      	uxtb	r2, r3
 800254a:	4908      	ldr	r1, [pc, #32]	@ (800256c <__NVIC_SetPriority+0x50>)
 800254c:	79fb      	ldrb	r3, [r7, #7]
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	3b04      	subs	r3, #4
 8002554:	0112      	lsls	r2, r2, #4
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	440b      	add	r3, r1
 800255a:	761a      	strb	r2, [r3, #24]
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	e000e100 	.word	0xe000e100
 800256c:	e000ed00 	.word	0xe000ed00

08002570 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002570:	b480      	push	{r7}
 8002572:	b089      	sub	sp, #36	@ 0x24
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	f1c3 0307 	rsb	r3, r3, #7
 800258a:	2b04      	cmp	r3, #4
 800258c:	bf28      	it	cs
 800258e:	2304      	movcs	r3, #4
 8002590:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	3304      	adds	r3, #4
 8002596:	2b06      	cmp	r3, #6
 8002598:	d902      	bls.n	80025a0 <NVIC_EncodePriority+0x30>
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	3b03      	subs	r3, #3
 800259e:	e000      	b.n	80025a2 <NVIC_EncodePriority+0x32>
 80025a0:	2300      	movs	r3, #0
 80025a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a4:	f04f 32ff 	mov.w	r2, #4294967295
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	43da      	mvns	r2, r3
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	401a      	ands	r2, r3
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025b8:	f04f 31ff 	mov.w	r1, #4294967295
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	fa01 f303 	lsl.w	r3, r1, r3
 80025c2:	43d9      	mvns	r1, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025c8:	4313      	orrs	r3, r2
         );
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3724      	adds	r7, #36	@ 0x24
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b082      	sub	sp, #8
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f7ff ff4c 	bl	800247c <__NVIC_SetPriorityGrouping>
}
 80025e4:	bf00      	nop
 80025e6:	3708      	adds	r7, #8
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
 80025f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80025fa:	2300      	movs	r3, #0
 80025fc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025fe:	f7ff ff61 	bl	80024c4 <__NVIC_GetPriorityGrouping>
 8002602:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	68b9      	ldr	r1, [r7, #8]
 8002608:	6978      	ldr	r0, [r7, #20]
 800260a:	f7ff ffb1 	bl	8002570 <NVIC_EncodePriority>
 800260e:	4602      	mov	r2, r0
 8002610:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002614:	4611      	mov	r1, r2
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff ff80 	bl	800251c <__NVIC_SetPriority>
}
 800261c:	bf00      	nop
 800261e:	3718      	adds	r7, #24
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	4603      	mov	r3, r0
 800262c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800262e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff ff54 	bl	80024e0 <__NVIC_EnableIRQ>
}
 8002638:	bf00      	nop
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002648:	2300      	movs	r3, #0
 800264a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d008      	beq.n	800266a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2204      	movs	r2, #4
 800265c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e022      	b.n	80026b0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 020e 	bic.w	r2, r2, #14
 8002678:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 0201 	bic.w	r2, r2, #1
 8002688:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800268e:	f003 021c 	and.w	r2, r3, #28
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002696:	2101      	movs	r1, #1
 8002698:	fa01 f202 	lsl.w	r2, r1, r2
 800269c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80026ae:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026c4:	2300      	movs	r3, #0
 80026c6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d005      	beq.n	80026e0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2204      	movs	r2, #4
 80026d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	73fb      	strb	r3, [r7, #15]
 80026de:	e029      	b.n	8002734 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 020e 	bic.w	r2, r2, #14
 80026ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 0201 	bic.w	r2, r2, #1
 80026fe:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002704:	f003 021c 	and.w	r2, r3, #28
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270c:	2101      	movs	r1, #1
 800270e:	fa01 f202 	lsl.w	r2, r1, r2
 8002712:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	4798      	blx	r3
    }
  }
  return status;
 8002734:	7bfb      	ldrb	r3, [r7, #15]
}
 8002736:	4618      	mov	r0, r3
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
	...

08002740 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002740:	b480      	push	{r7}
 8002742:	b087      	sub	sp, #28
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800274a:	2300      	movs	r3, #0
 800274c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800274e:	e166      	b.n	8002a1e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	2101      	movs	r1, #1
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	fa01 f303 	lsl.w	r3, r1, r3
 800275c:	4013      	ands	r3, r2
 800275e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2b00      	cmp	r3, #0
 8002764:	f000 8158 	beq.w	8002a18 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 0303 	and.w	r3, r3, #3
 8002770:	2b01      	cmp	r3, #1
 8002772:	d005      	beq.n	8002780 <HAL_GPIO_Init+0x40>
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f003 0303 	and.w	r3, r3, #3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d130      	bne.n	80027e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	2203      	movs	r2, #3
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	43db      	mvns	r3, r3
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	4013      	ands	r3, r2
 8002796:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	68da      	ldr	r2, [r3, #12]
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027b6:	2201      	movs	r2, #1
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	43db      	mvns	r3, r3
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	4013      	ands	r3, r2
 80027c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	091b      	lsrs	r3, r3, #4
 80027cc:	f003 0201 	and.w	r2, r3, #1
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	4313      	orrs	r3, r2
 80027da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	2b03      	cmp	r3, #3
 80027ec:	d017      	beq.n	800281e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	2203      	movs	r2, #3
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	43db      	mvns	r3, r3
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	4013      	ands	r3, r2
 8002804:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	4313      	orrs	r3, r2
 8002816:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f003 0303 	and.w	r3, r3, #3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d123      	bne.n	8002872 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	08da      	lsrs	r2, r3, #3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	3208      	adds	r2, #8
 8002832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002836:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	220f      	movs	r2, #15
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	43db      	mvns	r3, r3
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	4013      	ands	r3, r2
 800284c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	691a      	ldr	r2, [r3, #16]
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	4313      	orrs	r3, r2
 8002862:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	08da      	lsrs	r2, r3, #3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3208      	adds	r2, #8
 800286c:	6939      	ldr	r1, [r7, #16]
 800286e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	2203      	movs	r2, #3
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	43db      	mvns	r3, r3
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	4013      	ands	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f003 0203 	and.w	r2, r3, #3
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	4313      	orrs	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f000 80b2 	beq.w	8002a18 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028b4:	4b61      	ldr	r3, [pc, #388]	@ (8002a3c <HAL_GPIO_Init+0x2fc>)
 80028b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028b8:	4a60      	ldr	r2, [pc, #384]	@ (8002a3c <HAL_GPIO_Init+0x2fc>)
 80028ba:	f043 0301 	orr.w	r3, r3, #1
 80028be:	6613      	str	r3, [r2, #96]	@ 0x60
 80028c0:	4b5e      	ldr	r3, [pc, #376]	@ (8002a3c <HAL_GPIO_Init+0x2fc>)
 80028c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	60bb      	str	r3, [r7, #8]
 80028ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80028cc:	4a5c      	ldr	r2, [pc, #368]	@ (8002a40 <HAL_GPIO_Init+0x300>)
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	089b      	lsrs	r3, r3, #2
 80028d2:	3302      	adds	r3, #2
 80028d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	f003 0303 	and.w	r3, r3, #3
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	220f      	movs	r2, #15
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	43db      	mvns	r3, r3
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	4013      	ands	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80028f6:	d02b      	beq.n	8002950 <HAL_GPIO_Init+0x210>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a52      	ldr	r2, [pc, #328]	@ (8002a44 <HAL_GPIO_Init+0x304>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d025      	beq.n	800294c <HAL_GPIO_Init+0x20c>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a51      	ldr	r2, [pc, #324]	@ (8002a48 <HAL_GPIO_Init+0x308>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d01f      	beq.n	8002948 <HAL_GPIO_Init+0x208>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a50      	ldr	r2, [pc, #320]	@ (8002a4c <HAL_GPIO_Init+0x30c>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d019      	beq.n	8002944 <HAL_GPIO_Init+0x204>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a4f      	ldr	r2, [pc, #316]	@ (8002a50 <HAL_GPIO_Init+0x310>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d013      	beq.n	8002940 <HAL_GPIO_Init+0x200>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a4e      	ldr	r2, [pc, #312]	@ (8002a54 <HAL_GPIO_Init+0x314>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d00d      	beq.n	800293c <HAL_GPIO_Init+0x1fc>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a4d      	ldr	r2, [pc, #308]	@ (8002a58 <HAL_GPIO_Init+0x318>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d007      	beq.n	8002938 <HAL_GPIO_Init+0x1f8>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a4c      	ldr	r2, [pc, #304]	@ (8002a5c <HAL_GPIO_Init+0x31c>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d101      	bne.n	8002934 <HAL_GPIO_Init+0x1f4>
 8002930:	2307      	movs	r3, #7
 8002932:	e00e      	b.n	8002952 <HAL_GPIO_Init+0x212>
 8002934:	2308      	movs	r3, #8
 8002936:	e00c      	b.n	8002952 <HAL_GPIO_Init+0x212>
 8002938:	2306      	movs	r3, #6
 800293a:	e00a      	b.n	8002952 <HAL_GPIO_Init+0x212>
 800293c:	2305      	movs	r3, #5
 800293e:	e008      	b.n	8002952 <HAL_GPIO_Init+0x212>
 8002940:	2304      	movs	r3, #4
 8002942:	e006      	b.n	8002952 <HAL_GPIO_Init+0x212>
 8002944:	2303      	movs	r3, #3
 8002946:	e004      	b.n	8002952 <HAL_GPIO_Init+0x212>
 8002948:	2302      	movs	r3, #2
 800294a:	e002      	b.n	8002952 <HAL_GPIO_Init+0x212>
 800294c:	2301      	movs	r3, #1
 800294e:	e000      	b.n	8002952 <HAL_GPIO_Init+0x212>
 8002950:	2300      	movs	r3, #0
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	f002 0203 	and.w	r2, r2, #3
 8002958:	0092      	lsls	r2, r2, #2
 800295a:	4093      	lsls	r3, r2
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	4313      	orrs	r3, r2
 8002960:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002962:	4937      	ldr	r1, [pc, #220]	@ (8002a40 <HAL_GPIO_Init+0x300>)
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	089b      	lsrs	r3, r3, #2
 8002968:	3302      	adds	r3, #2
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002970:	4b3b      	ldr	r3, [pc, #236]	@ (8002a60 <HAL_GPIO_Init+0x320>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	43db      	mvns	r3, r3
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	4013      	ands	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	4313      	orrs	r3, r2
 8002992:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002994:	4a32      	ldr	r2, [pc, #200]	@ (8002a60 <HAL_GPIO_Init+0x320>)
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800299a:	4b31      	ldr	r3, [pc, #196]	@ (8002a60 <HAL_GPIO_Init+0x320>)
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	43db      	mvns	r3, r3
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	4013      	ands	r3, r2
 80029a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029be:	4a28      	ldr	r2, [pc, #160]	@ (8002a60 <HAL_GPIO_Init+0x320>)
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80029c4:	4b26      	ldr	r3, [pc, #152]	@ (8002a60 <HAL_GPIO_Init+0x320>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	43db      	mvns	r3, r3
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	4013      	ands	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80029e8:	4a1d      	ldr	r2, [pc, #116]	@ (8002a60 <HAL_GPIO_Init+0x320>)
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80029ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002a60 <HAL_GPIO_Init+0x320>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	43db      	mvns	r3, r3
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	4013      	ands	r3, r2
 80029fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a12:	4a13      	ldr	r2, [pc, #76]	@ (8002a60 <HAL_GPIO_Init+0x320>)
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	fa22 f303 	lsr.w	r3, r2, r3
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f47f ae91 	bne.w	8002750 <HAL_GPIO_Init+0x10>
  }
}
 8002a2e:	bf00      	nop
 8002a30:	bf00      	nop
 8002a32:	371c      	adds	r7, #28
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	40010000 	.word	0x40010000
 8002a44:	48000400 	.word	0x48000400
 8002a48:	48000800 	.word	0x48000800
 8002a4c:	48000c00 	.word	0x48000c00
 8002a50:	48001000 	.word	0x48001000
 8002a54:	48001400 	.word	0x48001400
 8002a58:	48001800 	.word	0x48001800
 8002a5c:	48001c00 	.word	0x48001c00
 8002a60:	40010400 	.word	0x40010400

08002a64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	807b      	strh	r3, [r7, #2]
 8002a70:	4613      	mov	r3, r2
 8002a72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a74:	787b      	ldrb	r3, [r7, #1]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a7a:	887a      	ldrh	r2, [r7, #2]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a80:	e002      	b.n	8002a88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a82:	887a      	ldrh	r2, [r7, #2]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002aa6:	887a      	ldrh	r2, [r7, #2]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	041a      	lsls	r2, r3, #16
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	43d9      	mvns	r1, r3
 8002ab2:	887b      	ldrh	r3, [r7, #2]
 8002ab4:	400b      	ands	r3, r1
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	619a      	str	r2, [r3, #24]
}
 8002abc:	bf00      	nop
 8002abe:	3714      	adds	r7, #20
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002ad2:	4b08      	ldr	r3, [pc, #32]	@ (8002af4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ad4:	695a      	ldr	r2, [r3, #20]
 8002ad6:	88fb      	ldrh	r3, [r7, #6]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d006      	beq.n	8002aec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ade:	4a05      	ldr	r2, [pc, #20]	@ (8002af4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ae0:	88fb      	ldrh	r3, [r7, #6]
 8002ae2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ae4:	88fb      	ldrh	r3, [r7, #6]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fd fdf8 	bl	80006dc <HAL_GPIO_EXTI_Callback>
  }
}
 8002aec:	bf00      	nop
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40010400 	.word	0x40010400

08002af8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e08d      	b.n	8002c26 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d106      	bne.n	8002b24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7fe f9f0 	bl	8000f04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2224      	movs	r2, #36	@ 0x24
 8002b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 0201 	bic.w	r2, r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b48:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b58:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d107      	bne.n	8002b72 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689a      	ldr	r2, [r3, #8]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b6e:	609a      	str	r2, [r3, #8]
 8002b70:	e006      	b.n	8002b80 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689a      	ldr	r2, [r3, #8]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002b7e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d108      	bne.n	8002b9a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b96:	605a      	str	r2, [r3, #4]
 8002b98:	e007      	b.n	8002baa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ba8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	6812      	ldr	r2, [r2, #0]
 8002bb4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002bb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bbc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68da      	ldr	r2, [r3, #12]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002bcc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691a      	ldr	r2, [r3, #16]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	430a      	orrs	r2, r1
 8002be6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	69d9      	ldr	r1, [r3, #28]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a1a      	ldr	r2, [r3, #32]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 0201 	orr.w	r2, r2, #1
 8002c06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2220      	movs	r2, #32
 8002c12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b088      	sub	sp, #32
 8002c34:	af02      	add	r7, sp, #8
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	4608      	mov	r0, r1
 8002c3a:	4611      	mov	r1, r2
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	4603      	mov	r3, r0
 8002c40:	817b      	strh	r3, [r7, #10]
 8002c42:	460b      	mov	r3, r1
 8002c44:	813b      	strh	r3, [r7, #8]
 8002c46:	4613      	mov	r3, r2
 8002c48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b20      	cmp	r3, #32
 8002c54:	f040 80fd 	bne.w	8002e52 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d002      	beq.n	8002c64 <HAL_I2C_Mem_Read+0x34>
 8002c5e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d105      	bne.n	8002c70 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c6a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e0f1      	b.n	8002e54 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d101      	bne.n	8002c7e <HAL_I2C_Mem_Read+0x4e>
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	e0ea      	b.n	8002e54 <HAL_I2C_Mem_Read+0x224>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c86:	f7fe fb1b 	bl	80012c0 <HAL_GetTick>
 8002c8a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	2319      	movs	r3, #25
 8002c92:	2201      	movs	r2, #1
 8002c94:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f000 f95b 	bl	8002f54 <I2C_WaitOnFlagUntilTimeout>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e0d5      	b.n	8002e54 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2222      	movs	r2, #34	@ 0x22
 8002cac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2240      	movs	r2, #64	@ 0x40
 8002cb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6a3a      	ldr	r2, [r7, #32]
 8002cc2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002cc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cd0:	88f8      	ldrh	r0, [r7, #6]
 8002cd2:	893a      	ldrh	r2, [r7, #8]
 8002cd4:	8979      	ldrh	r1, [r7, #10]
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	9301      	str	r3, [sp, #4]
 8002cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	4603      	mov	r3, r0
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 f8bf 	bl	8002e64 <I2C_RequestMemoryRead>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d005      	beq.n	8002cf8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e0ad      	b.n	8002e54 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	2bff      	cmp	r3, #255	@ 0xff
 8002d00:	d90e      	bls.n	8002d20 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2201      	movs	r2, #1
 8002d06:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	8979      	ldrh	r1, [r7, #10]
 8002d10:	4b52      	ldr	r3, [pc, #328]	@ (8002e5c <HAL_I2C_Mem_Read+0x22c>)
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f000 fadf 	bl	80032dc <I2C_TransferConfig>
 8002d1e:	e00f      	b.n	8002d40 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d2e:	b2da      	uxtb	r2, r3
 8002d30:	8979      	ldrh	r1, [r7, #10]
 8002d32:	4b4a      	ldr	r3, [pc, #296]	@ (8002e5c <HAL_I2C_Mem_Read+0x22c>)
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f000 face 	bl	80032dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d46:	2200      	movs	r2, #0
 8002d48:	2104      	movs	r1, #4
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f000 f902 	bl	8002f54 <I2C_WaitOnFlagUntilTimeout>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e07c      	b.n	8002e54 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d64:	b2d2      	uxtb	r2, r2
 8002d66:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6c:	1c5a      	adds	r2, r3, #1
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d76:	3b01      	subs	r3, #1
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	3b01      	subs	r3, #1
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d034      	beq.n	8002e00 <HAL_I2C_Mem_Read+0x1d0>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d130      	bne.n	8002e00 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	9300      	str	r3, [sp, #0]
 8002da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002da4:	2200      	movs	r2, #0
 8002da6:	2180      	movs	r1, #128	@ 0x80
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f000 f8d3 	bl	8002f54 <I2C_WaitOnFlagUntilTimeout>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e04d      	b.n	8002e54 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	2bff      	cmp	r3, #255	@ 0xff
 8002dc0:	d90e      	bls.n	8002de0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	8979      	ldrh	r1, [r7, #10]
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 fa7f 	bl	80032dc <I2C_TransferConfig>
 8002dde:	e00f      	b.n	8002e00 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dee:	b2da      	uxtb	r2, r3
 8002df0:	8979      	ldrh	r1, [r7, #10]
 8002df2:	2300      	movs	r3, #0
 8002df4:	9300      	str	r3, [sp, #0]
 8002df6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 fa6e 	bl	80032dc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d19a      	bne.n	8002d40 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f000 f940 	bl	8003094 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e01a      	b.n	8002e54 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2220      	movs	r2, #32
 8002e24:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	6859      	ldr	r1, [r3, #4]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	4b0b      	ldr	r3, [pc, #44]	@ (8002e60 <HAL_I2C_Mem_Read+0x230>)
 8002e32:	400b      	ands	r3, r1
 8002e34:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2220      	movs	r2, #32
 8002e3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	e000      	b.n	8002e54 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002e52:	2302      	movs	r3, #2
  }
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3718      	adds	r7, #24
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	80002400 	.word	0x80002400
 8002e60:	fe00e800 	.word	0xfe00e800

08002e64 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af02      	add	r7, sp, #8
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	4608      	mov	r0, r1
 8002e6e:	4611      	mov	r1, r2
 8002e70:	461a      	mov	r2, r3
 8002e72:	4603      	mov	r3, r0
 8002e74:	817b      	strh	r3, [r7, #10]
 8002e76:	460b      	mov	r3, r1
 8002e78:	813b      	strh	r3, [r7, #8]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002e7e:	88fb      	ldrh	r3, [r7, #6]
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	8979      	ldrh	r1, [r7, #10]
 8002e84:	4b20      	ldr	r3, [pc, #128]	@ (8002f08 <I2C_RequestMemoryRead+0xa4>)
 8002e86:	9300      	str	r3, [sp, #0]
 8002e88:	2300      	movs	r3, #0
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f000 fa26 	bl	80032dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e90:	69fa      	ldr	r2, [r7, #28]
 8002e92:	69b9      	ldr	r1, [r7, #24]
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f000 f8b6 	bl	8003006 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e02c      	b.n	8002efe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ea4:	88fb      	ldrh	r3, [r7, #6]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d105      	bne.n	8002eb6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002eaa:	893b      	ldrh	r3, [r7, #8]
 8002eac:	b2da      	uxtb	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	629a      	str	r2, [r3, #40]	@ 0x28
 8002eb4:	e015      	b.n	8002ee2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002eb6:	893b      	ldrh	r3, [r7, #8]
 8002eb8:	0a1b      	lsrs	r3, r3, #8
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	b2da      	uxtb	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ec4:	69fa      	ldr	r2, [r7, #28]
 8002ec6:	69b9      	ldr	r1, [r7, #24]
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f000 f89c 	bl	8003006 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e012      	b.n	8002efe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ed8:	893b      	ldrh	r3, [r7, #8]
 8002eda:	b2da      	uxtb	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	2140      	movs	r1, #64	@ 0x40
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 f831 	bl	8002f54 <I2C_WaitOnFlagUntilTimeout>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e000      	b.n	8002efe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	80002000 	.word	0x80002000

08002f0c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d103      	bne.n	8002f2a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2200      	movs	r2, #0
 8002f28:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d007      	beq.n	8002f48 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	699a      	ldr	r2, [r3, #24]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0201 	orr.w	r2, r2, #1
 8002f46:	619a      	str	r2, [r3, #24]
  }
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	603b      	str	r3, [r7, #0]
 8002f60:	4613      	mov	r3, r2
 8002f62:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f64:	e03b      	b.n	8002fde <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	6839      	ldr	r1, [r7, #0]
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f000 f8d6 	bl	800311c <I2C_IsErrorOccurred>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e041      	b.n	8002ffe <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f80:	d02d      	beq.n	8002fde <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f82:	f7fe f99d 	bl	80012c0 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d302      	bcc.n	8002f98 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d122      	bne.n	8002fde <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	699a      	ldr	r2, [r3, #24]
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	68ba      	ldr	r2, [r7, #8]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	bf0c      	ite	eq
 8002fa8:	2301      	moveq	r3, #1
 8002faa:	2300      	movne	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	461a      	mov	r2, r3
 8002fb0:	79fb      	ldrb	r3, [r7, #7]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d113      	bne.n	8002fde <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fba:	f043 0220 	orr.w	r2, r3, #32
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e00f      	b.n	8002ffe <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	699a      	ldr	r2, [r3, #24]
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	bf0c      	ite	eq
 8002fee:	2301      	moveq	r3, #1
 8002ff0:	2300      	movne	r3, #0
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	79fb      	ldrb	r3, [r7, #7]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d0b4      	beq.n	8002f66 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b084      	sub	sp, #16
 800300a:	af00      	add	r7, sp, #0
 800300c:	60f8      	str	r0, [r7, #12]
 800300e:	60b9      	str	r1, [r7, #8]
 8003010:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003012:	e033      	b.n	800307c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	68b9      	ldr	r1, [r7, #8]
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f000 f87f 	bl	800311c <I2C_IsErrorOccurred>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e031      	b.n	800308c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302e:	d025      	beq.n	800307c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003030:	f7fe f946 	bl	80012c0 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	429a      	cmp	r2, r3
 800303e:	d302      	bcc.n	8003046 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d11a      	bne.n	800307c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b02      	cmp	r3, #2
 8003052:	d013      	beq.n	800307c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003058:	f043 0220 	orr.w	r2, r3, #32
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2220      	movs	r2, #32
 8003064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e007      	b.n	800308c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b02      	cmp	r3, #2
 8003088:	d1c4      	bne.n	8003014 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030a0:	e02f      	b.n	8003102 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	68b9      	ldr	r1, [r7, #8]
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f000 f838 	bl	800311c <I2C_IsErrorOccurred>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e02d      	b.n	8003112 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030b6:	f7fe f903 	bl	80012c0 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d302      	bcc.n	80030cc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d11a      	bne.n	8003102 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	f003 0320 	and.w	r3, r3, #32
 80030d6:	2b20      	cmp	r3, #32
 80030d8:	d013      	beq.n	8003102 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030de:	f043 0220 	orr.w	r2, r3, #32
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2220      	movs	r2, #32
 80030ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e007      	b.n	8003112 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	f003 0320 	and.w	r3, r3, #32
 800310c:	2b20      	cmp	r3, #32
 800310e:	d1c8      	bne.n	80030a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
	...

0800311c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b08a      	sub	sp, #40	@ 0x28
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003128:	2300      	movs	r3, #0
 800312a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003136:	2300      	movs	r3, #0
 8003138:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	f003 0310 	and.w	r3, r3, #16
 8003144:	2b00      	cmp	r3, #0
 8003146:	d068      	beq.n	800321a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2210      	movs	r2, #16
 800314e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003150:	e049      	b.n	80031e6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003158:	d045      	beq.n	80031e6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800315a:	f7fe f8b1 	bl	80012c0 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	68ba      	ldr	r2, [r7, #8]
 8003166:	429a      	cmp	r2, r3
 8003168:	d302      	bcc.n	8003170 <I2C_IsErrorOccurred+0x54>
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d13a      	bne.n	80031e6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800317a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003182:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800318e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003192:	d121      	bne.n	80031d8 <I2C_IsErrorOccurred+0xbc>
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800319a:	d01d      	beq.n	80031d8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800319c:	7cfb      	ldrb	r3, [r7, #19]
 800319e:	2b20      	cmp	r3, #32
 80031a0:	d01a      	beq.n	80031d8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80031b0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80031b2:	f7fe f885 	bl	80012c0 <HAL_GetTick>
 80031b6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031b8:	e00e      	b.n	80031d8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80031ba:	f7fe f881 	bl	80012c0 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b19      	cmp	r3, #25
 80031c6:	d907      	bls.n	80031d8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80031c8:	6a3b      	ldr	r3, [r7, #32]
 80031ca:	f043 0320 	orr.w	r3, r3, #32
 80031ce:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80031d6:	e006      	b.n	80031e6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	f003 0320 	and.w	r3, r3, #32
 80031e2:	2b20      	cmp	r3, #32
 80031e4:	d1e9      	bne.n	80031ba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	f003 0320 	and.w	r3, r3, #32
 80031f0:	2b20      	cmp	r3, #32
 80031f2:	d003      	beq.n	80031fc <I2C_IsErrorOccurred+0xe0>
 80031f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0aa      	beq.n	8003152 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80031fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003200:	2b00      	cmp	r3, #0
 8003202:	d103      	bne.n	800320c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2220      	movs	r2, #32
 800320a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800320c:	6a3b      	ldr	r3, [r7, #32]
 800320e:	f043 0304 	orr.w	r3, r3, #4
 8003212:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00b      	beq.n	8003244 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800322c:	6a3b      	ldr	r3, [r7, #32]
 800322e:	f043 0301 	orr.w	r3, r3, #1
 8003232:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800323c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00b      	beq.n	8003266 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800324e:	6a3b      	ldr	r3, [r7, #32]
 8003250:	f043 0308 	orr.w	r3, r3, #8
 8003254:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800325e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00b      	beq.n	8003288 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003270:	6a3b      	ldr	r3, [r7, #32]
 8003272:	f043 0302 	orr.w	r3, r3, #2
 8003276:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003280:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003288:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800328c:	2b00      	cmp	r3, #0
 800328e:	d01c      	beq.n	80032ca <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f7ff fe3b 	bl	8002f0c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	6859      	ldr	r1, [r3, #4]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	4b0d      	ldr	r3, [pc, #52]	@ (80032d8 <I2C_IsErrorOccurred+0x1bc>)
 80032a2:	400b      	ands	r3, r1
 80032a4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032aa:	6a3b      	ldr	r3, [r7, #32]
 80032ac:	431a      	orrs	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2220      	movs	r2, #32
 80032b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80032ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3728      	adds	r7, #40	@ 0x28
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	fe00e800 	.word	0xfe00e800

080032dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80032dc:	b480      	push	{r7}
 80032de:	b087      	sub	sp, #28
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	607b      	str	r3, [r7, #4]
 80032e6:	460b      	mov	r3, r1
 80032e8:	817b      	strh	r3, [r7, #10]
 80032ea:	4613      	mov	r3, r2
 80032ec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032ee:	897b      	ldrh	r3, [r7, #10]
 80032f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032f4:	7a7b      	ldrb	r3, [r7, #9]
 80032f6:	041b      	lsls	r3, r3, #16
 80032f8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032fc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003302:	6a3b      	ldr	r3, [r7, #32]
 8003304:	4313      	orrs	r3, r2
 8003306:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800330a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	6a3b      	ldr	r3, [r7, #32]
 8003314:	0d5b      	lsrs	r3, r3, #21
 8003316:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800331a:	4b08      	ldr	r3, [pc, #32]	@ (800333c <I2C_TransferConfig+0x60>)
 800331c:	430b      	orrs	r3, r1
 800331e:	43db      	mvns	r3, r3
 8003320:	ea02 0103 	and.w	r1, r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	430a      	orrs	r2, r1
 800332c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800332e:	bf00      	nop
 8003330:	371c      	adds	r7, #28
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	03ff63ff 	.word	0x03ff63ff

08003340 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b20      	cmp	r3, #32
 8003354:	d138      	bne.n	80033c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800335c:	2b01      	cmp	r3, #1
 800335e:	d101      	bne.n	8003364 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003360:	2302      	movs	r3, #2
 8003362:	e032      	b.n	80033ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2224      	movs	r2, #36	@ 0x24
 8003370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 0201 	bic.w	r2, r2, #1
 8003382:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003392:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6819      	ldr	r1, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f042 0201 	orr.w	r2, r2, #1
 80033b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2220      	movs	r2, #32
 80033b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80033c4:	2300      	movs	r3, #0
 80033c6:	e000      	b.n	80033ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80033c8:	2302      	movs	r3, #2
  }
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr

080033d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033d6:	b480      	push	{r7}
 80033d8:	b085      	sub	sp, #20
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
 80033de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	2b20      	cmp	r3, #32
 80033ea:	d139      	bne.n	8003460 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d101      	bne.n	80033fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80033f6:	2302      	movs	r3, #2
 80033f8:	e033      	b.n	8003462 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2224      	movs	r2, #36	@ 0x24
 8003406:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 0201 	bic.w	r2, r2, #1
 8003418:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003428:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	021b      	lsls	r3, r3, #8
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	4313      	orrs	r3, r2
 8003432:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f042 0201 	orr.w	r2, r2, #1
 800344a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2220      	movs	r2, #32
 8003450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800345c:	2300      	movs	r3, #0
 800345e:	e000      	b.n	8003462 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003460:	2302      	movs	r3, #2
  }
}
 8003462:	4618      	mov	r0, r3
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
	...

08003470 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003474:	4b04      	ldr	r3, [pc, #16]	@ (8003488 <HAL_PWREx_GetVoltageRange+0x18>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800347c:	4618      	mov	r0, r3
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	40007000 	.word	0x40007000

0800348c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800349a:	d130      	bne.n	80034fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800349c:	4b23      	ldr	r3, [pc, #140]	@ (800352c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80034a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034a8:	d038      	beq.n	800351c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80034aa:	4b20      	ldr	r3, [pc, #128]	@ (800352c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80034b2:	4a1e      	ldr	r2, [pc, #120]	@ (800352c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034b4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80034b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80034ba:	4b1d      	ldr	r3, [pc, #116]	@ (8003530 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2232      	movs	r2, #50	@ 0x32
 80034c0:	fb02 f303 	mul.w	r3, r2, r3
 80034c4:	4a1b      	ldr	r2, [pc, #108]	@ (8003534 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80034c6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ca:	0c9b      	lsrs	r3, r3, #18
 80034cc:	3301      	adds	r3, #1
 80034ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034d0:	e002      	b.n	80034d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	3b01      	subs	r3, #1
 80034d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034d8:	4b14      	ldr	r3, [pc, #80]	@ (800352c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034e4:	d102      	bne.n	80034ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1f2      	bne.n	80034d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034ec:	4b0f      	ldr	r3, [pc, #60]	@ (800352c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034f8:	d110      	bne.n	800351c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e00f      	b.n	800351e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80034fe:	4b0b      	ldr	r3, [pc, #44]	@ (800352c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003506:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800350a:	d007      	beq.n	800351c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800350c:	4b07      	ldr	r3, [pc, #28]	@ (800352c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003514:	4a05      	ldr	r2, [pc, #20]	@ (800352c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003516:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800351a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	40007000 	.word	0x40007000
 8003530:	20000000 	.word	0x20000000
 8003534:	431bde83 	.word	0x431bde83

08003538 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b088      	sub	sp, #32
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d102      	bne.n	800354c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	f000 bc08 	b.w	8003d5c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800354c:	4b96      	ldr	r3, [pc, #600]	@ (80037a8 <HAL_RCC_OscConfig+0x270>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f003 030c 	and.w	r3, r3, #12
 8003554:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003556:	4b94      	ldr	r3, [pc, #592]	@ (80037a8 <HAL_RCC_OscConfig+0x270>)
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	f003 0303 	and.w	r3, r3, #3
 800355e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0310 	and.w	r3, r3, #16
 8003568:	2b00      	cmp	r3, #0
 800356a:	f000 80e4 	beq.w	8003736 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d007      	beq.n	8003584 <HAL_RCC_OscConfig+0x4c>
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	2b0c      	cmp	r3, #12
 8003578:	f040 808b 	bne.w	8003692 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	2b01      	cmp	r3, #1
 8003580:	f040 8087 	bne.w	8003692 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003584:	4b88      	ldr	r3, [pc, #544]	@ (80037a8 <HAL_RCC_OscConfig+0x270>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d005      	beq.n	800359c <HAL_RCC_OscConfig+0x64>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e3df      	b.n	8003d5c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a1a      	ldr	r2, [r3, #32]
 80035a0:	4b81      	ldr	r3, [pc, #516]	@ (80037a8 <HAL_RCC_OscConfig+0x270>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0308 	and.w	r3, r3, #8
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d004      	beq.n	80035b6 <HAL_RCC_OscConfig+0x7e>
 80035ac:	4b7e      	ldr	r3, [pc, #504]	@ (80037a8 <HAL_RCC_OscConfig+0x270>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035b4:	e005      	b.n	80035c2 <HAL_RCC_OscConfig+0x8a>
 80035b6:	4b7c      	ldr	r3, [pc, #496]	@ (80037a8 <HAL_RCC_OscConfig+0x270>)
 80035b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035bc:	091b      	lsrs	r3, r3, #4
 80035be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d223      	bcs.n	800360e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 fdc4 	bl	8004158 <RCC_SetFlashLatencyFromMSIRange>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e3c0      	b.n	8003d5c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035da:	4b73      	ldr	r3, [pc, #460]	@ (80037a8 <HAL_RCC_OscConfig+0x270>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a72      	ldr	r2, [pc, #456]	@ (80037a8 <HAL_RCC_OscConfig+0x270>)
 80035e0:	f043 0308 	orr.w	r3, r3, #8
 80035e4:	6013      	str	r3, [r2, #0]
 80035e6:	4b70      	ldr	r3, [pc, #448]	@ (80037a8 <HAL_RCC_OscConfig+0x270>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	496d      	ldr	r1, [pc, #436]	@ (80037a8 <HAL_RCC_OscConfig+0x270>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035f8:	4b6b      	ldr	r3, [pc, #428]	@ (80037a8 <HAL_RCC_OscConfig+0x270>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	69db      	ldr	r3, [r3, #28]
 8003604:	021b      	lsls	r3, r3, #8
 8003606:	4968      	ldr	r1, [pc, #416]	@ (80037a8 <HAL_RCC_OscConfig+0x270>)
 8003608:	4313      	orrs	r3, r2
 800360a:	604b      	str	r3, [r1, #4]
 800360c:	e025      	b.n	800365a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800360e:	4b66      	ldr	r3, [pc, #408]	@ (80037a8 <HAL_RCC_OscConfig+0x270>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a65      	ldr	r2, [pc, #404]	@ (80037a8 <HAL_RCC_OscConfig+0x270>)
 8003614:	f043 0308 	orr.w	r3, r3, #8
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	4b63      	ldr	r3, [pc, #396]	@ (80037a8 <HAL_RCC_OscConfig+0x270>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	4960      	ldr	r1, [pc, #384]	@ (80037a8 <HAL_RCC_OscConfig+0x270>)
 8003628:	4313      	orrs	r3, r2
 800362a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800362c:	4b5e      	ldr	r3, [pc, #376]	@ (80037a8 <HAL_RCC_OscConfig+0x270>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	69db      	ldr	r3, [r3, #28]
 8003638:	021b      	lsls	r3, r3, #8
 800363a:	495b      	ldr	r1, [pc, #364]	@ (80037a8 <HAL_RCC_OscConfig+0x270>)
 800363c:	4313      	orrs	r3, r2
 800363e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d109      	bne.n	800365a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	4618      	mov	r0, r3
 800364c:	f000 fd84 	bl	8004158 <RCC_SetFlashLatencyFromMSIRange>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e380      	b.n	8003d5c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800365a:	f000 fc87 	bl	8003f6c <HAL_RCC_GetSysClockFreq>
 800365e:	4602      	mov	r2, r0
 8003660:	4b51      	ldr	r3, [pc, #324]	@ (80037a8 <HAL_RCC_OscConfig+0x270>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	091b      	lsrs	r3, r3, #4
 8003666:	f003 030f 	and.w	r3, r3, #15
 800366a:	4950      	ldr	r1, [pc, #320]	@ (80037ac <HAL_RCC_OscConfig+0x274>)
 800366c:	5ccb      	ldrb	r3, [r1, r3]
 800366e:	f003 031f 	and.w	r3, r3, #31
 8003672:	fa22 f303 	lsr.w	r3, r2, r3
 8003676:	4a4e      	ldr	r2, [pc, #312]	@ (80037b0 <HAL_RCC_OscConfig+0x278>)
 8003678:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800367a:	4b4e      	ldr	r3, [pc, #312]	@ (80037b4 <HAL_RCC_OscConfig+0x27c>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f7fd fd06 	bl	8001090 <HAL_InitTick>
 8003684:	4603      	mov	r3, r0
 8003686:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003688:	7bfb      	ldrb	r3, [r7, #15]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d052      	beq.n	8003734 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800368e:	7bfb      	ldrb	r3, [r7, #15]
 8003690:	e364      	b.n	8003d5c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d032      	beq.n	8003700 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800369a:	4b43      	ldr	r3, [pc, #268]	@ (80037a8 <HAL_RCC_OscConfig+0x270>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a42      	ldr	r2, [pc, #264]	@ (80037a8 <HAL_RCC_OscConfig+0x270>)
 80036a0:	f043 0301 	orr.w	r3, r3, #1
 80036a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036a6:	f7fd fe0b 	bl	80012c0 <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036ac:	e008      	b.n	80036c0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036ae:	f7fd fe07 	bl	80012c0 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d901      	bls.n	80036c0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e34d      	b.n	8003d5c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036c0:	4b39      	ldr	r3, [pc, #228]	@ (80037a8 <HAL_RCC_OscConfig+0x270>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d0f0      	beq.n	80036ae <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036cc:	4b36      	ldr	r3, [pc, #216]	@ (80037a8 <HAL_RCC_OscConfig+0x270>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a35      	ldr	r2, [pc, #212]	@ (80037a8 <HAL_RCC_OscConfig+0x270>)
 80036d2:	f043 0308 	orr.w	r3, r3, #8
 80036d6:	6013      	str	r3, [r2, #0]
 80036d8:	4b33      	ldr	r3, [pc, #204]	@ (80037a8 <HAL_RCC_OscConfig+0x270>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	4930      	ldr	r1, [pc, #192]	@ (80037a8 <HAL_RCC_OscConfig+0x270>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036ea:	4b2f      	ldr	r3, [pc, #188]	@ (80037a8 <HAL_RCC_OscConfig+0x270>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	021b      	lsls	r3, r3, #8
 80036f8:	492b      	ldr	r1, [pc, #172]	@ (80037a8 <HAL_RCC_OscConfig+0x270>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	604b      	str	r3, [r1, #4]
 80036fe:	e01a      	b.n	8003736 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003700:	4b29      	ldr	r3, [pc, #164]	@ (80037a8 <HAL_RCC_OscConfig+0x270>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a28      	ldr	r2, [pc, #160]	@ (80037a8 <HAL_RCC_OscConfig+0x270>)
 8003706:	f023 0301 	bic.w	r3, r3, #1
 800370a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800370c:	f7fd fdd8 	bl	80012c0 <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003714:	f7fd fdd4 	bl	80012c0 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e31a      	b.n	8003d5c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003726:	4b20      	ldr	r3, [pc, #128]	@ (80037a8 <HAL_RCC_OscConfig+0x270>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1f0      	bne.n	8003714 <HAL_RCC_OscConfig+0x1dc>
 8003732:	e000      	b.n	8003736 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003734:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b00      	cmp	r3, #0
 8003740:	d073      	beq.n	800382a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	2b08      	cmp	r3, #8
 8003746:	d005      	beq.n	8003754 <HAL_RCC_OscConfig+0x21c>
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	2b0c      	cmp	r3, #12
 800374c:	d10e      	bne.n	800376c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	2b03      	cmp	r3, #3
 8003752:	d10b      	bne.n	800376c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003754:	4b14      	ldr	r3, [pc, #80]	@ (80037a8 <HAL_RCC_OscConfig+0x270>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d063      	beq.n	8003828 <HAL_RCC_OscConfig+0x2f0>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d15f      	bne.n	8003828 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e2f7      	b.n	8003d5c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003774:	d106      	bne.n	8003784 <HAL_RCC_OscConfig+0x24c>
 8003776:	4b0c      	ldr	r3, [pc, #48]	@ (80037a8 <HAL_RCC_OscConfig+0x270>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a0b      	ldr	r2, [pc, #44]	@ (80037a8 <HAL_RCC_OscConfig+0x270>)
 800377c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003780:	6013      	str	r3, [r2, #0]
 8003782:	e025      	b.n	80037d0 <HAL_RCC_OscConfig+0x298>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800378c:	d114      	bne.n	80037b8 <HAL_RCC_OscConfig+0x280>
 800378e:	4b06      	ldr	r3, [pc, #24]	@ (80037a8 <HAL_RCC_OscConfig+0x270>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a05      	ldr	r2, [pc, #20]	@ (80037a8 <HAL_RCC_OscConfig+0x270>)
 8003794:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003798:	6013      	str	r3, [r2, #0]
 800379a:	4b03      	ldr	r3, [pc, #12]	@ (80037a8 <HAL_RCC_OscConfig+0x270>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a02      	ldr	r2, [pc, #8]	@ (80037a8 <HAL_RCC_OscConfig+0x270>)
 80037a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037a4:	6013      	str	r3, [r2, #0]
 80037a6:	e013      	b.n	80037d0 <HAL_RCC_OscConfig+0x298>
 80037a8:	40021000 	.word	0x40021000
 80037ac:	080096c4 	.word	0x080096c4
 80037b0:	20000000 	.word	0x20000000
 80037b4:	20000004 	.word	0x20000004
 80037b8:	4ba0      	ldr	r3, [pc, #640]	@ (8003a3c <HAL_RCC_OscConfig+0x504>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a9f      	ldr	r2, [pc, #636]	@ (8003a3c <HAL_RCC_OscConfig+0x504>)
 80037be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037c2:	6013      	str	r3, [r2, #0]
 80037c4:	4b9d      	ldr	r3, [pc, #628]	@ (8003a3c <HAL_RCC_OscConfig+0x504>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a9c      	ldr	r2, [pc, #624]	@ (8003a3c <HAL_RCC_OscConfig+0x504>)
 80037ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d013      	beq.n	8003800 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d8:	f7fd fd72 	bl	80012c0 <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037e0:	f7fd fd6e 	bl	80012c0 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b64      	cmp	r3, #100	@ 0x64
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e2b4      	b.n	8003d5c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037f2:	4b92      	ldr	r3, [pc, #584]	@ (8003a3c <HAL_RCC_OscConfig+0x504>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0f0      	beq.n	80037e0 <HAL_RCC_OscConfig+0x2a8>
 80037fe:	e014      	b.n	800382a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003800:	f7fd fd5e 	bl	80012c0 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003808:	f7fd fd5a 	bl	80012c0 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b64      	cmp	r3, #100	@ 0x64
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e2a0      	b.n	8003d5c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800381a:	4b88      	ldr	r3, [pc, #544]	@ (8003a3c <HAL_RCC_OscConfig+0x504>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1f0      	bne.n	8003808 <HAL_RCC_OscConfig+0x2d0>
 8003826:	e000      	b.n	800382a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d060      	beq.n	80038f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	2b04      	cmp	r3, #4
 800383a:	d005      	beq.n	8003848 <HAL_RCC_OscConfig+0x310>
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	2b0c      	cmp	r3, #12
 8003840:	d119      	bne.n	8003876 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	2b02      	cmp	r3, #2
 8003846:	d116      	bne.n	8003876 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003848:	4b7c      	ldr	r3, [pc, #496]	@ (8003a3c <HAL_RCC_OscConfig+0x504>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003850:	2b00      	cmp	r3, #0
 8003852:	d005      	beq.n	8003860 <HAL_RCC_OscConfig+0x328>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d101      	bne.n	8003860 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e27d      	b.n	8003d5c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003860:	4b76      	ldr	r3, [pc, #472]	@ (8003a3c <HAL_RCC_OscConfig+0x504>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	061b      	lsls	r3, r3, #24
 800386e:	4973      	ldr	r1, [pc, #460]	@ (8003a3c <HAL_RCC_OscConfig+0x504>)
 8003870:	4313      	orrs	r3, r2
 8003872:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003874:	e040      	b.n	80038f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d023      	beq.n	80038c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800387e:	4b6f      	ldr	r3, [pc, #444]	@ (8003a3c <HAL_RCC_OscConfig+0x504>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a6e      	ldr	r2, [pc, #440]	@ (8003a3c <HAL_RCC_OscConfig+0x504>)
 8003884:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003888:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388a:	f7fd fd19 	bl	80012c0 <HAL_GetTick>
 800388e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003890:	e008      	b.n	80038a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003892:	f7fd fd15 	bl	80012c0 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	2b02      	cmp	r3, #2
 800389e:	d901      	bls.n	80038a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e25b      	b.n	8003d5c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038a4:	4b65      	ldr	r3, [pc, #404]	@ (8003a3c <HAL_RCC_OscConfig+0x504>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0f0      	beq.n	8003892 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b0:	4b62      	ldr	r3, [pc, #392]	@ (8003a3c <HAL_RCC_OscConfig+0x504>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	061b      	lsls	r3, r3, #24
 80038be:	495f      	ldr	r1, [pc, #380]	@ (8003a3c <HAL_RCC_OscConfig+0x504>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	604b      	str	r3, [r1, #4]
 80038c4:	e018      	b.n	80038f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038c6:	4b5d      	ldr	r3, [pc, #372]	@ (8003a3c <HAL_RCC_OscConfig+0x504>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a5c      	ldr	r2, [pc, #368]	@ (8003a3c <HAL_RCC_OscConfig+0x504>)
 80038cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d2:	f7fd fcf5 	bl	80012c0 <HAL_GetTick>
 80038d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038d8:	e008      	b.n	80038ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038da:	f7fd fcf1 	bl	80012c0 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d901      	bls.n	80038ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e237      	b.n	8003d5c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038ec:	4b53      	ldr	r3, [pc, #332]	@ (8003a3c <HAL_RCC_OscConfig+0x504>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1f0      	bne.n	80038da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0308 	and.w	r3, r3, #8
 8003900:	2b00      	cmp	r3, #0
 8003902:	d03c      	beq.n	800397e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d01c      	beq.n	8003946 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800390c:	4b4b      	ldr	r3, [pc, #300]	@ (8003a3c <HAL_RCC_OscConfig+0x504>)
 800390e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003912:	4a4a      	ldr	r2, [pc, #296]	@ (8003a3c <HAL_RCC_OscConfig+0x504>)
 8003914:	f043 0301 	orr.w	r3, r3, #1
 8003918:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800391c:	f7fd fcd0 	bl	80012c0 <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003924:	f7fd fccc 	bl	80012c0 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e212      	b.n	8003d5c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003936:	4b41      	ldr	r3, [pc, #260]	@ (8003a3c <HAL_RCC_OscConfig+0x504>)
 8003938:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d0ef      	beq.n	8003924 <HAL_RCC_OscConfig+0x3ec>
 8003944:	e01b      	b.n	800397e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003946:	4b3d      	ldr	r3, [pc, #244]	@ (8003a3c <HAL_RCC_OscConfig+0x504>)
 8003948:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800394c:	4a3b      	ldr	r2, [pc, #236]	@ (8003a3c <HAL_RCC_OscConfig+0x504>)
 800394e:	f023 0301 	bic.w	r3, r3, #1
 8003952:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003956:	f7fd fcb3 	bl	80012c0 <HAL_GetTick>
 800395a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800395c:	e008      	b.n	8003970 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800395e:	f7fd fcaf 	bl	80012c0 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d901      	bls.n	8003970 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e1f5      	b.n	8003d5c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003970:	4b32      	ldr	r3, [pc, #200]	@ (8003a3c <HAL_RCC_OscConfig+0x504>)
 8003972:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1ef      	bne.n	800395e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0304 	and.w	r3, r3, #4
 8003986:	2b00      	cmp	r3, #0
 8003988:	f000 80a6 	beq.w	8003ad8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800398c:	2300      	movs	r3, #0
 800398e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003990:	4b2a      	ldr	r3, [pc, #168]	@ (8003a3c <HAL_RCC_OscConfig+0x504>)
 8003992:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003994:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10d      	bne.n	80039b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800399c:	4b27      	ldr	r3, [pc, #156]	@ (8003a3c <HAL_RCC_OscConfig+0x504>)
 800399e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039a0:	4a26      	ldr	r2, [pc, #152]	@ (8003a3c <HAL_RCC_OscConfig+0x504>)
 80039a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80039a8:	4b24      	ldr	r3, [pc, #144]	@ (8003a3c <HAL_RCC_OscConfig+0x504>)
 80039aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039b0:	60bb      	str	r3, [r7, #8]
 80039b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039b4:	2301      	movs	r3, #1
 80039b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039b8:	4b21      	ldr	r3, [pc, #132]	@ (8003a40 <HAL_RCC_OscConfig+0x508>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d118      	bne.n	80039f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039c4:	4b1e      	ldr	r3, [pc, #120]	@ (8003a40 <HAL_RCC_OscConfig+0x508>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a1d      	ldr	r2, [pc, #116]	@ (8003a40 <HAL_RCC_OscConfig+0x508>)
 80039ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039d0:	f7fd fc76 	bl	80012c0 <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039d8:	f7fd fc72 	bl	80012c0 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e1b8      	b.n	8003d5c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039ea:	4b15      	ldr	r3, [pc, #84]	@ (8003a40 <HAL_RCC_OscConfig+0x508>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d0f0      	beq.n	80039d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d108      	bne.n	8003a10 <HAL_RCC_OscConfig+0x4d8>
 80039fe:	4b0f      	ldr	r3, [pc, #60]	@ (8003a3c <HAL_RCC_OscConfig+0x504>)
 8003a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a04:	4a0d      	ldr	r2, [pc, #52]	@ (8003a3c <HAL_RCC_OscConfig+0x504>)
 8003a06:	f043 0301 	orr.w	r3, r3, #1
 8003a0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a0e:	e029      	b.n	8003a64 <HAL_RCC_OscConfig+0x52c>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	2b05      	cmp	r3, #5
 8003a16:	d115      	bne.n	8003a44 <HAL_RCC_OscConfig+0x50c>
 8003a18:	4b08      	ldr	r3, [pc, #32]	@ (8003a3c <HAL_RCC_OscConfig+0x504>)
 8003a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a1e:	4a07      	ldr	r2, [pc, #28]	@ (8003a3c <HAL_RCC_OscConfig+0x504>)
 8003a20:	f043 0304 	orr.w	r3, r3, #4
 8003a24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a28:	4b04      	ldr	r3, [pc, #16]	@ (8003a3c <HAL_RCC_OscConfig+0x504>)
 8003a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a2e:	4a03      	ldr	r2, [pc, #12]	@ (8003a3c <HAL_RCC_OscConfig+0x504>)
 8003a30:	f043 0301 	orr.w	r3, r3, #1
 8003a34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a38:	e014      	b.n	8003a64 <HAL_RCC_OscConfig+0x52c>
 8003a3a:	bf00      	nop
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	40007000 	.word	0x40007000
 8003a44:	4b9d      	ldr	r3, [pc, #628]	@ (8003cbc <HAL_RCC_OscConfig+0x784>)
 8003a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a4a:	4a9c      	ldr	r2, [pc, #624]	@ (8003cbc <HAL_RCC_OscConfig+0x784>)
 8003a4c:	f023 0301 	bic.w	r3, r3, #1
 8003a50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a54:	4b99      	ldr	r3, [pc, #612]	@ (8003cbc <HAL_RCC_OscConfig+0x784>)
 8003a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a5a:	4a98      	ldr	r2, [pc, #608]	@ (8003cbc <HAL_RCC_OscConfig+0x784>)
 8003a5c:	f023 0304 	bic.w	r3, r3, #4
 8003a60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d016      	beq.n	8003a9a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a6c:	f7fd fc28 	bl	80012c0 <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a72:	e00a      	b.n	8003a8a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a74:	f7fd fc24 	bl	80012c0 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e168      	b.n	8003d5c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a8a:	4b8c      	ldr	r3, [pc, #560]	@ (8003cbc <HAL_RCC_OscConfig+0x784>)
 8003a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d0ed      	beq.n	8003a74 <HAL_RCC_OscConfig+0x53c>
 8003a98:	e015      	b.n	8003ac6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a9a:	f7fd fc11 	bl	80012c0 <HAL_GetTick>
 8003a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003aa0:	e00a      	b.n	8003ab8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aa2:	f7fd fc0d 	bl	80012c0 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e151      	b.n	8003d5c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ab8:	4b80      	ldr	r3, [pc, #512]	@ (8003cbc <HAL_RCC_OscConfig+0x784>)
 8003aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1ed      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ac6:	7ffb      	ldrb	r3, [r7, #31]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d105      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003acc:	4b7b      	ldr	r3, [pc, #492]	@ (8003cbc <HAL_RCC_OscConfig+0x784>)
 8003ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ad0:	4a7a      	ldr	r2, [pc, #488]	@ (8003cbc <HAL_RCC_OscConfig+0x784>)
 8003ad2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ad6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0320 	and.w	r3, r3, #32
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d03c      	beq.n	8003b5e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d01c      	beq.n	8003b26 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003aec:	4b73      	ldr	r3, [pc, #460]	@ (8003cbc <HAL_RCC_OscConfig+0x784>)
 8003aee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003af2:	4a72      	ldr	r2, [pc, #456]	@ (8003cbc <HAL_RCC_OscConfig+0x784>)
 8003af4:	f043 0301 	orr.w	r3, r3, #1
 8003af8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003afc:	f7fd fbe0 	bl	80012c0 <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b04:	f7fd fbdc 	bl	80012c0 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e122      	b.n	8003d5c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b16:	4b69      	ldr	r3, [pc, #420]	@ (8003cbc <HAL_RCC_OscConfig+0x784>)
 8003b18:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d0ef      	beq.n	8003b04 <HAL_RCC_OscConfig+0x5cc>
 8003b24:	e01b      	b.n	8003b5e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b26:	4b65      	ldr	r3, [pc, #404]	@ (8003cbc <HAL_RCC_OscConfig+0x784>)
 8003b28:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b2c:	4a63      	ldr	r2, [pc, #396]	@ (8003cbc <HAL_RCC_OscConfig+0x784>)
 8003b2e:	f023 0301 	bic.w	r3, r3, #1
 8003b32:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b36:	f7fd fbc3 	bl	80012c0 <HAL_GetTick>
 8003b3a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b3c:	e008      	b.n	8003b50 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b3e:	f7fd fbbf 	bl	80012c0 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e105      	b.n	8003d5c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b50:	4b5a      	ldr	r3, [pc, #360]	@ (8003cbc <HAL_RCC_OscConfig+0x784>)
 8003b52:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1ef      	bne.n	8003b3e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f000 80f9 	beq.w	8003d5a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	f040 80cf 	bne.w	8003d10 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003b72:	4b52      	ldr	r3, [pc, #328]	@ (8003cbc <HAL_RCC_OscConfig+0x784>)
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	f003 0203 	and.w	r2, r3, #3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d12c      	bne.n	8003be0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b90:	3b01      	subs	r3, #1
 8003b92:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d123      	bne.n	8003be0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ba2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d11b      	bne.n	8003be0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d113      	bne.n	8003be0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bc2:	085b      	lsrs	r3, r3, #1
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d109      	bne.n	8003be0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd6:	085b      	lsrs	r3, r3, #1
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d071      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	2b0c      	cmp	r3, #12
 8003be4:	d068      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003be6:	4b35      	ldr	r3, [pc, #212]	@ (8003cbc <HAL_RCC_OscConfig+0x784>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d105      	bne.n	8003bfe <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003bf2:	4b32      	ldr	r3, [pc, #200]	@ (8003cbc <HAL_RCC_OscConfig+0x784>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e0ac      	b.n	8003d5c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c02:	4b2e      	ldr	r3, [pc, #184]	@ (8003cbc <HAL_RCC_OscConfig+0x784>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a2d      	ldr	r2, [pc, #180]	@ (8003cbc <HAL_RCC_OscConfig+0x784>)
 8003c08:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c0c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c0e:	f7fd fb57 	bl	80012c0 <HAL_GetTick>
 8003c12:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c14:	e008      	b.n	8003c28 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c16:	f7fd fb53 	bl	80012c0 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d901      	bls.n	8003c28 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e099      	b.n	8003d5c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c28:	4b24      	ldr	r3, [pc, #144]	@ (8003cbc <HAL_RCC_OscConfig+0x784>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1f0      	bne.n	8003c16 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c34:	4b21      	ldr	r3, [pc, #132]	@ (8003cbc <HAL_RCC_OscConfig+0x784>)
 8003c36:	68da      	ldr	r2, [r3, #12]
 8003c38:	4b21      	ldr	r3, [pc, #132]	@ (8003cc0 <HAL_RCC_OscConfig+0x788>)
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003c44:	3a01      	subs	r2, #1
 8003c46:	0112      	lsls	r2, r2, #4
 8003c48:	4311      	orrs	r1, r2
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003c4e:	0212      	lsls	r2, r2, #8
 8003c50:	4311      	orrs	r1, r2
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003c56:	0852      	lsrs	r2, r2, #1
 8003c58:	3a01      	subs	r2, #1
 8003c5a:	0552      	lsls	r2, r2, #21
 8003c5c:	4311      	orrs	r1, r2
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003c62:	0852      	lsrs	r2, r2, #1
 8003c64:	3a01      	subs	r2, #1
 8003c66:	0652      	lsls	r2, r2, #25
 8003c68:	4311      	orrs	r1, r2
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003c6e:	06d2      	lsls	r2, r2, #27
 8003c70:	430a      	orrs	r2, r1
 8003c72:	4912      	ldr	r1, [pc, #72]	@ (8003cbc <HAL_RCC_OscConfig+0x784>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003c78:	4b10      	ldr	r3, [pc, #64]	@ (8003cbc <HAL_RCC_OscConfig+0x784>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a0f      	ldr	r2, [pc, #60]	@ (8003cbc <HAL_RCC_OscConfig+0x784>)
 8003c7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c82:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c84:	4b0d      	ldr	r3, [pc, #52]	@ (8003cbc <HAL_RCC_OscConfig+0x784>)
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	4a0c      	ldr	r2, [pc, #48]	@ (8003cbc <HAL_RCC_OscConfig+0x784>)
 8003c8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c8e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c90:	f7fd fb16 	bl	80012c0 <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c98:	f7fd fb12 	bl	80012c0 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e058      	b.n	8003d5c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003caa:	4b04      	ldr	r3, [pc, #16]	@ (8003cbc <HAL_RCC_OscConfig+0x784>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d0f0      	beq.n	8003c98 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cb6:	e050      	b.n	8003d5a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e04f      	b.n	8003d5c <HAL_RCC_OscConfig+0x824>
 8003cbc:	40021000 	.word	0x40021000
 8003cc0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cc4:	4b27      	ldr	r3, [pc, #156]	@ (8003d64 <HAL_RCC_OscConfig+0x82c>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d144      	bne.n	8003d5a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003cd0:	4b24      	ldr	r3, [pc, #144]	@ (8003d64 <HAL_RCC_OscConfig+0x82c>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a23      	ldr	r2, [pc, #140]	@ (8003d64 <HAL_RCC_OscConfig+0x82c>)
 8003cd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cda:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cdc:	4b21      	ldr	r3, [pc, #132]	@ (8003d64 <HAL_RCC_OscConfig+0x82c>)
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	4a20      	ldr	r2, [pc, #128]	@ (8003d64 <HAL_RCC_OscConfig+0x82c>)
 8003ce2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ce6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003ce8:	f7fd faea 	bl	80012c0 <HAL_GetTick>
 8003cec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cf0:	f7fd fae6 	bl	80012c0 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e02c      	b.n	8003d5c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d02:	4b18      	ldr	r3, [pc, #96]	@ (8003d64 <HAL_RCC_OscConfig+0x82c>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d0f0      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x7b8>
 8003d0e:	e024      	b.n	8003d5a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	2b0c      	cmp	r3, #12
 8003d14:	d01f      	beq.n	8003d56 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d16:	4b13      	ldr	r3, [pc, #76]	@ (8003d64 <HAL_RCC_OscConfig+0x82c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a12      	ldr	r2, [pc, #72]	@ (8003d64 <HAL_RCC_OscConfig+0x82c>)
 8003d1c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d22:	f7fd facd 	bl	80012c0 <HAL_GetTick>
 8003d26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d28:	e008      	b.n	8003d3c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d2a:	f7fd fac9 	bl	80012c0 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d901      	bls.n	8003d3c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e00f      	b.n	8003d5c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d3c:	4b09      	ldr	r3, [pc, #36]	@ (8003d64 <HAL_RCC_OscConfig+0x82c>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1f0      	bne.n	8003d2a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003d48:	4b06      	ldr	r3, [pc, #24]	@ (8003d64 <HAL_RCC_OscConfig+0x82c>)
 8003d4a:	68da      	ldr	r2, [r3, #12]
 8003d4c:	4905      	ldr	r1, [pc, #20]	@ (8003d64 <HAL_RCC_OscConfig+0x82c>)
 8003d4e:	4b06      	ldr	r3, [pc, #24]	@ (8003d68 <HAL_RCC_OscConfig+0x830>)
 8003d50:	4013      	ands	r3, r2
 8003d52:	60cb      	str	r3, [r1, #12]
 8003d54:	e001      	b.n	8003d5a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e000      	b.n	8003d5c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3720      	adds	r7, #32
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	40021000 	.word	0x40021000
 8003d68:	feeefffc 	.word	0xfeeefffc

08003d6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d101      	bne.n	8003d80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e0e7      	b.n	8003f50 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d80:	4b75      	ldr	r3, [pc, #468]	@ (8003f58 <HAL_RCC_ClockConfig+0x1ec>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0307 	and.w	r3, r3, #7
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d910      	bls.n	8003db0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d8e:	4b72      	ldr	r3, [pc, #456]	@ (8003f58 <HAL_RCC_ClockConfig+0x1ec>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f023 0207 	bic.w	r2, r3, #7
 8003d96:	4970      	ldr	r1, [pc, #448]	@ (8003f58 <HAL_RCC_ClockConfig+0x1ec>)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d9e:	4b6e      	ldr	r3, [pc, #440]	@ (8003f58 <HAL_RCC_ClockConfig+0x1ec>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0307 	and.w	r3, r3, #7
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d001      	beq.n	8003db0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e0cf      	b.n	8003f50 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d010      	beq.n	8003dde <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	4b66      	ldr	r3, [pc, #408]	@ (8003f5c <HAL_RCC_ClockConfig+0x1f0>)
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d908      	bls.n	8003dde <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dcc:	4b63      	ldr	r3, [pc, #396]	@ (8003f5c <HAL_RCC_ClockConfig+0x1f0>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	4960      	ldr	r1, [pc, #384]	@ (8003f5c <HAL_RCC_ClockConfig+0x1f0>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d04c      	beq.n	8003e84 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	2b03      	cmp	r3, #3
 8003df0:	d107      	bne.n	8003e02 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003df2:	4b5a      	ldr	r3, [pc, #360]	@ (8003f5c <HAL_RCC_ClockConfig+0x1f0>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d121      	bne.n	8003e42 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e0a6      	b.n	8003f50 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d107      	bne.n	8003e1a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e0a:	4b54      	ldr	r3, [pc, #336]	@ (8003f5c <HAL_RCC_ClockConfig+0x1f0>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d115      	bne.n	8003e42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e09a      	b.n	8003f50 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d107      	bne.n	8003e32 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e22:	4b4e      	ldr	r3, [pc, #312]	@ (8003f5c <HAL_RCC_ClockConfig+0x1f0>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d109      	bne.n	8003e42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e08e      	b.n	8003f50 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e32:	4b4a      	ldr	r3, [pc, #296]	@ (8003f5c <HAL_RCC_ClockConfig+0x1f0>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e086      	b.n	8003f50 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e42:	4b46      	ldr	r3, [pc, #280]	@ (8003f5c <HAL_RCC_ClockConfig+0x1f0>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f023 0203 	bic.w	r2, r3, #3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	4943      	ldr	r1, [pc, #268]	@ (8003f5c <HAL_RCC_ClockConfig+0x1f0>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e54:	f7fd fa34 	bl	80012c0 <HAL_GetTick>
 8003e58:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e5a:	e00a      	b.n	8003e72 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e5c:	f7fd fa30 	bl	80012c0 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e06e      	b.n	8003f50 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e72:	4b3a      	ldr	r3, [pc, #232]	@ (8003f5c <HAL_RCC_ClockConfig+0x1f0>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f003 020c 	and.w	r2, r3, #12
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d1eb      	bne.n	8003e5c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d010      	beq.n	8003eb2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	4b31      	ldr	r3, [pc, #196]	@ (8003f5c <HAL_RCC_ClockConfig+0x1f0>)
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d208      	bcs.n	8003eb2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ea0:	4b2e      	ldr	r3, [pc, #184]	@ (8003f5c <HAL_RCC_ClockConfig+0x1f0>)
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	492b      	ldr	r1, [pc, #172]	@ (8003f5c <HAL_RCC_ClockConfig+0x1f0>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003eb2:	4b29      	ldr	r3, [pc, #164]	@ (8003f58 <HAL_RCC_ClockConfig+0x1ec>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0307 	and.w	r3, r3, #7
 8003eba:	683a      	ldr	r2, [r7, #0]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d210      	bcs.n	8003ee2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ec0:	4b25      	ldr	r3, [pc, #148]	@ (8003f58 <HAL_RCC_ClockConfig+0x1ec>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f023 0207 	bic.w	r2, r3, #7
 8003ec8:	4923      	ldr	r1, [pc, #140]	@ (8003f58 <HAL_RCC_ClockConfig+0x1ec>)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ed0:	4b21      	ldr	r3, [pc, #132]	@ (8003f58 <HAL_RCC_ClockConfig+0x1ec>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0307 	and.w	r3, r3, #7
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d001      	beq.n	8003ee2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e036      	b.n	8003f50 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0304 	and.w	r3, r3, #4
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d008      	beq.n	8003f00 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003eee:	4b1b      	ldr	r3, [pc, #108]	@ (8003f5c <HAL_RCC_ClockConfig+0x1f0>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	4918      	ldr	r1, [pc, #96]	@ (8003f5c <HAL_RCC_ClockConfig+0x1f0>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0308 	and.w	r3, r3, #8
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d009      	beq.n	8003f20 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f0c:	4b13      	ldr	r3, [pc, #76]	@ (8003f5c <HAL_RCC_ClockConfig+0x1f0>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	00db      	lsls	r3, r3, #3
 8003f1a:	4910      	ldr	r1, [pc, #64]	@ (8003f5c <HAL_RCC_ClockConfig+0x1f0>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f20:	f000 f824 	bl	8003f6c <HAL_RCC_GetSysClockFreq>
 8003f24:	4602      	mov	r2, r0
 8003f26:	4b0d      	ldr	r3, [pc, #52]	@ (8003f5c <HAL_RCC_ClockConfig+0x1f0>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	091b      	lsrs	r3, r3, #4
 8003f2c:	f003 030f 	and.w	r3, r3, #15
 8003f30:	490b      	ldr	r1, [pc, #44]	@ (8003f60 <HAL_RCC_ClockConfig+0x1f4>)
 8003f32:	5ccb      	ldrb	r3, [r1, r3]
 8003f34:	f003 031f 	and.w	r3, r3, #31
 8003f38:	fa22 f303 	lsr.w	r3, r2, r3
 8003f3c:	4a09      	ldr	r2, [pc, #36]	@ (8003f64 <HAL_RCC_ClockConfig+0x1f8>)
 8003f3e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f40:	4b09      	ldr	r3, [pc, #36]	@ (8003f68 <HAL_RCC_ClockConfig+0x1fc>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7fd f8a3 	bl	8001090 <HAL_InitTick>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	72fb      	strb	r3, [r7, #11]

  return status;
 8003f4e:	7afb      	ldrb	r3, [r7, #11]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	40022000 	.word	0x40022000
 8003f5c:	40021000 	.word	0x40021000
 8003f60:	080096c4 	.word	0x080096c4
 8003f64:	20000000 	.word	0x20000000
 8003f68:	20000004 	.word	0x20000004

08003f6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b089      	sub	sp, #36	@ 0x24
 8003f70:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003f72:	2300      	movs	r3, #0
 8003f74:	61fb      	str	r3, [r7, #28]
 8003f76:	2300      	movs	r3, #0
 8003f78:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f7a:	4b3e      	ldr	r3, [pc, #248]	@ (8004074 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 030c 	and.w	r3, r3, #12
 8003f82:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f84:	4b3b      	ldr	r3, [pc, #236]	@ (8004074 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	f003 0303 	and.w	r3, r3, #3
 8003f8c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d005      	beq.n	8003fa0 <HAL_RCC_GetSysClockFreq+0x34>
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	2b0c      	cmp	r3, #12
 8003f98:	d121      	bne.n	8003fde <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d11e      	bne.n	8003fde <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003fa0:	4b34      	ldr	r3, [pc, #208]	@ (8004074 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0308 	and.w	r3, r3, #8
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d107      	bne.n	8003fbc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003fac:	4b31      	ldr	r3, [pc, #196]	@ (8004074 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fb2:	0a1b      	lsrs	r3, r3, #8
 8003fb4:	f003 030f 	and.w	r3, r3, #15
 8003fb8:	61fb      	str	r3, [r7, #28]
 8003fba:	e005      	b.n	8003fc8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003fbc:	4b2d      	ldr	r3, [pc, #180]	@ (8004074 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	091b      	lsrs	r3, r3, #4
 8003fc2:	f003 030f 	and.w	r3, r3, #15
 8003fc6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003fc8:	4a2b      	ldr	r2, [pc, #172]	@ (8004078 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fd0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10d      	bne.n	8003ff4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fdc:	e00a      	b.n	8003ff4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	2b04      	cmp	r3, #4
 8003fe2:	d102      	bne.n	8003fea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003fe4:	4b25      	ldr	r3, [pc, #148]	@ (800407c <HAL_RCC_GetSysClockFreq+0x110>)
 8003fe6:	61bb      	str	r3, [r7, #24]
 8003fe8:	e004      	b.n	8003ff4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	d101      	bne.n	8003ff4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ff0:	4b23      	ldr	r3, [pc, #140]	@ (8004080 <HAL_RCC_GetSysClockFreq+0x114>)
 8003ff2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	2b0c      	cmp	r3, #12
 8003ff8:	d134      	bne.n	8004064 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ffa:	4b1e      	ldr	r3, [pc, #120]	@ (8004074 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	f003 0303 	and.w	r3, r3, #3
 8004002:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	2b02      	cmp	r3, #2
 8004008:	d003      	beq.n	8004012 <HAL_RCC_GetSysClockFreq+0xa6>
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	2b03      	cmp	r3, #3
 800400e:	d003      	beq.n	8004018 <HAL_RCC_GetSysClockFreq+0xac>
 8004010:	e005      	b.n	800401e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004012:	4b1a      	ldr	r3, [pc, #104]	@ (800407c <HAL_RCC_GetSysClockFreq+0x110>)
 8004014:	617b      	str	r3, [r7, #20]
      break;
 8004016:	e005      	b.n	8004024 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004018:	4b19      	ldr	r3, [pc, #100]	@ (8004080 <HAL_RCC_GetSysClockFreq+0x114>)
 800401a:	617b      	str	r3, [r7, #20]
      break;
 800401c:	e002      	b.n	8004024 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	617b      	str	r3, [r7, #20]
      break;
 8004022:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004024:	4b13      	ldr	r3, [pc, #76]	@ (8004074 <HAL_RCC_GetSysClockFreq+0x108>)
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	091b      	lsrs	r3, r3, #4
 800402a:	f003 0307 	and.w	r3, r3, #7
 800402e:	3301      	adds	r3, #1
 8004030:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004032:	4b10      	ldr	r3, [pc, #64]	@ (8004074 <HAL_RCC_GetSysClockFreq+0x108>)
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	0a1b      	lsrs	r3, r3, #8
 8004038:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	fb03 f202 	mul.w	r2, r3, r2
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	fbb2 f3f3 	udiv	r3, r2, r3
 8004048:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800404a:	4b0a      	ldr	r3, [pc, #40]	@ (8004074 <HAL_RCC_GetSysClockFreq+0x108>)
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	0e5b      	lsrs	r3, r3, #25
 8004050:	f003 0303 	and.w	r3, r3, #3
 8004054:	3301      	adds	r3, #1
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004062:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004064:	69bb      	ldr	r3, [r7, #24]
}
 8004066:	4618      	mov	r0, r3
 8004068:	3724      	adds	r7, #36	@ 0x24
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	40021000 	.word	0x40021000
 8004078:	080096dc 	.word	0x080096dc
 800407c:	00f42400 	.word	0x00f42400
 8004080:	007a1200 	.word	0x007a1200

08004084 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004084:	b480      	push	{r7}
 8004086:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004088:	4b03      	ldr	r3, [pc, #12]	@ (8004098 <HAL_RCC_GetHCLKFreq+0x14>)
 800408a:	681b      	ldr	r3, [r3, #0]
}
 800408c:	4618      	mov	r0, r3
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	20000000 	.word	0x20000000

0800409c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80040a0:	f7ff fff0 	bl	8004084 <HAL_RCC_GetHCLKFreq>
 80040a4:	4602      	mov	r2, r0
 80040a6:	4b06      	ldr	r3, [pc, #24]	@ (80040c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	0a1b      	lsrs	r3, r3, #8
 80040ac:	f003 0307 	and.w	r3, r3, #7
 80040b0:	4904      	ldr	r1, [pc, #16]	@ (80040c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80040b2:	5ccb      	ldrb	r3, [r1, r3]
 80040b4:	f003 031f 	and.w	r3, r3, #31
 80040b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040bc:	4618      	mov	r0, r3
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	40021000 	.word	0x40021000
 80040c4:	080096d4 	.word	0x080096d4

080040c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80040cc:	f7ff ffda 	bl	8004084 <HAL_RCC_GetHCLKFreq>
 80040d0:	4602      	mov	r2, r0
 80040d2:	4b06      	ldr	r3, [pc, #24]	@ (80040ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	0adb      	lsrs	r3, r3, #11
 80040d8:	f003 0307 	and.w	r3, r3, #7
 80040dc:	4904      	ldr	r1, [pc, #16]	@ (80040f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80040de:	5ccb      	ldrb	r3, [r1, r3]
 80040e0:	f003 031f 	and.w	r3, r3, #31
 80040e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	40021000 	.word	0x40021000
 80040f0:	080096d4 	.word	0x080096d4

080040f4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	220f      	movs	r2, #15
 8004102:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004104:	4b12      	ldr	r3, [pc, #72]	@ (8004150 <HAL_RCC_GetClockConfig+0x5c>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f003 0203 	and.w	r2, r3, #3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004110:	4b0f      	ldr	r3, [pc, #60]	@ (8004150 <HAL_RCC_GetClockConfig+0x5c>)
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800411c:	4b0c      	ldr	r3, [pc, #48]	@ (8004150 <HAL_RCC_GetClockConfig+0x5c>)
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004128:	4b09      	ldr	r3, [pc, #36]	@ (8004150 <HAL_RCC_GetClockConfig+0x5c>)
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	08db      	lsrs	r3, r3, #3
 800412e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004136:	4b07      	ldr	r3, [pc, #28]	@ (8004154 <HAL_RCC_GetClockConfig+0x60>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0207 	and.w	r2, r3, #7
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	601a      	str	r2, [r3, #0]
}
 8004142:	bf00      	nop
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	40021000 	.word	0x40021000
 8004154:	40022000 	.word	0x40022000

08004158 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004160:	2300      	movs	r3, #0
 8004162:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004164:	4b2a      	ldr	r3, [pc, #168]	@ (8004210 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004168:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d003      	beq.n	8004178 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004170:	f7ff f97e 	bl	8003470 <HAL_PWREx_GetVoltageRange>
 8004174:	6178      	str	r0, [r7, #20]
 8004176:	e014      	b.n	80041a2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004178:	4b25      	ldr	r3, [pc, #148]	@ (8004210 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800417a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800417c:	4a24      	ldr	r2, [pc, #144]	@ (8004210 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800417e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004182:	6593      	str	r3, [r2, #88]	@ 0x58
 8004184:	4b22      	ldr	r3, [pc, #136]	@ (8004210 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004188:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800418c:	60fb      	str	r3, [r7, #12]
 800418e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004190:	f7ff f96e 	bl	8003470 <HAL_PWREx_GetVoltageRange>
 8004194:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004196:	4b1e      	ldr	r3, [pc, #120]	@ (8004210 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800419a:	4a1d      	ldr	r2, [pc, #116]	@ (8004210 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800419c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041a0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041a8:	d10b      	bne.n	80041c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2b80      	cmp	r3, #128	@ 0x80
 80041ae:	d919      	bls.n	80041e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2ba0      	cmp	r3, #160	@ 0xa0
 80041b4:	d902      	bls.n	80041bc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041b6:	2302      	movs	r3, #2
 80041b8:	613b      	str	r3, [r7, #16]
 80041ba:	e013      	b.n	80041e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041bc:	2301      	movs	r3, #1
 80041be:	613b      	str	r3, [r7, #16]
 80041c0:	e010      	b.n	80041e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2b80      	cmp	r3, #128	@ 0x80
 80041c6:	d902      	bls.n	80041ce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80041c8:	2303      	movs	r3, #3
 80041ca:	613b      	str	r3, [r7, #16]
 80041cc:	e00a      	b.n	80041e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b80      	cmp	r3, #128	@ 0x80
 80041d2:	d102      	bne.n	80041da <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041d4:	2302      	movs	r3, #2
 80041d6:	613b      	str	r3, [r7, #16]
 80041d8:	e004      	b.n	80041e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2b70      	cmp	r3, #112	@ 0x70
 80041de:	d101      	bne.n	80041e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041e0:	2301      	movs	r3, #1
 80041e2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80041e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004214 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f023 0207 	bic.w	r2, r3, #7
 80041ec:	4909      	ldr	r1, [pc, #36]	@ (8004214 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80041f4:	4b07      	ldr	r3, [pc, #28]	@ (8004214 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0307 	and.w	r3, r3, #7
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d001      	beq.n	8004206 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e000      	b.n	8004208 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3718      	adds	r7, #24
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	40021000 	.word	0x40021000
 8004214:	40022000 	.word	0x40022000

08004218 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004220:	2300      	movs	r3, #0
 8004222:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004224:	2300      	movs	r3, #0
 8004226:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004230:	2b00      	cmp	r3, #0
 8004232:	d041      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004238:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800423c:	d02a      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800423e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004242:	d824      	bhi.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004244:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004248:	d008      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800424a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800424e:	d81e      	bhi.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00a      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004254:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004258:	d010      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800425a:	e018      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800425c:	4b86      	ldr	r3, [pc, #536]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	4a85      	ldr	r2, [pc, #532]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004262:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004266:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004268:	e015      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	3304      	adds	r3, #4
 800426e:	2100      	movs	r1, #0
 8004270:	4618      	mov	r0, r3
 8004272:	f000 facd 	bl	8004810 <RCCEx_PLLSAI1_Config>
 8004276:	4603      	mov	r3, r0
 8004278:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800427a:	e00c      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	3320      	adds	r3, #32
 8004280:	2100      	movs	r1, #0
 8004282:	4618      	mov	r0, r3
 8004284:	f000 fbb6 	bl	80049f4 <RCCEx_PLLSAI2_Config>
 8004288:	4603      	mov	r3, r0
 800428a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800428c:	e003      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	74fb      	strb	r3, [r7, #19]
      break;
 8004292:	e000      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004294:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004296:	7cfb      	ldrb	r3, [r7, #19]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d10b      	bne.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800429c:	4b76      	ldr	r3, [pc, #472]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800429e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042a2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042aa:	4973      	ldr	r1, [pc, #460]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80042b2:	e001      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042b4:	7cfb      	ldrb	r3, [r7, #19]
 80042b6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d041      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042c8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80042cc:	d02a      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80042ce:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80042d2:	d824      	bhi.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80042d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80042d8:	d008      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80042da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80042de:	d81e      	bhi.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00a      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80042e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042e8:	d010      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80042ea:	e018      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80042ec:	4b62      	ldr	r3, [pc, #392]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	4a61      	ldr	r2, [pc, #388]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042f6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80042f8:	e015      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	3304      	adds	r3, #4
 80042fe:	2100      	movs	r1, #0
 8004300:	4618      	mov	r0, r3
 8004302:	f000 fa85 	bl	8004810 <RCCEx_PLLSAI1_Config>
 8004306:	4603      	mov	r3, r0
 8004308:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800430a:	e00c      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	3320      	adds	r3, #32
 8004310:	2100      	movs	r1, #0
 8004312:	4618      	mov	r0, r3
 8004314:	f000 fb6e 	bl	80049f4 <RCCEx_PLLSAI2_Config>
 8004318:	4603      	mov	r3, r0
 800431a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800431c:	e003      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	74fb      	strb	r3, [r7, #19]
      break;
 8004322:	e000      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004324:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004326:	7cfb      	ldrb	r3, [r7, #19]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d10b      	bne.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800432c:	4b52      	ldr	r3, [pc, #328]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800432e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004332:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800433a:	494f      	ldr	r1, [pc, #316]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800433c:	4313      	orrs	r3, r2
 800433e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004342:	e001      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004344:	7cfb      	ldrb	r3, [r7, #19]
 8004346:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004350:	2b00      	cmp	r3, #0
 8004352:	f000 80a0 	beq.w	8004496 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004356:	2300      	movs	r3, #0
 8004358:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800435a:	4b47      	ldr	r3, [pc, #284]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800435c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800435e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004366:	2301      	movs	r3, #1
 8004368:	e000      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800436a:	2300      	movs	r3, #0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00d      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004370:	4b41      	ldr	r3, [pc, #260]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004374:	4a40      	ldr	r2, [pc, #256]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004376:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800437a:	6593      	str	r3, [r2, #88]	@ 0x58
 800437c:	4b3e      	ldr	r3, [pc, #248]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800437e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004380:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004384:	60bb      	str	r3, [r7, #8]
 8004386:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004388:	2301      	movs	r3, #1
 800438a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800438c:	4b3b      	ldr	r3, [pc, #236]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a3a      	ldr	r2, [pc, #232]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004392:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004396:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004398:	f7fc ff92 	bl	80012c0 <HAL_GetTick>
 800439c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800439e:	e009      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043a0:	f7fc ff8e 	bl	80012c0 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d902      	bls.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	74fb      	strb	r3, [r7, #19]
        break;
 80043b2:	e005      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043b4:	4b31      	ldr	r3, [pc, #196]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d0ef      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80043c0:	7cfb      	ldrb	r3, [r7, #19]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d15c      	bne.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043c6:	4b2c      	ldr	r3, [pc, #176]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043d0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d01f      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d019      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80043e4:	4b24      	ldr	r3, [pc, #144]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043f0:	4b21      	ldr	r3, [pc, #132]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043f6:	4a20      	ldr	r2, [pc, #128]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004400:	4b1d      	ldr	r3, [pc, #116]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004402:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004406:	4a1c      	ldr	r2, [pc, #112]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004408:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800440c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004410:	4a19      	ldr	r2, [pc, #100]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b00      	cmp	r3, #0
 8004420:	d016      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004422:	f7fc ff4d 	bl	80012c0 <HAL_GetTick>
 8004426:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004428:	e00b      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800442a:	f7fc ff49 	bl	80012c0 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004438:	4293      	cmp	r3, r2
 800443a:	d902      	bls.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	74fb      	strb	r3, [r7, #19]
            break;
 8004440:	e006      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004442:	4b0d      	ldr	r3, [pc, #52]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004444:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004448:	f003 0302 	and.w	r3, r3, #2
 800444c:	2b00      	cmp	r3, #0
 800444e:	d0ec      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004450:	7cfb      	ldrb	r3, [r7, #19]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10c      	bne.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004456:	4b08      	ldr	r3, [pc, #32]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004458:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800445c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004466:	4904      	ldr	r1, [pc, #16]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004468:	4313      	orrs	r3, r2
 800446a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800446e:	e009      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004470:	7cfb      	ldrb	r3, [r7, #19]
 8004472:	74bb      	strb	r3, [r7, #18]
 8004474:	e006      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004476:	bf00      	nop
 8004478:	40021000 	.word	0x40021000
 800447c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004480:	7cfb      	ldrb	r3, [r7, #19]
 8004482:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004484:	7c7b      	ldrb	r3, [r7, #17]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d105      	bne.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800448a:	4ba6      	ldr	r3, [pc, #664]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800448c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800448e:	4aa5      	ldr	r2, [pc, #660]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004490:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004494:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00a      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044a2:	4ba0      	ldr	r3, [pc, #640]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044a8:	f023 0203 	bic.w	r2, r3, #3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044b0:	499c      	ldr	r1, [pc, #624]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00a      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044c4:	4b97      	ldr	r3, [pc, #604]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ca:	f023 020c 	bic.w	r2, r3, #12
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044d2:	4994      	ldr	r1, [pc, #592]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0304 	and.w	r3, r3, #4
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00a      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044e6:	4b8f      	ldr	r3, [pc, #572]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ec:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f4:	498b      	ldr	r1, [pc, #556]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0308 	and.w	r3, r3, #8
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00a      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004508:	4b86      	ldr	r3, [pc, #536]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800450a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800450e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004516:	4983      	ldr	r1, [pc, #524]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004518:	4313      	orrs	r3, r2
 800451a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0310 	and.w	r3, r3, #16
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00a      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800452a:	4b7e      	ldr	r3, [pc, #504]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800452c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004530:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004538:	497a      	ldr	r1, [pc, #488]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800453a:	4313      	orrs	r3, r2
 800453c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0320 	and.w	r3, r3, #32
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00a      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800454c:	4b75      	ldr	r3, [pc, #468]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800454e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004552:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800455a:	4972      	ldr	r1, [pc, #456]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800455c:	4313      	orrs	r3, r2
 800455e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00a      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800456e:	4b6d      	ldr	r3, [pc, #436]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004570:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004574:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800457c:	4969      	ldr	r1, [pc, #420]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800457e:	4313      	orrs	r3, r2
 8004580:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00a      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004590:	4b64      	ldr	r3, [pc, #400]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004596:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800459e:	4961      	ldr	r1, [pc, #388]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00a      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045b2:	4b5c      	ldr	r3, [pc, #368]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045b8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045c0:	4958      	ldr	r1, [pc, #352]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00a      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045d4:	4b53      	ldr	r3, [pc, #332]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045da:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045e2:	4950      	ldr	r1, [pc, #320]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00a      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045f6:	4b4b      	ldr	r3, [pc, #300]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045fc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004604:	4947      	ldr	r1, [pc, #284]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004606:	4313      	orrs	r3, r2
 8004608:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00a      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004618:	4b42      	ldr	r3, [pc, #264]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800461a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800461e:	f023 0203 	bic.w	r2, r3, #3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004626:	493f      	ldr	r1, [pc, #252]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004628:	4313      	orrs	r3, r2
 800462a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d028      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800463a:	4b3a      	ldr	r3, [pc, #232]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800463c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004640:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004648:	4936      	ldr	r1, [pc, #216]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800464a:	4313      	orrs	r3, r2
 800464c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004654:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004658:	d106      	bne.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800465a:	4b32      	ldr	r3, [pc, #200]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	4a31      	ldr	r2, [pc, #196]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004660:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004664:	60d3      	str	r3, [r2, #12]
 8004666:	e011      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800466c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004670:	d10c      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	3304      	adds	r3, #4
 8004676:	2101      	movs	r1, #1
 8004678:	4618      	mov	r0, r3
 800467a:	f000 f8c9 	bl	8004810 <RCCEx_PLLSAI1_Config>
 800467e:	4603      	mov	r3, r0
 8004680:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004682:	7cfb      	ldrb	r3, [r7, #19]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d001      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8004688:	7cfb      	ldrb	r3, [r7, #19]
 800468a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d028      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004698:	4b22      	ldr	r3, [pc, #136]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800469a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800469e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046a6:	491f      	ldr	r1, [pc, #124]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046b6:	d106      	bne.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046b8:	4b1a      	ldr	r3, [pc, #104]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	4a19      	ldr	r2, [pc, #100]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046c2:	60d3      	str	r3, [r2, #12]
 80046c4:	e011      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046ce:	d10c      	bne.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	3304      	adds	r3, #4
 80046d4:	2101      	movs	r1, #1
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 f89a 	bl	8004810 <RCCEx_PLLSAI1_Config>
 80046dc:	4603      	mov	r3, r0
 80046de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046e0:	7cfb      	ldrb	r3, [r7, #19]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80046e6:	7cfb      	ldrb	r3, [r7, #19]
 80046e8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d02a      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046fc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004704:	4907      	ldr	r1, [pc, #28]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004706:	4313      	orrs	r3, r2
 8004708:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004710:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004714:	d108      	bne.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004716:	4b03      	ldr	r3, [pc, #12]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	4a02      	ldr	r2, [pc, #8]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800471c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004720:	60d3      	str	r3, [r2, #12]
 8004722:	e013      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x534>
 8004724:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800472c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004730:	d10c      	bne.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	3304      	adds	r3, #4
 8004736:	2101      	movs	r1, #1
 8004738:	4618      	mov	r0, r3
 800473a:	f000 f869 	bl	8004810 <RCCEx_PLLSAI1_Config>
 800473e:	4603      	mov	r3, r0
 8004740:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004742:	7cfb      	ldrb	r3, [r7, #19]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d001      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8004748:	7cfb      	ldrb	r3, [r7, #19]
 800474a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d02f      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004758:	4b2c      	ldr	r3, [pc, #176]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800475a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800475e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004766:	4929      	ldr	r1, [pc, #164]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004768:	4313      	orrs	r3, r2
 800476a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004772:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004776:	d10d      	bne.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	3304      	adds	r3, #4
 800477c:	2102      	movs	r1, #2
 800477e:	4618      	mov	r0, r3
 8004780:	f000 f846 	bl	8004810 <RCCEx_PLLSAI1_Config>
 8004784:	4603      	mov	r3, r0
 8004786:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004788:	7cfb      	ldrb	r3, [r7, #19]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d014      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800478e:	7cfb      	ldrb	r3, [r7, #19]
 8004790:	74bb      	strb	r3, [r7, #18]
 8004792:	e011      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004798:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800479c:	d10c      	bne.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	3320      	adds	r3, #32
 80047a2:	2102      	movs	r1, #2
 80047a4:	4618      	mov	r0, r3
 80047a6:	f000 f925 	bl	80049f4 <RCCEx_PLLSAI2_Config>
 80047aa:	4603      	mov	r3, r0
 80047ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047ae:	7cfb      	ldrb	r3, [r7, #19]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d001      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80047b4:	7cfb      	ldrb	r3, [r7, #19]
 80047b6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00b      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80047c4:	4b11      	ldr	r3, [pc, #68]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80047c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ca:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047d4:	490d      	ldr	r1, [pc, #52]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00b      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047e8:	4b08      	ldr	r3, [pc, #32]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80047ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ee:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047f8:	4904      	ldr	r1, [pc, #16]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004800:	7cbb      	ldrb	r3, [r7, #18]
}
 8004802:	4618      	mov	r0, r3
 8004804:	3718      	adds	r7, #24
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	40021000 	.word	0x40021000

08004810 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800481a:	2300      	movs	r3, #0
 800481c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800481e:	4b74      	ldr	r3, [pc, #464]	@ (80049f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	f003 0303 	and.w	r3, r3, #3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d018      	beq.n	800485c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800482a:	4b71      	ldr	r3, [pc, #452]	@ (80049f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	f003 0203 	and.w	r2, r3, #3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	429a      	cmp	r2, r3
 8004838:	d10d      	bne.n	8004856 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
       ||
 800483e:	2b00      	cmp	r3, #0
 8004840:	d009      	beq.n	8004856 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004842:	4b6b      	ldr	r3, [pc, #428]	@ (80049f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	091b      	lsrs	r3, r3, #4
 8004848:	f003 0307 	and.w	r3, r3, #7
 800484c:	1c5a      	adds	r2, r3, #1
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
       ||
 8004852:	429a      	cmp	r2, r3
 8004854:	d047      	beq.n	80048e6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	73fb      	strb	r3, [r7, #15]
 800485a:	e044      	b.n	80048e6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2b03      	cmp	r3, #3
 8004862:	d018      	beq.n	8004896 <RCCEx_PLLSAI1_Config+0x86>
 8004864:	2b03      	cmp	r3, #3
 8004866:	d825      	bhi.n	80048b4 <RCCEx_PLLSAI1_Config+0xa4>
 8004868:	2b01      	cmp	r3, #1
 800486a:	d002      	beq.n	8004872 <RCCEx_PLLSAI1_Config+0x62>
 800486c:	2b02      	cmp	r3, #2
 800486e:	d009      	beq.n	8004884 <RCCEx_PLLSAI1_Config+0x74>
 8004870:	e020      	b.n	80048b4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004872:	4b5f      	ldr	r3, [pc, #380]	@ (80049f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d11d      	bne.n	80048ba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004882:	e01a      	b.n	80048ba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004884:	4b5a      	ldr	r3, [pc, #360]	@ (80049f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800488c:	2b00      	cmp	r3, #0
 800488e:	d116      	bne.n	80048be <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004894:	e013      	b.n	80048be <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004896:	4b56      	ldr	r3, [pc, #344]	@ (80049f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10f      	bne.n	80048c2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80048a2:	4b53      	ldr	r3, [pc, #332]	@ (80049f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d109      	bne.n	80048c2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80048b2:	e006      	b.n	80048c2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	73fb      	strb	r3, [r7, #15]
      break;
 80048b8:	e004      	b.n	80048c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048ba:	bf00      	nop
 80048bc:	e002      	b.n	80048c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048be:	bf00      	nop
 80048c0:	e000      	b.n	80048c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80048c4:	7bfb      	ldrb	r3, [r7, #15]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d10d      	bne.n	80048e6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80048ca:	4b49      	ldr	r3, [pc, #292]	@ (80049f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6819      	ldr	r1, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	3b01      	subs	r3, #1
 80048dc:	011b      	lsls	r3, r3, #4
 80048de:	430b      	orrs	r3, r1
 80048e0:	4943      	ldr	r1, [pc, #268]	@ (80049f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80048e6:	7bfb      	ldrb	r3, [r7, #15]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d17c      	bne.n	80049e6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80048ec:	4b40      	ldr	r3, [pc, #256]	@ (80049f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a3f      	ldr	r2, [pc, #252]	@ (80049f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048f2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80048f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048f8:	f7fc fce2 	bl	80012c0 <HAL_GetTick>
 80048fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048fe:	e009      	b.n	8004914 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004900:	f7fc fcde 	bl	80012c0 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b02      	cmp	r3, #2
 800490c:	d902      	bls.n	8004914 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	73fb      	strb	r3, [r7, #15]
        break;
 8004912:	e005      	b.n	8004920 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004914:	4b36      	ldr	r3, [pc, #216]	@ (80049f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1ef      	bne.n	8004900 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004920:	7bfb      	ldrb	r3, [r7, #15]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d15f      	bne.n	80049e6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d110      	bne.n	800494e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800492c:	4b30      	ldr	r3, [pc, #192]	@ (80049f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004934:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	6892      	ldr	r2, [r2, #8]
 800493c:	0211      	lsls	r1, r2, #8
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	68d2      	ldr	r2, [r2, #12]
 8004942:	06d2      	lsls	r2, r2, #27
 8004944:	430a      	orrs	r2, r1
 8004946:	492a      	ldr	r1, [pc, #168]	@ (80049f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004948:	4313      	orrs	r3, r2
 800494a:	610b      	str	r3, [r1, #16]
 800494c:	e027      	b.n	800499e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d112      	bne.n	800497a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004954:	4b26      	ldr	r3, [pc, #152]	@ (80049f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800495c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	6892      	ldr	r2, [r2, #8]
 8004964:	0211      	lsls	r1, r2, #8
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	6912      	ldr	r2, [r2, #16]
 800496a:	0852      	lsrs	r2, r2, #1
 800496c:	3a01      	subs	r2, #1
 800496e:	0552      	lsls	r2, r2, #21
 8004970:	430a      	orrs	r2, r1
 8004972:	491f      	ldr	r1, [pc, #124]	@ (80049f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004974:	4313      	orrs	r3, r2
 8004976:	610b      	str	r3, [r1, #16]
 8004978:	e011      	b.n	800499e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800497a:	4b1d      	ldr	r3, [pc, #116]	@ (80049f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004982:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	6892      	ldr	r2, [r2, #8]
 800498a:	0211      	lsls	r1, r2, #8
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	6952      	ldr	r2, [r2, #20]
 8004990:	0852      	lsrs	r2, r2, #1
 8004992:	3a01      	subs	r2, #1
 8004994:	0652      	lsls	r2, r2, #25
 8004996:	430a      	orrs	r2, r1
 8004998:	4915      	ldr	r1, [pc, #84]	@ (80049f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800499a:	4313      	orrs	r3, r2
 800499c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800499e:	4b14      	ldr	r3, [pc, #80]	@ (80049f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a13      	ldr	r2, [pc, #76]	@ (80049f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049a4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80049a8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049aa:	f7fc fc89 	bl	80012c0 <HAL_GetTick>
 80049ae:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049b0:	e009      	b.n	80049c6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049b2:	f7fc fc85 	bl	80012c0 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d902      	bls.n	80049c6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	73fb      	strb	r3, [r7, #15]
          break;
 80049c4:	e005      	b.n	80049d2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049c6:	4b0a      	ldr	r3, [pc, #40]	@ (80049f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d0ef      	beq.n	80049b2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80049d2:	7bfb      	ldrb	r3, [r7, #15]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d106      	bne.n	80049e6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80049d8:	4b05      	ldr	r3, [pc, #20]	@ (80049f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049da:	691a      	ldr	r2, [r3, #16]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	4903      	ldr	r1, [pc, #12]	@ (80049f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80049e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	40021000 	.word	0x40021000

080049f4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049fe:	2300      	movs	r3, #0
 8004a00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a02:	4b69      	ldr	r3, [pc, #420]	@ (8004ba8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	f003 0303 	and.w	r3, r3, #3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d018      	beq.n	8004a40 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004a0e:	4b66      	ldr	r3, [pc, #408]	@ (8004ba8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	f003 0203 	and.w	r2, r3, #3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d10d      	bne.n	8004a3a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
       ||
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d009      	beq.n	8004a3a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004a26:	4b60      	ldr	r3, [pc, #384]	@ (8004ba8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	091b      	lsrs	r3, r3, #4
 8004a2c:	f003 0307 	and.w	r3, r3, #7
 8004a30:	1c5a      	adds	r2, r3, #1
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
       ||
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d047      	beq.n	8004aca <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	73fb      	strb	r3, [r7, #15]
 8004a3e:	e044      	b.n	8004aca <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2b03      	cmp	r3, #3
 8004a46:	d018      	beq.n	8004a7a <RCCEx_PLLSAI2_Config+0x86>
 8004a48:	2b03      	cmp	r3, #3
 8004a4a:	d825      	bhi.n	8004a98 <RCCEx_PLLSAI2_Config+0xa4>
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d002      	beq.n	8004a56 <RCCEx_PLLSAI2_Config+0x62>
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d009      	beq.n	8004a68 <RCCEx_PLLSAI2_Config+0x74>
 8004a54:	e020      	b.n	8004a98 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a56:	4b54      	ldr	r3, [pc, #336]	@ (8004ba8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d11d      	bne.n	8004a9e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a66:	e01a      	b.n	8004a9e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a68:	4b4f      	ldr	r3, [pc, #316]	@ (8004ba8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d116      	bne.n	8004aa2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a78:	e013      	b.n	8004aa2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a7a:	4b4b      	ldr	r3, [pc, #300]	@ (8004ba8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10f      	bne.n	8004aa6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a86:	4b48      	ldr	r3, [pc, #288]	@ (8004ba8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d109      	bne.n	8004aa6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a96:	e006      	b.n	8004aa6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a9c:	e004      	b.n	8004aa8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a9e:	bf00      	nop
 8004aa0:	e002      	b.n	8004aa8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004aa2:	bf00      	nop
 8004aa4:	e000      	b.n	8004aa8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004aa6:	bf00      	nop
    }

    if(status == HAL_OK)
 8004aa8:	7bfb      	ldrb	r3, [r7, #15]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d10d      	bne.n	8004aca <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004aae:	4b3e      	ldr	r3, [pc, #248]	@ (8004ba8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6819      	ldr	r1, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	011b      	lsls	r3, r3, #4
 8004ac2:	430b      	orrs	r3, r1
 8004ac4:	4938      	ldr	r1, [pc, #224]	@ (8004ba8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004aca:	7bfb      	ldrb	r3, [r7, #15]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d166      	bne.n	8004b9e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004ad0:	4b35      	ldr	r3, [pc, #212]	@ (8004ba8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a34      	ldr	r2, [pc, #208]	@ (8004ba8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004ad6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ada:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004adc:	f7fc fbf0 	bl	80012c0 <HAL_GetTick>
 8004ae0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ae2:	e009      	b.n	8004af8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ae4:	f7fc fbec 	bl	80012c0 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d902      	bls.n	8004af8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	73fb      	strb	r3, [r7, #15]
        break;
 8004af6:	e005      	b.n	8004b04 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004af8:	4b2b      	ldr	r3, [pc, #172]	@ (8004ba8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1ef      	bne.n	8004ae4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b04:	7bfb      	ldrb	r3, [r7, #15]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d149      	bne.n	8004b9e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d110      	bne.n	8004b32 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b10:	4b25      	ldr	r3, [pc, #148]	@ (8004ba8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b12:	695b      	ldr	r3, [r3, #20]
 8004b14:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004b18:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	6892      	ldr	r2, [r2, #8]
 8004b20:	0211      	lsls	r1, r2, #8
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	68d2      	ldr	r2, [r2, #12]
 8004b26:	06d2      	lsls	r2, r2, #27
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	491f      	ldr	r1, [pc, #124]	@ (8004ba8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	614b      	str	r3, [r1, #20]
 8004b30:	e011      	b.n	8004b56 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b32:	4b1d      	ldr	r3, [pc, #116]	@ (8004ba8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004b3a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	6892      	ldr	r2, [r2, #8]
 8004b42:	0211      	lsls	r1, r2, #8
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	6912      	ldr	r2, [r2, #16]
 8004b48:	0852      	lsrs	r2, r2, #1
 8004b4a:	3a01      	subs	r2, #1
 8004b4c:	0652      	lsls	r2, r2, #25
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	4915      	ldr	r1, [pc, #84]	@ (8004ba8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004b56:	4b14      	ldr	r3, [pc, #80]	@ (8004ba8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a13      	ldr	r2, [pc, #76]	@ (8004ba8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b60:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b62:	f7fc fbad 	bl	80012c0 <HAL_GetTick>
 8004b66:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b68:	e009      	b.n	8004b7e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b6a:	f7fc fba9 	bl	80012c0 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d902      	bls.n	8004b7e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	73fb      	strb	r3, [r7, #15]
          break;
 8004b7c:	e005      	b.n	8004b8a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8004ba8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d0ef      	beq.n	8004b6a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8004b8a:	7bfb      	ldrb	r3, [r7, #15]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d106      	bne.n	8004b9e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004b90:	4b05      	ldr	r3, [pc, #20]	@ (8004ba8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b92:	695a      	ldr	r2, [r3, #20]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	4903      	ldr	r1, [pc, #12]	@ (8004ba8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3710      	adds	r7, #16
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	40021000 	.word	0x40021000

08004bac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e049      	b.n	8004c52 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d106      	bne.n	8004bd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f841 	bl	8004c5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2202      	movs	r2, #2
 8004bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	3304      	adds	r3, #4
 8004be8:	4619      	mov	r1, r3
 8004bea:	4610      	mov	r0, r2
 8004bec:	f000 f9e0 	bl	8004fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3708      	adds	r7, #8
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}

08004c5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	b083      	sub	sp, #12
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004c62:	bf00      	nop
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
	...

08004c70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d001      	beq.n	8004c88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e04f      	b.n	8004d28 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68da      	ldr	r2, [r3, #12]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f042 0201 	orr.w	r2, r2, #1
 8004c9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a23      	ldr	r2, [pc, #140]	@ (8004d34 <HAL_TIM_Base_Start_IT+0xc4>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d01d      	beq.n	8004ce6 <HAL_TIM_Base_Start_IT+0x76>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cb2:	d018      	beq.n	8004ce6 <HAL_TIM_Base_Start_IT+0x76>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a1f      	ldr	r2, [pc, #124]	@ (8004d38 <HAL_TIM_Base_Start_IT+0xc8>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d013      	beq.n	8004ce6 <HAL_TIM_Base_Start_IT+0x76>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a1e      	ldr	r2, [pc, #120]	@ (8004d3c <HAL_TIM_Base_Start_IT+0xcc>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d00e      	beq.n	8004ce6 <HAL_TIM_Base_Start_IT+0x76>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a1c      	ldr	r2, [pc, #112]	@ (8004d40 <HAL_TIM_Base_Start_IT+0xd0>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d009      	beq.n	8004ce6 <HAL_TIM_Base_Start_IT+0x76>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a1b      	ldr	r2, [pc, #108]	@ (8004d44 <HAL_TIM_Base_Start_IT+0xd4>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d004      	beq.n	8004ce6 <HAL_TIM_Base_Start_IT+0x76>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a19      	ldr	r2, [pc, #100]	@ (8004d48 <HAL_TIM_Base_Start_IT+0xd8>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d115      	bne.n	8004d12 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	689a      	ldr	r2, [r3, #8]
 8004cec:	4b17      	ldr	r3, [pc, #92]	@ (8004d4c <HAL_TIM_Base_Start_IT+0xdc>)
 8004cee:	4013      	ands	r3, r2
 8004cf0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2b06      	cmp	r3, #6
 8004cf6:	d015      	beq.n	8004d24 <HAL_TIM_Base_Start_IT+0xb4>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cfe:	d011      	beq.n	8004d24 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f042 0201 	orr.w	r2, r2, #1
 8004d0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d10:	e008      	b.n	8004d24 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f042 0201 	orr.w	r2, r2, #1
 8004d20:	601a      	str	r2, [r3, #0]
 8004d22:	e000      	b.n	8004d26 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d24:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3714      	adds	r7, #20
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr
 8004d34:	40012c00 	.word	0x40012c00
 8004d38:	40000400 	.word	0x40000400
 8004d3c:	40000800 	.word	0x40000800
 8004d40:	40000c00 	.word	0x40000c00
 8004d44:	40013400 	.word	0x40013400
 8004d48:	40014000 	.word	0x40014000
 8004d4c:	00010007 	.word	0x00010007

08004d50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d020      	beq.n	8004db4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d01b      	beq.n	8004db4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f06f 0202 	mvn.w	r2, #2
 8004d84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	f003 0303 	and.w	r3, r3, #3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d003      	beq.n	8004da2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 f8e9 	bl	8004f72 <HAL_TIM_IC_CaptureCallback>
 8004da0:	e005      	b.n	8004dae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 f8db 	bl	8004f5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 f8ec 	bl	8004f86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	f003 0304 	and.w	r3, r3, #4
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d020      	beq.n	8004e00 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f003 0304 	and.w	r3, r3, #4
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d01b      	beq.n	8004e00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f06f 0204 	mvn.w	r2, #4
 8004dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2202      	movs	r2, #2
 8004dd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d003      	beq.n	8004dee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f8c3 	bl	8004f72 <HAL_TIM_IC_CaptureCallback>
 8004dec:	e005      	b.n	8004dfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f8b5 	bl	8004f5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f000 f8c6 	bl	8004f86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	f003 0308 	and.w	r3, r3, #8
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d020      	beq.n	8004e4c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f003 0308 	and.w	r3, r3, #8
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d01b      	beq.n	8004e4c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f06f 0208 	mvn.w	r2, #8
 8004e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2204      	movs	r2, #4
 8004e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	69db      	ldr	r3, [r3, #28]
 8004e2a:	f003 0303 	and.w	r3, r3, #3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d003      	beq.n	8004e3a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 f89d 	bl	8004f72 <HAL_TIM_IC_CaptureCallback>
 8004e38:	e005      	b.n	8004e46 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 f88f 	bl	8004f5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 f8a0 	bl	8004f86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	f003 0310 	and.w	r3, r3, #16
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d020      	beq.n	8004e98 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f003 0310 	and.w	r3, r3, #16
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d01b      	beq.n	8004e98 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f06f 0210 	mvn.w	r2, #16
 8004e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2208      	movs	r2, #8
 8004e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	69db      	ldr	r3, [r3, #28]
 8004e76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f877 	bl	8004f72 <HAL_TIM_IC_CaptureCallback>
 8004e84:	e005      	b.n	8004e92 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 f869 	bl	8004f5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 f87a 	bl	8004f86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00c      	beq.n	8004ebc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d007      	beq.n	8004ebc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f06f 0201 	mvn.w	r2, #1
 8004eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f7fb fed6 	bl	8000c68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d104      	bne.n	8004ed0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00c      	beq.n	8004eea <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d007      	beq.n	8004eea <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004ee2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 f913 	bl	8005110 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00c      	beq.n	8004f0e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d007      	beq.n	8004f0e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004f06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 f90b 	bl	8005124 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00c      	beq.n	8004f32 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d007      	beq.n	8004f32 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004f2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 f834 	bl	8004f9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	f003 0320 	and.w	r3, r3, #32
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00c      	beq.n	8004f56 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f003 0320 	and.w	r3, r3, #32
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d007      	beq.n	8004f56 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f06f 0220 	mvn.w	r2, #32
 8004f4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 f8d3 	bl	80050fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f56:	bf00      	nop
 8004f58:	3710      	adds	r7, #16
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b083      	sub	sp, #12
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f66:	bf00      	nop
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr

08004f72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b083      	sub	sp, #12
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f7a:	bf00      	nop
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b083      	sub	sp, #12
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f8e:	bf00      	nop
 8004f90:	370c      	adds	r7, #12
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr

08004f9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b083      	sub	sp, #12
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fa2:	bf00      	nop
 8004fa4:	370c      	adds	r7, #12
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
	...

08004fb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a46      	ldr	r2, [pc, #280]	@ (80050dc <TIM_Base_SetConfig+0x12c>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d013      	beq.n	8004ff0 <TIM_Base_SetConfig+0x40>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fce:	d00f      	beq.n	8004ff0 <TIM_Base_SetConfig+0x40>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a43      	ldr	r2, [pc, #268]	@ (80050e0 <TIM_Base_SetConfig+0x130>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d00b      	beq.n	8004ff0 <TIM_Base_SetConfig+0x40>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a42      	ldr	r2, [pc, #264]	@ (80050e4 <TIM_Base_SetConfig+0x134>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d007      	beq.n	8004ff0 <TIM_Base_SetConfig+0x40>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a41      	ldr	r2, [pc, #260]	@ (80050e8 <TIM_Base_SetConfig+0x138>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d003      	beq.n	8004ff0 <TIM_Base_SetConfig+0x40>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a40      	ldr	r2, [pc, #256]	@ (80050ec <TIM_Base_SetConfig+0x13c>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d108      	bne.n	8005002 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ff6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a35      	ldr	r2, [pc, #212]	@ (80050dc <TIM_Base_SetConfig+0x12c>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d01f      	beq.n	800504a <TIM_Base_SetConfig+0x9a>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005010:	d01b      	beq.n	800504a <TIM_Base_SetConfig+0x9a>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a32      	ldr	r2, [pc, #200]	@ (80050e0 <TIM_Base_SetConfig+0x130>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d017      	beq.n	800504a <TIM_Base_SetConfig+0x9a>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a31      	ldr	r2, [pc, #196]	@ (80050e4 <TIM_Base_SetConfig+0x134>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d013      	beq.n	800504a <TIM_Base_SetConfig+0x9a>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a30      	ldr	r2, [pc, #192]	@ (80050e8 <TIM_Base_SetConfig+0x138>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d00f      	beq.n	800504a <TIM_Base_SetConfig+0x9a>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a2f      	ldr	r2, [pc, #188]	@ (80050ec <TIM_Base_SetConfig+0x13c>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d00b      	beq.n	800504a <TIM_Base_SetConfig+0x9a>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a2e      	ldr	r2, [pc, #184]	@ (80050f0 <TIM_Base_SetConfig+0x140>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d007      	beq.n	800504a <TIM_Base_SetConfig+0x9a>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a2d      	ldr	r2, [pc, #180]	@ (80050f4 <TIM_Base_SetConfig+0x144>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d003      	beq.n	800504a <TIM_Base_SetConfig+0x9a>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a2c      	ldr	r2, [pc, #176]	@ (80050f8 <TIM_Base_SetConfig+0x148>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d108      	bne.n	800505c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005050:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	4313      	orrs	r3, r2
 800505a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	4313      	orrs	r3, r2
 8005068:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	689a      	ldr	r2, [r3, #8]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a16      	ldr	r2, [pc, #88]	@ (80050dc <TIM_Base_SetConfig+0x12c>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d00f      	beq.n	80050a8 <TIM_Base_SetConfig+0xf8>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a18      	ldr	r2, [pc, #96]	@ (80050ec <TIM_Base_SetConfig+0x13c>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d00b      	beq.n	80050a8 <TIM_Base_SetConfig+0xf8>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a17      	ldr	r2, [pc, #92]	@ (80050f0 <TIM_Base_SetConfig+0x140>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d007      	beq.n	80050a8 <TIM_Base_SetConfig+0xf8>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a16      	ldr	r2, [pc, #88]	@ (80050f4 <TIM_Base_SetConfig+0x144>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d003      	beq.n	80050a8 <TIM_Base_SetConfig+0xf8>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a15      	ldr	r2, [pc, #84]	@ (80050f8 <TIM_Base_SetConfig+0x148>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d103      	bne.n	80050b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	691a      	ldr	r2, [r3, #16]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d105      	bne.n	80050ce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	f023 0201 	bic.w	r2, r3, #1
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	611a      	str	r2, [r3, #16]
  }
}
 80050ce:	bf00      	nop
 80050d0:	3714      	adds	r7, #20
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	40012c00 	.word	0x40012c00
 80050e0:	40000400 	.word	0x40000400
 80050e4:	40000800 	.word	0x40000800
 80050e8:	40000c00 	.word	0x40000c00
 80050ec:	40013400 	.word	0x40013400
 80050f0:	40014000 	.word	0x40014000
 80050f4:	40014400 	.word	0x40014400
 80050f8:	40014800 	.word	0x40014800

080050fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005118:	bf00      	nop
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d101      	bne.n	800514a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e040      	b.n	80051cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800514e:	2b00      	cmp	r3, #0
 8005150:	d106      	bne.n	8005160 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f7fb ff32 	bl	8000fc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2224      	movs	r2, #36	@ 0x24
 8005164:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f022 0201 	bic.w	r2, r2, #1
 8005174:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800517a:	2b00      	cmp	r3, #0
 800517c:	d002      	beq.n	8005184 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 fe5c 	bl	8005e3c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 fba1 	bl	80058cc <UART_SetConfig>
 800518a:	4603      	mov	r3, r0
 800518c:	2b01      	cmp	r3, #1
 800518e:	d101      	bne.n	8005194 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e01b      	b.n	80051cc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	689a      	ldr	r2, [r3, #8]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80051b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f042 0201 	orr.w	r2, r2, #1
 80051c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 fedb 	bl	8005f80 <UART_CheckIdleState>
 80051ca:	4603      	mov	r3, r0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3708      	adds	r7, #8
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b08a      	sub	sp, #40	@ 0x28
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	4613      	mov	r3, r2
 80051e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051e8:	2b20      	cmp	r3, #32
 80051ea:	d137      	bne.n	800525c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d002      	beq.n	80051f8 <HAL_UART_Receive_IT+0x24>
 80051f2:	88fb      	ldrh	r3, [r7, #6]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d101      	bne.n	80051fc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e030      	b.n	800525e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a18      	ldr	r2, [pc, #96]	@ (8005268 <HAL_UART_Receive_IT+0x94>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d01f      	beq.n	800524c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d018      	beq.n	800524c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	e853 3f00 	ldrex	r3, [r3]
 8005226:	613b      	str	r3, [r7, #16]
   return(result);
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800522e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	461a      	mov	r2, r3
 8005236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005238:	623b      	str	r3, [r7, #32]
 800523a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523c:	69f9      	ldr	r1, [r7, #28]
 800523e:	6a3a      	ldr	r2, [r7, #32]
 8005240:	e841 2300 	strex	r3, r2, [r1]
 8005244:	61bb      	str	r3, [r7, #24]
   return(result);
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d1e6      	bne.n	800521a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800524c:	88fb      	ldrh	r3, [r7, #6]
 800524e:	461a      	mov	r2, r3
 8005250:	68b9      	ldr	r1, [r7, #8]
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	f000 ffaa 	bl	80061ac <UART_Start_Receive_IT>
 8005258:	4603      	mov	r3, r0
 800525a:	e000      	b.n	800525e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800525c:	2302      	movs	r3, #2
  }
}
 800525e:	4618      	mov	r0, r3
 8005260:	3728      	adds	r7, #40	@ 0x28
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	40008000 	.word	0x40008000

0800526c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b0ba      	sub	sp, #232	@ 0xe8
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	69db      	ldr	r3, [r3, #28]
 800527a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005292:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005296:	f640 030f 	movw	r3, #2063	@ 0x80f
 800529a:	4013      	ands	r3, r2
 800529c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80052a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d115      	bne.n	80052d4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80052a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052ac:	f003 0320 	and.w	r3, r3, #32
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00f      	beq.n	80052d4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80052b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052b8:	f003 0320 	and.w	r3, r3, #32
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d009      	beq.n	80052d4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 82ca 	beq.w	800585e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	4798      	blx	r3
      }
      return;
 80052d2:	e2c4      	b.n	800585e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80052d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 8117 	beq.w	800550c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80052de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d106      	bne.n	80052f8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80052ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80052ee:	4b85      	ldr	r3, [pc, #532]	@ (8005504 <HAL_UART_IRQHandler+0x298>)
 80052f0:	4013      	ands	r3, r2
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	f000 810a 	beq.w	800550c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80052f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052fc:	f003 0301 	and.w	r3, r3, #1
 8005300:	2b00      	cmp	r3, #0
 8005302:	d011      	beq.n	8005328 <HAL_UART_IRQHandler+0xbc>
 8005304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00b      	beq.n	8005328 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2201      	movs	r2, #1
 8005316:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800531e:	f043 0201 	orr.w	r2, r3, #1
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800532c:	f003 0302 	and.w	r3, r3, #2
 8005330:	2b00      	cmp	r3, #0
 8005332:	d011      	beq.n	8005358 <HAL_UART_IRQHandler+0xec>
 8005334:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005338:	f003 0301 	and.w	r3, r3, #1
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00b      	beq.n	8005358 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2202      	movs	r2, #2
 8005346:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800534e:	f043 0204 	orr.w	r2, r3, #4
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800535c:	f003 0304 	and.w	r3, r3, #4
 8005360:	2b00      	cmp	r3, #0
 8005362:	d011      	beq.n	8005388 <HAL_UART_IRQHandler+0x11c>
 8005364:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005368:	f003 0301 	and.w	r3, r3, #1
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00b      	beq.n	8005388 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2204      	movs	r2, #4
 8005376:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800537e:	f043 0202 	orr.w	r2, r3, #2
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800538c:	f003 0308 	and.w	r3, r3, #8
 8005390:	2b00      	cmp	r3, #0
 8005392:	d017      	beq.n	80053c4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005398:	f003 0320 	and.w	r3, r3, #32
 800539c:	2b00      	cmp	r3, #0
 800539e:	d105      	bne.n	80053ac <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80053a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053a4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00b      	beq.n	80053c4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2208      	movs	r2, #8
 80053b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053ba:	f043 0208 	orr.w	r2, r3, #8
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80053c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d012      	beq.n	80053f6 <HAL_UART_IRQHandler+0x18a>
 80053d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00c      	beq.n	80053f6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80053e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053ec:	f043 0220 	orr.w	r2, r3, #32
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f000 8230 	beq.w	8005862 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005406:	f003 0320 	and.w	r3, r3, #32
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00d      	beq.n	800542a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800540e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005412:	f003 0320 	and.w	r3, r3, #32
 8005416:	2b00      	cmp	r3, #0
 8005418:	d007      	beq.n	800542a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800541e:	2b00      	cmp	r3, #0
 8005420:	d003      	beq.n	800542a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005430:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800543e:	2b40      	cmp	r3, #64	@ 0x40
 8005440:	d005      	beq.n	800544e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005442:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005446:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800544a:	2b00      	cmp	r3, #0
 800544c:	d04f      	beq.n	80054ee <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 ff72 	bl	8006338 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800545e:	2b40      	cmp	r3, #64	@ 0x40
 8005460:	d141      	bne.n	80054e6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	3308      	adds	r3, #8
 8005468:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005470:	e853 3f00 	ldrex	r3, [r3]
 8005474:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005478:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800547c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005480:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	3308      	adds	r3, #8
 800548a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800548e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005492:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005496:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800549a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800549e:	e841 2300 	strex	r3, r2, [r1]
 80054a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80054a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1d9      	bne.n	8005462 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d013      	beq.n	80054de <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054ba:	4a13      	ldr	r2, [pc, #76]	@ (8005508 <HAL_UART_IRQHandler+0x29c>)
 80054bc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7fd f8fa 	bl	80026bc <HAL_DMA_Abort_IT>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d017      	beq.n	80054fe <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80054d8:	4610      	mov	r0, r2
 80054da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054dc:	e00f      	b.n	80054fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f9de 	bl	80058a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054e4:	e00b      	b.n	80054fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 f9da 	bl	80058a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054ec:	e007      	b.n	80054fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 f9d6 	bl	80058a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80054fc:	e1b1      	b.n	8005862 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054fe:	bf00      	nop
    return;
 8005500:	e1af      	b.n	8005862 <HAL_UART_IRQHandler+0x5f6>
 8005502:	bf00      	nop
 8005504:	04000120 	.word	0x04000120
 8005508:	08006401 	.word	0x08006401

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005510:	2b01      	cmp	r3, #1
 8005512:	f040 816a 	bne.w	80057ea <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800551a:	f003 0310 	and.w	r3, r3, #16
 800551e:	2b00      	cmp	r3, #0
 8005520:	f000 8163 	beq.w	80057ea <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005528:	f003 0310 	and.w	r3, r3, #16
 800552c:	2b00      	cmp	r3, #0
 800552e:	f000 815c 	beq.w	80057ea <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2210      	movs	r2, #16
 8005538:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005544:	2b40      	cmp	r3, #64	@ 0x40
 8005546:	f040 80d4 	bne.w	80056f2 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005556:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800555a:	2b00      	cmp	r3, #0
 800555c:	f000 80ad 	beq.w	80056ba <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005566:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800556a:	429a      	cmp	r2, r3
 800556c:	f080 80a5 	bcs.w	80056ba <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005576:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0320 	and.w	r3, r3, #32
 8005586:	2b00      	cmp	r3, #0
 8005588:	f040 8086 	bne.w	8005698 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005594:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005598:	e853 3f00 	ldrex	r3, [r3]
 800559c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80055a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80055a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	461a      	mov	r2, r3
 80055b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80055b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80055ba:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055be:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80055c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80055c6:	e841 2300 	strex	r3, r2, [r1]
 80055ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80055ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d1da      	bne.n	800558c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	3308      	adds	r3, #8
 80055dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055e0:	e853 3f00 	ldrex	r3, [r3]
 80055e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80055e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80055e8:	f023 0301 	bic.w	r3, r3, #1
 80055ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	3308      	adds	r3, #8
 80055f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80055fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80055fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005600:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005602:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005606:	e841 2300 	strex	r3, r2, [r1]
 800560a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800560c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1e1      	bne.n	80055d6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	3308      	adds	r3, #8
 8005618:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800561c:	e853 3f00 	ldrex	r3, [r3]
 8005620:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005622:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005624:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005628:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	3308      	adds	r3, #8
 8005632:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005636:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005638:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800563c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800563e:	e841 2300 	strex	r3, r2, [r1]
 8005642:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005644:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1e3      	bne.n	8005612 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2220      	movs	r2, #32
 800564e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005660:	e853 3f00 	ldrex	r3, [r3]
 8005664:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005666:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005668:	f023 0310 	bic.w	r3, r3, #16
 800566c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	461a      	mov	r2, r3
 8005676:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800567a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800567c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005680:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005682:	e841 2300 	strex	r3, r2, [r1]
 8005686:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005688:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1e4      	bne.n	8005658 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005692:	4618      	mov	r0, r3
 8005694:	f7fc ffd4 	bl	8002640 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2202      	movs	r2, #2
 800569c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	4619      	mov	r1, r3
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 f8fe 	bl	80058b4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80056b8:	e0d5      	b.n	8005866 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80056c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80056c4:	429a      	cmp	r2, r3
 80056c6:	f040 80ce 	bne.w	8005866 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0320 	and.w	r3, r3, #32
 80056d6:	2b20      	cmp	r3, #32
 80056d8:	f040 80c5 	bne.w	8005866 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2202      	movs	r2, #2
 80056e0:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80056e8:	4619      	mov	r1, r3
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f8e2 	bl	80058b4 <HAL_UARTEx_RxEventCallback>
      return;
 80056f0:	e0b9      	b.n	8005866 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80056fe:	b29b      	uxth	r3, r3
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800570c:	b29b      	uxth	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	f000 80ab 	beq.w	800586a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8005714:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 80a6 	beq.w	800586a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005726:	e853 3f00 	ldrex	r3, [r3]
 800572a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800572c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800572e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005732:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	461a      	mov	r2, r3
 800573c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005740:	647b      	str	r3, [r7, #68]	@ 0x44
 8005742:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005744:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005746:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005748:	e841 2300 	strex	r3, r2, [r1]
 800574c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800574e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1e4      	bne.n	800571e <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	3308      	adds	r3, #8
 800575a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800575e:	e853 3f00 	ldrex	r3, [r3]
 8005762:	623b      	str	r3, [r7, #32]
   return(result);
 8005764:	6a3b      	ldr	r3, [r7, #32]
 8005766:	f023 0301 	bic.w	r3, r3, #1
 800576a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	3308      	adds	r3, #8
 8005774:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005778:	633a      	str	r2, [r7, #48]	@ 0x30
 800577a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800577e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005780:	e841 2300 	strex	r3, r2, [r1]
 8005784:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1e3      	bne.n	8005754 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2220      	movs	r2, #32
 8005790:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	e853 3f00 	ldrex	r3, [r3]
 80057ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f023 0310 	bic.w	r3, r3, #16
 80057b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	461a      	mov	r2, r3
 80057be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80057c2:	61fb      	str	r3, [r7, #28]
 80057c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c6:	69b9      	ldr	r1, [r7, #24]
 80057c8:	69fa      	ldr	r2, [r7, #28]
 80057ca:	e841 2300 	strex	r3, r2, [r1]
 80057ce:	617b      	str	r3, [r7, #20]
   return(result);
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1e4      	bne.n	80057a0 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2202      	movs	r2, #2
 80057da:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80057e0:	4619      	mov	r1, r3
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f866 	bl	80058b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80057e8:	e03f      	b.n	800586a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80057ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00e      	beq.n	8005814 <HAL_UART_IRQHandler+0x5a8>
 80057f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d008      	beq.n	8005814 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800580a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 fff3 	bl	80067f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005812:	e02d      	b.n	8005870 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005818:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00e      	beq.n	800583e <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005824:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005828:	2b00      	cmp	r3, #0
 800582a:	d008      	beq.n	800583e <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005830:	2b00      	cmp	r3, #0
 8005832:	d01c      	beq.n	800586e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	4798      	blx	r3
    }
    return;
 800583c:	e017      	b.n	800586e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800583e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005846:	2b00      	cmp	r3, #0
 8005848:	d012      	beq.n	8005870 <HAL_UART_IRQHandler+0x604>
 800584a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800584e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00c      	beq.n	8005870 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 fde8 	bl	800642c <UART_EndTransmit_IT>
    return;
 800585c:	e008      	b.n	8005870 <HAL_UART_IRQHandler+0x604>
      return;
 800585e:	bf00      	nop
 8005860:	e006      	b.n	8005870 <HAL_UART_IRQHandler+0x604>
    return;
 8005862:	bf00      	nop
 8005864:	e004      	b.n	8005870 <HAL_UART_IRQHandler+0x604>
      return;
 8005866:	bf00      	nop
 8005868:	e002      	b.n	8005870 <HAL_UART_IRQHandler+0x604>
      return;
 800586a:	bf00      	nop
 800586c:	e000      	b.n	8005870 <HAL_UART_IRQHandler+0x604>
    return;
 800586e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005870:	37e8      	adds	r7, #232	@ 0xe8
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop

08005878 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80058a8:	bf00      	nop
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	460b      	mov	r3, r1
 80058be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058d0:	b08a      	sub	sp, #40	@ 0x28
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058d6:	2300      	movs	r3, #0
 80058d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	689a      	ldr	r2, [r3, #8]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	431a      	orrs	r2, r3
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	431a      	orrs	r2, r3
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	69db      	ldr	r3, [r3, #28]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	4ba4      	ldr	r3, [pc, #656]	@ (8005b8c <UART_SetConfig+0x2c0>)
 80058fc:	4013      	ands	r3, r2
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	6812      	ldr	r2, [r2, #0]
 8005902:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005904:	430b      	orrs	r3, r1
 8005906:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	68da      	ldr	r2, [r3, #12]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	430a      	orrs	r2, r1
 800591c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	699b      	ldr	r3, [r3, #24]
 8005922:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a99      	ldr	r2, [pc, #612]	@ (8005b90 <UART_SetConfig+0x2c4>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d004      	beq.n	8005938 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005934:	4313      	orrs	r3, r2
 8005936:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005948:	430a      	orrs	r2, r1
 800594a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a90      	ldr	r2, [pc, #576]	@ (8005b94 <UART_SetConfig+0x2c8>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d126      	bne.n	80059a4 <UART_SetConfig+0xd8>
 8005956:	4b90      	ldr	r3, [pc, #576]	@ (8005b98 <UART_SetConfig+0x2cc>)
 8005958:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800595c:	f003 0303 	and.w	r3, r3, #3
 8005960:	2b03      	cmp	r3, #3
 8005962:	d81b      	bhi.n	800599c <UART_SetConfig+0xd0>
 8005964:	a201      	add	r2, pc, #4	@ (adr r2, 800596c <UART_SetConfig+0xa0>)
 8005966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596a:	bf00      	nop
 800596c:	0800597d 	.word	0x0800597d
 8005970:	0800598d 	.word	0x0800598d
 8005974:	08005985 	.word	0x08005985
 8005978:	08005995 	.word	0x08005995
 800597c:	2301      	movs	r3, #1
 800597e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005982:	e116      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005984:	2302      	movs	r3, #2
 8005986:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800598a:	e112      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 800598c:	2304      	movs	r3, #4
 800598e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005992:	e10e      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005994:	2308      	movs	r3, #8
 8005996:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800599a:	e10a      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 800599c:	2310      	movs	r3, #16
 800599e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059a2:	e106      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a7c      	ldr	r2, [pc, #496]	@ (8005b9c <UART_SetConfig+0x2d0>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d138      	bne.n	8005a20 <UART_SetConfig+0x154>
 80059ae:	4b7a      	ldr	r3, [pc, #488]	@ (8005b98 <UART_SetConfig+0x2cc>)
 80059b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059b4:	f003 030c 	and.w	r3, r3, #12
 80059b8:	2b0c      	cmp	r3, #12
 80059ba:	d82d      	bhi.n	8005a18 <UART_SetConfig+0x14c>
 80059bc:	a201      	add	r2, pc, #4	@ (adr r2, 80059c4 <UART_SetConfig+0xf8>)
 80059be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c2:	bf00      	nop
 80059c4:	080059f9 	.word	0x080059f9
 80059c8:	08005a19 	.word	0x08005a19
 80059cc:	08005a19 	.word	0x08005a19
 80059d0:	08005a19 	.word	0x08005a19
 80059d4:	08005a09 	.word	0x08005a09
 80059d8:	08005a19 	.word	0x08005a19
 80059dc:	08005a19 	.word	0x08005a19
 80059e0:	08005a19 	.word	0x08005a19
 80059e4:	08005a01 	.word	0x08005a01
 80059e8:	08005a19 	.word	0x08005a19
 80059ec:	08005a19 	.word	0x08005a19
 80059f0:	08005a19 	.word	0x08005a19
 80059f4:	08005a11 	.word	0x08005a11
 80059f8:	2300      	movs	r3, #0
 80059fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059fe:	e0d8      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005a00:	2302      	movs	r3, #2
 8005a02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a06:	e0d4      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005a08:	2304      	movs	r3, #4
 8005a0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a0e:	e0d0      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005a10:	2308      	movs	r3, #8
 8005a12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a16:	e0cc      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005a18:	2310      	movs	r3, #16
 8005a1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a1e:	e0c8      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a5e      	ldr	r2, [pc, #376]	@ (8005ba0 <UART_SetConfig+0x2d4>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d125      	bne.n	8005a76 <UART_SetConfig+0x1aa>
 8005a2a:	4b5b      	ldr	r3, [pc, #364]	@ (8005b98 <UART_SetConfig+0x2cc>)
 8005a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a30:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005a34:	2b30      	cmp	r3, #48	@ 0x30
 8005a36:	d016      	beq.n	8005a66 <UART_SetConfig+0x19a>
 8005a38:	2b30      	cmp	r3, #48	@ 0x30
 8005a3a:	d818      	bhi.n	8005a6e <UART_SetConfig+0x1a2>
 8005a3c:	2b20      	cmp	r3, #32
 8005a3e:	d00a      	beq.n	8005a56 <UART_SetConfig+0x18a>
 8005a40:	2b20      	cmp	r3, #32
 8005a42:	d814      	bhi.n	8005a6e <UART_SetConfig+0x1a2>
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d002      	beq.n	8005a4e <UART_SetConfig+0x182>
 8005a48:	2b10      	cmp	r3, #16
 8005a4a:	d008      	beq.n	8005a5e <UART_SetConfig+0x192>
 8005a4c:	e00f      	b.n	8005a6e <UART_SetConfig+0x1a2>
 8005a4e:	2300      	movs	r3, #0
 8005a50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a54:	e0ad      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005a56:	2302      	movs	r3, #2
 8005a58:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a5c:	e0a9      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005a5e:	2304      	movs	r3, #4
 8005a60:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a64:	e0a5      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005a66:	2308      	movs	r3, #8
 8005a68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a6c:	e0a1      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005a6e:	2310      	movs	r3, #16
 8005a70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a74:	e09d      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a4a      	ldr	r2, [pc, #296]	@ (8005ba4 <UART_SetConfig+0x2d8>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d125      	bne.n	8005acc <UART_SetConfig+0x200>
 8005a80:	4b45      	ldr	r3, [pc, #276]	@ (8005b98 <UART_SetConfig+0x2cc>)
 8005a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a86:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005a8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a8c:	d016      	beq.n	8005abc <UART_SetConfig+0x1f0>
 8005a8e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a90:	d818      	bhi.n	8005ac4 <UART_SetConfig+0x1f8>
 8005a92:	2b80      	cmp	r3, #128	@ 0x80
 8005a94:	d00a      	beq.n	8005aac <UART_SetConfig+0x1e0>
 8005a96:	2b80      	cmp	r3, #128	@ 0x80
 8005a98:	d814      	bhi.n	8005ac4 <UART_SetConfig+0x1f8>
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d002      	beq.n	8005aa4 <UART_SetConfig+0x1d8>
 8005a9e:	2b40      	cmp	r3, #64	@ 0x40
 8005aa0:	d008      	beq.n	8005ab4 <UART_SetConfig+0x1e8>
 8005aa2:	e00f      	b.n	8005ac4 <UART_SetConfig+0x1f8>
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005aaa:	e082      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005aac:	2302      	movs	r3, #2
 8005aae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ab2:	e07e      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005ab4:	2304      	movs	r3, #4
 8005ab6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005aba:	e07a      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005abc:	2308      	movs	r3, #8
 8005abe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ac2:	e076      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005ac4:	2310      	movs	r3, #16
 8005ac6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005aca:	e072      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a35      	ldr	r2, [pc, #212]	@ (8005ba8 <UART_SetConfig+0x2dc>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d12a      	bne.n	8005b2c <UART_SetConfig+0x260>
 8005ad6:	4b30      	ldr	r3, [pc, #192]	@ (8005b98 <UART_SetConfig+0x2cc>)
 8005ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005adc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ae0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ae4:	d01a      	beq.n	8005b1c <UART_SetConfig+0x250>
 8005ae6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005aea:	d81b      	bhi.n	8005b24 <UART_SetConfig+0x258>
 8005aec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005af0:	d00c      	beq.n	8005b0c <UART_SetConfig+0x240>
 8005af2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005af6:	d815      	bhi.n	8005b24 <UART_SetConfig+0x258>
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d003      	beq.n	8005b04 <UART_SetConfig+0x238>
 8005afc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b00:	d008      	beq.n	8005b14 <UART_SetConfig+0x248>
 8005b02:	e00f      	b.n	8005b24 <UART_SetConfig+0x258>
 8005b04:	2300      	movs	r3, #0
 8005b06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b0a:	e052      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005b0c:	2302      	movs	r3, #2
 8005b0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b12:	e04e      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005b14:	2304      	movs	r3, #4
 8005b16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b1a:	e04a      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005b1c:	2308      	movs	r3, #8
 8005b1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b22:	e046      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005b24:	2310      	movs	r3, #16
 8005b26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b2a:	e042      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a17      	ldr	r2, [pc, #92]	@ (8005b90 <UART_SetConfig+0x2c4>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d13a      	bne.n	8005bac <UART_SetConfig+0x2e0>
 8005b36:	4b18      	ldr	r3, [pc, #96]	@ (8005b98 <UART_SetConfig+0x2cc>)
 8005b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b3c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005b40:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b44:	d01a      	beq.n	8005b7c <UART_SetConfig+0x2b0>
 8005b46:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b4a:	d81b      	bhi.n	8005b84 <UART_SetConfig+0x2b8>
 8005b4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b50:	d00c      	beq.n	8005b6c <UART_SetConfig+0x2a0>
 8005b52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b56:	d815      	bhi.n	8005b84 <UART_SetConfig+0x2b8>
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d003      	beq.n	8005b64 <UART_SetConfig+0x298>
 8005b5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b60:	d008      	beq.n	8005b74 <UART_SetConfig+0x2a8>
 8005b62:	e00f      	b.n	8005b84 <UART_SetConfig+0x2b8>
 8005b64:	2300      	movs	r3, #0
 8005b66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b6a:	e022      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b72:	e01e      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005b74:	2304      	movs	r3, #4
 8005b76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b7a:	e01a      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005b7c:	2308      	movs	r3, #8
 8005b7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b82:	e016      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005b84:	2310      	movs	r3, #16
 8005b86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b8a:	e012      	b.n	8005bb2 <UART_SetConfig+0x2e6>
 8005b8c:	efff69f3 	.word	0xefff69f3
 8005b90:	40008000 	.word	0x40008000
 8005b94:	40013800 	.word	0x40013800
 8005b98:	40021000 	.word	0x40021000
 8005b9c:	40004400 	.word	0x40004400
 8005ba0:	40004800 	.word	0x40004800
 8005ba4:	40004c00 	.word	0x40004c00
 8005ba8:	40005000 	.word	0x40005000
 8005bac:	2310      	movs	r3, #16
 8005bae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a9f      	ldr	r2, [pc, #636]	@ (8005e34 <UART_SetConfig+0x568>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d17a      	bne.n	8005cb2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005bbc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005bc0:	2b08      	cmp	r3, #8
 8005bc2:	d824      	bhi.n	8005c0e <UART_SetConfig+0x342>
 8005bc4:	a201      	add	r2, pc, #4	@ (adr r2, 8005bcc <UART_SetConfig+0x300>)
 8005bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bca:	bf00      	nop
 8005bcc:	08005bf1 	.word	0x08005bf1
 8005bd0:	08005c0f 	.word	0x08005c0f
 8005bd4:	08005bf9 	.word	0x08005bf9
 8005bd8:	08005c0f 	.word	0x08005c0f
 8005bdc:	08005bff 	.word	0x08005bff
 8005be0:	08005c0f 	.word	0x08005c0f
 8005be4:	08005c0f 	.word	0x08005c0f
 8005be8:	08005c0f 	.word	0x08005c0f
 8005bec:	08005c07 	.word	0x08005c07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bf0:	f7fe fa54 	bl	800409c <HAL_RCC_GetPCLK1Freq>
 8005bf4:	61f8      	str	r0, [r7, #28]
        break;
 8005bf6:	e010      	b.n	8005c1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bf8:	4b8f      	ldr	r3, [pc, #572]	@ (8005e38 <UART_SetConfig+0x56c>)
 8005bfa:	61fb      	str	r3, [r7, #28]
        break;
 8005bfc:	e00d      	b.n	8005c1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bfe:	f7fe f9b5 	bl	8003f6c <HAL_RCC_GetSysClockFreq>
 8005c02:	61f8      	str	r0, [r7, #28]
        break;
 8005c04:	e009      	b.n	8005c1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c0a:	61fb      	str	r3, [r7, #28]
        break;
 8005c0c:	e005      	b.n	8005c1a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005c18:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	f000 80fb 	beq.w	8005e18 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	685a      	ldr	r2, [r3, #4]
 8005c26:	4613      	mov	r3, r2
 8005c28:	005b      	lsls	r3, r3, #1
 8005c2a:	4413      	add	r3, r2
 8005c2c:	69fa      	ldr	r2, [r7, #28]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d305      	bcc.n	8005c3e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005c38:	69fa      	ldr	r2, [r7, #28]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d903      	bls.n	8005c46 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005c44:	e0e8      	b.n	8005e18 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	461c      	mov	r4, r3
 8005c4c:	4615      	mov	r5, r2
 8005c4e:	f04f 0200 	mov.w	r2, #0
 8005c52:	f04f 0300 	mov.w	r3, #0
 8005c56:	022b      	lsls	r3, r5, #8
 8005c58:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005c5c:	0222      	lsls	r2, r4, #8
 8005c5e:	68f9      	ldr	r1, [r7, #12]
 8005c60:	6849      	ldr	r1, [r1, #4]
 8005c62:	0849      	lsrs	r1, r1, #1
 8005c64:	2000      	movs	r0, #0
 8005c66:	4688      	mov	r8, r1
 8005c68:	4681      	mov	r9, r0
 8005c6a:	eb12 0a08 	adds.w	sl, r2, r8
 8005c6e:	eb43 0b09 	adc.w	fp, r3, r9
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	603b      	str	r3, [r7, #0]
 8005c7a:	607a      	str	r2, [r7, #4]
 8005c7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c80:	4650      	mov	r0, sl
 8005c82:	4659      	mov	r1, fp
 8005c84:	f7fa fab4 	bl	80001f0 <__aeabi_uldivmod>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c96:	d308      	bcc.n	8005caa <UART_SetConfig+0x3de>
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c9e:	d204      	bcs.n	8005caa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	60da      	str	r2, [r3, #12]
 8005ca8:	e0b6      	b.n	8005e18 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005cb0:	e0b2      	b.n	8005e18 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	69db      	ldr	r3, [r3, #28]
 8005cb6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cba:	d15e      	bne.n	8005d7a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005cbc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005cc0:	2b08      	cmp	r3, #8
 8005cc2:	d828      	bhi.n	8005d16 <UART_SetConfig+0x44a>
 8005cc4:	a201      	add	r2, pc, #4	@ (adr r2, 8005ccc <UART_SetConfig+0x400>)
 8005cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cca:	bf00      	nop
 8005ccc:	08005cf1 	.word	0x08005cf1
 8005cd0:	08005cf9 	.word	0x08005cf9
 8005cd4:	08005d01 	.word	0x08005d01
 8005cd8:	08005d17 	.word	0x08005d17
 8005cdc:	08005d07 	.word	0x08005d07
 8005ce0:	08005d17 	.word	0x08005d17
 8005ce4:	08005d17 	.word	0x08005d17
 8005ce8:	08005d17 	.word	0x08005d17
 8005cec:	08005d0f 	.word	0x08005d0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cf0:	f7fe f9d4 	bl	800409c <HAL_RCC_GetPCLK1Freq>
 8005cf4:	61f8      	str	r0, [r7, #28]
        break;
 8005cf6:	e014      	b.n	8005d22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cf8:	f7fe f9e6 	bl	80040c8 <HAL_RCC_GetPCLK2Freq>
 8005cfc:	61f8      	str	r0, [r7, #28]
        break;
 8005cfe:	e010      	b.n	8005d22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d00:	4b4d      	ldr	r3, [pc, #308]	@ (8005e38 <UART_SetConfig+0x56c>)
 8005d02:	61fb      	str	r3, [r7, #28]
        break;
 8005d04:	e00d      	b.n	8005d22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d06:	f7fe f931 	bl	8003f6c <HAL_RCC_GetSysClockFreq>
 8005d0a:	61f8      	str	r0, [r7, #28]
        break;
 8005d0c:	e009      	b.n	8005d22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d12:	61fb      	str	r3, [r7, #28]
        break;
 8005d14:	e005      	b.n	8005d22 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005d16:	2300      	movs	r3, #0
 8005d18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005d20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d077      	beq.n	8005e18 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	005a      	lsls	r2, r3, #1
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	085b      	lsrs	r3, r3, #1
 8005d32:	441a      	add	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d3c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	2b0f      	cmp	r3, #15
 8005d42:	d916      	bls.n	8005d72 <UART_SetConfig+0x4a6>
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d4a:	d212      	bcs.n	8005d72 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	f023 030f 	bic.w	r3, r3, #15
 8005d54:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	085b      	lsrs	r3, r3, #1
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	f003 0307 	and.w	r3, r3, #7
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	8afb      	ldrh	r3, [r7, #22]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	8afa      	ldrh	r2, [r7, #22]
 8005d6e:	60da      	str	r2, [r3, #12]
 8005d70:	e052      	b.n	8005e18 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005d78:	e04e      	b.n	8005e18 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d7a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005d7e:	2b08      	cmp	r3, #8
 8005d80:	d827      	bhi.n	8005dd2 <UART_SetConfig+0x506>
 8005d82:	a201      	add	r2, pc, #4	@ (adr r2, 8005d88 <UART_SetConfig+0x4bc>)
 8005d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d88:	08005dad 	.word	0x08005dad
 8005d8c:	08005db5 	.word	0x08005db5
 8005d90:	08005dbd 	.word	0x08005dbd
 8005d94:	08005dd3 	.word	0x08005dd3
 8005d98:	08005dc3 	.word	0x08005dc3
 8005d9c:	08005dd3 	.word	0x08005dd3
 8005da0:	08005dd3 	.word	0x08005dd3
 8005da4:	08005dd3 	.word	0x08005dd3
 8005da8:	08005dcb 	.word	0x08005dcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dac:	f7fe f976 	bl	800409c <HAL_RCC_GetPCLK1Freq>
 8005db0:	61f8      	str	r0, [r7, #28]
        break;
 8005db2:	e014      	b.n	8005dde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005db4:	f7fe f988 	bl	80040c8 <HAL_RCC_GetPCLK2Freq>
 8005db8:	61f8      	str	r0, [r7, #28]
        break;
 8005dba:	e010      	b.n	8005dde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005dbc:	4b1e      	ldr	r3, [pc, #120]	@ (8005e38 <UART_SetConfig+0x56c>)
 8005dbe:	61fb      	str	r3, [r7, #28]
        break;
 8005dc0:	e00d      	b.n	8005dde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dc2:	f7fe f8d3 	bl	8003f6c <HAL_RCC_GetSysClockFreq>
 8005dc6:	61f8      	str	r0, [r7, #28]
        break;
 8005dc8:	e009      	b.n	8005dde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005dce:	61fb      	str	r3, [r7, #28]
        break;
 8005dd0:	e005      	b.n	8005dde <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005ddc:	bf00      	nop
    }

    if (pclk != 0U)
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d019      	beq.n	8005e18 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	085a      	lsrs	r2, r3, #1
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	441a      	add	r2, r3
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005df6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	2b0f      	cmp	r3, #15
 8005dfc:	d909      	bls.n	8005e12 <UART_SetConfig+0x546>
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e04:	d205      	bcs.n	8005e12 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	60da      	str	r2, [r3, #12]
 8005e10:	e002      	b.n	8005e18 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005e24:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3728      	adds	r7, #40	@ 0x28
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e32:	bf00      	nop
 8005e34:	40008000 	.word	0x40008000
 8005e38:	00f42400 	.word	0x00f42400

08005e3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e48:	f003 0308 	and.w	r3, r3, #8
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d00a      	beq.n	8005e66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	430a      	orrs	r2, r1
 8005e64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e6a:	f003 0301 	and.w	r3, r3, #1
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00a      	beq.n	8005e88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	430a      	orrs	r2, r1
 8005e86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e8c:	f003 0302 	and.w	r3, r3, #2
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00a      	beq.n	8005eaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eae:	f003 0304 	and.w	r3, r3, #4
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00a      	beq.n	8005ecc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	430a      	orrs	r2, r1
 8005eca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed0:	f003 0310 	and.w	r3, r3, #16
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d00a      	beq.n	8005eee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	430a      	orrs	r2, r1
 8005eec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef2:	f003 0320 	and.w	r3, r3, #32
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d00a      	beq.n	8005f10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	430a      	orrs	r2, r1
 8005f0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d01a      	beq.n	8005f52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f3a:	d10a      	bne.n	8005f52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	430a      	orrs	r2, r1
 8005f50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00a      	beq.n	8005f74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	430a      	orrs	r2, r1
 8005f72:	605a      	str	r2, [r3, #4]
  }
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b098      	sub	sp, #96	@ 0x60
 8005f84:	af02      	add	r7, sp, #8
 8005f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f90:	f7fb f996 	bl	80012c0 <HAL_GetTick>
 8005f94:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 0308 	and.w	r3, r3, #8
 8005fa0:	2b08      	cmp	r3, #8
 8005fa2:	d12e      	bne.n	8006002 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fa4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005fa8:	9300      	str	r3, [sp, #0]
 8005faa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fac:	2200      	movs	r2, #0
 8005fae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 f88c 	bl	80060d0 <UART_WaitOnFlagUntilTimeout>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d021      	beq.n	8006002 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fc6:	e853 3f00 	ldrex	r3, [r3]
 8005fca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005fcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fd2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	461a      	mov	r2, r3
 8005fda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fdc:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fde:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005fe2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005fe4:	e841 2300 	strex	r3, r2, [r1]
 8005fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005fea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1e6      	bne.n	8005fbe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2220      	movs	r2, #32
 8005ff4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e062      	b.n	80060c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0304 	and.w	r3, r3, #4
 800600c:	2b04      	cmp	r3, #4
 800600e:	d149      	bne.n	80060a4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006010:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006014:	9300      	str	r3, [sp, #0]
 8006016:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006018:	2200      	movs	r2, #0
 800601a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 f856 	bl	80060d0 <UART_WaitOnFlagUntilTimeout>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d03c      	beq.n	80060a4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006032:	e853 3f00 	ldrex	r3, [r3]
 8006036:	623b      	str	r3, [r7, #32]
   return(result);
 8006038:	6a3b      	ldr	r3, [r7, #32]
 800603a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800603e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	461a      	mov	r2, r3
 8006046:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006048:	633b      	str	r3, [r7, #48]	@ 0x30
 800604a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800604e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006050:	e841 2300 	strex	r3, r2, [r1]
 8006054:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1e6      	bne.n	800602a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	3308      	adds	r3, #8
 8006062:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	e853 3f00 	ldrex	r3, [r3]
 800606a:	60fb      	str	r3, [r7, #12]
   return(result);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f023 0301 	bic.w	r3, r3, #1
 8006072:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	3308      	adds	r3, #8
 800607a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800607c:	61fa      	str	r2, [r7, #28]
 800607e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006080:	69b9      	ldr	r1, [r7, #24]
 8006082:	69fa      	ldr	r2, [r7, #28]
 8006084:	e841 2300 	strex	r3, r2, [r1]
 8006088:	617b      	str	r3, [r7, #20]
   return(result);
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d1e5      	bne.n	800605c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2220      	movs	r2, #32
 8006094:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060a0:	2303      	movs	r3, #3
 80060a2:	e011      	b.n	80060c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2220      	movs	r2, #32
 80060a8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2220      	movs	r2, #32
 80060ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3758      	adds	r7, #88	@ 0x58
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	603b      	str	r3, [r7, #0]
 80060dc:	4613      	mov	r3, r2
 80060de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060e0:	e04f      	b.n	8006182 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e8:	d04b      	beq.n	8006182 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060ea:	f7fb f8e9 	bl	80012c0 <HAL_GetTick>
 80060ee:	4602      	mov	r2, r0
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	69ba      	ldr	r2, [r7, #24]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d302      	bcc.n	8006100 <UART_WaitOnFlagUntilTimeout+0x30>
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d101      	bne.n	8006104 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006100:	2303      	movs	r3, #3
 8006102:	e04e      	b.n	80061a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 0304 	and.w	r3, r3, #4
 800610e:	2b00      	cmp	r3, #0
 8006110:	d037      	beq.n	8006182 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	2b80      	cmp	r3, #128	@ 0x80
 8006116:	d034      	beq.n	8006182 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	2b40      	cmp	r3, #64	@ 0x40
 800611c:	d031      	beq.n	8006182 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	69db      	ldr	r3, [r3, #28]
 8006124:	f003 0308 	and.w	r3, r3, #8
 8006128:	2b08      	cmp	r3, #8
 800612a:	d110      	bne.n	800614e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2208      	movs	r2, #8
 8006132:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	f000 f8ff 	bl	8006338 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2208      	movs	r2, #8
 800613e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e029      	b.n	80061a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	69db      	ldr	r3, [r3, #28]
 8006154:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006158:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800615c:	d111      	bne.n	8006182 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006166:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f000 f8e5 	bl	8006338 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2220      	movs	r2, #32
 8006172:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e00f      	b.n	80061a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	69da      	ldr	r2, [r3, #28]
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	4013      	ands	r3, r2
 800618c:	68ba      	ldr	r2, [r7, #8]
 800618e:	429a      	cmp	r2, r3
 8006190:	bf0c      	ite	eq
 8006192:	2301      	moveq	r3, #1
 8006194:	2300      	movne	r3, #0
 8006196:	b2db      	uxtb	r3, r3
 8006198:	461a      	mov	r2, r3
 800619a:	79fb      	ldrb	r3, [r7, #7]
 800619c:	429a      	cmp	r2, r3
 800619e:	d0a0      	beq.n	80060e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
	...

080061ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b097      	sub	sp, #92	@ 0x5c
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	4613      	mov	r3, r2
 80061b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	68ba      	ldr	r2, [r7, #8]
 80061be:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	88fa      	ldrh	r2, [r7, #6]
 80061c4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	88fa      	ldrh	r2, [r7, #6]
 80061cc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2200      	movs	r2, #0
 80061d4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061de:	d10e      	bne.n	80061fe <UART_Start_Receive_IT+0x52>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d105      	bne.n	80061f4 <UART_Start_Receive_IT+0x48>
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80061ee:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80061f2:	e02d      	b.n	8006250 <UART_Start_Receive_IT+0xa4>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	22ff      	movs	r2, #255	@ 0xff
 80061f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80061fc:	e028      	b.n	8006250 <UART_Start_Receive_IT+0xa4>
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d10d      	bne.n	8006222 <UART_Start_Receive_IT+0x76>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d104      	bne.n	8006218 <UART_Start_Receive_IT+0x6c>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	22ff      	movs	r2, #255	@ 0xff
 8006212:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006216:	e01b      	b.n	8006250 <UART_Start_Receive_IT+0xa4>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	227f      	movs	r2, #127	@ 0x7f
 800621c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006220:	e016      	b.n	8006250 <UART_Start_Receive_IT+0xa4>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800622a:	d10d      	bne.n	8006248 <UART_Start_Receive_IT+0x9c>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	691b      	ldr	r3, [r3, #16]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d104      	bne.n	800623e <UART_Start_Receive_IT+0x92>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	227f      	movs	r2, #127	@ 0x7f
 8006238:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800623c:	e008      	b.n	8006250 <UART_Start_Receive_IT+0xa4>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	223f      	movs	r2, #63	@ 0x3f
 8006242:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006246:	e003      	b.n	8006250 <UART_Start_Receive_IT+0xa4>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2222      	movs	r2, #34	@ 0x22
 800625c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	3308      	adds	r3, #8
 8006266:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006268:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800626a:	e853 3f00 	ldrex	r3, [r3]
 800626e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006272:	f043 0301 	orr.w	r3, r3, #1
 8006276:	657b      	str	r3, [r7, #84]	@ 0x54
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	3308      	adds	r3, #8
 800627e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006280:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006282:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006284:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006286:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006288:	e841 2300 	strex	r3, r2, [r1]
 800628c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800628e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1e5      	bne.n	8006260 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800629c:	d107      	bne.n	80062ae <UART_Start_Receive_IT+0x102>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d103      	bne.n	80062ae <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	4a21      	ldr	r2, [pc, #132]	@ (8006330 <UART_Start_Receive_IT+0x184>)
 80062aa:	669a      	str	r2, [r3, #104]	@ 0x68
 80062ac:	e002      	b.n	80062b4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	4a20      	ldr	r2, [pc, #128]	@ (8006334 <UART_Start_Receive_IT+0x188>)
 80062b2:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d019      	beq.n	80062f0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062c4:	e853 3f00 	ldrex	r3, [r3]
 80062c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80062ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062cc:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80062d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	461a      	mov	r2, r3
 80062d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062da:	637b      	str	r3, [r7, #52]	@ 0x34
 80062dc:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062de:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80062e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80062e2:	e841 2300 	strex	r3, r2, [r1]
 80062e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80062e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d1e6      	bne.n	80062bc <UART_Start_Receive_IT+0x110>
 80062ee:	e018      	b.n	8006322 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	e853 3f00 	ldrex	r3, [r3]
 80062fc:	613b      	str	r3, [r7, #16]
   return(result);
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	f043 0320 	orr.w	r3, r3, #32
 8006304:	653b      	str	r3, [r7, #80]	@ 0x50
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	461a      	mov	r2, r3
 800630c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800630e:	623b      	str	r3, [r7, #32]
 8006310:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006312:	69f9      	ldr	r1, [r7, #28]
 8006314:	6a3a      	ldr	r2, [r7, #32]
 8006316:	e841 2300 	strex	r3, r2, [r1]
 800631a:	61bb      	str	r3, [r7, #24]
   return(result);
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1e6      	bne.n	80062f0 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	375c      	adds	r7, #92	@ 0x5c
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr
 8006330:	0800663d 	.word	0x0800663d
 8006334:	08006481 	.word	0x08006481

08006338 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006338:	b480      	push	{r7}
 800633a:	b095      	sub	sp, #84	@ 0x54
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006348:	e853 3f00 	ldrex	r3, [r3]
 800634c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800634e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006350:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006354:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	461a      	mov	r2, r3
 800635c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800635e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006360:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006362:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006364:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006366:	e841 2300 	strex	r3, r2, [r1]
 800636a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800636c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800636e:	2b00      	cmp	r3, #0
 8006370:	d1e6      	bne.n	8006340 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	3308      	adds	r3, #8
 8006378:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637a:	6a3b      	ldr	r3, [r7, #32]
 800637c:	e853 3f00 	ldrex	r3, [r3]
 8006380:	61fb      	str	r3, [r7, #28]
   return(result);
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	f023 0301 	bic.w	r3, r3, #1
 8006388:	64bb      	str	r3, [r7, #72]	@ 0x48
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	3308      	adds	r3, #8
 8006390:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006392:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006394:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006396:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006398:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800639a:	e841 2300 	strex	r3, r2, [r1]
 800639e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80063a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1e5      	bne.n	8006372 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d118      	bne.n	80063e0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	e853 3f00 	ldrex	r3, [r3]
 80063ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	f023 0310 	bic.w	r3, r3, #16
 80063c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	461a      	mov	r2, r3
 80063ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063cc:	61bb      	str	r3, [r7, #24]
 80063ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d0:	6979      	ldr	r1, [r7, #20]
 80063d2:	69ba      	ldr	r2, [r7, #24]
 80063d4:	e841 2300 	strex	r3, r2, [r1]
 80063d8:	613b      	str	r3, [r7, #16]
   return(result);
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d1e6      	bne.n	80063ae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2220      	movs	r2, #32
 80063e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80063f4:	bf00      	nop
 80063f6:	3754      	adds	r7, #84	@ 0x54
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800640c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2200      	movs	r2, #0
 8006412:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2200      	movs	r2, #0
 800641a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800641e:	68f8      	ldr	r0, [r7, #12]
 8006420:	f7ff fa3e 	bl	80058a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006424:	bf00      	nop
 8006426:	3710      	adds	r7, #16
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b088      	sub	sp, #32
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	e853 3f00 	ldrex	r3, [r3]
 8006440:	60bb      	str	r3, [r7, #8]
   return(result);
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006448:	61fb      	str	r3, [r7, #28]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	461a      	mov	r2, r3
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	61bb      	str	r3, [r7, #24]
 8006454:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006456:	6979      	ldr	r1, [r7, #20]
 8006458:	69ba      	ldr	r2, [r7, #24]
 800645a:	e841 2300 	strex	r3, r2, [r1]
 800645e:	613b      	str	r3, [r7, #16]
   return(result);
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1e6      	bne.n	8006434 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2220      	movs	r2, #32
 800646a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f7ff fa00 	bl	8005878 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006478:	bf00      	nop
 800647a:	3720      	adds	r7, #32
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b09c      	sub	sp, #112	@ 0x70
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800648e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006498:	2b22      	cmp	r3, #34	@ 0x22
 800649a:	f040 80be 	bne.w	800661a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80064a4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80064a8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80064ac:	b2d9      	uxtb	r1, r3
 80064ae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80064b2:	b2da      	uxtb	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064b8:	400a      	ands	r2, r1
 80064ba:	b2d2      	uxtb	r2, r2
 80064bc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064c2:	1c5a      	adds	r2, r3, #1
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	3b01      	subs	r3, #1
 80064d2:	b29a      	uxth	r2, r3
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	f040 80a3 	bne.w	800662e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064f0:	e853 3f00 	ldrex	r3, [r3]
 80064f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80064f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	461a      	mov	r2, r3
 8006504:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006506:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006508:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800650c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800650e:	e841 2300 	strex	r3, r2, [r1]
 8006512:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006514:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1e6      	bne.n	80064e8 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	3308      	adds	r3, #8
 8006520:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006524:	e853 3f00 	ldrex	r3, [r3]
 8006528:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800652a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800652c:	f023 0301 	bic.w	r3, r3, #1
 8006530:	667b      	str	r3, [r7, #100]	@ 0x64
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	3308      	adds	r3, #8
 8006538:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800653a:	647a      	str	r2, [r7, #68]	@ 0x44
 800653c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006540:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006542:	e841 2300 	strex	r3, r2, [r1]
 8006546:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006548:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1e5      	bne.n	800651a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2220      	movs	r2, #32
 8006552:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a34      	ldr	r2, [pc, #208]	@ (8006638 <UART_RxISR_8BIT+0x1b8>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d01f      	beq.n	80065ac <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006576:	2b00      	cmp	r3, #0
 8006578:	d018      	beq.n	80065ac <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006582:	e853 3f00 	ldrex	r3, [r3]
 8006586:	623b      	str	r3, [r7, #32]
   return(result);
 8006588:	6a3b      	ldr	r3, [r7, #32]
 800658a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800658e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	461a      	mov	r2, r3
 8006596:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006598:	633b      	str	r3, [r7, #48]	@ 0x30
 800659a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800659c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800659e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065a0:	e841 2300 	strex	r3, r2, [r1]
 80065a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80065a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1e6      	bne.n	800657a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d12e      	bne.n	8006612 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	e853 3f00 	ldrex	r3, [r3]
 80065c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f023 0310 	bic.w	r3, r3, #16
 80065ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	461a      	mov	r2, r3
 80065d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065d8:	61fb      	str	r3, [r7, #28]
 80065da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065dc:	69b9      	ldr	r1, [r7, #24]
 80065de:	69fa      	ldr	r2, [r7, #28]
 80065e0:	e841 2300 	strex	r3, r2, [r1]
 80065e4:	617b      	str	r3, [r7, #20]
   return(result);
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1e6      	bne.n	80065ba <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	69db      	ldr	r3, [r3, #28]
 80065f2:	f003 0310 	and.w	r3, r3, #16
 80065f6:	2b10      	cmp	r3, #16
 80065f8:	d103      	bne.n	8006602 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2210      	movs	r2, #16
 8006600:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006608:	4619      	mov	r1, r3
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f7ff f952 	bl	80058b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006610:	e00d      	b.n	800662e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f7ff f93a 	bl	800588c <HAL_UART_RxCpltCallback>
}
 8006618:	e009      	b.n	800662e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	8b1b      	ldrh	r3, [r3, #24]
 8006620:	b29a      	uxth	r2, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f042 0208 	orr.w	r2, r2, #8
 800662a:	b292      	uxth	r2, r2
 800662c:	831a      	strh	r2, [r3, #24]
}
 800662e:	bf00      	nop
 8006630:	3770      	adds	r7, #112	@ 0x70
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	40008000 	.word	0x40008000

0800663c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b09c      	sub	sp, #112	@ 0x70
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800664a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006654:	2b22      	cmp	r3, #34	@ 0x22
 8006656:	f040 80be 	bne.w	80067d6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006660:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006668:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800666a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800666e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006672:	4013      	ands	r3, r2
 8006674:	b29a      	uxth	r2, r3
 8006676:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006678:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800667e:	1c9a      	adds	r2, r3, #2
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800668a:	b29b      	uxth	r3, r3
 800668c:	3b01      	subs	r3, #1
 800668e:	b29a      	uxth	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800669c:	b29b      	uxth	r3, r3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	f040 80a3 	bne.w	80067ea <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066ac:	e853 3f00 	ldrex	r3, [r3]
 80066b0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80066b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066b8:	667b      	str	r3, [r7, #100]	@ 0x64
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	461a      	mov	r2, r3
 80066c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80066c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80066c4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80066c8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80066ca:	e841 2300 	strex	r3, r2, [r1]
 80066ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80066d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d1e6      	bne.n	80066a4 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	3308      	adds	r3, #8
 80066dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066e0:	e853 3f00 	ldrex	r3, [r3]
 80066e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80066e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e8:	f023 0301 	bic.w	r3, r3, #1
 80066ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	3308      	adds	r3, #8
 80066f4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80066f6:	643a      	str	r2, [r7, #64]	@ 0x40
 80066f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80066fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80066fe:	e841 2300 	strex	r3, r2, [r1]
 8006702:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006706:	2b00      	cmp	r3, #0
 8006708:	d1e5      	bne.n	80066d6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2220      	movs	r2, #32
 800670e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a34      	ldr	r2, [pc, #208]	@ (80067f4 <UART_RxISR_16BIT+0x1b8>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d01f      	beq.n	8006768 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006732:	2b00      	cmp	r3, #0
 8006734:	d018      	beq.n	8006768 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673c:	6a3b      	ldr	r3, [r7, #32]
 800673e:	e853 3f00 	ldrex	r3, [r3]
 8006742:	61fb      	str	r3, [r7, #28]
   return(result);
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800674a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	461a      	mov	r2, r3
 8006752:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006754:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006756:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006758:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800675a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800675c:	e841 2300 	strex	r3, r2, [r1]
 8006760:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006764:	2b00      	cmp	r3, #0
 8006766:	d1e6      	bne.n	8006736 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800676c:	2b01      	cmp	r3, #1
 800676e:	d12e      	bne.n	80067ce <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	e853 3f00 	ldrex	r3, [r3]
 8006782:	60bb      	str	r3, [r7, #8]
   return(result);
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	f023 0310 	bic.w	r3, r3, #16
 800678a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	461a      	mov	r2, r3
 8006792:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006794:	61bb      	str	r3, [r7, #24]
 8006796:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006798:	6979      	ldr	r1, [r7, #20]
 800679a:	69ba      	ldr	r2, [r7, #24]
 800679c:	e841 2300 	strex	r3, r2, [r1]
 80067a0:	613b      	str	r3, [r7, #16]
   return(result);
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d1e6      	bne.n	8006776 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	69db      	ldr	r3, [r3, #28]
 80067ae:	f003 0310 	and.w	r3, r3, #16
 80067b2:	2b10      	cmp	r3, #16
 80067b4:	d103      	bne.n	80067be <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2210      	movs	r2, #16
 80067bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80067c4:	4619      	mov	r1, r3
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f7ff f874 	bl	80058b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80067cc:	e00d      	b.n	80067ea <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f7ff f85c 	bl	800588c <HAL_UART_RxCpltCallback>
}
 80067d4:	e009      	b.n	80067ea <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	8b1b      	ldrh	r3, [r3, #24]
 80067dc:	b29a      	uxth	r2, r3
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f042 0208 	orr.w	r2, r2, #8
 80067e6:	b292      	uxth	r2, r2
 80067e8:	831a      	strh	r2, [r3, #24]
}
 80067ea:	bf00      	nop
 80067ec:	3770      	adds	r7, #112	@ 0x70
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop
 80067f4:	40008000 	.word	0x40008000

080067f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006800:	bf00      	nop
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <__NVIC_SetPriority>:
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	4603      	mov	r3, r0
 8006814:	6039      	str	r1, [r7, #0]
 8006816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800681c:	2b00      	cmp	r3, #0
 800681e:	db0a      	blt.n	8006836 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	b2da      	uxtb	r2, r3
 8006824:	490c      	ldr	r1, [pc, #48]	@ (8006858 <__NVIC_SetPriority+0x4c>)
 8006826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800682a:	0112      	lsls	r2, r2, #4
 800682c:	b2d2      	uxtb	r2, r2
 800682e:	440b      	add	r3, r1
 8006830:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006834:	e00a      	b.n	800684c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	b2da      	uxtb	r2, r3
 800683a:	4908      	ldr	r1, [pc, #32]	@ (800685c <__NVIC_SetPriority+0x50>)
 800683c:	79fb      	ldrb	r3, [r7, #7]
 800683e:	f003 030f 	and.w	r3, r3, #15
 8006842:	3b04      	subs	r3, #4
 8006844:	0112      	lsls	r2, r2, #4
 8006846:	b2d2      	uxtb	r2, r2
 8006848:	440b      	add	r3, r1
 800684a:	761a      	strb	r2, [r3, #24]
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr
 8006858:	e000e100 	.word	0xe000e100
 800685c:	e000ed00 	.word	0xe000ed00

08006860 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006860:	b580      	push	{r7, lr}
 8006862:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006864:	4b05      	ldr	r3, [pc, #20]	@ (800687c <SysTick_Handler+0x1c>)
 8006866:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006868:	f001 fd46 	bl	80082f8 <xTaskGetSchedulerState>
 800686c:	4603      	mov	r3, r0
 800686e:	2b01      	cmp	r3, #1
 8006870:	d001      	beq.n	8006876 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006872:	f002 fb41 	bl	8008ef8 <xPortSysTickHandler>
  }
}
 8006876:	bf00      	nop
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	e000e010 	.word	0xe000e010

08006880 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006880:	b580      	push	{r7, lr}
 8006882:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006884:	2100      	movs	r1, #0
 8006886:	f06f 0004 	mvn.w	r0, #4
 800688a:	f7ff ffbf 	bl	800680c <__NVIC_SetPriority>
#endif
}
 800688e:	bf00      	nop
 8006890:	bd80      	pop	{r7, pc}
	...

08006894 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800689a:	f3ef 8305 	mrs	r3, IPSR
 800689e:	603b      	str	r3, [r7, #0]
  return(result);
 80068a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d003      	beq.n	80068ae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80068a6:	f06f 0305 	mvn.w	r3, #5
 80068aa:	607b      	str	r3, [r7, #4]
 80068ac:	e00c      	b.n	80068c8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80068ae:	4b0a      	ldr	r3, [pc, #40]	@ (80068d8 <osKernelInitialize+0x44>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d105      	bne.n	80068c2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80068b6:	4b08      	ldr	r3, [pc, #32]	@ (80068d8 <osKernelInitialize+0x44>)
 80068b8:	2201      	movs	r2, #1
 80068ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80068bc:	2300      	movs	r3, #0
 80068be:	607b      	str	r3, [r7, #4]
 80068c0:	e002      	b.n	80068c8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80068c2:	f04f 33ff 	mov.w	r3, #4294967295
 80068c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80068c8:	687b      	ldr	r3, [r7, #4]
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	370c      	adds	r7, #12
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr
 80068d6:	bf00      	nop
 80068d8:	20000290 	.word	0x20000290

080068dc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068e2:	f3ef 8305 	mrs	r3, IPSR
 80068e6:	603b      	str	r3, [r7, #0]
  return(result);
 80068e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d003      	beq.n	80068f6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80068ee:	f06f 0305 	mvn.w	r3, #5
 80068f2:	607b      	str	r3, [r7, #4]
 80068f4:	e010      	b.n	8006918 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80068f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006924 <osKernelStart+0x48>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d109      	bne.n	8006912 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80068fe:	f7ff ffbf 	bl	8006880 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006902:	4b08      	ldr	r3, [pc, #32]	@ (8006924 <osKernelStart+0x48>)
 8006904:	2202      	movs	r2, #2
 8006906:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006908:	f001 f892 	bl	8007a30 <vTaskStartScheduler>
      stat = osOK;
 800690c:	2300      	movs	r3, #0
 800690e:	607b      	str	r3, [r7, #4]
 8006910:	e002      	b.n	8006918 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006912:	f04f 33ff 	mov.w	r3, #4294967295
 8006916:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006918:	687b      	ldr	r3, [r7, #4]
}
 800691a:	4618      	mov	r0, r3
 800691c:	3708      	adds	r7, #8
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	20000290 	.word	0x20000290

08006928 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006928:	b580      	push	{r7, lr}
 800692a:	b08e      	sub	sp, #56	@ 0x38
 800692c:	af04      	add	r7, sp, #16
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006934:	2300      	movs	r3, #0
 8006936:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006938:	f3ef 8305 	mrs	r3, IPSR
 800693c:	617b      	str	r3, [r7, #20]
  return(result);
 800693e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006940:	2b00      	cmp	r3, #0
 8006942:	d17e      	bne.n	8006a42 <osThreadNew+0x11a>
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d07b      	beq.n	8006a42 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800694a:	2380      	movs	r3, #128	@ 0x80
 800694c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800694e:	2318      	movs	r3, #24
 8006950:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006952:	2300      	movs	r3, #0
 8006954:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006956:	f04f 33ff 	mov.w	r3, #4294967295
 800695a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d045      	beq.n	80069ee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d002      	beq.n	8006970 <osThreadNew+0x48>
        name = attr->name;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	699b      	ldr	r3, [r3, #24]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d002      	beq.n	800697e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	699b      	ldr	r3, [r3, #24]
 800697c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d008      	beq.n	8006996 <osThreadNew+0x6e>
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	2b38      	cmp	r3, #56	@ 0x38
 8006988:	d805      	bhi.n	8006996 <osThreadNew+0x6e>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	f003 0301 	and.w	r3, r3, #1
 8006992:	2b00      	cmp	r3, #0
 8006994:	d001      	beq.n	800699a <osThreadNew+0x72>
        return (NULL);
 8006996:	2300      	movs	r3, #0
 8006998:	e054      	b.n	8006a44 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d003      	beq.n	80069aa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	089b      	lsrs	r3, r3, #2
 80069a8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00e      	beq.n	80069d0 <osThreadNew+0xa8>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	2ba7      	cmp	r3, #167	@ 0xa7
 80069b8:	d90a      	bls.n	80069d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d006      	beq.n	80069d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d002      	beq.n	80069d0 <osThreadNew+0xa8>
        mem = 1;
 80069ca:	2301      	movs	r3, #1
 80069cc:	61bb      	str	r3, [r7, #24]
 80069ce:	e010      	b.n	80069f2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d10c      	bne.n	80069f2 <osThreadNew+0xca>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d108      	bne.n	80069f2 <osThreadNew+0xca>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d104      	bne.n	80069f2 <osThreadNew+0xca>
          mem = 0;
 80069e8:	2300      	movs	r3, #0
 80069ea:	61bb      	str	r3, [r7, #24]
 80069ec:	e001      	b.n	80069f2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80069ee:	2300      	movs	r3, #0
 80069f0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d110      	bne.n	8006a1a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006a00:	9202      	str	r2, [sp, #8]
 8006a02:	9301      	str	r3, [sp, #4]
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	9300      	str	r3, [sp, #0]
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	6a3a      	ldr	r2, [r7, #32]
 8006a0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006a0e:	68f8      	ldr	r0, [r7, #12]
 8006a10:	f000 fe1a 	bl	8007648 <xTaskCreateStatic>
 8006a14:	4603      	mov	r3, r0
 8006a16:	613b      	str	r3, [r7, #16]
 8006a18:	e013      	b.n	8006a42 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d110      	bne.n	8006a42 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006a20:	6a3b      	ldr	r3, [r7, #32]
 8006a22:	b29a      	uxth	r2, r3
 8006a24:	f107 0310 	add.w	r3, r7, #16
 8006a28:	9301      	str	r3, [sp, #4]
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	9300      	str	r3, [sp, #0]
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006a32:	68f8      	ldr	r0, [r7, #12]
 8006a34:	f000 fe68 	bl	8007708 <xTaskCreate>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d001      	beq.n	8006a42 <osThreadNew+0x11a>
            hTask = NULL;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006a42:	693b      	ldr	r3, [r7, #16]
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3728      	adds	r7, #40	@ 0x28
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a54:	f3ef 8305 	mrs	r3, IPSR
 8006a58:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a5a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d003      	beq.n	8006a68 <osDelay+0x1c>
    stat = osErrorISR;
 8006a60:	f06f 0305 	mvn.w	r3, #5
 8006a64:	60fb      	str	r3, [r7, #12]
 8006a66:	e007      	b.n	8006a78 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d002      	beq.n	8006a78 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 ffa6 	bl	80079c4 <vTaskDelay>
    }
  }

  return (stat);
 8006a78:	68fb      	ldr	r3, [r7, #12]
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
	...

08006a84 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	4a07      	ldr	r2, [pc, #28]	@ (8006ab0 <vApplicationGetIdleTaskMemory+0x2c>)
 8006a94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	4a06      	ldr	r2, [pc, #24]	@ (8006ab4 <vApplicationGetIdleTaskMemory+0x30>)
 8006a9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2280      	movs	r2, #128	@ 0x80
 8006aa0:	601a      	str	r2, [r3, #0]
}
 8006aa2:	bf00      	nop
 8006aa4:	3714      	adds	r7, #20
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	20000294 	.word	0x20000294
 8006ab4:	2000033c 	.word	0x2000033c

08006ab8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	4a07      	ldr	r2, [pc, #28]	@ (8006ae4 <vApplicationGetTimerTaskMemory+0x2c>)
 8006ac8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	4a06      	ldr	r2, [pc, #24]	@ (8006ae8 <vApplicationGetTimerTaskMemory+0x30>)
 8006ace:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006ad6:	601a      	str	r2, [r3, #0]
}
 8006ad8:	bf00      	nop
 8006ada:	3714      	adds	r7, #20
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr
 8006ae4:	2000053c 	.word	0x2000053c
 8006ae8:	200005e4 	.word	0x200005e4

08006aec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f103 0208 	add.w	r2, r3, #8
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f04f 32ff 	mov.w	r2, #4294967295
 8006b04:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f103 0208 	add.w	r2, r3, #8
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f103 0208 	add.w	r2, r3, #8
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006b3a:	bf00      	nop
 8006b3c:	370c      	adds	r7, #12
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b46:	b480      	push	{r7}
 8006b48:	b085      	sub	sp, #20
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
 8006b4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	689a      	ldr	r2, [r3, #8]
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	683a      	ldr	r2, [r7, #0]
 8006b6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	683a      	ldr	r2, [r7, #0]
 8006b70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	1c5a      	adds	r2, r3, #1
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	601a      	str	r2, [r3, #0]
}
 8006b82:	bf00      	nop
 8006b84:	3714      	adds	r7, #20
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr

08006b8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b8e:	b480      	push	{r7}
 8006b90:	b085      	sub	sp, #20
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
 8006b96:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba4:	d103      	bne.n	8006bae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	60fb      	str	r3, [r7, #12]
 8006bac:	e00c      	b.n	8006bc8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	3308      	adds	r3, #8
 8006bb2:	60fb      	str	r3, [r7, #12]
 8006bb4:	e002      	b.n	8006bbc <vListInsert+0x2e>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	60fb      	str	r3, [r7, #12]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	68ba      	ldr	r2, [r7, #8]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d2f6      	bcs.n	8006bb6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	685a      	ldr	r2, [r3, #4]
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	683a      	ldr	r2, [r7, #0]
 8006bd6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	683a      	ldr	r2, [r7, #0]
 8006be2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	1c5a      	adds	r2, r3, #1
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	601a      	str	r2, [r3, #0]
}
 8006bf4:	bf00      	nop
 8006bf6:	3714      	adds	r7, #20
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006c00:	b480      	push	{r7}
 8006c02:	b085      	sub	sp, #20
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	6892      	ldr	r2, [r2, #8]
 8006c16:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	6852      	ldr	r2, [r2, #4]
 8006c20:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d103      	bne.n	8006c34 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	689a      	ldr	r2, [r3, #8]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	1e5a      	subs	r2, r3, #1
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3714      	adds	r7, #20
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d10b      	bne.n	8006c80 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c6c:	f383 8811 	msr	BASEPRI, r3
 8006c70:	f3bf 8f6f 	isb	sy
 8006c74:	f3bf 8f4f 	dsb	sy
 8006c78:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006c7a:	bf00      	nop
 8006c7c:	bf00      	nop
 8006c7e:	e7fd      	b.n	8006c7c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006c80:	f002 f8aa 	bl	8008dd8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c8c:	68f9      	ldr	r1, [r7, #12]
 8006c8e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006c90:	fb01 f303 	mul.w	r3, r1, r3
 8006c94:	441a      	add	r2, r3
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cb0:	3b01      	subs	r3, #1
 8006cb2:	68f9      	ldr	r1, [r7, #12]
 8006cb4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006cb6:	fb01 f303 	mul.w	r3, r1, r3
 8006cba:	441a      	add	r2, r3
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	22ff      	movs	r2, #255	@ 0xff
 8006cc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	22ff      	movs	r2, #255	@ 0xff
 8006ccc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d114      	bne.n	8006d00 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d01a      	beq.n	8006d14 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	3310      	adds	r3, #16
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f001 f942 	bl	8007f6c <xTaskRemoveFromEventList>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d012      	beq.n	8006d14 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006cee:	4b0d      	ldr	r3, [pc, #52]	@ (8006d24 <xQueueGenericReset+0xd0>)
 8006cf0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cf4:	601a      	str	r2, [r3, #0]
 8006cf6:	f3bf 8f4f 	dsb	sy
 8006cfa:	f3bf 8f6f 	isb	sy
 8006cfe:	e009      	b.n	8006d14 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	3310      	adds	r3, #16
 8006d04:	4618      	mov	r0, r3
 8006d06:	f7ff fef1 	bl	8006aec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	3324      	adds	r3, #36	@ 0x24
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f7ff feec 	bl	8006aec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006d14:	f002 f892 	bl	8008e3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006d18:	2301      	movs	r3, #1
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	e000ed04 	.word	0xe000ed04

08006d28 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b08e      	sub	sp, #56	@ 0x38
 8006d2c:	af02      	add	r7, sp, #8
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	607a      	str	r2, [r7, #4]
 8006d34:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d10b      	bne.n	8006d54 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d40:	f383 8811 	msr	BASEPRI, r3
 8006d44:	f3bf 8f6f 	isb	sy
 8006d48:	f3bf 8f4f 	dsb	sy
 8006d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006d4e:	bf00      	nop
 8006d50:	bf00      	nop
 8006d52:	e7fd      	b.n	8006d50 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d10b      	bne.n	8006d72 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d5e:	f383 8811 	msr	BASEPRI, r3
 8006d62:	f3bf 8f6f 	isb	sy
 8006d66:	f3bf 8f4f 	dsb	sy
 8006d6a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006d6c:	bf00      	nop
 8006d6e:	bf00      	nop
 8006d70:	e7fd      	b.n	8006d6e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d002      	beq.n	8006d7e <xQueueGenericCreateStatic+0x56>
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d001      	beq.n	8006d82 <xQueueGenericCreateStatic+0x5a>
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e000      	b.n	8006d84 <xQueueGenericCreateStatic+0x5c>
 8006d82:	2300      	movs	r3, #0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d10b      	bne.n	8006da0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d8c:	f383 8811 	msr	BASEPRI, r3
 8006d90:	f3bf 8f6f 	isb	sy
 8006d94:	f3bf 8f4f 	dsb	sy
 8006d98:	623b      	str	r3, [r7, #32]
}
 8006d9a:	bf00      	nop
 8006d9c:	bf00      	nop
 8006d9e:	e7fd      	b.n	8006d9c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d102      	bne.n	8006dac <xQueueGenericCreateStatic+0x84>
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d101      	bne.n	8006db0 <xQueueGenericCreateStatic+0x88>
 8006dac:	2301      	movs	r3, #1
 8006dae:	e000      	b.n	8006db2 <xQueueGenericCreateStatic+0x8a>
 8006db0:	2300      	movs	r3, #0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d10b      	bne.n	8006dce <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dba:	f383 8811 	msr	BASEPRI, r3
 8006dbe:	f3bf 8f6f 	isb	sy
 8006dc2:	f3bf 8f4f 	dsb	sy
 8006dc6:	61fb      	str	r3, [r7, #28]
}
 8006dc8:	bf00      	nop
 8006dca:	bf00      	nop
 8006dcc:	e7fd      	b.n	8006dca <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006dce:	2350      	movs	r3, #80	@ 0x50
 8006dd0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	2b50      	cmp	r3, #80	@ 0x50
 8006dd6:	d00b      	beq.n	8006df0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ddc:	f383 8811 	msr	BASEPRI, r3
 8006de0:	f3bf 8f6f 	isb	sy
 8006de4:	f3bf 8f4f 	dsb	sy
 8006de8:	61bb      	str	r3, [r7, #24]
}
 8006dea:	bf00      	nop
 8006dec:	bf00      	nop
 8006dee:	e7fd      	b.n	8006dec <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006df0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d00d      	beq.n	8006e18 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006e04:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e0a:	9300      	str	r3, [sp, #0]
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	68b9      	ldr	r1, [r7, #8]
 8006e12:	68f8      	ldr	r0, [r7, #12]
 8006e14:	f000 f805 	bl	8006e22 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3730      	adds	r7, #48	@ 0x30
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b084      	sub	sp, #16
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	60f8      	str	r0, [r7, #12]
 8006e2a:	60b9      	str	r1, [r7, #8]
 8006e2c:	607a      	str	r2, [r7, #4]
 8006e2e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d103      	bne.n	8006e3e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	69ba      	ldr	r2, [r7, #24]
 8006e3a:	601a      	str	r2, [r3, #0]
 8006e3c:	e002      	b.n	8006e44 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006e44:	69bb      	ldr	r3, [r7, #24]
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	68ba      	ldr	r2, [r7, #8]
 8006e4e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006e50:	2101      	movs	r1, #1
 8006e52:	69b8      	ldr	r0, [r7, #24]
 8006e54:	f7ff fefe 	bl	8006c54 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	78fa      	ldrb	r2, [r7, #3]
 8006e5c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006e60:	bf00      	nop
 8006e62:	3710      	adds	r7, #16
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b08e      	sub	sp, #56	@ 0x38
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	607a      	str	r2, [r7, #4]
 8006e74:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006e76:	2300      	movs	r3, #0
 8006e78:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d10b      	bne.n	8006e9c <xQueueGenericSend+0x34>
	__asm volatile
 8006e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e88:	f383 8811 	msr	BASEPRI, r3
 8006e8c:	f3bf 8f6f 	isb	sy
 8006e90:	f3bf 8f4f 	dsb	sy
 8006e94:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006e96:	bf00      	nop
 8006e98:	bf00      	nop
 8006e9a:	e7fd      	b.n	8006e98 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d103      	bne.n	8006eaa <xQueueGenericSend+0x42>
 8006ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d101      	bne.n	8006eae <xQueueGenericSend+0x46>
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e000      	b.n	8006eb0 <xQueueGenericSend+0x48>
 8006eae:	2300      	movs	r3, #0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d10b      	bne.n	8006ecc <xQueueGenericSend+0x64>
	__asm volatile
 8006eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eb8:	f383 8811 	msr	BASEPRI, r3
 8006ebc:	f3bf 8f6f 	isb	sy
 8006ec0:	f3bf 8f4f 	dsb	sy
 8006ec4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006ec6:	bf00      	nop
 8006ec8:	bf00      	nop
 8006eca:	e7fd      	b.n	8006ec8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	2b02      	cmp	r3, #2
 8006ed0:	d103      	bne.n	8006eda <xQueueGenericSend+0x72>
 8006ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d101      	bne.n	8006ede <xQueueGenericSend+0x76>
 8006eda:	2301      	movs	r3, #1
 8006edc:	e000      	b.n	8006ee0 <xQueueGenericSend+0x78>
 8006ede:	2300      	movs	r3, #0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d10b      	bne.n	8006efc <xQueueGenericSend+0x94>
	__asm volatile
 8006ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ee8:	f383 8811 	msr	BASEPRI, r3
 8006eec:	f3bf 8f6f 	isb	sy
 8006ef0:	f3bf 8f4f 	dsb	sy
 8006ef4:	623b      	str	r3, [r7, #32]
}
 8006ef6:	bf00      	nop
 8006ef8:	bf00      	nop
 8006efa:	e7fd      	b.n	8006ef8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006efc:	f001 f9fc 	bl	80082f8 <xTaskGetSchedulerState>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d102      	bne.n	8006f0c <xQueueGenericSend+0xa4>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d101      	bne.n	8006f10 <xQueueGenericSend+0xa8>
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	e000      	b.n	8006f12 <xQueueGenericSend+0xaa>
 8006f10:	2300      	movs	r3, #0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d10b      	bne.n	8006f2e <xQueueGenericSend+0xc6>
	__asm volatile
 8006f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f1a:	f383 8811 	msr	BASEPRI, r3
 8006f1e:	f3bf 8f6f 	isb	sy
 8006f22:	f3bf 8f4f 	dsb	sy
 8006f26:	61fb      	str	r3, [r7, #28]
}
 8006f28:	bf00      	nop
 8006f2a:	bf00      	nop
 8006f2c:	e7fd      	b.n	8006f2a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f2e:	f001 ff53 	bl	8008dd8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d302      	bcc.n	8006f44 <xQueueGenericSend+0xdc>
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	2b02      	cmp	r3, #2
 8006f42:	d129      	bne.n	8006f98 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f44:	683a      	ldr	r2, [r7, #0]
 8006f46:	68b9      	ldr	r1, [r7, #8]
 8006f48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f4a:	f000 fa0f 	bl	800736c <prvCopyDataToQueue>
 8006f4e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d010      	beq.n	8006f7a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f5a:	3324      	adds	r3, #36	@ 0x24
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f001 f805 	bl	8007f6c <xTaskRemoveFromEventList>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d013      	beq.n	8006f90 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006f68:	4b3f      	ldr	r3, [pc, #252]	@ (8007068 <xQueueGenericSend+0x200>)
 8006f6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f6e:	601a      	str	r2, [r3, #0]
 8006f70:	f3bf 8f4f 	dsb	sy
 8006f74:	f3bf 8f6f 	isb	sy
 8006f78:	e00a      	b.n	8006f90 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d007      	beq.n	8006f90 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006f80:	4b39      	ldr	r3, [pc, #228]	@ (8007068 <xQueueGenericSend+0x200>)
 8006f82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f86:	601a      	str	r2, [r3, #0]
 8006f88:	f3bf 8f4f 	dsb	sy
 8006f8c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006f90:	f001 ff54 	bl	8008e3c <vPortExitCritical>
				return pdPASS;
 8006f94:	2301      	movs	r3, #1
 8006f96:	e063      	b.n	8007060 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d103      	bne.n	8006fa6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f9e:	f001 ff4d 	bl	8008e3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	e05c      	b.n	8007060 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006fa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d106      	bne.n	8006fba <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006fac:	f107 0314 	add.w	r3, r7, #20
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f001 f83f 	bl	8008034 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006fba:	f001 ff3f 	bl	8008e3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006fbe:	f000 fda7 	bl	8007b10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006fc2:	f001 ff09 	bl	8008dd8 <vPortEnterCritical>
 8006fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fc8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006fcc:	b25b      	sxtb	r3, r3
 8006fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fd2:	d103      	bne.n	8006fdc <xQueueGenericSend+0x174>
 8006fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fde:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006fe2:	b25b      	sxtb	r3, r3
 8006fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe8:	d103      	bne.n	8006ff2 <xQueueGenericSend+0x18a>
 8006fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ff2:	f001 ff23 	bl	8008e3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ff6:	1d3a      	adds	r2, r7, #4
 8006ff8:	f107 0314 	add.w	r3, r7, #20
 8006ffc:	4611      	mov	r1, r2
 8006ffe:	4618      	mov	r0, r3
 8007000:	f001 f82e 	bl	8008060 <xTaskCheckForTimeOut>
 8007004:	4603      	mov	r3, r0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d124      	bne.n	8007054 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800700a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800700c:	f000 faa6 	bl	800755c <prvIsQueueFull>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d018      	beq.n	8007048 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007018:	3310      	adds	r3, #16
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	4611      	mov	r1, r2
 800701e:	4618      	mov	r0, r3
 8007020:	f000 ff52 	bl	8007ec8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007024:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007026:	f000 fa31 	bl	800748c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800702a:	f000 fd7f 	bl	8007b2c <xTaskResumeAll>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	f47f af7c 	bne.w	8006f2e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007036:	4b0c      	ldr	r3, [pc, #48]	@ (8007068 <xQueueGenericSend+0x200>)
 8007038:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800703c:	601a      	str	r2, [r3, #0]
 800703e:	f3bf 8f4f 	dsb	sy
 8007042:	f3bf 8f6f 	isb	sy
 8007046:	e772      	b.n	8006f2e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007048:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800704a:	f000 fa1f 	bl	800748c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800704e:	f000 fd6d 	bl	8007b2c <xTaskResumeAll>
 8007052:	e76c      	b.n	8006f2e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007054:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007056:	f000 fa19 	bl	800748c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800705a:	f000 fd67 	bl	8007b2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800705e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007060:	4618      	mov	r0, r3
 8007062:	3738      	adds	r7, #56	@ 0x38
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	e000ed04 	.word	0xe000ed04

0800706c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b090      	sub	sp, #64	@ 0x40
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	607a      	str	r2, [r7, #4]
 8007078:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800707e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007080:	2b00      	cmp	r3, #0
 8007082:	d10b      	bne.n	800709c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007088:	f383 8811 	msr	BASEPRI, r3
 800708c:	f3bf 8f6f 	isb	sy
 8007090:	f3bf 8f4f 	dsb	sy
 8007094:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007096:	bf00      	nop
 8007098:	bf00      	nop
 800709a:	e7fd      	b.n	8007098 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d103      	bne.n	80070aa <xQueueGenericSendFromISR+0x3e>
 80070a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d101      	bne.n	80070ae <xQueueGenericSendFromISR+0x42>
 80070aa:	2301      	movs	r3, #1
 80070ac:	e000      	b.n	80070b0 <xQueueGenericSendFromISR+0x44>
 80070ae:	2300      	movs	r3, #0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d10b      	bne.n	80070cc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80070b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070b8:	f383 8811 	msr	BASEPRI, r3
 80070bc:	f3bf 8f6f 	isb	sy
 80070c0:	f3bf 8f4f 	dsb	sy
 80070c4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80070c6:	bf00      	nop
 80070c8:	bf00      	nop
 80070ca:	e7fd      	b.n	80070c8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	2b02      	cmp	r3, #2
 80070d0:	d103      	bne.n	80070da <xQueueGenericSendFromISR+0x6e>
 80070d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d101      	bne.n	80070de <xQueueGenericSendFromISR+0x72>
 80070da:	2301      	movs	r3, #1
 80070dc:	e000      	b.n	80070e0 <xQueueGenericSendFromISR+0x74>
 80070de:	2300      	movs	r3, #0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d10b      	bne.n	80070fc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80070e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e8:	f383 8811 	msr	BASEPRI, r3
 80070ec:	f3bf 8f6f 	isb	sy
 80070f0:	f3bf 8f4f 	dsb	sy
 80070f4:	623b      	str	r3, [r7, #32]
}
 80070f6:	bf00      	nop
 80070f8:	bf00      	nop
 80070fa:	e7fd      	b.n	80070f8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80070fc:	f001 ff4c 	bl	8008f98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007100:	f3ef 8211 	mrs	r2, BASEPRI
 8007104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007108:	f383 8811 	msr	BASEPRI, r3
 800710c:	f3bf 8f6f 	isb	sy
 8007110:	f3bf 8f4f 	dsb	sy
 8007114:	61fa      	str	r2, [r7, #28]
 8007116:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007118:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800711a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800711c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800711e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007124:	429a      	cmp	r2, r3
 8007126:	d302      	bcc.n	800712e <xQueueGenericSendFromISR+0xc2>
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	2b02      	cmp	r3, #2
 800712c:	d12f      	bne.n	800718e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800712e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007130:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007134:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800713a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800713c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800713e:	683a      	ldr	r2, [r7, #0]
 8007140:	68b9      	ldr	r1, [r7, #8]
 8007142:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007144:	f000 f912 	bl	800736c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007148:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800714c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007150:	d112      	bne.n	8007178 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007156:	2b00      	cmp	r3, #0
 8007158:	d016      	beq.n	8007188 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800715a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800715c:	3324      	adds	r3, #36	@ 0x24
 800715e:	4618      	mov	r0, r3
 8007160:	f000 ff04 	bl	8007f6c <xTaskRemoveFromEventList>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00e      	beq.n	8007188 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d00b      	beq.n	8007188 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	601a      	str	r2, [r3, #0]
 8007176:	e007      	b.n	8007188 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007178:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800717c:	3301      	adds	r3, #1
 800717e:	b2db      	uxtb	r3, r3
 8007180:	b25a      	sxtb	r2, r3
 8007182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007184:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007188:	2301      	movs	r3, #1
 800718a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800718c:	e001      	b.n	8007192 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800718e:	2300      	movs	r3, #0
 8007190:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007194:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800719c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800719e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3740      	adds	r7, #64	@ 0x40
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b08c      	sub	sp, #48	@ 0x30
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80071b4:	2300      	movs	r3, #0
 80071b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80071bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d10b      	bne.n	80071da <xQueueReceive+0x32>
	__asm volatile
 80071c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071c6:	f383 8811 	msr	BASEPRI, r3
 80071ca:	f3bf 8f6f 	isb	sy
 80071ce:	f3bf 8f4f 	dsb	sy
 80071d2:	623b      	str	r3, [r7, #32]
}
 80071d4:	bf00      	nop
 80071d6:	bf00      	nop
 80071d8:	e7fd      	b.n	80071d6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d103      	bne.n	80071e8 <xQueueReceive+0x40>
 80071e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d101      	bne.n	80071ec <xQueueReceive+0x44>
 80071e8:	2301      	movs	r3, #1
 80071ea:	e000      	b.n	80071ee <xQueueReceive+0x46>
 80071ec:	2300      	movs	r3, #0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d10b      	bne.n	800720a <xQueueReceive+0x62>
	__asm volatile
 80071f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071f6:	f383 8811 	msr	BASEPRI, r3
 80071fa:	f3bf 8f6f 	isb	sy
 80071fe:	f3bf 8f4f 	dsb	sy
 8007202:	61fb      	str	r3, [r7, #28]
}
 8007204:	bf00      	nop
 8007206:	bf00      	nop
 8007208:	e7fd      	b.n	8007206 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800720a:	f001 f875 	bl	80082f8 <xTaskGetSchedulerState>
 800720e:	4603      	mov	r3, r0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d102      	bne.n	800721a <xQueueReceive+0x72>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d101      	bne.n	800721e <xQueueReceive+0x76>
 800721a:	2301      	movs	r3, #1
 800721c:	e000      	b.n	8007220 <xQueueReceive+0x78>
 800721e:	2300      	movs	r3, #0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d10b      	bne.n	800723c <xQueueReceive+0x94>
	__asm volatile
 8007224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007228:	f383 8811 	msr	BASEPRI, r3
 800722c:	f3bf 8f6f 	isb	sy
 8007230:	f3bf 8f4f 	dsb	sy
 8007234:	61bb      	str	r3, [r7, #24]
}
 8007236:	bf00      	nop
 8007238:	bf00      	nop
 800723a:	e7fd      	b.n	8007238 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800723c:	f001 fdcc 	bl	8008dd8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007244:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007248:	2b00      	cmp	r3, #0
 800724a:	d01f      	beq.n	800728c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800724c:	68b9      	ldr	r1, [r7, #8]
 800724e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007250:	f000 f8f6 	bl	8007440 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007256:	1e5a      	subs	r2, r3, #1
 8007258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800725a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800725c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d00f      	beq.n	8007284 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007266:	3310      	adds	r3, #16
 8007268:	4618      	mov	r0, r3
 800726a:	f000 fe7f 	bl	8007f6c <xTaskRemoveFromEventList>
 800726e:	4603      	mov	r3, r0
 8007270:	2b00      	cmp	r3, #0
 8007272:	d007      	beq.n	8007284 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007274:	4b3c      	ldr	r3, [pc, #240]	@ (8007368 <xQueueReceive+0x1c0>)
 8007276:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800727a:	601a      	str	r2, [r3, #0]
 800727c:	f3bf 8f4f 	dsb	sy
 8007280:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007284:	f001 fdda 	bl	8008e3c <vPortExitCritical>
				return pdPASS;
 8007288:	2301      	movs	r3, #1
 800728a:	e069      	b.n	8007360 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d103      	bne.n	800729a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007292:	f001 fdd3 	bl	8008e3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007296:	2300      	movs	r3, #0
 8007298:	e062      	b.n	8007360 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800729a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800729c:	2b00      	cmp	r3, #0
 800729e:	d106      	bne.n	80072ae <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80072a0:	f107 0310 	add.w	r3, r7, #16
 80072a4:	4618      	mov	r0, r3
 80072a6:	f000 fec5 	bl	8008034 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80072aa:	2301      	movs	r3, #1
 80072ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80072ae:	f001 fdc5 	bl	8008e3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80072b2:	f000 fc2d 	bl	8007b10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80072b6:	f001 fd8f 	bl	8008dd8 <vPortEnterCritical>
 80072ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80072c0:	b25b      	sxtb	r3, r3
 80072c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c6:	d103      	bne.n	80072d0 <xQueueReceive+0x128>
 80072c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ca:	2200      	movs	r2, #0
 80072cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80072d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80072d6:	b25b      	sxtb	r3, r3
 80072d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072dc:	d103      	bne.n	80072e6 <xQueueReceive+0x13e>
 80072de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072e0:	2200      	movs	r2, #0
 80072e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80072e6:	f001 fda9 	bl	8008e3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80072ea:	1d3a      	adds	r2, r7, #4
 80072ec:	f107 0310 	add.w	r3, r7, #16
 80072f0:	4611      	mov	r1, r2
 80072f2:	4618      	mov	r0, r3
 80072f4:	f000 feb4 	bl	8008060 <xTaskCheckForTimeOut>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d123      	bne.n	8007346 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007300:	f000 f916 	bl	8007530 <prvIsQueueEmpty>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d017      	beq.n	800733a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800730a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800730c:	3324      	adds	r3, #36	@ 0x24
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	4611      	mov	r1, r2
 8007312:	4618      	mov	r0, r3
 8007314:	f000 fdd8 	bl	8007ec8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007318:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800731a:	f000 f8b7 	bl	800748c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800731e:	f000 fc05 	bl	8007b2c <xTaskResumeAll>
 8007322:	4603      	mov	r3, r0
 8007324:	2b00      	cmp	r3, #0
 8007326:	d189      	bne.n	800723c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007328:	4b0f      	ldr	r3, [pc, #60]	@ (8007368 <xQueueReceive+0x1c0>)
 800732a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800732e:	601a      	str	r2, [r3, #0]
 8007330:	f3bf 8f4f 	dsb	sy
 8007334:	f3bf 8f6f 	isb	sy
 8007338:	e780      	b.n	800723c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800733a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800733c:	f000 f8a6 	bl	800748c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007340:	f000 fbf4 	bl	8007b2c <xTaskResumeAll>
 8007344:	e77a      	b.n	800723c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007346:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007348:	f000 f8a0 	bl	800748c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800734c:	f000 fbee 	bl	8007b2c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007350:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007352:	f000 f8ed 	bl	8007530 <prvIsQueueEmpty>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	f43f af6f 	beq.w	800723c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800735e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007360:	4618      	mov	r0, r3
 8007362:	3730      	adds	r7, #48	@ 0x30
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}
 8007368:	e000ed04 	.word	0xe000ed04

0800736c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b086      	sub	sp, #24
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007378:	2300      	movs	r3, #0
 800737a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007380:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007386:	2b00      	cmp	r3, #0
 8007388:	d10d      	bne.n	80073a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d14d      	bne.n	800742e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	4618      	mov	r0, r3
 8007398:	f000 ffcc 	bl	8008334 <xTaskPriorityDisinherit>
 800739c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2200      	movs	r2, #0
 80073a2:	609a      	str	r2, [r3, #8]
 80073a4:	e043      	b.n	800742e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d119      	bne.n	80073e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	6858      	ldr	r0, [r3, #4]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073b4:	461a      	mov	r2, r3
 80073b6:	68b9      	ldr	r1, [r7, #8]
 80073b8:	f002 f8a2 	bl	8009500 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	685a      	ldr	r2, [r3, #4]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073c4:	441a      	add	r2, r3
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	685a      	ldr	r2, [r3, #4]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d32b      	bcc.n	800742e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	605a      	str	r2, [r3, #4]
 80073de:	e026      	b.n	800742e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	68d8      	ldr	r0, [r3, #12]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073e8:	461a      	mov	r2, r3
 80073ea:	68b9      	ldr	r1, [r7, #8]
 80073ec:	f002 f888 	bl	8009500 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	68da      	ldr	r2, [r3, #12]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073f8:	425b      	negs	r3, r3
 80073fa:	441a      	add	r2, r3
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	68da      	ldr	r2, [r3, #12]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	429a      	cmp	r2, r3
 800740a:	d207      	bcs.n	800741c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	689a      	ldr	r2, [r3, #8]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007414:	425b      	negs	r3, r3
 8007416:	441a      	add	r2, r3
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2b02      	cmp	r3, #2
 8007420:	d105      	bne.n	800742e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d002      	beq.n	800742e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	3b01      	subs	r3, #1
 800742c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	1c5a      	adds	r2, r3, #1
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007436:	697b      	ldr	r3, [r7, #20]
}
 8007438:	4618      	mov	r0, r3
 800743a:	3718      	adds	r7, #24
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800744e:	2b00      	cmp	r3, #0
 8007450:	d018      	beq.n	8007484 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	68da      	ldr	r2, [r3, #12]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800745a:	441a      	add	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	68da      	ldr	r2, [r3, #12]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	429a      	cmp	r2, r3
 800746a:	d303      	bcc.n	8007474 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	68d9      	ldr	r1, [r3, #12]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800747c:	461a      	mov	r2, r3
 800747e:	6838      	ldr	r0, [r7, #0]
 8007480:	f002 f83e 	bl	8009500 <memcpy>
	}
}
 8007484:	bf00      	nop
 8007486:	3708      	adds	r7, #8
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007494:	f001 fca0 	bl	8008dd8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800749e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80074a0:	e011      	b.n	80074c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d012      	beq.n	80074d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	3324      	adds	r3, #36	@ 0x24
 80074ae:	4618      	mov	r0, r3
 80074b0:	f000 fd5c 	bl	8007f6c <xTaskRemoveFromEventList>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d001      	beq.n	80074be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80074ba:	f000 fe35 	bl	8008128 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80074be:	7bfb      	ldrb	r3, [r7, #15]
 80074c0:	3b01      	subs	r3, #1
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80074c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	dce9      	bgt.n	80074a2 <prvUnlockQueue+0x16>
 80074ce:	e000      	b.n	80074d2 <prvUnlockQueue+0x46>
					break;
 80074d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	22ff      	movs	r2, #255	@ 0xff
 80074d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80074da:	f001 fcaf 	bl	8008e3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80074de:	f001 fc7b 	bl	8008dd8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80074e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80074ea:	e011      	b.n	8007510 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	691b      	ldr	r3, [r3, #16]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d012      	beq.n	800751a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	3310      	adds	r3, #16
 80074f8:	4618      	mov	r0, r3
 80074fa:	f000 fd37 	bl	8007f6c <xTaskRemoveFromEventList>
 80074fe:	4603      	mov	r3, r0
 8007500:	2b00      	cmp	r3, #0
 8007502:	d001      	beq.n	8007508 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007504:	f000 fe10 	bl	8008128 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007508:	7bbb      	ldrb	r3, [r7, #14]
 800750a:	3b01      	subs	r3, #1
 800750c:	b2db      	uxtb	r3, r3
 800750e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007510:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007514:	2b00      	cmp	r3, #0
 8007516:	dce9      	bgt.n	80074ec <prvUnlockQueue+0x60>
 8007518:	e000      	b.n	800751c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800751a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	22ff      	movs	r2, #255	@ 0xff
 8007520:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007524:	f001 fc8a 	bl	8008e3c <vPortExitCritical>
}
 8007528:	bf00      	nop
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007538:	f001 fc4e 	bl	8008dd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007540:	2b00      	cmp	r3, #0
 8007542:	d102      	bne.n	800754a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007544:	2301      	movs	r3, #1
 8007546:	60fb      	str	r3, [r7, #12]
 8007548:	e001      	b.n	800754e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800754a:	2300      	movs	r3, #0
 800754c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800754e:	f001 fc75 	bl	8008e3c <vPortExitCritical>

	return xReturn;
 8007552:	68fb      	ldr	r3, [r7, #12]
}
 8007554:	4618      	mov	r0, r3
 8007556:	3710      	adds	r7, #16
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007564:	f001 fc38 	bl	8008dd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007570:	429a      	cmp	r2, r3
 8007572:	d102      	bne.n	800757a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007574:	2301      	movs	r3, #1
 8007576:	60fb      	str	r3, [r7, #12]
 8007578:	e001      	b.n	800757e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800757a:	2300      	movs	r3, #0
 800757c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800757e:	f001 fc5d 	bl	8008e3c <vPortExitCritical>

	return xReturn;
 8007582:	68fb      	ldr	r3, [r7, #12]
}
 8007584:	4618      	mov	r0, r3
 8007586:	3710      	adds	r7, #16
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800758c:	b480      	push	{r7}
 800758e:	b085      	sub	sp, #20
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007596:	2300      	movs	r3, #0
 8007598:	60fb      	str	r3, [r7, #12]
 800759a:	e014      	b.n	80075c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800759c:	4a0f      	ldr	r2, [pc, #60]	@ (80075dc <vQueueAddToRegistry+0x50>)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d10b      	bne.n	80075c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80075a8:	490c      	ldr	r1, [pc, #48]	@ (80075dc <vQueueAddToRegistry+0x50>)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	683a      	ldr	r2, [r7, #0]
 80075ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80075b2:	4a0a      	ldr	r2, [pc, #40]	@ (80075dc <vQueueAddToRegistry+0x50>)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	00db      	lsls	r3, r3, #3
 80075b8:	4413      	add	r3, r2
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80075be:	e006      	b.n	80075ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	3301      	adds	r3, #1
 80075c4:	60fb      	str	r3, [r7, #12]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2b07      	cmp	r3, #7
 80075ca:	d9e7      	bls.n	800759c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80075cc:	bf00      	nop
 80075ce:	bf00      	nop
 80075d0:	3714      	adds	r7, #20
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	200009e4 	.word	0x200009e4

080075e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b086      	sub	sp, #24
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80075f0:	f001 fbf2 	bl	8008dd8 <vPortEnterCritical>
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80075fa:	b25b      	sxtb	r3, r3
 80075fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007600:	d103      	bne.n	800760a <vQueueWaitForMessageRestricted+0x2a>
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	2200      	movs	r2, #0
 8007606:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007610:	b25b      	sxtb	r3, r3
 8007612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007616:	d103      	bne.n	8007620 <vQueueWaitForMessageRestricted+0x40>
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	2200      	movs	r2, #0
 800761c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007620:	f001 fc0c 	bl	8008e3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007628:	2b00      	cmp	r3, #0
 800762a:	d106      	bne.n	800763a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	3324      	adds	r3, #36	@ 0x24
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	68b9      	ldr	r1, [r7, #8]
 8007634:	4618      	mov	r0, r3
 8007636:	f000 fc6d 	bl	8007f14 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800763a:	6978      	ldr	r0, [r7, #20]
 800763c:	f7ff ff26 	bl	800748c <prvUnlockQueue>
	}
 8007640:	bf00      	nop
 8007642:	3718      	adds	r7, #24
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007648:	b580      	push	{r7, lr}
 800764a:	b08e      	sub	sp, #56	@ 0x38
 800764c:	af04      	add	r7, sp, #16
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	607a      	str	r2, [r7, #4]
 8007654:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007658:	2b00      	cmp	r3, #0
 800765a:	d10b      	bne.n	8007674 <xTaskCreateStatic+0x2c>
	__asm volatile
 800765c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007660:	f383 8811 	msr	BASEPRI, r3
 8007664:	f3bf 8f6f 	isb	sy
 8007668:	f3bf 8f4f 	dsb	sy
 800766c:	623b      	str	r3, [r7, #32]
}
 800766e:	bf00      	nop
 8007670:	bf00      	nop
 8007672:	e7fd      	b.n	8007670 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007676:	2b00      	cmp	r3, #0
 8007678:	d10b      	bne.n	8007692 <xTaskCreateStatic+0x4a>
	__asm volatile
 800767a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800767e:	f383 8811 	msr	BASEPRI, r3
 8007682:	f3bf 8f6f 	isb	sy
 8007686:	f3bf 8f4f 	dsb	sy
 800768a:	61fb      	str	r3, [r7, #28]
}
 800768c:	bf00      	nop
 800768e:	bf00      	nop
 8007690:	e7fd      	b.n	800768e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007692:	23a8      	movs	r3, #168	@ 0xa8
 8007694:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	2ba8      	cmp	r3, #168	@ 0xa8
 800769a:	d00b      	beq.n	80076b4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800769c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076a0:	f383 8811 	msr	BASEPRI, r3
 80076a4:	f3bf 8f6f 	isb	sy
 80076a8:	f3bf 8f4f 	dsb	sy
 80076ac:	61bb      	str	r3, [r7, #24]
}
 80076ae:	bf00      	nop
 80076b0:	bf00      	nop
 80076b2:	e7fd      	b.n	80076b0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80076b4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80076b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d01e      	beq.n	80076fa <xTaskCreateStatic+0xb2>
 80076bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d01b      	beq.n	80076fa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80076c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076c4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80076c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80076ca:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80076cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ce:	2202      	movs	r2, #2
 80076d0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80076d4:	2300      	movs	r3, #0
 80076d6:	9303      	str	r3, [sp, #12]
 80076d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076da:	9302      	str	r3, [sp, #8]
 80076dc:	f107 0314 	add.w	r3, r7, #20
 80076e0:	9301      	str	r3, [sp, #4]
 80076e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e4:	9300      	str	r3, [sp, #0]
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	68b9      	ldr	r1, [r7, #8]
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f000 f851 	bl	8007794 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80076f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80076f4:	f000 f8f6 	bl	80078e4 <prvAddNewTaskToReadyList>
 80076f8:	e001      	b.n	80076fe <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80076fa:	2300      	movs	r3, #0
 80076fc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80076fe:	697b      	ldr	r3, [r7, #20]
	}
 8007700:	4618      	mov	r0, r3
 8007702:	3728      	adds	r7, #40	@ 0x28
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007708:	b580      	push	{r7, lr}
 800770a:	b08c      	sub	sp, #48	@ 0x30
 800770c:	af04      	add	r7, sp, #16
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	603b      	str	r3, [r7, #0]
 8007714:	4613      	mov	r3, r2
 8007716:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007718:	88fb      	ldrh	r3, [r7, #6]
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	4618      	mov	r0, r3
 800771e:	f001 fc7d 	bl	800901c <pvPortMalloc>
 8007722:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00e      	beq.n	8007748 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800772a:	20a8      	movs	r0, #168	@ 0xa8
 800772c:	f001 fc76 	bl	800901c <pvPortMalloc>
 8007730:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d003      	beq.n	8007740 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007738:	69fb      	ldr	r3, [r7, #28]
 800773a:	697a      	ldr	r2, [r7, #20]
 800773c:	631a      	str	r2, [r3, #48]	@ 0x30
 800773e:	e005      	b.n	800774c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007740:	6978      	ldr	r0, [r7, #20]
 8007742:	f001 fd39 	bl	80091b8 <vPortFree>
 8007746:	e001      	b.n	800774c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007748:	2300      	movs	r3, #0
 800774a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800774c:	69fb      	ldr	r3, [r7, #28]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d017      	beq.n	8007782 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007752:	69fb      	ldr	r3, [r7, #28]
 8007754:	2200      	movs	r2, #0
 8007756:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800775a:	88fa      	ldrh	r2, [r7, #6]
 800775c:	2300      	movs	r3, #0
 800775e:	9303      	str	r3, [sp, #12]
 8007760:	69fb      	ldr	r3, [r7, #28]
 8007762:	9302      	str	r3, [sp, #8]
 8007764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007766:	9301      	str	r3, [sp, #4]
 8007768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800776a:	9300      	str	r3, [sp, #0]
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	68b9      	ldr	r1, [r7, #8]
 8007770:	68f8      	ldr	r0, [r7, #12]
 8007772:	f000 f80f 	bl	8007794 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007776:	69f8      	ldr	r0, [r7, #28]
 8007778:	f000 f8b4 	bl	80078e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800777c:	2301      	movs	r3, #1
 800777e:	61bb      	str	r3, [r7, #24]
 8007780:	e002      	b.n	8007788 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007782:	f04f 33ff 	mov.w	r3, #4294967295
 8007786:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007788:	69bb      	ldr	r3, [r7, #24]
	}
 800778a:	4618      	mov	r0, r3
 800778c:	3720      	adds	r7, #32
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
	...

08007794 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b088      	sub	sp, #32
 8007798:	af00      	add	r7, sp, #0
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	607a      	str	r2, [r7, #4]
 80077a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80077a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077a4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	461a      	mov	r2, r3
 80077ac:	21a5      	movs	r1, #165	@ 0xa5
 80077ae:	f001 fe23 	bl	80093f8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80077b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80077bc:	3b01      	subs	r3, #1
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	4413      	add	r3, r2
 80077c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80077c4:	69bb      	ldr	r3, [r7, #24]
 80077c6:	f023 0307 	bic.w	r3, r3, #7
 80077ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	f003 0307 	and.w	r3, r3, #7
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d00b      	beq.n	80077ee <prvInitialiseNewTask+0x5a>
	__asm volatile
 80077d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077da:	f383 8811 	msr	BASEPRI, r3
 80077de:	f3bf 8f6f 	isb	sy
 80077e2:	f3bf 8f4f 	dsb	sy
 80077e6:	617b      	str	r3, [r7, #20]
}
 80077e8:	bf00      	nop
 80077ea:	bf00      	nop
 80077ec:	e7fd      	b.n	80077ea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d01f      	beq.n	8007834 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80077f4:	2300      	movs	r3, #0
 80077f6:	61fb      	str	r3, [r7, #28]
 80077f8:	e012      	b.n	8007820 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80077fa:	68ba      	ldr	r2, [r7, #8]
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	4413      	add	r3, r2
 8007800:	7819      	ldrb	r1, [r3, #0]
 8007802:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	4413      	add	r3, r2
 8007808:	3334      	adds	r3, #52	@ 0x34
 800780a:	460a      	mov	r2, r1
 800780c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800780e:	68ba      	ldr	r2, [r7, #8]
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	4413      	add	r3, r2
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d006      	beq.n	8007828 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800781a:	69fb      	ldr	r3, [r7, #28]
 800781c:	3301      	adds	r3, #1
 800781e:	61fb      	str	r3, [r7, #28]
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	2b0f      	cmp	r3, #15
 8007824:	d9e9      	bls.n	80077fa <prvInitialiseNewTask+0x66>
 8007826:	e000      	b.n	800782a <prvInitialiseNewTask+0x96>
			{
				break;
 8007828:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800782a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800782c:	2200      	movs	r2, #0
 800782e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007832:	e003      	b.n	800783c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007836:	2200      	movs	r2, #0
 8007838:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800783c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800783e:	2b37      	cmp	r3, #55	@ 0x37
 8007840:	d901      	bls.n	8007846 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007842:	2337      	movs	r3, #55	@ 0x37
 8007844:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007848:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800784a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800784c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800784e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007850:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007854:	2200      	movs	r2, #0
 8007856:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800785a:	3304      	adds	r3, #4
 800785c:	4618      	mov	r0, r3
 800785e:	f7ff f965 	bl	8006b2c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007864:	3318      	adds	r3, #24
 8007866:	4618      	mov	r0, r3
 8007868:	f7ff f960 	bl	8006b2c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800786c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800786e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007870:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007874:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800787a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800787c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800787e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007880:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007884:	2200      	movs	r2, #0
 8007886:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800788a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800788c:	2200      	movs	r2, #0
 800788e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007894:	3354      	adds	r3, #84	@ 0x54
 8007896:	224c      	movs	r2, #76	@ 0x4c
 8007898:	2100      	movs	r1, #0
 800789a:	4618      	mov	r0, r3
 800789c:	f001 fdac 	bl	80093f8 <memset>
 80078a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a2:	4a0d      	ldr	r2, [pc, #52]	@ (80078d8 <prvInitialiseNewTask+0x144>)
 80078a4:	659a      	str	r2, [r3, #88]	@ 0x58
 80078a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a8:	4a0c      	ldr	r2, [pc, #48]	@ (80078dc <prvInitialiseNewTask+0x148>)
 80078aa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80078ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ae:	4a0c      	ldr	r2, [pc, #48]	@ (80078e0 <prvInitialiseNewTask+0x14c>)
 80078b0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80078b2:	683a      	ldr	r2, [r7, #0]
 80078b4:	68f9      	ldr	r1, [r7, #12]
 80078b6:	69b8      	ldr	r0, [r7, #24]
 80078b8:	f001 f95a 	bl	8008b70 <pxPortInitialiseStack>
 80078bc:	4602      	mov	r2, r0
 80078be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80078c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d002      	beq.n	80078ce <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80078c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078ce:	bf00      	nop
 80078d0:	3720      	adds	r7, #32
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	20001c30 	.word	0x20001c30
 80078dc:	20001c98 	.word	0x20001c98
 80078e0:	20001d00 	.word	0x20001d00

080078e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80078ec:	f001 fa74 	bl	8008dd8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80078f0:	4b2d      	ldr	r3, [pc, #180]	@ (80079a8 <prvAddNewTaskToReadyList+0xc4>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	3301      	adds	r3, #1
 80078f6:	4a2c      	ldr	r2, [pc, #176]	@ (80079a8 <prvAddNewTaskToReadyList+0xc4>)
 80078f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80078fa:	4b2c      	ldr	r3, [pc, #176]	@ (80079ac <prvAddNewTaskToReadyList+0xc8>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d109      	bne.n	8007916 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007902:	4a2a      	ldr	r2, [pc, #168]	@ (80079ac <prvAddNewTaskToReadyList+0xc8>)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007908:	4b27      	ldr	r3, [pc, #156]	@ (80079a8 <prvAddNewTaskToReadyList+0xc4>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2b01      	cmp	r3, #1
 800790e:	d110      	bne.n	8007932 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007910:	f000 fc2e 	bl	8008170 <prvInitialiseTaskLists>
 8007914:	e00d      	b.n	8007932 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007916:	4b26      	ldr	r3, [pc, #152]	@ (80079b0 <prvAddNewTaskToReadyList+0xcc>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d109      	bne.n	8007932 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800791e:	4b23      	ldr	r3, [pc, #140]	@ (80079ac <prvAddNewTaskToReadyList+0xc8>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007928:	429a      	cmp	r2, r3
 800792a:	d802      	bhi.n	8007932 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800792c:	4a1f      	ldr	r2, [pc, #124]	@ (80079ac <prvAddNewTaskToReadyList+0xc8>)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007932:	4b20      	ldr	r3, [pc, #128]	@ (80079b4 <prvAddNewTaskToReadyList+0xd0>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	3301      	adds	r3, #1
 8007938:	4a1e      	ldr	r2, [pc, #120]	@ (80079b4 <prvAddNewTaskToReadyList+0xd0>)
 800793a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800793c:	4b1d      	ldr	r3, [pc, #116]	@ (80079b4 <prvAddNewTaskToReadyList+0xd0>)
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007948:	4b1b      	ldr	r3, [pc, #108]	@ (80079b8 <prvAddNewTaskToReadyList+0xd4>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	429a      	cmp	r2, r3
 800794e:	d903      	bls.n	8007958 <prvAddNewTaskToReadyList+0x74>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007954:	4a18      	ldr	r2, [pc, #96]	@ (80079b8 <prvAddNewTaskToReadyList+0xd4>)
 8007956:	6013      	str	r3, [r2, #0]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800795c:	4613      	mov	r3, r2
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	4413      	add	r3, r2
 8007962:	009b      	lsls	r3, r3, #2
 8007964:	4a15      	ldr	r2, [pc, #84]	@ (80079bc <prvAddNewTaskToReadyList+0xd8>)
 8007966:	441a      	add	r2, r3
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	3304      	adds	r3, #4
 800796c:	4619      	mov	r1, r3
 800796e:	4610      	mov	r0, r2
 8007970:	f7ff f8e9 	bl	8006b46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007974:	f001 fa62 	bl	8008e3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007978:	4b0d      	ldr	r3, [pc, #52]	@ (80079b0 <prvAddNewTaskToReadyList+0xcc>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00e      	beq.n	800799e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007980:	4b0a      	ldr	r3, [pc, #40]	@ (80079ac <prvAddNewTaskToReadyList+0xc8>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800798a:	429a      	cmp	r2, r3
 800798c:	d207      	bcs.n	800799e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800798e:	4b0c      	ldr	r3, [pc, #48]	@ (80079c0 <prvAddNewTaskToReadyList+0xdc>)
 8007990:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007994:	601a      	str	r2, [r3, #0]
 8007996:	f3bf 8f4f 	dsb	sy
 800799a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800799e:	bf00      	nop
 80079a0:	3708      	adds	r7, #8
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop
 80079a8:	20000ef8 	.word	0x20000ef8
 80079ac:	20000a24 	.word	0x20000a24
 80079b0:	20000f04 	.word	0x20000f04
 80079b4:	20000f14 	.word	0x20000f14
 80079b8:	20000f00 	.word	0x20000f00
 80079bc:	20000a28 	.word	0x20000a28
 80079c0:	e000ed04 	.word	0xe000ed04

080079c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80079cc:	2300      	movs	r3, #0
 80079ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d018      	beq.n	8007a08 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80079d6:	4b14      	ldr	r3, [pc, #80]	@ (8007a28 <vTaskDelay+0x64>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d00b      	beq.n	80079f6 <vTaskDelay+0x32>
	__asm volatile
 80079de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079e2:	f383 8811 	msr	BASEPRI, r3
 80079e6:	f3bf 8f6f 	isb	sy
 80079ea:	f3bf 8f4f 	dsb	sy
 80079ee:	60bb      	str	r3, [r7, #8]
}
 80079f0:	bf00      	nop
 80079f2:	bf00      	nop
 80079f4:	e7fd      	b.n	80079f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80079f6:	f000 f88b 	bl	8007b10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80079fa:	2100      	movs	r1, #0
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 fd09 	bl	8008414 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007a02:	f000 f893 	bl	8007b2c <xTaskResumeAll>
 8007a06:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d107      	bne.n	8007a1e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007a0e:	4b07      	ldr	r3, [pc, #28]	@ (8007a2c <vTaskDelay+0x68>)
 8007a10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a14:	601a      	str	r2, [r3, #0]
 8007a16:	f3bf 8f4f 	dsb	sy
 8007a1a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a1e:	bf00      	nop
 8007a20:	3710      	adds	r7, #16
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	20000f20 	.word	0x20000f20
 8007a2c:	e000ed04 	.word	0xe000ed04

08007a30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b08a      	sub	sp, #40	@ 0x28
 8007a34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007a36:	2300      	movs	r3, #0
 8007a38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007a3e:	463a      	mov	r2, r7
 8007a40:	1d39      	adds	r1, r7, #4
 8007a42:	f107 0308 	add.w	r3, r7, #8
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7ff f81c 	bl	8006a84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007a4c:	6839      	ldr	r1, [r7, #0]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	68ba      	ldr	r2, [r7, #8]
 8007a52:	9202      	str	r2, [sp, #8]
 8007a54:	9301      	str	r3, [sp, #4]
 8007a56:	2300      	movs	r3, #0
 8007a58:	9300      	str	r3, [sp, #0]
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	460a      	mov	r2, r1
 8007a5e:	4924      	ldr	r1, [pc, #144]	@ (8007af0 <vTaskStartScheduler+0xc0>)
 8007a60:	4824      	ldr	r0, [pc, #144]	@ (8007af4 <vTaskStartScheduler+0xc4>)
 8007a62:	f7ff fdf1 	bl	8007648 <xTaskCreateStatic>
 8007a66:	4603      	mov	r3, r0
 8007a68:	4a23      	ldr	r2, [pc, #140]	@ (8007af8 <vTaskStartScheduler+0xc8>)
 8007a6a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007a6c:	4b22      	ldr	r3, [pc, #136]	@ (8007af8 <vTaskStartScheduler+0xc8>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d002      	beq.n	8007a7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007a74:	2301      	movs	r3, #1
 8007a76:	617b      	str	r3, [r7, #20]
 8007a78:	e001      	b.n	8007a7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d102      	bne.n	8007a8a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007a84:	f000 fd1a 	bl	80084bc <xTimerCreateTimerTask>
 8007a88:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d11b      	bne.n	8007ac8 <vTaskStartScheduler+0x98>
	__asm volatile
 8007a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a94:	f383 8811 	msr	BASEPRI, r3
 8007a98:	f3bf 8f6f 	isb	sy
 8007a9c:	f3bf 8f4f 	dsb	sy
 8007aa0:	613b      	str	r3, [r7, #16]
}
 8007aa2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007aa4:	4b15      	ldr	r3, [pc, #84]	@ (8007afc <vTaskStartScheduler+0xcc>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	3354      	adds	r3, #84	@ 0x54
 8007aaa:	4a15      	ldr	r2, [pc, #84]	@ (8007b00 <vTaskStartScheduler+0xd0>)
 8007aac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007aae:	4b15      	ldr	r3, [pc, #84]	@ (8007b04 <vTaskStartScheduler+0xd4>)
 8007ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ab4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007ab6:	4b14      	ldr	r3, [pc, #80]	@ (8007b08 <vTaskStartScheduler+0xd8>)
 8007ab8:	2201      	movs	r2, #1
 8007aba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007abc:	4b13      	ldr	r3, [pc, #76]	@ (8007b0c <vTaskStartScheduler+0xdc>)
 8007abe:	2200      	movs	r2, #0
 8007ac0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007ac2:	f001 f8e5 	bl	8008c90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007ac6:	e00f      	b.n	8007ae8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ace:	d10b      	bne.n	8007ae8 <vTaskStartScheduler+0xb8>
	__asm volatile
 8007ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad4:	f383 8811 	msr	BASEPRI, r3
 8007ad8:	f3bf 8f6f 	isb	sy
 8007adc:	f3bf 8f4f 	dsb	sy
 8007ae0:	60fb      	str	r3, [r7, #12]
}
 8007ae2:	bf00      	nop
 8007ae4:	bf00      	nop
 8007ae6:	e7fd      	b.n	8007ae4 <vTaskStartScheduler+0xb4>
}
 8007ae8:	bf00      	nop
 8007aea:	3718      	adds	r7, #24
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	0800961c 	.word	0x0800961c
 8007af4:	08008141 	.word	0x08008141
 8007af8:	20000f1c 	.word	0x20000f1c
 8007afc:	20000a24 	.word	0x20000a24
 8007b00:	20000010 	.word	0x20000010
 8007b04:	20000f18 	.word	0x20000f18
 8007b08:	20000f04 	.word	0x20000f04
 8007b0c:	20000efc 	.word	0x20000efc

08007b10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007b10:	b480      	push	{r7}
 8007b12:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007b14:	4b04      	ldr	r3, [pc, #16]	@ (8007b28 <vTaskSuspendAll+0x18>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	3301      	adds	r3, #1
 8007b1a:	4a03      	ldr	r2, [pc, #12]	@ (8007b28 <vTaskSuspendAll+0x18>)
 8007b1c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007b1e:	bf00      	nop
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr
 8007b28:	20000f20 	.word	0x20000f20

08007b2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007b32:	2300      	movs	r3, #0
 8007b34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007b36:	2300      	movs	r3, #0
 8007b38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007b3a:	4b42      	ldr	r3, [pc, #264]	@ (8007c44 <xTaskResumeAll+0x118>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d10b      	bne.n	8007b5a <xTaskResumeAll+0x2e>
	__asm volatile
 8007b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b46:	f383 8811 	msr	BASEPRI, r3
 8007b4a:	f3bf 8f6f 	isb	sy
 8007b4e:	f3bf 8f4f 	dsb	sy
 8007b52:	603b      	str	r3, [r7, #0]
}
 8007b54:	bf00      	nop
 8007b56:	bf00      	nop
 8007b58:	e7fd      	b.n	8007b56 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007b5a:	f001 f93d 	bl	8008dd8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007b5e:	4b39      	ldr	r3, [pc, #228]	@ (8007c44 <xTaskResumeAll+0x118>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	3b01      	subs	r3, #1
 8007b64:	4a37      	ldr	r2, [pc, #220]	@ (8007c44 <xTaskResumeAll+0x118>)
 8007b66:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b68:	4b36      	ldr	r3, [pc, #216]	@ (8007c44 <xTaskResumeAll+0x118>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d162      	bne.n	8007c36 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007b70:	4b35      	ldr	r3, [pc, #212]	@ (8007c48 <xTaskResumeAll+0x11c>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d05e      	beq.n	8007c36 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b78:	e02f      	b.n	8007bda <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b7a:	4b34      	ldr	r3, [pc, #208]	@ (8007c4c <xTaskResumeAll+0x120>)
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	3318      	adds	r3, #24
 8007b86:	4618      	mov	r0, r3
 8007b88:	f7ff f83a 	bl	8006c00 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	3304      	adds	r3, #4
 8007b90:	4618      	mov	r0, r3
 8007b92:	f7ff f835 	bl	8006c00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b9a:	4b2d      	ldr	r3, [pc, #180]	@ (8007c50 <xTaskResumeAll+0x124>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d903      	bls.n	8007baa <xTaskResumeAll+0x7e>
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ba6:	4a2a      	ldr	r2, [pc, #168]	@ (8007c50 <xTaskResumeAll+0x124>)
 8007ba8:	6013      	str	r3, [r2, #0]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bae:	4613      	mov	r3, r2
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	4413      	add	r3, r2
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	4a27      	ldr	r2, [pc, #156]	@ (8007c54 <xTaskResumeAll+0x128>)
 8007bb8:	441a      	add	r2, r3
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	3304      	adds	r3, #4
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	4610      	mov	r0, r2
 8007bc2:	f7fe ffc0 	bl	8006b46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bca:	4b23      	ldr	r3, [pc, #140]	@ (8007c58 <xTaskResumeAll+0x12c>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d302      	bcc.n	8007bda <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007bd4:	4b21      	ldr	r3, [pc, #132]	@ (8007c5c <xTaskResumeAll+0x130>)
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007bda:	4b1c      	ldr	r3, [pc, #112]	@ (8007c4c <xTaskResumeAll+0x120>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d1cb      	bne.n	8007b7a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d001      	beq.n	8007bec <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007be8:	f000 fb66 	bl	80082b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007bec:	4b1c      	ldr	r3, [pc, #112]	@ (8007c60 <xTaskResumeAll+0x134>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d010      	beq.n	8007c1a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007bf8:	f000 f846 	bl	8007c88 <xTaskIncrementTick>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d002      	beq.n	8007c08 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007c02:	4b16      	ldr	r3, [pc, #88]	@ (8007c5c <xTaskResumeAll+0x130>)
 8007c04:	2201      	movs	r2, #1
 8007c06:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	3b01      	subs	r3, #1
 8007c0c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d1f1      	bne.n	8007bf8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007c14:	4b12      	ldr	r3, [pc, #72]	@ (8007c60 <xTaskResumeAll+0x134>)
 8007c16:	2200      	movs	r2, #0
 8007c18:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007c1a:	4b10      	ldr	r3, [pc, #64]	@ (8007c5c <xTaskResumeAll+0x130>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d009      	beq.n	8007c36 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007c22:	2301      	movs	r3, #1
 8007c24:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007c26:	4b0f      	ldr	r3, [pc, #60]	@ (8007c64 <xTaskResumeAll+0x138>)
 8007c28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c2c:	601a      	str	r2, [r3, #0]
 8007c2e:	f3bf 8f4f 	dsb	sy
 8007c32:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007c36:	f001 f901 	bl	8008e3c <vPortExitCritical>

	return xAlreadyYielded;
 8007c3a:	68bb      	ldr	r3, [r7, #8]
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3710      	adds	r7, #16
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}
 8007c44:	20000f20 	.word	0x20000f20
 8007c48:	20000ef8 	.word	0x20000ef8
 8007c4c:	20000eb8 	.word	0x20000eb8
 8007c50:	20000f00 	.word	0x20000f00
 8007c54:	20000a28 	.word	0x20000a28
 8007c58:	20000a24 	.word	0x20000a24
 8007c5c:	20000f0c 	.word	0x20000f0c
 8007c60:	20000f08 	.word	0x20000f08
 8007c64:	e000ed04 	.word	0xe000ed04

08007c68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007c6e:	4b05      	ldr	r3, [pc, #20]	@ (8007c84 <xTaskGetTickCount+0x1c>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007c74:	687b      	ldr	r3, [r7, #4]
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	370c      	adds	r7, #12
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr
 8007c82:	bf00      	nop
 8007c84:	20000efc 	.word	0x20000efc

08007c88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b086      	sub	sp, #24
 8007c8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c92:	4b4f      	ldr	r3, [pc, #316]	@ (8007dd0 <xTaskIncrementTick+0x148>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	f040 8090 	bne.w	8007dbc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007c9c:	4b4d      	ldr	r3, [pc, #308]	@ (8007dd4 <xTaskIncrementTick+0x14c>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007ca4:	4a4b      	ldr	r2, [pc, #300]	@ (8007dd4 <xTaskIncrementTick+0x14c>)
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d121      	bne.n	8007cf4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007cb0:	4b49      	ldr	r3, [pc, #292]	@ (8007dd8 <xTaskIncrementTick+0x150>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d00b      	beq.n	8007cd2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8007cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cbe:	f383 8811 	msr	BASEPRI, r3
 8007cc2:	f3bf 8f6f 	isb	sy
 8007cc6:	f3bf 8f4f 	dsb	sy
 8007cca:	603b      	str	r3, [r7, #0]
}
 8007ccc:	bf00      	nop
 8007cce:	bf00      	nop
 8007cd0:	e7fd      	b.n	8007cce <xTaskIncrementTick+0x46>
 8007cd2:	4b41      	ldr	r3, [pc, #260]	@ (8007dd8 <xTaskIncrementTick+0x150>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	60fb      	str	r3, [r7, #12]
 8007cd8:	4b40      	ldr	r3, [pc, #256]	@ (8007ddc <xTaskIncrementTick+0x154>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a3e      	ldr	r2, [pc, #248]	@ (8007dd8 <xTaskIncrementTick+0x150>)
 8007cde:	6013      	str	r3, [r2, #0]
 8007ce0:	4a3e      	ldr	r2, [pc, #248]	@ (8007ddc <xTaskIncrementTick+0x154>)
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	6013      	str	r3, [r2, #0]
 8007ce6:	4b3e      	ldr	r3, [pc, #248]	@ (8007de0 <xTaskIncrementTick+0x158>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	3301      	adds	r3, #1
 8007cec:	4a3c      	ldr	r2, [pc, #240]	@ (8007de0 <xTaskIncrementTick+0x158>)
 8007cee:	6013      	str	r3, [r2, #0]
 8007cf0:	f000 fae2 	bl	80082b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007cf4:	4b3b      	ldr	r3, [pc, #236]	@ (8007de4 <xTaskIncrementTick+0x15c>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	693a      	ldr	r2, [r7, #16]
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d349      	bcc.n	8007d92 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007cfe:	4b36      	ldr	r3, [pc, #216]	@ (8007dd8 <xTaskIncrementTick+0x150>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d104      	bne.n	8007d12 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d08:	4b36      	ldr	r3, [pc, #216]	@ (8007de4 <xTaskIncrementTick+0x15c>)
 8007d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d0e:	601a      	str	r2, [r3, #0]
					break;
 8007d10:	e03f      	b.n	8007d92 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d12:	4b31      	ldr	r3, [pc, #196]	@ (8007dd8 <xTaskIncrementTick+0x150>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	68db      	ldr	r3, [r3, #12]
 8007d1a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007d22:	693a      	ldr	r2, [r7, #16]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d203      	bcs.n	8007d32 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007d2a:	4a2e      	ldr	r2, [pc, #184]	@ (8007de4 <xTaskIncrementTick+0x15c>)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007d30:	e02f      	b.n	8007d92 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	3304      	adds	r3, #4
 8007d36:	4618      	mov	r0, r3
 8007d38:	f7fe ff62 	bl	8006c00 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d004      	beq.n	8007d4e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	3318      	adds	r3, #24
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f7fe ff59 	bl	8006c00 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d52:	4b25      	ldr	r3, [pc, #148]	@ (8007de8 <xTaskIncrementTick+0x160>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d903      	bls.n	8007d62 <xTaskIncrementTick+0xda>
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d5e:	4a22      	ldr	r2, [pc, #136]	@ (8007de8 <xTaskIncrementTick+0x160>)
 8007d60:	6013      	str	r3, [r2, #0]
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d66:	4613      	mov	r3, r2
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	4413      	add	r3, r2
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	4a1f      	ldr	r2, [pc, #124]	@ (8007dec <xTaskIncrementTick+0x164>)
 8007d70:	441a      	add	r2, r3
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	3304      	adds	r3, #4
 8007d76:	4619      	mov	r1, r3
 8007d78:	4610      	mov	r0, r2
 8007d7a:	f7fe fee4 	bl	8006b46 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d82:	4b1b      	ldr	r3, [pc, #108]	@ (8007df0 <xTaskIncrementTick+0x168>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d3b8      	bcc.n	8007cfe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d90:	e7b5      	b.n	8007cfe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007d92:	4b17      	ldr	r3, [pc, #92]	@ (8007df0 <xTaskIncrementTick+0x168>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d98:	4914      	ldr	r1, [pc, #80]	@ (8007dec <xTaskIncrementTick+0x164>)
 8007d9a:	4613      	mov	r3, r2
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	4413      	add	r3, r2
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	440b      	add	r3, r1
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d901      	bls.n	8007dae <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007daa:	2301      	movs	r3, #1
 8007dac:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007dae:	4b11      	ldr	r3, [pc, #68]	@ (8007df4 <xTaskIncrementTick+0x16c>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d007      	beq.n	8007dc6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007db6:	2301      	movs	r3, #1
 8007db8:	617b      	str	r3, [r7, #20]
 8007dba:	e004      	b.n	8007dc6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007dbc:	4b0e      	ldr	r3, [pc, #56]	@ (8007df8 <xTaskIncrementTick+0x170>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	4a0d      	ldr	r2, [pc, #52]	@ (8007df8 <xTaskIncrementTick+0x170>)
 8007dc4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007dc6:	697b      	ldr	r3, [r7, #20]
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3718      	adds	r7, #24
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	20000f20 	.word	0x20000f20
 8007dd4:	20000efc 	.word	0x20000efc
 8007dd8:	20000eb0 	.word	0x20000eb0
 8007ddc:	20000eb4 	.word	0x20000eb4
 8007de0:	20000f10 	.word	0x20000f10
 8007de4:	20000f18 	.word	0x20000f18
 8007de8:	20000f00 	.word	0x20000f00
 8007dec:	20000a28 	.word	0x20000a28
 8007df0:	20000a24 	.word	0x20000a24
 8007df4:	20000f0c 	.word	0x20000f0c
 8007df8:	20000f08 	.word	0x20000f08

08007dfc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b085      	sub	sp, #20
 8007e00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007e02:	4b2b      	ldr	r3, [pc, #172]	@ (8007eb0 <vTaskSwitchContext+0xb4>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d003      	beq.n	8007e12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007e0a:	4b2a      	ldr	r3, [pc, #168]	@ (8007eb4 <vTaskSwitchContext+0xb8>)
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007e10:	e047      	b.n	8007ea2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8007e12:	4b28      	ldr	r3, [pc, #160]	@ (8007eb4 <vTaskSwitchContext+0xb8>)
 8007e14:	2200      	movs	r2, #0
 8007e16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e18:	4b27      	ldr	r3, [pc, #156]	@ (8007eb8 <vTaskSwitchContext+0xbc>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	60fb      	str	r3, [r7, #12]
 8007e1e:	e011      	b.n	8007e44 <vTaskSwitchContext+0x48>
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d10b      	bne.n	8007e3e <vTaskSwitchContext+0x42>
	__asm volatile
 8007e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e2a:	f383 8811 	msr	BASEPRI, r3
 8007e2e:	f3bf 8f6f 	isb	sy
 8007e32:	f3bf 8f4f 	dsb	sy
 8007e36:	607b      	str	r3, [r7, #4]
}
 8007e38:	bf00      	nop
 8007e3a:	bf00      	nop
 8007e3c:	e7fd      	b.n	8007e3a <vTaskSwitchContext+0x3e>
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	3b01      	subs	r3, #1
 8007e42:	60fb      	str	r3, [r7, #12]
 8007e44:	491d      	ldr	r1, [pc, #116]	@ (8007ebc <vTaskSwitchContext+0xc0>)
 8007e46:	68fa      	ldr	r2, [r7, #12]
 8007e48:	4613      	mov	r3, r2
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	4413      	add	r3, r2
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	440b      	add	r3, r1
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d0e3      	beq.n	8007e20 <vTaskSwitchContext+0x24>
 8007e58:	68fa      	ldr	r2, [r7, #12]
 8007e5a:	4613      	mov	r3, r2
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	4413      	add	r3, r2
 8007e60:	009b      	lsls	r3, r3, #2
 8007e62:	4a16      	ldr	r2, [pc, #88]	@ (8007ebc <vTaskSwitchContext+0xc0>)
 8007e64:	4413      	add	r3, r2
 8007e66:	60bb      	str	r3, [r7, #8]
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	685a      	ldr	r2, [r3, #4]
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	605a      	str	r2, [r3, #4]
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	685a      	ldr	r2, [r3, #4]
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	3308      	adds	r3, #8
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d104      	bne.n	8007e88 <vTaskSwitchContext+0x8c>
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	685a      	ldr	r2, [r3, #4]
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	605a      	str	r2, [r3, #4]
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	4a0c      	ldr	r2, [pc, #48]	@ (8007ec0 <vTaskSwitchContext+0xc4>)
 8007e90:	6013      	str	r3, [r2, #0]
 8007e92:	4a09      	ldr	r2, [pc, #36]	@ (8007eb8 <vTaskSwitchContext+0xbc>)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007e98:	4b09      	ldr	r3, [pc, #36]	@ (8007ec0 <vTaskSwitchContext+0xc4>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	3354      	adds	r3, #84	@ 0x54
 8007e9e:	4a09      	ldr	r2, [pc, #36]	@ (8007ec4 <vTaskSwitchContext+0xc8>)
 8007ea0:	6013      	str	r3, [r2, #0]
}
 8007ea2:	bf00      	nop
 8007ea4:	3714      	adds	r7, #20
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr
 8007eae:	bf00      	nop
 8007eb0:	20000f20 	.word	0x20000f20
 8007eb4:	20000f0c 	.word	0x20000f0c
 8007eb8:	20000f00 	.word	0x20000f00
 8007ebc:	20000a28 	.word	0x20000a28
 8007ec0:	20000a24 	.word	0x20000a24
 8007ec4:	20000010 	.word	0x20000010

08007ec8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d10b      	bne.n	8007ef0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007edc:	f383 8811 	msr	BASEPRI, r3
 8007ee0:	f3bf 8f6f 	isb	sy
 8007ee4:	f3bf 8f4f 	dsb	sy
 8007ee8:	60fb      	str	r3, [r7, #12]
}
 8007eea:	bf00      	nop
 8007eec:	bf00      	nop
 8007eee:	e7fd      	b.n	8007eec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007ef0:	4b07      	ldr	r3, [pc, #28]	@ (8007f10 <vTaskPlaceOnEventList+0x48>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	3318      	adds	r3, #24
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f7fe fe48 	bl	8006b8e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007efe:	2101      	movs	r1, #1
 8007f00:	6838      	ldr	r0, [r7, #0]
 8007f02:	f000 fa87 	bl	8008414 <prvAddCurrentTaskToDelayedList>
}
 8007f06:	bf00      	nop
 8007f08:	3710      	adds	r7, #16
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
 8007f0e:	bf00      	nop
 8007f10:	20000a24 	.word	0x20000a24

08007f14 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b086      	sub	sp, #24
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	60b9      	str	r1, [r7, #8]
 8007f1e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d10b      	bne.n	8007f3e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f2a:	f383 8811 	msr	BASEPRI, r3
 8007f2e:	f3bf 8f6f 	isb	sy
 8007f32:	f3bf 8f4f 	dsb	sy
 8007f36:	617b      	str	r3, [r7, #20]
}
 8007f38:	bf00      	nop
 8007f3a:	bf00      	nop
 8007f3c:	e7fd      	b.n	8007f3a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8007f68 <vTaskPlaceOnEventListRestricted+0x54>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	3318      	adds	r3, #24
 8007f44:	4619      	mov	r1, r3
 8007f46:	68f8      	ldr	r0, [r7, #12]
 8007f48:	f7fe fdfd 	bl	8006b46 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d002      	beq.n	8007f58 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007f52:	f04f 33ff 	mov.w	r3, #4294967295
 8007f56:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007f58:	6879      	ldr	r1, [r7, #4]
 8007f5a:	68b8      	ldr	r0, [r7, #8]
 8007f5c:	f000 fa5a 	bl	8008414 <prvAddCurrentTaskToDelayedList>
	}
 8007f60:	bf00      	nop
 8007f62:	3718      	adds	r7, #24
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	20000a24 	.word	0x20000a24

08007f6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b086      	sub	sp, #24
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d10b      	bne.n	8007f9a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f86:	f383 8811 	msr	BASEPRI, r3
 8007f8a:	f3bf 8f6f 	isb	sy
 8007f8e:	f3bf 8f4f 	dsb	sy
 8007f92:	60fb      	str	r3, [r7, #12]
}
 8007f94:	bf00      	nop
 8007f96:	bf00      	nop
 8007f98:	e7fd      	b.n	8007f96 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	3318      	adds	r3, #24
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7fe fe2e 	bl	8006c00 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fa4:	4b1d      	ldr	r3, [pc, #116]	@ (800801c <xTaskRemoveFromEventList+0xb0>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d11d      	bne.n	8007fe8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	3304      	adds	r3, #4
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f7fe fe25 	bl	8006c00 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fba:	4b19      	ldr	r3, [pc, #100]	@ (8008020 <xTaskRemoveFromEventList+0xb4>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	d903      	bls.n	8007fca <xTaskRemoveFromEventList+0x5e>
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fc6:	4a16      	ldr	r2, [pc, #88]	@ (8008020 <xTaskRemoveFromEventList+0xb4>)
 8007fc8:	6013      	str	r3, [r2, #0]
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fce:	4613      	mov	r3, r2
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	4413      	add	r3, r2
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	4a13      	ldr	r2, [pc, #76]	@ (8008024 <xTaskRemoveFromEventList+0xb8>)
 8007fd8:	441a      	add	r2, r3
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	3304      	adds	r3, #4
 8007fde:	4619      	mov	r1, r3
 8007fe0:	4610      	mov	r0, r2
 8007fe2:	f7fe fdb0 	bl	8006b46 <vListInsertEnd>
 8007fe6:	e005      	b.n	8007ff4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	3318      	adds	r3, #24
 8007fec:	4619      	mov	r1, r3
 8007fee:	480e      	ldr	r0, [pc, #56]	@ (8008028 <xTaskRemoveFromEventList+0xbc>)
 8007ff0:	f7fe fda9 	bl	8006b46 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800802c <xTaskRemoveFromEventList+0xc0>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d905      	bls.n	800800e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008002:	2301      	movs	r3, #1
 8008004:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008006:	4b0a      	ldr	r3, [pc, #40]	@ (8008030 <xTaskRemoveFromEventList+0xc4>)
 8008008:	2201      	movs	r2, #1
 800800a:	601a      	str	r2, [r3, #0]
 800800c:	e001      	b.n	8008012 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800800e:	2300      	movs	r3, #0
 8008010:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008012:	697b      	ldr	r3, [r7, #20]
}
 8008014:	4618      	mov	r0, r3
 8008016:	3718      	adds	r7, #24
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	20000f20 	.word	0x20000f20
 8008020:	20000f00 	.word	0x20000f00
 8008024:	20000a28 	.word	0x20000a28
 8008028:	20000eb8 	.word	0x20000eb8
 800802c:	20000a24 	.word	0x20000a24
 8008030:	20000f0c 	.word	0x20000f0c

08008034 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800803c:	4b06      	ldr	r3, [pc, #24]	@ (8008058 <vTaskInternalSetTimeOutState+0x24>)
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008044:	4b05      	ldr	r3, [pc, #20]	@ (800805c <vTaskInternalSetTimeOutState+0x28>)
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	605a      	str	r2, [r3, #4]
}
 800804c:	bf00      	nop
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr
 8008058:	20000f10 	.word	0x20000f10
 800805c:	20000efc 	.word	0x20000efc

08008060 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b088      	sub	sp, #32
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d10b      	bne.n	8008088 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008074:	f383 8811 	msr	BASEPRI, r3
 8008078:	f3bf 8f6f 	isb	sy
 800807c:	f3bf 8f4f 	dsb	sy
 8008080:	613b      	str	r3, [r7, #16]
}
 8008082:	bf00      	nop
 8008084:	bf00      	nop
 8008086:	e7fd      	b.n	8008084 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d10b      	bne.n	80080a6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800808e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008092:	f383 8811 	msr	BASEPRI, r3
 8008096:	f3bf 8f6f 	isb	sy
 800809a:	f3bf 8f4f 	dsb	sy
 800809e:	60fb      	str	r3, [r7, #12]
}
 80080a0:	bf00      	nop
 80080a2:	bf00      	nop
 80080a4:	e7fd      	b.n	80080a2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80080a6:	f000 fe97 	bl	8008dd8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80080aa:	4b1d      	ldr	r3, [pc, #116]	@ (8008120 <xTaskCheckForTimeOut+0xc0>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	69ba      	ldr	r2, [r7, #24]
 80080b6:	1ad3      	subs	r3, r2, r3
 80080b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080c2:	d102      	bne.n	80080ca <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80080c4:	2300      	movs	r3, #0
 80080c6:	61fb      	str	r3, [r7, #28]
 80080c8:	e023      	b.n	8008112 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	4b15      	ldr	r3, [pc, #84]	@ (8008124 <xTaskCheckForTimeOut+0xc4>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d007      	beq.n	80080e6 <xTaskCheckForTimeOut+0x86>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	69ba      	ldr	r2, [r7, #24]
 80080dc:	429a      	cmp	r2, r3
 80080de:	d302      	bcc.n	80080e6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80080e0:	2301      	movs	r3, #1
 80080e2:	61fb      	str	r3, [r7, #28]
 80080e4:	e015      	b.n	8008112 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	697a      	ldr	r2, [r7, #20]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d20b      	bcs.n	8008108 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	1ad2      	subs	r2, r2, r3
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f7ff ff99 	bl	8008034 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008102:	2300      	movs	r3, #0
 8008104:	61fb      	str	r3, [r7, #28]
 8008106:	e004      	b.n	8008112 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	2200      	movs	r2, #0
 800810c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800810e:	2301      	movs	r3, #1
 8008110:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008112:	f000 fe93 	bl	8008e3c <vPortExitCritical>

	return xReturn;
 8008116:	69fb      	ldr	r3, [r7, #28]
}
 8008118:	4618      	mov	r0, r3
 800811a:	3720      	adds	r7, #32
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}
 8008120:	20000efc 	.word	0x20000efc
 8008124:	20000f10 	.word	0x20000f10

08008128 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008128:	b480      	push	{r7}
 800812a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800812c:	4b03      	ldr	r3, [pc, #12]	@ (800813c <vTaskMissedYield+0x14>)
 800812e:	2201      	movs	r2, #1
 8008130:	601a      	str	r2, [r3, #0]
}
 8008132:	bf00      	nop
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr
 800813c:	20000f0c 	.word	0x20000f0c

08008140 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008148:	f000 f852 	bl	80081f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800814c:	4b06      	ldr	r3, [pc, #24]	@ (8008168 <prvIdleTask+0x28>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2b01      	cmp	r3, #1
 8008152:	d9f9      	bls.n	8008148 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008154:	4b05      	ldr	r3, [pc, #20]	@ (800816c <prvIdleTask+0x2c>)
 8008156:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800815a:	601a      	str	r2, [r3, #0]
 800815c:	f3bf 8f4f 	dsb	sy
 8008160:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008164:	e7f0      	b.n	8008148 <prvIdleTask+0x8>
 8008166:	bf00      	nop
 8008168:	20000a28 	.word	0x20000a28
 800816c:	e000ed04 	.word	0xe000ed04

08008170 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008176:	2300      	movs	r3, #0
 8008178:	607b      	str	r3, [r7, #4]
 800817a:	e00c      	b.n	8008196 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	4613      	mov	r3, r2
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	4413      	add	r3, r2
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	4a12      	ldr	r2, [pc, #72]	@ (80081d0 <prvInitialiseTaskLists+0x60>)
 8008188:	4413      	add	r3, r2
 800818a:	4618      	mov	r0, r3
 800818c:	f7fe fcae 	bl	8006aec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	3301      	adds	r3, #1
 8008194:	607b      	str	r3, [r7, #4]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2b37      	cmp	r3, #55	@ 0x37
 800819a:	d9ef      	bls.n	800817c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800819c:	480d      	ldr	r0, [pc, #52]	@ (80081d4 <prvInitialiseTaskLists+0x64>)
 800819e:	f7fe fca5 	bl	8006aec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80081a2:	480d      	ldr	r0, [pc, #52]	@ (80081d8 <prvInitialiseTaskLists+0x68>)
 80081a4:	f7fe fca2 	bl	8006aec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80081a8:	480c      	ldr	r0, [pc, #48]	@ (80081dc <prvInitialiseTaskLists+0x6c>)
 80081aa:	f7fe fc9f 	bl	8006aec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80081ae:	480c      	ldr	r0, [pc, #48]	@ (80081e0 <prvInitialiseTaskLists+0x70>)
 80081b0:	f7fe fc9c 	bl	8006aec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80081b4:	480b      	ldr	r0, [pc, #44]	@ (80081e4 <prvInitialiseTaskLists+0x74>)
 80081b6:	f7fe fc99 	bl	8006aec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80081ba:	4b0b      	ldr	r3, [pc, #44]	@ (80081e8 <prvInitialiseTaskLists+0x78>)
 80081bc:	4a05      	ldr	r2, [pc, #20]	@ (80081d4 <prvInitialiseTaskLists+0x64>)
 80081be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80081c0:	4b0a      	ldr	r3, [pc, #40]	@ (80081ec <prvInitialiseTaskLists+0x7c>)
 80081c2:	4a05      	ldr	r2, [pc, #20]	@ (80081d8 <prvInitialiseTaskLists+0x68>)
 80081c4:	601a      	str	r2, [r3, #0]
}
 80081c6:	bf00      	nop
 80081c8:	3708      	adds	r7, #8
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop
 80081d0:	20000a28 	.word	0x20000a28
 80081d4:	20000e88 	.word	0x20000e88
 80081d8:	20000e9c 	.word	0x20000e9c
 80081dc:	20000eb8 	.word	0x20000eb8
 80081e0:	20000ecc 	.word	0x20000ecc
 80081e4:	20000ee4 	.word	0x20000ee4
 80081e8:	20000eb0 	.word	0x20000eb0
 80081ec:	20000eb4 	.word	0x20000eb4

080081f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80081f6:	e019      	b.n	800822c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80081f8:	f000 fdee 	bl	8008dd8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081fc:	4b10      	ldr	r3, [pc, #64]	@ (8008240 <prvCheckTasksWaitingTermination+0x50>)
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	68db      	ldr	r3, [r3, #12]
 8008202:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	3304      	adds	r3, #4
 8008208:	4618      	mov	r0, r3
 800820a:	f7fe fcf9 	bl	8006c00 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800820e:	4b0d      	ldr	r3, [pc, #52]	@ (8008244 <prvCheckTasksWaitingTermination+0x54>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	3b01      	subs	r3, #1
 8008214:	4a0b      	ldr	r2, [pc, #44]	@ (8008244 <prvCheckTasksWaitingTermination+0x54>)
 8008216:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008218:	4b0b      	ldr	r3, [pc, #44]	@ (8008248 <prvCheckTasksWaitingTermination+0x58>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	3b01      	subs	r3, #1
 800821e:	4a0a      	ldr	r2, [pc, #40]	@ (8008248 <prvCheckTasksWaitingTermination+0x58>)
 8008220:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008222:	f000 fe0b 	bl	8008e3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 f810 	bl	800824c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800822c:	4b06      	ldr	r3, [pc, #24]	@ (8008248 <prvCheckTasksWaitingTermination+0x58>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d1e1      	bne.n	80081f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008234:	bf00      	nop
 8008236:	bf00      	nop
 8008238:	3708      	adds	r7, #8
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	20000ecc 	.word	0x20000ecc
 8008244:	20000ef8 	.word	0x20000ef8
 8008248:	20000ee0 	.word	0x20000ee0

0800824c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	3354      	adds	r3, #84	@ 0x54
 8008258:	4618      	mov	r0, r3
 800825a:	f001 f8d5 	bl	8009408 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008264:	2b00      	cmp	r3, #0
 8008266:	d108      	bne.n	800827a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800826c:	4618      	mov	r0, r3
 800826e:	f000 ffa3 	bl	80091b8 <vPortFree>
				vPortFree( pxTCB );
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 ffa0 	bl	80091b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008278:	e019      	b.n	80082ae <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008280:	2b01      	cmp	r3, #1
 8008282:	d103      	bne.n	800828c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 ff97 	bl	80091b8 <vPortFree>
	}
 800828a:	e010      	b.n	80082ae <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008292:	2b02      	cmp	r3, #2
 8008294:	d00b      	beq.n	80082ae <prvDeleteTCB+0x62>
	__asm volatile
 8008296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800829a:	f383 8811 	msr	BASEPRI, r3
 800829e:	f3bf 8f6f 	isb	sy
 80082a2:	f3bf 8f4f 	dsb	sy
 80082a6:	60fb      	str	r3, [r7, #12]
}
 80082a8:	bf00      	nop
 80082aa:	bf00      	nop
 80082ac:	e7fd      	b.n	80082aa <prvDeleteTCB+0x5e>
	}
 80082ae:	bf00      	nop
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
	...

080082b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082be:	4b0c      	ldr	r3, [pc, #48]	@ (80082f0 <prvResetNextTaskUnblockTime+0x38>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d104      	bne.n	80082d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80082c8:	4b0a      	ldr	r3, [pc, #40]	@ (80082f4 <prvResetNextTaskUnblockTime+0x3c>)
 80082ca:	f04f 32ff 	mov.w	r2, #4294967295
 80082ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80082d0:	e008      	b.n	80082e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082d2:	4b07      	ldr	r3, [pc, #28]	@ (80082f0 <prvResetNextTaskUnblockTime+0x38>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	4a04      	ldr	r2, [pc, #16]	@ (80082f4 <prvResetNextTaskUnblockTime+0x3c>)
 80082e2:	6013      	str	r3, [r2, #0]
}
 80082e4:	bf00      	nop
 80082e6:	370c      	adds	r7, #12
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr
 80082f0:	20000eb0 	.word	0x20000eb0
 80082f4:	20000f18 	.word	0x20000f18

080082f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80082f8:	b480      	push	{r7}
 80082fa:	b083      	sub	sp, #12
 80082fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80082fe:	4b0b      	ldr	r3, [pc, #44]	@ (800832c <xTaskGetSchedulerState+0x34>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d102      	bne.n	800830c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008306:	2301      	movs	r3, #1
 8008308:	607b      	str	r3, [r7, #4]
 800830a:	e008      	b.n	800831e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800830c:	4b08      	ldr	r3, [pc, #32]	@ (8008330 <xTaskGetSchedulerState+0x38>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d102      	bne.n	800831a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008314:	2302      	movs	r3, #2
 8008316:	607b      	str	r3, [r7, #4]
 8008318:	e001      	b.n	800831e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800831a:	2300      	movs	r3, #0
 800831c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800831e:	687b      	ldr	r3, [r7, #4]
	}
 8008320:	4618      	mov	r0, r3
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr
 800832c:	20000f04 	.word	0x20000f04
 8008330:	20000f20 	.word	0x20000f20

08008334 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008334:	b580      	push	{r7, lr}
 8008336:	b086      	sub	sp, #24
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008340:	2300      	movs	r3, #0
 8008342:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d058      	beq.n	80083fc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800834a:	4b2f      	ldr	r3, [pc, #188]	@ (8008408 <xTaskPriorityDisinherit+0xd4>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	693a      	ldr	r2, [r7, #16]
 8008350:	429a      	cmp	r2, r3
 8008352:	d00b      	beq.n	800836c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008358:	f383 8811 	msr	BASEPRI, r3
 800835c:	f3bf 8f6f 	isb	sy
 8008360:	f3bf 8f4f 	dsb	sy
 8008364:	60fb      	str	r3, [r7, #12]
}
 8008366:	bf00      	nop
 8008368:	bf00      	nop
 800836a:	e7fd      	b.n	8008368 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008370:	2b00      	cmp	r3, #0
 8008372:	d10b      	bne.n	800838c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008378:	f383 8811 	msr	BASEPRI, r3
 800837c:	f3bf 8f6f 	isb	sy
 8008380:	f3bf 8f4f 	dsb	sy
 8008384:	60bb      	str	r3, [r7, #8]
}
 8008386:	bf00      	nop
 8008388:	bf00      	nop
 800838a:	e7fd      	b.n	8008388 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008390:	1e5a      	subs	r2, r3, #1
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800839e:	429a      	cmp	r2, r3
 80083a0:	d02c      	beq.n	80083fc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d128      	bne.n	80083fc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	3304      	adds	r3, #4
 80083ae:	4618      	mov	r0, r3
 80083b0:	f7fe fc26 	bl	8006c00 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083c0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083cc:	4b0f      	ldr	r3, [pc, #60]	@ (800840c <xTaskPriorityDisinherit+0xd8>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d903      	bls.n	80083dc <xTaskPriorityDisinherit+0xa8>
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083d8:	4a0c      	ldr	r2, [pc, #48]	@ (800840c <xTaskPriorityDisinherit+0xd8>)
 80083da:	6013      	str	r3, [r2, #0]
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083e0:	4613      	mov	r3, r2
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	4413      	add	r3, r2
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	4a09      	ldr	r2, [pc, #36]	@ (8008410 <xTaskPriorityDisinherit+0xdc>)
 80083ea:	441a      	add	r2, r3
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	3304      	adds	r3, #4
 80083f0:	4619      	mov	r1, r3
 80083f2:	4610      	mov	r0, r2
 80083f4:	f7fe fba7 	bl	8006b46 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80083f8:	2301      	movs	r3, #1
 80083fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80083fc:	697b      	ldr	r3, [r7, #20]
	}
 80083fe:	4618      	mov	r0, r3
 8008400:	3718      	adds	r7, #24
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	20000a24 	.word	0x20000a24
 800840c:	20000f00 	.word	0x20000f00
 8008410:	20000a28 	.word	0x20000a28

08008414 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800841e:	4b21      	ldr	r3, [pc, #132]	@ (80084a4 <prvAddCurrentTaskToDelayedList+0x90>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008424:	4b20      	ldr	r3, [pc, #128]	@ (80084a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	3304      	adds	r3, #4
 800842a:	4618      	mov	r0, r3
 800842c:	f7fe fbe8 	bl	8006c00 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008436:	d10a      	bne.n	800844e <prvAddCurrentTaskToDelayedList+0x3a>
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d007      	beq.n	800844e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800843e:	4b1a      	ldr	r3, [pc, #104]	@ (80084a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	3304      	adds	r3, #4
 8008444:	4619      	mov	r1, r3
 8008446:	4819      	ldr	r0, [pc, #100]	@ (80084ac <prvAddCurrentTaskToDelayedList+0x98>)
 8008448:	f7fe fb7d 	bl	8006b46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800844c:	e026      	b.n	800849c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800844e:	68fa      	ldr	r2, [r7, #12]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	4413      	add	r3, r2
 8008454:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008456:	4b14      	ldr	r3, [pc, #80]	@ (80084a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	68ba      	ldr	r2, [r7, #8]
 800845c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800845e:	68ba      	ldr	r2, [r7, #8]
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	429a      	cmp	r2, r3
 8008464:	d209      	bcs.n	800847a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008466:	4b12      	ldr	r3, [pc, #72]	@ (80084b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	4b0f      	ldr	r3, [pc, #60]	@ (80084a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	3304      	adds	r3, #4
 8008470:	4619      	mov	r1, r3
 8008472:	4610      	mov	r0, r2
 8008474:	f7fe fb8b 	bl	8006b8e <vListInsert>
}
 8008478:	e010      	b.n	800849c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800847a:	4b0e      	ldr	r3, [pc, #56]	@ (80084b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800847c:	681a      	ldr	r2, [r3, #0]
 800847e:	4b0a      	ldr	r3, [pc, #40]	@ (80084a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	3304      	adds	r3, #4
 8008484:	4619      	mov	r1, r3
 8008486:	4610      	mov	r0, r2
 8008488:	f7fe fb81 	bl	8006b8e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800848c:	4b0a      	ldr	r3, [pc, #40]	@ (80084b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	68ba      	ldr	r2, [r7, #8]
 8008492:	429a      	cmp	r2, r3
 8008494:	d202      	bcs.n	800849c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008496:	4a08      	ldr	r2, [pc, #32]	@ (80084b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	6013      	str	r3, [r2, #0]
}
 800849c:	bf00      	nop
 800849e:	3710      	adds	r7, #16
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}
 80084a4:	20000efc 	.word	0x20000efc
 80084a8:	20000a24 	.word	0x20000a24
 80084ac:	20000ee4 	.word	0x20000ee4
 80084b0:	20000eb4 	.word	0x20000eb4
 80084b4:	20000eb0 	.word	0x20000eb0
 80084b8:	20000f18 	.word	0x20000f18

080084bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b08a      	sub	sp, #40	@ 0x28
 80084c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80084c2:	2300      	movs	r3, #0
 80084c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80084c6:	f000 fb13 	bl	8008af0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80084ca:	4b1d      	ldr	r3, [pc, #116]	@ (8008540 <xTimerCreateTimerTask+0x84>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d021      	beq.n	8008516 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80084d2:	2300      	movs	r3, #0
 80084d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80084d6:	2300      	movs	r3, #0
 80084d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80084da:	1d3a      	adds	r2, r7, #4
 80084dc:	f107 0108 	add.w	r1, r7, #8
 80084e0:	f107 030c 	add.w	r3, r7, #12
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7fe fae7 	bl	8006ab8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80084ea:	6879      	ldr	r1, [r7, #4]
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	68fa      	ldr	r2, [r7, #12]
 80084f0:	9202      	str	r2, [sp, #8]
 80084f2:	9301      	str	r3, [sp, #4]
 80084f4:	2302      	movs	r3, #2
 80084f6:	9300      	str	r3, [sp, #0]
 80084f8:	2300      	movs	r3, #0
 80084fa:	460a      	mov	r2, r1
 80084fc:	4911      	ldr	r1, [pc, #68]	@ (8008544 <xTimerCreateTimerTask+0x88>)
 80084fe:	4812      	ldr	r0, [pc, #72]	@ (8008548 <xTimerCreateTimerTask+0x8c>)
 8008500:	f7ff f8a2 	bl	8007648 <xTaskCreateStatic>
 8008504:	4603      	mov	r3, r0
 8008506:	4a11      	ldr	r2, [pc, #68]	@ (800854c <xTimerCreateTimerTask+0x90>)
 8008508:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800850a:	4b10      	ldr	r3, [pc, #64]	@ (800854c <xTimerCreateTimerTask+0x90>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d001      	beq.n	8008516 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008512:	2301      	movs	r3, #1
 8008514:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d10b      	bne.n	8008534 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800851c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008520:	f383 8811 	msr	BASEPRI, r3
 8008524:	f3bf 8f6f 	isb	sy
 8008528:	f3bf 8f4f 	dsb	sy
 800852c:	613b      	str	r3, [r7, #16]
}
 800852e:	bf00      	nop
 8008530:	bf00      	nop
 8008532:	e7fd      	b.n	8008530 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008534:	697b      	ldr	r3, [r7, #20]
}
 8008536:	4618      	mov	r0, r3
 8008538:	3718      	adds	r7, #24
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
 800853e:	bf00      	nop
 8008540:	20000f54 	.word	0x20000f54
 8008544:	08009624 	.word	0x08009624
 8008548:	08008689 	.word	0x08008689
 800854c:	20000f58 	.word	0x20000f58

08008550 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b08a      	sub	sp, #40	@ 0x28
 8008554:	af00      	add	r7, sp, #0
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	60b9      	str	r1, [r7, #8]
 800855a:	607a      	str	r2, [r7, #4]
 800855c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800855e:	2300      	movs	r3, #0
 8008560:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d10b      	bne.n	8008580 <xTimerGenericCommand+0x30>
	__asm volatile
 8008568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800856c:	f383 8811 	msr	BASEPRI, r3
 8008570:	f3bf 8f6f 	isb	sy
 8008574:	f3bf 8f4f 	dsb	sy
 8008578:	623b      	str	r3, [r7, #32]
}
 800857a:	bf00      	nop
 800857c:	bf00      	nop
 800857e:	e7fd      	b.n	800857c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008580:	4b19      	ldr	r3, [pc, #100]	@ (80085e8 <xTimerGenericCommand+0x98>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d02a      	beq.n	80085de <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	2b05      	cmp	r3, #5
 8008598:	dc18      	bgt.n	80085cc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800859a:	f7ff fead 	bl	80082f8 <xTaskGetSchedulerState>
 800859e:	4603      	mov	r3, r0
 80085a0:	2b02      	cmp	r3, #2
 80085a2:	d109      	bne.n	80085b8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80085a4:	4b10      	ldr	r3, [pc, #64]	@ (80085e8 <xTimerGenericCommand+0x98>)
 80085a6:	6818      	ldr	r0, [r3, #0]
 80085a8:	f107 0110 	add.w	r1, r7, #16
 80085ac:	2300      	movs	r3, #0
 80085ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085b0:	f7fe fc5a 	bl	8006e68 <xQueueGenericSend>
 80085b4:	6278      	str	r0, [r7, #36]	@ 0x24
 80085b6:	e012      	b.n	80085de <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80085b8:	4b0b      	ldr	r3, [pc, #44]	@ (80085e8 <xTimerGenericCommand+0x98>)
 80085ba:	6818      	ldr	r0, [r3, #0]
 80085bc:	f107 0110 	add.w	r1, r7, #16
 80085c0:	2300      	movs	r3, #0
 80085c2:	2200      	movs	r2, #0
 80085c4:	f7fe fc50 	bl	8006e68 <xQueueGenericSend>
 80085c8:	6278      	str	r0, [r7, #36]	@ 0x24
 80085ca:	e008      	b.n	80085de <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80085cc:	4b06      	ldr	r3, [pc, #24]	@ (80085e8 <xTimerGenericCommand+0x98>)
 80085ce:	6818      	ldr	r0, [r3, #0]
 80085d0:	f107 0110 	add.w	r1, r7, #16
 80085d4:	2300      	movs	r3, #0
 80085d6:	683a      	ldr	r2, [r7, #0]
 80085d8:	f7fe fd48 	bl	800706c <xQueueGenericSendFromISR>
 80085dc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80085de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3728      	adds	r7, #40	@ 0x28
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}
 80085e8:	20000f54 	.word	0x20000f54

080085ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b088      	sub	sp, #32
 80085f0:	af02      	add	r7, sp, #8
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085f6:	4b23      	ldr	r3, [pc, #140]	@ (8008684 <prvProcessExpiredTimer+0x98>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	68db      	ldr	r3, [r3, #12]
 80085fc:	68db      	ldr	r3, [r3, #12]
 80085fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	3304      	adds	r3, #4
 8008604:	4618      	mov	r0, r3
 8008606:	f7fe fafb 	bl	8006c00 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008610:	f003 0304 	and.w	r3, r3, #4
 8008614:	2b00      	cmp	r3, #0
 8008616:	d023      	beq.n	8008660 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	699a      	ldr	r2, [r3, #24]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	18d1      	adds	r1, r2, r3
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	683a      	ldr	r2, [r7, #0]
 8008624:	6978      	ldr	r0, [r7, #20]
 8008626:	f000 f8d5 	bl	80087d4 <prvInsertTimerInActiveList>
 800862a:	4603      	mov	r3, r0
 800862c:	2b00      	cmp	r3, #0
 800862e:	d020      	beq.n	8008672 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008630:	2300      	movs	r3, #0
 8008632:	9300      	str	r3, [sp, #0]
 8008634:	2300      	movs	r3, #0
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	2100      	movs	r1, #0
 800863a:	6978      	ldr	r0, [r7, #20]
 800863c:	f7ff ff88 	bl	8008550 <xTimerGenericCommand>
 8008640:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d114      	bne.n	8008672 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800864c:	f383 8811 	msr	BASEPRI, r3
 8008650:	f3bf 8f6f 	isb	sy
 8008654:	f3bf 8f4f 	dsb	sy
 8008658:	60fb      	str	r3, [r7, #12]
}
 800865a:	bf00      	nop
 800865c:	bf00      	nop
 800865e:	e7fd      	b.n	800865c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008666:	f023 0301 	bic.w	r3, r3, #1
 800866a:	b2da      	uxtb	r2, r3
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	6a1b      	ldr	r3, [r3, #32]
 8008676:	6978      	ldr	r0, [r7, #20]
 8008678:	4798      	blx	r3
}
 800867a:	bf00      	nop
 800867c:	3718      	adds	r7, #24
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	20000f4c 	.word	0x20000f4c

08008688 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008690:	f107 0308 	add.w	r3, r7, #8
 8008694:	4618      	mov	r0, r3
 8008696:	f000 f859 	bl	800874c <prvGetNextExpireTime>
 800869a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	4619      	mov	r1, r3
 80086a0:	68f8      	ldr	r0, [r7, #12]
 80086a2:	f000 f805 	bl	80086b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80086a6:	f000 f8d7 	bl	8008858 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80086aa:	bf00      	nop
 80086ac:	e7f0      	b.n	8008690 <prvTimerTask+0x8>
	...

080086b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80086ba:	f7ff fa29 	bl	8007b10 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80086be:	f107 0308 	add.w	r3, r7, #8
 80086c2:	4618      	mov	r0, r3
 80086c4:	f000 f866 	bl	8008794 <prvSampleTimeNow>
 80086c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d130      	bne.n	8008732 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d10a      	bne.n	80086ec <prvProcessTimerOrBlockTask+0x3c>
 80086d6:	687a      	ldr	r2, [r7, #4]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	429a      	cmp	r2, r3
 80086dc:	d806      	bhi.n	80086ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80086de:	f7ff fa25 	bl	8007b2c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80086e2:	68f9      	ldr	r1, [r7, #12]
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f7ff ff81 	bl	80085ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80086ea:	e024      	b.n	8008736 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d008      	beq.n	8008704 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80086f2:	4b13      	ldr	r3, [pc, #76]	@ (8008740 <prvProcessTimerOrBlockTask+0x90>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d101      	bne.n	8008700 <prvProcessTimerOrBlockTask+0x50>
 80086fc:	2301      	movs	r3, #1
 80086fe:	e000      	b.n	8008702 <prvProcessTimerOrBlockTask+0x52>
 8008700:	2300      	movs	r3, #0
 8008702:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008704:	4b0f      	ldr	r3, [pc, #60]	@ (8008744 <prvProcessTimerOrBlockTask+0x94>)
 8008706:	6818      	ldr	r0, [r3, #0]
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	1ad3      	subs	r3, r2, r3
 800870e:	683a      	ldr	r2, [r7, #0]
 8008710:	4619      	mov	r1, r3
 8008712:	f7fe ff65 	bl	80075e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008716:	f7ff fa09 	bl	8007b2c <xTaskResumeAll>
 800871a:	4603      	mov	r3, r0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d10a      	bne.n	8008736 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008720:	4b09      	ldr	r3, [pc, #36]	@ (8008748 <prvProcessTimerOrBlockTask+0x98>)
 8008722:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008726:	601a      	str	r2, [r3, #0]
 8008728:	f3bf 8f4f 	dsb	sy
 800872c:	f3bf 8f6f 	isb	sy
}
 8008730:	e001      	b.n	8008736 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008732:	f7ff f9fb 	bl	8007b2c <xTaskResumeAll>
}
 8008736:	bf00      	nop
 8008738:	3710      	adds	r7, #16
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}
 800873e:	bf00      	nop
 8008740:	20000f50 	.word	0x20000f50
 8008744:	20000f54 	.word	0x20000f54
 8008748:	e000ed04 	.word	0xe000ed04

0800874c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800874c:	b480      	push	{r7}
 800874e:	b085      	sub	sp, #20
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008754:	4b0e      	ldr	r3, [pc, #56]	@ (8008790 <prvGetNextExpireTime+0x44>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d101      	bne.n	8008762 <prvGetNextExpireTime+0x16>
 800875e:	2201      	movs	r2, #1
 8008760:	e000      	b.n	8008764 <prvGetNextExpireTime+0x18>
 8008762:	2200      	movs	r2, #0
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d105      	bne.n	800877c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008770:	4b07      	ldr	r3, [pc, #28]	@ (8008790 <prvGetNextExpireTime+0x44>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	68db      	ldr	r3, [r3, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	60fb      	str	r3, [r7, #12]
 800877a:	e001      	b.n	8008780 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800877c:	2300      	movs	r3, #0
 800877e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008780:	68fb      	ldr	r3, [r7, #12]
}
 8008782:	4618      	mov	r0, r3
 8008784:	3714      	adds	r7, #20
 8008786:	46bd      	mov	sp, r7
 8008788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878c:	4770      	bx	lr
 800878e:	bf00      	nop
 8008790:	20000f4c 	.word	0x20000f4c

08008794 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800879c:	f7ff fa64 	bl	8007c68 <xTaskGetTickCount>
 80087a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80087a2:	4b0b      	ldr	r3, [pc, #44]	@ (80087d0 <prvSampleTimeNow+0x3c>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	68fa      	ldr	r2, [r7, #12]
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d205      	bcs.n	80087b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80087ac:	f000 f93a 	bl	8008a24 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2201      	movs	r2, #1
 80087b4:	601a      	str	r2, [r3, #0]
 80087b6:	e002      	b.n	80087be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80087be:	4a04      	ldr	r2, [pc, #16]	@ (80087d0 <prvSampleTimeNow+0x3c>)
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80087c4:	68fb      	ldr	r3, [r7, #12]
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3710      	adds	r7, #16
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	20000f5c 	.word	0x20000f5c

080087d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b086      	sub	sp, #24
 80087d8:	af00      	add	r7, sp, #0
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	60b9      	str	r1, [r7, #8]
 80087de:	607a      	str	r2, [r7, #4]
 80087e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80087e2:	2300      	movs	r3, #0
 80087e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	68ba      	ldr	r2, [r7, #8]
 80087ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	68fa      	ldr	r2, [r7, #12]
 80087f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80087f2:	68ba      	ldr	r2, [r7, #8]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d812      	bhi.n	8008820 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087fa:	687a      	ldr	r2, [r7, #4]
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	1ad2      	subs	r2, r2, r3
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	699b      	ldr	r3, [r3, #24]
 8008804:	429a      	cmp	r2, r3
 8008806:	d302      	bcc.n	800880e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008808:	2301      	movs	r3, #1
 800880a:	617b      	str	r3, [r7, #20]
 800880c:	e01b      	b.n	8008846 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800880e:	4b10      	ldr	r3, [pc, #64]	@ (8008850 <prvInsertTimerInActiveList+0x7c>)
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	3304      	adds	r3, #4
 8008816:	4619      	mov	r1, r3
 8008818:	4610      	mov	r0, r2
 800881a:	f7fe f9b8 	bl	8006b8e <vListInsert>
 800881e:	e012      	b.n	8008846 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008820:	687a      	ldr	r2, [r7, #4]
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	429a      	cmp	r2, r3
 8008826:	d206      	bcs.n	8008836 <prvInsertTimerInActiveList+0x62>
 8008828:	68ba      	ldr	r2, [r7, #8]
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	429a      	cmp	r2, r3
 800882e:	d302      	bcc.n	8008836 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008830:	2301      	movs	r3, #1
 8008832:	617b      	str	r3, [r7, #20]
 8008834:	e007      	b.n	8008846 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008836:	4b07      	ldr	r3, [pc, #28]	@ (8008854 <prvInsertTimerInActiveList+0x80>)
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	3304      	adds	r3, #4
 800883e:	4619      	mov	r1, r3
 8008840:	4610      	mov	r0, r2
 8008842:	f7fe f9a4 	bl	8006b8e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008846:	697b      	ldr	r3, [r7, #20]
}
 8008848:	4618      	mov	r0, r3
 800884a:	3718      	adds	r7, #24
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}
 8008850:	20000f50 	.word	0x20000f50
 8008854:	20000f4c 	.word	0x20000f4c

08008858 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b08e      	sub	sp, #56	@ 0x38
 800885c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800885e:	e0ce      	b.n	80089fe <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2b00      	cmp	r3, #0
 8008864:	da19      	bge.n	800889a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008866:	1d3b      	adds	r3, r7, #4
 8008868:	3304      	adds	r3, #4
 800886a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800886c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800886e:	2b00      	cmp	r3, #0
 8008870:	d10b      	bne.n	800888a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008876:	f383 8811 	msr	BASEPRI, r3
 800887a:	f3bf 8f6f 	isb	sy
 800887e:	f3bf 8f4f 	dsb	sy
 8008882:	61fb      	str	r3, [r7, #28]
}
 8008884:	bf00      	nop
 8008886:	bf00      	nop
 8008888:	e7fd      	b.n	8008886 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800888a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008890:	6850      	ldr	r0, [r2, #4]
 8008892:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008894:	6892      	ldr	r2, [r2, #8]
 8008896:	4611      	mov	r1, r2
 8008898:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2b00      	cmp	r3, #0
 800889e:	f2c0 80ae 	blt.w	80089fe <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80088a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088a8:	695b      	ldr	r3, [r3, #20]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d004      	beq.n	80088b8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80088ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088b0:	3304      	adds	r3, #4
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7fe f9a4 	bl	8006c00 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80088b8:	463b      	mov	r3, r7
 80088ba:	4618      	mov	r0, r3
 80088bc:	f7ff ff6a 	bl	8008794 <prvSampleTimeNow>
 80088c0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2b09      	cmp	r3, #9
 80088c6:	f200 8097 	bhi.w	80089f8 <prvProcessReceivedCommands+0x1a0>
 80088ca:	a201      	add	r2, pc, #4	@ (adr r2, 80088d0 <prvProcessReceivedCommands+0x78>)
 80088cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088d0:	080088f9 	.word	0x080088f9
 80088d4:	080088f9 	.word	0x080088f9
 80088d8:	080088f9 	.word	0x080088f9
 80088dc:	0800896f 	.word	0x0800896f
 80088e0:	08008983 	.word	0x08008983
 80088e4:	080089cf 	.word	0x080089cf
 80088e8:	080088f9 	.word	0x080088f9
 80088ec:	080088f9 	.word	0x080088f9
 80088f0:	0800896f 	.word	0x0800896f
 80088f4:	08008983 	.word	0x08008983
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80088f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80088fe:	f043 0301 	orr.w	r3, r3, #1
 8008902:	b2da      	uxtb	r2, r3
 8008904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008906:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800890a:	68ba      	ldr	r2, [r7, #8]
 800890c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800890e:	699b      	ldr	r3, [r3, #24]
 8008910:	18d1      	adds	r1, r2, r3
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008916:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008918:	f7ff ff5c 	bl	80087d4 <prvInsertTimerInActiveList>
 800891c:	4603      	mov	r3, r0
 800891e:	2b00      	cmp	r3, #0
 8008920:	d06c      	beq.n	80089fc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008924:	6a1b      	ldr	r3, [r3, #32]
 8008926:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008928:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800892a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800892c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008930:	f003 0304 	and.w	r3, r3, #4
 8008934:	2b00      	cmp	r3, #0
 8008936:	d061      	beq.n	80089fc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008938:	68ba      	ldr	r2, [r7, #8]
 800893a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800893c:	699b      	ldr	r3, [r3, #24]
 800893e:	441a      	add	r2, r3
 8008940:	2300      	movs	r3, #0
 8008942:	9300      	str	r3, [sp, #0]
 8008944:	2300      	movs	r3, #0
 8008946:	2100      	movs	r1, #0
 8008948:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800894a:	f7ff fe01 	bl	8008550 <xTimerGenericCommand>
 800894e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008950:	6a3b      	ldr	r3, [r7, #32]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d152      	bne.n	80089fc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800895a:	f383 8811 	msr	BASEPRI, r3
 800895e:	f3bf 8f6f 	isb	sy
 8008962:	f3bf 8f4f 	dsb	sy
 8008966:	61bb      	str	r3, [r7, #24]
}
 8008968:	bf00      	nop
 800896a:	bf00      	nop
 800896c:	e7fd      	b.n	800896a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800896e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008970:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008974:	f023 0301 	bic.w	r3, r3, #1
 8008978:	b2da      	uxtb	r2, r3
 800897a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800897c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008980:	e03d      	b.n	80089fe <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008984:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008988:	f043 0301 	orr.w	r3, r3, #1
 800898c:	b2da      	uxtb	r2, r3
 800898e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008990:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008994:	68ba      	ldr	r2, [r7, #8]
 8008996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008998:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800899a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800899c:	699b      	ldr	r3, [r3, #24]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d10b      	bne.n	80089ba <prvProcessReceivedCommands+0x162>
	__asm volatile
 80089a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a6:	f383 8811 	msr	BASEPRI, r3
 80089aa:	f3bf 8f6f 	isb	sy
 80089ae:	f3bf 8f4f 	dsb	sy
 80089b2:	617b      	str	r3, [r7, #20]
}
 80089b4:	bf00      	nop
 80089b6:	bf00      	nop
 80089b8:	e7fd      	b.n	80089b6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80089ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089bc:	699a      	ldr	r2, [r3, #24]
 80089be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c0:	18d1      	adds	r1, r2, r3
 80089c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089c8:	f7ff ff04 	bl	80087d4 <prvInsertTimerInActiveList>
					break;
 80089cc:	e017      	b.n	80089fe <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80089ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80089d4:	f003 0302 	and.w	r3, r3, #2
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d103      	bne.n	80089e4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80089dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089de:	f000 fbeb 	bl	80091b8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80089e2:	e00c      	b.n	80089fe <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80089e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80089ea:	f023 0301 	bic.w	r3, r3, #1
 80089ee:	b2da      	uxtb	r2, r3
 80089f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80089f6:	e002      	b.n	80089fe <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80089f8:	bf00      	nop
 80089fa:	e000      	b.n	80089fe <prvProcessReceivedCommands+0x1a6>
					break;
 80089fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80089fe:	4b08      	ldr	r3, [pc, #32]	@ (8008a20 <prvProcessReceivedCommands+0x1c8>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	1d39      	adds	r1, r7, #4
 8008a04:	2200      	movs	r2, #0
 8008a06:	4618      	mov	r0, r3
 8008a08:	f7fe fbce 	bl	80071a8 <xQueueReceive>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	f47f af26 	bne.w	8008860 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008a14:	bf00      	nop
 8008a16:	bf00      	nop
 8008a18:	3730      	adds	r7, #48	@ 0x30
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
 8008a1e:	bf00      	nop
 8008a20:	20000f54 	.word	0x20000f54

08008a24 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b088      	sub	sp, #32
 8008a28:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008a2a:	e049      	b.n	8008ac0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a2c:	4b2e      	ldr	r3, [pc, #184]	@ (8008ae8 <prvSwitchTimerLists+0xc4>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	68db      	ldr	r3, [r3, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a36:	4b2c      	ldr	r3, [pc, #176]	@ (8008ae8 <prvSwitchTimerLists+0xc4>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	68db      	ldr	r3, [r3, #12]
 8008a3c:	68db      	ldr	r3, [r3, #12]
 8008a3e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	3304      	adds	r3, #4
 8008a44:	4618      	mov	r0, r3
 8008a46:	f7fe f8db 	bl	8006c00 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	6a1b      	ldr	r3, [r3, #32]
 8008a4e:	68f8      	ldr	r0, [r7, #12]
 8008a50:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a58:	f003 0304 	and.w	r3, r3, #4
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d02f      	beq.n	8008ac0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	699b      	ldr	r3, [r3, #24]
 8008a64:	693a      	ldr	r2, [r7, #16]
 8008a66:	4413      	add	r3, r2
 8008a68:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008a6a:	68ba      	ldr	r2, [r7, #8]
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	d90e      	bls.n	8008a90 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	68ba      	ldr	r2, [r7, #8]
 8008a76:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	68fa      	ldr	r2, [r7, #12]
 8008a7c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008a7e:	4b1a      	ldr	r3, [pc, #104]	@ (8008ae8 <prvSwitchTimerLists+0xc4>)
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	3304      	adds	r3, #4
 8008a86:	4619      	mov	r1, r3
 8008a88:	4610      	mov	r0, r2
 8008a8a:	f7fe f880 	bl	8006b8e <vListInsert>
 8008a8e:	e017      	b.n	8008ac0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008a90:	2300      	movs	r3, #0
 8008a92:	9300      	str	r3, [sp, #0]
 8008a94:	2300      	movs	r3, #0
 8008a96:	693a      	ldr	r2, [r7, #16]
 8008a98:	2100      	movs	r1, #0
 8008a9a:	68f8      	ldr	r0, [r7, #12]
 8008a9c:	f7ff fd58 	bl	8008550 <xTimerGenericCommand>
 8008aa0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d10b      	bne.n	8008ac0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aac:	f383 8811 	msr	BASEPRI, r3
 8008ab0:	f3bf 8f6f 	isb	sy
 8008ab4:	f3bf 8f4f 	dsb	sy
 8008ab8:	603b      	str	r3, [r7, #0]
}
 8008aba:	bf00      	nop
 8008abc:	bf00      	nop
 8008abe:	e7fd      	b.n	8008abc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008ac0:	4b09      	ldr	r3, [pc, #36]	@ (8008ae8 <prvSwitchTimerLists+0xc4>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d1b0      	bne.n	8008a2c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008aca:	4b07      	ldr	r3, [pc, #28]	@ (8008ae8 <prvSwitchTimerLists+0xc4>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008ad0:	4b06      	ldr	r3, [pc, #24]	@ (8008aec <prvSwitchTimerLists+0xc8>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a04      	ldr	r2, [pc, #16]	@ (8008ae8 <prvSwitchTimerLists+0xc4>)
 8008ad6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008ad8:	4a04      	ldr	r2, [pc, #16]	@ (8008aec <prvSwitchTimerLists+0xc8>)
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	6013      	str	r3, [r2, #0]
}
 8008ade:	bf00      	nop
 8008ae0:	3718      	adds	r7, #24
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	20000f4c 	.word	0x20000f4c
 8008aec:	20000f50 	.word	0x20000f50

08008af0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b082      	sub	sp, #8
 8008af4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008af6:	f000 f96f 	bl	8008dd8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008afa:	4b15      	ldr	r3, [pc, #84]	@ (8008b50 <prvCheckForValidListAndQueue+0x60>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d120      	bne.n	8008b44 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008b02:	4814      	ldr	r0, [pc, #80]	@ (8008b54 <prvCheckForValidListAndQueue+0x64>)
 8008b04:	f7fd fff2 	bl	8006aec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008b08:	4813      	ldr	r0, [pc, #76]	@ (8008b58 <prvCheckForValidListAndQueue+0x68>)
 8008b0a:	f7fd ffef 	bl	8006aec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008b0e:	4b13      	ldr	r3, [pc, #76]	@ (8008b5c <prvCheckForValidListAndQueue+0x6c>)
 8008b10:	4a10      	ldr	r2, [pc, #64]	@ (8008b54 <prvCheckForValidListAndQueue+0x64>)
 8008b12:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008b14:	4b12      	ldr	r3, [pc, #72]	@ (8008b60 <prvCheckForValidListAndQueue+0x70>)
 8008b16:	4a10      	ldr	r2, [pc, #64]	@ (8008b58 <prvCheckForValidListAndQueue+0x68>)
 8008b18:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	9300      	str	r3, [sp, #0]
 8008b1e:	4b11      	ldr	r3, [pc, #68]	@ (8008b64 <prvCheckForValidListAndQueue+0x74>)
 8008b20:	4a11      	ldr	r2, [pc, #68]	@ (8008b68 <prvCheckForValidListAndQueue+0x78>)
 8008b22:	2110      	movs	r1, #16
 8008b24:	200a      	movs	r0, #10
 8008b26:	f7fe f8ff 	bl	8006d28 <xQueueGenericCreateStatic>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	4a08      	ldr	r2, [pc, #32]	@ (8008b50 <prvCheckForValidListAndQueue+0x60>)
 8008b2e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008b30:	4b07      	ldr	r3, [pc, #28]	@ (8008b50 <prvCheckForValidListAndQueue+0x60>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d005      	beq.n	8008b44 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008b38:	4b05      	ldr	r3, [pc, #20]	@ (8008b50 <prvCheckForValidListAndQueue+0x60>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	490b      	ldr	r1, [pc, #44]	@ (8008b6c <prvCheckForValidListAndQueue+0x7c>)
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f7fe fd24 	bl	800758c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008b44:	f000 f97a 	bl	8008e3c <vPortExitCritical>
}
 8008b48:	bf00      	nop
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
 8008b4e:	bf00      	nop
 8008b50:	20000f54 	.word	0x20000f54
 8008b54:	20000f24 	.word	0x20000f24
 8008b58:	20000f38 	.word	0x20000f38
 8008b5c:	20000f4c 	.word	0x20000f4c
 8008b60:	20000f50 	.word	0x20000f50
 8008b64:	20001000 	.word	0x20001000
 8008b68:	20000f60 	.word	0x20000f60
 8008b6c:	0800962c 	.word	0x0800962c

08008b70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008b70:	b480      	push	{r7}
 8008b72:	b085      	sub	sp, #20
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	60f8      	str	r0, [r7, #12]
 8008b78:	60b9      	str	r1, [r7, #8]
 8008b7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	3b04      	subs	r3, #4
 8008b80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008b88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	3b04      	subs	r3, #4
 8008b8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	f023 0201 	bic.w	r2, r3, #1
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	3b04      	subs	r3, #4
 8008b9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008ba0:	4a0c      	ldr	r2, [pc, #48]	@ (8008bd4 <pxPortInitialiseStack+0x64>)
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	3b14      	subs	r3, #20
 8008baa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008bac:	687a      	ldr	r2, [r7, #4]
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	3b04      	subs	r3, #4
 8008bb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f06f 0202 	mvn.w	r2, #2
 8008bbe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	3b20      	subs	r3, #32
 8008bc4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3714      	adds	r7, #20
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr
 8008bd4:	08008bd9 	.word	0x08008bd9

08008bd8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b085      	sub	sp, #20
 8008bdc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008bde:	2300      	movs	r3, #0
 8008be0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008be2:	4b13      	ldr	r3, [pc, #76]	@ (8008c30 <prvTaskExitError+0x58>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bea:	d00b      	beq.n	8008c04 <prvTaskExitError+0x2c>
	__asm volatile
 8008bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bf0:	f383 8811 	msr	BASEPRI, r3
 8008bf4:	f3bf 8f6f 	isb	sy
 8008bf8:	f3bf 8f4f 	dsb	sy
 8008bfc:	60fb      	str	r3, [r7, #12]
}
 8008bfe:	bf00      	nop
 8008c00:	bf00      	nop
 8008c02:	e7fd      	b.n	8008c00 <prvTaskExitError+0x28>
	__asm volatile
 8008c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c08:	f383 8811 	msr	BASEPRI, r3
 8008c0c:	f3bf 8f6f 	isb	sy
 8008c10:	f3bf 8f4f 	dsb	sy
 8008c14:	60bb      	str	r3, [r7, #8]
}
 8008c16:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008c18:	bf00      	nop
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d0fc      	beq.n	8008c1a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008c20:	bf00      	nop
 8008c22:	bf00      	nop
 8008c24:	3714      	adds	r7, #20
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr
 8008c2e:	bf00      	nop
 8008c30:	2000000c 	.word	0x2000000c
	...

08008c40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008c40:	4b07      	ldr	r3, [pc, #28]	@ (8008c60 <pxCurrentTCBConst2>)
 8008c42:	6819      	ldr	r1, [r3, #0]
 8008c44:	6808      	ldr	r0, [r1, #0]
 8008c46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c4a:	f380 8809 	msr	PSP, r0
 8008c4e:	f3bf 8f6f 	isb	sy
 8008c52:	f04f 0000 	mov.w	r0, #0
 8008c56:	f380 8811 	msr	BASEPRI, r0
 8008c5a:	4770      	bx	lr
 8008c5c:	f3af 8000 	nop.w

08008c60 <pxCurrentTCBConst2>:
 8008c60:	20000a24 	.word	0x20000a24
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008c64:	bf00      	nop
 8008c66:	bf00      	nop

08008c68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008c68:	4808      	ldr	r0, [pc, #32]	@ (8008c8c <prvPortStartFirstTask+0x24>)
 8008c6a:	6800      	ldr	r0, [r0, #0]
 8008c6c:	6800      	ldr	r0, [r0, #0]
 8008c6e:	f380 8808 	msr	MSP, r0
 8008c72:	f04f 0000 	mov.w	r0, #0
 8008c76:	f380 8814 	msr	CONTROL, r0
 8008c7a:	b662      	cpsie	i
 8008c7c:	b661      	cpsie	f
 8008c7e:	f3bf 8f4f 	dsb	sy
 8008c82:	f3bf 8f6f 	isb	sy
 8008c86:	df00      	svc	0
 8008c88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008c8a:	bf00      	nop
 8008c8c:	e000ed08 	.word	0xe000ed08

08008c90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b086      	sub	sp, #24
 8008c94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008c96:	4b47      	ldr	r3, [pc, #284]	@ (8008db4 <xPortStartScheduler+0x124>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4a47      	ldr	r2, [pc, #284]	@ (8008db8 <xPortStartScheduler+0x128>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d10b      	bne.n	8008cb8 <xPortStartScheduler+0x28>
	__asm volatile
 8008ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ca4:	f383 8811 	msr	BASEPRI, r3
 8008ca8:	f3bf 8f6f 	isb	sy
 8008cac:	f3bf 8f4f 	dsb	sy
 8008cb0:	613b      	str	r3, [r7, #16]
}
 8008cb2:	bf00      	nop
 8008cb4:	bf00      	nop
 8008cb6:	e7fd      	b.n	8008cb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008cb8:	4b3e      	ldr	r3, [pc, #248]	@ (8008db4 <xPortStartScheduler+0x124>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a3f      	ldr	r2, [pc, #252]	@ (8008dbc <xPortStartScheduler+0x12c>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d10b      	bne.n	8008cda <xPortStartScheduler+0x4a>
	__asm volatile
 8008cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cc6:	f383 8811 	msr	BASEPRI, r3
 8008cca:	f3bf 8f6f 	isb	sy
 8008cce:	f3bf 8f4f 	dsb	sy
 8008cd2:	60fb      	str	r3, [r7, #12]
}
 8008cd4:	bf00      	nop
 8008cd6:	bf00      	nop
 8008cd8:	e7fd      	b.n	8008cd6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008cda:	4b39      	ldr	r3, [pc, #228]	@ (8008dc0 <xPortStartScheduler+0x130>)
 8008cdc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	781b      	ldrb	r3, [r3, #0]
 8008ce2:	b2db      	uxtb	r3, r3
 8008ce4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	22ff      	movs	r2, #255	@ 0xff
 8008cea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008cf4:	78fb      	ldrb	r3, [r7, #3]
 8008cf6:	b2db      	uxtb	r3, r3
 8008cf8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008cfc:	b2da      	uxtb	r2, r3
 8008cfe:	4b31      	ldr	r3, [pc, #196]	@ (8008dc4 <xPortStartScheduler+0x134>)
 8008d00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008d02:	4b31      	ldr	r3, [pc, #196]	@ (8008dc8 <xPortStartScheduler+0x138>)
 8008d04:	2207      	movs	r2, #7
 8008d06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d08:	e009      	b.n	8008d1e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008d0a:	4b2f      	ldr	r3, [pc, #188]	@ (8008dc8 <xPortStartScheduler+0x138>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	3b01      	subs	r3, #1
 8008d10:	4a2d      	ldr	r2, [pc, #180]	@ (8008dc8 <xPortStartScheduler+0x138>)
 8008d12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008d14:	78fb      	ldrb	r3, [r7, #3]
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	005b      	lsls	r3, r3, #1
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d1e:	78fb      	ldrb	r3, [r7, #3]
 8008d20:	b2db      	uxtb	r3, r3
 8008d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d26:	2b80      	cmp	r3, #128	@ 0x80
 8008d28:	d0ef      	beq.n	8008d0a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008d2a:	4b27      	ldr	r3, [pc, #156]	@ (8008dc8 <xPortStartScheduler+0x138>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f1c3 0307 	rsb	r3, r3, #7
 8008d32:	2b04      	cmp	r3, #4
 8008d34:	d00b      	beq.n	8008d4e <xPortStartScheduler+0xbe>
	__asm volatile
 8008d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d3a:	f383 8811 	msr	BASEPRI, r3
 8008d3e:	f3bf 8f6f 	isb	sy
 8008d42:	f3bf 8f4f 	dsb	sy
 8008d46:	60bb      	str	r3, [r7, #8]
}
 8008d48:	bf00      	nop
 8008d4a:	bf00      	nop
 8008d4c:	e7fd      	b.n	8008d4a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008d4e:	4b1e      	ldr	r3, [pc, #120]	@ (8008dc8 <xPortStartScheduler+0x138>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	021b      	lsls	r3, r3, #8
 8008d54:	4a1c      	ldr	r2, [pc, #112]	@ (8008dc8 <xPortStartScheduler+0x138>)
 8008d56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008d58:	4b1b      	ldr	r3, [pc, #108]	@ (8008dc8 <xPortStartScheduler+0x138>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008d60:	4a19      	ldr	r2, [pc, #100]	@ (8008dc8 <xPortStartScheduler+0x138>)
 8008d62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	b2da      	uxtb	r2, r3
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008d6c:	4b17      	ldr	r3, [pc, #92]	@ (8008dcc <xPortStartScheduler+0x13c>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a16      	ldr	r2, [pc, #88]	@ (8008dcc <xPortStartScheduler+0x13c>)
 8008d72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008d76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008d78:	4b14      	ldr	r3, [pc, #80]	@ (8008dcc <xPortStartScheduler+0x13c>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a13      	ldr	r2, [pc, #76]	@ (8008dcc <xPortStartScheduler+0x13c>)
 8008d7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008d82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008d84:	f000 f8da 	bl	8008f3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008d88:	4b11      	ldr	r3, [pc, #68]	@ (8008dd0 <xPortStartScheduler+0x140>)
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008d8e:	f000 f8f9 	bl	8008f84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008d92:	4b10      	ldr	r3, [pc, #64]	@ (8008dd4 <xPortStartScheduler+0x144>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a0f      	ldr	r2, [pc, #60]	@ (8008dd4 <xPortStartScheduler+0x144>)
 8008d98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008d9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008d9e:	f7ff ff63 	bl	8008c68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008da2:	f7ff f82b 	bl	8007dfc <vTaskSwitchContext>
	prvTaskExitError();
 8008da6:	f7ff ff17 	bl	8008bd8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008daa:	2300      	movs	r3, #0
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3718      	adds	r7, #24
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	e000ed00 	.word	0xe000ed00
 8008db8:	410fc271 	.word	0x410fc271
 8008dbc:	410fc270 	.word	0x410fc270
 8008dc0:	e000e400 	.word	0xe000e400
 8008dc4:	20001050 	.word	0x20001050
 8008dc8:	20001054 	.word	0x20001054
 8008dcc:	e000ed20 	.word	0xe000ed20
 8008dd0:	2000000c 	.word	0x2000000c
 8008dd4:	e000ef34 	.word	0xe000ef34

08008dd8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b083      	sub	sp, #12
 8008ddc:	af00      	add	r7, sp, #0
	__asm volatile
 8008dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008de2:	f383 8811 	msr	BASEPRI, r3
 8008de6:	f3bf 8f6f 	isb	sy
 8008dea:	f3bf 8f4f 	dsb	sy
 8008dee:	607b      	str	r3, [r7, #4]
}
 8008df0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008df2:	4b10      	ldr	r3, [pc, #64]	@ (8008e34 <vPortEnterCritical+0x5c>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	3301      	adds	r3, #1
 8008df8:	4a0e      	ldr	r2, [pc, #56]	@ (8008e34 <vPortEnterCritical+0x5c>)
 8008dfa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008dfc:	4b0d      	ldr	r3, [pc, #52]	@ (8008e34 <vPortEnterCritical+0x5c>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d110      	bne.n	8008e26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008e04:	4b0c      	ldr	r3, [pc, #48]	@ (8008e38 <vPortEnterCritical+0x60>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d00b      	beq.n	8008e26 <vPortEnterCritical+0x4e>
	__asm volatile
 8008e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e12:	f383 8811 	msr	BASEPRI, r3
 8008e16:	f3bf 8f6f 	isb	sy
 8008e1a:	f3bf 8f4f 	dsb	sy
 8008e1e:	603b      	str	r3, [r7, #0]
}
 8008e20:	bf00      	nop
 8008e22:	bf00      	nop
 8008e24:	e7fd      	b.n	8008e22 <vPortEnterCritical+0x4a>
	}
}
 8008e26:	bf00      	nop
 8008e28:	370c      	adds	r7, #12
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr
 8008e32:	bf00      	nop
 8008e34:	2000000c 	.word	0x2000000c
 8008e38:	e000ed04 	.word	0xe000ed04

08008e3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b083      	sub	sp, #12
 8008e40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008e42:	4b12      	ldr	r3, [pc, #72]	@ (8008e8c <vPortExitCritical+0x50>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d10b      	bne.n	8008e62 <vPortExitCritical+0x26>
	__asm volatile
 8008e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e4e:	f383 8811 	msr	BASEPRI, r3
 8008e52:	f3bf 8f6f 	isb	sy
 8008e56:	f3bf 8f4f 	dsb	sy
 8008e5a:	607b      	str	r3, [r7, #4]
}
 8008e5c:	bf00      	nop
 8008e5e:	bf00      	nop
 8008e60:	e7fd      	b.n	8008e5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008e62:	4b0a      	ldr	r3, [pc, #40]	@ (8008e8c <vPortExitCritical+0x50>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	3b01      	subs	r3, #1
 8008e68:	4a08      	ldr	r2, [pc, #32]	@ (8008e8c <vPortExitCritical+0x50>)
 8008e6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008e6c:	4b07      	ldr	r3, [pc, #28]	@ (8008e8c <vPortExitCritical+0x50>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d105      	bne.n	8008e80 <vPortExitCritical+0x44>
 8008e74:	2300      	movs	r3, #0
 8008e76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	f383 8811 	msr	BASEPRI, r3
}
 8008e7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008e80:	bf00      	nop
 8008e82:	370c      	adds	r7, #12
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr
 8008e8c:	2000000c 	.word	0x2000000c

08008e90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008e90:	f3ef 8009 	mrs	r0, PSP
 8008e94:	f3bf 8f6f 	isb	sy
 8008e98:	4b15      	ldr	r3, [pc, #84]	@ (8008ef0 <pxCurrentTCBConst>)
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	f01e 0f10 	tst.w	lr, #16
 8008ea0:	bf08      	it	eq
 8008ea2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008ea6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eaa:	6010      	str	r0, [r2, #0]
 8008eac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008eb0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008eb4:	f380 8811 	msr	BASEPRI, r0
 8008eb8:	f3bf 8f4f 	dsb	sy
 8008ebc:	f3bf 8f6f 	isb	sy
 8008ec0:	f7fe ff9c 	bl	8007dfc <vTaskSwitchContext>
 8008ec4:	f04f 0000 	mov.w	r0, #0
 8008ec8:	f380 8811 	msr	BASEPRI, r0
 8008ecc:	bc09      	pop	{r0, r3}
 8008ece:	6819      	ldr	r1, [r3, #0]
 8008ed0:	6808      	ldr	r0, [r1, #0]
 8008ed2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ed6:	f01e 0f10 	tst.w	lr, #16
 8008eda:	bf08      	it	eq
 8008edc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008ee0:	f380 8809 	msr	PSP, r0
 8008ee4:	f3bf 8f6f 	isb	sy
 8008ee8:	4770      	bx	lr
 8008eea:	bf00      	nop
 8008eec:	f3af 8000 	nop.w

08008ef0 <pxCurrentTCBConst>:
 8008ef0:	20000a24 	.word	0x20000a24
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008ef4:	bf00      	nop
 8008ef6:	bf00      	nop

08008ef8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
	__asm volatile
 8008efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f02:	f383 8811 	msr	BASEPRI, r3
 8008f06:	f3bf 8f6f 	isb	sy
 8008f0a:	f3bf 8f4f 	dsb	sy
 8008f0e:	607b      	str	r3, [r7, #4]
}
 8008f10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008f12:	f7fe feb9 	bl	8007c88 <xTaskIncrementTick>
 8008f16:	4603      	mov	r3, r0
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d003      	beq.n	8008f24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008f1c:	4b06      	ldr	r3, [pc, #24]	@ (8008f38 <xPortSysTickHandler+0x40>)
 8008f1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f22:	601a      	str	r2, [r3, #0]
 8008f24:	2300      	movs	r3, #0
 8008f26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	f383 8811 	msr	BASEPRI, r3
}
 8008f2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008f30:	bf00      	nop
 8008f32:	3708      	adds	r7, #8
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}
 8008f38:	e000ed04 	.word	0xe000ed04

08008f3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008f40:	4b0b      	ldr	r3, [pc, #44]	@ (8008f70 <vPortSetupTimerInterrupt+0x34>)
 8008f42:	2200      	movs	r2, #0
 8008f44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008f46:	4b0b      	ldr	r3, [pc, #44]	@ (8008f74 <vPortSetupTimerInterrupt+0x38>)
 8008f48:	2200      	movs	r2, #0
 8008f4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8008f78 <vPortSetupTimerInterrupt+0x3c>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4a0a      	ldr	r2, [pc, #40]	@ (8008f7c <vPortSetupTimerInterrupt+0x40>)
 8008f52:	fba2 2303 	umull	r2, r3, r2, r3
 8008f56:	099b      	lsrs	r3, r3, #6
 8008f58:	4a09      	ldr	r2, [pc, #36]	@ (8008f80 <vPortSetupTimerInterrupt+0x44>)
 8008f5a:	3b01      	subs	r3, #1
 8008f5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008f5e:	4b04      	ldr	r3, [pc, #16]	@ (8008f70 <vPortSetupTimerInterrupt+0x34>)
 8008f60:	2207      	movs	r2, #7
 8008f62:	601a      	str	r2, [r3, #0]
}
 8008f64:	bf00      	nop
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr
 8008f6e:	bf00      	nop
 8008f70:	e000e010 	.word	0xe000e010
 8008f74:	e000e018 	.word	0xe000e018
 8008f78:	20000000 	.word	0x20000000
 8008f7c:	10624dd3 	.word	0x10624dd3
 8008f80:	e000e014 	.word	0xe000e014

08008f84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008f84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008f94 <vPortEnableVFP+0x10>
 8008f88:	6801      	ldr	r1, [r0, #0]
 8008f8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008f8e:	6001      	str	r1, [r0, #0]
 8008f90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008f92:	bf00      	nop
 8008f94:	e000ed88 	.word	0xe000ed88

08008f98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008f98:	b480      	push	{r7}
 8008f9a:	b085      	sub	sp, #20
 8008f9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008f9e:	f3ef 8305 	mrs	r3, IPSR
 8008fa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2b0f      	cmp	r3, #15
 8008fa8:	d915      	bls.n	8008fd6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008faa:	4a18      	ldr	r2, [pc, #96]	@ (800900c <vPortValidateInterruptPriority+0x74>)
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	4413      	add	r3, r2
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008fb4:	4b16      	ldr	r3, [pc, #88]	@ (8009010 <vPortValidateInterruptPriority+0x78>)
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	7afa      	ldrb	r2, [r7, #11]
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d20b      	bcs.n	8008fd6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fc2:	f383 8811 	msr	BASEPRI, r3
 8008fc6:	f3bf 8f6f 	isb	sy
 8008fca:	f3bf 8f4f 	dsb	sy
 8008fce:	607b      	str	r3, [r7, #4]
}
 8008fd0:	bf00      	nop
 8008fd2:	bf00      	nop
 8008fd4:	e7fd      	b.n	8008fd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008fd6:	4b0f      	ldr	r3, [pc, #60]	@ (8009014 <vPortValidateInterruptPriority+0x7c>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008fde:	4b0e      	ldr	r3, [pc, #56]	@ (8009018 <vPortValidateInterruptPriority+0x80>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d90b      	bls.n	8008ffe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fea:	f383 8811 	msr	BASEPRI, r3
 8008fee:	f3bf 8f6f 	isb	sy
 8008ff2:	f3bf 8f4f 	dsb	sy
 8008ff6:	603b      	str	r3, [r7, #0]
}
 8008ff8:	bf00      	nop
 8008ffa:	bf00      	nop
 8008ffc:	e7fd      	b.n	8008ffa <vPortValidateInterruptPriority+0x62>
	}
 8008ffe:	bf00      	nop
 8009000:	3714      	adds	r7, #20
 8009002:	46bd      	mov	sp, r7
 8009004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009008:	4770      	bx	lr
 800900a:	bf00      	nop
 800900c:	e000e3f0 	.word	0xe000e3f0
 8009010:	20001050 	.word	0x20001050
 8009014:	e000ed0c 	.word	0xe000ed0c
 8009018:	20001054 	.word	0x20001054

0800901c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b08a      	sub	sp, #40	@ 0x28
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009024:	2300      	movs	r3, #0
 8009026:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009028:	f7fe fd72 	bl	8007b10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800902c:	4b5c      	ldr	r3, [pc, #368]	@ (80091a0 <pvPortMalloc+0x184>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d101      	bne.n	8009038 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009034:	f000 f924 	bl	8009280 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009038:	4b5a      	ldr	r3, [pc, #360]	@ (80091a4 <pvPortMalloc+0x188>)
 800903a:	681a      	ldr	r2, [r3, #0]
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	4013      	ands	r3, r2
 8009040:	2b00      	cmp	r3, #0
 8009042:	f040 8095 	bne.w	8009170 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d01e      	beq.n	800908a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800904c:	2208      	movs	r2, #8
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	4413      	add	r3, r2
 8009052:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f003 0307 	and.w	r3, r3, #7
 800905a:	2b00      	cmp	r3, #0
 800905c:	d015      	beq.n	800908a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f023 0307 	bic.w	r3, r3, #7
 8009064:	3308      	adds	r3, #8
 8009066:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f003 0307 	and.w	r3, r3, #7
 800906e:	2b00      	cmp	r3, #0
 8009070:	d00b      	beq.n	800908a <pvPortMalloc+0x6e>
	__asm volatile
 8009072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009076:	f383 8811 	msr	BASEPRI, r3
 800907a:	f3bf 8f6f 	isb	sy
 800907e:	f3bf 8f4f 	dsb	sy
 8009082:	617b      	str	r3, [r7, #20]
}
 8009084:	bf00      	nop
 8009086:	bf00      	nop
 8009088:	e7fd      	b.n	8009086 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d06f      	beq.n	8009170 <pvPortMalloc+0x154>
 8009090:	4b45      	ldr	r3, [pc, #276]	@ (80091a8 <pvPortMalloc+0x18c>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	429a      	cmp	r2, r3
 8009098:	d86a      	bhi.n	8009170 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800909a:	4b44      	ldr	r3, [pc, #272]	@ (80091ac <pvPortMalloc+0x190>)
 800909c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800909e:	4b43      	ldr	r3, [pc, #268]	@ (80091ac <pvPortMalloc+0x190>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80090a4:	e004      	b.n	80090b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80090a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80090aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80090b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d903      	bls.n	80090c2 <pvPortMalloc+0xa6>
 80090ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d1f1      	bne.n	80090a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80090c2:	4b37      	ldr	r3, [pc, #220]	@ (80091a0 <pvPortMalloc+0x184>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d051      	beq.n	8009170 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80090cc:	6a3b      	ldr	r3, [r7, #32]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	2208      	movs	r2, #8
 80090d2:	4413      	add	r3, r2
 80090d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80090d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	6a3b      	ldr	r3, [r7, #32]
 80090dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80090de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e0:	685a      	ldr	r2, [r3, #4]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	1ad2      	subs	r2, r2, r3
 80090e6:	2308      	movs	r3, #8
 80090e8:	005b      	lsls	r3, r3, #1
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d920      	bls.n	8009130 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80090ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	4413      	add	r3, r2
 80090f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80090f6:	69bb      	ldr	r3, [r7, #24]
 80090f8:	f003 0307 	and.w	r3, r3, #7
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d00b      	beq.n	8009118 <pvPortMalloc+0xfc>
	__asm volatile
 8009100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009104:	f383 8811 	msr	BASEPRI, r3
 8009108:	f3bf 8f6f 	isb	sy
 800910c:	f3bf 8f4f 	dsb	sy
 8009110:	613b      	str	r3, [r7, #16]
}
 8009112:	bf00      	nop
 8009114:	bf00      	nop
 8009116:	e7fd      	b.n	8009114 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800911a:	685a      	ldr	r2, [r3, #4]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	1ad2      	subs	r2, r2, r3
 8009120:	69bb      	ldr	r3, [r7, #24]
 8009122:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800912a:	69b8      	ldr	r0, [r7, #24]
 800912c:	f000 f90a 	bl	8009344 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009130:	4b1d      	ldr	r3, [pc, #116]	@ (80091a8 <pvPortMalloc+0x18c>)
 8009132:	681a      	ldr	r2, [r3, #0]
 8009134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	1ad3      	subs	r3, r2, r3
 800913a:	4a1b      	ldr	r2, [pc, #108]	@ (80091a8 <pvPortMalloc+0x18c>)
 800913c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800913e:	4b1a      	ldr	r3, [pc, #104]	@ (80091a8 <pvPortMalloc+0x18c>)
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	4b1b      	ldr	r3, [pc, #108]	@ (80091b0 <pvPortMalloc+0x194>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	429a      	cmp	r2, r3
 8009148:	d203      	bcs.n	8009152 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800914a:	4b17      	ldr	r3, [pc, #92]	@ (80091a8 <pvPortMalloc+0x18c>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4a18      	ldr	r2, [pc, #96]	@ (80091b0 <pvPortMalloc+0x194>)
 8009150:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009154:	685a      	ldr	r2, [r3, #4]
 8009156:	4b13      	ldr	r3, [pc, #76]	@ (80091a4 <pvPortMalloc+0x188>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	431a      	orrs	r2, r3
 800915c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800915e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009162:	2200      	movs	r2, #0
 8009164:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009166:	4b13      	ldr	r3, [pc, #76]	@ (80091b4 <pvPortMalloc+0x198>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	3301      	adds	r3, #1
 800916c:	4a11      	ldr	r2, [pc, #68]	@ (80091b4 <pvPortMalloc+0x198>)
 800916e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009170:	f7fe fcdc 	bl	8007b2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009174:	69fb      	ldr	r3, [r7, #28]
 8009176:	f003 0307 	and.w	r3, r3, #7
 800917a:	2b00      	cmp	r3, #0
 800917c:	d00b      	beq.n	8009196 <pvPortMalloc+0x17a>
	__asm volatile
 800917e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009182:	f383 8811 	msr	BASEPRI, r3
 8009186:	f3bf 8f6f 	isb	sy
 800918a:	f3bf 8f4f 	dsb	sy
 800918e:	60fb      	str	r3, [r7, #12]
}
 8009190:	bf00      	nop
 8009192:	bf00      	nop
 8009194:	e7fd      	b.n	8009192 <pvPortMalloc+0x176>
	return pvReturn;
 8009196:	69fb      	ldr	r3, [r7, #28]
}
 8009198:	4618      	mov	r0, r3
 800919a:	3728      	adds	r7, #40	@ 0x28
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}
 80091a0:	20001c18 	.word	0x20001c18
 80091a4:	20001c2c 	.word	0x20001c2c
 80091a8:	20001c1c 	.word	0x20001c1c
 80091ac:	20001c10 	.word	0x20001c10
 80091b0:	20001c20 	.word	0x20001c20
 80091b4:	20001c24 	.word	0x20001c24

080091b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b086      	sub	sp, #24
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d04f      	beq.n	800926a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80091ca:	2308      	movs	r3, #8
 80091cc:	425b      	negs	r3, r3
 80091ce:	697a      	ldr	r2, [r7, #20]
 80091d0:	4413      	add	r3, r2
 80091d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	685a      	ldr	r2, [r3, #4]
 80091dc:	4b25      	ldr	r3, [pc, #148]	@ (8009274 <vPortFree+0xbc>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4013      	ands	r3, r2
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d10b      	bne.n	80091fe <vPortFree+0x46>
	__asm volatile
 80091e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ea:	f383 8811 	msr	BASEPRI, r3
 80091ee:	f3bf 8f6f 	isb	sy
 80091f2:	f3bf 8f4f 	dsb	sy
 80091f6:	60fb      	str	r3, [r7, #12]
}
 80091f8:	bf00      	nop
 80091fa:	bf00      	nop
 80091fc:	e7fd      	b.n	80091fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d00b      	beq.n	800921e <vPortFree+0x66>
	__asm volatile
 8009206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800920a:	f383 8811 	msr	BASEPRI, r3
 800920e:	f3bf 8f6f 	isb	sy
 8009212:	f3bf 8f4f 	dsb	sy
 8009216:	60bb      	str	r3, [r7, #8]
}
 8009218:	bf00      	nop
 800921a:	bf00      	nop
 800921c:	e7fd      	b.n	800921a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	685a      	ldr	r2, [r3, #4]
 8009222:	4b14      	ldr	r3, [pc, #80]	@ (8009274 <vPortFree+0xbc>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4013      	ands	r3, r2
 8009228:	2b00      	cmp	r3, #0
 800922a:	d01e      	beq.n	800926a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d11a      	bne.n	800926a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	685a      	ldr	r2, [r3, #4]
 8009238:	4b0e      	ldr	r3, [pc, #56]	@ (8009274 <vPortFree+0xbc>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	43db      	mvns	r3, r3
 800923e:	401a      	ands	r2, r3
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009244:	f7fe fc64 	bl	8007b10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	685a      	ldr	r2, [r3, #4]
 800924c:	4b0a      	ldr	r3, [pc, #40]	@ (8009278 <vPortFree+0xc0>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4413      	add	r3, r2
 8009252:	4a09      	ldr	r2, [pc, #36]	@ (8009278 <vPortFree+0xc0>)
 8009254:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009256:	6938      	ldr	r0, [r7, #16]
 8009258:	f000 f874 	bl	8009344 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800925c:	4b07      	ldr	r3, [pc, #28]	@ (800927c <vPortFree+0xc4>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	3301      	adds	r3, #1
 8009262:	4a06      	ldr	r2, [pc, #24]	@ (800927c <vPortFree+0xc4>)
 8009264:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009266:	f7fe fc61 	bl	8007b2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800926a:	bf00      	nop
 800926c:	3718      	adds	r7, #24
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
 8009272:	bf00      	nop
 8009274:	20001c2c 	.word	0x20001c2c
 8009278:	20001c1c 	.word	0x20001c1c
 800927c:	20001c28 	.word	0x20001c28

08009280 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009280:	b480      	push	{r7}
 8009282:	b085      	sub	sp, #20
 8009284:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009286:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800928a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800928c:	4b27      	ldr	r3, [pc, #156]	@ (800932c <prvHeapInit+0xac>)
 800928e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f003 0307 	and.w	r3, r3, #7
 8009296:	2b00      	cmp	r3, #0
 8009298:	d00c      	beq.n	80092b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	3307      	adds	r3, #7
 800929e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f023 0307 	bic.w	r3, r3, #7
 80092a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80092a8:	68ba      	ldr	r2, [r7, #8]
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	1ad3      	subs	r3, r2, r3
 80092ae:	4a1f      	ldr	r2, [pc, #124]	@ (800932c <prvHeapInit+0xac>)
 80092b0:	4413      	add	r3, r2
 80092b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80092b8:	4a1d      	ldr	r2, [pc, #116]	@ (8009330 <prvHeapInit+0xb0>)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80092be:	4b1c      	ldr	r3, [pc, #112]	@ (8009330 <prvHeapInit+0xb0>)
 80092c0:	2200      	movs	r2, #0
 80092c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	68ba      	ldr	r2, [r7, #8]
 80092c8:	4413      	add	r3, r2
 80092ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80092cc:	2208      	movs	r2, #8
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	1a9b      	subs	r3, r3, r2
 80092d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f023 0307 	bic.w	r3, r3, #7
 80092da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	4a15      	ldr	r2, [pc, #84]	@ (8009334 <prvHeapInit+0xb4>)
 80092e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80092e2:	4b14      	ldr	r3, [pc, #80]	@ (8009334 <prvHeapInit+0xb4>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	2200      	movs	r2, #0
 80092e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80092ea:	4b12      	ldr	r3, [pc, #72]	@ (8009334 <prvHeapInit+0xb4>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	2200      	movs	r2, #0
 80092f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	68fa      	ldr	r2, [r7, #12]
 80092fa:	1ad2      	subs	r2, r2, r3
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009300:	4b0c      	ldr	r3, [pc, #48]	@ (8009334 <prvHeapInit+0xb4>)
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	685b      	ldr	r3, [r3, #4]
 800930c:	4a0a      	ldr	r2, [pc, #40]	@ (8009338 <prvHeapInit+0xb8>)
 800930e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	685b      	ldr	r3, [r3, #4]
 8009314:	4a09      	ldr	r2, [pc, #36]	@ (800933c <prvHeapInit+0xbc>)
 8009316:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009318:	4b09      	ldr	r3, [pc, #36]	@ (8009340 <prvHeapInit+0xc0>)
 800931a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800931e:	601a      	str	r2, [r3, #0]
}
 8009320:	bf00      	nop
 8009322:	3714      	adds	r7, #20
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr
 800932c:	20001058 	.word	0x20001058
 8009330:	20001c10 	.word	0x20001c10
 8009334:	20001c18 	.word	0x20001c18
 8009338:	20001c20 	.word	0x20001c20
 800933c:	20001c1c 	.word	0x20001c1c
 8009340:	20001c2c 	.word	0x20001c2c

08009344 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009344:	b480      	push	{r7}
 8009346:	b085      	sub	sp, #20
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800934c:	4b28      	ldr	r3, [pc, #160]	@ (80093f0 <prvInsertBlockIntoFreeList+0xac>)
 800934e:	60fb      	str	r3, [r7, #12]
 8009350:	e002      	b.n	8009358 <prvInsertBlockIntoFreeList+0x14>
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	60fb      	str	r3, [r7, #12]
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	429a      	cmp	r2, r3
 8009360:	d8f7      	bhi.n	8009352 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	68ba      	ldr	r2, [r7, #8]
 800936c:	4413      	add	r3, r2
 800936e:	687a      	ldr	r2, [r7, #4]
 8009370:	429a      	cmp	r2, r3
 8009372:	d108      	bne.n	8009386 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	685a      	ldr	r2, [r3, #4]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	685b      	ldr	r3, [r3, #4]
 800937c:	441a      	add	r2, r3
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	68ba      	ldr	r2, [r7, #8]
 8009390:	441a      	add	r2, r3
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	429a      	cmp	r2, r3
 8009398:	d118      	bne.n	80093cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681a      	ldr	r2, [r3, #0]
 800939e:	4b15      	ldr	r3, [pc, #84]	@ (80093f4 <prvInsertBlockIntoFreeList+0xb0>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	429a      	cmp	r2, r3
 80093a4:	d00d      	beq.n	80093c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	685a      	ldr	r2, [r3, #4]
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	441a      	add	r2, r3
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	681a      	ldr	r2, [r3, #0]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	601a      	str	r2, [r3, #0]
 80093c0:	e008      	b.n	80093d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80093c2:	4b0c      	ldr	r3, [pc, #48]	@ (80093f4 <prvInsertBlockIntoFreeList+0xb0>)
 80093c4:	681a      	ldr	r2, [r3, #0]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	601a      	str	r2, [r3, #0]
 80093ca:	e003      	b.n	80093d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80093d4:	68fa      	ldr	r2, [r7, #12]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	429a      	cmp	r2, r3
 80093da:	d002      	beq.n	80093e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093e2:	bf00      	nop
 80093e4:	3714      	adds	r7, #20
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr
 80093ee:	bf00      	nop
 80093f0:	20001c10 	.word	0x20001c10
 80093f4:	20001c18 	.word	0x20001c18

080093f8 <memset>:
 80093f8:	4402      	add	r2, r0
 80093fa:	4603      	mov	r3, r0
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d100      	bne.n	8009402 <memset+0xa>
 8009400:	4770      	bx	lr
 8009402:	f803 1b01 	strb.w	r1, [r3], #1
 8009406:	e7f9      	b.n	80093fc <memset+0x4>

08009408 <_reclaim_reent>:
 8009408:	4b29      	ldr	r3, [pc, #164]	@ (80094b0 <_reclaim_reent+0xa8>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4283      	cmp	r3, r0
 800940e:	b570      	push	{r4, r5, r6, lr}
 8009410:	4604      	mov	r4, r0
 8009412:	d04b      	beq.n	80094ac <_reclaim_reent+0xa4>
 8009414:	69c3      	ldr	r3, [r0, #28]
 8009416:	b1ab      	cbz	r3, 8009444 <_reclaim_reent+0x3c>
 8009418:	68db      	ldr	r3, [r3, #12]
 800941a:	b16b      	cbz	r3, 8009438 <_reclaim_reent+0x30>
 800941c:	2500      	movs	r5, #0
 800941e:	69e3      	ldr	r3, [r4, #28]
 8009420:	68db      	ldr	r3, [r3, #12]
 8009422:	5959      	ldr	r1, [r3, r5]
 8009424:	2900      	cmp	r1, #0
 8009426:	d13b      	bne.n	80094a0 <_reclaim_reent+0x98>
 8009428:	3504      	adds	r5, #4
 800942a:	2d80      	cmp	r5, #128	@ 0x80
 800942c:	d1f7      	bne.n	800941e <_reclaim_reent+0x16>
 800942e:	69e3      	ldr	r3, [r4, #28]
 8009430:	4620      	mov	r0, r4
 8009432:	68d9      	ldr	r1, [r3, #12]
 8009434:	f000 f872 	bl	800951c <_free_r>
 8009438:	69e3      	ldr	r3, [r4, #28]
 800943a:	6819      	ldr	r1, [r3, #0]
 800943c:	b111      	cbz	r1, 8009444 <_reclaim_reent+0x3c>
 800943e:	4620      	mov	r0, r4
 8009440:	f000 f86c 	bl	800951c <_free_r>
 8009444:	6961      	ldr	r1, [r4, #20]
 8009446:	b111      	cbz	r1, 800944e <_reclaim_reent+0x46>
 8009448:	4620      	mov	r0, r4
 800944a:	f000 f867 	bl	800951c <_free_r>
 800944e:	69e1      	ldr	r1, [r4, #28]
 8009450:	b111      	cbz	r1, 8009458 <_reclaim_reent+0x50>
 8009452:	4620      	mov	r0, r4
 8009454:	f000 f862 	bl	800951c <_free_r>
 8009458:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800945a:	b111      	cbz	r1, 8009462 <_reclaim_reent+0x5a>
 800945c:	4620      	mov	r0, r4
 800945e:	f000 f85d 	bl	800951c <_free_r>
 8009462:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009464:	b111      	cbz	r1, 800946c <_reclaim_reent+0x64>
 8009466:	4620      	mov	r0, r4
 8009468:	f000 f858 	bl	800951c <_free_r>
 800946c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800946e:	b111      	cbz	r1, 8009476 <_reclaim_reent+0x6e>
 8009470:	4620      	mov	r0, r4
 8009472:	f000 f853 	bl	800951c <_free_r>
 8009476:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009478:	b111      	cbz	r1, 8009480 <_reclaim_reent+0x78>
 800947a:	4620      	mov	r0, r4
 800947c:	f000 f84e 	bl	800951c <_free_r>
 8009480:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009482:	b111      	cbz	r1, 800948a <_reclaim_reent+0x82>
 8009484:	4620      	mov	r0, r4
 8009486:	f000 f849 	bl	800951c <_free_r>
 800948a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800948c:	b111      	cbz	r1, 8009494 <_reclaim_reent+0x8c>
 800948e:	4620      	mov	r0, r4
 8009490:	f000 f844 	bl	800951c <_free_r>
 8009494:	6a23      	ldr	r3, [r4, #32]
 8009496:	b14b      	cbz	r3, 80094ac <_reclaim_reent+0xa4>
 8009498:	4620      	mov	r0, r4
 800949a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800949e:	4718      	bx	r3
 80094a0:	680e      	ldr	r6, [r1, #0]
 80094a2:	4620      	mov	r0, r4
 80094a4:	f000 f83a 	bl	800951c <_free_r>
 80094a8:	4631      	mov	r1, r6
 80094aa:	e7bb      	b.n	8009424 <_reclaim_reent+0x1c>
 80094ac:	bd70      	pop	{r4, r5, r6, pc}
 80094ae:	bf00      	nop
 80094b0:	20000010 	.word	0x20000010

080094b4 <__libc_init_array>:
 80094b4:	b570      	push	{r4, r5, r6, lr}
 80094b6:	4d0d      	ldr	r5, [pc, #52]	@ (80094ec <__libc_init_array+0x38>)
 80094b8:	4c0d      	ldr	r4, [pc, #52]	@ (80094f0 <__libc_init_array+0x3c>)
 80094ba:	1b64      	subs	r4, r4, r5
 80094bc:	10a4      	asrs	r4, r4, #2
 80094be:	2600      	movs	r6, #0
 80094c0:	42a6      	cmp	r6, r4
 80094c2:	d109      	bne.n	80094d8 <__libc_init_array+0x24>
 80094c4:	4d0b      	ldr	r5, [pc, #44]	@ (80094f4 <__libc_init_array+0x40>)
 80094c6:	4c0c      	ldr	r4, [pc, #48]	@ (80094f8 <__libc_init_array+0x44>)
 80094c8:	f000 f87e 	bl	80095c8 <_init>
 80094cc:	1b64      	subs	r4, r4, r5
 80094ce:	10a4      	asrs	r4, r4, #2
 80094d0:	2600      	movs	r6, #0
 80094d2:	42a6      	cmp	r6, r4
 80094d4:	d105      	bne.n	80094e2 <__libc_init_array+0x2e>
 80094d6:	bd70      	pop	{r4, r5, r6, pc}
 80094d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80094dc:	4798      	blx	r3
 80094de:	3601      	adds	r6, #1
 80094e0:	e7ee      	b.n	80094c0 <__libc_init_array+0xc>
 80094e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80094e6:	4798      	blx	r3
 80094e8:	3601      	adds	r6, #1
 80094ea:	e7f2      	b.n	80094d2 <__libc_init_array+0x1e>
 80094ec:	08009714 	.word	0x08009714
 80094f0:	08009714 	.word	0x08009714
 80094f4:	08009714 	.word	0x08009714
 80094f8:	08009718 	.word	0x08009718

080094fc <__retarget_lock_acquire_recursive>:
 80094fc:	4770      	bx	lr

080094fe <__retarget_lock_release_recursive>:
 80094fe:	4770      	bx	lr

08009500 <memcpy>:
 8009500:	440a      	add	r2, r1
 8009502:	4291      	cmp	r1, r2
 8009504:	f100 33ff 	add.w	r3, r0, #4294967295
 8009508:	d100      	bne.n	800950c <memcpy+0xc>
 800950a:	4770      	bx	lr
 800950c:	b510      	push	{r4, lr}
 800950e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009512:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009516:	4291      	cmp	r1, r2
 8009518:	d1f9      	bne.n	800950e <memcpy+0xe>
 800951a:	bd10      	pop	{r4, pc}

0800951c <_free_r>:
 800951c:	b538      	push	{r3, r4, r5, lr}
 800951e:	4605      	mov	r5, r0
 8009520:	2900      	cmp	r1, #0
 8009522:	d041      	beq.n	80095a8 <_free_r+0x8c>
 8009524:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009528:	1f0c      	subs	r4, r1, #4
 800952a:	2b00      	cmp	r3, #0
 800952c:	bfb8      	it	lt
 800952e:	18e4      	addlt	r4, r4, r3
 8009530:	f000 f83e 	bl	80095b0 <__malloc_lock>
 8009534:	4a1d      	ldr	r2, [pc, #116]	@ (80095ac <_free_r+0x90>)
 8009536:	6813      	ldr	r3, [r2, #0]
 8009538:	b933      	cbnz	r3, 8009548 <_free_r+0x2c>
 800953a:	6063      	str	r3, [r4, #4]
 800953c:	6014      	str	r4, [r2, #0]
 800953e:	4628      	mov	r0, r5
 8009540:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009544:	f000 b83a 	b.w	80095bc <__malloc_unlock>
 8009548:	42a3      	cmp	r3, r4
 800954a:	d908      	bls.n	800955e <_free_r+0x42>
 800954c:	6820      	ldr	r0, [r4, #0]
 800954e:	1821      	adds	r1, r4, r0
 8009550:	428b      	cmp	r3, r1
 8009552:	bf01      	itttt	eq
 8009554:	6819      	ldreq	r1, [r3, #0]
 8009556:	685b      	ldreq	r3, [r3, #4]
 8009558:	1809      	addeq	r1, r1, r0
 800955a:	6021      	streq	r1, [r4, #0]
 800955c:	e7ed      	b.n	800953a <_free_r+0x1e>
 800955e:	461a      	mov	r2, r3
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	b10b      	cbz	r3, 8009568 <_free_r+0x4c>
 8009564:	42a3      	cmp	r3, r4
 8009566:	d9fa      	bls.n	800955e <_free_r+0x42>
 8009568:	6811      	ldr	r1, [r2, #0]
 800956a:	1850      	adds	r0, r2, r1
 800956c:	42a0      	cmp	r0, r4
 800956e:	d10b      	bne.n	8009588 <_free_r+0x6c>
 8009570:	6820      	ldr	r0, [r4, #0]
 8009572:	4401      	add	r1, r0
 8009574:	1850      	adds	r0, r2, r1
 8009576:	4283      	cmp	r3, r0
 8009578:	6011      	str	r1, [r2, #0]
 800957a:	d1e0      	bne.n	800953e <_free_r+0x22>
 800957c:	6818      	ldr	r0, [r3, #0]
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	6053      	str	r3, [r2, #4]
 8009582:	4408      	add	r0, r1
 8009584:	6010      	str	r0, [r2, #0]
 8009586:	e7da      	b.n	800953e <_free_r+0x22>
 8009588:	d902      	bls.n	8009590 <_free_r+0x74>
 800958a:	230c      	movs	r3, #12
 800958c:	602b      	str	r3, [r5, #0]
 800958e:	e7d6      	b.n	800953e <_free_r+0x22>
 8009590:	6820      	ldr	r0, [r4, #0]
 8009592:	1821      	adds	r1, r4, r0
 8009594:	428b      	cmp	r3, r1
 8009596:	bf04      	itt	eq
 8009598:	6819      	ldreq	r1, [r3, #0]
 800959a:	685b      	ldreq	r3, [r3, #4]
 800959c:	6063      	str	r3, [r4, #4]
 800959e:	bf04      	itt	eq
 80095a0:	1809      	addeq	r1, r1, r0
 80095a2:	6021      	streq	r1, [r4, #0]
 80095a4:	6054      	str	r4, [r2, #4]
 80095a6:	e7ca      	b.n	800953e <_free_r+0x22>
 80095a8:	bd38      	pop	{r3, r4, r5, pc}
 80095aa:	bf00      	nop
 80095ac:	20001d6c 	.word	0x20001d6c

080095b0 <__malloc_lock>:
 80095b0:	4801      	ldr	r0, [pc, #4]	@ (80095b8 <__malloc_lock+0x8>)
 80095b2:	f7ff bfa3 	b.w	80094fc <__retarget_lock_acquire_recursive>
 80095b6:	bf00      	nop
 80095b8:	20001d68 	.word	0x20001d68

080095bc <__malloc_unlock>:
 80095bc:	4801      	ldr	r0, [pc, #4]	@ (80095c4 <__malloc_unlock+0x8>)
 80095be:	f7ff bf9e 	b.w	80094fe <__retarget_lock_release_recursive>
 80095c2:	bf00      	nop
 80095c4:	20001d68 	.word	0x20001d68

080095c8 <_init>:
 80095c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ca:	bf00      	nop
 80095cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ce:	bc08      	pop	{r3}
 80095d0:	469e      	mov	lr, r3
 80095d2:	4770      	bx	lr

080095d4 <_fini>:
 80095d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095d6:	bf00      	nop
 80095d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095da:	bc08      	pop	{r3}
 80095dc:	469e      	mov	lr, r3
 80095de:	4770      	bx	lr
