
Dashbaord2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7ac  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000748  0800d95c  0800d95c  0000e95c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e0a4  0800e0a4  00010060  2**0
                  CONTENTS
  4 .ARM          00000008  0800e0a4  0800e0a4  0000f0a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e0ac  0800e0ac  00010060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800e0ac  0800e0ac  0000f0ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800e0b4  0800e0b4  0000f0b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800e0bc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000029d4  20000060  0800e11c  00010060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002a34  0800e11c  00010a34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b78d  00000000  00000000  00010090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005501  00000000  00000000  0003b81d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002228  00000000  00000000  00040d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001aa1  00000000  00000000  00042f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003028f  00000000  00000000  000449e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028eca  00000000  00000000  00074c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00128f5f  00000000  00000000  0009db42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c6aa1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000098c0  00000000  00000000  001c6ae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001d03a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800d944 	.word	0x0800d944

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	0800d944 	.word	0x0800d944

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_uldivmod>:
 8000608:	b953      	cbnz	r3, 8000620 <__aeabi_uldivmod+0x18>
 800060a:	b94a      	cbnz	r2, 8000620 <__aeabi_uldivmod+0x18>
 800060c:	2900      	cmp	r1, #0
 800060e:	bf08      	it	eq
 8000610:	2800      	cmpeq	r0, #0
 8000612:	bf1c      	itt	ne
 8000614:	f04f 31ff 	movne.w	r1, #4294967295
 8000618:	f04f 30ff 	movne.w	r0, #4294967295
 800061c:	f000 b96a 	b.w	80008f4 <__aeabi_idiv0>
 8000620:	f1ad 0c08 	sub.w	ip, sp, #8
 8000624:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000628:	f000 f806 	bl	8000638 <__udivmoddi4>
 800062c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000630:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000634:	b004      	add	sp, #16
 8000636:	4770      	bx	lr

08000638 <__udivmoddi4>:
 8000638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800063c:	9d08      	ldr	r5, [sp, #32]
 800063e:	460c      	mov	r4, r1
 8000640:	2b00      	cmp	r3, #0
 8000642:	d14e      	bne.n	80006e2 <__udivmoddi4+0xaa>
 8000644:	4694      	mov	ip, r2
 8000646:	458c      	cmp	ip, r1
 8000648:	4686      	mov	lr, r0
 800064a:	fab2 f282 	clz	r2, r2
 800064e:	d962      	bls.n	8000716 <__udivmoddi4+0xde>
 8000650:	b14a      	cbz	r2, 8000666 <__udivmoddi4+0x2e>
 8000652:	f1c2 0320 	rsb	r3, r2, #32
 8000656:	4091      	lsls	r1, r2
 8000658:	fa20 f303 	lsr.w	r3, r0, r3
 800065c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000660:	4319      	orrs	r1, r3
 8000662:	fa00 fe02 	lsl.w	lr, r0, r2
 8000666:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800066a:	fa1f f68c 	uxth.w	r6, ip
 800066e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000672:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000676:	fb07 1114 	mls	r1, r7, r4, r1
 800067a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800067e:	fb04 f106 	mul.w	r1, r4, r6
 8000682:	4299      	cmp	r1, r3
 8000684:	d90a      	bls.n	800069c <__udivmoddi4+0x64>
 8000686:	eb1c 0303 	adds.w	r3, ip, r3
 800068a:	f104 30ff 	add.w	r0, r4, #4294967295
 800068e:	f080 8112 	bcs.w	80008b6 <__udivmoddi4+0x27e>
 8000692:	4299      	cmp	r1, r3
 8000694:	f240 810f 	bls.w	80008b6 <__udivmoddi4+0x27e>
 8000698:	3c02      	subs	r4, #2
 800069a:	4463      	add	r3, ip
 800069c:	1a59      	subs	r1, r3, r1
 800069e:	fa1f f38e 	uxth.w	r3, lr
 80006a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80006a6:	fb07 1110 	mls	r1, r7, r0, r1
 80006aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006ae:	fb00 f606 	mul.w	r6, r0, r6
 80006b2:	429e      	cmp	r6, r3
 80006b4:	d90a      	bls.n	80006cc <__udivmoddi4+0x94>
 80006b6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80006be:	f080 80fc 	bcs.w	80008ba <__udivmoddi4+0x282>
 80006c2:	429e      	cmp	r6, r3
 80006c4:	f240 80f9 	bls.w	80008ba <__udivmoddi4+0x282>
 80006c8:	4463      	add	r3, ip
 80006ca:	3802      	subs	r0, #2
 80006cc:	1b9b      	subs	r3, r3, r6
 80006ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80006d2:	2100      	movs	r1, #0
 80006d4:	b11d      	cbz	r5, 80006de <__udivmoddi4+0xa6>
 80006d6:	40d3      	lsrs	r3, r2
 80006d8:	2200      	movs	r2, #0
 80006da:	e9c5 3200 	strd	r3, r2, [r5]
 80006de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006e2:	428b      	cmp	r3, r1
 80006e4:	d905      	bls.n	80006f2 <__udivmoddi4+0xba>
 80006e6:	b10d      	cbz	r5, 80006ec <__udivmoddi4+0xb4>
 80006e8:	e9c5 0100 	strd	r0, r1, [r5]
 80006ec:	2100      	movs	r1, #0
 80006ee:	4608      	mov	r0, r1
 80006f0:	e7f5      	b.n	80006de <__udivmoddi4+0xa6>
 80006f2:	fab3 f183 	clz	r1, r3
 80006f6:	2900      	cmp	r1, #0
 80006f8:	d146      	bne.n	8000788 <__udivmoddi4+0x150>
 80006fa:	42a3      	cmp	r3, r4
 80006fc:	d302      	bcc.n	8000704 <__udivmoddi4+0xcc>
 80006fe:	4290      	cmp	r0, r2
 8000700:	f0c0 80f0 	bcc.w	80008e4 <__udivmoddi4+0x2ac>
 8000704:	1a86      	subs	r6, r0, r2
 8000706:	eb64 0303 	sbc.w	r3, r4, r3
 800070a:	2001      	movs	r0, #1
 800070c:	2d00      	cmp	r5, #0
 800070e:	d0e6      	beq.n	80006de <__udivmoddi4+0xa6>
 8000710:	e9c5 6300 	strd	r6, r3, [r5]
 8000714:	e7e3      	b.n	80006de <__udivmoddi4+0xa6>
 8000716:	2a00      	cmp	r2, #0
 8000718:	f040 8090 	bne.w	800083c <__udivmoddi4+0x204>
 800071c:	eba1 040c 	sub.w	r4, r1, ip
 8000720:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000724:	fa1f f78c 	uxth.w	r7, ip
 8000728:	2101      	movs	r1, #1
 800072a:	fbb4 f6f8 	udiv	r6, r4, r8
 800072e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000732:	fb08 4416 	mls	r4, r8, r6, r4
 8000736:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800073a:	fb07 f006 	mul.w	r0, r7, r6
 800073e:	4298      	cmp	r0, r3
 8000740:	d908      	bls.n	8000754 <__udivmoddi4+0x11c>
 8000742:	eb1c 0303 	adds.w	r3, ip, r3
 8000746:	f106 34ff 	add.w	r4, r6, #4294967295
 800074a:	d202      	bcs.n	8000752 <__udivmoddi4+0x11a>
 800074c:	4298      	cmp	r0, r3
 800074e:	f200 80cd 	bhi.w	80008ec <__udivmoddi4+0x2b4>
 8000752:	4626      	mov	r6, r4
 8000754:	1a1c      	subs	r4, r3, r0
 8000756:	fa1f f38e 	uxth.w	r3, lr
 800075a:	fbb4 f0f8 	udiv	r0, r4, r8
 800075e:	fb08 4410 	mls	r4, r8, r0, r4
 8000762:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000766:	fb00 f707 	mul.w	r7, r0, r7
 800076a:	429f      	cmp	r7, r3
 800076c:	d908      	bls.n	8000780 <__udivmoddi4+0x148>
 800076e:	eb1c 0303 	adds.w	r3, ip, r3
 8000772:	f100 34ff 	add.w	r4, r0, #4294967295
 8000776:	d202      	bcs.n	800077e <__udivmoddi4+0x146>
 8000778:	429f      	cmp	r7, r3
 800077a:	f200 80b0 	bhi.w	80008de <__udivmoddi4+0x2a6>
 800077e:	4620      	mov	r0, r4
 8000780:	1bdb      	subs	r3, r3, r7
 8000782:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000786:	e7a5      	b.n	80006d4 <__udivmoddi4+0x9c>
 8000788:	f1c1 0620 	rsb	r6, r1, #32
 800078c:	408b      	lsls	r3, r1
 800078e:	fa22 f706 	lsr.w	r7, r2, r6
 8000792:	431f      	orrs	r7, r3
 8000794:	fa20 fc06 	lsr.w	ip, r0, r6
 8000798:	fa04 f301 	lsl.w	r3, r4, r1
 800079c:	ea43 030c 	orr.w	r3, r3, ip
 80007a0:	40f4      	lsrs	r4, r6
 80007a2:	fa00 f801 	lsl.w	r8, r0, r1
 80007a6:	0c38      	lsrs	r0, r7, #16
 80007a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80007ac:	fbb4 fef0 	udiv	lr, r4, r0
 80007b0:	fa1f fc87 	uxth.w	ip, r7
 80007b4:	fb00 441e 	mls	r4, r0, lr, r4
 80007b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80007bc:	fb0e f90c 	mul.w	r9, lr, ip
 80007c0:	45a1      	cmp	r9, r4
 80007c2:	fa02 f201 	lsl.w	r2, r2, r1
 80007c6:	d90a      	bls.n	80007de <__udivmoddi4+0x1a6>
 80007c8:	193c      	adds	r4, r7, r4
 80007ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80007ce:	f080 8084 	bcs.w	80008da <__udivmoddi4+0x2a2>
 80007d2:	45a1      	cmp	r9, r4
 80007d4:	f240 8081 	bls.w	80008da <__udivmoddi4+0x2a2>
 80007d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80007dc:	443c      	add	r4, r7
 80007de:	eba4 0409 	sub.w	r4, r4, r9
 80007e2:	fa1f f983 	uxth.w	r9, r3
 80007e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80007ea:	fb00 4413 	mls	r4, r0, r3, r4
 80007ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80007f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80007f6:	45a4      	cmp	ip, r4
 80007f8:	d907      	bls.n	800080a <__udivmoddi4+0x1d2>
 80007fa:	193c      	adds	r4, r7, r4
 80007fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000800:	d267      	bcs.n	80008d2 <__udivmoddi4+0x29a>
 8000802:	45a4      	cmp	ip, r4
 8000804:	d965      	bls.n	80008d2 <__udivmoddi4+0x29a>
 8000806:	3b02      	subs	r3, #2
 8000808:	443c      	add	r4, r7
 800080a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800080e:	fba0 9302 	umull	r9, r3, r0, r2
 8000812:	eba4 040c 	sub.w	r4, r4, ip
 8000816:	429c      	cmp	r4, r3
 8000818:	46ce      	mov	lr, r9
 800081a:	469c      	mov	ip, r3
 800081c:	d351      	bcc.n	80008c2 <__udivmoddi4+0x28a>
 800081e:	d04e      	beq.n	80008be <__udivmoddi4+0x286>
 8000820:	b155      	cbz	r5, 8000838 <__udivmoddi4+0x200>
 8000822:	ebb8 030e 	subs.w	r3, r8, lr
 8000826:	eb64 040c 	sbc.w	r4, r4, ip
 800082a:	fa04 f606 	lsl.w	r6, r4, r6
 800082e:	40cb      	lsrs	r3, r1
 8000830:	431e      	orrs	r6, r3
 8000832:	40cc      	lsrs	r4, r1
 8000834:	e9c5 6400 	strd	r6, r4, [r5]
 8000838:	2100      	movs	r1, #0
 800083a:	e750      	b.n	80006de <__udivmoddi4+0xa6>
 800083c:	f1c2 0320 	rsb	r3, r2, #32
 8000840:	fa20 f103 	lsr.w	r1, r0, r3
 8000844:	fa0c fc02 	lsl.w	ip, ip, r2
 8000848:	fa24 f303 	lsr.w	r3, r4, r3
 800084c:	4094      	lsls	r4, r2
 800084e:	430c      	orrs	r4, r1
 8000850:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000854:	fa00 fe02 	lsl.w	lr, r0, r2
 8000858:	fa1f f78c 	uxth.w	r7, ip
 800085c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000860:	fb08 3110 	mls	r1, r8, r0, r3
 8000864:	0c23      	lsrs	r3, r4, #16
 8000866:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800086a:	fb00 f107 	mul.w	r1, r0, r7
 800086e:	4299      	cmp	r1, r3
 8000870:	d908      	bls.n	8000884 <__udivmoddi4+0x24c>
 8000872:	eb1c 0303 	adds.w	r3, ip, r3
 8000876:	f100 36ff 	add.w	r6, r0, #4294967295
 800087a:	d22c      	bcs.n	80008d6 <__udivmoddi4+0x29e>
 800087c:	4299      	cmp	r1, r3
 800087e:	d92a      	bls.n	80008d6 <__udivmoddi4+0x29e>
 8000880:	3802      	subs	r0, #2
 8000882:	4463      	add	r3, ip
 8000884:	1a5b      	subs	r3, r3, r1
 8000886:	b2a4      	uxth	r4, r4
 8000888:	fbb3 f1f8 	udiv	r1, r3, r8
 800088c:	fb08 3311 	mls	r3, r8, r1, r3
 8000890:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000894:	fb01 f307 	mul.w	r3, r1, r7
 8000898:	42a3      	cmp	r3, r4
 800089a:	d908      	bls.n	80008ae <__udivmoddi4+0x276>
 800089c:	eb1c 0404 	adds.w	r4, ip, r4
 80008a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80008a4:	d213      	bcs.n	80008ce <__udivmoddi4+0x296>
 80008a6:	42a3      	cmp	r3, r4
 80008a8:	d911      	bls.n	80008ce <__udivmoddi4+0x296>
 80008aa:	3902      	subs	r1, #2
 80008ac:	4464      	add	r4, ip
 80008ae:	1ae4      	subs	r4, r4, r3
 80008b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80008b4:	e739      	b.n	800072a <__udivmoddi4+0xf2>
 80008b6:	4604      	mov	r4, r0
 80008b8:	e6f0      	b.n	800069c <__udivmoddi4+0x64>
 80008ba:	4608      	mov	r0, r1
 80008bc:	e706      	b.n	80006cc <__udivmoddi4+0x94>
 80008be:	45c8      	cmp	r8, r9
 80008c0:	d2ae      	bcs.n	8000820 <__udivmoddi4+0x1e8>
 80008c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80008c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80008ca:	3801      	subs	r0, #1
 80008cc:	e7a8      	b.n	8000820 <__udivmoddi4+0x1e8>
 80008ce:	4631      	mov	r1, r6
 80008d0:	e7ed      	b.n	80008ae <__udivmoddi4+0x276>
 80008d2:	4603      	mov	r3, r0
 80008d4:	e799      	b.n	800080a <__udivmoddi4+0x1d2>
 80008d6:	4630      	mov	r0, r6
 80008d8:	e7d4      	b.n	8000884 <__udivmoddi4+0x24c>
 80008da:	46d6      	mov	lr, sl
 80008dc:	e77f      	b.n	80007de <__udivmoddi4+0x1a6>
 80008de:	4463      	add	r3, ip
 80008e0:	3802      	subs	r0, #2
 80008e2:	e74d      	b.n	8000780 <__udivmoddi4+0x148>
 80008e4:	4606      	mov	r6, r0
 80008e6:	4623      	mov	r3, r4
 80008e8:	4608      	mov	r0, r1
 80008ea:	e70f      	b.n	800070c <__udivmoddi4+0xd4>
 80008ec:	3e02      	subs	r6, #2
 80008ee:	4463      	add	r3, ip
 80008f0:	e730      	b.n	8000754 <__udivmoddi4+0x11c>
 80008f2:	bf00      	nop

080008f4 <__aeabi_idiv0>:
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop

080008f8 <_ZN14DashboardState5resetEv>:
#include "DashboardState.hpp"

void DashboardState::reset() {
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
    lightState = LIGHTS_NONE;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2200      	movs	r2, #0
 8000904:	701a      	strb	r2, [r3, #0]
    oldLightState = LIGHTS_NONE;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2200      	movs	r2, #0
 800090a:	709a      	strb	r2, [r3, #2]

    outputPortState = 0;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2200      	movs	r2, #0
 8000910:	70da      	strb	r2, [r3, #3]
    hornState = 0;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2200      	movs	r2, #0
 8000916:	711a      	strb	r2, [r3, #4]
    fanState = 0;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2200      	movs	r2, #0
 800091c:	715a      	strb	r2, [r3, #5]
    headlightState = 0;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2200      	movs	r2, #0
 8000922:	719a      	strb	r2, [r3, #6]
    pttState = 0;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2200      	movs	r2, #0
 8000928:	71da      	strb	r2, [r3, #7]
    displayState = 0;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2200      	movs	r2, #0
 800092e:	721a      	strb	r2, [r3, #8]

    bmsStatus = 0;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2200      	movs	r2, #0
 8000934:	74da      	strb	r2, [r3, #19]
    mcStatus = 0;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2200      	movs	r2, #0
 800093a:	751a      	strb	r2, [r3, #20]
    arrayStatus = 0;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2200      	movs	r2, #0
 8000940:	755a      	strb	r2, [r3, #21]

    old_bmsStatus = 0;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2200      	movs	r2, #0
 8000946:	759a      	strb	r2, [r3, #22]
    old_mcStatus = 0;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2200      	movs	r2, #0
 800094c:	75da      	strb	r2, [r3, #23]
    old_arrayStatus = 0;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2200      	movs	r2, #0
 8000952:	761a      	strb	r2, [r3, #24]

    uart_rx = 0;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2200      	movs	r2, #0
 8000958:	765a      	strb	r2, [r3, #25]
    old_uart_rx = 0;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2200      	movs	r2, #0
 800095e:	769a      	strb	r2, [r3, #26]
    updateRequested = 0;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2200      	movs	r2, #0
 8000964:	76da      	strb	r2, [r3, #27]
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr

08000972 <_ZN14DashboardState14updateFromUARTEv>:

// gets called only when something changes in the dashboard state
void DashboardState::updateFromUART() {
 8000972:	b580      	push	{r7, lr}
 8000974:	b082      	sub	sp, #8
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]

    // uart data for lights (blinkers)
    if (uart_rx & BUTTON_HAZARD) {
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	7e5b      	ldrb	r3, [r3, #25]
 800097e:	f003 0304 	and.w	r3, r3, #4
 8000982:	2b00      	cmp	r3, #0
 8000984:	d003      	beq.n	800098e <_ZN14DashboardState14updateFromUARTEv+0x1c>
        lightState = LIGHTS_HAZARD;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2203      	movs	r2, #3
 800098a:	701a      	strb	r2, [r3, #0]
 800098c:	e015      	b.n	80009ba <_ZN14DashboardState14updateFromUARTEv+0x48>
    }
    else if (uart_rx & BUTTON_LEFT_TURN) {
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	7e5b      	ldrb	r3, [r3, #25]
 8000992:	f003 0308 	and.w	r3, r3, #8
 8000996:	2b00      	cmp	r3, #0
 8000998:	d003      	beq.n	80009a2 <_ZN14DashboardState14updateFromUARTEv+0x30>
        lightState = LIGHTS_LEFT;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2201      	movs	r2, #1
 800099e:	701a      	strb	r2, [r3, #0]
 80009a0:	e00b      	b.n	80009ba <_ZN14DashboardState14updateFromUARTEv+0x48>
    }
    else if (uart_rx & BUTTON_RIGHT_TURN) {
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	7e5b      	ldrb	r3, [r3, #25]
 80009a6:	b25b      	sxtb	r3, r3
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	da03      	bge.n	80009b4 <_ZN14DashboardState14updateFromUARTEv+0x42>
        lightState = LIGHTS_RIGHT;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2202      	movs	r2, #2
 80009b0:	701a      	strb	r2, [r3, #0]
 80009b2:	e002      	b.n	80009ba <_ZN14DashboardState14updateFromUARTEv+0x48>
    }
    else {
        lightState = LIGHTS_NONE;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2200      	movs	r2, #0
 80009b8:	701a      	strb	r2, [r3, #0]
    }

    // if the light state has changed, reset the blink time and update the output port state
    if (oldLightState != lightState) {
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	789a      	ldrb	r2, [r3, #2]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d041      	beq.n	8000a4a <_ZN14DashboardState14updateFromUARTEv+0xd8>
        lastBlinkTime = HAL_GetTick(); // reset blink time if light state changes
 80009c6:	f002 fec7 	bl	8003758 <HAL_GetTick>
 80009ca:	4602      	mov	r2, r0
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	60da      	str	r2, [r3, #12]
        oldLightState = lightState;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	781a      	ldrb	r2, [r3, #0]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	709a      	strb	r2, [r3, #2]
        if (lightState == LIGHTS_HAZARD) {
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	2b03      	cmp	r3, #3
 80009de:	d107      	bne.n	80009f0 <_ZN14DashboardState14updateFromUARTEv+0x7e>
            outputPortState |= (OUTPUT_FL_LIGHT_CTRL | OUTPUT_FR_LIGHT_CTRL);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	78db      	ldrb	r3, [r3, #3]
 80009e4:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	70da      	strb	r2, [r3, #3]
 80009ee:	e02c      	b.n	8000a4a <_ZN14DashboardState14updateFromUARTEv+0xd8>
        }
        else if (lightState == LIGHTS_LEFT) {
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d10e      	bne.n	8000a16 <_ZN14DashboardState14updateFromUARTEv+0xa4>
            outputPortState |= OUTPUT_FL_LIGHT_CTRL;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	78db      	ldrb	r3, [r3, #3]
 80009fc:	f043 0320 	orr.w	r3, r3, #32
 8000a00:	b2da      	uxtb	r2, r3
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	70da      	strb	r2, [r3, #3]
            outputPortState &= ~OUTPUT_FR_LIGHT_CTRL;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	78db      	ldrb	r3, [r3, #3]
 8000a0a:	f023 0310 	bic.w	r3, r3, #16
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	70da      	strb	r2, [r3, #3]
 8000a14:	e019      	b.n	8000a4a <_ZN14DashboardState14updateFromUARTEv+0xd8>
        }
        else if (lightState == LIGHTS_RIGHT) {
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b02      	cmp	r3, #2
 8000a1c:	d10e      	bne.n	8000a3c <_ZN14DashboardState14updateFromUARTEv+0xca>
            outputPortState |= OUTPUT_FR_LIGHT_CTRL;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	78db      	ldrb	r3, [r3, #3]
 8000a22:	f043 0310 	orr.w	r3, r3, #16
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	70da      	strb	r2, [r3, #3]
            outputPortState &= ~OUTPUT_FL_LIGHT_CTRL;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	78db      	ldrb	r3, [r3, #3]
 8000a30:	f023 0320 	bic.w	r3, r3, #32
 8000a34:	b2da      	uxtb	r2, r3
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	70da      	strb	r2, [r3, #3]
 8000a3a:	e006      	b.n	8000a4a <_ZN14DashboardState14updateFromUARTEv+0xd8>
        }
        else {
            outputPortState &= ~(OUTPUT_FL_LIGHT_CTRL | OUTPUT_FR_LIGHT_CTRL);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	78db      	ldrb	r3, [r3, #3]
 8000a40:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000a44:	b2da      	uxtb	r2, r3
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	70da      	strb	r2, [r3, #3]
        }
    }

    // if headlight should be on  
    if (uart_rx & BUTTON_HEADLIGHTS) {
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	7e5b      	ldrb	r3, [r3, #25]
 8000a4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d00a      	beq.n	8000a6c <_ZN14DashboardState14updateFromUARTEv+0xfa>
        outputPortState |= (OUTPUT_R_HEAD_CTRL | OUTPUT_L_HEAD_CTRL);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	78db      	ldrb	r3, [r3, #3]
 8000a5a:	f043 030c 	orr.w	r3, r3, #12
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	70da      	strb	r2, [r3, #3]
        headlightState = 1;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2201      	movs	r2, #1
 8000a68:	719a      	strb	r2, [r3, #6]
 8000a6a:	e009      	b.n	8000a80 <_ZN14DashboardState14updateFromUARTEv+0x10e>
    }
    else  {
        outputPortState &= ~(OUTPUT_R_HEAD_CTRL | OUTPUT_L_HEAD_CTRL);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	78db      	ldrb	r3, [r3, #3]
 8000a70:	f023 030c 	bic.w	r3, r3, #12
 8000a74:	b2da      	uxtb	r2, r3
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	70da      	strb	r2, [r3, #3]
        headlightState = 0;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	719a      	strb	r2, [r3, #6]
    }

    // if horn should be on
    if (uart_rx & BUTTON_HORN) {
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	7e5b      	ldrb	r3, [r3, #25]
 8000a84:	f003 0320 	and.w	r3, r3, #32
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d00a      	beq.n	8000aa2 <_ZN14DashboardState14updateFromUARTEv+0x130>
        outputPortState |= OUTPUT_HORN_CTRL;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	78db      	ldrb	r3, [r3, #3]
 8000a90:	f043 0302 	orr.w	r3, r3, #2
 8000a94:	b2da      	uxtb	r2, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	70da      	strb	r2, [r3, #3]
        hornState = 1;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	711a      	strb	r2, [r3, #4]
 8000aa0:	e009      	b.n	8000ab6 <_ZN14DashboardState14updateFromUARTEv+0x144>
    }
    else {
        outputPortState &= ~OUTPUT_HORN_CTRL;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	78db      	ldrb	r3, [r3, #3]
 8000aa6:	f023 0302 	bic.w	r3, r3, #2
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	70da      	strb	r2, [r3, #3]
        hornState = 0;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	711a      	strb	r2, [r3, #4]
    }

    // if fan should be on
    if (uart_rx & BUTTON_FAN) {
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	7e5b      	ldrb	r3, [r3, #25]
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d00a      	beq.n	8000ad8 <_ZN14DashboardState14updateFromUARTEv+0x166>
        outputPortState |= OUTPUT_FAN_CTRL;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	78db      	ldrb	r3, [r3, #3]
 8000ac6:	f043 0301 	orr.w	r3, r3, #1
 8000aca:	b2da      	uxtb	r2, r3
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	70da      	strb	r2, [r3, #3]
        fanState = 1;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	715a      	strb	r2, [r3, #5]
 8000ad6:	e009      	b.n	8000aec <_ZN14DashboardState14updateFromUARTEv+0x17a>
    }
    else {
        outputPortState &= ~OUTPUT_FAN_CTRL;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	78db      	ldrb	r3, [r3, #3]
 8000adc:	f023 0301 	bic.w	r3, r3, #1
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	70da      	strb	r2, [r3, #3]
        fanState = 0;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2200      	movs	r2, #0
 8000aea:	715a      	strb	r2, [r3, #5]
    }

    // if PTT should be on
    if (uart_rx & BUTTON_PTT) {
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	7e5b      	ldrb	r3, [r3, #25]
 8000af0:	f003 0310 	and.w	r3, r3, #16
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d003      	beq.n	8000b00 <_ZN14DashboardState14updateFromUARTEv+0x18e>
        pttState = 1;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2201      	movs	r2, #1
 8000afc:	71da      	strb	r2, [r3, #7]
 8000afe:	e002      	b.n	8000b06 <_ZN14DashboardState14updateFromUARTEv+0x194>
    }
    else {
        pttState = 0;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2200      	movs	r2, #0
 8000b04:	71da      	strb	r2, [r3, #7]
    }

    // TODO: do something with displayState cause this isn't setup to go anywhere
    if (uart_rx & BUTTON_DISPLAY) {
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	7e5b      	ldrb	r3, [r3, #25]
 8000b0a:	f003 0302 	and.w	r3, r3, #2
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d003      	beq.n	8000b1a <_ZN14DashboardState14updateFromUARTEv+0x1a8>
        displayState = 1;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2201      	movs	r2, #1
 8000b16:	721a      	strb	r2, [r3, #8]
    }
    else {
        displayState = 0;
    }

}
 8000b18:	e002      	b.n	8000b20 <_ZN14DashboardState14updateFromUARTEv+0x1ae>
        displayState = 0;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	721a      	strb	r2, [r3, #8]
}
 8000b20:	bf00      	nop
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <_ZN14DashboardState11writeToPortER12TCAL9538RSVR>:

HAL_StatusTypeDef DashboardState::writeToPort(TCAL9538RSVR &U7) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
	uint8_t inverted = ~outputPortState;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	78db      	ldrb	r3, [r3, #3]
 8000b36:	43db      	mvns	r3, r3
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	73fb      	strb	r3, [r7, #15]
    return TCAL9538RSVR_SetOutput(&U7, &inverted); // write to output port
 8000b3c:	f107 030f 	add.w	r3, r7, #15
 8000b40:	4619      	mov	r1, r3
 8000b42:	6838      	ldr	r0, [r7, #0]
 8000b44:	f002 fd69 	bl	800361a <TCAL9538RSVR_SetOutput>
 8000b48:	4603      	mov	r3, r0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
	...

08000b54 <_ZN14DashboardState11blinkLightsEv>:

void DashboardState::blinkLights() {
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
    switch (lightState) {
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b03      	cmp	r3, #3
 8000b62:	d82b      	bhi.n	8000bbc <_ZN14DashboardState11blinkLightsEv+0x68>
 8000b64:	a201      	add	r2, pc, #4	@ (adr r2, 8000b6c <_ZN14DashboardState11blinkLightsEv+0x18>)
 8000b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b6a:	bf00      	nop
 8000b6c:	08000bad 	.word	0x08000bad
 8000b70:	08000b8d 	.word	0x08000b8d
 8000b74:	08000b9d 	.word	0x08000b9d
 8000b78:	08000b7d 	.word	0x08000b7d
        case LIGHTS_HAZARD:
            outputPortState ^= (OUTPUT_FL_LIGHT_CTRL | OUTPUT_FR_LIGHT_CTRL);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	78db      	ldrb	r3, [r3, #3]
 8000b80:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 8000b84:	b2da      	uxtb	r2, r3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	70da      	strb	r2, [r3, #3]
            break;
 8000b8a:	e017      	b.n	8000bbc <_ZN14DashboardState11blinkLightsEv+0x68>
        case LIGHTS_LEFT:
            outputPortState ^= OUTPUT_FL_LIGHT_CTRL;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	78db      	ldrb	r3, [r3, #3]
 8000b90:	f083 0320 	eor.w	r3, r3, #32
 8000b94:	b2da      	uxtb	r2, r3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	70da      	strb	r2, [r3, #3]
            break;
 8000b9a:	e00f      	b.n	8000bbc <_ZN14DashboardState11blinkLightsEv+0x68>
        case LIGHTS_RIGHT:
            outputPortState ^= OUTPUT_FR_LIGHT_CTRL;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	78db      	ldrb	r3, [r3, #3]
 8000ba0:	f083 0310 	eor.w	r3, r3, #16
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	70da      	strb	r2, [r3, #3]
            break;
 8000baa:	e007      	b.n	8000bbc <_ZN14DashboardState11blinkLightsEv+0x68>
        case LIGHTS_NONE:
            outputPortState &= ~(OUTPUT_FL_LIGHT_CTRL | OUTPUT_FR_LIGHT_CTRL);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	78db      	ldrb	r3, [r3, #3]
 8000bb0:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	70da      	strb	r2, [r3, #3]
            break;
 8000bba:	bf00      	nop
    }
}
 8000bbc:	bf00      	nop
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <_ZN14DashboardState18getSuppBattVoltageEv>:

float DashboardState::getSuppBattVoltage() {
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
    return 0;
 8000bd0:	f04f 0300 	mov.w	r3, #0
 8000bd4:	ee07 3a90 	vmov	s15, r3
}
 8000bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <_ZN14DashboardState13getMotorPowerEv>:

float DashboardState::getMotorPower() {
 8000be6:	b480      	push	{r7}
 8000be8:	b083      	sub	sp, #12
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
    return 0;
 8000bee:	f04f 0300 	mov.w	r3, #0
 8000bf2:	ee07 3a90 	vmov	s15, r3
}
 8000bf6:	eeb0 0a67 	vmov.f32	s0, s15
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <_ZN14DashboardState14getCarVelocityEv>:

float DashboardState::getCarVelocity() {
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
    return 0;
 8000c0c:	f04f 0300 	mov.w	r3, #0
 8000c10:	ee07 3a90 	vmov	s15, r3
 8000c14:	eeb0 0a67 	vmov.f32	s0, s15
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
	...

08000c24 <CPP_UserSetup>:

DashboardState dashboardState; // Dashboard state object

ILI9341 screen(320, 240);

void CPP_UserSetup(void) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af02      	add	r7, sp, #8
    // Make sure that timer priorities are configured correctly
    HAL_Delay(10);
 8000c2a:	200a      	movs	r0, #10
 8000c2c:	f002 fda0 	bl	8003770 <HAL_Delay>

	dashboardState.reset(); // reset dashboard state
 8000c30:	484c      	ldr	r0, [pc, #304]	@ (8000d64 <CPP_UserSetup+0x140>)
 8000c32:	f7ff fe61 	bl	80008f8 <_ZN14DashboardState5resetEv>

    dma_flag = 0;
 8000c36:	4b4c      	ldr	r3, [pc, #304]	@ (8000d68 <CPP_UserSetup+0x144>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	701a      	strb	r2, [r3, #0]
    cc_enable = 0;
 8000c3c:	4b4b      	ldr	r3, [pc, #300]	@ (8000d6c <CPP_UserSetup+0x148>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	701a      	strb	r2, [r3, #0]

	// -------------------------
	// CAN INIT
	// -------------------------
	Init_CAN_Filter1(hcan1); // set up CAN filter for CAN1
 8000c42:	484b      	ldr	r0, [pc, #300]	@ (8000d70 <CPP_UserSetup+0x14c>)
 8000c44:	f000 fd5a 	bl	80016fc <_Z16Init_CAN_Filter1R17CAN_HandleTypeDef>
	HAL_CAN_Start(&hcan1); // start CAN1
 8000c48:	4849      	ldr	r0, [pc, #292]	@ (8000d70 <CPP_UserSetup+0x14c>)
 8000c4a:	f004 fb65 	bl	8005318 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING); // enable CAN1 RX interrupt
 8000c4e:	2102      	movs	r1, #2
 8000c50:	4847      	ldr	r0, [pc, #284]	@ (8000d70 <CPP_UserSetup+0x14c>)
 8000c52:	f004 fcaa 	bl	80055aa <HAL_CAN_ActivateNotification>

	// -------------------------
	// GPIO EXPANDERS INIT
	// -------------------------

    if (TCAL9538RSVR_INIT(&U5, &hi2c4, 0b10, 0xFF, 0x00) != HAL_OK) { Error_Handler(); } // inputs
 8000c56:	2300      	movs	r3, #0
 8000c58:	9300      	str	r3, [sp, #0]
 8000c5a:	23ff      	movs	r3, #255	@ 0xff
 8000c5c:	2202      	movs	r2, #2
 8000c5e:	4945      	ldr	r1, [pc, #276]	@ (8000d74 <CPP_UserSetup+0x150>)
 8000c60:	4845      	ldr	r0, [pc, #276]	@ (8000d78 <CPP_UserSetup+0x154>)
 8000c62:	f002 fc1d 	bl	80034a0 <TCAL9538RSVR_INIT>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	bf14      	ite	ne
 8000c6c:	2301      	movne	r3, #1
 8000c6e:	2300      	moveq	r3, #0
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <CPP_UserSetup+0x56>
 8000c76:	f001 f97d 	bl	8001f74 <Error_Handler>
    //if (TCAL9538RSVR_INIT(&U16, &hi2c4, 0b01, 0b00111111, 0b11000000) != HAL_OK) { Error_Handler(); }
    if (TCAL9538RSVR_INIT(&U7, &hi2c4, 0x00, 0b00000000, 0b00000000) != HAL_OK) { Error_Handler(); } // output
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	9300      	str	r3, [sp, #0]
 8000c7e:	2300      	movs	r3, #0
 8000c80:	2200      	movs	r2, #0
 8000c82:	493c      	ldr	r1, [pc, #240]	@ (8000d74 <CPP_UserSetup+0x150>)
 8000c84:	483d      	ldr	r0, [pc, #244]	@ (8000d7c <CPP_UserSetup+0x158>)
 8000c86:	f002 fc0b 	bl	80034a0 <TCAL9538RSVR_INIT>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	bf14      	ite	ne
 8000c90:	2301      	movne	r3, #1
 8000c92:	2300      	moveq	r3, #0
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <CPP_UserSetup+0x7a>
 8000c9a:	f001 f96b 	bl	8001f74 <Error_Handler>

    // set outputs to low to start
	if (dashboardState.writeToPort(U7) != HAL_OK) { Error_Handler(); }
 8000c9e:	4937      	ldr	r1, [pc, #220]	@ (8000d7c <CPP_UserSetup+0x158>)
 8000ca0:	4830      	ldr	r0, [pc, #192]	@ (8000d64 <CPP_UserSetup+0x140>)
 8000ca2:	f7ff ff41 	bl	8000b28 <_ZN14DashboardState11writeToPortER12TCAL9538RSVR>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	bf14      	ite	ne
 8000cac:	2301      	movne	r3, #1
 8000cae:	2300      	moveq	r3, #0
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <CPP_UserSetup+0x96>
 8000cb6:	f001 f95d 	bl	8001f74 <Error_Handler>

	// Set up UART4 for receiving data from the steering wheel
	HAL_UART_Receive_IT(&huart4, &dashboardState.uart_rx, 1); // enable uart interrupt
 8000cba:	2201      	movs	r2, #1
 8000cbc:	4930      	ldr	r1, [pc, #192]	@ (8000d80 <CPP_UserSetup+0x15c>)
 8000cbe:	4831      	ldr	r0, [pc, #196]	@ (8000d84 <CPP_UserSetup+0x160>)
 8000cc0:	f007 fea4 	bl	8008a0c <HAL_UART_Receive_IT>

	// -------------------------
	// SCREEN INIT 
	// -------------------------
	
    screen.Init();
 8000cc4:	4830      	ldr	r0, [pc, #192]	@ (8000d88 <CPP_UserSetup+0x164>)
 8000cc6:	f001 fd45 	bl	8002754 <_ZN7ILI93414InitEv>
    screen.SetRotation(3);
 8000cca:	2103      	movs	r1, #3
 8000ccc:	482e      	ldr	r0, [pc, #184]	@ (8000d88 <CPP_UserSetup+0x164>)
 8000cce:	f002 f8cb 	bl	8002e68 <_ZN7ILI934111SetRotationEh>
    screen.ClearScreen(RGB565_WHITE);
 8000cd2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000cd6:	482c      	ldr	r0, [pc, #176]	@ (8000d88 <CPP_UserSetup+0x164>)
 8000cd8:	f001 fffb 	bl	8002cd2 <_ZN7ILI934111ClearScreenEt>

    uint16_t x_text = 70;
 8000cdc:	2346      	movs	r3, #70	@ 0x46
 8000cde:	81fb      	strh	r3, [r7, #14]
    uint16_t y_text = 10;
 8000ce0:	230a      	movs	r3, #10
 8000ce2:	81bb      	strh	r3, [r7, #12]
    const char* str1 = "UF Solar Gators :)\0";
 8000ce4:	4b29      	ldr	r3, [pc, #164]	@ (8000d8c <CPP_UserSetup+0x168>)
 8000ce6:	60bb      	str	r3, [r7, #8]
    screen.SetTextSize(2);
 8000ce8:	2102      	movs	r1, #2
 8000cea:	4827      	ldr	r0, [pc, #156]	@ (8000d88 <CPP_UserSetup+0x164>)
 8000cec:	f002 f928 	bl	8002f40 <_ZN7ILI934111SetTextSizeEh>
    screen.DrawText(x_text, y_text, str1, RGB565_BLACK);
 8000cf0:	89ba      	ldrh	r2, [r7, #12]
 8000cf2:	89f9      	ldrh	r1, [r7, #14]
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	4823      	ldr	r0, [pc, #140]	@ (8000d88 <CPP_UserSetup+0x164>)
 8000cfc:	f002 fa4c 	bl	8003198 <_ZN7ILI93418DrawTextEttPKct>

    x_text = 55;
 8000d00:	2337      	movs	r3, #55	@ 0x37
 8000d02:	81fb      	strh	r3, [r7, #14]
    y_text = 170;
 8000d04:	23aa      	movs	r3, #170	@ 0xaa
 8000d06:	81bb      	strh	r3, [r7, #12]
    const char* str2 = "BMS    MC    Array\0";
 8000d08:	4b21      	ldr	r3, [pc, #132]	@ (8000d90 <CPP_UserSetup+0x16c>)
 8000d0a:	607b      	str	r3, [r7, #4]

    screen.SetTextSize(2);
 8000d0c:	2102      	movs	r1, #2
 8000d0e:	481e      	ldr	r0, [pc, #120]	@ (8000d88 <CPP_UserSetup+0x164>)
 8000d10:	f002 f916 	bl	8002f40 <_ZN7ILI934111SetTextSizeEh>
    screen.DrawText(x_text, y_text, str2, RGB565_BLACK);
 8000d14:	89ba      	ldrh	r2, [r7, #12]
 8000d16:	89f9      	ldrh	r1, [r7, #14]
 8000d18:	2300      	movs	r3, #0
 8000d1a:	9300      	str	r3, [sp, #0]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	481a      	ldr	r0, [pc, #104]	@ (8000d88 <CPP_UserSetup+0x164>)
 8000d20:	f002 fa3a 	bl	8003198 <_ZN7ILI93418DrawTextEttPKct>

    screen.FillCircle(70, 210, 10, RGB565_RED);
 8000d24:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000d28:	9300      	str	r3, [sp, #0]
 8000d2a:	230a      	movs	r3, #10
 8000d2c:	22d2      	movs	r2, #210	@ 0xd2
 8000d2e:	2146      	movs	r1, #70	@ 0x46
 8000d30:	4815      	ldr	r0, [pc, #84]	@ (8000d88 <CPP_UserSetup+0x164>)
 8000d32:	f002 fb0f 	bl	8003354 <_ZN7ILI934110FillCircleEtttt>
    screen.FillCircle(150, 210, 10, RGB565_RED);
 8000d36:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000d3a:	9300      	str	r3, [sp, #0]
 8000d3c:	230a      	movs	r3, #10
 8000d3e:	22d2      	movs	r2, #210	@ 0xd2
 8000d40:	2196      	movs	r1, #150	@ 0x96
 8000d42:	4811      	ldr	r0, [pc, #68]	@ (8000d88 <CPP_UserSetup+0x164>)
 8000d44:	f002 fb06 	bl	8003354 <_ZN7ILI934110FillCircleEtttt>
    screen.FillCircle(235, 210, 10, RGB565_RED);
 8000d48:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	230a      	movs	r3, #10
 8000d50:	22d2      	movs	r2, #210	@ 0xd2
 8000d52:	21eb      	movs	r1, #235	@ 0xeb
 8000d54:	480c      	ldr	r0, [pc, #48]	@ (8000d88 <CPP_UserSetup+0x164>)
 8000d56:	f002 fafd 	bl	8003354 <_ZN7ILI934110FillCircleEtttt>

    screen.FillCircle(70, 120, 10, RGB565_RED);   // Headlights
    screen.FillCircle(150, 120, 10, RGB565_RED);  // Horn
    screen.FillCircle(235, 120, 10, RGB565_RED);  // Fan
	*/
}
 8000d5a:	bf00      	nop
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	200000ac 	.word	0x200000ac
 8000d68:	200000a8 	.word	0x200000a8
 8000d6c:	200000a9 	.word	0x200000a9
 8000d70:	200001f8 	.word	0x200001f8
 8000d74:	20000248 	.word	0x20000248
 8000d78:	2000007c 	.word	0x2000007c
 8000d7c:	2000008c 	.word	0x2000008c
 8000d80:	200000c5 	.word	0x200000c5
 8000d84:	2000029c 	.word	0x2000029c
 8000d88:	200000d4 	.word	0x200000d4
 8000d8c:	0800d95c 	.word	0x0800d95c
 8000d90:	0800d970 	.word	0x0800d970

08000d94 <_Z11StartTask01Pv>:


void StartTask01(void *argument)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08c      	sub	sp, #48	@ 0x30
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  CAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData[8] = { 0 };
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	2300      	movs	r3, #0
 8000da2:	613b      	str	r3, [r7, #16]
	uint32_t TxMailbox = { 0 };
 8000da4:	2300      	movs	r3, #0
 8000da6:	60bb      	str	r3, [r7, #8]

	TxHeader.IDE = CAN_ID_EXT;
 8000da8:	2304      	movs	r3, #4
 8000daa:	61fb      	str	r3, [r7, #28]
	TxHeader.ExtId = CAN_ID_MITSUBA_MOTOR_REQUEST;
 8000dac:	4b12      	ldr	r3, [pc, #72]	@ (8000df8 <_Z11StartTask01Pv+0x64>)
 8000dae:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR = CAN_RTR_DATA;
 8000db0:	2300      	movs	r3, #0
 8000db2:	623b      	str	r3, [r7, #32]
	TxHeader.DLC = 1;
 8000db4:	2301      	movs	r3, #1
 8000db6:	627b      	str	r3, [r7, #36]	@ 0x24
	TxData[0] = 1; // bit 0 = request for frame 0
 8000db8:	2301      	movs	r3, #1
 8000dba:	733b      	strb	r3, [r7, #12]

  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, OK_LED_Pin);
 8000dbc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000dc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dc4:	f005 f91a 	bl	8005ffc <HAL_GPIO_TogglePin>
	// also send can message to request frame 0 from mitsuba motor

	HAL_StatusTypeDef status;
	status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000dc8:	f107 0308 	add.w	r3, r7, #8
 8000dcc:	f107 020c 	add.w	r2, r7, #12
 8000dd0:	f107 0114 	add.w	r1, r7, #20
 8000dd4:	4809      	ldr	r0, [pc, #36]	@ (8000dfc <_Z11StartTask01Pv+0x68>)
 8000dd6:	f004 fae3 	bl	80053a0 <HAL_CAN_AddTxMessage>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (status == HAL_ERROR)
 8000de0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d101      	bne.n	8000dec <_Z11StartTask01Pv+0x58>
	{
		Error_Handler();
 8000de8:	f001 f8c4 	bl	8001f74 <Error_Handler>
	}

    osDelay(500);
 8000dec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000df0:	f009 fa3e 	bl	800a270 <osDelay>
  }
 8000df4:	e7e2      	b.n	8000dbc <_Z11StartTask01Pv+0x28>
 8000df6:	bf00      	nop
 8000df8:	08f89540 	.word	0x08f89540
 8000dfc:	200001f8 	.word	0x200001f8

08000e00 <_Z11StartTask02Pv>:
  /* USER CODE END 5 */
}

void StartTask02(void *argument)
{
 8000e00:	b5b0      	push	{r4, r5, r7, lr}
 8000e02:	b092      	sub	sp, #72	@ 0x48
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */

	uint16_t adc_var_avg = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

	int HAL_CAN_BUSY = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	643b      	str	r3, [r7, #64]	@ 0x40
	uint64_t messages_sent = 0;
 8000e12:	f04f 0200 	mov.w	r2, #0
 8000e16:	f04f 0300 	mov.w	r3, #0
 8000e1a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	static uint8_t update_cc = 0;

	CAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData[8] = { 0 };
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
	uint32_t TxMailbox = { 0 };
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]

	TxHeader.IDE = CAN_ID_STD; // Standard ID (not extended)
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	623b      	str	r3, [r7, #32]
	TxHeader.StdId = 0x0; // 11 bit Identifier
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR = CAN_RTR_DATA; // Std RTR Data frame
 8000e32:	2300      	movs	r3, #0
 8000e34:	627b      	str	r3, [r7, #36]	@ 0x24
	TxHeader.DLC = 8; // 8 bytes being transmitted
 8000e36:	2308      	movs	r3, #8
 8000e38:	62bb      	str	r3, [r7, #40]	@ 0x28
	TxData[0] = 1;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	743b      	strb	r3, [r7, #16]
	uint8_t adc_data[2];



  	  // Transmit over CAN
  	  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000e3e:	f107 030c 	add.w	r3, r7, #12
 8000e42:	f107 0210 	add.w	r2, r7, #16
 8000e46:	f107 0118 	add.w	r1, r7, #24
 8000e4a:	4848      	ldr	r0, [pc, #288]	@ (8000f6c <_Z11StartTask02Pv+0x16c>)
 8000e4c:	f004 faa8 	bl	80053a0 <HAL_CAN_AddTxMessage>


  for (;;)
  {

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 8000e50:	220a      	movs	r2, #10
 8000e52:	4947      	ldr	r1, [pc, #284]	@ (8000f70 <_Z11StartTask02Pv+0x170>)
 8000e54:	4847      	ldr	r0, [pc, #284]	@ (8000f74 <_Z11StartTask02Pv+0x174>)
 8000e56:	f003 f839 	bl	8003ecc <HAL_ADC_Start_DMA>
	// Start ADC with DMA
	while (!(dma_flag));
 8000e5a:	bf00      	nop
 8000e5c:	4b46      	ldr	r3, [pc, #280]	@ (8000f78 <_Z11StartTask02Pv+0x178>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	bf0c      	ite	eq
 8000e66:	2301      	moveq	r3, #1
 8000e68:	2300      	movne	r3, #0
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d1f5      	bne.n	8000e5c <_Z11StartTask02Pv+0x5c>

	// Stop ADC with DMA
	HAL_ADC_Stop_DMA(&hadc1);
 8000e70:	4840      	ldr	r0, [pc, #256]	@ (8000f74 <_Z11StartTask02Pv+0x174>)
 8000e72:	f003 f8e7 	bl	8004044 <HAL_ADC_Stop_DMA>
	dma_flag = 0;
 8000e76:	4b40      	ldr	r3, [pc, #256]	@ (8000f78 <_Z11StartTask02Pv+0x178>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	701a      	strb	r2, [r3, #0]
	adc_var_avg = 0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	// Copy ADC buffer and compute average
	for (int i = 0; i < ADC_BUF_LEN; i++)
 8000e82:	2300      	movs	r3, #0
 8000e84:	637b      	str	r3, [r7, #52]	@ 0x34
 8000e86:	e00b      	b.n	8000ea0 <_Z11StartTask02Pv+0xa0>
	{
		adc_var_avg += adc_buf[i];
 8000e88:	4a39      	ldr	r2, [pc, #228]	@ (8000f70 <_Z11StartTask02Pv+0x170>)
 8000e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e8c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000e90:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000e94:	4413      	add	r3, r2
 8000e96:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	for (int i = 0; i < ADC_BUF_LEN; i++)
 8000e9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8000ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ea2:	2b09      	cmp	r3, #9
 8000ea4:	ddf0      	ble.n	8000e88 <_Z11StartTask02Pv+0x88>
	}
	adc_var_avg /= ADC_BUF_LEN;
 8000ea6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000eaa:	4a34      	ldr	r2, [pc, #208]	@ (8000f7c <_Z11StartTask02Pv+0x17c>)
 8000eac:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb0:	08db      	lsrs	r3, r3, #3
 8000eb2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46


	adc_data[0] = adc_var_avg & 0xFF;
 8000eb6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	723b      	strb	r3, [r7, #8]
	adc_data[1] = (adc_var_avg >> 8) & 0x0F;
 8000ebe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000ec2:	0a1b      	lsrs	r3, r3, #8
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	f003 030f 	and.w	r3, r3, #15
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	727b      	strb	r3, [r7, #9]

	if (cc_enable)
 8000ed0:	4b2b      	ldr	r3, [pc, #172]	@ (8000f80 <_Z11StartTask02Pv+0x180>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d00b      	beq.n	8000ef0 <_Z11StartTask02Pv+0xf0>
	{
		if (update_cc)
 8000ed8:	4b2a      	ldr	r3, [pc, #168]	@ (8000f84 <_Z11StartTask02Pv+0x184>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d00e      	beq.n	8000efe <_Z11StartTask02Pv+0xfe>
		{
			TxData[5] = adc_data[0];
 8000ee0:	7a3b      	ldrb	r3, [r7, #8]
 8000ee2:	757b      	strb	r3, [r7, #21]
			TxData[6] = adc_data[1];
 8000ee4:	7a7b      	ldrb	r3, [r7, #9]
 8000ee6:	75bb      	strb	r3, [r7, #22]
			update_cc = 0;
 8000ee8:	4b26      	ldr	r3, [pc, #152]	@ (8000f84 <_Z11StartTask02Pv+0x184>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	701a      	strb	r2, [r3, #0]
 8000eee:	e006      	b.n	8000efe <_Z11StartTask02Pv+0xfe>
		}
	}
	else
	{
		TxData[5] = 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	757b      	strb	r3, [r7, #21]
		TxData[6] = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	75bb      	strb	r3, [r7, #22]
		update_cc = 1;
 8000ef8:	4b22      	ldr	r3, [pc, #136]	@ (8000f84 <_Z11StartTask02Pv+0x184>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	701a      	strb	r2, [r3, #0]
	}


	TxData[0] = 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	743b      	strb	r3, [r7, #16]
	TxData[1] = adc_data[0];
 8000f02:	7a3b      	ldrb	r3, [r7, #8]
 8000f04:	747b      	strb	r3, [r7, #17]
	TxData[2] = adc_data[1];
 8000f06:	7a7b      	ldrb	r3, [r7, #9]
 8000f08:	74bb      	strb	r3, [r7, #18]
	//Update_CAN_Message1(TxData, &U5.portValues, &U16.portValues);
    // Wait until the ADC DMA completes
	  // Send CAN messages
	  while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
 8000f0a:	bf00      	nop
 8000f0c:	4817      	ldr	r0, [pc, #92]	@ (8000f6c <_Z11StartTask02Pv+0x16c>)
 8000f0e:	f004 fb17 	bl	8005540 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	bf0c      	ite	eq
 8000f18:	2301      	moveq	r3, #1
 8000f1a:	2300      	movne	r3, #0
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d1f4      	bne.n	8000f0c <_Z11StartTask02Pv+0x10c>
	  HAL_StatusTypeDef status;
	  status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000f22:	f107 030c 	add.w	r3, r7, #12
 8000f26:	f107 0210 	add.w	r2, r7, #16
 8000f2a:	f107 0118 	add.w	r1, r7, #24
 8000f2e:	480f      	ldr	r0, [pc, #60]	@ (8000f6c <_Z11StartTask02Pv+0x16c>)
 8000f30:	f004 fa36 	bl	80053a0 <HAL_CAN_AddTxMessage>
 8000f34:	4603      	mov	r3, r0
 8000f36:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	  messages_sent++;
 8000f3a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8000f3e:	1c54      	adds	r4, r2, #1
 8000f40:	f143 0500 	adc.w	r5, r3, #0
 8000f44:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
	  if (status == HAL_ERROR)
 8000f48:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d102      	bne.n	8000f56 <_Z11StartTask02Pv+0x156>
	  {
		  Error_Handler();
 8000f50:	f001 f810 	bl	8001f74 <Error_Handler>
 8000f54:	e006      	b.n	8000f64 <_Z11StartTask02Pv+0x164>
	  }
	  else if (status == HAL_BUSY)
 8000f56:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d102      	bne.n	8000f64 <_Z11StartTask02Pv+0x164>
	  {
		  HAL_CAN_BUSY++;
 8000f5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f60:	3301      	adds	r3, #1
 8000f62:	643b      	str	r3, [r7, #64]	@ 0x40
	  }
    osDelay(20);
 8000f64:	2014      	movs	r0, #20
 8000f66:	f009 f983 	bl	800a270 <osDelay>
  }
 8000f6a:	e771      	b.n	8000e50 <_Z11StartTask02Pv+0x50>
 8000f6c:	200001f8 	.word	0x200001f8
 8000f70:	20000094 	.word	0x20000094
 8000f74:	20000148 	.word	0x20000148
 8000f78:	200000a8 	.word	0x200000a8
 8000f7c:	cccccccd 	.word	0xcccccccd
 8000f80:	200000a9 	.word	0x200000a9
 8000f84:	20000144 	.word	0x20000144

08000f88 <_Z11StartTask03Pv>:
  /* USER CODE END StartTask02 */
}

void StartTask03(void *argument)
{
 8000f88:	b5b0      	push	{r4, r5, r7, lr}
 8000f8a:	b090      	sub	sp, #64	@ 0x40
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */

	int debounce_count = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int HAL_CAN_BUSY = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint64_t messages_sent = 0;
 8000f98:	f04f 0200 	mov.w	r2, #0
 8000f9c:	f04f 0300 	mov.w	r3, #0
 8000fa0:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

	CAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData[8] = { 0 };
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	2300      	movs	r3, #0
 8000faa:	613b      	str	r3, [r7, #16]
	uint32_t TxMailbox = { 0 };
 8000fac:	2300      	movs	r3, #0
 8000fae:	60bb      	str	r3, [r7, #8]

	TxHeader.IDE = CAN_ID_STD; // Standard ID (not extended)
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61fb      	str	r3, [r7, #28]
	TxHeader.StdId = 0x7FF; // 11 bit Identifier !!Change!!
 8000fb4:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000fb8:	617b      	str	r3, [r7, #20]
	TxHeader.RTR = CAN_RTR_DATA; // Std RTR Data frame
 8000fba:	2300      	movs	r3, #0
 8000fbc:	623b      	str	r3, [r7, #32]
	TxHeader.DLC = 8; // 8 bytes being transmitted
 8000fbe:	2308      	movs	r3, #8
 8000fc0:	627b      	str	r3, [r7, #36]	@ 0x24
	TxData[0] = 1;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	733b      	strb	r3, [r7, #12]

	Update_CAN_Message1(TxData, &U5.portValues, &U16.portValues);
 8000fc6:	f107 030c 	add.w	r3, r7, #12
 8000fca:	4a31      	ldr	r2, [pc, #196]	@ (8001090 <_Z11StartTask03Pv+0x108>)
 8000fcc:	4931      	ldr	r1, [pc, #196]	@ (8001094 <_Z11StartTask03Pv+0x10c>)
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 fa5c 	bl	800148c <_Z19Update_CAN_Message1PhS_S_>

	/* Infinite loop */
	for(;;)
	{
	  // Read TCAL Input and update flags
	  if (GPIO_Interrupt_Triggered)
 8000fd4:	4b30      	ldr	r3, [pc, #192]	@ (8001098 <_Z11StartTask03Pv+0x110>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d026      	beq.n	800102a <_Z11StartTask03Pv+0xa2>
	  {
		  if (debounce_count++ <= 2) {continue;}
 8000fdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000fde:	1c5a      	adds	r2, r3, #1
 8000fe0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	bfd4      	ite	le
 8000fe6:	2301      	movle	r3, #1
 8000fe8:	2300      	movgt	r3, #0
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d14d      	bne.n	800108c <_Z11StartTask03Pv+0x104>
		  DASHBOARD_CRITICAL(
 8000ff0:	f00b fc82 	bl	800c8f8 <vPortEnterCritical>
 8000ff4:	4829      	ldr	r0, [pc, #164]	@ (800109c <_Z11StartTask03Pv+0x114>)
 8000ff6:	f002 fad9 	bl	80035ac <TCAL9538RSVR_HandleInterrupt>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	bf14      	ite	ne
 8001000:	2301      	movne	r3, #1
 8001002:	2300      	moveq	r3, #0
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <_Z11StartTask03Pv+0x86>
 800100a:	f000 ffb3 	bl	8001f74 <Error_Handler>
 800100e:	f00b fca5 	bl	800c95c <vPortExitCritical>
		  	if (TCAL9538RSVR_HandleInterrupt(&U5) != HAL_OK) { Error_Handler(); }
		  	//if (TCAL9538RSVR_HandleInterrupt(&U16) != HAL_OK){ Error_Handler(); }
		  );

		  Update_CAN_Message1(TxData, &U5.portValues, &U16.portValues);
 8001012:	f107 030c 	add.w	r3, r7, #12
 8001016:	4a1e      	ldr	r2, [pc, #120]	@ (8001090 <_Z11StartTask03Pv+0x108>)
 8001018:	491e      	ldr	r1, [pc, #120]	@ (8001094 <_Z11StartTask03Pv+0x10c>)
 800101a:	4618      	mov	r0, r3
 800101c:	f000 fa36 	bl	800148c <_Z19Update_CAN_Message1PhS_S_>
		  GPIO_Interrupt_Triggered = 0;
 8001020:	4b1d      	ldr	r3, [pc, #116]	@ (8001098 <_Z11StartTask03Pv+0x110>)
 8001022:	2200      	movs	r2, #0
 8001024:	701a      	strb	r2, [r3, #0]
		  debounce_count = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  }

	  // Send CAN messages
	  while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
 800102a:	bf00      	nop
 800102c:	481c      	ldr	r0, [pc, #112]	@ (80010a0 <_Z11StartTask03Pv+0x118>)
 800102e:	f004 fa87 	bl	8005540 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	bf0c      	ite	eq
 8001038:	2301      	moveq	r3, #1
 800103a:	2300      	movne	r3, #0
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	d1f4      	bne.n	800102c <_Z11StartTask03Pv+0xa4>
	  HAL_StatusTypeDef status;
	  status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8001042:	f107 0308 	add.w	r3, r7, #8
 8001046:	f107 020c 	add.w	r2, r7, #12
 800104a:	f107 0114 	add.w	r1, r7, #20
 800104e:	4814      	ldr	r0, [pc, #80]	@ (80010a0 <_Z11StartTask03Pv+0x118>)
 8001050:	f004 f9a6 	bl	80053a0 <HAL_CAN_AddTxMessage>
 8001054:	4603      	mov	r3, r0
 8001056:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	  messages_sent++;
 800105a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800105e:	1c54      	adds	r4, r2, #1
 8001060:	f143 0500 	adc.w	r5, r3, #0
 8001064:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30
	  if (status == HAL_ERROR)
 8001068:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800106c:	2b01      	cmp	r3, #1
 800106e:	d102      	bne.n	8001076 <_Z11StartTask03Pv+0xee>
	  {
		  Error_Handler();
 8001070:	f000 ff80 	bl	8001f74 <Error_Handler>
 8001074:	e006      	b.n	8001084 <_Z11StartTask03Pv+0xfc>
	  }
	  else if (status == HAL_BUSY)
 8001076:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800107a:	2b02      	cmp	r3, #2
 800107c:	d102      	bne.n	8001084 <_Z11StartTask03Pv+0xfc>
	  {
		  HAL_CAN_BUSY++;
 800107e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001080:	3301      	adds	r3, #1
 8001082:	63bb      	str	r3, [r7, #56]	@ 0x38
	  }
	  osDelay(50);
 8001084:	2032      	movs	r0, #50	@ 0x32
 8001086:	f009 f8f3 	bl	800a270 <osDelay>
 800108a:	e7a3      	b.n	8000fd4 <_Z11StartTask03Pv+0x4c>
		  if (debounce_count++ <= 2) {continue;}
 800108c:	bf00      	nop
  }
 800108e:	e7a1      	b.n	8000fd4 <_Z11StartTask03Pv+0x4c>
 8001090:	20000089 	.word	0x20000089
 8001094:	20000081 	.word	0x20000081
 8001098:	200000aa 	.word	0x200000aa
 800109c:	2000007c 	.word	0x2000007c
 80010a0:	200001f8 	.word	0x200001f8

080010a4 <_Z11StartTask04Pv>:
  /* USER CODE END StartTask03 */
}


void StartTask04(void *argument)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */

  dashboardState.lastBlinkTime = HAL_GetTick(); // initialize last blink time
 80010ac:	f002 fb54 	bl	8003758 <HAL_GetTick>
 80010b0:	4603      	mov	r3, r0
 80010b2:	4a1d      	ldr	r2, [pc, #116]	@ (8001128 <_Z11StartTask04Pv+0x84>)
 80010b4:	60d3      	str	r3, [r2, #12]

  /* Infinite loop */
  for(;;)
  {

    uint32_t currentTick = HAL_GetTick();
 80010b6:	f002 fb4f 	bl	8003758 <HAL_GetTick>
 80010ba:	60f8      	str	r0, [r7, #12]

    if (currentTick - dashboardState.lastBlinkTime > BLINK_INTERVAL_MS)
 80010bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001128 <_Z11StartTask04Pv+0x84>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	68fa      	ldr	r2, [r7, #12]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80010c8:	d909      	bls.n	80010de <_Z11StartTask04Pv+0x3a>
    {
      	dashboardState.lastBlinkTime = currentTick;
 80010ca:	4a17      	ldr	r2, [pc, #92]	@ (8001128 <_Z11StartTask04Pv+0x84>)
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	60d3      	str	r3, [r2, #12]
		// enter critical section because we do read-modify-write operations in that function
		DASHBOARD_CRITICAL(
 80010d0:	f00b fc12 	bl	800c8f8 <vPortEnterCritical>
 80010d4:	4814      	ldr	r0, [pc, #80]	@ (8001128 <_Z11StartTask04Pv+0x84>)
 80010d6:	f7ff fd3d 	bl	8000b54 <_ZN14DashboardState11blinkLightsEv>
 80010da:	f00b fc3f 	bl	800c95c <vPortExitCritical>
			dashboardState.blinkLights()
	  	);
	}

	if (dashboardState.updateRequested) {
 80010de:	4b12      	ldr	r3, [pc, #72]	@ (8001128 <_Z11StartTask04Pv+0x84>)
 80010e0:	7edb      	ldrb	r3, [r3, #27]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d009      	beq.n	80010fa <_Z11StartTask04Pv+0x56>
		// enter critical section because we do read-modify-write operations in that function
		DASHBOARD_CRITICAL(
 80010e6:	f00b fc07 	bl	800c8f8 <vPortEnterCritical>
 80010ea:	480f      	ldr	r0, [pc, #60]	@ (8001128 <_Z11StartTask04Pv+0x84>)
 80010ec:	f7ff fc41 	bl	8000972 <_ZN14DashboardState14updateFromUARTEv>
 80010f0:	f00b fc34 	bl	800c95c <vPortExitCritical>
			dashboardState.updateFromUART()
		);
		dashboardState.updateRequested = 0; // reset update requested flag
 80010f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001128 <_Z11StartTask04Pv+0x84>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	76da      	strb	r2, [r3, #27]
	}

	DASHBOARD_CRITICAL(
 80010fa:	f00b fbfd 	bl	800c8f8 <vPortEnterCritical>
 80010fe:	490b      	ldr	r1, [pc, #44]	@ (800112c <_Z11StartTask04Pv+0x88>)
 8001100:	4809      	ldr	r0, [pc, #36]	@ (8001128 <_Z11StartTask04Pv+0x84>)
 8001102:	f7ff fd11 	bl	8000b28 <_ZN14DashboardState11writeToPortER12TCAL9538RSVR>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	bf14      	ite	ne
 800110c:	2301      	movne	r3, #1
 800110e:	2300      	moveq	r3, #0
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <_Z11StartTask04Pv+0x76>
 8001116:	f000 ff2d 	bl	8001f74 <Error_Handler>
 800111a:	f00b fc1f 	bl	800c95c <vPortExitCritical>
		if (dashboardState.writeToPort(U7) != HAL_OK) { Error_Handler(); } // write to output port
	);

    osDelay(50);
 800111e:	2032      	movs	r0, #50	@ 0x32
 8001120:	f009 f8a6 	bl	800a270 <osDelay>
  }
 8001124:	e7c7      	b.n	80010b6 <_Z11StartTask04Pv+0x12>
 8001126:	bf00      	nop
 8001128:	200000ac 	.word	0x200000ac
 800112c:	2000008c 	.word	0x2000008c

08001130 <_Z11StartTask05Pv>:
  /* USER CODE END StartTask04 */
}


void StartTask05(void *argument)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b092      	sub	sp, #72	@ 0x48
 8001134:	af02      	add	r7, sp, #8
 8001136:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask05 */
	uint16_t color;
	bool lightStateChanged = false;
 8001138:	2300      	movs	r3, #0
 800113a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	bool bmsStatusChanged = false;
 800113e:	2300      	movs	r3, #0
 8001140:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	bool mcStatusChanged = false;
 8001144:	2300      	movs	r3, #0
 8001146:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	bool arrayStatusChanged = false;
 800114a:	2300      	movs	r3, #0
 800114c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
	bool hornStateChanged = false;
 8001150:	2300      	movs	r3, #0
 8001152:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	bool fanStateChanged = false;
 8001156:	2300      	movs	r3, #0
 8001158:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
	bool headlightStateChanged = false;
 800115c:	2300      	movs	r3, #0
 800115e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  /* Infinite loop */
  for(;;)
  {
	DASHBOARD_CRITICAL( // critical region for all of these read-read operations that are not atomic
 8001162:	f00b fbc9 	bl	800c8f8 <vPortEnterCritical>
 8001166:	4b88      	ldr	r3, [pc, #544]	@ (8001388 <_Z11StartTask05Pv+0x258>)
 8001168:	785a      	ldrb	r2, [r3, #1]
 800116a:	4b87      	ldr	r3, [pc, #540]	@ (8001388 <_Z11StartTask05Pv+0x258>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	429a      	cmp	r2, r3
 8001170:	bf14      	ite	ne
 8001172:	2301      	movne	r3, #1
 8001174:	2300      	moveq	r3, #0
 8001176:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 800117a:	4b83      	ldr	r3, [pc, #524]	@ (8001388 <_Z11StartTask05Pv+0x258>)
 800117c:	7d9a      	ldrb	r2, [r3, #22]
 800117e:	4b82      	ldr	r3, [pc, #520]	@ (8001388 <_Z11StartTask05Pv+0x258>)
 8001180:	7cdb      	ldrb	r3, [r3, #19]
 8001182:	429a      	cmp	r2, r3
 8001184:	bf14      	ite	ne
 8001186:	2301      	movne	r3, #1
 8001188:	2300      	moveq	r3, #0
 800118a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 800118e:	4b7e      	ldr	r3, [pc, #504]	@ (8001388 <_Z11StartTask05Pv+0x258>)
 8001190:	7dda      	ldrb	r2, [r3, #23]
 8001192:	4b7d      	ldr	r3, [pc, #500]	@ (8001388 <_Z11StartTask05Pv+0x258>)
 8001194:	7d1b      	ldrb	r3, [r3, #20]
 8001196:	429a      	cmp	r2, r3
 8001198:	bf14      	ite	ne
 800119a:	2301      	movne	r3, #1
 800119c:	2300      	moveq	r3, #0
 800119e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 80011a2:	4b79      	ldr	r3, [pc, #484]	@ (8001388 <_Z11StartTask05Pv+0x258>)
 80011a4:	7e1a      	ldrb	r2, [r3, #24]
 80011a6:	4b78      	ldr	r3, [pc, #480]	@ (8001388 <_Z11StartTask05Pv+0x258>)
 80011a8:	7d5b      	ldrb	r3, [r3, #21]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	bf14      	ite	ne
 80011ae:	2301      	movne	r3, #1
 80011b0:	2300      	moveq	r3, #0
 80011b2:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 80011b6:	4b74      	ldr	r3, [pc, #464]	@ (8001388 <_Z11StartTask05Pv+0x258>)
 80011b8:	7c1a      	ldrb	r2, [r3, #16]
 80011ba:	4b73      	ldr	r3, [pc, #460]	@ (8001388 <_Z11StartTask05Pv+0x258>)
 80011bc:	791b      	ldrb	r3, [r3, #4]
 80011be:	429a      	cmp	r2, r3
 80011c0:	bf14      	ite	ne
 80011c2:	2301      	movne	r3, #1
 80011c4:	2300      	moveq	r3, #0
 80011c6:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 80011ca:	4b6f      	ldr	r3, [pc, #444]	@ (8001388 <_Z11StartTask05Pv+0x258>)
 80011cc:	7c5a      	ldrb	r2, [r3, #17]
 80011ce:	4b6e      	ldr	r3, [pc, #440]	@ (8001388 <_Z11StartTask05Pv+0x258>)
 80011d0:	795b      	ldrb	r3, [r3, #5]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	bf14      	ite	ne
 80011d6:	2301      	movne	r3, #1
 80011d8:	2300      	moveq	r3, #0
 80011da:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 80011de:	4b6a      	ldr	r3, [pc, #424]	@ (8001388 <_Z11StartTask05Pv+0x258>)
 80011e0:	7c9a      	ldrb	r2, [r3, #18]
 80011e2:	4b69      	ldr	r3, [pc, #420]	@ (8001388 <_Z11StartTask05Pv+0x258>)
 80011e4:	799b      	ldrb	r3, [r3, #6]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	bf14      	ite	ne
 80011ea:	2301      	movne	r3, #1
 80011ec:	2300      	moveq	r3, #0
 80011ee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80011f2:	4b65      	ldr	r3, [pc, #404]	@ (8001388 <_Z11StartTask05Pv+0x258>)
 80011f4:	781a      	ldrb	r2, [r3, #0]
 80011f6:	4b64      	ldr	r3, [pc, #400]	@ (8001388 <_Z11StartTask05Pv+0x258>)
 80011f8:	705a      	strb	r2, [r3, #1]
 80011fa:	4b63      	ldr	r3, [pc, #396]	@ (8001388 <_Z11StartTask05Pv+0x258>)
 80011fc:	7cda      	ldrb	r2, [r3, #19]
 80011fe:	4b62      	ldr	r3, [pc, #392]	@ (8001388 <_Z11StartTask05Pv+0x258>)
 8001200:	759a      	strb	r2, [r3, #22]
 8001202:	4b61      	ldr	r3, [pc, #388]	@ (8001388 <_Z11StartTask05Pv+0x258>)
 8001204:	7d1a      	ldrb	r2, [r3, #20]
 8001206:	4b60      	ldr	r3, [pc, #384]	@ (8001388 <_Z11StartTask05Pv+0x258>)
 8001208:	75da      	strb	r2, [r3, #23]
 800120a:	4b5f      	ldr	r3, [pc, #380]	@ (8001388 <_Z11StartTask05Pv+0x258>)
 800120c:	7d5a      	ldrb	r2, [r3, #21]
 800120e:	4b5e      	ldr	r3, [pc, #376]	@ (8001388 <_Z11StartTask05Pv+0x258>)
 8001210:	761a      	strb	r2, [r3, #24]
 8001212:	4b5d      	ldr	r3, [pc, #372]	@ (8001388 <_Z11StartTask05Pv+0x258>)
 8001214:	791a      	ldrb	r2, [r3, #4]
 8001216:	4b5c      	ldr	r3, [pc, #368]	@ (8001388 <_Z11StartTask05Pv+0x258>)
 8001218:	741a      	strb	r2, [r3, #16]
 800121a:	4b5b      	ldr	r3, [pc, #364]	@ (8001388 <_Z11StartTask05Pv+0x258>)
 800121c:	795a      	ldrb	r2, [r3, #5]
 800121e:	4b5a      	ldr	r3, [pc, #360]	@ (8001388 <_Z11StartTask05Pv+0x258>)
 8001220:	745a      	strb	r2, [r3, #17]
 8001222:	4b59      	ldr	r3, [pc, #356]	@ (8001388 <_Z11StartTask05Pv+0x258>)
 8001224:	799a      	ldrb	r2, [r3, #6]
 8001226:	4b58      	ldr	r3, [pc, #352]	@ (8001388 <_Z11StartTask05Pv+0x258>)
 8001228:	749a      	strb	r2, [r3, #18]
 800122a:	f00b fb97 	bl	800c95c <vPortExitCritical>
		dashboardState.oldHornState = dashboardState.hornState;
		dashboardState.oldFanState = dashboardState.fanState;
		dashboardState.oldHeadlightState = dashboardState.headlightState;
	); // end critical section

	if(lightStateChanged){
 800122e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8001232:	2b00      	cmp	r3, #0
 8001234:	d06e      	beq.n	8001314 <_Z11StartTask05Pv+0x1e4>
		HAL_Delay(1);
 8001236:	2001      	movs	r0, #1
 8001238:	f002 fa9a 	bl	8003770 <HAL_Delay>
		if(dashboardState.lightState == LIGHTS_LEFT){
 800123c:	4b52      	ldr	r3, [pc, #328]	@ (8001388 <_Z11StartTask05Pv+0x258>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d116      	bne.n	8001272 <_Z11StartTask05Pv+0x142>
			color = RGB565_GREEN;
 8001244:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001248:	87fb      	strh	r3, [r7, #62]	@ 0x3e
			screen.FillCircle(20, 20, 10, color);
 800124a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	230a      	movs	r3, #10
 8001250:	2214      	movs	r2, #20
 8001252:	2114      	movs	r1, #20
 8001254:	484d      	ldr	r0, [pc, #308]	@ (800138c <_Z11StartTask05Pv+0x25c>)
 8001256:	f002 f87d 	bl	8003354 <_ZN7ILI934110FillCircleEtttt>

			color = RGB565_WHITE;
 800125a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800125e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
			screen.FillCircle(300, 20, 10, color);
 8001260:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	230a      	movs	r3, #10
 8001266:	2214      	movs	r2, #20
 8001268:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800126c:	4847      	ldr	r0, [pc, #284]	@ (800138c <_Z11StartTask05Pv+0x25c>)
 800126e:	f002 f871 	bl	8003354 <_ZN7ILI934110FillCircleEtttt>
		}
		if(dashboardState.lightState == LIGHTS_RIGHT){
 8001272:	4b45      	ldr	r3, [pc, #276]	@ (8001388 <_Z11StartTask05Pv+0x258>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b02      	cmp	r3, #2
 8001278:	d116      	bne.n	80012a8 <_Z11StartTask05Pv+0x178>
			color = RGB565_WHITE;
 800127a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800127e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
			screen.FillCircle(20, 20, 10, color);
 8001280:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	230a      	movs	r3, #10
 8001286:	2214      	movs	r2, #20
 8001288:	2114      	movs	r1, #20
 800128a:	4840      	ldr	r0, [pc, #256]	@ (800138c <_Z11StartTask05Pv+0x25c>)
 800128c:	f002 f862 	bl	8003354 <_ZN7ILI934110FillCircleEtttt>

			color = RGB565_GREEN;
 8001290:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001294:	87fb      	strh	r3, [r7, #62]	@ 0x3e
			screen.FillCircle(300, 20, 10, color);
 8001296:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	230a      	movs	r3, #10
 800129c:	2214      	movs	r2, #20
 800129e:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80012a2:	483a      	ldr	r0, [pc, #232]	@ (800138c <_Z11StartTask05Pv+0x25c>)
 80012a4:	f002 f856 	bl	8003354 <_ZN7ILI934110FillCircleEtttt>
		}
		if(dashboardState.lightState == LIGHTS_HAZARD){
 80012a8:	4b37      	ldr	r3, [pc, #220]	@ (8001388 <_Z11StartTask05Pv+0x258>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b03      	cmp	r3, #3
 80012ae:	d116      	bne.n	80012de <_Z11StartTask05Pv+0x1ae>
			color = RGB565_GREEN;
 80012b0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80012b4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
			screen.FillCircle(20, 20, 10, color);
 80012b6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	230a      	movs	r3, #10
 80012bc:	2214      	movs	r2, #20
 80012be:	2114      	movs	r1, #20
 80012c0:	4832      	ldr	r0, [pc, #200]	@ (800138c <_Z11StartTask05Pv+0x25c>)
 80012c2:	f002 f847 	bl	8003354 <_ZN7ILI934110FillCircleEtttt>

			color = RGB565_GREEN;
 80012c6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80012ca:	87fb      	strh	r3, [r7, #62]	@ 0x3e
			screen.FillCircle(300, 20, 10, color);
 80012cc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	230a      	movs	r3, #10
 80012d2:	2214      	movs	r2, #20
 80012d4:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80012d8:	482c      	ldr	r0, [pc, #176]	@ (800138c <_Z11StartTask05Pv+0x25c>)
 80012da:	f002 f83b 	bl	8003354 <_ZN7ILI934110FillCircleEtttt>
		}
		if(dashboardState.lightState == LIGHTS_NONE){
 80012de:	4b2a      	ldr	r3, [pc, #168]	@ (8001388 <_Z11StartTask05Pv+0x258>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d116      	bne.n	8001314 <_Z11StartTask05Pv+0x1e4>

			color = RGB565_WHITE;
 80012e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012ea:	87fb      	strh	r3, [r7, #62]	@ 0x3e
			screen.FillCircle(20, 20, 10, color);
 80012ec:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	230a      	movs	r3, #10
 80012f2:	2214      	movs	r2, #20
 80012f4:	2114      	movs	r1, #20
 80012f6:	4825      	ldr	r0, [pc, #148]	@ (800138c <_Z11StartTask05Pv+0x25c>)
 80012f8:	f002 f82c 	bl	8003354 <_ZN7ILI934110FillCircleEtttt>

			color = RGB565_WHITE;
 80012fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001300:	87fb      	strh	r3, [r7, #62]	@ 0x3e
			screen.FillCircle(300, 20, 10, color);
 8001302:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	230a      	movs	r3, #10
 8001308:	2214      	movs	r2, #20
 800130a:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800130e:	481f      	ldr	r0, [pc, #124]	@ (800138c <_Z11StartTask05Pv+0x25c>)
 8001310:	f002 f820 	bl	8003354 <_ZN7ILI934110FillCircleEtttt>
		}
	}
	if(bmsStatusChanged){
 8001314:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001318:	2b00      	cmp	r3, #0
 800131a:	d012      	beq.n	8001342 <_Z11StartTask05Pv+0x212>
		if (dashboardState.bmsStatus) color = RGB565_GREEN;
 800131c:	4b1a      	ldr	r3, [pc, #104]	@ (8001388 <_Z11StartTask05Pv+0x258>)
 800131e:	7cdb      	ldrb	r3, [r3, #19]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <_Z11StartTask05Pv+0x1fc>
 8001324:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001328:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800132a:	e002      	b.n	8001332 <_Z11StartTask05Pv+0x202>
		else color = RGB565_RED;
 800132c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001330:	87fb      	strh	r3, [r7, #62]	@ 0x3e
		screen.FillCircle(70, 210, 10, color);
 8001332:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	230a      	movs	r3, #10
 8001338:	22d2      	movs	r2, #210	@ 0xd2
 800133a:	2146      	movs	r1, #70	@ 0x46
 800133c:	4813      	ldr	r0, [pc, #76]	@ (800138c <_Z11StartTask05Pv+0x25c>)
 800133e:	f002 f809 	bl	8003354 <_ZN7ILI934110FillCircleEtttt>
	}
	if(mcStatusChanged){
 8001342:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001346:	2b00      	cmp	r3, #0
 8001348:	d012      	beq.n	8001370 <_Z11StartTask05Pv+0x240>
		if (dashboardState.mcStatus) color = RGB565_GREEN;
 800134a:	4b0f      	ldr	r3, [pc, #60]	@ (8001388 <_Z11StartTask05Pv+0x258>)
 800134c:	7d1b      	ldrb	r3, [r3, #20]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d003      	beq.n	800135a <_Z11StartTask05Pv+0x22a>
 8001352:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001356:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8001358:	e002      	b.n	8001360 <_Z11StartTask05Pv+0x230>
		else color = RGB565_RED;
 800135a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800135e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
		screen.FillCircle(150, 210, 10, color);
 8001360:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	230a      	movs	r3, #10
 8001366:	22d2      	movs	r2, #210	@ 0xd2
 8001368:	2196      	movs	r1, #150	@ 0x96
 800136a:	4808      	ldr	r0, [pc, #32]	@ (800138c <_Z11StartTask05Pv+0x25c>)
 800136c:	f001 fff2 	bl	8003354 <_ZN7ILI934110FillCircleEtttt>
	}
	if(arrayStatusChanged){
 8001370:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8001374:	2b00      	cmp	r3, #0
 8001376:	d016      	beq.n	80013a6 <_Z11StartTask05Pv+0x276>
		if (dashboardState.arrayStatus) color = RGB565_GREEN;
 8001378:	4b03      	ldr	r3, [pc, #12]	@ (8001388 <_Z11StartTask05Pv+0x258>)
 800137a:	7d5b      	ldrb	r3, [r3, #21]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d007      	beq.n	8001390 <_Z11StartTask05Pv+0x260>
 8001380:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001384:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8001386:	e006      	b.n	8001396 <_Z11StartTask05Pv+0x266>
 8001388:	200000ac 	.word	0x200000ac
 800138c:	200000d4 	.word	0x200000d4
		else color = RGB565_RED;
 8001390:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001394:	87fb      	strh	r3, [r7, #62]	@ 0x3e
		screen.FillCircle(235, 210, 10, color);
 8001396:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001398:	9300      	str	r3, [sp, #0]
 800139a:	230a      	movs	r3, #10
 800139c:	22d2      	movs	r2, #210	@ 0xd2
 800139e:	21eb      	movs	r1, #235	@ 0xeb
 80013a0:	4835      	ldr	r0, [pc, #212]	@ (8001478 <_Z11StartTask05Pv+0x348>)
 80013a2:	f001 ffd7 	bl	8003354 <_ZN7ILI934110FillCircleEtttt>
	// always display velocity, and power
	float supp_batt_voltage;
	float motor_power;
	float car_velocity;

	DASHBOARD_CRITICAL(
 80013a6:	f00b faa7 	bl	800c8f8 <vPortEnterCritical>
 80013aa:	4834      	ldr	r0, [pc, #208]	@ (800147c <_Z11StartTask05Pv+0x34c>)
 80013ac:	f7ff fc0c 	bl	8000bc8 <_ZN14DashboardState18getSuppBattVoltageEv>
 80013b0:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
 80013b4:	4831      	ldr	r0, [pc, #196]	@ (800147c <_Z11StartTask05Pv+0x34c>)
 80013b6:	f7ff fc16 	bl	8000be6 <_ZN14DashboardState13getMotorPowerEv>
 80013ba:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
 80013be:	482f      	ldr	r0, [pc, #188]	@ (800147c <_Z11StartTask05Pv+0x34c>)
 80013c0:	f7ff fc20 	bl	8000c04 <_ZN14DashboardState14getCarVelocityEv>
 80013c4:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
 80013c8:	f00b fac8 	bl	800c95c <vPortExitCritical>
		motor_power = dashboardState.getMotorPower();
		car_velocity = dashboardState.getCarVelocity();
	);

	char textBuffer[32];
	screen.SetTextSize(2);
 80013cc:	2102      	movs	r1, #2
 80013ce:	482a      	ldr	r0, [pc, #168]	@ (8001478 <_Z11StartTask05Pv+0x348>)
 80013d0:	f001 fdb6 	bl	8002f40 <_ZN7ILI934111SetTextSizeEh>

	// Clear old text area
	screen.FillRect(30, 130, 260, 80, RGB565_WHITE); // adjust area as needed
 80013d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013d8:	9301      	str	r3, [sp, #4]
 80013da:	2350      	movs	r3, #80	@ 0x50
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80013e2:	2282      	movs	r2, #130	@ 0x82
 80013e4:	211e      	movs	r1, #30
 80013e6:	4824      	ldr	r0, [pc, #144]	@ (8001478 <_Z11StartTask05Pv+0x348>)
 80013e8:	f001 ff3b 	bl	8003262 <_ZN7ILI93418FillRectEttttt>

	// Draw Supplemental Battery Voltage
	snprintf(textBuffer, sizeof(textBuffer), "Supp Volt: %.1f V", supp_batt_voltage);
 80013ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80013ee:	f7ff f8b3 	bl	8000558 <__aeabi_f2d>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	f107 0008 	add.w	r0, r7, #8
 80013fa:	e9cd 2300 	strd	r2, r3, [sp]
 80013fe:	4a20      	ldr	r2, [pc, #128]	@ (8001480 <_Z11StartTask05Pv+0x350>)
 8001400:	2120      	movs	r1, #32
 8001402:	f00b fe43 	bl	800d08c <sniprintf>
	screen.DrawText(30, 130, textBuffer, RGB565_BLACK);
 8001406:	f107 0308 	add.w	r3, r7, #8
 800140a:	2200      	movs	r2, #0
 800140c:	9200      	str	r2, [sp, #0]
 800140e:	2282      	movs	r2, #130	@ 0x82
 8001410:	211e      	movs	r1, #30
 8001412:	4819      	ldr	r0, [pc, #100]	@ (8001478 <_Z11StartTask05Pv+0x348>)
 8001414:	f001 fec0 	bl	8003198 <_ZN7ILI93418DrawTextEttPKct>

	// Draw Motor Power
	snprintf(textBuffer, sizeof(textBuffer), "Motor Pwr: %.0f W", motor_power);
 8001418:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800141a:	f7ff f89d 	bl	8000558 <__aeabi_f2d>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	f107 0008 	add.w	r0, r7, #8
 8001426:	e9cd 2300 	strd	r2, r3, [sp]
 800142a:	4a16      	ldr	r2, [pc, #88]	@ (8001484 <_Z11StartTask05Pv+0x354>)
 800142c:	2120      	movs	r1, #32
 800142e:	f00b fe2d 	bl	800d08c <sniprintf>
	screen.DrawText(30, 160, textBuffer, RGB565_BLACK);
 8001432:	f107 0308 	add.w	r3, r7, #8
 8001436:	2200      	movs	r2, #0
 8001438:	9200      	str	r2, [sp, #0]
 800143a:	22a0      	movs	r2, #160	@ 0xa0
 800143c:	211e      	movs	r1, #30
 800143e:	480e      	ldr	r0, [pc, #56]	@ (8001478 <_Z11StartTask05Pv+0x348>)
 8001440:	f001 feaa 	bl	8003198 <_ZN7ILI93418DrawTextEttPKct>

	// Draw Car Velocity
	snprintf(textBuffer, sizeof(textBuffer), "Velocity: %.1f m/s", car_velocity);
 8001444:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001446:	f7ff f887 	bl	8000558 <__aeabi_f2d>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	f107 0008 	add.w	r0, r7, #8
 8001452:	e9cd 2300 	strd	r2, r3, [sp]
 8001456:	4a0c      	ldr	r2, [pc, #48]	@ (8001488 <_Z11StartTask05Pv+0x358>)
 8001458:	2120      	movs	r1, #32
 800145a:	f00b fe17 	bl	800d08c <sniprintf>
	screen.DrawText(30, 190, textBuffer, RGB565_BLACK);	
 800145e:	f107 0308 	add.w	r3, r7, #8
 8001462:	2200      	movs	r2, #0
 8001464:	9200      	str	r2, [sp, #0]
 8001466:	22be      	movs	r2, #190	@ 0xbe
 8001468:	211e      	movs	r1, #30
 800146a:	4803      	ldr	r0, [pc, #12]	@ (8001478 <_Z11StartTask05Pv+0x348>)
 800146c:	f001 fe94 	bl	8003198 <_ZN7ILI93418DrawTextEttPKct>

    osDelay(100);
 8001470:	2064      	movs	r0, #100	@ 0x64
 8001472:	f008 fefd 	bl	800a270 <osDelay>
  }
 8001476:	e674      	b.n	8001162 <_Z11StartTask05Pv+0x32>
 8001478:	200000d4 	.word	0x200000d4
 800147c:	200000ac 	.word	0x200000ac
 8001480:	0800d984 	.word	0x0800d984
 8001484:	0800d998 	.word	0x0800d998
 8001488:	0800d9ac 	.word	0x0800d9ac

0800148c <_Z19Update_CAN_Message1PhS_S_>:
  /* USER CODE END StartTask05 */
}


void Update_CAN_Message1(uint8_t flags[8], uint8_t* Input1, uint8_t* Input2)
{
 800148c:	b480      	push	{r7}
 800148e:	b087      	sub	sp, #28
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]

	static uint8_t prev_input1 = 0;
	static uint8_t prev_input2 = 0;


	flags[3] = 0;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	3303      	adds	r3, #3
 800149c:	2200      	movs	r2, #0
 800149e:	701a      	strb	r2, [r3, #0]
	flags[4] = 0;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	3304      	adds	r3, #4
 80014a4:	2200      	movs	r2, #0
 80014a6:	701a      	strb	r2, [r3, #0]


	// Detect rising edges for each flag
	uint8_t risingEdges_flag1 = (~prev_input1) & *Input1;
 80014a8:	4b90      	ldr	r3, [pc, #576]	@ (80016ec <_Z19Update_CAN_Message1PhS_S_+0x260>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	b25b      	sxtb	r3, r3
 80014ae:	43db      	mvns	r3, r3
 80014b0:	b25a      	sxtb	r2, r3
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	b25b      	sxtb	r3, r3
 80014b8:	4013      	ands	r3, r2
 80014ba:	b25b      	sxtb	r3, r3
 80014bc:	75fb      	strb	r3, [r7, #23]
	uint8_t risingEdges_flag2 = (~prev_input2) & *Input2;
 80014be:	4b8c      	ldr	r3, [pc, #560]	@ (80016f0 <_Z19Update_CAN_Message1PhS_S_+0x264>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	b25b      	sxtb	r3, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	b25a      	sxtb	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	b25b      	sxtb	r3, r3
 80014ce:	4013      	ands	r3, r2
 80014d0:	b25b      	sxtb	r3, r3
 80014d2:	75bb      	strb	r3, [r7, #22]


	flags[1] ^= CHECK_BIT(risingEdges_flag2, 4) << 0; // Main
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	3301      	adds	r3, #1
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	b25a      	sxtb	r2, r3
 80014dc:	7dbb      	ldrb	r3, [r7, #22]
 80014de:	f003 0310 	and.w	r3, r3, #16
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	bf14      	ite	ne
 80014e6:	2301      	movne	r3, #1
 80014e8:	2300      	moveq	r3, #0
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	b25b      	sxtb	r3, r3
 80014ee:	4053      	eors	r3, r2
 80014f0:	b25a      	sxtb	r2, r3
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	3301      	adds	r3, #1
 80014f6:	b2d2      	uxtb	r2, r2
 80014f8:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag2, 5) << 1; // Break
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	3301      	adds	r3, #1
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	b25a      	sxtb	r2, r3
 8001502:	7dbb      	ldrb	r3, [r7, #22]
 8001504:	111b      	asrs	r3, r3, #4
 8001506:	b25b      	sxtb	r3, r3
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	b25b      	sxtb	r3, r3
 800150e:	4053      	eors	r3, r2
 8001510:	b25a      	sxtb	r2, r3
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	3301      	adds	r3, #1
 8001516:	b2d2      	uxtb	r2, r2
 8001518:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag2, 0) << 2; // Mode
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	3301      	adds	r3, #1
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	b25a      	sxtb	r2, r3
 8001522:	7dbb      	ldrb	r3, [r7, #22]
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	b25b      	sxtb	r3, r3
 8001528:	f003 0304 	and.w	r3, r3, #4
 800152c:	b25b      	sxtb	r3, r3
 800152e:	4053      	eors	r3, r2
 8001530:	b25a      	sxtb	r2, r3
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	3301      	adds	r3, #1
 8001536:	b2d2      	uxtb	r2, r2
 8001538:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag1, 5) << 3; // MC
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	3301      	adds	r3, #1
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	b25a      	sxtb	r2, r3
 8001542:	7dfb      	ldrb	r3, [r7, #23]
 8001544:	109b      	asrs	r3, r3, #2
 8001546:	b25b      	sxtb	r3, r3
 8001548:	f003 0308 	and.w	r3, r3, #8
 800154c:	b25b      	sxtb	r3, r3
 800154e:	4053      	eors	r3, r2
 8001550:	b25a      	sxtb	r2, r3
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	3301      	adds	r3, #1
 8001556:	b2d2      	uxtb	r2, r2
 8001558:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag1, 6) << 4; // Array
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	3301      	adds	r3, #1
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	b25a      	sxtb	r2, r3
 8001562:	7dfb      	ldrb	r3, [r7, #23]
 8001564:	109b      	asrs	r3, r3, #2
 8001566:	b25b      	sxtb	r3, r3
 8001568:	f003 0310 	and.w	r3, r3, #16
 800156c:	b25b      	sxtb	r3, r3
 800156e:	4053      	eors	r3, r2
 8001570:	b25a      	sxtb	r2, r3
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	3301      	adds	r3, #1
 8001576:	b2d2      	uxtb	r2, r2
 8001578:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag1, 4) << 5; // Extra 1
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	3301      	adds	r3, #1
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	b25a      	sxtb	r2, r3
 8001582:	7dfb      	ldrb	r3, [r7, #23]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	b25b      	sxtb	r3, r3
 8001588:	f003 0320 	and.w	r3, r3, #32
 800158c:	b25b      	sxtb	r3, r3
 800158e:	4053      	eors	r3, r2
 8001590:	b25a      	sxtb	r2, r3
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	3301      	adds	r3, #1
 8001596:	b2d2      	uxtb	r2, r2
 8001598:	701a      	strb	r2, [r3, #0]
	if (dashboardState.hornState) // Horn
 800159a:	4b56      	ldr	r3, [pc, #344]	@ (80016f4 <_Z19Update_CAN_Message1PhS_S_+0x268>)
 800159c:	791b      	ldrb	r3, [r3, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d009      	beq.n	80015b6 <_Z19Update_CAN_Message1PhS_S_+0x12a>
		flags[1] |= (1 << 6);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	3301      	adds	r3, #1
 80015a6:	781a      	ldrb	r2, [r3, #0]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	3301      	adds	r3, #1
 80015ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80015b0:	b2d2      	uxtb	r2, r2
 80015b2:	701a      	strb	r2, [r3, #0]
 80015b4:	e008      	b.n	80015c8 <_Z19Update_CAN_Message1PhS_S_+0x13c>
	else
		flags[1] &= ~(1 << 6);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	3301      	adds	r3, #1
 80015ba:	781a      	ldrb	r2, [r3, #0]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	3301      	adds	r3, #1
 80015c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80015c4:	b2d2      	uxtb	r2, r2
 80015c6:	701a      	strb	r2, [r3, #0]
	if (dashboardState.pttState) // PTT (Push to Talk)
 80015c8:	4b4a      	ldr	r3, [pc, #296]	@ (80016f4 <_Z19Update_CAN_Message1PhS_S_+0x268>)
 80015ca:	79db      	ldrb	r3, [r3, #7]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d009      	beq.n	80015e4 <_Z19Update_CAN_Message1PhS_S_+0x158>
		flags[1] |= (1 << 7);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	3301      	adds	r3, #1
 80015d4:	781a      	ldrb	r2, [r3, #0]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	3301      	adds	r3, #1
 80015da:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80015de:	b2d2      	uxtb	r2, r2
 80015e0:	701a      	strb	r2, [r3, #0]
 80015e2:	e008      	b.n	80015f6 <_Z19Update_CAN_Message1PhS_S_+0x16a>
	else
		flags[1] &= ~(1 << 7);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	3301      	adds	r3, #1
 80015e8:	781a      	ldrb	r2, [r3, #0]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	3301      	adds	r3, #1
 80015ee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80015f2:	b2d2      	uxtb	r2, r2
 80015f4:	701a      	strb	r2, [r3, #0]
	/*
		NOTE:
			currently sending state of turn signal, turn signal on or off
			if wanting to send actual control of turn signal light, need to send outputPortState variable instead of lightState	
	*/
	if (dashboardState.lightState == LIGHTS_HAZARD) // Blinkers
 80015f6:	4b3f      	ldr	r3, [pc, #252]	@ (80016f4 <_Z19Update_CAN_Message1PhS_S_+0x268>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	2b03      	cmp	r3, #3
 80015fc:	d109      	bne.n	8001612 <_Z19Update_CAN_Message1PhS_S_+0x186>
		flags[2] |= (1 << 0);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	3302      	adds	r3, #2
 8001602:	781a      	ldrb	r2, [r3, #0]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	3302      	adds	r3, #2
 8001608:	f042 0201 	orr.w	r2, r2, #1
 800160c:	b2d2      	uxtb	r2, r2
 800160e:	701a      	strb	r2, [r3, #0]
 8001610:	e008      	b.n	8001624 <_Z19Update_CAN_Message1PhS_S_+0x198>
	else
		flags[2] &= ~(1 << 0);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	3302      	adds	r3, #2
 8001616:	781a      	ldrb	r2, [r3, #0]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	3302      	adds	r3, #2
 800161c:	f022 0201 	bic.w	r2, r2, #1
 8001620:	b2d2      	uxtb	r2, r2
 8001622:	701a      	strb	r2, [r3, #0]
	if (dashboardState.lightState == LIGHTS_LEFT) // Left Turn
 8001624:	4b33      	ldr	r3, [pc, #204]	@ (80016f4 <_Z19Update_CAN_Message1PhS_S_+0x268>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d109      	bne.n	8001640 <_Z19Update_CAN_Message1PhS_S_+0x1b4>
		flags[2] |= (1 << 1);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	3302      	adds	r3, #2
 8001630:	781a      	ldrb	r2, [r3, #0]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	3302      	adds	r3, #2
 8001636:	f042 0202 	orr.w	r2, r2, #2
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	701a      	strb	r2, [r3, #0]
 800163e:	e008      	b.n	8001652 <_Z19Update_CAN_Message1PhS_S_+0x1c6>
	else
		flags[2] &= ~(1 << 1);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	3302      	adds	r3, #2
 8001644:	781a      	ldrb	r2, [r3, #0]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	3302      	adds	r3, #2
 800164a:	f022 0202 	bic.w	r2, r2, #2
 800164e:	b2d2      	uxtb	r2, r2
 8001650:	701a      	strb	r2, [r3, #0]
	if (dashboardState.lightState == LIGHTS_RIGHT) // Right Turn
 8001652:	4b28      	ldr	r3, [pc, #160]	@ (80016f4 <_Z19Update_CAN_Message1PhS_S_+0x268>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b02      	cmp	r3, #2
 8001658:	d109      	bne.n	800166e <_Z19Update_CAN_Message1PhS_S_+0x1e2>
		flags[2] |= (1 << 2);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	3302      	adds	r3, #2
 800165e:	781a      	ldrb	r2, [r3, #0]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	3302      	adds	r3, #2
 8001664:	f042 0204 	orr.w	r2, r2, #4
 8001668:	b2d2      	uxtb	r2, r2
 800166a:	701a      	strb	r2, [r3, #0]
 800166c:	e008      	b.n	8001680 <_Z19Update_CAN_Message1PhS_S_+0x1f4>
	else
		flags[2] &= ~(1 << 2);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	3302      	adds	r3, #2
 8001672:	781a      	ldrb	r2, [r3, #0]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	3302      	adds	r3, #2
 8001678:	f022 0204 	bic.w	r2, r2, #4
 800167c:	b2d2      	uxtb	r2, r2
 800167e:	701a      	strb	r2, [r3, #0]
	if (dashboardState.headlightState) // Headlights
 8001680:	4b1c      	ldr	r3, [pc, #112]	@ (80016f4 <_Z19Update_CAN_Message1PhS_S_+0x268>)
 8001682:	799b      	ldrb	r3, [r3, #6]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d009      	beq.n	800169c <_Z19Update_CAN_Message1PhS_S_+0x210>
		flags[2] |= (1 << 3);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	3302      	adds	r3, #2
 800168c:	781a      	ldrb	r2, [r3, #0]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	3302      	adds	r3, #2
 8001692:	f042 0208 	orr.w	r2, r2, #8
 8001696:	b2d2      	uxtb	r2, r2
 8001698:	701a      	strb	r2, [r3, #0]
 800169a:	e008      	b.n	80016ae <_Z19Update_CAN_Message1PhS_S_+0x222>
	else
		flags[2] &= ~(1 << 3);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	3302      	adds	r3, #2
 80016a0:	781a      	ldrb	r2, [r3, #0]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	3302      	adds	r3, #2
 80016a6:	f022 0208 	bic.w	r2, r2, #8
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	701a      	strb	r2, [r3, #0]

	cc_enable ^= CHECK_BIT(risingEdges_flag2, 1);
 80016ae:	7dbb      	ldrb	r3, [r7, #22]
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	bf14      	ite	ne
 80016b8:	2301      	movne	r3, #1
 80016ba:	2300      	moveq	r3, #0
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	b25a      	sxtb	r2, r3
 80016c0:	4b0d      	ldr	r3, [pc, #52]	@ (80016f8 <_Z19Update_CAN_Message1PhS_S_+0x26c>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	b25b      	sxtb	r3, r3
 80016c6:	4053      	eors	r3, r2
 80016c8:	b25b      	sxtb	r3, r3
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	4b0a      	ldr	r3, [pc, #40]	@ (80016f8 <_Z19Update_CAN_Message1PhS_S_+0x26c>)
 80016ce:	701a      	strb	r2, [r3, #0]

	prev_input1 = *Input1;
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	781a      	ldrb	r2, [r3, #0]
 80016d4:	4b05      	ldr	r3, [pc, #20]	@ (80016ec <_Z19Update_CAN_Message1PhS_S_+0x260>)
 80016d6:	701a      	strb	r2, [r3, #0]
	prev_input2 = *Input2;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	781a      	ldrb	r2, [r3, #0]
 80016dc:	4b04      	ldr	r3, [pc, #16]	@ (80016f0 <_Z19Update_CAN_Message1PhS_S_+0x264>)
 80016de:	701a      	strb	r2, [r3, #0]

}
 80016e0:	bf00      	nop
 80016e2:	371c      	adds	r7, #28
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	20000145 	.word	0x20000145
 80016f0:	20000146 	.word	0x20000146
 80016f4:	200000ac 	.word	0x200000ac
 80016f8:	200000a9 	.word	0x200000a9

080016fc <_Z16Init_CAN_Filter1R17CAN_HandleTypeDef>:
	 *
	 * */
}

void Init_CAN_Filter1(CAN_HandleTypeDef &hcan1)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08c      	sub	sp, #48	@ 0x30
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  CAN_FilterTypeDef canfilterconfig;
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001704:	2301      	movs	r3, #1
 8001706:	62bb      	str	r3, [r7, #40]	@ 0x28
  canfilterconfig.FilterBank = 18;
 8001708:	2312      	movs	r3, #18
 800170a:	61fb      	str	r3, [r7, #28]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800170c:	2300      	movs	r3, #0
 800170e:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8001710:	2301      	movs	r3, #1
 8001712:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001714:	2301      	movs	r3, #1
 8001716:	627b      	str	r3, [r7, #36]	@ 0x24
  canfilterconfig.SlaveStartFilterBank = 20;
 8001718:	2314      	movs	r3, #20
 800171a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  // CAN ID"S TO ACCEPT GO HERE, 4 ACCEPTED IN LIST MODE
  canfilterconfig.FilterIdHigh = CAN_ID_VCU_SENSORS << 5;
 800171c:	2340      	movs	r3, #64	@ 0x40
 800171e:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterIdLow = CAN_ID_POWERBOARD << 5;
 8001720:	2360      	movs	r3, #96	@ 0x60
 8001722:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMaskIdHigh = CAN_ID_BMS_POWER_CONSUM_INFO << 5;
 8001724:	23c0      	movs	r3, #192	@ 0xc0
 8001726:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterMaskIdLow = (uint32_t)CAN_ID_MITSUBA_MOTOR_FRAME_0 << 5;
 8001728:	4b05      	ldr	r3, [pc, #20]	@ (8001740 <_Z16Init_CAN_Filter1R17CAN_HandleTypeDef+0x44>)
 800172a:	617b      	str	r3, [r7, #20]

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 800172c:	f107 0308 	add.w	r3, r7, #8
 8001730:	4619      	mov	r1, r3
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f003 fd10 	bl	8005158 <HAL_CAN_ConfigFilter>
}
 8001738:	bf00      	nop
 800173a:	3730      	adds	r7, #48	@ 0x30
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	10a044a0 	.word	0x10a044a0

08001744 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART4)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a0c      	ldr	r2, [pc, #48]	@ (8001784 <HAL_UART_RxCpltCallback+0x40>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d10c      	bne.n	8001770 <HAL_UART_RxCpltCallback+0x2c>
  	{
		if (dashboardState.uart_rx != dashboardState.old_uart_rx)
 8001756:	4b0c      	ldr	r3, [pc, #48]	@ (8001788 <HAL_UART_RxCpltCallback+0x44>)
 8001758:	7e5a      	ldrb	r2, [r3, #25]
 800175a:	4b0b      	ldr	r3, [pc, #44]	@ (8001788 <HAL_UART_RxCpltCallback+0x44>)
 800175c:	7e9b      	ldrb	r3, [r3, #26]
 800175e:	429a      	cmp	r2, r3
 8001760:	d006      	beq.n	8001770 <HAL_UART_RxCpltCallback+0x2c>
		{
			dashboardState.updateRequested = 1; // set flag to update dashboard state
 8001762:	4b09      	ldr	r3, [pc, #36]	@ (8001788 <HAL_UART_RxCpltCallback+0x44>)
 8001764:	2201      	movs	r2, #1
 8001766:	76da      	strb	r2, [r3, #27]
			dashboardState.old_uart_rx = dashboardState.uart_rx;
 8001768:	4b07      	ldr	r3, [pc, #28]	@ (8001788 <HAL_UART_RxCpltCallback+0x44>)
 800176a:	7e5a      	ldrb	r2, [r3, #25]
 800176c:	4b06      	ldr	r3, [pc, #24]	@ (8001788 <HAL_UART_RxCpltCallback+0x44>)
 800176e:	769a      	strb	r2, [r3, #26]
		}
	}
	HAL_UART_Receive_IT(&huart4, &dashboardState.uart_rx, 1);
 8001770:	2201      	movs	r2, #1
 8001772:	4906      	ldr	r1, [pc, #24]	@ (800178c <HAL_UART_RxCpltCallback+0x48>)
 8001774:	4806      	ldr	r0, [pc, #24]	@ (8001790 <HAL_UART_RxCpltCallback+0x4c>)
 8001776:	f007 f949 	bl	8008a0c <HAL_UART_Receive_IT>
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40004c00 	.word	0x40004c00
 8001788:	200000ac 	.word	0x200000ac
 800178c:	200000c5 	.word	0x200000c5
 8001790:	2000029c 	.word	0x2000029c

08001794 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	dma_flag = 1;
 800179c:	4b04      	ldr	r3, [pc, #16]	@ (80017b0 <HAL_ADC_ConvCpltCallback+0x1c>)
 800179e:	2201      	movs	r2, #1
 80017a0:	701a      	strb	r2, [r3, #0]
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	200000a8 	.word	0x200000a8

080017b4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	80fb      	strh	r3, [r7, #6]
	GPIO_Interrupt_Triggered = 1;
 80017be:	4b04      	ldr	r3, [pc, #16]	@ (80017d0 <HAL_GPIO_EXTI_Callback+0x1c>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	701a      	strb	r2, [r3, #0]
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	200000aa 	.word	0x200000aa

080017d4 <_Z41__static_initialization_and_destruction_0ii>:
		dashboardState.motor_voltage_msb = (motor_voltage >> 8) & 0xFF;
		dashboardState.motor_current_lsb = motor_current & 0xFF;
		dashboardState.motor_current_msb = (motor_current >> 8) & 0xFF;
		dashboardState.motor_current_direction = motor_current_direction;
	}
}
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d10a      	bne.n	80017fa <_Z41__static_initialization_and_destruction_0ii+0x26>
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d105      	bne.n	80017fa <_Z41__static_initialization_and_destruction_0ii+0x26>
ILI9341 screen(320, 240);
 80017ee:	22f0      	movs	r2, #240	@ 0xf0
 80017f0:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 80017f4:	4808      	ldr	r0, [pc, #32]	@ (8001818 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80017f6:	f000 fef3 	bl	80025e0 <_ZN7ILI9341C1Ess>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d107      	bne.n	8001810 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001806:	4293      	cmp	r3, r2
 8001808:	d102      	bne.n	8001810 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800180a:	4803      	ldr	r0, [pc, #12]	@ (8001818 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800180c:	f000 ff82 	bl	8002714 <_ZN7ILI9341D1Ev>
}
 8001810:	bf00      	nop
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	200000d4 	.word	0x200000d4

0800181c <_GLOBAL__sub_I_U5>:
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
 8001820:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001824:	2001      	movs	r0, #1
 8001826:	f7ff ffd5 	bl	80017d4 <_Z41__static_initialization_and_destruction_0ii>
 800182a:	bd80      	pop	{r7, pc}

0800182c <_GLOBAL__sub_D_U5>:
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
 8001830:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001834:	2000      	movs	r0, #0
 8001836:	f7ff ffcd 	bl	80017d4 <_Z41__static_initialization_and_destruction_0ii>
 800183a:	bd80      	pop	{r7, pc}

0800183c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001840:	f001 ff5d 	bl	80036fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001844:	f000 f868 	bl	8001918 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001848:	f000 faf4 	bl	8001e34 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800184c:	f000 fad4 	bl	8001df8 <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 8001850:	f000 f8b8 	bl	80019c4 <_ZL12MX_ADC1_Initv>
  MX_I2C4_Init();
 8001854:	f000 fa4e 	bl	8001cf4 <_ZL12MX_I2C4_Initv>
  MX_CAN1_Init();
 8001858:	f000 f9d8 	bl	8001c0c <_ZL12MX_CAN1_Initv>
  MX_CAN2_Init();
 800185c:	f000 fa10 	bl	8001c80 <_ZL12MX_CAN2_Initv>
  MX_UART4_Init();
 8001860:	f000 fa96 	bl	8001d90 <_ZL13MX_UART4_Initv>
  /* USER CODE BEGIN 2 */
  
  CPP_UserSetup();
 8001864:	f7ff f9de 	bl	8000c24 <CPP_UserSetup>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001868:	f008 fc26 	bl	800a0b8 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of CAN_Mutex */
  CAN_MutexHandle = osSemaphoreNew(1, 1, &CAN_Mutex_attributes);
 800186c:	4a19      	ldr	r2, [pc, #100]	@ (80018d4 <main+0x98>)
 800186e:	2101      	movs	r1, #1
 8001870:	2001      	movs	r0, #1
 8001872:	f008 fd18 	bl	800a2a6 <osSemaphoreNew>
 8001876:	4603      	mov	r3, r0
 8001878:	4a17      	ldr	r2, [pc, #92]	@ (80018d8 <main+0x9c>)
 800187a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HeartBeat */
  HeartBeatHandle = osThreadNew(StartTask01, NULL, &HeartBeat_attributes);
 800187c:	4a17      	ldr	r2, [pc, #92]	@ (80018dc <main+0xa0>)
 800187e:	2100      	movs	r1, #0
 8001880:	4817      	ldr	r0, [pc, #92]	@ (80018e0 <main+0xa4>)
 8001882:	f008 fc63 	bl	800a14c <osThreadNew>
 8001886:	4603      	mov	r3, r0
 8001888:	4a16      	ldr	r2, [pc, #88]	@ (80018e4 <main+0xa8>)
 800188a:	6013      	str	r3, [r2, #0]

  /* creation of Critical_Inputs */
  Critical_InputsHandle = osThreadNew(StartTask02, NULL, &Critical_Inputs_attributes);
 800188c:	4a16      	ldr	r2, [pc, #88]	@ (80018e8 <main+0xac>)
 800188e:	2100      	movs	r1, #0
 8001890:	4816      	ldr	r0, [pc, #88]	@ (80018ec <main+0xb0>)
 8001892:	f008 fc5b 	bl	800a14c <osThreadNew>
 8001896:	4603      	mov	r3, r0
 8001898:	4a15      	ldr	r2, [pc, #84]	@ (80018f0 <main+0xb4>)
 800189a:	6013      	str	r3, [r2, #0]

  /* creation of ReadIOExpander */
  ReadIOExpanderHandle = osThreadNew(StartTask03, NULL, &ReadIOExpander_attributes);
 800189c:	4a15      	ldr	r2, [pc, #84]	@ (80018f4 <main+0xb8>)
 800189e:	2100      	movs	r1, #0
 80018a0:	4815      	ldr	r0, [pc, #84]	@ (80018f8 <main+0xbc>)
 80018a2:	f008 fc53 	bl	800a14c <osThreadNew>
 80018a6:	4603      	mov	r3, r0
 80018a8:	4a14      	ldr	r2, [pc, #80]	@ (80018fc <main+0xc0>)
 80018aa:	6013      	str	r3, [r2, #0]

  /* creation of Outputs_Control */
  Outputs_ControlHandle = osThreadNew(StartTask04, NULL, &Outputs_Control_attributes);
 80018ac:	4a14      	ldr	r2, [pc, #80]	@ (8001900 <main+0xc4>)
 80018ae:	2100      	movs	r1, #0
 80018b0:	4814      	ldr	r0, [pc, #80]	@ (8001904 <main+0xc8>)
 80018b2:	f008 fc4b 	bl	800a14c <osThreadNew>
 80018b6:	4603      	mov	r3, r0
 80018b8:	4a13      	ldr	r2, [pc, #76]	@ (8001908 <main+0xcc>)
 80018ba:	6013      	str	r3, [r2, #0]


  ScreenControlHandle = osThreadNew(StartTask05, NULL, &ScreenControl_attributes);
 80018bc:	4a13      	ldr	r2, [pc, #76]	@ (800190c <main+0xd0>)
 80018be:	2100      	movs	r1, #0
 80018c0:	4813      	ldr	r0, [pc, #76]	@ (8001910 <main+0xd4>)
 80018c2:	f008 fc43 	bl	800a14c <osThreadNew>
 80018c6:	4603      	mov	r3, r0
 80018c8:	4a12      	ldr	r2, [pc, #72]	@ (8001914 <main+0xd8>)
 80018ca:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80018cc:	f008 fc18 	bl	800a100 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80018d0:	bf00      	nop
 80018d2:	e7fd      	b.n	80018d0 <main+0x94>
 80018d4:	0800dae4 	.word	0x0800dae4
 80018d8:	20000338 	.word	0x20000338
 80018dc:	0800da30 	.word	0x0800da30
 80018e0:	08000d95 	.word	0x08000d95
 80018e4:	20000324 	.word	0x20000324
 80018e8:	0800da54 	.word	0x0800da54
 80018ec:	08000e01 	.word	0x08000e01
 80018f0:	20000328 	.word	0x20000328
 80018f4:	0800da78 	.word	0x0800da78
 80018f8:	08000f89 	.word	0x08000f89
 80018fc:	2000032c 	.word	0x2000032c
 8001900:	0800da9c 	.word	0x0800da9c
 8001904:	080010a5 	.word	0x080010a5
 8001908:	20000330 	.word	0x20000330
 800190c:	0800dac0 	.word	0x0800dac0
 8001910:	08001131 	.word	0x08001131
 8001914:	20000334 	.word	0x20000334

08001918 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b096      	sub	sp, #88	@ 0x58
 800191c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800191e:	f107 0314 	add.w	r3, r7, #20
 8001922:	2244      	movs	r2, #68	@ 0x44
 8001924:	2100      	movs	r1, #0
 8001926:	4618      	mov	r0, r3
 8001928:	f00b fbe4 	bl	800d0f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800192c:	463b      	mov	r3, r7
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	609a      	str	r2, [r3, #8]
 8001936:	60da      	str	r2, [r3, #12]
 8001938:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800193a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800193e:	f005 f9c1 	bl	8006cc4 <HAL_PWREx_ControlVoltageScaling>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	bf14      	ite	ne
 8001948:	2301      	movne	r3, #1
 800194a:	2300      	moveq	r3, #0
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8001952:	f000 fb0f 	bl	8001f74 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001956:	2310      	movs	r3, #16
 8001958:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800195a:	2301      	movs	r3, #1
 800195c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800195e:	2300      	movs	r3, #0
 8001960:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001962:	2360      	movs	r3, #96	@ 0x60
 8001964:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001966:	2300      	movs	r3, #0
 8001968:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800196a:	f107 0314 	add.w	r3, r7, #20
 800196e:	4618      	mov	r0, r3
 8001970:	f005 f9fe 	bl	8006d70 <HAL_RCC_OscConfig>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	bf14      	ite	ne
 800197a:	2301      	movne	r3, #1
 800197c:	2300      	moveq	r3, #0
 800197e:	b2db      	uxtb	r3, r3
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8001984:	f000 faf6 	bl	8001f74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001988:	230f      	movs	r3, #15
 800198a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800198c:	2300      	movs	r3, #0
 800198e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001990:	2300      	movs	r3, #0
 8001992:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001994:	2300      	movs	r3, #0
 8001996:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001998:	2300      	movs	r3, #0
 800199a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800199c:	463b      	mov	r3, r7
 800199e:	2100      	movs	r1, #0
 80019a0:	4618      	mov	r0, r3
 80019a2:	f005 fdff 	bl	80075a4 <HAL_RCC_ClockConfig>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	bf14      	ite	ne
 80019ac:	2301      	movne	r3, #1
 80019ae:	2300      	moveq	r3, #0
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 80019b6:	f000 fadd 	bl	8001f74 <Error_Handler>
  }
}
 80019ba:	bf00      	nop
 80019bc:	3758      	adds	r7, #88	@ 0x58
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
	...

080019c4 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08a      	sub	sp, #40	@ 0x28
 80019c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80019ca:	f107 031c 	add.w	r3, r7, #28
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	605a      	str	r2, [r3, #4]
 80019d4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80019d6:	1d3b      	adds	r3, r7, #4
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
 80019e2:	611a      	str	r2, [r3, #16]
 80019e4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80019e6:	4b86      	ldr	r3, [pc, #536]	@ (8001c00 <_ZL12MX_ADC1_Initv+0x23c>)
 80019e8:	4a86      	ldr	r2, [pc, #536]	@ (8001c04 <_ZL12MX_ADC1_Initv+0x240>)
 80019ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80019ec:	4b84      	ldr	r3, [pc, #528]	@ (8001c00 <_ZL12MX_ADC1_Initv+0x23c>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019f2:	4b83      	ldr	r3, [pc, #524]	@ (8001c00 <_ZL12MX_ADC1_Initv+0x23c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019f8:	4b81      	ldr	r3, [pc, #516]	@ (8001c00 <_ZL12MX_ADC1_Initv+0x23c>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80019fe:	4b80      	ldr	r3, [pc, #512]	@ (8001c00 <_ZL12MX_ADC1_Initv+0x23c>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001a04:	4b7e      	ldr	r3, [pc, #504]	@ (8001c00 <_ZL12MX_ADC1_Initv+0x23c>)
 8001a06:	2208      	movs	r2, #8
 8001a08:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001a0a:	4b7d      	ldr	r3, [pc, #500]	@ (8001c00 <_ZL12MX_ADC1_Initv+0x23c>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001a10:	4b7b      	ldr	r3, [pc, #492]	@ (8001c00 <_ZL12MX_ADC1_Initv+0x23c>)
 8001a12:	2201      	movs	r2, #1
 8001a14:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 10;
 8001a16:	4b7a      	ldr	r3, [pc, #488]	@ (8001c00 <_ZL12MX_ADC1_Initv+0x23c>)
 8001a18:	220a      	movs	r2, #10
 8001a1a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a1c:	4b78      	ldr	r3, [pc, #480]	@ (8001c00 <_ZL12MX_ADC1_Initv+0x23c>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a24:	4b76      	ldr	r3, [pc, #472]	@ (8001c00 <_ZL12MX_ADC1_Initv+0x23c>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a2a:	4b75      	ldr	r3, [pc, #468]	@ (8001c00 <_ZL12MX_ADC1_Initv+0x23c>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a30:	4b73      	ldr	r3, [pc, #460]	@ (8001c00 <_ZL12MX_ADC1_Initv+0x23c>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001a38:	4b71      	ldr	r3, [pc, #452]	@ (8001c00 <_ZL12MX_ADC1_Initv+0x23c>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001a3e:	4b70      	ldr	r3, [pc, #448]	@ (8001c00 <_ZL12MX_ADC1_Initv+0x23c>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a46:	486e      	ldr	r0, [pc, #440]	@ (8001c00 <_ZL12MX_ADC1_Initv+0x23c>)
 8001a48:	f002 f8ec 	bl	8003c24 <HAL_ADC_Init>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	bf14      	ite	ne
 8001a52:	2301      	movne	r3, #1
 8001a54:	2300      	moveq	r3, #0
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <_ZL12MX_ADC1_Initv+0x9c>
  {
    Error_Handler();
 8001a5c:	f000 fa8a 	bl	8001f74 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001a60:	2300      	movs	r3, #0
 8001a62:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001a64:	f107 031c 	add.w	r3, r7, #28
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4865      	ldr	r0, [pc, #404]	@ (8001c00 <_ZL12MX_ADC1_Initv+0x23c>)
 8001a6c:	f003 f9c8 	bl	8004e00 <HAL_ADCEx_MultiModeConfigChannel>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	bf14      	ite	ne
 8001a76:	2301      	movne	r3, #1
 8001a78:	2300      	moveq	r3, #0
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <_ZL12MX_ADC1_Initv+0xc0>
  {
    Error_Handler();
 8001a80:	f000 fa78 	bl	8001f74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001a84:	4b60      	ldr	r3, [pc, #384]	@ (8001c08 <_ZL12MX_ADC1_Initv+0x244>)
 8001a86:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a88:	2306      	movs	r3, #6
 8001a8a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001a90:	237f      	movs	r3, #127	@ 0x7f
 8001a92:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001a94:	2304      	movs	r3, #4
 8001a96:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4857      	ldr	r0, [pc, #348]	@ (8001c00 <_ZL12MX_ADC1_Initv+0x23c>)
 8001aa2:	f002 fb45 	bl	8004130 <HAL_ADC_ConfigChannel>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	bf14      	ite	ne
 8001aac:	2301      	movne	r3, #1
 8001aae:	2300      	moveq	r3, #0
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <_ZL12MX_ADC1_Initv+0xf6>
  {
    Error_Handler();
 8001ab6:	f000 fa5d 	bl	8001f74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001aba:	230c      	movs	r3, #12
 8001abc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001abe:	1d3b      	adds	r3, r7, #4
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	484f      	ldr	r0, [pc, #316]	@ (8001c00 <_ZL12MX_ADC1_Initv+0x23c>)
 8001ac4:	f002 fb34 	bl	8004130 <HAL_ADC_ConfigChannel>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	bf14      	ite	ne
 8001ace:	2301      	movne	r3, #1
 8001ad0:	2300      	moveq	r3, #0
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <_ZL12MX_ADC1_Initv+0x118>
  {
    Error_Handler();
 8001ad8:	f000 fa4c 	bl	8001f74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001adc:	2312      	movs	r3, #18
 8001ade:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ae0:	1d3b      	adds	r3, r7, #4
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4846      	ldr	r0, [pc, #280]	@ (8001c00 <_ZL12MX_ADC1_Initv+0x23c>)
 8001ae6:	f002 fb23 	bl	8004130 <HAL_ADC_ConfigChannel>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	bf14      	ite	ne
 8001af0:	2301      	movne	r3, #1
 8001af2:	2300      	moveq	r3, #0
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <_ZL12MX_ADC1_Initv+0x13a>
  {
    Error_Handler();
 8001afa:	f000 fa3b 	bl	8001f74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001afe:	2318      	movs	r3, #24
 8001b00:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b02:	1d3b      	adds	r3, r7, #4
 8001b04:	4619      	mov	r1, r3
 8001b06:	483e      	ldr	r0, [pc, #248]	@ (8001c00 <_ZL12MX_ADC1_Initv+0x23c>)
 8001b08:	f002 fb12 	bl	8004130 <HAL_ADC_ConfigChannel>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	bf14      	ite	ne
 8001b12:	2301      	movne	r3, #1
 8001b14:	2300      	moveq	r3, #0
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <_ZL12MX_ADC1_Initv+0x15c>
  {
    Error_Handler();
 8001b1c:	f000 fa2a 	bl	8001f74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001b20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b24:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b26:	1d3b      	adds	r3, r7, #4
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4835      	ldr	r0, [pc, #212]	@ (8001c00 <_ZL12MX_ADC1_Initv+0x23c>)
 8001b2c:	f002 fb00 	bl	8004130 <HAL_ADC_ConfigChannel>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	bf14      	ite	ne
 8001b36:	2301      	movne	r3, #1
 8001b38:	2300      	moveq	r3, #0
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <_ZL12MX_ADC1_Initv+0x180>
  {
    Error_Handler();
 8001b40:	f000 fa18 	bl	8001f74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001b44:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8001b48:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b4a:	1d3b      	adds	r3, r7, #4
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	482c      	ldr	r0, [pc, #176]	@ (8001c00 <_ZL12MX_ADC1_Initv+0x23c>)
 8001b50:	f002 faee 	bl	8004130 <HAL_ADC_ConfigChannel>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	bf14      	ite	ne
 8001b5a:	2301      	movne	r3, #1
 8001b5c:	2300      	moveq	r3, #0
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <_ZL12MX_ADC1_Initv+0x1a4>
  {
    Error_Handler();
 8001b64:	f000 fa06 	bl	8001f74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001b68:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8001b6c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b6e:	1d3b      	adds	r3, r7, #4
 8001b70:	4619      	mov	r1, r3
 8001b72:	4823      	ldr	r0, [pc, #140]	@ (8001c00 <_ZL12MX_ADC1_Initv+0x23c>)
 8001b74:	f002 fadc 	bl	8004130 <HAL_ADC_ConfigChannel>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	bf14      	ite	ne
 8001b7e:	2301      	movne	r3, #1
 8001b80:	2300      	moveq	r3, #0
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <_ZL12MX_ADC1_Initv+0x1c8>
  {
    Error_Handler();
 8001b88:	f000 f9f4 	bl	8001f74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001b8c:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8001b90:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b92:	1d3b      	adds	r3, r7, #4
 8001b94:	4619      	mov	r1, r3
 8001b96:	481a      	ldr	r0, [pc, #104]	@ (8001c00 <_ZL12MX_ADC1_Initv+0x23c>)
 8001b98:	f002 faca 	bl	8004130 <HAL_ADC_ConfigChannel>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	bf14      	ite	ne
 8001ba2:	2301      	movne	r3, #1
 8001ba4:	2300      	moveq	r3, #0
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <_ZL12MX_ADC1_Initv+0x1ec>
  {
    Error_Handler();
 8001bac:	f000 f9e2 	bl	8001f74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001bb0:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8001bb4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bb6:	1d3b      	adds	r3, r7, #4
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4811      	ldr	r0, [pc, #68]	@ (8001c00 <_ZL12MX_ADC1_Initv+0x23c>)
 8001bbc:	f002 fab8 	bl	8004130 <HAL_ADC_ConfigChannel>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	bf14      	ite	ne
 8001bc6:	2301      	movne	r3, #1
 8001bc8:	2300      	moveq	r3, #0
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <_ZL12MX_ADC1_Initv+0x210>
  {
    Error_Handler();
 8001bd0:	f000 f9d0 	bl	8001f74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001bd4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bd8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4808      	ldr	r0, [pc, #32]	@ (8001c00 <_ZL12MX_ADC1_Initv+0x23c>)
 8001be0:	f002 faa6 	bl	8004130 <HAL_ADC_ConfigChannel>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	bf14      	ite	ne
 8001bea:	2301      	movne	r3, #1
 8001bec:	2300      	moveq	r3, #0
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <_ZL12MX_ADC1_Initv+0x234>
  {
    Error_Handler();
 8001bf4:	f000 f9be 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001bf8:	bf00      	nop
 8001bfa:	3728      	adds	r7, #40	@ 0x28
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20000148 	.word	0x20000148
 8001c04:	50040000 	.word	0x50040000
 8001c08:	04300002 	.word	0x04300002

08001c0c <_ZL12MX_CAN1_Initv>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001c10:	4b19      	ldr	r3, [pc, #100]	@ (8001c78 <_ZL12MX_CAN1_Initv+0x6c>)
 8001c12:	4a1a      	ldr	r2, [pc, #104]	@ (8001c7c <_ZL12MX_CAN1_Initv+0x70>)
 8001c14:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8001c16:	4b18      	ldr	r3, [pc, #96]	@ (8001c78 <_ZL12MX_CAN1_Initv+0x6c>)
 8001c18:	2202      	movs	r2, #2
 8001c1a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001c1c:	4b16      	ldr	r3, [pc, #88]	@ (8001c78 <_ZL12MX_CAN1_Initv+0x6c>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001c22:	4b15      	ldr	r3, [pc, #84]	@ (8001c78 <_ZL12MX_CAN1_Initv+0x6c>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001c28:	4b13      	ldr	r3, [pc, #76]	@ (8001c78 <_ZL12MX_CAN1_Initv+0x6c>)
 8001c2a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001c2e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001c30:	4b11      	ldr	r3, [pc, #68]	@ (8001c78 <_ZL12MX_CAN1_Initv+0x6c>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001c36:	4b10      	ldr	r3, [pc, #64]	@ (8001c78 <_ZL12MX_CAN1_Initv+0x6c>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c78 <_ZL12MX_CAN1_Initv+0x6c>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001c42:	4b0d      	ldr	r3, [pc, #52]	@ (8001c78 <_ZL12MX_CAN1_Initv+0x6c>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001c48:	4b0b      	ldr	r3, [pc, #44]	@ (8001c78 <_ZL12MX_CAN1_Initv+0x6c>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c78 <_ZL12MX_CAN1_Initv+0x6c>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001c54:	4b08      	ldr	r3, [pc, #32]	@ (8001c78 <_ZL12MX_CAN1_Initv+0x6c>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001c5a:	4807      	ldr	r0, [pc, #28]	@ (8001c78 <_ZL12MX_CAN1_Initv+0x6c>)
 8001c5c:	f003 f980 	bl	8004f60 <HAL_CAN_Init>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	bf14      	ite	ne
 8001c66:	2301      	movne	r3, #1
 8001c68:	2300      	moveq	r3, #0
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <_ZL12MX_CAN1_Initv+0x68>
  {
    Error_Handler();
 8001c70:	f000 f980 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001c74:	bf00      	nop
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	200001f8 	.word	0x200001f8
 8001c7c:	40006400 	.word	0x40006400

08001c80 <_ZL12MX_CAN2_Initv>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001c84:	4b19      	ldr	r3, [pc, #100]	@ (8001cec <_ZL12MX_CAN2_Initv+0x6c>)
 8001c86:	4a1a      	ldr	r2, [pc, #104]	@ (8001cf0 <_ZL12MX_CAN2_Initv+0x70>)
 8001c88:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 2;
 8001c8a:	4b18      	ldr	r3, [pc, #96]	@ (8001cec <_ZL12MX_CAN2_Initv+0x6c>)
 8001c8c:	2202      	movs	r2, #2
 8001c8e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001c90:	4b16      	ldr	r3, [pc, #88]	@ (8001cec <_ZL12MX_CAN2_Initv+0x6c>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001c96:	4b15      	ldr	r3, [pc, #84]	@ (8001cec <_ZL12MX_CAN2_Initv+0x6c>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001c9c:	4b13      	ldr	r3, [pc, #76]	@ (8001cec <_ZL12MX_CAN2_Initv+0x6c>)
 8001c9e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001ca2:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001ca4:	4b11      	ldr	r3, [pc, #68]	@ (8001cec <_ZL12MX_CAN2_Initv+0x6c>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001caa:	4b10      	ldr	r3, [pc, #64]	@ (8001cec <_ZL12MX_CAN2_Initv+0x6c>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001cb0:	4b0e      	ldr	r3, [pc, #56]	@ (8001cec <_ZL12MX_CAN2_Initv+0x6c>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8001cec <_ZL12MX_CAN2_Initv+0x6c>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001cec <_ZL12MX_CAN2_Initv+0x6c>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8001cec <_ZL12MX_CAN2_Initv+0x6c>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001cc8:	4b08      	ldr	r3, [pc, #32]	@ (8001cec <_ZL12MX_CAN2_Initv+0x6c>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001cce:	4807      	ldr	r0, [pc, #28]	@ (8001cec <_ZL12MX_CAN2_Initv+0x6c>)
 8001cd0:	f003 f946 	bl	8004f60 <HAL_CAN_Init>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	bf14      	ite	ne
 8001cda:	2301      	movne	r3, #1
 8001cdc:	2300      	moveq	r3, #0
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <_ZL12MX_CAN2_Initv+0x68>
  {
    Error_Handler();
 8001ce4:	f000 f946 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001ce8:	bf00      	nop
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	20000220 	.word	0x20000220
 8001cf0:	40006800 	.word	0x40006800

08001cf4 <_ZL12MX_I2C4_Initv>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001cf8:	4b22      	ldr	r3, [pc, #136]	@ (8001d84 <_ZL12MX_I2C4_Initv+0x90>)
 8001cfa:	4a23      	ldr	r2, [pc, #140]	@ (8001d88 <_ZL12MX_I2C4_Initv+0x94>)
 8001cfc:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00100D14;
 8001cfe:	4b21      	ldr	r3, [pc, #132]	@ (8001d84 <_ZL12MX_I2C4_Initv+0x90>)
 8001d00:	4a22      	ldr	r2, [pc, #136]	@ (8001d8c <_ZL12MX_I2C4_Initv+0x98>)
 8001d02:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001d04:	4b1f      	ldr	r3, [pc, #124]	@ (8001d84 <_ZL12MX_I2C4_Initv+0x90>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d0a:	4b1e      	ldr	r3, [pc, #120]	@ (8001d84 <_ZL12MX_I2C4_Initv+0x90>)
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d10:	4b1c      	ldr	r3, [pc, #112]	@ (8001d84 <_ZL12MX_I2C4_Initv+0x90>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001d16:	4b1b      	ldr	r3, [pc, #108]	@ (8001d84 <_ZL12MX_I2C4_Initv+0x90>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d1c:	4b19      	ldr	r3, [pc, #100]	@ (8001d84 <_ZL12MX_I2C4_Initv+0x90>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d22:	4b18      	ldr	r3, [pc, #96]	@ (8001d84 <_ZL12MX_I2C4_Initv+0x90>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d28:	4b16      	ldr	r3, [pc, #88]	@ (8001d84 <_ZL12MX_I2C4_Initv+0x90>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001d2e:	4815      	ldr	r0, [pc, #84]	@ (8001d84 <_ZL12MX_I2C4_Initv+0x90>)
 8001d30:	f004 f996 	bl	8006060 <HAL_I2C_Init>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	bf14      	ite	ne
 8001d3a:	2301      	movne	r3, #1
 8001d3c:	2300      	moveq	r3, #0
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <_ZL12MX_I2C4_Initv+0x54>
  {
    Error_Handler();
 8001d44:	f000 f916 	bl	8001f74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d48:	2100      	movs	r1, #0
 8001d4a:	480e      	ldr	r0, [pc, #56]	@ (8001d84 <_ZL12MX_I2C4_Initv+0x90>)
 8001d4c:	f004 ff14 	bl	8006b78 <HAL_I2CEx_ConfigAnalogFilter>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	bf14      	ite	ne
 8001d56:	2301      	movne	r3, #1
 8001d58:	2300      	moveq	r3, #0
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <_ZL12MX_I2C4_Initv+0x70>
  {
    Error_Handler();
 8001d60:	f000 f908 	bl	8001f74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001d64:	2100      	movs	r1, #0
 8001d66:	4807      	ldr	r0, [pc, #28]	@ (8001d84 <_ZL12MX_I2C4_Initv+0x90>)
 8001d68:	f004 ff51 	bl	8006c0e <HAL_I2CEx_ConfigDigitalFilter>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	bf14      	ite	ne
 8001d72:	2301      	movne	r3, #1
 8001d74:	2300      	moveq	r3, #0
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <_ZL12MX_I2C4_Initv+0x8c>
  {
    Error_Handler();
 8001d7c:	f000 f8fa 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001d80:	bf00      	nop
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20000248 	.word	0x20000248
 8001d88:	40008400 	.word	0x40008400
 8001d8c:	00100d14 	.word	0x00100d14

08001d90 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001d94:	4b16      	ldr	r3, [pc, #88]	@ (8001df0 <_ZL13MX_UART4_Initv+0x60>)
 8001d96:	4a17      	ldr	r2, [pc, #92]	@ (8001df4 <_ZL13MX_UART4_Initv+0x64>)
 8001d98:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001d9a:	4b15      	ldr	r3, [pc, #84]	@ (8001df0 <_ZL13MX_UART4_Initv+0x60>)
 8001d9c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001da0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001da2:	4b13      	ldr	r3, [pc, #76]	@ (8001df0 <_ZL13MX_UART4_Initv+0x60>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001da8:	4b11      	ldr	r3, [pc, #68]	@ (8001df0 <_ZL13MX_UART4_Initv+0x60>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001dae:	4b10      	ldr	r3, [pc, #64]	@ (8001df0 <_ZL13MX_UART4_Initv+0x60>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001db4:	4b0e      	ldr	r3, [pc, #56]	@ (8001df0 <_ZL13MX_UART4_Initv+0x60>)
 8001db6:	220c      	movs	r2, #12
 8001db8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dba:	4b0d      	ldr	r3, [pc, #52]	@ (8001df0 <_ZL13MX_UART4_Initv+0x60>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8001df0 <_ZL13MX_UART4_Initv+0x60>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001df0 <_ZL13MX_UART4_Initv+0x60>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dcc:	4b08      	ldr	r3, [pc, #32]	@ (8001df0 <_ZL13MX_UART4_Initv+0x60>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001dd2:	4807      	ldr	r0, [pc, #28]	@ (8001df0 <_ZL13MX_UART4_Initv+0x60>)
 8001dd4:	f006 fdcc 	bl	8008970 <HAL_UART_Init>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	bf14      	ite	ne
 8001dde:	2301      	movne	r3, #1
 8001de0:	2300      	moveq	r3, #0
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <_ZL13MX_UART4_Initv+0x5c>
  {
    Error_Handler();
 8001de8:	f000 f8c4 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001dec:	bf00      	nop
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	2000029c 	.word	0x2000029c
 8001df4:	40004c00 	.word	0x40004c00

08001df8 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8001e30 <_ZL11MX_DMA_Initv+0x38>)
 8001e00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e02:	4a0b      	ldr	r2, [pc, #44]	@ (8001e30 <_ZL11MX_DMA_Initv+0x38>)
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	6493      	str	r3, [r2, #72]	@ 0x48
 8001e0a:	4b09      	ldr	r3, [pc, #36]	@ (8001e30 <_ZL11MX_DMA_Initv+0x38>)
 8001e0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	607b      	str	r3, [r7, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001e16:	2200      	movs	r2, #0
 8001e18:	2105      	movs	r1, #5
 8001e1a:	200b      	movs	r0, #11
 8001e1c:	f003 fca4 	bl	8005768 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001e20:	200b      	movs	r0, #11
 8001e22:	f003 fcbd 	bl	80057a0 <HAL_NVIC_EnableIRQ>

}
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40021000 	.word	0x40021000

08001e34 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b088      	sub	sp, #32
 8001e38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3a:	f107 030c 	add.w	r3, r7, #12
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	605a      	str	r2, [r3, #4]
 8001e44:	609a      	str	r2, [r3, #8]
 8001e46:	60da      	str	r2, [r3, #12]
 8001e48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e4a:	4b3e      	ldr	r3, [pc, #248]	@ (8001f44 <_ZL12MX_GPIO_Initv+0x110>)
 8001e4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e4e:	4a3d      	ldr	r2, [pc, #244]	@ (8001f44 <_ZL12MX_GPIO_Initv+0x110>)
 8001e50:	f043 0304 	orr.w	r3, r3, #4
 8001e54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e56:	4b3b      	ldr	r3, [pc, #236]	@ (8001f44 <_ZL12MX_GPIO_Initv+0x110>)
 8001e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e5a:	f003 0304 	and.w	r3, r3, #4
 8001e5e:	60bb      	str	r3, [r7, #8]
 8001e60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e62:	4b38      	ldr	r3, [pc, #224]	@ (8001f44 <_ZL12MX_GPIO_Initv+0x110>)
 8001e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e66:	4a37      	ldr	r2, [pc, #220]	@ (8001f44 <_ZL12MX_GPIO_Initv+0x110>)
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e6e:	4b35      	ldr	r3, [pc, #212]	@ (8001f44 <_ZL12MX_GPIO_Initv+0x110>)
 8001e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	607b      	str	r3, [r7, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e7a:	4b32      	ldr	r3, [pc, #200]	@ (8001f44 <_ZL12MX_GPIO_Initv+0x110>)
 8001e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e7e:	4a31      	ldr	r2, [pc, #196]	@ (8001f44 <_ZL12MX_GPIO_Initv+0x110>)
 8001e80:	f043 0302 	orr.w	r3, r3, #2
 8001e84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e86:	4b2f      	ldr	r3, [pc, #188]	@ (8001f44 <_ZL12MX_GPIO_Initv+0x110>)
 8001e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	603b      	str	r3, [r7, #0]
 8001e90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8001e92:	2200      	movs	r2, #0
 8001e94:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8001e98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e9c:	f004 f896 	bl	8005fcc <HAL_GPIO_WritePin>
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin
                          |OK_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Backlight_PWM_GPIO_Port, Backlight_PWM_Pin, GPIO_PIN_RESET);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	2110      	movs	r1, #16
 8001ea4:	4828      	ldr	r0, [pc, #160]	@ (8001f48 <_ZL12MX_GPIO_Initv+0x114>)
 8001ea6:	f004 f891 	bl	8005fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, C_D_Pin|WR_Pin|RD_Pin|Parallel_CS_Pin
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f241 0117 	movw	r1, #4119	@ 0x1017
 8001eb0:	4826      	ldr	r0, [pc, #152]	@ (8001f4c <_ZL12MX_GPIO_Initv+0x118>)
 8001eb2:	f004 f88b 	bl	8005fcc <HAL_GPIO_WritePin>
                          |D_C_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Alert1_Pin */
  GPIO_InitStruct.Pin = Alert1_Pin;
 8001eb6:	2304      	movs	r3, #4
 8001eb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001eba:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001ebe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Alert1_GPIO_Port, &GPIO_InitStruct);
 8001ec4:	f107 030c 	add.w	r3, r7, #12
 8001ec8:	4619      	mov	r1, r3
 8001eca:	481f      	ldr	r0, [pc, #124]	@ (8001f48 <_ZL12MX_GPIO_Initv+0x114>)
 8001ecc:	f003 feec 	bl	8005ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin D5_Pin D6_Pin D7_Pin
                           OK_LED_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8001ed0:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8001ed4:	60fb      	str	r3, [r7, #12]
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin
                          |OK_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee2:	f107 030c 	add.w	r3, r7, #12
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001eec:	f003 fedc 	bl	8005ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Backlight_PWM_Pin */
  GPIO_InitStruct.Pin = Backlight_PWM_Pin;
 8001ef0:	2310      	movs	r3, #16
 8001ef2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efc:	2300      	movs	r3, #0
 8001efe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Backlight_PWM_GPIO_Port, &GPIO_InitStruct);
 8001f00:	f107 030c 	add.w	r3, r7, #12
 8001f04:	4619      	mov	r1, r3
 8001f06:	4810      	ldr	r0, [pc, #64]	@ (8001f48 <_ZL12MX_GPIO_Initv+0x114>)
 8001f08:	f003 fece 	bl	8005ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : C_D_Pin WR_Pin RD_Pin Parallel_CS_Pin
                           D_C_Pin */
  GPIO_InitStruct.Pin = C_D_Pin|WR_Pin|RD_Pin|Parallel_CS_Pin
 8001f0c:	f241 0317 	movw	r3, #4119	@ 0x1017
 8001f10:	60fb      	str	r3, [r7, #12]
                          |D_C_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f12:	2301      	movs	r3, #1
 8001f14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f1e:	f107 030c 	add.w	r3, r7, #12
 8001f22:	4619      	mov	r1, r3
 8001f24:	4809      	ldr	r0, [pc, #36]	@ (8001f4c <_ZL12MX_GPIO_Initv+0x118>)
 8001f26:	f003 febf 	bl	8005ca8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	2105      	movs	r1, #5
 8001f2e:	2008      	movs	r0, #8
 8001f30:	f003 fc1a 	bl	8005768 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001f34:	2008      	movs	r0, #8
 8001f36:	f003 fc33 	bl	80057a0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f3a:	bf00      	nop
 8001f3c:	3720      	adds	r7, #32
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40021000 	.word	0x40021000
 8001f48:	48000800 	.word	0x48000800
 8001f4c:	48000400 	.word	0x48000400

08001f50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a04      	ldr	r2, [pc, #16]	@ (8001f70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d101      	bne.n	8001f66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f62:	f001 fbe5 	bl	8003730 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f66:	bf00      	nop
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40000400 	.word	0x40000400

08001f74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f78:	b672      	cpsid	i
}
 8001f7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f7c:	bf00      	nop
 8001f7e:	e7fd      	b.n	8001f7c <Error_Handler+0x8>

08001f80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f86:	4b11      	ldr	r3, [pc, #68]	@ (8001fcc <HAL_MspInit+0x4c>)
 8001f88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f8a:	4a10      	ldr	r2, [pc, #64]	@ (8001fcc <HAL_MspInit+0x4c>)
 8001f8c:	f043 0301 	orr.w	r3, r3, #1
 8001f90:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f92:	4b0e      	ldr	r3, [pc, #56]	@ (8001fcc <HAL_MspInit+0x4c>)
 8001f94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	607b      	str	r3, [r7, #4]
 8001f9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001fcc <HAL_MspInit+0x4c>)
 8001fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa2:	4a0a      	ldr	r2, [pc, #40]	@ (8001fcc <HAL_MspInit+0x4c>)
 8001fa4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fa8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001faa:	4b08      	ldr	r3, [pc, #32]	@ (8001fcc <HAL_MspInit+0x4c>)
 8001fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fb2:	603b      	str	r3, [r7, #0]
 8001fb4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	210f      	movs	r1, #15
 8001fba:	f06f 0001 	mvn.w	r0, #1
 8001fbe:	f003 fbd3 	bl	8005768 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40021000 	.word	0x40021000

08001fd0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b0ac      	sub	sp, #176	@ 0xb0
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	60da      	str	r2, [r3, #12]
 8001fe6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fe8:	f107 0310 	add.w	r3, r7, #16
 8001fec:	228c      	movs	r2, #140	@ 0x8c
 8001fee:	2100      	movs	r1, #0
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f00b f87f 	bl	800d0f4 <memset>
  if(hadc->Instance==ADC1)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a35      	ldr	r2, [pc, #212]	@ (80020d0 <HAL_ADC_MspInit+0x100>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d163      	bne.n	80020c8 <HAL_ADC_MspInit+0xf8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002000:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002004:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8002006:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800200a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800200e:	f107 0310 	add.w	r3, r7, #16
 8002012:	4618      	mov	r0, r3
 8002014:	f005 fd1c 	bl	8007a50 <HAL_RCCEx_PeriphCLKConfig>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 800201e:	f7ff ffa9 	bl	8001f74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002022:	4b2c      	ldr	r3, [pc, #176]	@ (80020d4 <HAL_ADC_MspInit+0x104>)
 8002024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002026:	4a2b      	ldr	r2, [pc, #172]	@ (80020d4 <HAL_ADC_MspInit+0x104>)
 8002028:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800202c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800202e:	4b29      	ldr	r3, [pc, #164]	@ (80020d4 <HAL_ADC_MspInit+0x104>)
 8002030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002032:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800203a:	4b26      	ldr	r3, [pc, #152]	@ (80020d4 <HAL_ADC_MspInit+0x104>)
 800203c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800203e:	4a25      	ldr	r2, [pc, #148]	@ (80020d4 <HAL_ADC_MspInit+0x104>)
 8002040:	f043 0304 	orr.w	r3, r3, #4
 8002044:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002046:	4b23      	ldr	r3, [pc, #140]	@ (80020d4 <HAL_ADC_MspInit+0x104>)
 8002048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800204a:	f003 0304 	and.w	r3, r3, #4
 800204e:	60bb      	str	r3, [r7, #8]
 8002050:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002052:	2301      	movs	r3, #1
 8002054:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002058:	2303      	movs	r3, #3
 800205a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205e:	2300      	movs	r3, #0
 8002060:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002064:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002068:	4619      	mov	r1, r3
 800206a:	481b      	ldr	r0, [pc, #108]	@ (80020d8 <HAL_ADC_MspInit+0x108>)
 800206c:	f003 fe1c 	bl	8005ca8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002070:	4b1a      	ldr	r3, [pc, #104]	@ (80020dc <HAL_ADC_MspInit+0x10c>)
 8002072:	4a1b      	ldr	r2, [pc, #108]	@ (80020e0 <HAL_ADC_MspInit+0x110>)
 8002074:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8002076:	4b19      	ldr	r3, [pc, #100]	@ (80020dc <HAL_ADC_MspInit+0x10c>)
 8002078:	2200      	movs	r2, #0
 800207a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800207c:	4b17      	ldr	r3, [pc, #92]	@ (80020dc <HAL_ADC_MspInit+0x10c>)
 800207e:	2200      	movs	r2, #0
 8002080:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002082:	4b16      	ldr	r3, [pc, #88]	@ (80020dc <HAL_ADC_MspInit+0x10c>)
 8002084:	2200      	movs	r2, #0
 8002086:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002088:	4b14      	ldr	r3, [pc, #80]	@ (80020dc <HAL_ADC_MspInit+0x10c>)
 800208a:	2280      	movs	r2, #128	@ 0x80
 800208c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800208e:	4b13      	ldr	r3, [pc, #76]	@ (80020dc <HAL_ADC_MspInit+0x10c>)
 8002090:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002094:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002096:	4b11      	ldr	r3, [pc, #68]	@ (80020dc <HAL_ADC_MspInit+0x10c>)
 8002098:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800209c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800209e:	4b0f      	ldr	r3, [pc, #60]	@ (80020dc <HAL_ADC_MspInit+0x10c>)
 80020a0:	2220      	movs	r2, #32
 80020a2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80020a4:	4b0d      	ldr	r3, [pc, #52]	@ (80020dc <HAL_ADC_MspInit+0x10c>)
 80020a6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020aa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80020ac:	480b      	ldr	r0, [pc, #44]	@ (80020dc <HAL_ADC_MspInit+0x10c>)
 80020ae:	f003 fb85 	bl	80057bc <HAL_DMA_Init>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <HAL_ADC_MspInit+0xec>
    {
      Error_Handler();
 80020b8:	f7ff ff5c 	bl	8001f74 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a07      	ldr	r2, [pc, #28]	@ (80020dc <HAL_ADC_MspInit+0x10c>)
 80020c0:	651a      	str	r2, [r3, #80]	@ 0x50
 80020c2:	4a06      	ldr	r2, [pc, #24]	@ (80020dc <HAL_ADC_MspInit+0x10c>)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80020c8:	bf00      	nop
 80020ca:	37b0      	adds	r7, #176	@ 0xb0
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	50040000 	.word	0x50040000
 80020d4:	40021000 	.word	0x40021000
 80020d8:	48000800 	.word	0x48000800
 80020dc:	200001b0 	.word	0x200001b0
 80020e0:	40020008 	.word	0x40020008

080020e4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b08c      	sub	sp, #48	@ 0x30
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ec:	f107 031c 	add.w	r3, r7, #28
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	60da      	str	r2, [r3, #12]
 80020fa:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a4e      	ldr	r2, [pc, #312]	@ (800223c <HAL_CAN_MspInit+0x158>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d143      	bne.n	800218e <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002106:	4b4e      	ldr	r3, [pc, #312]	@ (8002240 <HAL_CAN_MspInit+0x15c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	3301      	adds	r3, #1
 800210c:	4a4c      	ldr	r2, [pc, #304]	@ (8002240 <HAL_CAN_MspInit+0x15c>)
 800210e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002110:	4b4b      	ldr	r3, [pc, #300]	@ (8002240 <HAL_CAN_MspInit+0x15c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d10b      	bne.n	8002130 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002118:	4b4a      	ldr	r3, [pc, #296]	@ (8002244 <HAL_CAN_MspInit+0x160>)
 800211a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800211c:	4a49      	ldr	r2, [pc, #292]	@ (8002244 <HAL_CAN_MspInit+0x160>)
 800211e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002122:	6593      	str	r3, [r2, #88]	@ 0x58
 8002124:	4b47      	ldr	r3, [pc, #284]	@ (8002244 <HAL_CAN_MspInit+0x160>)
 8002126:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002128:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800212c:	61bb      	str	r3, [r7, #24]
 800212e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002130:	4b44      	ldr	r3, [pc, #272]	@ (8002244 <HAL_CAN_MspInit+0x160>)
 8002132:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002134:	4a43      	ldr	r2, [pc, #268]	@ (8002244 <HAL_CAN_MspInit+0x160>)
 8002136:	f043 0302 	orr.w	r3, r3, #2
 800213a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800213c:	4b41      	ldr	r3, [pc, #260]	@ (8002244 <HAL_CAN_MspInit+0x160>)
 800213e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002148:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800214c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214e:	2302      	movs	r3, #2
 8002150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002152:	2301      	movs	r3, #1
 8002154:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002156:	2303      	movs	r3, #3
 8002158:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800215a:	2309      	movs	r3, #9
 800215c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800215e:	f107 031c 	add.w	r3, r7, #28
 8002162:	4619      	mov	r1, r3
 8002164:	4838      	ldr	r0, [pc, #224]	@ (8002248 <HAL_CAN_MspInit+0x164>)
 8002166:	f003 fd9f 	bl	8005ca8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800216a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800216e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002170:	2302      	movs	r3, #2
 8002172:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002174:	2300      	movs	r3, #0
 8002176:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002178:	2303      	movs	r3, #3
 800217a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800217c:	2309      	movs	r3, #9
 800217e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002180:	f107 031c 	add.w	r3, r7, #28
 8002184:	4619      	mov	r1, r3
 8002186:	4830      	ldr	r0, [pc, #192]	@ (8002248 <HAL_CAN_MspInit+0x164>)
 8002188:	f003 fd8e 	bl	8005ca8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 800218c:	e051      	b.n	8002232 <HAL_CAN_MspInit+0x14e>
  else if(hcan->Instance==CAN2)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a2e      	ldr	r2, [pc, #184]	@ (800224c <HAL_CAN_MspInit+0x168>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d14c      	bne.n	8002232 <HAL_CAN_MspInit+0x14e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002198:	4b2a      	ldr	r3, [pc, #168]	@ (8002244 <HAL_CAN_MspInit+0x160>)
 800219a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800219c:	4a29      	ldr	r2, [pc, #164]	@ (8002244 <HAL_CAN_MspInit+0x160>)
 800219e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80021a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80021a4:	4b27      	ldr	r3, [pc, #156]	@ (8002244 <HAL_CAN_MspInit+0x160>)
 80021a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80021ac:	613b      	str	r3, [r7, #16]
 80021ae:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80021b0:	4b23      	ldr	r3, [pc, #140]	@ (8002240 <HAL_CAN_MspInit+0x15c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	3301      	adds	r3, #1
 80021b6:	4a22      	ldr	r2, [pc, #136]	@ (8002240 <HAL_CAN_MspInit+0x15c>)
 80021b8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80021ba:	4b21      	ldr	r3, [pc, #132]	@ (8002240 <HAL_CAN_MspInit+0x15c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d10b      	bne.n	80021da <HAL_CAN_MspInit+0xf6>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80021c2:	4b20      	ldr	r3, [pc, #128]	@ (8002244 <HAL_CAN_MspInit+0x160>)
 80021c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021c6:	4a1f      	ldr	r2, [pc, #124]	@ (8002244 <HAL_CAN_MspInit+0x160>)
 80021c8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80021cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80021ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002244 <HAL_CAN_MspInit+0x160>)
 80021d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021da:	4b1a      	ldr	r3, [pc, #104]	@ (8002244 <HAL_CAN_MspInit+0x160>)
 80021dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021de:	4a19      	ldr	r2, [pc, #100]	@ (8002244 <HAL_CAN_MspInit+0x160>)
 80021e0:	f043 0302 	orr.w	r3, r3, #2
 80021e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021e6:	4b17      	ldr	r3, [pc, #92]	@ (8002244 <HAL_CAN_MspInit+0x160>)
 80021e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	60bb      	str	r3, [r7, #8]
 80021f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80021f2:	2320      	movs	r3, #32
 80021f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f6:	2302      	movs	r3, #2
 80021f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021fa:	2301      	movs	r3, #1
 80021fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021fe:	2303      	movs	r3, #3
 8002200:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_CAN2;
 8002202:	2303      	movs	r3, #3
 8002204:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002206:	f107 031c 	add.w	r3, r7, #28
 800220a:	4619      	mov	r1, r3
 800220c:	480e      	ldr	r0, [pc, #56]	@ (8002248 <HAL_CAN_MspInit+0x164>)
 800220e:	f003 fd4b 	bl	8005ca8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002212:	2340      	movs	r3, #64	@ 0x40
 8002214:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002216:	2302      	movs	r3, #2
 8002218:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221a:	2300      	movs	r3, #0
 800221c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800221e:	2303      	movs	r3, #3
 8002220:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN2;
 8002222:	2308      	movs	r3, #8
 8002224:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002226:	f107 031c 	add.w	r3, r7, #28
 800222a:	4619      	mov	r1, r3
 800222c:	4806      	ldr	r0, [pc, #24]	@ (8002248 <HAL_CAN_MspInit+0x164>)
 800222e:	f003 fd3b 	bl	8005ca8 <HAL_GPIO_Init>
}
 8002232:	bf00      	nop
 8002234:	3730      	adds	r7, #48	@ 0x30
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40006400 	.word	0x40006400
 8002240:	2000033c 	.word	0x2000033c
 8002244:	40021000 	.word	0x40021000
 8002248:	48000400 	.word	0x48000400
 800224c:	40006800 	.word	0x40006800

08002250 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b0ac      	sub	sp, #176	@ 0xb0
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002258:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	60da      	str	r2, [r3, #12]
 8002266:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002268:	f107 0310 	add.w	r3, r7, #16
 800226c:	228c      	movs	r2, #140	@ 0x8c
 800226e:	2100      	movs	r1, #0
 8002270:	4618      	mov	r0, r3
 8002272:	f00a ff3f 	bl	800d0f4 <memset>
  if(hi2c->Instance==I2C4)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a22      	ldr	r2, [pc, #136]	@ (8002304 <HAL_I2C_MspInit+0xb4>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d13c      	bne.n	80022fa <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002280:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002284:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8002286:	2300      	movs	r3, #0
 8002288:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800228a:	f107 0310 	add.w	r3, r7, #16
 800228e:	4618      	mov	r0, r3
 8002290:	f005 fbde 	bl	8007a50 <HAL_RCCEx_PeriphCLKConfig>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800229a:	f7ff fe6b 	bl	8001f74 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800229e:	4b1a      	ldr	r3, [pc, #104]	@ (8002308 <HAL_I2C_MspInit+0xb8>)
 80022a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022a2:	4a19      	ldr	r2, [pc, #100]	@ (8002308 <HAL_I2C_MspInit+0xb8>)
 80022a4:	f043 0302 	orr.w	r3, r3, #2
 80022a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022aa:	4b17      	ldr	r3, [pc, #92]	@ (8002308 <HAL_I2C_MspInit+0xb8>)
 80022ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PB10     ------> I2C4_SCL
    PB11     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80022b6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80022ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022be:	2312      	movs	r3, #18
 80022c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ca:	2303      	movs	r3, #3
 80022cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 80022d0:	2303      	movs	r3, #3
 80022d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022d6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80022da:	4619      	mov	r1, r3
 80022dc:	480b      	ldr	r0, [pc, #44]	@ (800230c <HAL_I2C_MspInit+0xbc>)
 80022de:	f003 fce3 	bl	8005ca8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80022e2:	4b09      	ldr	r3, [pc, #36]	@ (8002308 <HAL_I2C_MspInit+0xb8>)
 80022e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022e6:	4a08      	ldr	r2, [pc, #32]	@ (8002308 <HAL_I2C_MspInit+0xb8>)
 80022e8:	f043 0302 	orr.w	r3, r3, #2
 80022ec:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80022ee:	4b06      	ldr	r3, [pc, #24]	@ (8002308 <HAL_I2C_MspInit+0xb8>)
 80022f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	60bb      	str	r3, [r7, #8]
 80022f8:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 80022fa:	bf00      	nop
 80022fc:	37b0      	adds	r7, #176	@ 0xb0
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40008400 	.word	0x40008400
 8002308:	40021000 	.word	0x40021000
 800230c:	48000400 	.word	0x48000400

08002310 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b0ac      	sub	sp, #176	@ 0xb0
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002318:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	609a      	str	r2, [r3, #8]
 8002324:	60da      	str	r2, [r3, #12]
 8002326:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002328:	f107 0310 	add.w	r3, r7, #16
 800232c:	228c      	movs	r2, #140	@ 0x8c
 800232e:	2100      	movs	r1, #0
 8002330:	4618      	mov	r0, r3
 8002332:	f00a fedf 	bl	800d0f4 <memset>
  if(huart->Instance==UART4)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a25      	ldr	r2, [pc, #148]	@ (80023d0 <HAL_UART_MspInit+0xc0>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d143      	bne.n	80023c8 <HAL_UART_MspInit+0xb8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002340:	2308      	movs	r3, #8
 8002342:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002344:	2300      	movs	r3, #0
 8002346:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002348:	f107 0310 	add.w	r3, r7, #16
 800234c:	4618      	mov	r0, r3
 800234e:	f005 fb7f 	bl	8007a50 <HAL_RCCEx_PeriphCLKConfig>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002358:	f7ff fe0c 	bl	8001f74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800235c:	4b1d      	ldr	r3, [pc, #116]	@ (80023d4 <HAL_UART_MspInit+0xc4>)
 800235e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002360:	4a1c      	ldr	r2, [pc, #112]	@ (80023d4 <HAL_UART_MspInit+0xc4>)
 8002362:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002366:	6593      	str	r3, [r2, #88]	@ 0x58
 8002368:	4b1a      	ldr	r3, [pc, #104]	@ (80023d4 <HAL_UART_MspInit+0xc4>)
 800236a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800236c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002374:	4b17      	ldr	r3, [pc, #92]	@ (80023d4 <HAL_UART_MspInit+0xc4>)
 8002376:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002378:	4a16      	ldr	r2, [pc, #88]	@ (80023d4 <HAL_UART_MspInit+0xc4>)
 800237a:	f043 0304 	orr.w	r3, r3, #4
 800237e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002380:	4b14      	ldr	r3, [pc, #80]	@ (80023d4 <HAL_UART_MspInit+0xc4>)
 8002382:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002384:	f003 0304 	and.w	r3, r3, #4
 8002388:	60bb      	str	r3, [r7, #8]
 800238a:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800238c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002390:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002394:	2302      	movs	r3, #2
 8002396:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239a:	2300      	movs	r3, #0
 800239c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a0:	2303      	movs	r3, #3
 80023a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80023a6:	2308      	movs	r3, #8
 80023a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023ac:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80023b0:	4619      	mov	r1, r3
 80023b2:	4809      	ldr	r0, [pc, #36]	@ (80023d8 <HAL_UART_MspInit+0xc8>)
 80023b4:	f003 fc78 	bl	8005ca8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80023b8:	2200      	movs	r2, #0
 80023ba:	2105      	movs	r1, #5
 80023bc:	2034      	movs	r0, #52	@ 0x34
 80023be:	f003 f9d3 	bl	8005768 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80023c2:	2034      	movs	r0, #52	@ 0x34
 80023c4:	f003 f9ec 	bl	80057a0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 80023c8:	bf00      	nop
 80023ca:	37b0      	adds	r7, #176	@ 0xb0
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40004c00 	.word	0x40004c00
 80023d4:	40021000 	.word	0x40021000
 80023d8:	48000800 	.word	0x48000800

080023dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b08e      	sub	sp, #56	@ 0x38
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80023e4:	2300      	movs	r3, #0
 80023e6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80023ea:	4b34      	ldr	r3, [pc, #208]	@ (80024bc <HAL_InitTick+0xe0>)
 80023ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ee:	4a33      	ldr	r2, [pc, #204]	@ (80024bc <HAL_InitTick+0xe0>)
 80023f0:	f043 0302 	orr.w	r3, r3, #2
 80023f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80023f6:	4b31      	ldr	r3, [pc, #196]	@ (80024bc <HAL_InitTick+0xe0>)
 80023f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002402:	f107 0210 	add.w	r2, r7, #16
 8002406:	f107 0314 	add.w	r3, r7, #20
 800240a:	4611      	mov	r1, r2
 800240c:	4618      	mov	r0, r3
 800240e:	f005 fa8d 	bl	800792c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002412:	6a3b      	ldr	r3, [r7, #32]
 8002414:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002418:	2b00      	cmp	r3, #0
 800241a:	d103      	bne.n	8002424 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800241c:	f005 fa5a 	bl	80078d4 <HAL_RCC_GetPCLK1Freq>
 8002420:	6378      	str	r0, [r7, #52]	@ 0x34
 8002422:	e004      	b.n	800242e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002424:	f005 fa56 	bl	80078d4 <HAL_RCC_GetPCLK1Freq>
 8002428:	4603      	mov	r3, r0
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800242e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002430:	4a23      	ldr	r2, [pc, #140]	@ (80024c0 <HAL_InitTick+0xe4>)
 8002432:	fba2 2303 	umull	r2, r3, r2, r3
 8002436:	0c9b      	lsrs	r3, r3, #18
 8002438:	3b01      	subs	r3, #1
 800243a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 800243c:	4b21      	ldr	r3, [pc, #132]	@ (80024c4 <HAL_InitTick+0xe8>)
 800243e:	4a22      	ldr	r2, [pc, #136]	@ (80024c8 <HAL_InitTick+0xec>)
 8002440:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8002442:	4b20      	ldr	r3, [pc, #128]	@ (80024c4 <HAL_InitTick+0xe8>)
 8002444:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002448:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 800244a:	4a1e      	ldr	r2, [pc, #120]	@ (80024c4 <HAL_InitTick+0xe8>)
 800244c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800244e:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8002450:	4b1c      	ldr	r3, [pc, #112]	@ (80024c4 <HAL_InitTick+0xe8>)
 8002452:	2200      	movs	r2, #0
 8002454:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002456:	4b1b      	ldr	r3, [pc, #108]	@ (80024c4 <HAL_InitTick+0xe8>)
 8002458:	2200      	movs	r2, #0
 800245a:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800245c:	4b19      	ldr	r3, [pc, #100]	@ (80024c4 <HAL_InitTick+0xe8>)
 800245e:	2200      	movs	r2, #0
 8002460:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8002462:	4818      	ldr	r0, [pc, #96]	@ (80024c4 <HAL_InitTick+0xe8>)
 8002464:	f005 ffbe 	bl	80083e4 <HAL_TIM_Base_Init>
 8002468:	4603      	mov	r3, r0
 800246a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800246e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002472:	2b00      	cmp	r3, #0
 8002474:	d11b      	bne.n	80024ae <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8002476:	4813      	ldr	r0, [pc, #76]	@ (80024c4 <HAL_InitTick+0xe8>)
 8002478:	f006 f816 	bl	80084a8 <HAL_TIM_Base_Start_IT>
 800247c:	4603      	mov	r3, r0
 800247e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002482:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002486:	2b00      	cmp	r3, #0
 8002488:	d111      	bne.n	80024ae <HAL_InitTick+0xd2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800248a:	201d      	movs	r0, #29
 800248c:	f003 f988 	bl	80057a0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b0f      	cmp	r3, #15
 8002494:	d808      	bhi.n	80024a8 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8002496:	2200      	movs	r2, #0
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	201d      	movs	r0, #29
 800249c:	f003 f964 	bl	8005768 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024a0:	4a0a      	ldr	r2, [pc, #40]	@ (80024cc <HAL_InitTick+0xf0>)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	e002      	b.n	80024ae <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80024ae:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3738      	adds	r7, #56	@ 0x38
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40021000 	.word	0x40021000
 80024c0:	431bde83 	.word	0x431bde83
 80024c4:	20000340 	.word	0x20000340
 80024c8:	40000400 	.word	0x40000400
 80024cc:	20000004 	.word	0x20000004

080024d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024d4:	bf00      	nop
 80024d6:	e7fd      	b.n	80024d4 <NMI_Handler+0x4>

080024d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024dc:	bf00      	nop
 80024de:	e7fd      	b.n	80024dc <HardFault_Handler+0x4>

080024e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024e4:	bf00      	nop
 80024e6:	e7fd      	b.n	80024e4 <MemManage_Handler+0x4>

080024e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024ec:	bf00      	nop
 80024ee:	e7fd      	b.n	80024ec <BusFault_Handler+0x4>

080024f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024f4:	bf00      	nop
 80024f6:	e7fd      	b.n	80024f4 <UsageFault_Handler+0x4>

080024f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024fc:	bf00      	nop
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Alert1_Pin);
 800250a:	2004      	movs	r0, #4
 800250c:	f003 fd90 	bl	8006030 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002510:	bf00      	nop
 8002512:	bd80      	pop	{r7, pc}

08002514 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002518:	4802      	ldr	r0, [pc, #8]	@ (8002524 <DMA1_Channel1_IRQHandler+0x10>)
 800251a:	f003 fae6 	bl	8005aea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	200001b0 	.word	0x200001b0

08002528 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800252c:	4802      	ldr	r0, [pc, #8]	@ (8002538 <TIM3_IRQHandler+0x10>)
 800252e:	f006 f82b 	bl	8008588 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002532:	bf00      	nop
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	20000340 	.word	0x20000340

0800253c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002540:	4802      	ldr	r0, [pc, #8]	@ (800254c <UART4_IRQHandler+0x10>)
 8002542:	f006 faaf 	bl	8008aa4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	2000029c 	.word	0x2000029c

08002550 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002558:	4a14      	ldr	r2, [pc, #80]	@ (80025ac <_sbrk+0x5c>)
 800255a:	4b15      	ldr	r3, [pc, #84]	@ (80025b0 <_sbrk+0x60>)
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002564:	4b13      	ldr	r3, [pc, #76]	@ (80025b4 <_sbrk+0x64>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d102      	bne.n	8002572 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800256c:	4b11      	ldr	r3, [pc, #68]	@ (80025b4 <_sbrk+0x64>)
 800256e:	4a12      	ldr	r2, [pc, #72]	@ (80025b8 <_sbrk+0x68>)
 8002570:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002572:	4b10      	ldr	r3, [pc, #64]	@ (80025b4 <_sbrk+0x64>)
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4413      	add	r3, r2
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	429a      	cmp	r2, r3
 800257e:	d207      	bcs.n	8002590 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002580:	f00a fe26 	bl	800d1d0 <__errno>
 8002584:	4603      	mov	r3, r0
 8002586:	220c      	movs	r2, #12
 8002588:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800258a:	f04f 33ff 	mov.w	r3, #4294967295
 800258e:	e009      	b.n	80025a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002590:	4b08      	ldr	r3, [pc, #32]	@ (80025b4 <_sbrk+0x64>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002596:	4b07      	ldr	r3, [pc, #28]	@ (80025b4 <_sbrk+0x64>)
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4413      	add	r3, r2
 800259e:	4a05      	ldr	r2, [pc, #20]	@ (80025b4 <_sbrk+0x64>)
 80025a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025a2:	68fb      	ldr	r3, [r7, #12]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3718      	adds	r7, #24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	20050000 	.word	0x20050000
 80025b0:	00000400 	.word	0x00000400
 80025b4:	2000038c 	.word	0x2000038c
 80025b8:	20002a38 	.word	0x20002a38

080025bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80025c0:	4b06      	ldr	r3, [pc, #24]	@ (80025dc <SystemInit+0x20>)
 80025c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025c6:	4a05      	ldr	r2, [pc, #20]	@ (80025dc <SystemInit+0x20>)
 80025c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80025d0:	bf00      	nop
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	e000ed00 	.word	0xe000ed00

080025e0 <_ZN7ILI9341C1Ess>:
/**
  * @brief   Constructor for ILI9341 class
  * @param   w: width of LCD
  * @param   h: height of LCD
  */
ILI9341::ILI9341(int16_t w, int16_t h):WIDTH(w),HEIGHT(h)
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	460b      	mov	r3, r1
 80025ea:	807b      	strh	r3, [r7, #2]
 80025ec:	4613      	mov	r3, r2
 80025ee:	803b      	strh	r3, [r7, #0]
 80025f0:	4a45      	ldr	r2, [pc, #276]	@ (8002708 <_ZN7ILI9341C1Ess+0x128>)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	887a      	ldrh	r2, [r7, #2]
 80025fa:	809a      	strh	r2, [r3, #4]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	883a      	ldrh	r2, [r7, #0]
 8002600:	80da      	strh	r2, [r3, #6]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	81da      	strh	r2, [r3, #14]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	821a      	strh	r2, [r3, #16]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002614:	621a      	str	r2, [r3, #32]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800261c:	625a      	str	r2, [r3, #36]	@ 0x24
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002624:	629a      	str	r2, [r3, #40]	@ 0x28
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800262c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002634:	631a      	str	r2, [r3, #48]	@ 0x30
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800263c:	635a      	str	r2, [r3, #52]	@ 0x34
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002644:	639a      	str	r2, [r3, #56]	@ 0x38
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800264c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2204      	movs	r2, #4
 8002652:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a2c      	ldr	r2, [pc, #176]	@ (800270c <_ZN7ILI9341C1Ess+0x12c>)
 800265a:	645a      	str	r2, [r3, #68]	@ 0x44
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2202      	movs	r2, #2
 8002660:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a29      	ldr	r2, [pc, #164]	@ (800270c <_ZN7ILI9341C1Ess+0x12c>)
 8002668:	64da      	str	r2, [r3, #76]	@ 0x4c
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2201      	movs	r2, #1
 800266e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a25      	ldr	r2, [pc, #148]	@ (800270c <_ZN7ILI9341C1Ess+0x12c>)
 8002676:	655a      	str	r2, [r3, #84]	@ 0x54
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800267e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a21      	ldr	r2, [pc, #132]	@ (800270c <_ZN7ILI9341C1Ess+0x12c>)
 8002686:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2220      	movs	r2, #32
 800268c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a1f      	ldr	r2, [pc, #124]	@ (8002710 <_ZN7ILI9341C1Ess+0x130>)
 8002694:	665a      	str	r2, [r3, #100]	@ 0x64
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2210      	movs	r2, #16
 800269a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a1b      	ldr	r2, [pc, #108]	@ (8002710 <_ZN7ILI9341C1Ess+0x130>)
 80026a2:	66da      	str	r2, [r3, #108]	@ 0x6c
{
  text_size_ = 1;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	819a      	strh	r2, [r3, #12]
  width_ = WIDTH;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	811a      	strh	r2, [r3, #8]
  height_ = HEIGHT;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	815a      	strh	r2, [r3, #10]
  rotation = 0;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	771a      	strb	r2, [r3, #28]
  cursor_y = cursor_x = 0;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	825a      	strh	r2, [r3, #18]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	829a      	strh	r2, [r3, #20]
  textsize_x = textsize_y = 1;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	76da      	strb	r2, [r3, #27]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	7eda      	ldrb	r2, [r3, #27]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	769a      	strb	r2, [r3, #26]
  textcolor = textbgcolor = 0xFFFF;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80026e8:	831a      	strh	r2, [r3, #24]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	8b1a      	ldrh	r2, [r3, #24]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	82da      	strh	r2, [r3, #22]
  wrap = true;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	775a      	strb	r2, [r3, #29]
}
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4618      	mov	r0, r3
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	0800e068 	.word	0x0800e068
 800270c:	48000400 	.word	0x48000400
 8002710:	48000800 	.word	0x48000800

08002714 <_ZN7ILI9341D1Ev>:

ILI9341::~ILI9341()
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	4a04      	ldr	r2, [pc, #16]	@ (8002730 <_ZN7ILI9341D1Ev+0x1c>)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	601a      	str	r2, [r3, #0]
{
  // TODO Auto-generated destructor stub
}
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4618      	mov	r0, r3
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	0800e068 	.word	0x0800e068

08002734 <_ZN7ILI9341D0Ev>:
ILI9341::~ILI9341()
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
}
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f7ff ffe9 	bl	8002714 <_ZN7ILI9341D1Ev>
 8002742:	2170      	movs	r1, #112	@ 0x70
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f00a fbe7 	bl	800cf18 <_ZdlPvj>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4618      	mov	r0, r3
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <_ZN7ILI93414InitEv>:

/**
  * @brief  Initialize the LCD.
  */
void ILI9341::Init()
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b088      	sub	sp, #32
 8002758:	af02      	add	r7, sp, #8
 800275a:	6078      	str	r0, [r7, #4]
  // Write all control signals high
  HAL_GPIO_WritePin(Backlight_PWM_GPIO_Port_, Backlight_PWM_Pin_, GPIO_PIN_SET);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8002766:	2201      	movs	r2, #1
 8002768:	4619      	mov	r1, r3
 800276a:	f003 fc2f 	bl	8005fcc <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_SET);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002778:	2201      	movs	r2, #1
 800277a:	4619      	mov	r1, r3
 800277c:	f003 fc26 	bl	8005fcc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_SET);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800278a:	2201      	movs	r2, #1
 800278c:	4619      	mov	r1, r3
 800278e:	f003 fc1d 	bl	8005fcc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_SET);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800279c:	2201      	movs	r2, #1
 800279e:	4619      	mov	r1, r3
 80027a0:	f003 fc14 	bl	8005fcc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_READ_GPIO_Port_, LCD_READ_Pin_, GPIO_PIN_SET);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80027ae:	2201      	movs	r2, #1
 80027b0:	4619      	mov	r1, r3
 80027b2:	f003 fc0b 	bl	8005fcc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port_, LCD_RST_Pin_, GPIO_PIN_SET);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80027c0:	2201      	movs	r2, #1
 80027c2:	4619      	mov	r1, r3
 80027c4:	f003 fc02 	bl	8005fcc <HAL_GPIO_WritePin>

  // Hold reset pin
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port_, LCD_RST_Pin_, GPIO_PIN_RESET);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80027d2:	2200      	movs	r2, #0
 80027d4:	4619      	mov	r1, r3
 80027d6:	f003 fbf9 	bl	8005fcc <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80027da:	200a      	movs	r0, #10
 80027dc:	f000 ffc8 	bl	8003770 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port_, LCD_RST_Pin_, GPIO_PIN_SET);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80027ea:	2201      	movs	r2, #1
 80027ec:	4619      	mov	r1, r3
 80027ee:	f003 fbed 	bl	8005fcc <HAL_GPIO_WritePin>

  // enable chip select -> LOW
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_RESET);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80027fc:	2200      	movs	r2, #0
 80027fe:	4619      	mov	r1, r3
 8002800:	f003 fbe4 	bl	8005fcc <HAL_GPIO_WritePin>

  // Soft reset the LCD
  TransmitCmd(ILI9341_SWRESET);
 8002804:	2101      	movs	r1, #1
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f8c4 	bl	8002994 <_ZN7ILI934111TransmitCmdEh>
  Transmit8bitData(0x00);
 800280c:	2100      	movs	r1, #0
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f8d8 	bl	80029c4 <_ZN7ILI934116Transmit8bitDataEh>
  HAL_Delay(50);
 8002814:	2032      	movs	r0, #50	@ 0x32
 8002816:	f000 ffab 	bl	8003770 <HAL_Delay>


  uint8_t cmd, x, numArgs;
  const uint8_t *addr = initcmd;
 800281a:	4b27      	ldr	r3, [pc, #156]	@ (80028b8 <_ZN7ILI93414InitEv+0x164>)
 800281c:	613b      	str	r3, [r7, #16]
  while((cmd = *(addr++)) > 0)
 800281e:	e027      	b.n	8002870 <_ZN7ILI93414InitEv+0x11c>
  {
    x = *(addr++);
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1c5a      	adds	r2, r3, #1
 8002824:	613a      	str	r2, [r7, #16]
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	73bb      	strb	r3, [r7, #14]
    numArgs = x & 0x7F;
 800282a:	7bbb      	ldrb	r3, [r7, #14]
 800282c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002830:	75fb      	strb	r3, [r7, #23]
    TransmitCmd(cmd);
 8002832:	7bfb      	ldrb	r3, [r7, #15]
 8002834:	4619      	mov	r1, r3
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f8ac 	bl	8002994 <_ZN7ILI934111TransmitCmdEh>
    while(numArgs--)
 800283c:	e007      	b.n	800284e <_ZN7ILI93414InitEv+0xfa>
    {
      Transmit8bitData(*(addr++));
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1c5a      	adds	r2, r3, #1
 8002842:	613a      	str	r2, [r7, #16]
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	4619      	mov	r1, r3
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 f8bb 	bl	80029c4 <_ZN7ILI934116Transmit8bitDataEh>
    while(numArgs--)
 800284e:	7dfb      	ldrb	r3, [r7, #23]
 8002850:	1e5a      	subs	r2, r3, #1
 8002852:	75fa      	strb	r2, [r7, #23]
 8002854:	2b00      	cmp	r3, #0
 8002856:	bf14      	ite	ne
 8002858:	2301      	movne	r3, #1
 800285a:	2300      	moveq	r3, #0
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1ed      	bne.n	800283e <_ZN7ILI93414InitEv+0xea>
    }
    if(x & 0x80)
 8002862:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002866:	2b00      	cmp	r3, #0
 8002868:	da02      	bge.n	8002870 <_ZN7ILI93414InitEv+0x11c>
    {
      HAL_Delay(150);
 800286a:	2096      	movs	r0, #150	@ 0x96
 800286c:	f000 ff80 	bl	8003770 <HAL_Delay>
  while((cmd = *(addr++)) > 0)
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1c5a      	adds	r2, r3, #1
 8002874:	613a      	str	r2, [r7, #16]
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	73fb      	strb	r3, [r7, #15]
 800287a:	7bfb      	ldrb	r3, [r7, #15]
 800287c:	2b00      	cmp	r3, #0
 800287e:	bf14      	ite	ne
 8002880:	2301      	movne	r3, #1
 8002882:	2300      	moveq	r3, #0
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1ca      	bne.n	8002820 <_ZN7ILI93414InitEv+0xcc>
    }
  }

  SetWindow(0, 0, width_-1, height_-1);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002890:	b29b      	uxth	r3, r3
 8002892:	3b01      	subs	r3, #1
 8002894:	b29a      	uxth	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800289c:	b29b      	uxth	r3, r3
 800289e:	3b01      	subs	r3, #1
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	4613      	mov	r3, r2
 80028a6:	2200      	movs	r2, #0
 80028a8:	2100      	movs	r1, #0
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 f8f0 	bl	8002a90 <_ZN7ILI93419SetWindowEtttt>
}
 80028b0:	bf00      	nop
 80028b2:	3718      	adds	r7, #24
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	0800e03c 	.word	0x0800e03c

080028bc <_ZN7ILI93415WriteEh>:

/**
  * @brief  Write data to LCD bus.
  */
inline void ILI9341::Write(uint8_t data)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	460b      	mov	r3, r1
 80028c6:	70fb      	strb	r3, [r7, #3]
  // Put data on Bus
#if UI_USE_HAL
  HAL_GPIO_WritePin(LCD_DATA0_GPIO_Port_, LCD_DATA0_Pin_, static_cast<GPIO_PinState>(data & 0x01U) );
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80028cc:	78fb      	ldrb	r3, [r7, #3]
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	461a      	mov	r2, r3
 80028d6:	2101      	movs	r1, #1
 80028d8:	f003 fb78 	bl	8005fcc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA1_GPIO_Port_, LCD_DATA1_Pin_, static_cast<GPIO_PinState>(data & 0x02U) );
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80028e0:	78fb      	ldrb	r3, [r7, #3]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	461a      	mov	r2, r3
 80028ea:	2102      	movs	r1, #2
 80028ec:	f003 fb6e 	bl	8005fcc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA2_GPIO_Port_, LCD_DATA2_Pin_, static_cast<GPIO_PinState>(data & 0x04U) );
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80028f4:	78fb      	ldrb	r3, [r7, #3]
 80028f6:	f003 0304 	and.w	r3, r3, #4
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	461a      	mov	r2, r3
 80028fe:	2104      	movs	r1, #4
 8002900:	f003 fb64 	bl	8005fcc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA3_GPIO_Port_, LCD_DATA3_Pin_, static_cast<GPIO_PinState>(data & 0x08U) );
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002908:	78fb      	ldrb	r3, [r7, #3]
 800290a:	f003 0308 	and.w	r3, r3, #8
 800290e:	b2db      	uxtb	r3, r3
 8002910:	461a      	mov	r2, r3
 8002912:	2108      	movs	r1, #8
 8002914:	f003 fb5a 	bl	8005fcc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA4_GPIO_Port_, LCD_DATA4_Pin_, static_cast<GPIO_PinState>(data & 0x10U) );
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800291c:	78fb      	ldrb	r3, [r7, #3]
 800291e:	f003 0310 	and.w	r3, r3, #16
 8002922:	b2db      	uxtb	r3, r3
 8002924:	461a      	mov	r2, r3
 8002926:	2110      	movs	r1, #16
 8002928:	f003 fb50 	bl	8005fcc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA5_GPIO_Port_, LCD_DATA5_Pin_, static_cast<GPIO_PinState>(data & 0x20U) );
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002930:	78fb      	ldrb	r3, [r7, #3]
 8002932:	f003 0320 	and.w	r3, r3, #32
 8002936:	b2db      	uxtb	r3, r3
 8002938:	461a      	mov	r2, r3
 800293a:	2120      	movs	r1, #32
 800293c:	f003 fb46 	bl	8005fcc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA6_GPIO_Port_, LCD_DATA6_Pin_, static_cast<GPIO_PinState>(data & 0x40U) );
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002944:	78fb      	ldrb	r3, [r7, #3]
 8002946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800294a:	b2db      	uxtb	r3, r3
 800294c:	461a      	mov	r2, r3
 800294e:	2140      	movs	r1, #64	@ 0x40
 8002950:	f003 fb3c 	bl	8005fcc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA7_GPIO_Port_, LCD_DATA7_Pin_, static_cast<GPIO_PinState>(data & 0x80U) );
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a18      	ldr	r0, [r3, #32]
 8002958:	78fb      	ldrb	r3, [r7, #3]
 800295a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800295e:	b2db      	uxtb	r3, r3
 8002960:	461a      	mov	r2, r3
 8002962:	2180      	movs	r1, #128	@ 0x80
 8002964:	f003 fb32 	bl	8005fcc <HAL_GPIO_WritePin>
  // Pulse Write
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_RESET);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8002972:	2200      	movs	r2, #0
 8002974:	4619      	mov	r1, r3
 8002976:	f003 fb29 	bl	8005fcc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_SET);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8002984:	2201      	movs	r2, #1
 8002986:	4619      	mov	r1, r3
 8002988:	f003 fb20 	bl	8005fcc <HAL_GPIO_WritePin>
  // Pulse Write
  LCD_WRITE_GPIO_Port_->BSRR = LCD_WRITE_Pin_; // changed from brr to bsrr... ok?
  LCD_WRITE_GPIO_Port_->BSRR = (uint32_t)LCD_WRITE_Pin_ << 16U;
#endif

}
 800298c:	bf00      	nop
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <_ZN7ILI934111TransmitCmdEh>:
/**
  * @brief  Sends 8-bit command to LCD.
  * @param  cmd: 8-bit command to be sent.
  */
void ILI9341::TransmitCmd(uint8_t cmd)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	460b      	mov	r3, r1
 800299e:	70fb      	strb	r3, [r7, #3]
  // D/C -> LOW
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_RESET);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029aa:	2200      	movs	r2, #0
 80029ac:	4619      	mov	r1, r3
 80029ae:	f003 fb0d 	bl	8005fcc <HAL_GPIO_WritePin>

  Write(cmd);
 80029b2:	78fb      	ldrb	r3, [r7, #3]
 80029b4:	4619      	mov	r1, r3
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7ff ff80 	bl	80028bc <_ZN7ILI93415WriteEh>

  // TODO: Can this line be removed?
  // D/C -> HIGH
  // HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_SET);
}
 80029bc:	bf00      	nop
 80029be:	3708      	adds	r7, #8
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <_ZN7ILI934116Transmit8bitDataEh>:
/**
  * @brief  Sends 8-bit data to LCD.
  * @param  data: 8-bit data to be sent.
  */
void ILI9341::Transmit8bitData(uint8_t data)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	460b      	mov	r3, r1
 80029ce:	70fb      	strb	r3, [r7, #3]
  // D/C -> High
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_SET);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029da:	2201      	movs	r2, #1
 80029dc:	4619      	mov	r1, r3
 80029de:	f003 faf5 	bl	8005fcc <HAL_GPIO_WritePin>

  Write(data);
 80029e2:	78fb      	ldrb	r3, [r7, #3]
 80029e4:	4619      	mov	r1, r3
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f7ff ff68 	bl	80028bc <_ZN7ILI93415WriteEh>
}
 80029ec:	bf00      	nop
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <_ZN7ILI934117Transmit16bitDataEt>:
/**
  * @brief  Sends 16-bit data to LCD.
  * @param  data: 16-bit data to be sent to LCD.
  */
void ILI9341::Transmit16bitData(uint16_t data)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	460b      	mov	r3, r1
 80029fe:	807b      	strh	r3, [r7, #2]
  // D/C -> High
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_SET);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	f003 fadd 	bl	8005fcc <HAL_GPIO_WritePin>

  Write(static_cast<uint8_t>(data >> 8));
 8002a12:	887b      	ldrh	r3, [r7, #2]
 8002a14:	0a1b      	lsrs	r3, r3, #8
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f7ff ff4d 	bl	80028bc <_ZN7ILI93415WriteEh>
  Write(static_cast<uint8_t>(data >> 0));
 8002a22:	887b      	ldrh	r3, [r7, #2]
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	4619      	mov	r1, r3
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f7ff ff47 	bl	80028bc <_ZN7ILI93415WriteEh>

}
 8002a2e:	bf00      	nop
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <_ZN7ILI934117Transmit32bitDataEm>:
/**
  * @brief  Sends 32-bit data to LCD.
  * @param  data: 32-bit data to be sent to LCD.
  */
void ILI9341::Transmit32bitData(uint32_t data)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b082      	sub	sp, #8
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
 8002a3e:	6039      	str	r1, [r7, #0]
  // D/C -> High
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_SET);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	f003 fabd 	bl	8005fcc <HAL_GPIO_WritePin>

  Write(static_cast<uint8_t>(data >> 24));
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	0e1b      	lsrs	r3, r3, #24
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	4619      	mov	r1, r3
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7ff ff2e 	bl	80028bc <_ZN7ILI93415WriteEh>
  Write(static_cast<uint8_t>(data >> 16));
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	0c1b      	lsrs	r3, r3, #16
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	4619      	mov	r1, r3
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7ff ff27 	bl	80028bc <_ZN7ILI93415WriteEh>
  Write(static_cast<uint8_t>(data >> 8 ));
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	0a1b      	lsrs	r3, r3, #8
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	4619      	mov	r1, r3
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f7ff ff20 	bl	80028bc <_ZN7ILI93415WriteEh>
  Write(static_cast<uint8_t>(data >> 0 ));
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	4619      	mov	r1, r3
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff ff1a 	bl	80028bc <_ZN7ILI93415WriteEh>

}
 8002a88:	bf00      	nop
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <_ZN7ILI93419SetWindowEtttt>:
  * @param  xe: x end coordinate. xe > xs.
  * @param  ye: y end coordinate. ye > ys.
  * @retval ILI9341_SUCCESS or ILI9341_ERROR.
  */
char ILI9341::SetWindow (uint16_t xs, uint16_t ys, uint16_t xe, uint16_t ye)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	4608      	mov	r0, r1
 8002a9a:	4611      	mov	r1, r2
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	817b      	strh	r3, [r7, #10]
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	813b      	strh	r3, [r7, #8]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	80fb      	strh	r3, [r7, #6]
  // enable chip select -> LOW
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_RESET);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	f003 fa88 	bl	8005fcc <HAL_GPIO_WritePin>

  // check if coordinates is out of range
  // TODO: Use >=, <= instead of >, < for width_ and height_?
  if ((xs > xe) || (xe > width_) ||
 8002abc:	897a      	ldrh	r2, [r7, #10]
 8002abe:	88fb      	ldrh	r3, [r7, #6]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d80f      	bhi.n	8002ae4 <_ZN7ILI93419SetWindowEtttt+0x54>
 8002ac4:	88fb      	ldrh	r3, [r7, #6]
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002acc:	4293      	cmp	r3, r2
 8002ace:	dc09      	bgt.n	8002ae4 <_ZN7ILI93419SetWindowEtttt+0x54>
 8002ad0:	893a      	ldrh	r2, [r7, #8]
 8002ad2:	8b3b      	ldrh	r3, [r7, #24]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d805      	bhi.n	8002ae4 <_ZN7ILI93419SetWindowEtttt+0x54>
      (ys > ye) || (ye > height_))
 8002ad8:	8b3b      	ldrh	r3, [r7, #24]
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	dd01      	ble.n	8002ae8 <_ZN7ILI93419SetWindowEtttt+0x58>
  {
    // out of range
    return ILI9341_ERROR;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	e021      	b.n	8002b2c <_ZN7ILI93419SetWindowEtttt+0x9c>
  }

  // set column
  TransmitCmd(ILI9341_CASET);
 8002ae8:	212a      	movs	r1, #42	@ 0x2a
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f7ff ff52 	bl	8002994 <_ZN7ILI934111TransmitCmdEh>
  // set column -> set column
  Transmit32bitData(((uint32_t) xs << 16) | xe);
 8002af0:	897b      	ldrh	r3, [r7, #10]
 8002af2:	041a      	lsls	r2, r3, #16
 8002af4:	88fb      	ldrh	r3, [r7, #6]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	4619      	mov	r1, r3
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f7ff ff9b 	bl	8002a36 <_ZN7ILI934117Transmit32bitDataEm>
  // set page
  TransmitCmd(ILI9341_PASET);
 8002b00:	212b      	movs	r1, #43	@ 0x2b
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f7ff ff46 	bl	8002994 <_ZN7ILI934111TransmitCmdEh>
  // set page -> high byte first
  Transmit32bitData(((uint32_t) ys << 16) | ye);
 8002b08:	893b      	ldrh	r3, [r7, #8]
 8002b0a:	041a      	lsls	r2, r3, #16
 8002b0c:	8b3b      	ldrh	r3, [r7, #24]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	4619      	mov	r1, r3
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f7ff ff8f 	bl	8002a36 <_ZN7ILI934117Transmit32bitDataEm>

  // disable chip select -> HIGH
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_SET);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002b22:	2201      	movs	r2, #1
 8002b24:	4619      	mov	r1, r3
 8002b26:	f003 fa51 	bl	8005fcc <HAL_GPIO_WritePin>
  // success
  return ILI9341_SUCCESS;
 8002b2a:	2301      	movs	r3, #1
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3710      	adds	r7, #16
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <_ZN7ILI93419DrawPixelEttt>:
  * @param  y: y coordinate.
  * @param  color: 16-bit color.
  * @retval ILI9341_SUCCESS or ILI9341_ERROR.
  */
char ILI9341::DrawPixel (uint16_t x, uint16_t y, uint16_t color)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af02      	add	r7, sp, #8
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	4608      	mov	r0, r1
 8002b3e:	4611      	mov	r1, r2
 8002b40:	461a      	mov	r2, r3
 8002b42:	4603      	mov	r3, r0
 8002b44:	817b      	strh	r3, [r7, #10]
 8002b46:	460b      	mov	r3, r1
 8002b48:	813b      	strh	r3, [r7, #8]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	80fb      	strh	r3, [r7, #6]
  // check dimension
  if ((x > width_) || (y > height_)) {
 8002b4e:	897b      	ldrh	r3, [r7, #10]
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002b56:	4293      	cmp	r3, r2
 8002b58:	dc05      	bgt.n	8002b66 <_ZN7ILI93419DrawPixelEttt+0x32>
 8002b5a:	893b      	ldrh	r3, [r7, #8]
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8002b62:	4293      	cmp	r3, r2
 8002b64:	dd01      	ble.n	8002b6a <_ZN7ILI93419DrawPixelEttt+0x36>
    // error
    return ILI9341_ERROR;
 8002b66:	2300      	movs	r3, #0
 8002b68:	e00f      	b.n	8002b8a <_ZN7ILI93419DrawPixelEttt+0x56>
  }
  // set window
  SetWindow(x, y, x, y);
 8002b6a:	8978      	ldrh	r0, [r7, #10]
 8002b6c:	893a      	ldrh	r2, [r7, #8]
 8002b6e:	8979      	ldrh	r1, [r7, #10]
 8002b70:	893b      	ldrh	r3, [r7, #8]
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	4603      	mov	r3, r0
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f7ff ff8a 	bl	8002a90 <_ZN7ILI93419SetWindowEtttt>
  // draw pixel by 565 mode
  SendColor565(color, 1);
 8002b7c:	88fb      	ldrh	r3, [r7, #6]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	4619      	mov	r1, r3
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 f805 	bl	8002b92 <_ZN7ILI934112SendColor565Etm>
  // success
  return ILI9341_SUCCESS;
 8002b88:	2301      	movs	r3, #1
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <_ZN7ILI934112SendColor565Etm>:

void ILI9341::SendColor565(uint16_t color, uint32_t count)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b084      	sub	sp, #16
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	60f8      	str	r0, [r7, #12]
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	607a      	str	r2, [r7, #4]
 8002b9e:	817b      	strh	r3, [r7, #10]
  // enable chip select -> LOW
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_RESET);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002baa:	2200      	movs	r2, #0
 8002bac:	4619      	mov	r1, r3
 8002bae:	f003 fa0d 	bl	8005fcc <HAL_GPIO_WritePin>
  // access to RAM
  TransmitCmd(ILI9341_RAMWR);
 8002bb2:	212c      	movs	r1, #44	@ 0x2c
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f7ff feed 	bl	8002994 <_ZN7ILI934111TransmitCmdEh>
  // counter
  while (count--) {
 8002bba:	e004      	b.n	8002bc6 <_ZN7ILI934112SendColor565Etm+0x34>
    // write color - first colors byte
    Transmit16bitData(color);
 8002bbc:	897b      	ldrh	r3, [r7, #10]
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f7ff ff17 	bl	80029f4 <_ZN7ILI934117Transmit16bitDataEt>
  while (count--) {
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	1e5a      	subs	r2, r3, #1
 8002bca:	607a      	str	r2, [r7, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	bf14      	ite	ne
 8002bd0:	2301      	movne	r3, #1
 8002bd2:	2300      	moveq	r3, #0
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1f0      	bne.n	8002bbc <_ZN7ILI934112SendColor565Etm+0x2a>
  }
  // disable chip select -> HIGH
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_SET);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002be4:	2201      	movs	r2, #1
 8002be6:	4619      	mov	r1, r3
 8002be8:	f003 f9f0 	bl	8005fcc <HAL_GPIO_WritePin>
}
 8002bec:	bf00      	nop
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <_ZN7ILI93415FloodEtm>:

void ILI9341::Flood(uint16_t color, uint32_t count)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	607a      	str	r2, [r7, #4]
 8002c00:	817b      	strh	r3, [r7, #10]
  // enable chip select -> LOW
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_RESET);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	4619      	mov	r1, r3
 8002c10:	f003 f9dc 	bl	8005fcc <HAL_GPIO_WritePin>
  // access to RAM
  TransmitCmd(ILI9341_RAMWR);
 8002c14:	212c      	movs	r1, #44	@ 0x2c
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f7ff febc 	bl	8002994 <_ZN7ILI934111TransmitCmdEh>
  // counter
  // Upper and lower are the same
  if( (color & 0xFF) == (color >> 8))
 8002c1c:	897b      	ldrh	r3, [r7, #10]
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	897a      	ldrh	r2, [r7, #10]
 8002c22:	0a12      	lsrs	r2, r2, #8
 8002c24:	b292      	uxth	r2, r2
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d13c      	bne.n	8002ca4 <_ZN7ILI93415FloodEtm+0xb0>
  {
    count--;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	607b      	str	r3, [r7, #4]
    Transmit16bitData(color);
 8002c30:	897b      	ldrh	r3, [r7, #10]
 8002c32:	4619      	mov	r1, r3
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f7ff fedd 	bl	80029f4 <_ZN7ILI934117Transmit16bitDataEt>
    while(count--)
 8002c3a:	e023      	b.n	8002c84 <_ZN7ILI93415FloodEtm+0x90>
    {
#if UI_USE_HAL
  // Pulse Write
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_RESET);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8002c46:	2200      	movs	r2, #0
 8002c48:	4619      	mov	r1, r3
 8002c4a:	f003 f9bf 	bl	8005fcc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_SET);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8002c58:	2201      	movs	r2, #1
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	f003 f9b6 	bl	8005fcc <HAL_GPIO_WritePin>
  // Pulse Write
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_RESET);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	f003 f9ad 	bl	8005fcc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_SET);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	4619      	mov	r1, r3
 8002c80:	f003 f9a4 	bl	8005fcc <HAL_GPIO_WritePin>
    while(count--)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	1e5a      	subs	r2, r3, #1
 8002c88:	607a      	str	r2, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	bf14      	ite	ne
 8002c8e:	2301      	movne	r3, #1
 8002c90:	2300      	moveq	r3, #0
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1d1      	bne.n	8002c3c <_ZN7ILI93415FloodEtm+0x48>
 8002c98:	e00e      	b.n	8002cb8 <_ZN7ILI93415FloodEtm+0xc4>
  }
  else
  {
    while (count--)
    {
      Transmit16bitData(color);
 8002c9a:	897b      	ldrh	r3, [r7, #10]
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f7ff fea8 	bl	80029f4 <_ZN7ILI934117Transmit16bitDataEt>
    while (count--)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	1e5a      	subs	r2, r3, #1
 8002ca8:	607a      	str	r2, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	bf14      	ite	ne
 8002cae:	2301      	movne	r3, #1
 8002cb0:	2300      	moveq	r3, #0
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1f0      	bne.n	8002c9a <_ZN7ILI93415FloodEtm+0xa6>
    }
  }
  // disable chip select -> HIGH
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_SET);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	f003 f981 	bl	8005fcc <HAL_GPIO_WritePin>
}
 8002cca:	bf00      	nop
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <_ZN7ILI934111ClearScreenEt>:

void ILI9341::ClearScreen(uint16_t color)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b084      	sub	sp, #16
 8002cd6:	af02      	add	r7, sp, #8
 8002cd8:	6078      	str	r0, [r7, #4]
 8002cda:	460b      	mov	r3, r1
 8002cdc:	807b      	strh	r3, [r7, #2]
  // set whole window
  SetWindow(0, 0, width_, height_);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	9300      	str	r3, [sp, #0]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f7ff feca 	bl	8002a90 <_ZN7ILI93419SetWindowEtttt>
  // draw individual pixels
  Flood(color, ILI9341_CACHE_MEM);
 8002cfc:	887b      	ldrh	r3, [r7, #2]
 8002cfe:	f44f 3296 	mov.w	r2, #76800	@ 0x12c00
 8002d02:	4619      	mov	r1, r3
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f7ff ff75 	bl	8002bf4 <_ZN7ILI93415FloodEtm>
  // Update background color
  textbgcolor = color;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	887a      	ldrh	r2, [r7, #2]
 8002d0e:	831a      	strh	r2, [r3, #24]
}
 8002d10:	bf00      	nop
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <_ZN7ILI934113DrawFastHLineEtttt>:

void ILI9341::DrawFastHLine(uint16_t x, uint16_t y, uint16_t length,
                                    uint16_t color) {
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b088      	sub	sp, #32
 8002d1c:	af02      	add	r7, sp, #8
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	4608      	mov	r0, r1
 8002d22:	4611      	mov	r1, r2
 8002d24:	461a      	mov	r2, r3
 8002d26:	4603      	mov	r3, r0
 8002d28:	817b      	strh	r3, [r7, #10]
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	813b      	strh	r3, [r7, #8]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	80fb      	strh	r3, [r7, #6]
  int16_t x2;

  // Initial off-screen clipping
  if ((length <= 0) || (y < 0) || (y >= height_) || (x >= width_) ||
 8002d32:	88fb      	ldrh	r3, [r7, #6]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d016      	beq.n	8002d66 <_ZN7ILI934113DrawFastHLineEtttt+0x4e>
 8002d38:	893b      	ldrh	r3, [r7, #8]
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8002d40:	4293      	cmp	r3, r2
 8002d42:	da10      	bge.n	8002d66 <_ZN7ILI934113DrawFastHLineEtttt+0x4e>
 8002d44:	897b      	ldrh	r3, [r7, #10]
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	da0a      	bge.n	8002d66 <_ZN7ILI934113DrawFastHLineEtttt+0x4e>
      ((x2 = (x + length - 1)) < 0))
 8002d50:	897a      	ldrh	r2, [r7, #10]
 8002d52:	88fb      	ldrh	r3, [r7, #6]
 8002d54:	4413      	add	r3, r2
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	82fb      	strh	r3, [r7, #22]
  if ((length <= 0) || (y < 0) || (y >= height_) || (x >= width_) ||
 8002d5e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	da01      	bge.n	8002d6a <_ZN7ILI934113DrawFastHLineEtttt+0x52>
 8002d66:	2301      	movs	r3, #1
 8002d68:	e000      	b.n	8002d6c <_ZN7ILI934113DrawFastHLineEtttt+0x54>
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d123      	bne.n	8002db8 <_ZN7ILI934113DrawFastHLineEtttt+0xa0>

  if (x < 0) { // Clip left
    length += x;
    x = 0;
  }
  if (x2 >= width_) { // Clip right
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002d76:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	db0c      	blt.n	8002d98 <_ZN7ILI934113DrawFastHLineEtttt+0x80>
    x2 = width_ - 1;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	3b01      	subs	r3, #1
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	82fb      	strh	r3, [r7, #22]
    length = x2 - x + 1;
 8002d8c:	8afa      	ldrh	r2, [r7, #22]
 8002d8e:	897b      	ldrh	r3, [r7, #10]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	3301      	adds	r3, #1
 8002d96:	80fb      	strh	r3, [r7, #6]
  }

  SetWindow(x, y, x2, y);
 8002d98:	8af8      	ldrh	r0, [r7, #22]
 8002d9a:	893a      	ldrh	r2, [r7, #8]
 8002d9c:	8979      	ldrh	r1, [r7, #10]
 8002d9e:	893b      	ldrh	r3, [r7, #8]
 8002da0:	9300      	str	r3, [sp, #0]
 8002da2:	4603      	mov	r3, r0
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f7ff fe73 	bl	8002a90 <_ZN7ILI93419SetWindowEtttt>
  Flood(color, length);
 8002daa:	88fa      	ldrh	r2, [r7, #6]
 8002dac:	8c3b      	ldrh	r3, [r7, #32]
 8002dae:	4619      	mov	r1, r3
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f7ff ff1f 	bl	8002bf4 <_ZN7ILI93415FloodEtm>
 8002db6:	e000      	b.n	8002dba <_ZN7ILI934113DrawFastHLineEtttt+0xa2>
    return;
 8002db8:	bf00      	nop
}
 8002dba:	3718      	adds	r7, #24
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <_ZN7ILI934113DrawFastVLineEtttt>:

void ILI9341::DrawFastVLine(uint16_t x, uint16_t y, uint16_t length,
                                    uint16_t color) {
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b088      	sub	sp, #32
 8002dc4:	af02      	add	r7, sp, #8
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	4608      	mov	r0, r1
 8002dca:	4611      	mov	r1, r2
 8002dcc:	461a      	mov	r2, r3
 8002dce:	4603      	mov	r3, r0
 8002dd0:	817b      	strh	r3, [r7, #10]
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	813b      	strh	r3, [r7, #8]
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	80fb      	strh	r3, [r7, #6]
  int16_t y2;

  // Initial off-screen clipping
  if ((length <= 0) || (x < 0) || (x >= width_) || (y >= height_) ||
 8002dda:	88fb      	ldrh	r3, [r7, #6]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d016      	beq.n	8002e0e <_ZN7ILI934113DrawFastVLineEtttt+0x4e>
 8002de0:	897b      	ldrh	r3, [r7, #10]
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002de8:	4293      	cmp	r3, r2
 8002dea:	da10      	bge.n	8002e0e <_ZN7ILI934113DrawFastVLineEtttt+0x4e>
 8002dec:	893b      	ldrh	r3, [r7, #8]
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8002df4:	4293      	cmp	r3, r2
 8002df6:	da0a      	bge.n	8002e0e <_ZN7ILI934113DrawFastVLineEtttt+0x4e>
      ((y2 = (y + length - 1)) < 0))
 8002df8:	893a      	ldrh	r2, [r7, #8]
 8002dfa:	88fb      	ldrh	r3, [r7, #6]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	3b01      	subs	r3, #1
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	82fb      	strh	r3, [r7, #22]
  if ((length <= 0) || (x < 0) || (x >= width_) || (y >= height_) ||
 8002e06:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	da01      	bge.n	8002e12 <_ZN7ILI934113DrawFastVLineEtttt+0x52>
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e000      	b.n	8002e14 <_ZN7ILI934113DrawFastVLineEtttt+0x54>
 8002e12:	2300      	movs	r3, #0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d123      	bne.n	8002e60 <_ZN7ILI934113DrawFastVLineEtttt+0xa0>
    return;
  if (y < 0) { // Clip top
    length += y;
    y = 0;
  }
  if (y2 >= height_) { // Clip bottom
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002e1e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	db0c      	blt.n	8002e40 <_ZN7ILI934113DrawFastVLineEtttt+0x80>
    y2 = height_ - 1;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	82fb      	strh	r3, [r7, #22]
    length = y2 - y + 1;
 8002e34:	8afa      	ldrh	r2, [r7, #22]
 8002e36:	893b      	ldrh	r3, [r7, #8]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	80fb      	strh	r3, [r7, #6]
  }

  SetWindow(x, y, x, y2);
 8002e40:	8afb      	ldrh	r3, [r7, #22]
 8002e42:	8978      	ldrh	r0, [r7, #10]
 8002e44:	893a      	ldrh	r2, [r7, #8]
 8002e46:	8979      	ldrh	r1, [r7, #10]
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f7ff fe1f 	bl	8002a90 <_ZN7ILI93419SetWindowEtttt>
  Flood(color, length);
 8002e52:	88fa      	ldrh	r2, [r7, #6]
 8002e54:	8c3b      	ldrh	r3, [r7, #32]
 8002e56:	4619      	mov	r1, r3
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f7ff fecb 	bl	8002bf4 <_ZN7ILI93415FloodEtm>
 8002e5e:	e000      	b.n	8002e62 <_ZN7ILI934113DrawFastVLineEtttt+0xa2>
    return;
 8002e60:	bf00      	nop
}
 8002e62:	3718      	adds	r7, #24
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <_ZN7ILI934111SetRotationEh>:

void ILI9341::SetRotation(uint8_t x) {
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af02      	add	r7, sp, #8
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	460b      	mov	r3, r1
 8002e72:	70fb      	strb	r3, [r7, #3]
  // enable chip select -> LOW
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_RESET);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002e7e:	2200      	movs	r2, #0
 8002e80:	4619      	mov	r1, r3
 8002e82:	f003 f8a3 	bl	8005fcc <HAL_GPIO_WritePin>
  rotation = x % 4; // can't be higher than 3
 8002e86:	78fb      	ldrb	r3, [r7, #3]
 8002e88:	f003 0303 	and.w	r3, r3, #3
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	771a      	strb	r2, [r3, #28]
  switch (rotation) {
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	7f1b      	ldrb	r3, [r3, #28]
 8002e96:	2b03      	cmp	r3, #3
 8002e98:	d832      	bhi.n	8002f00 <_ZN7ILI934111SetRotationEh+0x98>
 8002e9a:	a201      	add	r2, pc, #4	@ (adr r2, 8002ea0 <_ZN7ILI934111SetRotationEh+0x38>)
 8002e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea0:	08002eb1 	.word	0x08002eb1
 8002ea4:	08002ec5 	.word	0x08002ec5
 8002ea8:	08002ed9 	.word	0x08002ed9
 8002eac:	08002eed 	.word	0x08002eed
  case 0:
    x = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
 8002eb0:	2348      	movs	r3, #72	@ 0x48
 8002eb2:	70fb      	strb	r3, [r7, #3]
    width_ = ILI9341_TFTWIDTH;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	22f0      	movs	r2, #240	@ 0xf0
 8002eb8:	811a      	strh	r2, [r3, #8]
    height_ = ILI9341_TFTHEIGHT;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002ec0:	815a      	strh	r2, [r3, #10]
    break;
 8002ec2:	e01d      	b.n	8002f00 <_ZN7ILI934111SetRotationEh+0x98>
  case 1:
    x = (ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8002ec4:	2328      	movs	r3, #40	@ 0x28
 8002ec6:	70fb      	strb	r3, [r7, #3]
    width_ = ILI9341_TFTHEIGHT;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002ece:	811a      	strh	r2, [r3, #8]
    height_ = ILI9341_TFTWIDTH;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	22f0      	movs	r2, #240	@ 0xf0
 8002ed4:	815a      	strh	r2, [r3, #10]
    break;
 8002ed6:	e013      	b.n	8002f00 <_ZN7ILI934111SetRotationEh+0x98>
  case 2:
    x = (ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 8002ed8:	2388      	movs	r3, #136	@ 0x88
 8002eda:	70fb      	strb	r3, [r7, #3]
    width_ = ILI9341_TFTWIDTH;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	22f0      	movs	r2, #240	@ 0xf0
 8002ee0:	811a      	strh	r2, [r3, #8]
    height_ = ILI9341_TFTHEIGHT;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002ee8:	815a      	strh	r2, [r3, #10]
    break;
 8002eea:	e009      	b.n	8002f00 <_ZN7ILI934111SetRotationEh+0x98>
  case 3:
    x = (ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8002eec:	23e8      	movs	r3, #232	@ 0xe8
 8002eee:	70fb      	strb	r3, [r7, #3]
    width_ = ILI9341_TFTHEIGHT;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002ef6:	811a      	strh	r2, [r3, #8]
    height_ = ILI9341_TFTWIDTH;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	22f0      	movs	r2, #240	@ 0xf0
 8002efc:	815a      	strh	r2, [r3, #10]
    break;
 8002efe:	bf00      	nop
  }
  TransmitCmd(ILI9341_MADCTL); // MADCTL
 8002f00:	2136      	movs	r1, #54	@ 0x36
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7ff fd46 	bl	8002994 <_ZN7ILI934111TransmitCmdEh>
  Transmit8bitData(x);
 8002f08:	78fb      	ldrb	r3, [r7, #3]
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f7ff fd59 	bl	80029c4 <_ZN7ILI934116Transmit8bitDataEh>
  // For 9341, init default full-screen address window:
  SetWindow(0, 0, width_ - 1, height_ - 1); // CS_IDLE happens here
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	3b01      	subs	r3, #1
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	2200      	movs	r2, #0
 8002f30:	2100      	movs	r1, #0
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f7ff fdac 	bl	8002a90 <_ZN7ILI93419SetWindowEtttt>
}
 8002f38:	bf00      	nop
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <_ZN7ILI934111SetTextSizeEh>:

void ILI9341::SetTextSize(uint8_t size)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	70fb      	strb	r3, [r7, #3]
  text_size_ = size;
 8002f4c:	78fb      	ldrb	r3, [r7, #3]
 8002f4e:	b21a      	sxth	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	819a      	strh	r2, [r3, #12]
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <_ZN7ILI93418DrawCharEsshth>:

void ILI9341::DrawChar(int16_t x, int16_t y, unsigned char c,
    uint16_t color, uint8_t size)
{
 8002f60:	b590      	push	{r4, r7, lr}
 8002f62:	b089      	sub	sp, #36	@ 0x24
 8002f64:	af04      	add	r7, sp, #16
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	4608      	mov	r0, r1
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	4603      	mov	r3, r0
 8002f70:	817b      	strh	r3, [r7, #10]
 8002f72:	460b      	mov	r3, r1
 8002f74:	813b      	strh	r3, [r7, #8]
 8002f76:	4613      	mov	r3, r2
 8002f78:	71fb      	strb	r3, [r7, #7]
  DrawChar(x, y, c, color, textbgcolor, size, size);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8b1b      	ldrh	r3, [r3, #24]
 8002f7e:	79fc      	ldrb	r4, [r7, #7]
 8002f80:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 8002f84:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002f88:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002f8c:	9203      	str	r2, [sp, #12]
 8002f8e:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002f92:	9202      	str	r2, [sp, #8]
 8002f94:	9301      	str	r3, [sp, #4]
 8002f96:	8c3b      	ldrh	r3, [r7, #32]
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	4623      	mov	r3, r4
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f000 f804 	bl	8002fac <_ZN7ILI93418DrawCharEsshtthh>
}
 8002fa4:	bf00      	nop
 8002fa6:	3714      	adds	r7, #20
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd90      	pop	{r4, r7, pc}

08002fac <_ZN7ILI93418DrawCharEsshtthh>:

void ILI9341::DrawChar(int16_t x, int16_t y, unsigned char c,
    uint16_t color, uint16_t bg, uint8_t size_x,
    uint8_t size_y)
{
 8002fac:	b590      	push	{r4, r7, lr}
 8002fae:	b089      	sub	sp, #36	@ 0x24
 8002fb0:	af02      	add	r7, sp, #8
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	4608      	mov	r0, r1
 8002fb6:	4611      	mov	r1, r2
 8002fb8:	461a      	mov	r2, r3
 8002fba:	4603      	mov	r3, r0
 8002fbc:	817b      	strh	r3, [r7, #10]
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	813b      	strh	r3, [r7, #8]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	71fb      	strb	r3, [r7, #7]
  for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	75fb      	strb	r3, [r7, #23]
 8002fca:	e0a8      	b.n	800311e <_ZN7ILI93418DrawCharEsshtthh+0x172>
      uint8_t line = font[c * 5 + i];
 8002fcc:	79fa      	ldrb	r2, [r7, #7]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	441a      	add	r2, r3
 8002fd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002fd8:	4413      	add	r3, r2
 8002fda:	4a6e      	ldr	r2, [pc, #440]	@ (8003194 <_ZN7ILI93418DrawCharEsshtthh+0x1e8>)
 8002fdc:	5cd3      	ldrb	r3, [r2, r3]
 8002fde:	75bb      	strb	r3, [r7, #22]
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	757b      	strb	r3, [r7, #21]
 8002fe4:	e090      	b.n	8003108 <_ZN7ILI93418DrawCharEsshtthh+0x15c>
        if (line & 1) {
 8002fe6:	7dbb      	ldrb	r3, [r7, #22]
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d03f      	beq.n	8003070 <_ZN7ILI93418DrawCharEsshtthh+0xc4>
          if (size_x == 1 && size_y == 1)
 8002ff0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d114      	bne.n	8003022 <_ZN7ILI93418DrawCharEsshtthh+0x76>
 8002ff8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d110      	bne.n	8003022 <_ZN7ILI93418DrawCharEsshtthh+0x76>
            DrawPixel(x + i, y + j, color);
 8003000:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003004:	b29a      	uxth	r2, r3
 8003006:	897b      	ldrh	r3, [r7, #10]
 8003008:	4413      	add	r3, r2
 800300a:	b299      	uxth	r1, r3
 800300c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8003010:	b29a      	uxth	r2, r3
 8003012:	893b      	ldrh	r3, [r7, #8]
 8003014:	4413      	add	r3, r2
 8003016:	b29a      	uxth	r2, r3
 8003018:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f7ff fd8a 	bl	8002b34 <_ZN7ILI93419DrawPixelEttt>
 8003020:	e069      	b.n	80030f6 <_ZN7ILI93418DrawCharEsshtthh+0x14a>
          else
            FillRect(x + i * size_x, y + j * size_y, size_x, size_y,
 8003022:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003026:	b29a      	uxth	r2, r3
 8003028:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800302c:	b29b      	uxth	r3, r3
 800302e:	fb12 f303 	smulbb	r3, r2, r3
 8003032:	b29a      	uxth	r2, r3
 8003034:	897b      	ldrh	r3, [r7, #10]
 8003036:	4413      	add	r3, r2
 8003038:	b299      	uxth	r1, r3
 800303a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800303e:	b29a      	uxth	r2, r3
 8003040:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003044:	b29b      	uxth	r3, r3
 8003046:	fb12 f303 	smulbb	r3, r2, r3
 800304a:	b29a      	uxth	r2, r3
 800304c:	893b      	ldrh	r3, [r7, #8]
 800304e:	4413      	add	r3, r2
 8003050:	b298      	uxth	r0, r3
 8003052:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003056:	b29c      	uxth	r4, r3
 8003058:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800305c:	b29b      	uxth	r3, r3
 800305e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8003060:	9201      	str	r2, [sp, #4]
 8003062:	9300      	str	r3, [sp, #0]
 8003064:	4623      	mov	r3, r4
 8003066:	4602      	mov	r2, r0
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f000 f8fa 	bl	8003262 <_ZN7ILI93418FillRectEttttt>
 800306e:	e042      	b.n	80030f6 <_ZN7ILI93418DrawCharEsshtthh+0x14a>
                          color);
        } else if (bg != color) {
 8003070:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8003072:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003074:	429a      	cmp	r2, r3
 8003076:	d03e      	beq.n	80030f6 <_ZN7ILI93418DrawCharEsshtthh+0x14a>
          if (size_x == 1 && size_y == 1)
 8003078:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800307c:	2b01      	cmp	r3, #1
 800307e:	d114      	bne.n	80030aa <_ZN7ILI93418DrawCharEsshtthh+0xfe>
 8003080:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003084:	2b01      	cmp	r3, #1
 8003086:	d110      	bne.n	80030aa <_ZN7ILI93418DrawCharEsshtthh+0xfe>
            DrawPixel(x + i, y + j, bg);
 8003088:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800308c:	b29a      	uxth	r2, r3
 800308e:	897b      	ldrh	r3, [r7, #10]
 8003090:	4413      	add	r3, r2
 8003092:	b299      	uxth	r1, r3
 8003094:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8003098:	b29a      	uxth	r2, r3
 800309a:	893b      	ldrh	r3, [r7, #8]
 800309c:	4413      	add	r3, r2
 800309e:	b29a      	uxth	r2, r3
 80030a0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f7ff fd46 	bl	8002b34 <_ZN7ILI93419DrawPixelEttt>
 80030a8:	e025      	b.n	80030f6 <_ZN7ILI93418DrawCharEsshtthh+0x14a>
          else
            FillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 80030aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	fb12 f303 	smulbb	r3, r2, r3
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	897b      	ldrh	r3, [r7, #10]
 80030be:	4413      	add	r3, r2
 80030c0:	b299      	uxth	r1, r3
 80030c2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	fb12 f303 	smulbb	r3, r2, r3
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	893b      	ldrh	r3, [r7, #8]
 80030d6:	4413      	add	r3, r2
 80030d8:	b298      	uxth	r0, r3
 80030da:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80030de:	b29c      	uxth	r4, r3
 80030e0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80030e8:	9201      	str	r2, [sp, #4]
 80030ea:	9300      	str	r3, [sp, #0]
 80030ec:	4623      	mov	r3, r4
 80030ee:	4602      	mov	r2, r0
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f000 f8b6 	bl	8003262 <_ZN7ILI93418FillRectEttttt>
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 80030f6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	3301      	adds	r3, #1
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	757b      	strb	r3, [r7, #21]
 8003102:	7dbb      	ldrb	r3, [r7, #22]
 8003104:	085b      	lsrs	r3, r3, #1
 8003106:	75bb      	strb	r3, [r7, #22]
 8003108:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800310c:	2b07      	cmp	r3, #7
 800310e:	f77f af6a 	ble.w	8002fe6 <_ZN7ILI93418DrawCharEsshtthh+0x3a>
  for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 8003112:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003116:	b2db      	uxtb	r3, r3
 8003118:	3301      	adds	r3, #1
 800311a:	b2db      	uxtb	r3, r3
 800311c:	75fb      	strb	r3, [r7, #23]
 800311e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003122:	2b04      	cmp	r3, #4
 8003124:	f77f af52 	ble.w	8002fcc <_ZN7ILI93418DrawCharEsshtthh+0x20>
        }
      }
    }
    if (bg != color) { // If opaque, draw vertical line for last column
 8003128:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800312a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800312c:	429a      	cmp	r2, r3
 800312e:	d02d      	beq.n	800318c <_ZN7ILI93418DrawCharEsshtthh+0x1e0>
      if (size_x == 1 && size_y == 1)
 8003130:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003134:	2b01      	cmp	r3, #1
 8003136:	d10e      	bne.n	8003156 <_ZN7ILI93418DrawCharEsshtthh+0x1aa>
 8003138:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800313c:	2b01      	cmp	r3, #1
 800313e:	d10a      	bne.n	8003156 <_ZN7ILI93418DrawCharEsshtthh+0x1aa>
        DrawFastVLine(x + 5, y, 8, bg);
 8003140:	897b      	ldrh	r3, [r7, #10]
 8003142:	3305      	adds	r3, #5
 8003144:	b299      	uxth	r1, r3
 8003146:	893a      	ldrh	r2, [r7, #8]
 8003148:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	2308      	movs	r3, #8
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f7ff fe36 	bl	8002dc0 <_ZN7ILI934113DrawFastVLineEtttt>
      else
        FillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
    }
}
 8003154:	e01a      	b.n	800318c <_ZN7ILI93418DrawCharEsshtthh+0x1e0>
        FillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 8003156:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800315a:	b29b      	uxth	r3, r3
 800315c:	461a      	mov	r2, r3
 800315e:	0092      	lsls	r2, r2, #2
 8003160:	4413      	add	r3, r2
 8003162:	b29a      	uxth	r2, r3
 8003164:	897b      	ldrh	r3, [r7, #10]
 8003166:	4413      	add	r3, r2
 8003168:	b299      	uxth	r1, r3
 800316a:	8938      	ldrh	r0, [r7, #8]
 800316c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003170:	b29c      	uxth	r4, r3
 8003172:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003176:	b29b      	uxth	r3, r3
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	b29b      	uxth	r3, r3
 800317c:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800317e:	9201      	str	r2, [sp, #4]
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	4623      	mov	r3, r4
 8003184:	4602      	mov	r2, r0
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f000 f86b 	bl	8003262 <_ZN7ILI93418FillRectEttttt>
}
 800318c:	bf00      	nop
 800318e:	371c      	adds	r7, #28
 8003190:	46bd      	mov	sp, r7
 8003192:	bd90      	pop	{r4, r7, pc}
 8003194:	0800db3c 	.word	0x0800db3c

08003198 <_ZN7ILI93418DrawTextEttPKct>:

void ILI9341::DrawText(uint16_t x, uint16_t y, const char *str, uint16_t color)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b088      	sub	sp, #32
 800319c:	af02      	add	r7, sp, #8
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	607b      	str	r3, [r7, #4]
 80031a2:	460b      	mov	r3, r1
 80031a4:	817b      	strh	r3, [r7, #10]
 80031a6:	4613      	mov	r3, r2
 80031a8:	813b      	strh	r3, [r7, #8]
  // NOTE: Characters are 6x8 (wxh)
    uint8_t TempChar;

    /* Set area back to span the entire LCD */
    SetWindow(0, 0, width_ - 1, height_ - 1);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	3b01      	subs	r3, #1
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80031bc:	b29b      	uxth	r3, r3
 80031be:	3b01      	subs	r3, #1
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	9300      	str	r3, [sp, #0]
 80031c4:	4613      	mov	r3, r2
 80031c6:	2200      	movs	r2, #0
 80031c8:	2100      	movs	r1, #0
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f7ff fc60 	bl	8002a90 <_ZN7ILI93419SetWindowEtttt>
    do
    {
        TempChar = *str++;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	1c5a      	adds	r2, r3, #1
 80031d4:	607a      	str	r2, [r7, #4]
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	75fb      	strb	r3, [r7, #23]
        DrawChar( x, y, TempChar, color, text_size_);
 80031da:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80031de:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	7df8      	ldrb	r0, [r7, #23]
 80031ec:	9301      	str	r3, [sp, #4]
 80031ee:	8c3b      	ldrh	r3, [r7, #32]
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	4603      	mov	r3, r0
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f7ff feb3 	bl	8002f60 <_ZN7ILI93418DrawCharEsshth>
        if( x < width_ - 1 - 8)
 80031fa:	897a      	ldrh	r2, [r7, #10]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003202:	3b09      	subs	r3, #9
 8003204:	429a      	cmp	r2, r3
 8003206:	da0c      	bge.n	8003222 <_ZN7ILI93418DrawTextEttPKct+0x8a>
        {
            x += (6 * text_size_);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800320e:	b29b      	uxth	r3, r3
 8003210:	461a      	mov	r2, r3
 8003212:	0052      	lsls	r2, r2, #1
 8003214:	4413      	add	r3, r2
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	b29a      	uxth	r2, r3
 800321a:	897b      	ldrh	r3, [r7, #10]
 800321c:	4413      	add	r3, r2
 800321e:	817b      	strh	r3, [r7, #10]
 8003220:	e016      	b.n	8003250 <_ZN7ILI93418DrawTextEttPKct+0xb8>
        }
        else if ( y < height_ - 1 - 16)
 8003222:	893a      	ldrh	r2, [r7, #8]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800322a:	3b11      	subs	r3, #17
 800322c:	429a      	cmp	r2, r3
 800322e:	da0b      	bge.n	8003248 <_ZN7ILI93418DrawTextEttPKct+0xb0>
        {
            x = 0;
 8003230:	2300      	movs	r3, #0
 8003232:	817b      	strh	r3, [r7, #10]
            y += (8 * text_size_);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800323a:	b29b      	uxth	r3, r3
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	b29a      	uxth	r2, r3
 8003240:	893b      	ldrh	r3, [r7, #8]
 8003242:	4413      	add	r3, r2
 8003244:	813b      	strh	r3, [r7, #8]
 8003246:	e003      	b.n	8003250 <_ZN7ILI93418DrawTextEttPKct+0xb8>
        }
        else
        {
            x = 0;
 8003248:	2300      	movs	r3, #0
 800324a:	817b      	strh	r3, [r7, #10]
            y = 0;
 800324c:	2300      	movs	r3, #0
 800324e:	813b      	strh	r3, [r7, #8]
        }
    }
    while ( *str != 0 );
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1bb      	bne.n	80031d0 <_ZN7ILI93418DrawTextEttPKct+0x38>
}
 8003258:	bf00      	nop
 800325a:	bf00      	nop
 800325c:	3718      	adds	r7, #24
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <_ZN7ILI93418FillRectEttttt>:
  DrawFastVLine(x, y, h, color);
  DrawFastVLine(x + w - 1, y, h, color);
}

void ILI9341::FillRect(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h, uint16_t color)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b088      	sub	sp, #32
 8003266:	af02      	add	r7, sp, #8
 8003268:	60f8      	str	r0, [r7, #12]
 800326a:	4608      	mov	r0, r1
 800326c:	4611      	mov	r1, r2
 800326e:	461a      	mov	r2, r3
 8003270:	4603      	mov	r3, r0
 8003272:	817b      	strh	r3, [r7, #10]
 8003274:	460b      	mov	r3, r1
 8003276:	813b      	strh	r3, [r7, #8]
 8003278:	4613      	mov	r3, r2
 800327a:	80fb      	strh	r3, [r7, #6]
  int16_t x2, y2;

  // Initial off-screen clipping
  if ((w <= 0) || (h <= 0) || (x1 >= width_) || (y1 >= height_) ||
      ((x2 = x1 + w - 1) < 0) || ((y2 = y1 + h - 1) < 0))
 800327c:	88fb      	ldrh	r3, [r7, #6]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d024      	beq.n	80032cc <_ZN7ILI93418FillRectEttttt+0x6a>
  if ((w <= 0) || (h <= 0) || (x1 >= width_) || (y1 >= height_) ||
 8003282:	8c3b      	ldrh	r3, [r7, #32]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d021      	beq.n	80032cc <_ZN7ILI93418FillRectEttttt+0x6a>
 8003288:	897b      	ldrh	r3, [r7, #10]
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8003290:	4293      	cmp	r3, r2
 8003292:	da1b      	bge.n	80032cc <_ZN7ILI93418FillRectEttttt+0x6a>
 8003294:	893b      	ldrh	r3, [r7, #8]
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 800329c:	4293      	cmp	r3, r2
 800329e:	da15      	bge.n	80032cc <_ZN7ILI93418FillRectEttttt+0x6a>
      ((x2 = x1 + w - 1) < 0) || ((y2 = y1 + h - 1) < 0))
 80032a0:	897a      	ldrh	r2, [r7, #10]
 80032a2:	88fb      	ldrh	r3, [r7, #6]
 80032a4:	4413      	add	r3, r2
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	82fb      	strh	r3, [r7, #22]
  if ((w <= 0) || (h <= 0) || (x1 >= width_) || (y1 >= height_) ||
 80032ae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	db0a      	blt.n	80032cc <_ZN7ILI93418FillRectEttttt+0x6a>
      ((x2 = x1 + w - 1) < 0) || ((y2 = y1 + h - 1) < 0))
 80032b6:	893a      	ldrh	r2, [r7, #8]
 80032b8:	8c3b      	ldrh	r3, [r7, #32]
 80032ba:	4413      	add	r3, r2
 80032bc:	b29b      	uxth	r3, r3
 80032be:	3b01      	subs	r3, #1
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	82bb      	strh	r3, [r7, #20]
 80032c4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	da01      	bge.n	80032d0 <_ZN7ILI93418FillRectEttttt+0x6e>
 80032cc:	2301      	movs	r3, #1
 80032ce:	e000      	b.n	80032d2 <_ZN7ILI93418FillRectEttttt+0x70>
 80032d0:	2300      	movs	r3, #0
  if ((w <= 0) || (h <= 0) || (x1 >= width_) || (y1 >= height_) ||
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d13a      	bne.n	800334c <_ZN7ILI93418FillRectEttttt+0xea>
  }
  if (y1 < 0) { // Clip top
    h += y1;
    y1 = 0;
  }
  if (x2 >= width_) { // Clip right
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80032dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	db0c      	blt.n	80032fe <_ZN7ILI93418FillRectEttttt+0x9c>
    x2 = width_ - 1;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	3b01      	subs	r3, #1
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	82fb      	strh	r3, [r7, #22]
    w = x2 - x1 + 1;
 80032f2:	8afa      	ldrh	r2, [r7, #22]
 80032f4:	897b      	ldrh	r3, [r7, #10]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	3301      	adds	r3, #1
 80032fc:	80fb      	strh	r3, [r7, #6]
  }
  if (y2 >= height_) { // Clip bottom
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003304:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003308:	429a      	cmp	r2, r3
 800330a:	db0c      	blt.n	8003326 <_ZN7ILI93418FillRectEttttt+0xc4>
    y2 = height_ - 1;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003312:	b29b      	uxth	r3, r3
 8003314:	3b01      	subs	r3, #1
 8003316:	b29b      	uxth	r3, r3
 8003318:	82bb      	strh	r3, [r7, #20]
    h = y2 - y1 + 1;
 800331a:	8aba      	ldrh	r2, [r7, #20]
 800331c:	893b      	ldrh	r3, [r7, #8]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	b29b      	uxth	r3, r3
 8003322:	3301      	adds	r3, #1
 8003324:	843b      	strh	r3, [r7, #32]
  }

  SetWindow(x1, y1, x2, y2);
 8003326:	8af8      	ldrh	r0, [r7, #22]
 8003328:	8abb      	ldrh	r3, [r7, #20]
 800332a:	893a      	ldrh	r2, [r7, #8]
 800332c:	8979      	ldrh	r1, [r7, #10]
 800332e:	9300      	str	r3, [sp, #0]
 8003330:	4603      	mov	r3, r0
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f7ff fbac 	bl	8002a90 <_ZN7ILI93419SetWindowEtttt>
  Flood(color, (uint32_t)w * (uint32_t)h);
 8003338:	88fb      	ldrh	r3, [r7, #6]
 800333a:	8c3a      	ldrh	r2, [r7, #32]
 800333c:	fb03 f202 	mul.w	r2, r3, r2
 8003340:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003342:	4619      	mov	r1, r3
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f7ff fc55 	bl	8002bf4 <_ZN7ILI93415FloodEtm>
 800334a:	e000      	b.n	800334e <_ZN7ILI93418FillRectEttttt+0xec>
    return;
 800334c:	bf00      	nop
}
 800334e:	3718      	adds	r7, #24
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <_ZN7ILI934110FillCircleEtttt>:
void ILI9341::FillCircle(uint16_t x0, uint16_t y0, uint16_t r, uint16_t color) {
 8003354:	b580      	push	{r7, lr}
 8003356:	b088      	sub	sp, #32
 8003358:	af02      	add	r7, sp, #8
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	4608      	mov	r0, r1
 800335e:	4611      	mov	r1, r2
 8003360:	461a      	mov	r2, r3
 8003362:	4603      	mov	r3, r0
 8003364:	817b      	strh	r3, [r7, #10]
 8003366:	460b      	mov	r3, r1
 8003368:	813b      	strh	r3, [r7, #8]
 800336a:	4613      	mov	r3, r2
 800336c:	80fb      	strh	r3, [r7, #6]
    int16_t x = 0, y = r;
 800336e:	2300      	movs	r3, #0
 8003370:	82fb      	strh	r3, [r7, #22]
 8003372:	88fb      	ldrh	r3, [r7, #6]
 8003374:	82bb      	strh	r3, [r7, #20]
    int16_t d = 1 - r;
 8003376:	88fb      	ldrh	r3, [r7, #6]
 8003378:	f1c3 0301 	rsb	r3, r3, #1
 800337c:	b29b      	uxth	r3, r3
 800337e:	827b      	strh	r3, [r7, #18]

    // Draw initial center line
    DrawFastHLine(x0 - r, y0, 2 * r + 1, color);
 8003380:	897a      	ldrh	r2, [r7, #10]
 8003382:	88fb      	ldrh	r3, [r7, #6]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	b299      	uxth	r1, r3
 8003388:	88fb      	ldrh	r3, [r7, #6]
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	b29b      	uxth	r3, r3
 800338e:	3301      	adds	r3, #1
 8003390:	b298      	uxth	r0, r3
 8003392:	893a      	ldrh	r2, [r7, #8]
 8003394:	8c3b      	ldrh	r3, [r7, #32]
 8003396:	9300      	str	r3, [sp, #0]
 8003398:	4603      	mov	r3, r0
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f7ff fcbc 	bl	8002d18 <_ZN7ILI934113DrawFastHLineEtttt>

    while (y >= x) {
 80033a0:	e073      	b.n	800348a <_ZN7ILI934110FillCircleEtttt+0x136>
        // Draw horizontal spans
        DrawFastHLine(x0 - x, y0 + y, 2 * x + 1, color);
 80033a2:	8afb      	ldrh	r3, [r7, #22]
 80033a4:	897a      	ldrh	r2, [r7, #10]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	b299      	uxth	r1, r3
 80033aa:	8aba      	ldrh	r2, [r7, #20]
 80033ac:	893b      	ldrh	r3, [r7, #8]
 80033ae:	4413      	add	r3, r2
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	8afb      	ldrh	r3, [r7, #22]
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	3301      	adds	r3, #1
 80033ba:	b298      	uxth	r0, r3
 80033bc:	8c3b      	ldrh	r3, [r7, #32]
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	4603      	mov	r3, r0
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f7ff fca8 	bl	8002d18 <_ZN7ILI934113DrawFastHLineEtttt>
        DrawFastHLine(x0 - x, y0 - y, 2 * x + 1, color);
 80033c8:	8afb      	ldrh	r3, [r7, #22]
 80033ca:	897a      	ldrh	r2, [r7, #10]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	b299      	uxth	r1, r3
 80033d0:	8abb      	ldrh	r3, [r7, #20]
 80033d2:	893a      	ldrh	r2, [r7, #8]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	8afb      	ldrh	r3, [r7, #22]
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	b29b      	uxth	r3, r3
 80033de:	3301      	adds	r3, #1
 80033e0:	b298      	uxth	r0, r3
 80033e2:	8c3b      	ldrh	r3, [r7, #32]
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	4603      	mov	r3, r0
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f7ff fc95 	bl	8002d18 <_ZN7ILI934113DrawFastHLineEtttt>
        DrawFastHLine(x0 - y, y0 + x, 2 * y + 1, color);
 80033ee:	8abb      	ldrh	r3, [r7, #20]
 80033f0:	897a      	ldrh	r2, [r7, #10]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	b299      	uxth	r1, r3
 80033f6:	8afa      	ldrh	r2, [r7, #22]
 80033f8:	893b      	ldrh	r3, [r7, #8]
 80033fa:	4413      	add	r3, r2
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	8abb      	ldrh	r3, [r7, #20]
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	b29b      	uxth	r3, r3
 8003404:	3301      	adds	r3, #1
 8003406:	b298      	uxth	r0, r3
 8003408:	8c3b      	ldrh	r3, [r7, #32]
 800340a:	9300      	str	r3, [sp, #0]
 800340c:	4603      	mov	r3, r0
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f7ff fc82 	bl	8002d18 <_ZN7ILI934113DrawFastHLineEtttt>
        DrawFastHLine(x0 - y, y0 - x, 2 * y + 1, color);
 8003414:	8abb      	ldrh	r3, [r7, #20]
 8003416:	897a      	ldrh	r2, [r7, #10]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	b299      	uxth	r1, r3
 800341c:	8afb      	ldrh	r3, [r7, #22]
 800341e:	893a      	ldrh	r2, [r7, #8]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	b29a      	uxth	r2, r3
 8003424:	8abb      	ldrh	r3, [r7, #20]
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	b29b      	uxth	r3, r3
 800342a:	3301      	adds	r3, #1
 800342c:	b298      	uxth	r0, r3
 800342e:	8c3b      	ldrh	r3, [r7, #32]
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	4603      	mov	r3, r0
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f7ff fc6f 	bl	8002d18 <_ZN7ILI934113DrawFastHLineEtttt>

        x++;
 800343a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800343e:	b29b      	uxth	r3, r3
 8003440:	3301      	adds	r3, #1
 8003442:	b29b      	uxth	r3, r3
 8003444:	82fb      	strh	r3, [r7, #22]
        if (d < 0) {
 8003446:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800344a:	2b00      	cmp	r3, #0
 800344c:	da09      	bge.n	8003462 <_ZN7ILI934110FillCircleEtttt+0x10e>
            d += 2 * x + 1;
 800344e:	8afb      	ldrh	r3, [r7, #22]
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	b29a      	uxth	r2, r3
 8003454:	8a7b      	ldrh	r3, [r7, #18]
 8003456:	4413      	add	r3, r2
 8003458:	b29b      	uxth	r3, r3
 800345a:	3301      	adds	r3, #1
 800345c:	b29b      	uxth	r3, r3
 800345e:	827b      	strh	r3, [r7, #18]
 8003460:	e013      	b.n	800348a <_ZN7ILI934110FillCircleEtttt+0x136>
        } else {
            y--;
 8003462:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003466:	b29b      	uxth	r3, r3
 8003468:	3b01      	subs	r3, #1
 800346a:	b29b      	uxth	r3, r3
 800346c:	82bb      	strh	r3, [r7, #20]
            d += 2 * (x - y) + 1;
 800346e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003472:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	b29b      	uxth	r3, r3
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	b29a      	uxth	r2, r3
 800347e:	8a7b      	ldrh	r3, [r7, #18]
 8003480:	4413      	add	r3, r2
 8003482:	b29b      	uxth	r3, r3
 8003484:	3301      	adds	r3, #1
 8003486:	b29b      	uxth	r3, r3
 8003488:	827b      	strh	r3, [r7, #18]
    while (y >= x) {
 800348a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800348e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003492:	429a      	cmp	r2, r3
 8003494:	da85      	bge.n	80033a2 <_ZN7ILI934110FillCircleEtttt+0x4e>
        }
    }
}
 8003496:	bf00      	nop
 8003498:	bf00      	nop
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <TCAL9538RSVR_INIT>:
*/



uint8_t TCAL9538RSVR_INIT(TCAL9538RSVR *dev, I2C_HandleTypeDef *i2cHandle, uint8_t hardwareAddress, uint8_t direction_bitMask, uint8_t interrupt_bitMask)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	4611      	mov	r1, r2
 80034ac:	461a      	mov	r2, r3
 80034ae:	460b      	mov	r3, r1
 80034b0:	71fb      	strb	r3, [r7, #7]
 80034b2:	4613      	mov	r3, r2
 80034b4:	71bb      	strb	r3, [r7, #6]
	uint8_t errNum = 0;
 80034b6:	2300      	movs	r3, #0
 80034b8:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef status;
	dev->input = direction_bitMask;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	79ba      	ldrb	r2, [r7, #6]
 80034be:	719a      	strb	r2, [r3, #6]


    dev->i2cHandle = i2cHandle;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	601a      	str	r2, [r3, #0]
    dev->portValues = 0;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	715a      	strb	r2, [r3, #5]
    // hardware address should be from 0-3
    // (A0 = GND, A1 = GND) == 0
    hardwareAddress &= 0b00000011;
 80034cc:	79fb      	ldrb	r3, [r7, #7]
 80034ce:	f003 0303 	and.w	r3, r3, #3
 80034d2:	71fb      	strb	r3, [r7, #7]
    dev->deviceAddress = TCAL9538RSVR_ADDR | (hardwareAddress<<1);
 80034d4:	79fb      	ldrb	r3, [r7, #7]
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	b25b      	sxtb	r3, r3
 80034da:	f063 031f 	orn	r3, r3, #31
 80034de:	b25b      	sxtb	r3, r3
 80034e0:	b2da      	uxtb	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	711a      	strb	r2, [r3, #4]
    uint8_t hold_bitMask = direction_bitMask;
 80034e6:	79bb      	ldrb	r3, [r7, #6]
 80034e8:	757b      	strb	r3, [r7, #21]

    status = TCAL9538RSVR_SetDirection(dev, &hold_bitMask);
 80034ea:	f107 0315 	add.w	r3, r7, #21
 80034ee:	4619      	mov	r1, r3
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f000 f83b 	bl	800356c <TCAL9538RSVR_SetDirection>
 80034f6:	4603      	mov	r3, r0
 80034f8:	75bb      	strb	r3, [r7, #22]
    errNum += (status != HAL_OK);
 80034fa:	7dbb      	ldrb	r3, [r7, #22]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	bf14      	ite	ne
 8003500:	2301      	movne	r3, #1
 8003502:	2300      	moveq	r3, #0
 8003504:	b2db      	uxtb	r3, r3
 8003506:	461a      	mov	r2, r3
 8003508:	7dfb      	ldrb	r3, [r7, #23]
 800350a:	4413      	add	r3, r2
 800350c:	75fb      	strb	r3, [r7, #23]

    status = TCAL9538RSVR_SetInterrupts(dev, interrupt_bitMask);
 800350e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003512:	4619      	mov	r1, r3
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f000 f838 	bl	800358a <TCAL9538RSVR_SetInterrupts>
 800351a:	4603      	mov	r3, r0
 800351c:	75bb      	strb	r3, [r7, #22]
    errNum += (status != HAL_OK);
 800351e:	7dbb      	ldrb	r3, [r7, #22]
 8003520:	2b00      	cmp	r3, #0
 8003522:	bf14      	ite	ne
 8003524:	2301      	movne	r3, #1
 8003526:	2300      	moveq	r3, #0
 8003528:	b2db      	uxtb	r3, r3
 800352a:	461a      	mov	r2, r3
 800352c:	7dfb      	ldrb	r3, [r7, #23]
 800352e:	4413      	add	r3, r2
 8003530:	75fb      	strb	r3, [r7, #23]

    // if all pins are inputs, invert all pins
    if (direction_bitMask == 0xFF) {
 8003532:	79bb      	ldrb	r3, [r7, #6]
 8003534:	2bff      	cmp	r3, #255	@ 0xff
 8003536:	d114      	bne.n	8003562 <TCAL9538RSVR_INIT+0xc2>
        uint8_t full = 0xFF;
 8003538:	23ff      	movs	r3, #255	@ 0xff
 800353a:	753b      	strb	r3, [r7, #20]
        status = TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_GPIO_INVERSION, &full);
 800353c:	f107 0314 	add.w	r3, r7, #20
 8003540:	461a      	mov	r2, r3
 8003542:	2102      	movs	r1, #2
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 f894 	bl	8003672 <TCAL9538RSVR_WriteRegister>
 800354a:	4603      	mov	r3, r0
 800354c:	75bb      	strb	r3, [r7, #22]
        errNum += (status != HAL_OK);
 800354e:	7dbb      	ldrb	r3, [r7, #22]
 8003550:	2b00      	cmp	r3, #0
 8003552:	bf14      	ite	ne
 8003554:	2301      	movne	r3, #1
 8003556:	2300      	moveq	r3, #0
 8003558:	b2db      	uxtb	r3, r3
 800355a:	461a      	mov	r2, r3
 800355c:	7dfb      	ldrb	r3, [r7, #23]
 800355e:	4413      	add	r3, r2
 8003560:	75fb      	strb	r3, [r7, #23]
    }
    

    return (errNum);
 8003562:	7dfb      	ldrb	r3, [r7, #23]
}
 8003564:	4618      	mov	r0, r3
 8003566:	3718      	adds	r7, #24
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <TCAL9538RSVR_SetDirection>:
 * @param uint8_t : bitMask -> '1' is input
 * 					default is input
 * @retval HAL_StatusTypeDef : HAL_Status
 */
HAL_StatusTypeDef TCAL9538RSVR_SetDirection(TCAL9538RSVR* dev, uint8_t* bitMask)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_DIR_CONFIG, bitMask);
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	2103      	movs	r1, #3
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f879 	bl	8003672 <TCAL9538RSVR_WriteRegister>
 8003580:	4603      	mov	r3, r0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <TCAL9538RSVR_SetInterrupts>:
 * @brief Sets interrupt register
 * @param uint8_t : bitMask -> '0' will enable interrupts for that pin
 * @retval HAL_StatusTypeDef : HAL_Status
 */
HAL_StatusTypeDef TCAL9538RSVR_SetInterrupts(TCAL9538RSVR* dev, uint8_t bitMask)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b082      	sub	sp, #8
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
 8003592:	460b      	mov	r3, r1
 8003594:	70fb      	strb	r3, [r7, #3]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_INT_CONFIG, &bitMask);
 8003596:	1cfb      	adds	r3, r7, #3
 8003598:	461a      	mov	r2, r3
 800359a:	2145      	movs	r1, #69	@ 0x45
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 f868 	bl	8003672 <TCAL9538RSVR_WriteRegister>
 80035a2:	4603      	mov	r3, r0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3708      	adds	r7, #8
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <TCAL9538RSVR_HandleInterrupt>:
 * @brief Handles interrupt and returns pin# that triggered
 * 			stores triggered pin in dev->triggeredInterrupt
 * @retval uint8_t : errNum
 */
HAL_StatusTypeDef TCAL9538RSVR_HandleInterrupt(TCAL9538RSVR* dev)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
    uint8_t errNum = 0;
 80035b4:	2300      	movs	r3, #0
 80035b6:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status;
    uint8_t triggeredInterrupts = 0;
 80035b8:	2300      	movs	r3, #0
 80035ba:	737b      	strb	r3, [r7, #13]


    // read interrupt status register, puts a bit mask of the pin that triggered the interrupt in intPinBitMask
    status = TCAL9538RSVR_ReadRegister(dev, TCAL9538RSVR_INT_STATUS, &triggeredInterrupts);
 80035bc:	f107 030d 	add.w	r3, r7, #13
 80035c0:	461a      	mov	r2, r3
 80035c2:	2146      	movs	r1, #70	@ 0x46
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 f837 	bl	8003638 <TCAL9538RSVR_ReadRegister>
 80035ca:	4603      	mov	r3, r0
 80035cc:	73bb      	strb	r3, [r7, #14]
    errNum += (status != HAL_OK);
 80035ce:	7bbb      	ldrb	r3, [r7, #14]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	bf14      	ite	ne
 80035d4:	2301      	movne	r3, #1
 80035d6:	2300      	moveq	r3, #0
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	461a      	mov	r2, r3
 80035dc:	7bfb      	ldrb	r3, [r7, #15]
 80035de:	4413      	add	r3, r2
 80035e0:	73fb      	strb	r3, [r7, #15]

    // Read updated input values
    status = TCAL9538RSVR_ReadInput(dev, &dev->portValues);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	3305      	adds	r3, #5
 80035e6:	4619      	mov	r1, r3
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 f807 	bl	80035fc <TCAL9538RSVR_ReadInput>
 80035ee:	4603      	mov	r3, r0
 80035f0:	73bb      	strb	r3, [r7, #14]


    return (errNum);
 80035f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <TCAL9538RSVR_ReadInput>:




HAL_StatusTypeDef TCAL9538RSVR_ReadInput(TCAL9538RSVR* dev, uint8_t *data)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_ReadRegister(dev, TCAL9538RSVR_GPIO_INPUT, data);
 8003606:	683a      	ldr	r2, [r7, #0]
 8003608:	2100      	movs	r1, #0
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f814 	bl	8003638 <TCAL9538RSVR_ReadRegister>
 8003610:	4603      	mov	r3, r0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <TCAL9538RSVR_SetOutput>:
HAL_StatusTypeDef TCAL9538RSVR_SetOutput(TCAL9538RSVR* dev, uint8_t *data)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b082      	sub	sp, #8
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
 8003622:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_GPIO_OUTPUT, data);
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	2101      	movs	r1, #1
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 f822 	bl	8003672 <TCAL9538RSVR_WriteRegister>
 800362e:	4603      	mov	r3, r0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3708      	adds	r7, #8
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <TCAL9538RSVR_ReadRegister>:

//low level functions
HAL_StatusTypeDef TCAL9538RSVR_ReadRegister(TCAL9538RSVR *dev, uint8_t reg, uint8_t *data)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b088      	sub	sp, #32
 800363c:	af04      	add	r7, sp, #16
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	460b      	mov	r3, r1
 8003642:	607a      	str	r2, [r7, #4]
 8003644:	72fb      	strb	r3, [r7, #11]
    return(HAL_I2C_Mem_Read(dev->i2cHandle, dev->deviceAddress, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY));
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6818      	ldr	r0, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	791b      	ldrb	r3, [r3, #4]
 800364e:	4619      	mov	r1, r3
 8003650:	7afb      	ldrb	r3, [r7, #11]
 8003652:	b29a      	uxth	r2, r3
 8003654:	f04f 33ff 	mov.w	r3, #4294967295
 8003658:	9302      	str	r3, [sp, #8]
 800365a:	2301      	movs	r3, #1
 800365c:	9301      	str	r3, [sp, #4]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	9300      	str	r3, [sp, #0]
 8003662:	2301      	movs	r3, #1
 8003664:	f002 feac 	bl	80063c0 <HAL_I2C_Mem_Read>
 8003668:	4603      	mov	r3, r0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <TCAL9538RSVR_WriteRegister>:
HAL_StatusTypeDef TCAL9538RSVR_WriteRegister(TCAL9538RSVR *dev, uint8_t reg, uint8_t *data)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b088      	sub	sp, #32
 8003676:	af04      	add	r7, sp, #16
 8003678:	60f8      	str	r0, [r7, #12]
 800367a:	460b      	mov	r3, r1
 800367c:	607a      	str	r2, [r7, #4]
 800367e:	72fb      	strb	r3, [r7, #11]
    return(HAL_I2C_Mem_Write(dev->i2cHandle, dev->deviceAddress, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY));
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6818      	ldr	r0, [r3, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	791b      	ldrb	r3, [r3, #4]
 8003688:	4619      	mov	r1, r3
 800368a:	7afb      	ldrb	r3, [r7, #11]
 800368c:	b29a      	uxth	r2, r3
 800368e:	f04f 33ff 	mov.w	r3, #4294967295
 8003692:	9302      	str	r3, [sp, #8]
 8003694:	2301      	movs	r3, #1
 8003696:	9301      	str	r3, [sp, #4]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	2301      	movs	r3, #1
 800369e:	f002 fd7b 	bl	8006198 <HAL_I2C_Mem_Write>
 80036a2:	4603      	mov	r3, r0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80036ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80036e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80036b0:	f7fe ff84 	bl	80025bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036b4:	480c      	ldr	r0, [pc, #48]	@ (80036e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80036b6:	490d      	ldr	r1, [pc, #52]	@ (80036ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80036b8:	4a0d      	ldr	r2, [pc, #52]	@ (80036f0 <LoopForever+0xe>)
  movs r3, #0
 80036ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036bc:	e002      	b.n	80036c4 <LoopCopyDataInit>

080036be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036c2:	3304      	adds	r3, #4

080036c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036c8:	d3f9      	bcc.n	80036be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036ca:	4a0a      	ldr	r2, [pc, #40]	@ (80036f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80036cc:	4c0a      	ldr	r4, [pc, #40]	@ (80036f8 <LoopForever+0x16>)
  movs r3, #0
 80036ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036d0:	e001      	b.n	80036d6 <LoopFillZerobss>

080036d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036d4:	3204      	adds	r2, #4

080036d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036d8:	d3fb      	bcc.n	80036d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80036da:	f009 fd7f 	bl	800d1dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80036de:	f7fe f8ad 	bl	800183c <main>

080036e2 <LoopForever>:

LoopForever:
    b LoopForever
 80036e2:	e7fe      	b.n	80036e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80036e4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80036e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036ec:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80036f0:	0800e0bc 	.word	0x0800e0bc
  ldr r2, =_sbss
 80036f4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80036f8:	20002a34 	.word	0x20002a34

080036fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80036fc:	e7fe      	b.n	80036fc <ADC1_2_IRQHandler>

080036fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b082      	sub	sp, #8
 8003702:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003704:	2300      	movs	r3, #0
 8003706:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003708:	2003      	movs	r0, #3
 800370a:	f002 f822 	bl	8005752 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800370e:	200f      	movs	r0, #15
 8003710:	f7fe fe64 	bl	80023dc <HAL_InitTick>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d002      	beq.n	8003720 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	71fb      	strb	r3, [r7, #7]
 800371e:	e001      	b.n	8003724 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003720:	f7fe fc2e 	bl	8001f80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003724:	79fb      	ldrb	r3, [r7, #7]
}
 8003726:	4618      	mov	r0, r3
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
	...

08003730 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003734:	4b06      	ldr	r3, [pc, #24]	@ (8003750 <HAL_IncTick+0x20>)
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	461a      	mov	r2, r3
 800373a:	4b06      	ldr	r3, [pc, #24]	@ (8003754 <HAL_IncTick+0x24>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4413      	add	r3, r2
 8003740:	4a04      	ldr	r2, [pc, #16]	@ (8003754 <HAL_IncTick+0x24>)
 8003742:	6013      	str	r3, [r2, #0]
}
 8003744:	bf00      	nop
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	20000008 	.word	0x20000008
 8003754:	20000390 	.word	0x20000390

08003758 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  return uwTick;
 800375c:	4b03      	ldr	r3, [pc, #12]	@ (800376c <HAL_GetTick+0x14>)
 800375e:	681b      	ldr	r3, [r3, #0]
}
 8003760:	4618      	mov	r0, r3
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	20000390 	.word	0x20000390

08003770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003778:	f7ff ffee 	bl	8003758 <HAL_GetTick>
 800377c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003788:	d005      	beq.n	8003796 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800378a:	4b0a      	ldr	r3, [pc, #40]	@ (80037b4 <HAL_Delay+0x44>)
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	461a      	mov	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	4413      	add	r3, r2
 8003794:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003796:	bf00      	nop
 8003798:	f7ff ffde 	bl	8003758 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d8f7      	bhi.n	8003798 <HAL_Delay+0x28>
  {
  }
}
 80037a8:	bf00      	nop
 80037aa:	bf00      	nop
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	20000008 	.word	0x20000008

080037b8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	431a      	orrs	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	609a      	str	r2, [r3, #8]
}
 80037d2:	bf00      	nop
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80037de:	b480      	push	{r7}
 80037e0:	b083      	sub	sp, #12
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
 80037e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	431a      	orrs	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	609a      	str	r2, [r3, #8]
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003814:	4618      	mov	r0, r3
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003820:	b480      	push	{r7}
 8003822:	b087      	sub	sp, #28
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
 800382c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	3360      	adds	r3, #96	@ 0x60
 8003832:	461a      	mov	r2, r3
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	4b08      	ldr	r3, [pc, #32]	@ (8003864 <LL_ADC_SetOffset+0x44>)
 8003842:	4013      	ands	r3, r2
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800384a:	683a      	ldr	r2, [r7, #0]
 800384c:	430a      	orrs	r2, r1
 800384e:	4313      	orrs	r3, r2
 8003850:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003858:	bf00      	nop
 800385a:	371c      	adds	r7, #28
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	03fff000 	.word	0x03fff000

08003868 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	3360      	adds	r3, #96	@ 0x60
 8003876:	461a      	mov	r2, r3
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	4413      	add	r3, r2
 800387e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003888:	4618      	mov	r0, r3
 800388a:	3714      	adds	r7, #20
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003894:	b480      	push	{r7}
 8003896:	b087      	sub	sp, #28
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	3360      	adds	r3, #96	@ 0x60
 80038a4:	461a      	mov	r2, r3
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4413      	add	r3, r2
 80038ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	431a      	orrs	r2, r3
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80038be:	bf00      	nop
 80038c0:	371c      	adds	r7, #28
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr

080038ca <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80038ca:	b480      	push	{r7}
 80038cc:	b083      	sub	sp, #12
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
 80038d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	615a      	str	r2, [r3, #20]
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003900:	2b00      	cmp	r3, #0
 8003902:	d101      	bne.n	8003908 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003904:	2301      	movs	r3, #1
 8003906:	e000      	b.n	800390a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr

08003916 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003916:	b480      	push	{r7}
 8003918:	b087      	sub	sp, #28
 800391a:	af00      	add	r7, sp, #0
 800391c:	60f8      	str	r0, [r7, #12]
 800391e:	60b9      	str	r1, [r7, #8]
 8003920:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	3330      	adds	r3, #48	@ 0x30
 8003926:	461a      	mov	r2, r3
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	0a1b      	lsrs	r3, r3, #8
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	f003 030c 	and.w	r3, r3, #12
 8003932:	4413      	add	r3, r2
 8003934:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	f003 031f 	and.w	r3, r3, #31
 8003940:	211f      	movs	r1, #31
 8003942:	fa01 f303 	lsl.w	r3, r1, r3
 8003946:	43db      	mvns	r3, r3
 8003948:	401a      	ands	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	0e9b      	lsrs	r3, r3, #26
 800394e:	f003 011f 	and.w	r1, r3, #31
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	f003 031f 	and.w	r3, r3, #31
 8003958:	fa01 f303 	lsl.w	r3, r1, r3
 800395c:	431a      	orrs	r2, r3
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003962:	bf00      	nop
 8003964:	371c      	adds	r7, #28
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800396e:	b480      	push	{r7}
 8003970:	b087      	sub	sp, #28
 8003972:	af00      	add	r7, sp, #0
 8003974:	60f8      	str	r0, [r7, #12]
 8003976:	60b9      	str	r1, [r7, #8]
 8003978:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	3314      	adds	r3, #20
 800397e:	461a      	mov	r2, r3
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	0e5b      	lsrs	r3, r3, #25
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	f003 0304 	and.w	r3, r3, #4
 800398a:	4413      	add	r3, r2
 800398c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	0d1b      	lsrs	r3, r3, #20
 8003996:	f003 031f 	and.w	r3, r3, #31
 800399a:	2107      	movs	r1, #7
 800399c:	fa01 f303 	lsl.w	r3, r1, r3
 80039a0:	43db      	mvns	r3, r3
 80039a2:	401a      	ands	r2, r3
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	0d1b      	lsrs	r3, r3, #20
 80039a8:	f003 031f 	and.w	r3, r3, #31
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	fa01 f303 	lsl.w	r3, r1, r3
 80039b2:	431a      	orrs	r2, r3
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80039b8:	bf00      	nop
 80039ba:	371c      	adds	r7, #28
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039dc:	43db      	mvns	r3, r3
 80039de:	401a      	ands	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f003 0318 	and.w	r3, r3, #24
 80039e6:	4908      	ldr	r1, [pc, #32]	@ (8003a08 <LL_ADC_SetChannelSingleDiff+0x44>)
 80039e8:	40d9      	lsrs	r1, r3
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	400b      	ands	r3, r1
 80039ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039f2:	431a      	orrs	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80039fa:	bf00      	nop
 80039fc:	3714      	adds	r7, #20
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	0007ffff 	.word	0x0007ffff

08003a0c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f003 031f 	and.w	r3, r3, #31
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003a38:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6093      	str	r3, [r2, #8]
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a60:	d101      	bne.n	8003a66 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003a62:	2301      	movs	r3, #1
 8003a64:	e000      	b.n	8003a68 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003a84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003a88:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ab0:	d101      	bne.n	8003ab6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e000      	b.n	8003ab8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003ad4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003ad8:	f043 0201 	orr.w	r2, r3, #1
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003afc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003b00:	f043 0202 	orr.w	r2, r3, #2
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d101      	bne.n	8003b2c <LL_ADC_IsEnabled+0x18>
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e000      	b.n	8003b2e <LL_ADC_IsEnabled+0x1a>
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr

08003b3a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b083      	sub	sp, #12
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d101      	bne.n	8003b52 <LL_ADC_IsDisableOngoing+0x18>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e000      	b.n	8003b54 <LL_ADC_IsDisableOngoing+0x1a>
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b70:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003b74:	f043 0204 	orr.w	r2, r3, #4
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b98:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003b9c:	f043 0210 	orr.w	r2, r3, #16
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f003 0304 	and.w	r3, r3, #4
 8003bc0:	2b04      	cmp	r3, #4
 8003bc2:	d101      	bne.n	8003bc8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e000      	b.n	8003bca <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	370c      	adds	r7, #12
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr

08003bd6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	b083      	sub	sp, #12
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003be6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003bea:	f043 0220 	orr.w	r2, r3, #32
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003bf2:	bf00      	nop
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 0308 	and.w	r3, r3, #8
 8003c0e:	2b08      	cmp	r3, #8
 8003c10:	d101      	bne.n	8003c16 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003c12:	2301      	movs	r3, #1
 8003c14:	e000      	b.n	8003c18 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003c24:	b590      	push	{r4, r7, lr}
 8003c26:	b089      	sub	sp, #36	@ 0x24
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003c30:	2300      	movs	r3, #0
 8003c32:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e133      	b.n	8003ea6 <HAL_ADC_Init+0x282>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d109      	bne.n	8003c60 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f7fe f9bf 	bl	8001fd0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7ff fef1 	bl	8003a4c <LL_ADC_IsDeepPowerDownEnabled>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d004      	beq.n	8003c7a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7ff fed7 	bl	8003a28 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7ff ff0c 	bl	8003a9c <LL_ADC_IsInternalRegulatorEnabled>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d115      	bne.n	8003cb6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7ff fef0 	bl	8003a74 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c94:	4b86      	ldr	r3, [pc, #536]	@ (8003eb0 <HAL_ADC_Init+0x28c>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	099b      	lsrs	r3, r3, #6
 8003c9a:	4a86      	ldr	r2, [pc, #536]	@ (8003eb4 <HAL_ADC_Init+0x290>)
 8003c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca0:	099b      	lsrs	r3, r3, #6
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003ca8:	e002      	b.n	8003cb0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	3b01      	subs	r3, #1
 8003cae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1f9      	bne.n	8003caa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7ff feee 	bl	8003a9c <LL_ADC_IsInternalRegulatorEnabled>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10d      	bne.n	8003ce2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cca:	f043 0210 	orr.w	r2, r3, #16
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cd6:	f043 0201 	orr.w	r2, r3, #1
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7ff ff62 	bl	8003bb0 <LL_ADC_REG_IsConversionOngoing>
 8003cec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cf2:	f003 0310 	and.w	r3, r3, #16
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f040 80cc 	bne.w	8003e94 <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f040 80c8 	bne.w	8003e94 <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d08:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003d0c:	f043 0202 	orr.w	r2, r3, #2
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7ff fefb 	bl	8003b14 <LL_ADC_IsEnabled>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d115      	bne.n	8003d50 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d24:	4864      	ldr	r0, [pc, #400]	@ (8003eb8 <HAL_ADC_Init+0x294>)
 8003d26:	f7ff fef5 	bl	8003b14 <LL_ADC_IsEnabled>
 8003d2a:	4604      	mov	r4, r0
 8003d2c:	4863      	ldr	r0, [pc, #396]	@ (8003ebc <HAL_ADC_Init+0x298>)
 8003d2e:	f7ff fef1 	bl	8003b14 <LL_ADC_IsEnabled>
 8003d32:	4603      	mov	r3, r0
 8003d34:	431c      	orrs	r4, r3
 8003d36:	4862      	ldr	r0, [pc, #392]	@ (8003ec0 <HAL_ADC_Init+0x29c>)
 8003d38:	f7ff feec 	bl	8003b14 <LL_ADC_IsEnabled>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	4323      	orrs	r3, r4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d105      	bne.n	8003d50 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	4619      	mov	r1, r3
 8003d4a:	485e      	ldr	r0, [pc, #376]	@ (8003ec4 <HAL_ADC_Init+0x2a0>)
 8003d4c:	f7ff fd34 	bl	80037b8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	7e5b      	ldrb	r3, [r3, #25]
 8003d54:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003d5a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003d60:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003d66:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d6e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003d70:	4313      	orrs	r3, r2
 8003d72:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d106      	bne.n	8003d8c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d82:	3b01      	subs	r3, #1
 8003d84:	045b      	lsls	r3, r3, #17
 8003d86:	69ba      	ldr	r2, [r7, #24]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d009      	beq.n	8003da8 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d98:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68da      	ldr	r2, [r3, #12]
 8003dae:	4b46      	ldr	r3, [pc, #280]	@ (8003ec8 <HAL_ADC_Init+0x2a4>)
 8003db0:	4013      	ands	r3, r2
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	6812      	ldr	r2, [r2, #0]
 8003db6:	69b9      	ldr	r1, [r7, #24]
 8003db8:	430b      	orrs	r3, r1
 8003dba:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7ff ff1c 	bl	8003bfe <LL_ADC_INJ_IsConversionOngoing>
 8003dc6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d140      	bne.n	8003e50 <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d13d      	bne.n	8003e50 <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	7e1b      	ldrb	r3, [r3, #24]
 8003ddc:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003dde:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003de6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003de8:	4313      	orrs	r3, r2
 8003dea:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003df6:	f023 0306 	bic.w	r3, r3, #6
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	6812      	ldr	r2, [r2, #0]
 8003dfe:	69b9      	ldr	r1, [r7, #24]
 8003e00:	430b      	orrs	r3, r1
 8003e02:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d118      	bne.n	8003e40 <HAL_ADC_Init+0x21c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003e18:	f023 0304 	bic.w	r3, r3, #4
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003e24:	4311      	orrs	r1, r2
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003e2a:	4311      	orrs	r1, r2
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003e30:	430a      	orrs	r2, r1
 8003e32:	431a      	orrs	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f042 0201 	orr.w	r2, r2, #1
 8003e3c:	611a      	str	r2, [r3, #16]
 8003e3e:	e007      	b.n	8003e50 <HAL_ADC_Init+0x22c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	691a      	ldr	r2, [r3, #16]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 0201 	bic.w	r2, r2, #1
 8003e4e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d10c      	bne.n	8003e72 <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e5e:	f023 010f 	bic.w	r1, r3, #15
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	69db      	ldr	r3, [r3, #28]
 8003e66:	1e5a      	subs	r2, r3, #1
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e70:	e007      	b.n	8003e82 <HAL_ADC_Init+0x25e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 020f 	bic.w	r2, r2, #15
 8003e80:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e86:	f023 0303 	bic.w	r3, r3, #3
 8003e8a:	f043 0201 	orr.w	r2, r3, #1
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	659a      	str	r2, [r3, #88]	@ 0x58
 8003e92:	e007      	b.n	8003ea4 <HAL_ADC_Init+0x280>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e98:	f043 0210 	orr.w	r2, r3, #16
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003ea4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3724      	adds	r7, #36	@ 0x24
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd90      	pop	{r4, r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	20000000 	.word	0x20000000
 8003eb4:	053e2d63 	.word	0x053e2d63
 8003eb8:	50040000 	.word	0x50040000
 8003ebc:	50040100 	.word	0x50040100
 8003ec0:	50040200 	.word	0x50040200
 8003ec4:	50040300 	.word	0x50040300
 8003ec8:	fff0c007 	.word	0xfff0c007

08003ecc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ed8:	4853      	ldr	r0, [pc, #332]	@ (8004028 <HAL_ADC_Start_DMA+0x15c>)
 8003eda:	f7ff fd97 	bl	8003a0c <LL_ADC_GetMultimode>
 8003ede:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7ff fe63 	bl	8003bb0 <LL_ADC_REG_IsConversionOngoing>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f040 8093 	bne.w	8004018 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d101      	bne.n	8003f00 <HAL_ADC_Start_DMA+0x34>
 8003efc:	2302      	movs	r3, #2
 8003efe:	e08e      	b.n	800401e <HAL_ADC_Start_DMA+0x152>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a47      	ldr	r2, [pc, #284]	@ (800402c <HAL_ADC_Start_DMA+0x160>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d008      	beq.n	8003f24 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d005      	beq.n	8003f24 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	2b05      	cmp	r3, #5
 8003f1c:	d002      	beq.n	8003f24 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	2b09      	cmp	r3, #9
 8003f22:	d172      	bne.n	800400a <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f000 fdcb 	bl	8004ac0 <ADC_Enable>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003f2e:	7dfb      	ldrb	r3, [r7, #23]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d165      	bne.n	8004000 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f38:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003f3c:	f023 0301 	bic.w	r3, r3, #1
 8003f40:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a38      	ldr	r2, [pc, #224]	@ (8004030 <HAL_ADC_Start_DMA+0x164>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d002      	beq.n	8003f58 <HAL_ADC_Start_DMA+0x8c>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	e000      	b.n	8003f5a <HAL_ADC_Start_DMA+0x8e>
 8003f58:	4b36      	ldr	r3, [pc, #216]	@ (8004034 <HAL_ADC_Start_DMA+0x168>)
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	6812      	ldr	r2, [r2, #0]
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d002      	beq.n	8003f68 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d105      	bne.n	8003f74 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f6c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d006      	beq.n	8003f8e <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f84:	f023 0206 	bic.w	r2, r3, #6
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f8c:	e002      	b.n	8003f94 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f98:	4a27      	ldr	r2, [pc, #156]	@ (8004038 <HAL_ADC_Start_DMA+0x16c>)
 8003f9a:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fa0:	4a26      	ldr	r2, [pc, #152]	@ (800403c <HAL_ADC_Start_DMA+0x170>)
 8003fa2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fa8:	4a25      	ldr	r2, [pc, #148]	@ (8004040 <HAL_ADC_Start_DMA+0x174>)
 8003faa:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	221c      	movs	r2, #28
 8003fb2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685a      	ldr	r2, [r3, #4]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f042 0210 	orr.w	r2, r2, #16
 8003fca:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68da      	ldr	r2, [r3, #12]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f042 0201 	orr.w	r2, r2, #1
 8003fda:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	3340      	adds	r3, #64	@ 0x40
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	68ba      	ldr	r2, [r7, #8]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f001 fc9e 	bl	800592c <HAL_DMA_Start_IT>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7ff fdb1 	bl	8003b60 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003ffe:	e00d      	b.n	800401c <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      if (tmp_hal_status == HAL_OK)
 8004008:	e008      	b.n	800401c <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8004016:	e001      	b.n	800401c <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004018:	2302      	movs	r3, #2
 800401a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800401c:	7dfb      	ldrb	r3, [r7, #23]
}
 800401e:	4618      	mov	r0, r3
 8004020:	3718      	adds	r7, #24
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	50040300 	.word	0x50040300
 800402c:	50040200 	.word	0x50040200
 8004030:	50040100 	.word	0x50040100
 8004034:	50040000 	.word	0x50040000
 8004038:	08004c8b 	.word	0x08004c8b
 800403c:	08004d63 	.word	0x08004d63
 8004040:	08004d7f 	.word	0x08004d7f

08004044 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004052:	2b01      	cmp	r3, #1
 8004054:	d101      	bne.n	800405a <HAL_ADC_Stop_DMA+0x16>
 8004056:	2302      	movs	r3, #2
 8004058:	e051      	b.n	80040fe <HAL_ADC_Stop_DMA+0xba>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004062:	2103      	movs	r1, #3
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 fc6f 	bl	8004948 <ADC_ConversionStop>
 800406a:	4603      	mov	r3, r0
 800406c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800406e:	7bfb      	ldrb	r3, [r7, #15]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d13f      	bne.n	80040f4 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68da      	ldr	r2, [r3, #12]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 0201 	bic.w	r2, r2, #1
 8004082:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004088:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d10f      	bne.n	80040b2 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004096:	4618      	mov	r0, r3
 8004098:	f001 fca8 	bl	80059ec <HAL_DMA_Abort>
 800409c:	4603      	mov	r3, r0
 800409e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80040a0:	7bfb      	ldrb	r3, [r7, #15]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d005      	beq.n	80040b2 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	659a      	str	r2, [r3, #88]	@ 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	685a      	ldr	r2, [r3, #4]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 0210 	bic.w	r2, r2, #16
 80040c0:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80040c2:	7bfb      	ldrb	r3, [r7, #15]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d105      	bne.n	80040d4 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 fd7f 	bl	8004bcc <ADC_Disable>
 80040ce:	4603      	mov	r3, r0
 80040d0:	73fb      	strb	r3, [r7, #15]
 80040d2:	e002      	b.n	80040da <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 fd79 	bl	8004bcc <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80040da:	7bfb      	ldrb	r3, [r7, #15]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d109      	bne.n	80040f4 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80040e8:	f023 0301 	bic.w	r3, r3, #1
 80040ec:	f043 0201 	orr.w	r2, r3, #1
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80040fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004106:	b480      	push	{r7}
 8004108:	b083      	sub	sp, #12
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800410e:	bf00      	nop
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800411a:	b480      	push	{r7}
 800411c:	b083      	sub	sp, #12
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004122:	bf00      	nop
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
	...

08004130 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b0b6      	sub	sp, #216	@ 0xd8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800413a:	2300      	movs	r3, #0
 800413c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004140:	2300      	movs	r3, #0
 8004142:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800414a:	2b01      	cmp	r3, #1
 800414c:	d101      	bne.n	8004152 <HAL_ADC_ConfigChannel+0x22>
 800414e:	2302      	movs	r3, #2
 8004150:	e3e3      	b.n	800491a <HAL_ADC_ConfigChannel+0x7ea>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4618      	mov	r0, r3
 8004160:	f7ff fd26 	bl	8003bb0 <LL_ADC_REG_IsConversionOngoing>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	f040 83c4 	bne.w	80048f4 <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	2b05      	cmp	r3, #5
 800417a:	d824      	bhi.n	80041c6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	3b02      	subs	r3, #2
 8004182:	2b03      	cmp	r3, #3
 8004184:	d81b      	bhi.n	80041be <HAL_ADC_ConfigChannel+0x8e>
 8004186:	a201      	add	r2, pc, #4	@ (adr r2, 800418c <HAL_ADC_ConfigChannel+0x5c>)
 8004188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418c:	0800419d 	.word	0x0800419d
 8004190:	080041a5 	.word	0x080041a5
 8004194:	080041ad 	.word	0x080041ad
 8004198:	080041b5 	.word	0x080041b5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800419c:	230c      	movs	r3, #12
 800419e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80041a2:	e010      	b.n	80041c6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80041a4:	2312      	movs	r3, #18
 80041a6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80041aa:	e00c      	b.n	80041c6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80041ac:	2318      	movs	r3, #24
 80041ae:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80041b2:	e008      	b.n	80041c6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80041b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80041b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80041bc:	e003      	b.n	80041c6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80041be:	2306      	movs	r3, #6
 80041c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80041c4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6818      	ldr	r0, [r3, #0]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	461a      	mov	r2, r3
 80041d0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80041d4:	f7ff fb9f 	bl	8003916 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4618      	mov	r0, r3
 80041de:	f7ff fce7 	bl	8003bb0 <LL_ADC_REG_IsConversionOngoing>
 80041e2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7ff fd07 	bl	8003bfe <LL_ADC_INJ_IsConversionOngoing>
 80041f0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80041f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f040 81bf 	bne.w	800457c <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80041fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004202:	2b00      	cmp	r3, #0
 8004204:	f040 81ba 	bne.w	800457c <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004210:	d10f      	bne.n	8004232 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6818      	ldr	r0, [r3, #0]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2200      	movs	r2, #0
 800421c:	4619      	mov	r1, r3
 800421e:	f7ff fba6 	bl	800396e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800422a:	4618      	mov	r0, r3
 800422c:	f7ff fb4d 	bl	80038ca <LL_ADC_SetSamplingTimeCommonConfig>
 8004230:	e00e      	b.n	8004250 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6818      	ldr	r0, [r3, #0]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	6819      	ldr	r1, [r3, #0]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	461a      	mov	r2, r3
 8004240:	f7ff fb95 	bl	800396e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2100      	movs	r1, #0
 800424a:	4618      	mov	r0, r3
 800424c:	f7ff fb3d 	bl	80038ca <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	695a      	ldr	r2, [r3, #20]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	08db      	lsrs	r3, r3, #3
 800425c:	f003 0303 	and.w	r3, r3, #3
 8004260:	005b      	lsls	r3, r3, #1
 8004262:	fa02 f303 	lsl.w	r3, r2, r3
 8004266:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	2b04      	cmp	r3, #4
 8004270:	d00a      	beq.n	8004288 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6818      	ldr	r0, [r3, #0]
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	6919      	ldr	r1, [r3, #16]
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004282:	f7ff facd 	bl	8003820 <LL_ADC_SetOffset>
 8004286:	e179      	b.n	800457c <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2100      	movs	r1, #0
 800428e:	4618      	mov	r0, r3
 8004290:	f7ff faea 	bl	8003868 <LL_ADC_GetOffsetChannel>
 8004294:	4603      	mov	r3, r0
 8004296:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10a      	bne.n	80042b4 <HAL_ADC_ConfigChannel+0x184>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2100      	movs	r1, #0
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7ff fadf 	bl	8003868 <LL_ADC_GetOffsetChannel>
 80042aa:	4603      	mov	r3, r0
 80042ac:	0e9b      	lsrs	r3, r3, #26
 80042ae:	f003 021f 	and.w	r2, r3, #31
 80042b2:	e01e      	b.n	80042f2 <HAL_ADC_ConfigChannel+0x1c2>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2100      	movs	r1, #0
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7ff fad4 	bl	8003868 <LL_ADC_GetOffsetChannel>
 80042c0:	4603      	mov	r3, r0
 80042c2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80042ca:	fa93 f3a3 	rbit	r3, r3
 80042ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80042d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80042d6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80042da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80042e2:	2320      	movs	r3, #32
 80042e4:	e004      	b.n	80042f0 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80042e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80042ea:	fab3 f383 	clz	r3, r3
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d105      	bne.n	800430a <HAL_ADC_ConfigChannel+0x1da>
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	0e9b      	lsrs	r3, r3, #26
 8004304:	f003 031f 	and.w	r3, r3, #31
 8004308:	e018      	b.n	800433c <HAL_ADC_ConfigChannel+0x20c>
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004312:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004316:	fa93 f3a3 	rbit	r3, r3
 800431a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800431e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004322:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8004326:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 800432e:	2320      	movs	r3, #32
 8004330:	e004      	b.n	800433c <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8004332:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004336:	fab3 f383 	clz	r3, r3
 800433a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800433c:	429a      	cmp	r2, r3
 800433e:	d106      	bne.n	800434e <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2200      	movs	r2, #0
 8004346:	2100      	movs	r1, #0
 8004348:	4618      	mov	r0, r3
 800434a:	f7ff faa3 	bl	8003894 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2101      	movs	r1, #1
 8004354:	4618      	mov	r0, r3
 8004356:	f7ff fa87 	bl	8003868 <LL_ADC_GetOffsetChannel>
 800435a:	4603      	mov	r3, r0
 800435c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004360:	2b00      	cmp	r3, #0
 8004362:	d10a      	bne.n	800437a <HAL_ADC_ConfigChannel+0x24a>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2101      	movs	r1, #1
 800436a:	4618      	mov	r0, r3
 800436c:	f7ff fa7c 	bl	8003868 <LL_ADC_GetOffsetChannel>
 8004370:	4603      	mov	r3, r0
 8004372:	0e9b      	lsrs	r3, r3, #26
 8004374:	f003 021f 	and.w	r2, r3, #31
 8004378:	e01e      	b.n	80043b8 <HAL_ADC_ConfigChannel+0x288>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2101      	movs	r1, #1
 8004380:	4618      	mov	r0, r3
 8004382:	f7ff fa71 	bl	8003868 <LL_ADC_GetOffsetChannel>
 8004386:	4603      	mov	r3, r0
 8004388:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004390:	fa93 f3a3 	rbit	r3, r3
 8004394:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004398:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800439c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80043a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d101      	bne.n	80043ac <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80043a8:	2320      	movs	r3, #32
 80043aa:	e004      	b.n	80043b6 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80043ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80043b0:	fab3 f383 	clz	r3, r3
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d105      	bne.n	80043d0 <HAL_ADC_ConfigChannel+0x2a0>
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	0e9b      	lsrs	r3, r3, #26
 80043ca:	f003 031f 	and.w	r3, r3, #31
 80043ce:	e018      	b.n	8004402 <HAL_ADC_ConfigChannel+0x2d2>
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80043dc:	fa93 f3a3 	rbit	r3, r3
 80043e0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80043e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80043e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80043ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d101      	bne.n	80043f8 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80043f4:	2320      	movs	r3, #32
 80043f6:	e004      	b.n	8004402 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80043f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80043fc:	fab3 f383 	clz	r3, r3
 8004400:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004402:	429a      	cmp	r2, r3
 8004404:	d106      	bne.n	8004414 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2200      	movs	r2, #0
 800440c:	2101      	movs	r1, #1
 800440e:	4618      	mov	r0, r3
 8004410:	f7ff fa40 	bl	8003894 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2102      	movs	r1, #2
 800441a:	4618      	mov	r0, r3
 800441c:	f7ff fa24 	bl	8003868 <LL_ADC_GetOffsetChannel>
 8004420:	4603      	mov	r3, r0
 8004422:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10a      	bne.n	8004440 <HAL_ADC_ConfigChannel+0x310>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2102      	movs	r1, #2
 8004430:	4618      	mov	r0, r3
 8004432:	f7ff fa19 	bl	8003868 <LL_ADC_GetOffsetChannel>
 8004436:	4603      	mov	r3, r0
 8004438:	0e9b      	lsrs	r3, r3, #26
 800443a:	f003 021f 	and.w	r2, r3, #31
 800443e:	e01e      	b.n	800447e <HAL_ADC_ConfigChannel+0x34e>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2102      	movs	r1, #2
 8004446:	4618      	mov	r0, r3
 8004448:	f7ff fa0e 	bl	8003868 <LL_ADC_GetOffsetChannel>
 800444c:	4603      	mov	r3, r0
 800444e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004452:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004456:	fa93 f3a3 	rbit	r3, r3
 800445a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800445e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004462:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004466:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 800446e:	2320      	movs	r3, #32
 8004470:	e004      	b.n	800447c <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8004472:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004476:	fab3 f383 	clz	r3, r3
 800447a:	b2db      	uxtb	r3, r3
 800447c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004486:	2b00      	cmp	r3, #0
 8004488:	d105      	bne.n	8004496 <HAL_ADC_ConfigChannel+0x366>
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	0e9b      	lsrs	r3, r3, #26
 8004490:	f003 031f 	and.w	r3, r3, #31
 8004494:	e014      	b.n	80044c0 <HAL_ADC_ConfigChannel+0x390>
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800449c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800449e:	fa93 f3a3 	rbit	r3, r3
 80044a2:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80044a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80044aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80044b2:	2320      	movs	r3, #32
 80044b4:	e004      	b.n	80044c0 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80044b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80044ba:	fab3 f383 	clz	r3, r3
 80044be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d106      	bne.n	80044d2 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2200      	movs	r2, #0
 80044ca:	2102      	movs	r1, #2
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7ff f9e1 	bl	8003894 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2103      	movs	r1, #3
 80044d8:	4618      	mov	r0, r3
 80044da:	f7ff f9c5 	bl	8003868 <LL_ADC_GetOffsetChannel>
 80044de:	4603      	mov	r3, r0
 80044e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10a      	bne.n	80044fe <HAL_ADC_ConfigChannel+0x3ce>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2103      	movs	r1, #3
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7ff f9ba 	bl	8003868 <LL_ADC_GetOffsetChannel>
 80044f4:	4603      	mov	r3, r0
 80044f6:	0e9b      	lsrs	r3, r3, #26
 80044f8:	f003 021f 	and.w	r2, r3, #31
 80044fc:	e017      	b.n	800452e <HAL_ADC_ConfigChannel+0x3fe>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2103      	movs	r1, #3
 8004504:	4618      	mov	r0, r3
 8004506:	f7ff f9af 	bl	8003868 <LL_ADC_GetOffsetChannel>
 800450a:	4603      	mov	r3, r0
 800450c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800450e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004510:	fa93 f3a3 	rbit	r3, r3
 8004514:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004516:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004518:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800451a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800451c:	2b00      	cmp	r3, #0
 800451e:	d101      	bne.n	8004524 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8004520:	2320      	movs	r3, #32
 8004522:	e003      	b.n	800452c <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8004524:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004526:	fab3 f383 	clz	r3, r3
 800452a:	b2db      	uxtb	r3, r3
 800452c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004536:	2b00      	cmp	r3, #0
 8004538:	d105      	bne.n	8004546 <HAL_ADC_ConfigChannel+0x416>
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	0e9b      	lsrs	r3, r3, #26
 8004540:	f003 031f 	and.w	r3, r3, #31
 8004544:	e011      	b.n	800456a <HAL_ADC_ConfigChannel+0x43a>
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800454e:	fa93 f3a3 	rbit	r3, r3
 8004552:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004554:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004556:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004558:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 800455e:	2320      	movs	r3, #32
 8004560:	e003      	b.n	800456a <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8004562:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004564:	fab3 f383 	clz	r3, r3
 8004568:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800456a:	429a      	cmp	r2, r3
 800456c:	d106      	bne.n	800457c <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2200      	movs	r2, #0
 8004574:	2103      	movs	r1, #3
 8004576:	4618      	mov	r0, r3
 8004578:	f7ff f98c 	bl	8003894 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4618      	mov	r0, r3
 8004582:	f7ff fac7 	bl	8003b14 <LL_ADC_IsEnabled>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	f040 813f 	bne.w	800480c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6818      	ldr	r0, [r3, #0]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	6819      	ldr	r1, [r3, #0]
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	461a      	mov	r2, r3
 800459c:	f7ff fa12 	bl	80039c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	4a8e      	ldr	r2, [pc, #568]	@ (80047e0 <HAL_ADC_ConfigChannel+0x6b0>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	f040 8130 	bne.w	800480c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10b      	bne.n	80045d4 <HAL_ADC_ConfigChannel+0x4a4>
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	0e9b      	lsrs	r3, r3, #26
 80045c2:	3301      	adds	r3, #1
 80045c4:	f003 031f 	and.w	r3, r3, #31
 80045c8:	2b09      	cmp	r3, #9
 80045ca:	bf94      	ite	ls
 80045cc:	2301      	movls	r3, #1
 80045ce:	2300      	movhi	r3, #0
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	e019      	b.n	8004608 <HAL_ADC_ConfigChannel+0x4d8>
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80045dc:	fa93 f3a3 	rbit	r3, r3
 80045e0:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80045e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80045e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d101      	bne.n	80045f0 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80045ec:	2320      	movs	r3, #32
 80045ee:	e003      	b.n	80045f8 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80045f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045f2:	fab3 f383 	clz	r3, r3
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	3301      	adds	r3, #1
 80045fa:	f003 031f 	and.w	r3, r3, #31
 80045fe:	2b09      	cmp	r3, #9
 8004600:	bf94      	ite	ls
 8004602:	2301      	movls	r3, #1
 8004604:	2300      	movhi	r3, #0
 8004606:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004608:	2b00      	cmp	r3, #0
 800460a:	d079      	beq.n	8004700 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004614:	2b00      	cmp	r3, #0
 8004616:	d107      	bne.n	8004628 <HAL_ADC_ConfigChannel+0x4f8>
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	0e9b      	lsrs	r3, r3, #26
 800461e:	3301      	adds	r3, #1
 8004620:	069b      	lsls	r3, r3, #26
 8004622:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004626:	e015      	b.n	8004654 <HAL_ADC_ConfigChannel+0x524>
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800462e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004630:	fa93 f3a3 	rbit	r3, r3
 8004634:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004636:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004638:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800463a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800463c:	2b00      	cmp	r3, #0
 800463e:	d101      	bne.n	8004644 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8004640:	2320      	movs	r3, #32
 8004642:	e003      	b.n	800464c <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8004644:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004646:	fab3 f383 	clz	r3, r3
 800464a:	b2db      	uxtb	r3, r3
 800464c:	3301      	adds	r3, #1
 800464e:	069b      	lsls	r3, r3, #26
 8004650:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800465c:	2b00      	cmp	r3, #0
 800465e:	d109      	bne.n	8004674 <HAL_ADC_ConfigChannel+0x544>
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	0e9b      	lsrs	r3, r3, #26
 8004666:	3301      	adds	r3, #1
 8004668:	f003 031f 	and.w	r3, r3, #31
 800466c:	2101      	movs	r1, #1
 800466e:	fa01 f303 	lsl.w	r3, r1, r3
 8004672:	e017      	b.n	80046a4 <HAL_ADC_ConfigChannel+0x574>
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800467a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800467c:	fa93 f3a3 	rbit	r3, r3
 8004680:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004682:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004684:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004686:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004688:	2b00      	cmp	r3, #0
 800468a:	d101      	bne.n	8004690 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 800468c:	2320      	movs	r3, #32
 800468e:	e003      	b.n	8004698 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8004690:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004692:	fab3 f383 	clz	r3, r3
 8004696:	b2db      	uxtb	r3, r3
 8004698:	3301      	adds	r3, #1
 800469a:	f003 031f 	and.w	r3, r3, #31
 800469e:	2101      	movs	r1, #1
 80046a0:	fa01 f303 	lsl.w	r3, r1, r3
 80046a4:	ea42 0103 	orr.w	r1, r2, r3
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10a      	bne.n	80046ca <HAL_ADC_ConfigChannel+0x59a>
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	0e9b      	lsrs	r3, r3, #26
 80046ba:	3301      	adds	r3, #1
 80046bc:	f003 021f 	and.w	r2, r3, #31
 80046c0:	4613      	mov	r3, r2
 80046c2:	005b      	lsls	r3, r3, #1
 80046c4:	4413      	add	r3, r2
 80046c6:	051b      	lsls	r3, r3, #20
 80046c8:	e018      	b.n	80046fc <HAL_ADC_ConfigChannel+0x5cc>
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046d2:	fa93 f3a3 	rbit	r3, r3
 80046d6:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80046d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046da:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80046dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80046e2:	2320      	movs	r3, #32
 80046e4:	e003      	b.n	80046ee <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80046e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046e8:	fab3 f383 	clz	r3, r3
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	3301      	adds	r3, #1
 80046f0:	f003 021f 	and.w	r2, r3, #31
 80046f4:	4613      	mov	r3, r2
 80046f6:	005b      	lsls	r3, r3, #1
 80046f8:	4413      	add	r3, r2
 80046fa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046fc:	430b      	orrs	r3, r1
 80046fe:	e080      	b.n	8004802 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004708:	2b00      	cmp	r3, #0
 800470a:	d107      	bne.n	800471c <HAL_ADC_ConfigChannel+0x5ec>
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	0e9b      	lsrs	r3, r3, #26
 8004712:	3301      	adds	r3, #1
 8004714:	069b      	lsls	r3, r3, #26
 8004716:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800471a:	e015      	b.n	8004748 <HAL_ADC_ConfigChannel+0x618>
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004724:	fa93 f3a3 	rbit	r3, r3
 8004728:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800472a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800472c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800472e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004730:	2b00      	cmp	r3, #0
 8004732:	d101      	bne.n	8004738 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8004734:	2320      	movs	r3, #32
 8004736:	e003      	b.n	8004740 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8004738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800473a:	fab3 f383 	clz	r3, r3
 800473e:	b2db      	uxtb	r3, r3
 8004740:	3301      	adds	r3, #1
 8004742:	069b      	lsls	r3, r3, #26
 8004744:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004750:	2b00      	cmp	r3, #0
 8004752:	d109      	bne.n	8004768 <HAL_ADC_ConfigChannel+0x638>
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	0e9b      	lsrs	r3, r3, #26
 800475a:	3301      	adds	r3, #1
 800475c:	f003 031f 	and.w	r3, r3, #31
 8004760:	2101      	movs	r1, #1
 8004762:	fa01 f303 	lsl.w	r3, r1, r3
 8004766:	e017      	b.n	8004798 <HAL_ADC_ConfigChannel+0x668>
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	fa93 f3a3 	rbit	r3, r3
 8004774:	61bb      	str	r3, [r7, #24]
  return result;
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800477a:	6a3b      	ldr	r3, [r7, #32]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d101      	bne.n	8004784 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8004780:	2320      	movs	r3, #32
 8004782:	e003      	b.n	800478c <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8004784:	6a3b      	ldr	r3, [r7, #32]
 8004786:	fab3 f383 	clz	r3, r3
 800478a:	b2db      	uxtb	r3, r3
 800478c:	3301      	adds	r3, #1
 800478e:	f003 031f 	and.w	r3, r3, #31
 8004792:	2101      	movs	r1, #1
 8004794:	fa01 f303 	lsl.w	r3, r1, r3
 8004798:	ea42 0103 	orr.w	r1, r2, r3
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d10d      	bne.n	80047c4 <HAL_ADC_ConfigChannel+0x694>
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	0e9b      	lsrs	r3, r3, #26
 80047ae:	3301      	adds	r3, #1
 80047b0:	f003 021f 	and.w	r2, r3, #31
 80047b4:	4613      	mov	r3, r2
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	4413      	add	r3, r2
 80047ba:	3b1e      	subs	r3, #30
 80047bc:	051b      	lsls	r3, r3, #20
 80047be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80047c2:	e01d      	b.n	8004800 <HAL_ADC_ConfigChannel+0x6d0>
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	fa93 f3a3 	rbit	r3, r3
 80047d0:	60fb      	str	r3, [r7, #12]
  return result;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d103      	bne.n	80047e4 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80047dc:	2320      	movs	r3, #32
 80047de:	e005      	b.n	80047ec <HAL_ADC_ConfigChannel+0x6bc>
 80047e0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	fab3 f383 	clz	r3, r3
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	3301      	adds	r3, #1
 80047ee:	f003 021f 	and.w	r2, r3, #31
 80047f2:	4613      	mov	r3, r2
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	4413      	add	r3, r2
 80047f8:	3b1e      	subs	r3, #30
 80047fa:	051b      	lsls	r3, r3, #20
 80047fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004800:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004802:	683a      	ldr	r2, [r7, #0]
 8004804:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004806:	4619      	mov	r1, r3
 8004808:	f7ff f8b1 	bl	800396e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	4b44      	ldr	r3, [pc, #272]	@ (8004924 <HAL_ADC_ConfigChannel+0x7f4>)
 8004812:	4013      	ands	r3, r2
 8004814:	2b00      	cmp	r3, #0
 8004816:	d07a      	beq.n	800490e <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004818:	4843      	ldr	r0, [pc, #268]	@ (8004928 <HAL_ADC_ConfigChannel+0x7f8>)
 800481a:	f7fe fff3 	bl	8003804 <LL_ADC_GetCommonPathInternalCh>
 800481e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a41      	ldr	r2, [pc, #260]	@ (800492c <HAL_ADC_ConfigChannel+0x7fc>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d12c      	bne.n	8004886 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800482c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004830:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d126      	bne.n	8004886 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a3c      	ldr	r2, [pc, #240]	@ (8004930 <HAL_ADC_ConfigChannel+0x800>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d004      	beq.n	800484c <HAL_ADC_ConfigChannel+0x71c>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a3b      	ldr	r2, [pc, #236]	@ (8004934 <HAL_ADC_ConfigChannel+0x804>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d15d      	bne.n	8004908 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800484c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004850:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004854:	4619      	mov	r1, r3
 8004856:	4834      	ldr	r0, [pc, #208]	@ (8004928 <HAL_ADC_ConfigChannel+0x7f8>)
 8004858:	f7fe ffc1 	bl	80037de <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800485c:	4b36      	ldr	r3, [pc, #216]	@ (8004938 <HAL_ADC_ConfigChannel+0x808>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	099b      	lsrs	r3, r3, #6
 8004862:	4a36      	ldr	r2, [pc, #216]	@ (800493c <HAL_ADC_ConfigChannel+0x80c>)
 8004864:	fba2 2303 	umull	r2, r3, r2, r3
 8004868:	099b      	lsrs	r3, r3, #6
 800486a:	1c5a      	adds	r2, r3, #1
 800486c:	4613      	mov	r3, r2
 800486e:	005b      	lsls	r3, r3, #1
 8004870:	4413      	add	r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004876:	e002      	b.n	800487e <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	3b01      	subs	r3, #1
 800487c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1f9      	bne.n	8004878 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004884:	e040      	b.n	8004908 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a2d      	ldr	r2, [pc, #180]	@ (8004940 <HAL_ADC_ConfigChannel+0x810>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d118      	bne.n	80048c2 <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004890:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004894:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d112      	bne.n	80048c2 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a23      	ldr	r2, [pc, #140]	@ (8004930 <HAL_ADC_ConfigChannel+0x800>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d004      	beq.n	80048b0 <HAL_ADC_ConfigChannel+0x780>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a22      	ldr	r2, [pc, #136]	@ (8004934 <HAL_ADC_ConfigChannel+0x804>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d12d      	bne.n	800490c <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80048b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048b8:	4619      	mov	r1, r3
 80048ba:	481b      	ldr	r0, [pc, #108]	@ (8004928 <HAL_ADC_ConfigChannel+0x7f8>)
 80048bc:	f7fe ff8f 	bl	80037de <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80048c0:	e024      	b.n	800490c <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a1f      	ldr	r2, [pc, #124]	@ (8004944 <HAL_ADC_ConfigChannel+0x814>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d120      	bne.n	800490e <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80048cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80048d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d11a      	bne.n	800490e <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a14      	ldr	r2, [pc, #80]	@ (8004930 <HAL_ADC_ConfigChannel+0x800>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d115      	bne.n	800490e <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80048e6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80048ea:	4619      	mov	r1, r3
 80048ec:	480e      	ldr	r0, [pc, #56]	@ (8004928 <HAL_ADC_ConfigChannel+0x7f8>)
 80048ee:	f7fe ff76 	bl	80037de <LL_ADC_SetCommonPathInternalCh>
 80048f2:	e00c      	b.n	800490e <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048f8:	f043 0220 	orr.w	r2, r3, #32
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004906:	e002      	b.n	800490e <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004908:	bf00      	nop
 800490a:	e000      	b.n	800490e <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800490c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8004916:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800491a:	4618      	mov	r0, r3
 800491c:	37d8      	adds	r7, #216	@ 0xd8
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	80080000 	.word	0x80080000
 8004928:	50040300 	.word	0x50040300
 800492c:	c7520000 	.word	0xc7520000
 8004930:	50040000 	.word	0x50040000
 8004934:	50040200 	.word	0x50040200
 8004938:	20000000 	.word	0x20000000
 800493c:	053e2d63 	.word	0x053e2d63
 8004940:	cb840000 	.word	0xcb840000
 8004944:	80000001 	.word	0x80000001

08004948 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b088      	sub	sp, #32
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004952:	2300      	movs	r3, #0
 8004954:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4618      	mov	r0, r3
 8004960:	f7ff f926 	bl	8003bb0 <LL_ADC_REG_IsConversionOngoing>
 8004964:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4618      	mov	r0, r3
 800496c:	f7ff f947 	bl	8003bfe <LL_ADC_INJ_IsConversionOngoing>
 8004970:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d103      	bne.n	8004980 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2b00      	cmp	r3, #0
 800497c:	f000 8098 	beq.w	8004ab0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d02a      	beq.n	80049e4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	7e5b      	ldrb	r3, [r3, #25]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d126      	bne.n	80049e4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	7e1b      	ldrb	r3, [r3, #24]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d122      	bne.n	80049e4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800499e:	2301      	movs	r3, #1
 80049a0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80049a2:	e014      	b.n	80049ce <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	4a45      	ldr	r2, [pc, #276]	@ (8004abc <ADC_ConversionStop+0x174>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d90d      	bls.n	80049c8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049b0:	f043 0210 	orr.w	r2, r3, #16
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049bc:	f043 0201 	orr.w	r2, r3, #1
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e074      	b.n	8004ab2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	3301      	adds	r3, #1
 80049cc:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049d8:	2b40      	cmp	r3, #64	@ 0x40
 80049da:	d1e3      	bne.n	80049a4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2240      	movs	r2, #64	@ 0x40
 80049e2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d014      	beq.n	8004a14 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7ff f8de 	bl	8003bb0 <LL_ADC_REG_IsConversionOngoing>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00c      	beq.n	8004a14 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7ff f89b 	bl	8003b3a <LL_ADC_IsDisableOngoing>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d104      	bne.n	8004a14 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7ff f8ba 	bl	8003b88 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d014      	beq.n	8004a44 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7ff f8ed 	bl	8003bfe <LL_ADC_INJ_IsConversionOngoing>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00c      	beq.n	8004a44 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7ff f883 	bl	8003b3a <LL_ADC_IsDisableOngoing>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d104      	bne.n	8004a44 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7ff f8c9 	bl	8003bd6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d005      	beq.n	8004a56 <ADC_ConversionStop+0x10e>
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	2b03      	cmp	r3, #3
 8004a4e:	d105      	bne.n	8004a5c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004a50:	230c      	movs	r3, #12
 8004a52:	617b      	str	r3, [r7, #20]
        break;
 8004a54:	e005      	b.n	8004a62 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004a56:	2308      	movs	r3, #8
 8004a58:	617b      	str	r3, [r7, #20]
        break;
 8004a5a:	e002      	b.n	8004a62 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004a5c:	2304      	movs	r3, #4
 8004a5e:	617b      	str	r3, [r7, #20]
        break;
 8004a60:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004a62:	f7fe fe79 	bl	8003758 <HAL_GetTick>
 8004a66:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004a68:	e01b      	b.n	8004aa2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004a6a:	f7fe fe75 	bl	8003758 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	2b05      	cmp	r3, #5
 8004a76:	d914      	bls.n	8004aa2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	689a      	ldr	r2, [r3, #8]
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	4013      	ands	r3, r2
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00d      	beq.n	8004aa2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a8a:	f043 0210 	orr.w	r2, r3, #16
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a96:	f043 0201 	orr.w	r2, r3, #1
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e007      	b.n	8004ab2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	689a      	ldr	r2, [r3, #8]
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1dc      	bne.n	8004a6a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3720      	adds	r7, #32
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	a33fffff 	.word	0xa33fffff

08004ac0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7ff f81f 	bl	8003b14 <LL_ADC_IsEnabled>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d169      	bne.n	8004bb0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689a      	ldr	r2, [r3, #8]
 8004ae2:	4b36      	ldr	r3, [pc, #216]	@ (8004bbc <ADC_Enable+0xfc>)
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00d      	beq.n	8004b06 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aee:	f043 0210 	orr.w	r2, r3, #16
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004afa:	f043 0201 	orr.w	r2, r3, #1
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e055      	b.n	8004bb2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7fe ffda 	bl	8003ac4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004b10:	482b      	ldr	r0, [pc, #172]	@ (8004bc0 <ADC_Enable+0x100>)
 8004b12:	f7fe fe77 	bl	8003804 <LL_ADC_GetCommonPathInternalCh>
 8004b16:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004b18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d013      	beq.n	8004b48 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004b20:	4b28      	ldr	r3, [pc, #160]	@ (8004bc4 <ADC_Enable+0x104>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	099b      	lsrs	r3, r3, #6
 8004b26:	4a28      	ldr	r2, [pc, #160]	@ (8004bc8 <ADC_Enable+0x108>)
 8004b28:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2c:	099b      	lsrs	r3, r3, #6
 8004b2e:	1c5a      	adds	r2, r3, #1
 8004b30:	4613      	mov	r3, r2
 8004b32:	005b      	lsls	r3, r3, #1
 8004b34:	4413      	add	r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004b3a:	e002      	b.n	8004b42 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1f9      	bne.n	8004b3c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004b48:	f7fe fe06 	bl	8003758 <HAL_GetTick>
 8004b4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b4e:	e028      	b.n	8004ba2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7fe ffdd 	bl	8003b14 <LL_ADC_IsEnabled>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d104      	bne.n	8004b6a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7fe ffad 	bl	8003ac4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004b6a:	f7fe fdf5 	bl	8003758 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d914      	bls.n	8004ba2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d00d      	beq.n	8004ba2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b8a:	f043 0210 	orr.w	r2, r3, #16
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b96:	f043 0201 	orr.w	r2, r3, #1
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e007      	b.n	8004bb2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0301 	and.w	r3, r3, #1
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d1cf      	bne.n	8004b50 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	8000003f 	.word	0x8000003f
 8004bc0:	50040300 	.word	0x50040300
 8004bc4:	20000000 	.word	0x20000000
 8004bc8:	053e2d63 	.word	0x053e2d63

08004bcc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7fe ffae 	bl	8003b3a <LL_ADC_IsDisableOngoing>
 8004bde:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f7fe ff95 	bl	8003b14 <LL_ADC_IsEnabled>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d047      	beq.n	8004c80 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d144      	bne.n	8004c80 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f003 030d 	and.w	r3, r3, #13
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d10c      	bne.n	8004c1e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7fe ff6f 	bl	8003aec <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2203      	movs	r2, #3
 8004c14:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004c16:	f7fe fd9f 	bl	8003758 <HAL_GetTick>
 8004c1a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004c1c:	e029      	b.n	8004c72 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c22:	f043 0210 	orr.w	r2, r3, #16
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c2e:	f043 0201 	orr.w	r2, r3, #1
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e023      	b.n	8004c82 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004c3a:	f7fe fd8d 	bl	8003758 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d914      	bls.n	8004c72 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00d      	beq.n	8004c72 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c5a:	f043 0210 	orr.w	r2, r3, #16
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c66:	f043 0201 	orr.w	r2, r3, #1
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e007      	b.n	8004c82 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f003 0301 	and.w	r3, r3, #1
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1dc      	bne.n	8004c3a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b084      	sub	sp, #16
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c96:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c9c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d14b      	bne.n	8004d3c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ca8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0308 	and.w	r3, r3, #8
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d021      	beq.n	8004d02 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7fe fe14 	bl	80038f0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d032      	beq.n	8004d34 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d12b      	bne.n	8004d34 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ce0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d11f      	bne.n	8004d34 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cf8:	f043 0201 	orr.w	r2, r3, #1
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	659a      	str	r2, [r3, #88]	@ 0x58
 8004d00:	e018      	b.n	8004d34 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	f003 0302 	and.w	r3, r3, #2
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d111      	bne.n	8004d34 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d14:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d105      	bne.n	8004d34 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d2c:	f043 0201 	orr.w	r2, r3, #1
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f7fc fd2d 	bl	8001794 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004d3a:	e00e      	b.n	8004d5a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d40:	f003 0310 	and.w	r3, r3, #16
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d003      	beq.n	8004d50 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004d48:	68f8      	ldr	r0, [r7, #12]
 8004d4a:	f7ff f9e6 	bl	800411a <HAL_ADC_ErrorCallback>
}
 8004d4e:	e004      	b.n	8004d5a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	4798      	blx	r3
}
 8004d5a:	bf00      	nop
 8004d5c:	3710      	adds	r7, #16
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b084      	sub	sp, #16
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d6e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f7ff f9c8 	bl	8004106 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d76:	bf00      	nop
 8004d78:	3710      	adds	r7, #16
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b084      	sub	sp, #16
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d8a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d90:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d9c:	f043 0204 	orr.w	r2, r3, #4
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	f7ff f9b8 	bl	800411a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004daa:	bf00      	nop
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <LL_ADC_IsEnabled>:
{
 8004db2:	b480      	push	{r7}
 8004db4:	b083      	sub	sp, #12
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d101      	bne.n	8004dca <LL_ADC_IsEnabled+0x18>
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e000      	b.n	8004dcc <LL_ADC_IsEnabled+0x1a>
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <LL_ADC_REG_IsConversionOngoing>:
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f003 0304 	and.w	r3, r3, #4
 8004de8:	2b04      	cmp	r3, #4
 8004dea:	d101      	bne.n	8004df0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004dec:	2301      	movs	r3, #1
 8004dee:	e000      	b.n	8004df2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
	...

08004e00 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004e00:	b590      	push	{r4, r7, lr}
 8004e02:	b0a1      	sub	sp, #132	@ 0x84
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d101      	bne.n	8004e1e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	e093      	b.n	8004f46 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004e26:	2300      	movs	r3, #0
 8004e28:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a47      	ldr	r2, [pc, #284]	@ (8004f50 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d102      	bne.n	8004e3e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004e38:	4b46      	ldr	r3, [pc, #280]	@ (8004f54 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004e3a:	60fb      	str	r3, [r7, #12]
 8004e3c:	e001      	b.n	8004e42 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004e3e:	2300      	movs	r3, #0
 8004e40:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d10b      	bne.n	8004e60 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e4c:	f043 0220 	orr.w	r2, r3, #32
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e072      	b.n	8004f46 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7ff ffb8 	bl	8004dd8 <LL_ADC_REG_IsConversionOngoing>
 8004e68:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7ff ffb2 	bl	8004dd8 <LL_ADC_REG_IsConversionOngoing>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d154      	bne.n	8004f24 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004e7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d151      	bne.n	8004f24 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004e80:	4b35      	ldr	r3, [pc, #212]	@ (8004f58 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8004e82:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d02c      	beq.n	8004ee6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004e8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	6859      	ldr	r1, [r3, #4]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004e9e:	035b      	lsls	r3, r3, #13
 8004ea0:	430b      	orrs	r3, r1
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ea6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ea8:	4829      	ldr	r0, [pc, #164]	@ (8004f50 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004eaa:	f7ff ff82 	bl	8004db2 <LL_ADC_IsEnabled>
 8004eae:	4604      	mov	r4, r0
 8004eb0:	4828      	ldr	r0, [pc, #160]	@ (8004f54 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004eb2:	f7ff ff7e 	bl	8004db2 <LL_ADC_IsEnabled>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	431c      	orrs	r4, r3
 8004eba:	4828      	ldr	r0, [pc, #160]	@ (8004f5c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004ebc:	f7ff ff79 	bl	8004db2 <LL_ADC_IsEnabled>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	4323      	orrs	r3, r4
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d137      	bne.n	8004f38 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004ec8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004ed0:	f023 030f 	bic.w	r3, r3, #15
 8004ed4:	683a      	ldr	r2, [r7, #0]
 8004ed6:	6811      	ldr	r1, [r2, #0]
 8004ed8:	683a      	ldr	r2, [r7, #0]
 8004eda:	6892      	ldr	r2, [r2, #8]
 8004edc:	430a      	orrs	r2, r1
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ee2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004ee4:	e028      	b.n	8004f38 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004ee6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004eee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ef0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ef2:	4817      	ldr	r0, [pc, #92]	@ (8004f50 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004ef4:	f7ff ff5d 	bl	8004db2 <LL_ADC_IsEnabled>
 8004ef8:	4604      	mov	r4, r0
 8004efa:	4816      	ldr	r0, [pc, #88]	@ (8004f54 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004efc:	f7ff ff59 	bl	8004db2 <LL_ADC_IsEnabled>
 8004f00:	4603      	mov	r3, r0
 8004f02:	431c      	orrs	r4, r3
 8004f04:	4815      	ldr	r0, [pc, #84]	@ (8004f5c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004f06:	f7ff ff54 	bl	8004db2 <LL_ADC_IsEnabled>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	4323      	orrs	r3, r4
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d112      	bne.n	8004f38 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004f12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004f1a:	f023 030f 	bic.w	r3, r3, #15
 8004f1e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004f20:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004f22:	e009      	b.n	8004f38 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f28:	f043 0220 	orr.w	r2, r3, #32
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004f36:	e000      	b.n	8004f3a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004f38:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8004f42:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3784      	adds	r7, #132	@ 0x84
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd90      	pop	{r4, r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	50040000 	.word	0x50040000
 8004f54:	50040100 	.word	0x50040100
 8004f58:	50040300 	.word	0x50040300
 8004f5c:	50040200 	.word	0x50040200

08004f60 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d101      	bne.n	8004f72 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e0ed      	b.n	800514e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d102      	bne.n	8004f84 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7fd f8b0 	bl	80020e4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f042 0201 	orr.w	r2, r2, #1
 8004f92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f94:	f7fe fbe0 	bl	8003758 <HAL_GetTick>
 8004f98:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004f9a:	e012      	b.n	8004fc2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004f9c:	f7fe fbdc 	bl	8003758 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	2b0a      	cmp	r3, #10
 8004fa8:	d90b      	bls.n	8004fc2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fae:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2205      	movs	r2, #5
 8004fba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e0c5      	b.n	800514e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f003 0301 	and.w	r3, r3, #1
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d0e5      	beq.n	8004f9c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f022 0202 	bic.w	r2, r2, #2
 8004fde:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004fe0:	f7fe fbba 	bl	8003758 <HAL_GetTick>
 8004fe4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004fe6:	e012      	b.n	800500e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004fe8:	f7fe fbb6 	bl	8003758 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	2b0a      	cmp	r3, #10
 8004ff4:	d90b      	bls.n	800500e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ffa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2205      	movs	r2, #5
 8005006:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e09f      	b.n	800514e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f003 0302 	and.w	r3, r3, #2
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1e5      	bne.n	8004fe8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	7e1b      	ldrb	r3, [r3, #24]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d108      	bne.n	8005036 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005032:	601a      	str	r2, [r3, #0]
 8005034:	e007      	b.n	8005046 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005044:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	7e5b      	ldrb	r3, [r3, #25]
 800504a:	2b01      	cmp	r3, #1
 800504c:	d108      	bne.n	8005060 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800505c:	601a      	str	r2, [r3, #0]
 800505e:	e007      	b.n	8005070 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800506e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	7e9b      	ldrb	r3, [r3, #26]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d108      	bne.n	800508a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f042 0220 	orr.w	r2, r2, #32
 8005086:	601a      	str	r2, [r3, #0]
 8005088:	e007      	b.n	800509a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f022 0220 	bic.w	r2, r2, #32
 8005098:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	7edb      	ldrb	r3, [r3, #27]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d108      	bne.n	80050b4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f022 0210 	bic.w	r2, r2, #16
 80050b0:	601a      	str	r2, [r3, #0]
 80050b2:	e007      	b.n	80050c4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f042 0210 	orr.w	r2, r2, #16
 80050c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	7f1b      	ldrb	r3, [r3, #28]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d108      	bne.n	80050de <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f042 0208 	orr.w	r2, r2, #8
 80050da:	601a      	str	r2, [r3, #0]
 80050dc:	e007      	b.n	80050ee <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f022 0208 	bic.w	r2, r2, #8
 80050ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	7f5b      	ldrb	r3, [r3, #29]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d108      	bne.n	8005108 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f042 0204 	orr.w	r2, r2, #4
 8005104:	601a      	str	r2, [r3, #0]
 8005106:	e007      	b.n	8005118 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f022 0204 	bic.w	r2, r2, #4
 8005116:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	689a      	ldr	r2, [r3, #8]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	431a      	orrs	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	431a      	orrs	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	695b      	ldr	r3, [r3, #20]
 800512c:	ea42 0103 	orr.w	r1, r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	1e5a      	subs	r2, r3, #1
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	430a      	orrs	r2, r1
 800513c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
	...

08005158 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8005158:	b480      	push	{r7}
 800515a:	b087      	sub	sp, #28
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800516e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8005170:	7cfb      	ldrb	r3, [r7, #19]
 8005172:	2b01      	cmp	r3, #1
 8005174:	d003      	beq.n	800517e <HAL_CAN_ConfigFilter+0x26>
 8005176:	7cfb      	ldrb	r3, [r7, #19]
 8005178:	2b02      	cmp	r3, #2
 800517a:	f040 80be 	bne.w	80052fa <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800517e:	4b65      	ldr	r3, [pc, #404]	@ (8005314 <HAL_CAN_ConfigFilter+0x1bc>)
 8005180:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005188:	f043 0201 	orr.w	r2, r3, #1
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005198:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ac:	021b      	lsls	r3, r3, #8
 80051ae:	431a      	orrs	r2, r3
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	f003 031f 	and.w	r3, r3, #31
 80051be:	2201      	movs	r2, #1
 80051c0:	fa02 f303 	lsl.w	r3, r2, r3
 80051c4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	43db      	mvns	r3, r3
 80051d0:	401a      	ands	r2, r3
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	69db      	ldr	r3, [r3, #28]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d123      	bne.n	8005228 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	43db      	mvns	r3, r3
 80051ea:	401a      	ands	r2, r3
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80051fe:	683a      	ldr	r2, [r7, #0]
 8005200:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005202:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	3248      	adds	r2, #72	@ 0x48
 8005208:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800521c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800521e:	6979      	ldr	r1, [r7, #20]
 8005220:	3348      	adds	r3, #72	@ 0x48
 8005222:	00db      	lsls	r3, r3, #3
 8005224:	440b      	add	r3, r1
 8005226:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	69db      	ldr	r3, [r3, #28]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d122      	bne.n	8005276 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	431a      	orrs	r2, r3
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005250:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	3248      	adds	r2, #72	@ 0x48
 8005256:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800526a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800526c:	6979      	ldr	r1, [r7, #20]
 800526e:	3348      	adds	r3, #72	@ 0x48
 8005270:	00db      	lsls	r3, r3, #3
 8005272:	440b      	add	r3, r1
 8005274:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d109      	bne.n	8005292 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	43db      	mvns	r3, r3
 8005288:	401a      	ands	r2, r3
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8005290:	e007      	b.n	80052a2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	431a      	orrs	r2, r3
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d109      	bne.n	80052be <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	43db      	mvns	r3, r3
 80052b4:	401a      	ands	r2, r3
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80052bc:	e007      	b.n	80052ce <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	431a      	orrs	r2, r3
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d107      	bne.n	80052e6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	431a      	orrs	r2, r3
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80052ec:	f023 0201 	bic.w	r2, r3, #1
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80052f6:	2300      	movs	r3, #0
 80052f8:	e006      	b.n	8005308 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052fe:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
  }
}
 8005308:	4618      	mov	r0, r3
 800530a:	371c      	adds	r7, #28
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr
 8005314:	40006400 	.word	0x40006400

08005318 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005326:	b2db      	uxtb	r3, r3
 8005328:	2b01      	cmp	r3, #1
 800532a:	d12e      	bne.n	800538a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2202      	movs	r2, #2
 8005330:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f022 0201 	bic.w	r2, r2, #1
 8005342:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005344:	f7fe fa08 	bl	8003758 <HAL_GetTick>
 8005348:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800534a:	e012      	b.n	8005372 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800534c:	f7fe fa04 	bl	8003758 <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	2b0a      	cmp	r3, #10
 8005358:	d90b      	bls.n	8005372 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800535e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2205      	movs	r2, #5
 800536a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e012      	b.n	8005398 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f003 0301 	and.w	r3, r3, #1
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1e5      	bne.n	800534c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8005386:	2300      	movs	r3, #0
 8005388:	e006      	b.n	8005398 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800538e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
  }
}
 8005398:	4618      	mov	r0, r3
 800539a:	3710      	adds	r7, #16
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b089      	sub	sp, #36	@ 0x24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
 80053ac:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053b4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80053be:	7ffb      	ldrb	r3, [r7, #31]
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d003      	beq.n	80053cc <HAL_CAN_AddTxMessage+0x2c>
 80053c4:	7ffb      	ldrb	r3, [r7, #31]
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	f040 80ad 	bne.w	8005526 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10a      	bne.n	80053ec <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d105      	bne.n	80053ec <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f000 8095 	beq.w	8005516 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	0e1b      	lsrs	r3, r3, #24
 80053f0:	f003 0303 	and.w	r3, r3, #3
 80053f4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80053f6:	2201      	movs	r2, #1
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	409a      	lsls	r2, r3
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10d      	bne.n	8005424 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005412:	68f9      	ldr	r1, [r7, #12]
 8005414:	6809      	ldr	r1, [r1, #0]
 8005416:	431a      	orrs	r2, r3
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	3318      	adds	r3, #24
 800541c:	011b      	lsls	r3, r3, #4
 800541e:	440b      	add	r3, r1
 8005420:	601a      	str	r2, [r3, #0]
 8005422:	e00f      	b.n	8005444 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800542e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005434:	68f9      	ldr	r1, [r7, #12]
 8005436:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005438:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	3318      	adds	r3, #24
 800543e:	011b      	lsls	r3, r3, #4
 8005440:	440b      	add	r3, r1
 8005442:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6819      	ldr	r1, [r3, #0]
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	691a      	ldr	r2, [r3, #16]
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	3318      	adds	r3, #24
 8005450:	011b      	lsls	r3, r3, #4
 8005452:	440b      	add	r3, r1
 8005454:	3304      	adds	r3, #4
 8005456:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	7d1b      	ldrb	r3, [r3, #20]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d111      	bne.n	8005484 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	3318      	adds	r3, #24
 8005468:	011b      	lsls	r3, r3, #4
 800546a:	4413      	add	r3, r2
 800546c:	3304      	adds	r3, #4
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	6811      	ldr	r1, [r2, #0]
 8005474:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	3318      	adds	r3, #24
 800547c:	011b      	lsls	r3, r3, #4
 800547e:	440b      	add	r3, r1
 8005480:	3304      	adds	r3, #4
 8005482:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	3307      	adds	r3, #7
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	061a      	lsls	r2, r3, #24
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	3306      	adds	r3, #6
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	041b      	lsls	r3, r3, #16
 8005494:	431a      	orrs	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	3305      	adds	r3, #5
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	021b      	lsls	r3, r3, #8
 800549e:	4313      	orrs	r3, r2
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	3204      	adds	r2, #4
 80054a4:	7812      	ldrb	r2, [r2, #0]
 80054a6:	4610      	mov	r0, r2
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	6811      	ldr	r1, [r2, #0]
 80054ac:	ea43 0200 	orr.w	r2, r3, r0
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	011b      	lsls	r3, r3, #4
 80054b4:	440b      	add	r3, r1
 80054b6:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80054ba:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	3303      	adds	r3, #3
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	061a      	lsls	r2, r3, #24
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	3302      	adds	r3, #2
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	041b      	lsls	r3, r3, #16
 80054cc:	431a      	orrs	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	3301      	adds	r3, #1
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	021b      	lsls	r3, r3, #8
 80054d6:	4313      	orrs	r3, r2
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	7812      	ldrb	r2, [r2, #0]
 80054dc:	4610      	mov	r0, r2
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	6811      	ldr	r1, [r2, #0]
 80054e2:	ea43 0200 	orr.w	r2, r3, r0
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	011b      	lsls	r3, r3, #4
 80054ea:	440b      	add	r3, r1
 80054ec:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80054f0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	3318      	adds	r3, #24
 80054fa:	011b      	lsls	r3, r3, #4
 80054fc:	4413      	add	r3, r2
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	6811      	ldr	r1, [r2, #0]
 8005504:	f043 0201 	orr.w	r2, r3, #1
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	3318      	adds	r3, #24
 800550c:	011b      	lsls	r3, r3, #4
 800550e:	440b      	add	r3, r1
 8005510:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005512:	2300      	movs	r3, #0
 8005514:	e00e      	b.n	8005534 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800551a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e006      	b.n	8005534 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800552a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
  }
}
 8005534:	4618      	mov	r0, r3
 8005536:	3724      	adds	r7, #36	@ 0x24
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8005548:	2300      	movs	r3, #0
 800554a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005552:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8005554:	7afb      	ldrb	r3, [r7, #11]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d002      	beq.n	8005560 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800555a:	7afb      	ldrb	r3, [r7, #11]
 800555c:	2b02      	cmp	r3, #2
 800555e:	d11d      	bne.n	800559c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d002      	beq.n	8005574 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	3301      	adds	r3, #1
 8005572:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d002      	beq.n	8005588 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	3301      	adds	r3, #1
 8005586:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d002      	beq.n	800559c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	3301      	adds	r3, #1
 800559a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800559c:	68fb      	ldr	r3, [r7, #12]
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3714      	adds	r7, #20
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b085      	sub	sp, #20
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
 80055b2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055ba:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80055bc:	7bfb      	ldrb	r3, [r7, #15]
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d002      	beq.n	80055c8 <HAL_CAN_ActivateNotification+0x1e>
 80055c2:	7bfb      	ldrb	r3, [r7, #15]
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d109      	bne.n	80055dc <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6959      	ldr	r1, [r3, #20]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	683a      	ldr	r2, [r7, #0]
 80055d4:	430a      	orrs	r2, r1
 80055d6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80055d8:	2300      	movs	r3, #0
 80055da:	e006      	b.n	80055ea <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
  }
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
	...

080055f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f003 0307 	and.w	r3, r3, #7
 8005606:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005608:	4b0c      	ldr	r3, [pc, #48]	@ (800563c <__NVIC_SetPriorityGrouping+0x44>)
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800560e:	68ba      	ldr	r2, [r7, #8]
 8005610:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005614:	4013      	ands	r3, r2
 8005616:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005620:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005624:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005628:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800562a:	4a04      	ldr	r2, [pc, #16]	@ (800563c <__NVIC_SetPriorityGrouping+0x44>)
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	60d3      	str	r3, [r2, #12]
}
 8005630:	bf00      	nop
 8005632:	3714      	adds	r7, #20
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr
 800563c:	e000ed00 	.word	0xe000ed00

08005640 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005640:	b480      	push	{r7}
 8005642:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005644:	4b04      	ldr	r3, [pc, #16]	@ (8005658 <__NVIC_GetPriorityGrouping+0x18>)
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	0a1b      	lsrs	r3, r3, #8
 800564a:	f003 0307 	and.w	r3, r3, #7
}
 800564e:	4618      	mov	r0, r3
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr
 8005658:	e000ed00 	.word	0xe000ed00

0800565c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	4603      	mov	r3, r0
 8005664:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800566a:	2b00      	cmp	r3, #0
 800566c:	db0b      	blt.n	8005686 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800566e:	79fb      	ldrb	r3, [r7, #7]
 8005670:	f003 021f 	and.w	r2, r3, #31
 8005674:	4907      	ldr	r1, [pc, #28]	@ (8005694 <__NVIC_EnableIRQ+0x38>)
 8005676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800567a:	095b      	lsrs	r3, r3, #5
 800567c:	2001      	movs	r0, #1
 800567e:	fa00 f202 	lsl.w	r2, r0, r2
 8005682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005686:	bf00      	nop
 8005688:	370c      	adds	r7, #12
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	e000e100 	.word	0xe000e100

08005698 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	4603      	mov	r3, r0
 80056a0:	6039      	str	r1, [r7, #0]
 80056a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	db0a      	blt.n	80056c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	b2da      	uxtb	r2, r3
 80056b0:	490c      	ldr	r1, [pc, #48]	@ (80056e4 <__NVIC_SetPriority+0x4c>)
 80056b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056b6:	0112      	lsls	r2, r2, #4
 80056b8:	b2d2      	uxtb	r2, r2
 80056ba:	440b      	add	r3, r1
 80056bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80056c0:	e00a      	b.n	80056d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	b2da      	uxtb	r2, r3
 80056c6:	4908      	ldr	r1, [pc, #32]	@ (80056e8 <__NVIC_SetPriority+0x50>)
 80056c8:	79fb      	ldrb	r3, [r7, #7]
 80056ca:	f003 030f 	and.w	r3, r3, #15
 80056ce:	3b04      	subs	r3, #4
 80056d0:	0112      	lsls	r2, r2, #4
 80056d2:	b2d2      	uxtb	r2, r2
 80056d4:	440b      	add	r3, r1
 80056d6:	761a      	strb	r2, [r3, #24]
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr
 80056e4:	e000e100 	.word	0xe000e100
 80056e8:	e000ed00 	.word	0xe000ed00

080056ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b089      	sub	sp, #36	@ 0x24
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f003 0307 	and.w	r3, r3, #7
 80056fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	f1c3 0307 	rsb	r3, r3, #7
 8005706:	2b04      	cmp	r3, #4
 8005708:	bf28      	it	cs
 800570a:	2304      	movcs	r3, #4
 800570c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	3304      	adds	r3, #4
 8005712:	2b06      	cmp	r3, #6
 8005714:	d902      	bls.n	800571c <NVIC_EncodePriority+0x30>
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	3b03      	subs	r3, #3
 800571a:	e000      	b.n	800571e <NVIC_EncodePriority+0x32>
 800571c:	2300      	movs	r3, #0
 800571e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005720:	f04f 32ff 	mov.w	r2, #4294967295
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	fa02 f303 	lsl.w	r3, r2, r3
 800572a:	43da      	mvns	r2, r3
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	401a      	ands	r2, r3
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005734:	f04f 31ff 	mov.w	r1, #4294967295
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	fa01 f303 	lsl.w	r3, r1, r3
 800573e:	43d9      	mvns	r1, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005744:	4313      	orrs	r3, r2
         );
}
 8005746:	4618      	mov	r0, r3
 8005748:	3724      	adds	r7, #36	@ 0x24
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr

08005752 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005752:	b580      	push	{r7, lr}
 8005754:	b082      	sub	sp, #8
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f7ff ff4c 	bl	80055f8 <__NVIC_SetPriorityGrouping>
}
 8005760:	bf00      	nop
 8005762:	3708      	adds	r7, #8
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b086      	sub	sp, #24
 800576c:	af00      	add	r7, sp, #0
 800576e:	4603      	mov	r3, r0
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
 8005774:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005776:	2300      	movs	r3, #0
 8005778:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800577a:	f7ff ff61 	bl	8005640 <__NVIC_GetPriorityGrouping>
 800577e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	68b9      	ldr	r1, [r7, #8]
 8005784:	6978      	ldr	r0, [r7, #20]
 8005786:	f7ff ffb1 	bl	80056ec <NVIC_EncodePriority>
 800578a:	4602      	mov	r2, r0
 800578c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005790:	4611      	mov	r1, r2
 8005792:	4618      	mov	r0, r3
 8005794:	f7ff ff80 	bl	8005698 <__NVIC_SetPriority>
}
 8005798:	bf00      	nop
 800579a:	3718      	adds	r7, #24
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	4603      	mov	r3, r0
 80057a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80057aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057ae:	4618      	mov	r0, r3
 80057b0:	f7ff ff54 	bl	800565c <__NVIC_EnableIRQ>
}
 80057b4:	bf00      	nop
 80057b6:	3708      	adds	r7, #8
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e098      	b.n	8005900 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	461a      	mov	r2, r3
 80057d4:	4b4d      	ldr	r3, [pc, #308]	@ (800590c <HAL_DMA_Init+0x150>)
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d80f      	bhi.n	80057fa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	461a      	mov	r2, r3
 80057e0:	4b4b      	ldr	r3, [pc, #300]	@ (8005910 <HAL_DMA_Init+0x154>)
 80057e2:	4413      	add	r3, r2
 80057e4:	4a4b      	ldr	r2, [pc, #300]	@ (8005914 <HAL_DMA_Init+0x158>)
 80057e6:	fba2 2303 	umull	r2, r3, r2, r3
 80057ea:	091b      	lsrs	r3, r3, #4
 80057ec:	009a      	lsls	r2, r3, #2
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a48      	ldr	r2, [pc, #288]	@ (8005918 <HAL_DMA_Init+0x15c>)
 80057f6:	641a      	str	r2, [r3, #64]	@ 0x40
 80057f8:	e00e      	b.n	8005818 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	461a      	mov	r2, r3
 8005800:	4b46      	ldr	r3, [pc, #280]	@ (800591c <HAL_DMA_Init+0x160>)
 8005802:	4413      	add	r3, r2
 8005804:	4a43      	ldr	r2, [pc, #268]	@ (8005914 <HAL_DMA_Init+0x158>)
 8005806:	fba2 2303 	umull	r2, r3, r2, r3
 800580a:	091b      	lsrs	r3, r3, #4
 800580c:	009a      	lsls	r2, r3, #2
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a42      	ldr	r2, [pc, #264]	@ (8005920 <HAL_DMA_Init+0x164>)
 8005816:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2202      	movs	r2, #2
 800581c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800582e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005832:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800583c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005848:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005854:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a1b      	ldr	r3, [r3, #32]
 800585a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	4313      	orrs	r3, r2
 8005860:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005872:	d039      	beq.n	80058e8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005878:	4a27      	ldr	r2, [pc, #156]	@ (8005918 <HAL_DMA_Init+0x15c>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d11a      	bne.n	80058b4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800587e:	4b29      	ldr	r3, [pc, #164]	@ (8005924 <HAL_DMA_Init+0x168>)
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005886:	f003 031c 	and.w	r3, r3, #28
 800588a:	210f      	movs	r1, #15
 800588c:	fa01 f303 	lsl.w	r3, r1, r3
 8005890:	43db      	mvns	r3, r3
 8005892:	4924      	ldr	r1, [pc, #144]	@ (8005924 <HAL_DMA_Init+0x168>)
 8005894:	4013      	ands	r3, r2
 8005896:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005898:	4b22      	ldr	r3, [pc, #136]	@ (8005924 <HAL_DMA_Init+0x168>)
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6859      	ldr	r1, [r3, #4]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058a4:	f003 031c 	and.w	r3, r3, #28
 80058a8:	fa01 f303 	lsl.w	r3, r1, r3
 80058ac:	491d      	ldr	r1, [pc, #116]	@ (8005924 <HAL_DMA_Init+0x168>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	600b      	str	r3, [r1, #0]
 80058b2:	e019      	b.n	80058e8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80058b4:	4b1c      	ldr	r3, [pc, #112]	@ (8005928 <HAL_DMA_Init+0x16c>)
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058bc:	f003 031c 	and.w	r3, r3, #28
 80058c0:	210f      	movs	r1, #15
 80058c2:	fa01 f303 	lsl.w	r3, r1, r3
 80058c6:	43db      	mvns	r3, r3
 80058c8:	4917      	ldr	r1, [pc, #92]	@ (8005928 <HAL_DMA_Init+0x16c>)
 80058ca:	4013      	ands	r3, r2
 80058cc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80058ce:	4b16      	ldr	r3, [pc, #88]	@ (8005928 <HAL_DMA_Init+0x16c>)
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6859      	ldr	r1, [r3, #4]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058da:	f003 031c 	and.w	r3, r3, #28
 80058de:	fa01 f303 	lsl.w	r3, r1, r3
 80058e2:	4911      	ldr	r1, [pc, #68]	@ (8005928 <HAL_DMA_Init+0x16c>)
 80058e4:	4313      	orrs	r3, r2
 80058e6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2201      	movs	r2, #1
 80058f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3714      	adds	r7, #20
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr
 800590c:	40020407 	.word	0x40020407
 8005910:	bffdfff8 	.word	0xbffdfff8
 8005914:	cccccccd 	.word	0xcccccccd
 8005918:	40020000 	.word	0x40020000
 800591c:	bffdfbf8 	.word	0xbffdfbf8
 8005920:	40020400 	.word	0x40020400
 8005924:	400200a8 	.word	0x400200a8
 8005928:	400204a8 	.word	0x400204a8

0800592c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b086      	sub	sp, #24
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
 8005938:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800593a:	2300      	movs	r3, #0
 800593c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005944:	2b01      	cmp	r3, #1
 8005946:	d101      	bne.n	800594c <HAL_DMA_Start_IT+0x20>
 8005948:	2302      	movs	r3, #2
 800594a:	e04b      	b.n	80059e4 <HAL_DMA_Start_IT+0xb8>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800595a:	b2db      	uxtb	r3, r3
 800595c:	2b01      	cmp	r3, #1
 800595e:	d13a      	bne.n	80059d6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2202      	movs	r2, #2
 8005964:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f022 0201 	bic.w	r2, r2, #1
 800597c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	68b9      	ldr	r1, [r7, #8]
 8005984:	68f8      	ldr	r0, [r7, #12]
 8005986:	f000 f95f 	bl	8005c48 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800598e:	2b00      	cmp	r3, #0
 8005990:	d008      	beq.n	80059a4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f042 020e 	orr.w	r2, r2, #14
 80059a0:	601a      	str	r2, [r3, #0]
 80059a2:	e00f      	b.n	80059c4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f022 0204 	bic.w	r2, r2, #4
 80059b2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f042 020a 	orr.w	r2, r2, #10
 80059c2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f042 0201 	orr.w	r2, r2, #1
 80059d2:	601a      	str	r2, [r3, #0]
 80059d4:	e005      	b.n	80059e2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80059de:	2302      	movs	r3, #2
 80059e0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80059e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3718      	adds	r7, #24
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059f4:	2300      	movs	r3, #0
 80059f6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d008      	beq.n	8005a16 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2204      	movs	r2, #4
 8005a08:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e022      	b.n	8005a5c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f022 020e 	bic.w	r2, r2, #14
 8005a24:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f022 0201 	bic.w	r2, r2, #1
 8005a34:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a3a:	f003 021c 	and.w	r2, r3, #28
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a42:	2101      	movs	r1, #1
 8005a44:	fa01 f202 	lsl.w	r2, r1, r2
 8005a48:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8005a5a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3714      	adds	r7, #20
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a70:	2300      	movs	r3, #0
 8005a72:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d005      	beq.n	8005a8c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2204      	movs	r2, #4
 8005a84:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	73fb      	strb	r3, [r7, #15]
 8005a8a:	e029      	b.n	8005ae0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f022 020e 	bic.w	r2, r2, #14
 8005a9a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f022 0201 	bic.w	r2, r2, #1
 8005aaa:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ab0:	f003 021c 	and.w	r2, r3, #28
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab8:	2101      	movs	r1, #1
 8005aba:	fa01 f202 	lsl.w	r2, r1, r2
 8005abe:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d003      	beq.n	8005ae0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	4798      	blx	r3
    }
  }
  return status;
 8005ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3710      	adds	r7, #16
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b084      	sub	sp, #16
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b06:	f003 031c 	and.w	r3, r3, #28
 8005b0a:	2204      	movs	r2, #4
 8005b0c:	409a      	lsls	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	4013      	ands	r3, r2
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d026      	beq.n	8005b64 <HAL_DMA_IRQHandler+0x7a>
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	f003 0304 	and.w	r3, r3, #4
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d021      	beq.n	8005b64 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 0320 	and.w	r3, r3, #32
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d107      	bne.n	8005b3e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f022 0204 	bic.w	r2, r2, #4
 8005b3c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b42:	f003 021c 	and.w	r2, r3, #28
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b4a:	2104      	movs	r1, #4
 8005b4c:	fa01 f202 	lsl.w	r2, r1, r2
 8005b50:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d071      	beq.n	8005c3e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005b62:	e06c      	b.n	8005c3e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b68:	f003 031c 	and.w	r3, r3, #28
 8005b6c:	2202      	movs	r2, #2
 8005b6e:	409a      	lsls	r2, r3
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	4013      	ands	r3, r2
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d02e      	beq.n	8005bd6 <HAL_DMA_IRQHandler+0xec>
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	f003 0302 	and.w	r3, r3, #2
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d029      	beq.n	8005bd6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0320 	and.w	r3, r3, #32
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d10b      	bne.n	8005ba8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f022 020a 	bic.w	r2, r2, #10
 8005b9e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bac:	f003 021c 	and.w	r2, r3, #28
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bb4:	2102      	movs	r1, #2
 8005bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8005bba:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d038      	beq.n	8005c3e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005bd4:	e033      	b.n	8005c3e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bda:	f003 031c 	and.w	r3, r3, #28
 8005bde:	2208      	movs	r2, #8
 8005be0:	409a      	lsls	r2, r3
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	4013      	ands	r3, r2
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d02a      	beq.n	8005c40 <HAL_DMA_IRQHandler+0x156>
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	f003 0308 	and.w	r3, r3, #8
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d025      	beq.n	8005c40 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f022 020e 	bic.w	r2, r2, #14
 8005c02:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c08:	f003 021c 	and.w	r2, r3, #28
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c10:	2101      	movs	r1, #1
 8005c12:	fa01 f202 	lsl.w	r2, r1, r2
 8005c16:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2201      	movs	r2, #1
 8005c22:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d004      	beq.n	8005c40 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005c3e:	bf00      	nop
 8005c40:	bf00      	nop
}
 8005c42:	3710      	adds	r7, #16
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
 8005c54:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c5a:	f003 021c 	and.w	r2, r3, #28
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c62:	2101      	movs	r1, #1
 8005c64:	fa01 f202 	lsl.w	r2, r1, r2
 8005c68:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	683a      	ldr	r2, [r7, #0]
 8005c70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	2b10      	cmp	r3, #16
 8005c78:	d108      	bne.n	8005c8c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68ba      	ldr	r2, [r7, #8]
 8005c88:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005c8a:	e007      	b.n	8005c9c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	60da      	str	r2, [r3, #12]
}
 8005c9c:	bf00      	nop
 8005c9e:	3714      	adds	r7, #20
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b087      	sub	sp, #28
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005cb6:	e166      	b.n	8005f86 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	2101      	movs	r1, #1
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	f000 8158 	beq.w	8005f80 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f003 0303 	and.w	r3, r3, #3
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d005      	beq.n	8005ce8 <HAL_GPIO_Init+0x40>
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	f003 0303 	and.w	r3, r3, #3
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	d130      	bne.n	8005d4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	005b      	lsls	r3, r3, #1
 8005cf2:	2203      	movs	r2, #3
 8005cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf8:	43db      	mvns	r3, r3
 8005cfa:	693a      	ldr	r2, [r7, #16]
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	68da      	ldr	r2, [r3, #12]
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	005b      	lsls	r3, r3, #1
 8005d08:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	693a      	ldr	r2, [r7, #16]
 8005d16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005d1e:	2201      	movs	r2, #1
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	fa02 f303 	lsl.w	r3, r2, r3
 8005d26:	43db      	mvns	r3, r3
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	091b      	lsrs	r3, r3, #4
 8005d34:	f003 0201 	and.w	r2, r3, #1
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3e:	693a      	ldr	r2, [r7, #16]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	693a      	ldr	r2, [r7, #16]
 8005d48:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	f003 0303 	and.w	r3, r3, #3
 8005d52:	2b03      	cmp	r3, #3
 8005d54:	d017      	beq.n	8005d86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	005b      	lsls	r3, r3, #1
 8005d60:	2203      	movs	r2, #3
 8005d62:	fa02 f303 	lsl.w	r3, r2, r3
 8005d66:	43db      	mvns	r3, r3
 8005d68:	693a      	ldr	r2, [r7, #16]
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	689a      	ldr	r2, [r3, #8]
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	005b      	lsls	r3, r3, #1
 8005d76:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7a:	693a      	ldr	r2, [r7, #16]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f003 0303 	and.w	r3, r3, #3
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d123      	bne.n	8005dda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	08da      	lsrs	r2, r3, #3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	3208      	adds	r2, #8
 8005d9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	f003 0307 	and.w	r3, r3, #7
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	220f      	movs	r2, #15
 8005daa:	fa02 f303 	lsl.w	r3, r2, r3
 8005dae:	43db      	mvns	r3, r3
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	4013      	ands	r3, r2
 8005db4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	691a      	ldr	r2, [r3, #16]
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	f003 0307 	and.w	r3, r3, #7
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	08da      	lsrs	r2, r3, #3
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	3208      	adds	r2, #8
 8005dd4:	6939      	ldr	r1, [r7, #16]
 8005dd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	005b      	lsls	r3, r3, #1
 8005de4:	2203      	movs	r2, #3
 8005de6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dea:	43db      	mvns	r3, r3
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	4013      	ands	r3, r2
 8005df0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	f003 0203 	and.w	r2, r3, #3
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	005b      	lsls	r3, r3, #1
 8005dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	f000 80b2 	beq.w	8005f80 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e1c:	4b61      	ldr	r3, [pc, #388]	@ (8005fa4 <HAL_GPIO_Init+0x2fc>)
 8005e1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e20:	4a60      	ldr	r2, [pc, #384]	@ (8005fa4 <HAL_GPIO_Init+0x2fc>)
 8005e22:	f043 0301 	orr.w	r3, r3, #1
 8005e26:	6613      	str	r3, [r2, #96]	@ 0x60
 8005e28:	4b5e      	ldr	r3, [pc, #376]	@ (8005fa4 <HAL_GPIO_Init+0x2fc>)
 8005e2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e2c:	f003 0301 	and.w	r3, r3, #1
 8005e30:	60bb      	str	r3, [r7, #8]
 8005e32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005e34:	4a5c      	ldr	r2, [pc, #368]	@ (8005fa8 <HAL_GPIO_Init+0x300>)
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	089b      	lsrs	r3, r3, #2
 8005e3a:	3302      	adds	r3, #2
 8005e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	f003 0303 	and.w	r3, r3, #3
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	220f      	movs	r2, #15
 8005e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e50:	43db      	mvns	r3, r3
 8005e52:	693a      	ldr	r2, [r7, #16]
 8005e54:	4013      	ands	r3, r2
 8005e56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005e5e:	d02b      	beq.n	8005eb8 <HAL_GPIO_Init+0x210>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a52      	ldr	r2, [pc, #328]	@ (8005fac <HAL_GPIO_Init+0x304>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d025      	beq.n	8005eb4 <HAL_GPIO_Init+0x20c>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a51      	ldr	r2, [pc, #324]	@ (8005fb0 <HAL_GPIO_Init+0x308>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d01f      	beq.n	8005eb0 <HAL_GPIO_Init+0x208>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a50      	ldr	r2, [pc, #320]	@ (8005fb4 <HAL_GPIO_Init+0x30c>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d019      	beq.n	8005eac <HAL_GPIO_Init+0x204>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a4f      	ldr	r2, [pc, #316]	@ (8005fb8 <HAL_GPIO_Init+0x310>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d013      	beq.n	8005ea8 <HAL_GPIO_Init+0x200>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a4e      	ldr	r2, [pc, #312]	@ (8005fbc <HAL_GPIO_Init+0x314>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d00d      	beq.n	8005ea4 <HAL_GPIO_Init+0x1fc>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a4d      	ldr	r2, [pc, #308]	@ (8005fc0 <HAL_GPIO_Init+0x318>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d007      	beq.n	8005ea0 <HAL_GPIO_Init+0x1f8>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4a4c      	ldr	r2, [pc, #304]	@ (8005fc4 <HAL_GPIO_Init+0x31c>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d101      	bne.n	8005e9c <HAL_GPIO_Init+0x1f4>
 8005e98:	2307      	movs	r3, #7
 8005e9a:	e00e      	b.n	8005eba <HAL_GPIO_Init+0x212>
 8005e9c:	2308      	movs	r3, #8
 8005e9e:	e00c      	b.n	8005eba <HAL_GPIO_Init+0x212>
 8005ea0:	2306      	movs	r3, #6
 8005ea2:	e00a      	b.n	8005eba <HAL_GPIO_Init+0x212>
 8005ea4:	2305      	movs	r3, #5
 8005ea6:	e008      	b.n	8005eba <HAL_GPIO_Init+0x212>
 8005ea8:	2304      	movs	r3, #4
 8005eaa:	e006      	b.n	8005eba <HAL_GPIO_Init+0x212>
 8005eac:	2303      	movs	r3, #3
 8005eae:	e004      	b.n	8005eba <HAL_GPIO_Init+0x212>
 8005eb0:	2302      	movs	r3, #2
 8005eb2:	e002      	b.n	8005eba <HAL_GPIO_Init+0x212>
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e000      	b.n	8005eba <HAL_GPIO_Init+0x212>
 8005eb8:	2300      	movs	r3, #0
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	f002 0203 	and.w	r2, r2, #3
 8005ec0:	0092      	lsls	r2, r2, #2
 8005ec2:	4093      	lsls	r3, r2
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005eca:	4937      	ldr	r1, [pc, #220]	@ (8005fa8 <HAL_GPIO_Init+0x300>)
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	089b      	lsrs	r3, r3, #2
 8005ed0:	3302      	adds	r3, #2
 8005ed2:	693a      	ldr	r2, [r7, #16]
 8005ed4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005ed8:	4b3b      	ldr	r3, [pc, #236]	@ (8005fc8 <HAL_GPIO_Init+0x320>)
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	43db      	mvns	r3, r3
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d003      	beq.n	8005efc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005efc:	4a32      	ldr	r2, [pc, #200]	@ (8005fc8 <HAL_GPIO_Init+0x320>)
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005f02:	4b31      	ldr	r3, [pc, #196]	@ (8005fc8 <HAL_GPIO_Init+0x320>)
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	43db      	mvns	r3, r3
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	4013      	ands	r3, r2
 8005f10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d003      	beq.n	8005f26 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8005f1e:	693a      	ldr	r2, [r7, #16]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005f26:	4a28      	ldr	r2, [pc, #160]	@ (8005fc8 <HAL_GPIO_Init+0x320>)
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005f2c:	4b26      	ldr	r3, [pc, #152]	@ (8005fc8 <HAL_GPIO_Init+0x320>)
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	43db      	mvns	r3, r3
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	4013      	ands	r3, r2
 8005f3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d003      	beq.n	8005f50 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005f50:	4a1d      	ldr	r2, [pc, #116]	@ (8005fc8 <HAL_GPIO_Init+0x320>)
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005f56:	4b1c      	ldr	r3, [pc, #112]	@ (8005fc8 <HAL_GPIO_Init+0x320>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	43db      	mvns	r3, r3
 8005f60:	693a      	ldr	r2, [r7, #16]
 8005f62:	4013      	ands	r3, r2
 8005f64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d003      	beq.n	8005f7a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005f7a:	4a13      	ldr	r2, [pc, #76]	@ (8005fc8 <HAL_GPIO_Init+0x320>)
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	3301      	adds	r3, #1
 8005f84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f47f ae91 	bne.w	8005cb8 <HAL_GPIO_Init+0x10>
  }
}
 8005f96:	bf00      	nop
 8005f98:	bf00      	nop
 8005f9a:	371c      	adds	r7, #28
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr
 8005fa4:	40021000 	.word	0x40021000
 8005fa8:	40010000 	.word	0x40010000
 8005fac:	48000400 	.word	0x48000400
 8005fb0:	48000800 	.word	0x48000800
 8005fb4:	48000c00 	.word	0x48000c00
 8005fb8:	48001000 	.word	0x48001000
 8005fbc:	48001400 	.word	0x48001400
 8005fc0:	48001800 	.word	0x48001800
 8005fc4:	48001c00 	.word	0x48001c00
 8005fc8:	40010400 	.word	0x40010400

08005fcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	807b      	strh	r3, [r7, #2]
 8005fd8:	4613      	mov	r3, r2
 8005fda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005fdc:	787b      	ldrb	r3, [r7, #1]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d003      	beq.n	8005fea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005fe2:	887a      	ldrh	r2, [r7, #2]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005fe8:	e002      	b.n	8005ff0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005fea:	887a      	ldrh	r2, [r7, #2]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005ff0:	bf00      	nop
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	460b      	mov	r3, r1
 8006006:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	695b      	ldr	r3, [r3, #20]
 800600c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800600e:	887a      	ldrh	r2, [r7, #2]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	4013      	ands	r3, r2
 8006014:	041a      	lsls	r2, r3, #16
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	43d9      	mvns	r1, r3
 800601a:	887b      	ldrh	r3, [r7, #2]
 800601c:	400b      	ands	r3, r1
 800601e:	431a      	orrs	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	619a      	str	r2, [r3, #24]
}
 8006024:	bf00      	nop
 8006026:	3714      	adds	r7, #20
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	4603      	mov	r3, r0
 8006038:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800603a:	4b08      	ldr	r3, [pc, #32]	@ (800605c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800603c:	695a      	ldr	r2, [r3, #20]
 800603e:	88fb      	ldrh	r3, [r7, #6]
 8006040:	4013      	ands	r3, r2
 8006042:	2b00      	cmp	r3, #0
 8006044:	d006      	beq.n	8006054 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006046:	4a05      	ldr	r2, [pc, #20]	@ (800605c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006048:	88fb      	ldrh	r3, [r7, #6]
 800604a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800604c:	88fb      	ldrh	r3, [r7, #6]
 800604e:	4618      	mov	r0, r3
 8006050:	f7fb fbb0 	bl	80017b4 <HAL_GPIO_EXTI_Callback>
  }
}
 8006054:	bf00      	nop
 8006056:	3708      	adds	r7, #8
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}
 800605c:	40010400 	.word	0x40010400

08006060 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d101      	bne.n	8006072 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e08d      	b.n	800618e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006078:	b2db      	uxtb	r3, r3
 800607a:	2b00      	cmp	r3, #0
 800607c:	d106      	bne.n	800608c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7fc f8e2 	bl	8002250 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2224      	movs	r2, #36	@ 0x24
 8006090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f022 0201 	bic.w	r2, r2, #1
 80060a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	685a      	ldr	r2, [r3, #4]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80060b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	689a      	ldr	r2, [r3, #8]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80060c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d107      	bne.n	80060da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	689a      	ldr	r2, [r3, #8]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80060d6:	609a      	str	r2, [r3, #8]
 80060d8:	e006      	b.n	80060e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	689a      	ldr	r2, [r3, #8]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80060e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d108      	bne.n	8006102 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	685a      	ldr	r2, [r3, #4]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060fe:	605a      	str	r2, [r3, #4]
 8006100:	e007      	b.n	8006112 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	685a      	ldr	r2, [r3, #4]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006110:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	6812      	ldr	r2, [r2, #0]
 800611c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006120:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006124:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68da      	ldr	r2, [r3, #12]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006134:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	691a      	ldr	r2, [r3, #16]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	695b      	ldr	r3, [r3, #20]
 800613e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	699b      	ldr	r3, [r3, #24]
 8006146:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	430a      	orrs	r2, r1
 800614e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	69d9      	ldr	r1, [r3, #28]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6a1a      	ldr	r2, [r3, #32]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	430a      	orrs	r2, r1
 800615e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f042 0201 	orr.w	r2, r2, #1
 800616e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2220      	movs	r2, #32
 800617a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	3708      	adds	r7, #8
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
	...

08006198 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b088      	sub	sp, #32
 800619c:	af02      	add	r7, sp, #8
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	4608      	mov	r0, r1
 80061a2:	4611      	mov	r1, r2
 80061a4:	461a      	mov	r2, r3
 80061a6:	4603      	mov	r3, r0
 80061a8:	817b      	strh	r3, [r7, #10]
 80061aa:	460b      	mov	r3, r1
 80061ac:	813b      	strh	r3, [r7, #8]
 80061ae:	4613      	mov	r3, r2
 80061b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	2b20      	cmp	r3, #32
 80061bc:	f040 80f9 	bne.w	80063b2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80061c0:	6a3b      	ldr	r3, [r7, #32]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d002      	beq.n	80061cc <HAL_I2C_Mem_Write+0x34>
 80061c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d105      	bne.n	80061d8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80061d2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e0ed      	b.n	80063b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d101      	bne.n	80061e6 <HAL_I2C_Mem_Write+0x4e>
 80061e2:	2302      	movs	r3, #2
 80061e4:	e0e6      	b.n	80063b4 <HAL_I2C_Mem_Write+0x21c>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80061ee:	f7fd fab3 	bl	8003758 <HAL_GetTick>
 80061f2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	9300      	str	r3, [sp, #0]
 80061f8:	2319      	movs	r3, #25
 80061fa:	2201      	movs	r2, #1
 80061fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f000 fac3 	bl	800678c <I2C_WaitOnFlagUntilTimeout>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d001      	beq.n	8006210 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e0d1      	b.n	80063b4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2221      	movs	r2, #33	@ 0x21
 8006214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2240      	movs	r2, #64	@ 0x40
 800621c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6a3a      	ldr	r2, [r7, #32]
 800622a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006230:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006238:	88f8      	ldrh	r0, [r7, #6]
 800623a:	893a      	ldrh	r2, [r7, #8]
 800623c:	8979      	ldrh	r1, [r7, #10]
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	9301      	str	r3, [sp, #4]
 8006242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006244:	9300      	str	r3, [sp, #0]
 8006246:	4603      	mov	r3, r0
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	f000 f9d3 	bl	80065f4 <I2C_RequestMemoryWrite>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d005      	beq.n	8006260 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e0a9      	b.n	80063b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006264:	b29b      	uxth	r3, r3
 8006266:	2bff      	cmp	r3, #255	@ 0xff
 8006268:	d90e      	bls.n	8006288 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	22ff      	movs	r2, #255	@ 0xff
 800626e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006274:	b2da      	uxtb	r2, r3
 8006276:	8979      	ldrh	r1, [r7, #10]
 8006278:	2300      	movs	r3, #0
 800627a:	9300      	str	r3, [sp, #0]
 800627c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f000 fc47 	bl	8006b14 <I2C_TransferConfig>
 8006286:	e00f      	b.n	80062a8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800628c:	b29a      	uxth	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006296:	b2da      	uxtb	r2, r3
 8006298:	8979      	ldrh	r1, [r7, #10]
 800629a:	2300      	movs	r3, #0
 800629c:	9300      	str	r3, [sp, #0]
 800629e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80062a2:	68f8      	ldr	r0, [r7, #12]
 80062a4:	f000 fc36 	bl	8006b14 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062a8:	697a      	ldr	r2, [r7, #20]
 80062aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f000 fac6 	bl	800683e <I2C_WaitOnTXISFlagUntilTimeout>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d001      	beq.n	80062bc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e07b      	b.n	80063b4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062c0:	781a      	ldrb	r2, [r3, #0]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062cc:	1c5a      	adds	r2, r3, #1
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	3b01      	subs	r3, #1
 80062da:	b29a      	uxth	r2, r3
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062e4:	3b01      	subs	r3, #1
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d034      	beq.n	8006360 <HAL_I2C_Mem_Write+0x1c8>
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d130      	bne.n	8006360 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	9300      	str	r3, [sp, #0]
 8006302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006304:	2200      	movs	r2, #0
 8006306:	2180      	movs	r1, #128	@ 0x80
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f000 fa3f 	bl	800678c <I2C_WaitOnFlagUntilTimeout>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d001      	beq.n	8006318 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	e04d      	b.n	80063b4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800631c:	b29b      	uxth	r3, r3
 800631e:	2bff      	cmp	r3, #255	@ 0xff
 8006320:	d90e      	bls.n	8006340 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	22ff      	movs	r2, #255	@ 0xff
 8006326:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800632c:	b2da      	uxtb	r2, r3
 800632e:	8979      	ldrh	r1, [r7, #10]
 8006330:	2300      	movs	r3, #0
 8006332:	9300      	str	r3, [sp, #0]
 8006334:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006338:	68f8      	ldr	r0, [r7, #12]
 800633a:	f000 fbeb 	bl	8006b14 <I2C_TransferConfig>
 800633e:	e00f      	b.n	8006360 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006344:	b29a      	uxth	r2, r3
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800634e:	b2da      	uxtb	r2, r3
 8006350:	8979      	ldrh	r1, [r7, #10]
 8006352:	2300      	movs	r3, #0
 8006354:	9300      	str	r3, [sp, #0]
 8006356:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800635a:	68f8      	ldr	r0, [r7, #12]
 800635c:	f000 fbda 	bl	8006b14 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006364:	b29b      	uxth	r3, r3
 8006366:	2b00      	cmp	r3, #0
 8006368:	d19e      	bne.n	80062a8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	f000 faac 	bl	80068cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d001      	beq.n	800637e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e01a      	b.n	80063b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2220      	movs	r2, #32
 8006384:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	6859      	ldr	r1, [r3, #4]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	4b0a      	ldr	r3, [pc, #40]	@ (80063bc <HAL_I2C_Mem_Write+0x224>)
 8006392:	400b      	ands	r3, r1
 8006394:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2220      	movs	r2, #32
 800639a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80063ae:	2300      	movs	r3, #0
 80063b0:	e000      	b.n	80063b4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80063b2:	2302      	movs	r3, #2
  }
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3718      	adds	r7, #24
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	fe00e800 	.word	0xfe00e800

080063c0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b088      	sub	sp, #32
 80063c4:	af02      	add	r7, sp, #8
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	4608      	mov	r0, r1
 80063ca:	4611      	mov	r1, r2
 80063cc:	461a      	mov	r2, r3
 80063ce:	4603      	mov	r3, r0
 80063d0:	817b      	strh	r3, [r7, #10]
 80063d2:	460b      	mov	r3, r1
 80063d4:	813b      	strh	r3, [r7, #8]
 80063d6:	4613      	mov	r3, r2
 80063d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b20      	cmp	r3, #32
 80063e4:	f040 80fd 	bne.w	80065e2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80063e8:	6a3b      	ldr	r3, [r7, #32]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d002      	beq.n	80063f4 <HAL_I2C_Mem_Read+0x34>
 80063ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d105      	bne.n	8006400 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063fa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e0f1      	b.n	80065e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006406:	2b01      	cmp	r3, #1
 8006408:	d101      	bne.n	800640e <HAL_I2C_Mem_Read+0x4e>
 800640a:	2302      	movs	r3, #2
 800640c:	e0ea      	b.n	80065e4 <HAL_I2C_Mem_Read+0x224>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2201      	movs	r2, #1
 8006412:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006416:	f7fd f99f 	bl	8003758 <HAL_GetTick>
 800641a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	9300      	str	r3, [sp, #0]
 8006420:	2319      	movs	r3, #25
 8006422:	2201      	movs	r2, #1
 8006424:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f000 f9af 	bl	800678c <I2C_WaitOnFlagUntilTimeout>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d001      	beq.n	8006438 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e0d5      	b.n	80065e4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2222      	movs	r2, #34	@ 0x22
 800643c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2240      	movs	r2, #64	@ 0x40
 8006444:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6a3a      	ldr	r2, [r7, #32]
 8006452:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006458:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006460:	88f8      	ldrh	r0, [r7, #6]
 8006462:	893a      	ldrh	r2, [r7, #8]
 8006464:	8979      	ldrh	r1, [r7, #10]
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	9301      	str	r3, [sp, #4]
 800646a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800646c:	9300      	str	r3, [sp, #0]
 800646e:	4603      	mov	r3, r0
 8006470:	68f8      	ldr	r0, [r7, #12]
 8006472:	f000 f913 	bl	800669c <I2C_RequestMemoryRead>
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d005      	beq.n	8006488 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2200      	movs	r2, #0
 8006480:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	e0ad      	b.n	80065e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800648c:	b29b      	uxth	r3, r3
 800648e:	2bff      	cmp	r3, #255	@ 0xff
 8006490:	d90e      	bls.n	80064b0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2201      	movs	r2, #1
 8006496:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800649c:	b2da      	uxtb	r2, r3
 800649e:	8979      	ldrh	r1, [r7, #10]
 80064a0:	4b52      	ldr	r3, [pc, #328]	@ (80065ec <HAL_I2C_Mem_Read+0x22c>)
 80064a2:	9300      	str	r3, [sp, #0]
 80064a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	f000 fb33 	bl	8006b14 <I2C_TransferConfig>
 80064ae:	e00f      	b.n	80064d0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064be:	b2da      	uxtb	r2, r3
 80064c0:	8979      	ldrh	r1, [r7, #10]
 80064c2:	4b4a      	ldr	r3, [pc, #296]	@ (80065ec <HAL_I2C_Mem_Read+0x22c>)
 80064c4:	9300      	str	r3, [sp, #0]
 80064c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80064ca:	68f8      	ldr	r0, [r7, #12]
 80064cc:	f000 fb22 	bl	8006b14 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	9300      	str	r3, [sp, #0]
 80064d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064d6:	2200      	movs	r2, #0
 80064d8:	2104      	movs	r1, #4
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f000 f956 	bl	800678c <I2C_WaitOnFlagUntilTimeout>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d001      	beq.n	80064ea <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e07c      	b.n	80065e4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f4:	b2d2      	uxtb	r2, r2
 80064f6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064fc:	1c5a      	adds	r2, r3, #1
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006506:	3b01      	subs	r3, #1
 8006508:	b29a      	uxth	r2, r3
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006512:	b29b      	uxth	r3, r3
 8006514:	3b01      	subs	r3, #1
 8006516:	b29a      	uxth	r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006520:	b29b      	uxth	r3, r3
 8006522:	2b00      	cmp	r3, #0
 8006524:	d034      	beq.n	8006590 <HAL_I2C_Mem_Read+0x1d0>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800652a:	2b00      	cmp	r3, #0
 800652c:	d130      	bne.n	8006590 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006534:	2200      	movs	r2, #0
 8006536:	2180      	movs	r1, #128	@ 0x80
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f000 f927 	bl	800678c <I2C_WaitOnFlagUntilTimeout>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d001      	beq.n	8006548 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e04d      	b.n	80065e4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800654c:	b29b      	uxth	r3, r3
 800654e:	2bff      	cmp	r3, #255	@ 0xff
 8006550:	d90e      	bls.n	8006570 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2201      	movs	r2, #1
 8006556:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800655c:	b2da      	uxtb	r2, r3
 800655e:	8979      	ldrh	r1, [r7, #10]
 8006560:	2300      	movs	r3, #0
 8006562:	9300      	str	r3, [sp, #0]
 8006564:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f000 fad3 	bl	8006b14 <I2C_TransferConfig>
 800656e:	e00f      	b.n	8006590 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006574:	b29a      	uxth	r2, r3
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800657e:	b2da      	uxtb	r2, r3
 8006580:	8979      	ldrh	r1, [r7, #10]
 8006582:	2300      	movs	r3, #0
 8006584:	9300      	str	r3, [sp, #0]
 8006586:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800658a:	68f8      	ldr	r0, [r7, #12]
 800658c:	f000 fac2 	bl	8006b14 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006594:	b29b      	uxth	r3, r3
 8006596:	2b00      	cmp	r3, #0
 8006598:	d19a      	bne.n	80064d0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800659a:	697a      	ldr	r2, [r7, #20]
 800659c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800659e:	68f8      	ldr	r0, [r7, #12]
 80065a0:	f000 f994 	bl	80068cc <I2C_WaitOnSTOPFlagUntilTimeout>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d001      	beq.n	80065ae <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e01a      	b.n	80065e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	2220      	movs	r2, #32
 80065b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	6859      	ldr	r1, [r3, #4]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	4b0b      	ldr	r3, [pc, #44]	@ (80065f0 <HAL_I2C_Mem_Read+0x230>)
 80065c2:	400b      	ands	r3, r1
 80065c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2220      	movs	r2, #32
 80065ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80065de:	2300      	movs	r3, #0
 80065e0:	e000      	b.n	80065e4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80065e2:	2302      	movs	r3, #2
  }
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3718      	adds	r7, #24
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	80002400 	.word	0x80002400
 80065f0:	fe00e800 	.word	0xfe00e800

080065f4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b086      	sub	sp, #24
 80065f8:	af02      	add	r7, sp, #8
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	4608      	mov	r0, r1
 80065fe:	4611      	mov	r1, r2
 8006600:	461a      	mov	r2, r3
 8006602:	4603      	mov	r3, r0
 8006604:	817b      	strh	r3, [r7, #10]
 8006606:	460b      	mov	r3, r1
 8006608:	813b      	strh	r3, [r7, #8]
 800660a:	4613      	mov	r3, r2
 800660c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800660e:	88fb      	ldrh	r3, [r7, #6]
 8006610:	b2da      	uxtb	r2, r3
 8006612:	8979      	ldrh	r1, [r7, #10]
 8006614:	4b20      	ldr	r3, [pc, #128]	@ (8006698 <I2C_RequestMemoryWrite+0xa4>)
 8006616:	9300      	str	r3, [sp, #0]
 8006618:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800661c:	68f8      	ldr	r0, [r7, #12]
 800661e:	f000 fa79 	bl	8006b14 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006622:	69fa      	ldr	r2, [r7, #28]
 8006624:	69b9      	ldr	r1, [r7, #24]
 8006626:	68f8      	ldr	r0, [r7, #12]
 8006628:	f000 f909 	bl	800683e <I2C_WaitOnTXISFlagUntilTimeout>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d001      	beq.n	8006636 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e02c      	b.n	8006690 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006636:	88fb      	ldrh	r3, [r7, #6]
 8006638:	2b01      	cmp	r3, #1
 800663a:	d105      	bne.n	8006648 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800663c:	893b      	ldrh	r3, [r7, #8]
 800663e:	b2da      	uxtb	r2, r3
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	629a      	str	r2, [r3, #40]	@ 0x28
 8006646:	e015      	b.n	8006674 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006648:	893b      	ldrh	r3, [r7, #8]
 800664a:	0a1b      	lsrs	r3, r3, #8
 800664c:	b29b      	uxth	r3, r3
 800664e:	b2da      	uxtb	r2, r3
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006656:	69fa      	ldr	r2, [r7, #28]
 8006658:	69b9      	ldr	r1, [r7, #24]
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f000 f8ef 	bl	800683e <I2C_WaitOnTXISFlagUntilTimeout>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d001      	beq.n	800666a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e012      	b.n	8006690 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800666a:	893b      	ldrh	r3, [r7, #8]
 800666c:	b2da      	uxtb	r2, r3
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	9300      	str	r3, [sp, #0]
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	2200      	movs	r2, #0
 800667c:	2180      	movs	r1, #128	@ 0x80
 800667e:	68f8      	ldr	r0, [r7, #12]
 8006680:	f000 f884 	bl	800678c <I2C_WaitOnFlagUntilTimeout>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d001      	beq.n	800668e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e000      	b.n	8006690 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	3710      	adds	r7, #16
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	80002000 	.word	0x80002000

0800669c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b086      	sub	sp, #24
 80066a0:	af02      	add	r7, sp, #8
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	4608      	mov	r0, r1
 80066a6:	4611      	mov	r1, r2
 80066a8:	461a      	mov	r2, r3
 80066aa:	4603      	mov	r3, r0
 80066ac:	817b      	strh	r3, [r7, #10]
 80066ae:	460b      	mov	r3, r1
 80066b0:	813b      	strh	r3, [r7, #8]
 80066b2:	4613      	mov	r3, r2
 80066b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80066b6:	88fb      	ldrh	r3, [r7, #6]
 80066b8:	b2da      	uxtb	r2, r3
 80066ba:	8979      	ldrh	r1, [r7, #10]
 80066bc:	4b20      	ldr	r3, [pc, #128]	@ (8006740 <I2C_RequestMemoryRead+0xa4>)
 80066be:	9300      	str	r3, [sp, #0]
 80066c0:	2300      	movs	r3, #0
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f000 fa26 	bl	8006b14 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066c8:	69fa      	ldr	r2, [r7, #28]
 80066ca:	69b9      	ldr	r1, [r7, #24]
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	f000 f8b6 	bl	800683e <I2C_WaitOnTXISFlagUntilTimeout>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d001      	beq.n	80066dc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	e02c      	b.n	8006736 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80066dc:	88fb      	ldrh	r3, [r7, #6]
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d105      	bne.n	80066ee <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80066e2:	893b      	ldrh	r3, [r7, #8]
 80066e4:	b2da      	uxtb	r2, r3
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	629a      	str	r2, [r3, #40]	@ 0x28
 80066ec:	e015      	b.n	800671a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80066ee:	893b      	ldrh	r3, [r7, #8]
 80066f0:	0a1b      	lsrs	r3, r3, #8
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	b2da      	uxtb	r2, r3
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066fc:	69fa      	ldr	r2, [r7, #28]
 80066fe:	69b9      	ldr	r1, [r7, #24]
 8006700:	68f8      	ldr	r0, [r7, #12]
 8006702:	f000 f89c 	bl	800683e <I2C_WaitOnTXISFlagUntilTimeout>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d001      	beq.n	8006710 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e012      	b.n	8006736 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006710:	893b      	ldrh	r3, [r7, #8]
 8006712:	b2da      	uxtb	r2, r3
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	9300      	str	r3, [sp, #0]
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	2200      	movs	r2, #0
 8006722:	2140      	movs	r1, #64	@ 0x40
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	f000 f831 	bl	800678c <I2C_WaitOnFlagUntilTimeout>
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d001      	beq.n	8006734 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	e000      	b.n	8006736 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	3710      	adds	r7, #16
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	80002000 	.word	0x80002000

08006744 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	699b      	ldr	r3, [r3, #24]
 8006752:	f003 0302 	and.w	r3, r3, #2
 8006756:	2b02      	cmp	r3, #2
 8006758:	d103      	bne.n	8006762 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2200      	movs	r2, #0
 8006760:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	f003 0301 	and.w	r3, r3, #1
 800676c:	2b01      	cmp	r3, #1
 800676e:	d007      	beq.n	8006780 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	699a      	ldr	r2, [r3, #24]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f042 0201 	orr.w	r2, r2, #1
 800677e:	619a      	str	r2, [r3, #24]
  }
}
 8006780:	bf00      	nop
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	60b9      	str	r1, [r7, #8]
 8006796:	603b      	str	r3, [r7, #0]
 8006798:	4613      	mov	r3, r2
 800679a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800679c:	e03b      	b.n	8006816 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800679e:	69ba      	ldr	r2, [r7, #24]
 80067a0:	6839      	ldr	r1, [r7, #0]
 80067a2:	68f8      	ldr	r0, [r7, #12]
 80067a4:	f000 f8d6 	bl	8006954 <I2C_IsErrorOccurred>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d001      	beq.n	80067b2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e041      	b.n	8006836 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b8:	d02d      	beq.n	8006816 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067ba:	f7fc ffcd 	bl	8003758 <HAL_GetTick>
 80067be:	4602      	mov	r2, r0
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	1ad3      	subs	r3, r2, r3
 80067c4:	683a      	ldr	r2, [r7, #0]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d302      	bcc.n	80067d0 <I2C_WaitOnFlagUntilTimeout+0x44>
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d122      	bne.n	8006816 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	699a      	ldr	r2, [r3, #24]
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	4013      	ands	r3, r2
 80067da:	68ba      	ldr	r2, [r7, #8]
 80067dc:	429a      	cmp	r2, r3
 80067de:	bf0c      	ite	eq
 80067e0:	2301      	moveq	r3, #1
 80067e2:	2300      	movne	r3, #0
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	461a      	mov	r2, r3
 80067e8:	79fb      	ldrb	r3, [r7, #7]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d113      	bne.n	8006816 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067f2:	f043 0220 	orr.w	r2, r3, #32
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2220      	movs	r2, #32
 80067fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e00f      	b.n	8006836 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	699a      	ldr	r2, [r3, #24]
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	4013      	ands	r3, r2
 8006820:	68ba      	ldr	r2, [r7, #8]
 8006822:	429a      	cmp	r2, r3
 8006824:	bf0c      	ite	eq
 8006826:	2301      	moveq	r3, #1
 8006828:	2300      	movne	r3, #0
 800682a:	b2db      	uxtb	r3, r3
 800682c:	461a      	mov	r2, r3
 800682e:	79fb      	ldrb	r3, [r7, #7]
 8006830:	429a      	cmp	r2, r3
 8006832:	d0b4      	beq.n	800679e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800683e:	b580      	push	{r7, lr}
 8006840:	b084      	sub	sp, #16
 8006842:	af00      	add	r7, sp, #0
 8006844:	60f8      	str	r0, [r7, #12]
 8006846:	60b9      	str	r1, [r7, #8]
 8006848:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800684a:	e033      	b.n	80068b4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	68b9      	ldr	r1, [r7, #8]
 8006850:	68f8      	ldr	r0, [r7, #12]
 8006852:	f000 f87f 	bl	8006954 <I2C_IsErrorOccurred>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d001      	beq.n	8006860 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	e031      	b.n	80068c4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006866:	d025      	beq.n	80068b4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006868:	f7fc ff76 	bl	8003758 <HAL_GetTick>
 800686c:	4602      	mov	r2, r0
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	68ba      	ldr	r2, [r7, #8]
 8006874:	429a      	cmp	r2, r3
 8006876:	d302      	bcc.n	800687e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d11a      	bne.n	80068b4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	699b      	ldr	r3, [r3, #24]
 8006884:	f003 0302 	and.w	r3, r3, #2
 8006888:	2b02      	cmp	r3, #2
 800688a:	d013      	beq.n	80068b4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006890:	f043 0220 	orr.w	r2, r3, #32
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2220      	movs	r2, #32
 800689c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e007      	b.n	80068c4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	f003 0302 	and.w	r3, r3, #2
 80068be:	2b02      	cmp	r3, #2
 80068c0:	d1c4      	bne.n	800684c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80068c2:	2300      	movs	r3, #0
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3710      	adds	r7, #16
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068d8:	e02f      	b.n	800693a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	68b9      	ldr	r1, [r7, #8]
 80068de:	68f8      	ldr	r0, [r7, #12]
 80068e0:	f000 f838 	bl	8006954 <I2C_IsErrorOccurred>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d001      	beq.n	80068ee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e02d      	b.n	800694a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068ee:	f7fc ff33 	bl	8003758 <HAL_GetTick>
 80068f2:	4602      	mov	r2, r0
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	1ad3      	subs	r3, r2, r3
 80068f8:	68ba      	ldr	r2, [r7, #8]
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d302      	bcc.n	8006904 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d11a      	bne.n	800693a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	f003 0320 	and.w	r3, r3, #32
 800690e:	2b20      	cmp	r3, #32
 8006910:	d013      	beq.n	800693a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006916:	f043 0220 	orr.w	r2, r3, #32
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2220      	movs	r2, #32
 8006922:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e007      	b.n	800694a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	699b      	ldr	r3, [r3, #24]
 8006940:	f003 0320 	and.w	r3, r3, #32
 8006944:	2b20      	cmp	r3, #32
 8006946:	d1c8      	bne.n	80068da <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
	...

08006954 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b08a      	sub	sp, #40	@ 0x28
 8006958:	af00      	add	r7, sp, #0
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006960:	2300      	movs	r3, #0
 8006962:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	699b      	ldr	r3, [r3, #24]
 800696c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800696e:	2300      	movs	r3, #0
 8006970:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	f003 0310 	and.w	r3, r3, #16
 800697c:	2b00      	cmp	r3, #0
 800697e:	d068      	beq.n	8006a52 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2210      	movs	r2, #16
 8006986:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006988:	e049      	b.n	8006a1e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006990:	d045      	beq.n	8006a1e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006992:	f7fc fee1 	bl	8003758 <HAL_GetTick>
 8006996:	4602      	mov	r2, r0
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	1ad3      	subs	r3, r2, r3
 800699c:	68ba      	ldr	r2, [r7, #8]
 800699e:	429a      	cmp	r2, r3
 80069a0:	d302      	bcc.n	80069a8 <I2C_IsErrorOccurred+0x54>
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d13a      	bne.n	8006a1e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80069b2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80069ba:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	699b      	ldr	r3, [r3, #24]
 80069c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80069c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069ca:	d121      	bne.n	8006a10 <I2C_IsErrorOccurred+0xbc>
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069d2:	d01d      	beq.n	8006a10 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80069d4:	7cfb      	ldrb	r3, [r7, #19]
 80069d6:	2b20      	cmp	r3, #32
 80069d8:	d01a      	beq.n	8006a10 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	685a      	ldr	r2, [r3, #4]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80069e8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80069ea:	f7fc feb5 	bl	8003758 <HAL_GetTick>
 80069ee:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069f0:	e00e      	b.n	8006a10 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80069f2:	f7fc feb1 	bl	8003758 <HAL_GetTick>
 80069f6:	4602      	mov	r2, r0
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	1ad3      	subs	r3, r2, r3
 80069fc:	2b19      	cmp	r3, #25
 80069fe:	d907      	bls.n	8006a10 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006a00:	6a3b      	ldr	r3, [r7, #32]
 8006a02:	f043 0320 	orr.w	r3, r3, #32
 8006a06:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006a0e:	e006      	b.n	8006a1e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	f003 0320 	and.w	r3, r3, #32
 8006a1a:	2b20      	cmp	r3, #32
 8006a1c:	d1e9      	bne.n	80069f2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	699b      	ldr	r3, [r3, #24]
 8006a24:	f003 0320 	and.w	r3, r3, #32
 8006a28:	2b20      	cmp	r3, #32
 8006a2a:	d003      	beq.n	8006a34 <I2C_IsErrorOccurred+0xe0>
 8006a2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d0aa      	beq.n	800698a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006a34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d103      	bne.n	8006a44 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	2220      	movs	r2, #32
 8006a42:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006a44:	6a3b      	ldr	r3, [r7, #32]
 8006a46:	f043 0304 	orr.w	r3, r3, #4
 8006a4a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d00b      	beq.n	8006a7c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006a64:	6a3b      	ldr	r3, [r7, #32]
 8006a66:	f043 0301 	orr.w	r3, r3, #1
 8006a6a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006a74:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006a7c:	69bb      	ldr	r3, [r7, #24]
 8006a7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00b      	beq.n	8006a9e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006a86:	6a3b      	ldr	r3, [r7, #32]
 8006a88:	f043 0308 	orr.w	r3, r3, #8
 8006a8c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006a96:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00b      	beq.n	8006ac0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006aa8:	6a3b      	ldr	r3, [r7, #32]
 8006aaa:	f043 0302 	orr.w	r3, r3, #2
 8006aae:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ab8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006ac0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d01c      	beq.n	8006b02 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006ac8:	68f8      	ldr	r0, [r7, #12]
 8006aca:	f7ff fe3b 	bl	8006744 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	6859      	ldr	r1, [r3, #4]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	4b0d      	ldr	r3, [pc, #52]	@ (8006b10 <I2C_IsErrorOccurred+0x1bc>)
 8006ada:	400b      	ands	r3, r1
 8006adc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ae2:	6a3b      	ldr	r3, [r7, #32]
 8006ae4:	431a      	orrs	r2, r3
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2220      	movs	r2, #32
 8006aee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006b02:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3728      	adds	r7, #40	@ 0x28
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	fe00e800 	.word	0xfe00e800

08006b14 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b087      	sub	sp, #28
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	607b      	str	r3, [r7, #4]
 8006b1e:	460b      	mov	r3, r1
 8006b20:	817b      	strh	r3, [r7, #10]
 8006b22:	4613      	mov	r3, r2
 8006b24:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b26:	897b      	ldrh	r3, [r7, #10]
 8006b28:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b2c:	7a7b      	ldrb	r3, [r7, #9]
 8006b2e:	041b      	lsls	r3, r3, #16
 8006b30:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b34:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b3a:	6a3b      	ldr	r3, [r7, #32]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006b42:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	685a      	ldr	r2, [r3, #4]
 8006b4a:	6a3b      	ldr	r3, [r7, #32]
 8006b4c:	0d5b      	lsrs	r3, r3, #21
 8006b4e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006b52:	4b08      	ldr	r3, [pc, #32]	@ (8006b74 <I2C_TransferConfig+0x60>)
 8006b54:	430b      	orrs	r3, r1
 8006b56:	43db      	mvns	r3, r3
 8006b58:	ea02 0103 	and.w	r1, r2, r3
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	697a      	ldr	r2, [r7, #20]
 8006b62:	430a      	orrs	r2, r1
 8006b64:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006b66:	bf00      	nop
 8006b68:	371c      	adds	r7, #28
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr
 8006b72:	bf00      	nop
 8006b74:	03ff63ff 	.word	0x03ff63ff

08006b78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	2b20      	cmp	r3, #32
 8006b8c:	d138      	bne.n	8006c00 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d101      	bne.n	8006b9c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006b98:	2302      	movs	r3, #2
 8006b9a:	e032      	b.n	8006c02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2224      	movs	r2, #36	@ 0x24
 8006ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f022 0201 	bic.w	r2, r2, #1
 8006bba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006bca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	6819      	ldr	r1, [r3, #0]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	683a      	ldr	r2, [r7, #0]
 8006bd8:	430a      	orrs	r2, r1
 8006bda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f042 0201 	orr.w	r2, r2, #1
 8006bea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2220      	movs	r2, #32
 8006bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	e000      	b.n	8006c02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006c00:	2302      	movs	r3, #2
  }
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	370c      	adds	r7, #12
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr

08006c0e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006c0e:	b480      	push	{r7}
 8006c10:	b085      	sub	sp, #20
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
 8006c16:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	2b20      	cmp	r3, #32
 8006c22:	d139      	bne.n	8006c98 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d101      	bne.n	8006c32 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006c2e:	2302      	movs	r3, #2
 8006c30:	e033      	b.n	8006c9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2201      	movs	r2, #1
 8006c36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2224      	movs	r2, #36	@ 0x24
 8006c3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f022 0201 	bic.w	r2, r2, #1
 8006c50:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006c60:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	021b      	lsls	r3, r3, #8
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f042 0201 	orr.w	r2, r2, #1
 8006c82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2220      	movs	r2, #32
 8006c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006c94:	2300      	movs	r3, #0
 8006c96:	e000      	b.n	8006c9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006c98:	2302      	movs	r3, #2
  }
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3714      	adds	r7, #20
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr
	...

08006ca8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006cac:	4b04      	ldr	r3, [pc, #16]	@ (8006cc0 <HAL_PWREx_GetVoltageRange+0x18>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop
 8006cc0:	40007000 	.word	0x40007000

08006cc4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b085      	sub	sp, #20
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cd2:	d130      	bne.n	8006d36 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006cd4:	4b23      	ldr	r3, [pc, #140]	@ (8006d64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006cdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ce0:	d038      	beq.n	8006d54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006ce2:	4b20      	ldr	r3, [pc, #128]	@ (8006d64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006cea:	4a1e      	ldr	r2, [pc, #120]	@ (8006d64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006cec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006cf0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006cf2:	4b1d      	ldr	r3, [pc, #116]	@ (8006d68 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2232      	movs	r2, #50	@ 0x32
 8006cf8:	fb02 f303 	mul.w	r3, r2, r3
 8006cfc:	4a1b      	ldr	r2, [pc, #108]	@ (8006d6c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8006d02:	0c9b      	lsrs	r3, r3, #18
 8006d04:	3301      	adds	r3, #1
 8006d06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006d08:	e002      	b.n	8006d10 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006d10:	4b14      	ldr	r3, [pc, #80]	@ (8006d64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006d12:	695b      	ldr	r3, [r3, #20]
 8006d14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d1c:	d102      	bne.n	8006d24 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1f2      	bne.n	8006d0a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006d24:	4b0f      	ldr	r3, [pc, #60]	@ (8006d64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006d26:	695b      	ldr	r3, [r3, #20]
 8006d28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d30:	d110      	bne.n	8006d54 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006d32:	2303      	movs	r3, #3
 8006d34:	e00f      	b.n	8006d56 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006d36:	4b0b      	ldr	r3, [pc, #44]	@ (8006d64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006d3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d42:	d007      	beq.n	8006d54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006d44:	4b07      	ldr	r3, [pc, #28]	@ (8006d64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006d4c:	4a05      	ldr	r2, [pc, #20]	@ (8006d64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006d4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006d52:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3714      	adds	r7, #20
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	40007000 	.word	0x40007000
 8006d68:	20000000 	.word	0x20000000
 8006d6c:	431bde83 	.word	0x431bde83

08006d70 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b088      	sub	sp, #32
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d102      	bne.n	8006d84 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	f000 bc08 	b.w	8007594 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d84:	4b96      	ldr	r3, [pc, #600]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	f003 030c 	and.w	r3, r3, #12
 8006d8c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006d8e:	4b94      	ldr	r3, [pc, #592]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	f003 0303 	and.w	r3, r3, #3
 8006d96:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 0310 	and.w	r3, r3, #16
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	f000 80e4 	beq.w	8006f6e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d007      	beq.n	8006dbc <HAL_RCC_OscConfig+0x4c>
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	2b0c      	cmp	r3, #12
 8006db0:	f040 808b 	bne.w	8006eca <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	f040 8087 	bne.w	8006eca <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006dbc:	4b88      	ldr	r3, [pc, #544]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f003 0302 	and.w	r3, r3, #2
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d005      	beq.n	8006dd4 <HAL_RCC_OscConfig+0x64>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	699b      	ldr	r3, [r3, #24]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d101      	bne.n	8006dd4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e3df      	b.n	8007594 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6a1a      	ldr	r2, [r3, #32]
 8006dd8:	4b81      	ldr	r3, [pc, #516]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 0308 	and.w	r3, r3, #8
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d004      	beq.n	8006dee <HAL_RCC_OscConfig+0x7e>
 8006de4:	4b7e      	ldr	r3, [pc, #504]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006dec:	e005      	b.n	8006dfa <HAL_RCC_OscConfig+0x8a>
 8006dee:	4b7c      	ldr	r3, [pc, #496]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006df0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006df4:	091b      	lsrs	r3, r3, #4
 8006df6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d223      	bcs.n	8006e46 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a1b      	ldr	r3, [r3, #32]
 8006e02:	4618      	mov	r0, r3
 8006e04:	f000 fdc4 	bl	8007990 <RCC_SetFlashLatencyFromMSIRange>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d001      	beq.n	8006e12 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e3c0      	b.n	8007594 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006e12:	4b73      	ldr	r3, [pc, #460]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a72      	ldr	r2, [pc, #456]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006e18:	f043 0308 	orr.w	r3, r3, #8
 8006e1c:	6013      	str	r3, [r2, #0]
 8006e1e:	4b70      	ldr	r3, [pc, #448]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a1b      	ldr	r3, [r3, #32]
 8006e2a:	496d      	ldr	r1, [pc, #436]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006e30:	4b6b      	ldr	r3, [pc, #428]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	69db      	ldr	r3, [r3, #28]
 8006e3c:	021b      	lsls	r3, r3, #8
 8006e3e:	4968      	ldr	r1, [pc, #416]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006e40:	4313      	orrs	r3, r2
 8006e42:	604b      	str	r3, [r1, #4]
 8006e44:	e025      	b.n	8006e92 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006e46:	4b66      	ldr	r3, [pc, #408]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a65      	ldr	r2, [pc, #404]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006e4c:	f043 0308 	orr.w	r3, r3, #8
 8006e50:	6013      	str	r3, [r2, #0]
 8006e52:	4b63      	ldr	r3, [pc, #396]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a1b      	ldr	r3, [r3, #32]
 8006e5e:	4960      	ldr	r1, [pc, #384]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006e60:	4313      	orrs	r3, r2
 8006e62:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006e64:	4b5e      	ldr	r3, [pc, #376]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	69db      	ldr	r3, [r3, #28]
 8006e70:	021b      	lsls	r3, r3, #8
 8006e72:	495b      	ldr	r1, [pc, #364]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006e74:	4313      	orrs	r3, r2
 8006e76:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d109      	bne.n	8006e92 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6a1b      	ldr	r3, [r3, #32]
 8006e82:	4618      	mov	r0, r3
 8006e84:	f000 fd84 	bl	8007990 <RCC_SetFlashLatencyFromMSIRange>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d001      	beq.n	8006e92 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e380      	b.n	8007594 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006e92:	f000 fc87 	bl	80077a4 <HAL_RCC_GetSysClockFreq>
 8006e96:	4602      	mov	r2, r0
 8006e98:	4b51      	ldr	r3, [pc, #324]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	091b      	lsrs	r3, r3, #4
 8006e9e:	f003 030f 	and.w	r3, r3, #15
 8006ea2:	4950      	ldr	r1, [pc, #320]	@ (8006fe4 <HAL_RCC_OscConfig+0x274>)
 8006ea4:	5ccb      	ldrb	r3, [r1, r3]
 8006ea6:	f003 031f 	and.w	r3, r3, #31
 8006eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8006eae:	4a4e      	ldr	r2, [pc, #312]	@ (8006fe8 <HAL_RCC_OscConfig+0x278>)
 8006eb0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006eb2:	4b4e      	ldr	r3, [pc, #312]	@ (8006fec <HAL_RCC_OscConfig+0x27c>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7fb fa90 	bl	80023dc <HAL_InitTick>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006ec0:	7bfb      	ldrb	r3, [r7, #15]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d052      	beq.n	8006f6c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006ec6:	7bfb      	ldrb	r3, [r7, #15]
 8006ec8:	e364      	b.n	8007594 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	699b      	ldr	r3, [r3, #24]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d032      	beq.n	8006f38 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006ed2:	4b43      	ldr	r3, [pc, #268]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a42      	ldr	r2, [pc, #264]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006ed8:	f043 0301 	orr.w	r3, r3, #1
 8006edc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006ede:	f7fc fc3b 	bl	8003758 <HAL_GetTick>
 8006ee2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006ee4:	e008      	b.n	8006ef8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006ee6:	f7fc fc37 	bl	8003758 <HAL_GetTick>
 8006eea:	4602      	mov	r2, r0
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d901      	bls.n	8006ef8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	e34d      	b.n	8007594 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006ef8:	4b39      	ldr	r3, [pc, #228]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 0302 	and.w	r3, r3, #2
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d0f0      	beq.n	8006ee6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006f04:	4b36      	ldr	r3, [pc, #216]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a35      	ldr	r2, [pc, #212]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006f0a:	f043 0308 	orr.w	r3, r3, #8
 8006f0e:	6013      	str	r3, [r2, #0]
 8006f10:	4b33      	ldr	r3, [pc, #204]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6a1b      	ldr	r3, [r3, #32]
 8006f1c:	4930      	ldr	r1, [pc, #192]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f22:	4b2f      	ldr	r3, [pc, #188]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	69db      	ldr	r3, [r3, #28]
 8006f2e:	021b      	lsls	r3, r3, #8
 8006f30:	492b      	ldr	r1, [pc, #172]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006f32:	4313      	orrs	r3, r2
 8006f34:	604b      	str	r3, [r1, #4]
 8006f36:	e01a      	b.n	8006f6e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006f38:	4b29      	ldr	r3, [pc, #164]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a28      	ldr	r2, [pc, #160]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006f3e:	f023 0301 	bic.w	r3, r3, #1
 8006f42:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006f44:	f7fc fc08 	bl	8003758 <HAL_GetTick>
 8006f48:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006f4a:	e008      	b.n	8006f5e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006f4c:	f7fc fc04 	bl	8003758 <HAL_GetTick>
 8006f50:	4602      	mov	r2, r0
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d901      	bls.n	8006f5e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006f5a:	2303      	movs	r3, #3
 8006f5c:	e31a      	b.n	8007594 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006f5e:	4b20      	ldr	r3, [pc, #128]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 0302 	and.w	r3, r3, #2
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1f0      	bne.n	8006f4c <HAL_RCC_OscConfig+0x1dc>
 8006f6a:	e000      	b.n	8006f6e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006f6c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 0301 	and.w	r3, r3, #1
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d073      	beq.n	8007062 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	2b08      	cmp	r3, #8
 8006f7e:	d005      	beq.n	8006f8c <HAL_RCC_OscConfig+0x21c>
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	2b0c      	cmp	r3, #12
 8006f84:	d10e      	bne.n	8006fa4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	2b03      	cmp	r3, #3
 8006f8a:	d10b      	bne.n	8006fa4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f8c:	4b14      	ldr	r3, [pc, #80]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d063      	beq.n	8007060 <HAL_RCC_OscConfig+0x2f0>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d15f      	bne.n	8007060 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e2f7      	b.n	8007594 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fac:	d106      	bne.n	8006fbc <HAL_RCC_OscConfig+0x24c>
 8006fae:	4b0c      	ldr	r3, [pc, #48]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a0b      	ldr	r2, [pc, #44]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006fb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fb8:	6013      	str	r3, [r2, #0]
 8006fba:	e025      	b.n	8007008 <HAL_RCC_OscConfig+0x298>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006fc4:	d114      	bne.n	8006ff0 <HAL_RCC_OscConfig+0x280>
 8006fc6:	4b06      	ldr	r3, [pc, #24]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a05      	ldr	r2, [pc, #20]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006fcc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006fd0:	6013      	str	r3, [r2, #0]
 8006fd2:	4b03      	ldr	r3, [pc, #12]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a02      	ldr	r2, [pc, #8]	@ (8006fe0 <HAL_RCC_OscConfig+0x270>)
 8006fd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fdc:	6013      	str	r3, [r2, #0]
 8006fde:	e013      	b.n	8007008 <HAL_RCC_OscConfig+0x298>
 8006fe0:	40021000 	.word	0x40021000
 8006fe4:	0800daf4 	.word	0x0800daf4
 8006fe8:	20000000 	.word	0x20000000
 8006fec:	20000004 	.word	0x20000004
 8006ff0:	4ba0      	ldr	r3, [pc, #640]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a9f      	ldr	r2, [pc, #636]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 8006ff6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ffa:	6013      	str	r3, [r2, #0]
 8006ffc:	4b9d      	ldr	r3, [pc, #628]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a9c      	ldr	r2, [pc, #624]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 8007002:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007006:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d013      	beq.n	8007038 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007010:	f7fc fba2 	bl	8003758 <HAL_GetTick>
 8007014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007016:	e008      	b.n	800702a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007018:	f7fc fb9e 	bl	8003758 <HAL_GetTick>
 800701c:	4602      	mov	r2, r0
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	2b64      	cmp	r3, #100	@ 0x64
 8007024:	d901      	bls.n	800702a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007026:	2303      	movs	r3, #3
 8007028:	e2b4      	b.n	8007594 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800702a:	4b92      	ldr	r3, [pc, #584]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007032:	2b00      	cmp	r3, #0
 8007034:	d0f0      	beq.n	8007018 <HAL_RCC_OscConfig+0x2a8>
 8007036:	e014      	b.n	8007062 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007038:	f7fc fb8e 	bl	8003758 <HAL_GetTick>
 800703c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800703e:	e008      	b.n	8007052 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007040:	f7fc fb8a 	bl	8003758 <HAL_GetTick>
 8007044:	4602      	mov	r2, r0
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	2b64      	cmp	r3, #100	@ 0x64
 800704c:	d901      	bls.n	8007052 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800704e:	2303      	movs	r3, #3
 8007050:	e2a0      	b.n	8007594 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007052:	4b88      	ldr	r3, [pc, #544]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800705a:	2b00      	cmp	r3, #0
 800705c:	d1f0      	bne.n	8007040 <HAL_RCC_OscConfig+0x2d0>
 800705e:	e000      	b.n	8007062 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007060:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 0302 	and.w	r3, r3, #2
 800706a:	2b00      	cmp	r3, #0
 800706c:	d060      	beq.n	8007130 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	2b04      	cmp	r3, #4
 8007072:	d005      	beq.n	8007080 <HAL_RCC_OscConfig+0x310>
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	2b0c      	cmp	r3, #12
 8007078:	d119      	bne.n	80070ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	2b02      	cmp	r3, #2
 800707e:	d116      	bne.n	80070ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007080:	4b7c      	ldr	r3, [pc, #496]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007088:	2b00      	cmp	r3, #0
 800708a:	d005      	beq.n	8007098 <HAL_RCC_OscConfig+0x328>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d101      	bne.n	8007098 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	e27d      	b.n	8007594 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007098:	4b76      	ldr	r3, [pc, #472]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	691b      	ldr	r3, [r3, #16]
 80070a4:	061b      	lsls	r3, r3, #24
 80070a6:	4973      	ldr	r1, [pc, #460]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 80070a8:	4313      	orrs	r3, r2
 80070aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070ac:	e040      	b.n	8007130 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d023      	beq.n	80070fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80070b6:	4b6f      	ldr	r3, [pc, #444]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a6e      	ldr	r2, [pc, #440]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 80070bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070c2:	f7fc fb49 	bl	8003758 <HAL_GetTick>
 80070c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80070c8:	e008      	b.n	80070dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070ca:	f7fc fb45 	bl	8003758 <HAL_GetTick>
 80070ce:	4602      	mov	r2, r0
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	2b02      	cmp	r3, #2
 80070d6:	d901      	bls.n	80070dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80070d8:	2303      	movs	r3, #3
 80070da:	e25b      	b.n	8007594 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80070dc:	4b65      	ldr	r3, [pc, #404]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d0f0      	beq.n	80070ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070e8:	4b62      	ldr	r3, [pc, #392]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	061b      	lsls	r3, r3, #24
 80070f6:	495f      	ldr	r1, [pc, #380]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 80070f8:	4313      	orrs	r3, r2
 80070fa:	604b      	str	r3, [r1, #4]
 80070fc:	e018      	b.n	8007130 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80070fe:	4b5d      	ldr	r3, [pc, #372]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a5c      	ldr	r2, [pc, #368]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 8007104:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007108:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800710a:	f7fc fb25 	bl	8003758 <HAL_GetTick>
 800710e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007110:	e008      	b.n	8007124 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007112:	f7fc fb21 	bl	8003758 <HAL_GetTick>
 8007116:	4602      	mov	r2, r0
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	1ad3      	subs	r3, r2, r3
 800711c:	2b02      	cmp	r3, #2
 800711e:	d901      	bls.n	8007124 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007120:	2303      	movs	r3, #3
 8007122:	e237      	b.n	8007594 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007124:	4b53      	ldr	r3, [pc, #332]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800712c:	2b00      	cmp	r3, #0
 800712e:	d1f0      	bne.n	8007112 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f003 0308 	and.w	r3, r3, #8
 8007138:	2b00      	cmp	r3, #0
 800713a:	d03c      	beq.n	80071b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	695b      	ldr	r3, [r3, #20]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d01c      	beq.n	800717e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007144:	4b4b      	ldr	r3, [pc, #300]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 8007146:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800714a:	4a4a      	ldr	r2, [pc, #296]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 800714c:	f043 0301 	orr.w	r3, r3, #1
 8007150:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007154:	f7fc fb00 	bl	8003758 <HAL_GetTick>
 8007158:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800715a:	e008      	b.n	800716e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800715c:	f7fc fafc 	bl	8003758 <HAL_GetTick>
 8007160:	4602      	mov	r2, r0
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	2b02      	cmp	r3, #2
 8007168:	d901      	bls.n	800716e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800716a:	2303      	movs	r3, #3
 800716c:	e212      	b.n	8007594 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800716e:	4b41      	ldr	r3, [pc, #260]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 8007170:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007174:	f003 0302 	and.w	r3, r3, #2
 8007178:	2b00      	cmp	r3, #0
 800717a:	d0ef      	beq.n	800715c <HAL_RCC_OscConfig+0x3ec>
 800717c:	e01b      	b.n	80071b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800717e:	4b3d      	ldr	r3, [pc, #244]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 8007180:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007184:	4a3b      	ldr	r2, [pc, #236]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 8007186:	f023 0301 	bic.w	r3, r3, #1
 800718a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800718e:	f7fc fae3 	bl	8003758 <HAL_GetTick>
 8007192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007194:	e008      	b.n	80071a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007196:	f7fc fadf 	bl	8003758 <HAL_GetTick>
 800719a:	4602      	mov	r2, r0
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d901      	bls.n	80071a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80071a4:	2303      	movs	r3, #3
 80071a6:	e1f5      	b.n	8007594 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80071a8:	4b32      	ldr	r3, [pc, #200]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 80071aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071ae:	f003 0302 	and.w	r3, r3, #2
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d1ef      	bne.n	8007196 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 0304 	and.w	r3, r3, #4
 80071be:	2b00      	cmp	r3, #0
 80071c0:	f000 80a6 	beq.w	8007310 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80071c4:	2300      	movs	r3, #0
 80071c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80071c8:	4b2a      	ldr	r3, [pc, #168]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 80071ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d10d      	bne.n	80071f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071d4:	4b27      	ldr	r3, [pc, #156]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 80071d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071d8:	4a26      	ldr	r2, [pc, #152]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 80071da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071de:	6593      	str	r3, [r2, #88]	@ 0x58
 80071e0:	4b24      	ldr	r3, [pc, #144]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 80071e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071e8:	60bb      	str	r3, [r7, #8]
 80071ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071ec:	2301      	movs	r3, #1
 80071ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071f0:	4b21      	ldr	r3, [pc, #132]	@ (8007278 <HAL_RCC_OscConfig+0x508>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d118      	bne.n	800722e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80071fc:	4b1e      	ldr	r3, [pc, #120]	@ (8007278 <HAL_RCC_OscConfig+0x508>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a1d      	ldr	r2, [pc, #116]	@ (8007278 <HAL_RCC_OscConfig+0x508>)
 8007202:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007206:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007208:	f7fc faa6 	bl	8003758 <HAL_GetTick>
 800720c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800720e:	e008      	b.n	8007222 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007210:	f7fc faa2 	bl	8003758 <HAL_GetTick>
 8007214:	4602      	mov	r2, r0
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	1ad3      	subs	r3, r2, r3
 800721a:	2b02      	cmp	r3, #2
 800721c:	d901      	bls.n	8007222 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800721e:	2303      	movs	r3, #3
 8007220:	e1b8      	b.n	8007594 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007222:	4b15      	ldr	r3, [pc, #84]	@ (8007278 <HAL_RCC_OscConfig+0x508>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800722a:	2b00      	cmp	r3, #0
 800722c:	d0f0      	beq.n	8007210 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	2b01      	cmp	r3, #1
 8007234:	d108      	bne.n	8007248 <HAL_RCC_OscConfig+0x4d8>
 8007236:	4b0f      	ldr	r3, [pc, #60]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 8007238:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800723c:	4a0d      	ldr	r2, [pc, #52]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 800723e:	f043 0301 	orr.w	r3, r3, #1
 8007242:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007246:	e029      	b.n	800729c <HAL_RCC_OscConfig+0x52c>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	2b05      	cmp	r3, #5
 800724e:	d115      	bne.n	800727c <HAL_RCC_OscConfig+0x50c>
 8007250:	4b08      	ldr	r3, [pc, #32]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 8007252:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007256:	4a07      	ldr	r2, [pc, #28]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 8007258:	f043 0304 	orr.w	r3, r3, #4
 800725c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007260:	4b04      	ldr	r3, [pc, #16]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 8007262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007266:	4a03      	ldr	r2, [pc, #12]	@ (8007274 <HAL_RCC_OscConfig+0x504>)
 8007268:	f043 0301 	orr.w	r3, r3, #1
 800726c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007270:	e014      	b.n	800729c <HAL_RCC_OscConfig+0x52c>
 8007272:	bf00      	nop
 8007274:	40021000 	.word	0x40021000
 8007278:	40007000 	.word	0x40007000
 800727c:	4b9d      	ldr	r3, [pc, #628]	@ (80074f4 <HAL_RCC_OscConfig+0x784>)
 800727e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007282:	4a9c      	ldr	r2, [pc, #624]	@ (80074f4 <HAL_RCC_OscConfig+0x784>)
 8007284:	f023 0301 	bic.w	r3, r3, #1
 8007288:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800728c:	4b99      	ldr	r3, [pc, #612]	@ (80074f4 <HAL_RCC_OscConfig+0x784>)
 800728e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007292:	4a98      	ldr	r2, [pc, #608]	@ (80074f4 <HAL_RCC_OscConfig+0x784>)
 8007294:	f023 0304 	bic.w	r3, r3, #4
 8007298:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d016      	beq.n	80072d2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072a4:	f7fc fa58 	bl	8003758 <HAL_GetTick>
 80072a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072aa:	e00a      	b.n	80072c2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072ac:	f7fc fa54 	bl	8003758 <HAL_GetTick>
 80072b0:	4602      	mov	r2, r0
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	1ad3      	subs	r3, r2, r3
 80072b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d901      	bls.n	80072c2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80072be:	2303      	movs	r3, #3
 80072c0:	e168      	b.n	8007594 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072c2:	4b8c      	ldr	r3, [pc, #560]	@ (80074f4 <HAL_RCC_OscConfig+0x784>)
 80072c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072c8:	f003 0302 	and.w	r3, r3, #2
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d0ed      	beq.n	80072ac <HAL_RCC_OscConfig+0x53c>
 80072d0:	e015      	b.n	80072fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072d2:	f7fc fa41 	bl	8003758 <HAL_GetTick>
 80072d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80072d8:	e00a      	b.n	80072f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072da:	f7fc fa3d 	bl	8003758 <HAL_GetTick>
 80072de:	4602      	mov	r2, r0
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	1ad3      	subs	r3, r2, r3
 80072e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d901      	bls.n	80072f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80072ec:	2303      	movs	r3, #3
 80072ee:	e151      	b.n	8007594 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80072f0:	4b80      	ldr	r3, [pc, #512]	@ (80074f4 <HAL_RCC_OscConfig+0x784>)
 80072f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072f6:	f003 0302 	and.w	r3, r3, #2
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d1ed      	bne.n	80072da <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80072fe:	7ffb      	ldrb	r3, [r7, #31]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d105      	bne.n	8007310 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007304:	4b7b      	ldr	r3, [pc, #492]	@ (80074f4 <HAL_RCC_OscConfig+0x784>)
 8007306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007308:	4a7a      	ldr	r2, [pc, #488]	@ (80074f4 <HAL_RCC_OscConfig+0x784>)
 800730a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800730e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 0320 	and.w	r3, r3, #32
 8007318:	2b00      	cmp	r3, #0
 800731a:	d03c      	beq.n	8007396 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007320:	2b00      	cmp	r3, #0
 8007322:	d01c      	beq.n	800735e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007324:	4b73      	ldr	r3, [pc, #460]	@ (80074f4 <HAL_RCC_OscConfig+0x784>)
 8007326:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800732a:	4a72      	ldr	r2, [pc, #456]	@ (80074f4 <HAL_RCC_OscConfig+0x784>)
 800732c:	f043 0301 	orr.w	r3, r3, #1
 8007330:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007334:	f7fc fa10 	bl	8003758 <HAL_GetTick>
 8007338:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800733a:	e008      	b.n	800734e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800733c:	f7fc fa0c 	bl	8003758 <HAL_GetTick>
 8007340:	4602      	mov	r2, r0
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	1ad3      	subs	r3, r2, r3
 8007346:	2b02      	cmp	r3, #2
 8007348:	d901      	bls.n	800734e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800734a:	2303      	movs	r3, #3
 800734c:	e122      	b.n	8007594 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800734e:	4b69      	ldr	r3, [pc, #420]	@ (80074f4 <HAL_RCC_OscConfig+0x784>)
 8007350:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007354:	f003 0302 	and.w	r3, r3, #2
 8007358:	2b00      	cmp	r3, #0
 800735a:	d0ef      	beq.n	800733c <HAL_RCC_OscConfig+0x5cc>
 800735c:	e01b      	b.n	8007396 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800735e:	4b65      	ldr	r3, [pc, #404]	@ (80074f4 <HAL_RCC_OscConfig+0x784>)
 8007360:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007364:	4a63      	ldr	r2, [pc, #396]	@ (80074f4 <HAL_RCC_OscConfig+0x784>)
 8007366:	f023 0301 	bic.w	r3, r3, #1
 800736a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800736e:	f7fc f9f3 	bl	8003758 <HAL_GetTick>
 8007372:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007374:	e008      	b.n	8007388 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007376:	f7fc f9ef 	bl	8003758 <HAL_GetTick>
 800737a:	4602      	mov	r2, r0
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	1ad3      	subs	r3, r2, r3
 8007380:	2b02      	cmp	r3, #2
 8007382:	d901      	bls.n	8007388 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8007384:	2303      	movs	r3, #3
 8007386:	e105      	b.n	8007594 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007388:	4b5a      	ldr	r3, [pc, #360]	@ (80074f4 <HAL_RCC_OscConfig+0x784>)
 800738a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800738e:	f003 0302 	and.w	r3, r3, #2
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1ef      	bne.n	8007376 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800739a:	2b00      	cmp	r3, #0
 800739c:	f000 80f9 	beq.w	8007592 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073a4:	2b02      	cmp	r3, #2
 80073a6:	f040 80cf 	bne.w	8007548 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80073aa:	4b52      	ldr	r3, [pc, #328]	@ (80074f4 <HAL_RCC_OscConfig+0x784>)
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	f003 0203 	and.w	r2, r3, #3
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d12c      	bne.n	8007418 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073c8:	3b01      	subs	r3, #1
 80073ca:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d123      	bne.n	8007418 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073da:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80073dc:	429a      	cmp	r2, r3
 80073de:	d11b      	bne.n	8007418 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ea:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d113      	bne.n	8007418 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073fa:	085b      	lsrs	r3, r3, #1
 80073fc:	3b01      	subs	r3, #1
 80073fe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007400:	429a      	cmp	r2, r3
 8007402:	d109      	bne.n	8007418 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800740e:	085b      	lsrs	r3, r3, #1
 8007410:	3b01      	subs	r3, #1
 8007412:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007414:	429a      	cmp	r2, r3
 8007416:	d071      	beq.n	80074fc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	2b0c      	cmp	r3, #12
 800741c:	d068      	beq.n	80074f0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800741e:	4b35      	ldr	r3, [pc, #212]	@ (80074f4 <HAL_RCC_OscConfig+0x784>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007426:	2b00      	cmp	r3, #0
 8007428:	d105      	bne.n	8007436 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800742a:	4b32      	ldr	r3, [pc, #200]	@ (80074f4 <HAL_RCC_OscConfig+0x784>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007432:	2b00      	cmp	r3, #0
 8007434:	d001      	beq.n	800743a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	e0ac      	b.n	8007594 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800743a:	4b2e      	ldr	r3, [pc, #184]	@ (80074f4 <HAL_RCC_OscConfig+0x784>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a2d      	ldr	r2, [pc, #180]	@ (80074f4 <HAL_RCC_OscConfig+0x784>)
 8007440:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007444:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007446:	f7fc f987 	bl	8003758 <HAL_GetTick>
 800744a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800744c:	e008      	b.n	8007460 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800744e:	f7fc f983 	bl	8003758 <HAL_GetTick>
 8007452:	4602      	mov	r2, r0
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	1ad3      	subs	r3, r2, r3
 8007458:	2b02      	cmp	r3, #2
 800745a:	d901      	bls.n	8007460 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800745c:	2303      	movs	r3, #3
 800745e:	e099      	b.n	8007594 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007460:	4b24      	ldr	r3, [pc, #144]	@ (80074f4 <HAL_RCC_OscConfig+0x784>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007468:	2b00      	cmp	r3, #0
 800746a:	d1f0      	bne.n	800744e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800746c:	4b21      	ldr	r3, [pc, #132]	@ (80074f4 <HAL_RCC_OscConfig+0x784>)
 800746e:	68da      	ldr	r2, [r3, #12]
 8007470:	4b21      	ldr	r3, [pc, #132]	@ (80074f8 <HAL_RCC_OscConfig+0x788>)
 8007472:	4013      	ands	r3, r2
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800747c:	3a01      	subs	r2, #1
 800747e:	0112      	lsls	r2, r2, #4
 8007480:	4311      	orrs	r1, r2
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007486:	0212      	lsls	r2, r2, #8
 8007488:	4311      	orrs	r1, r2
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800748e:	0852      	lsrs	r2, r2, #1
 8007490:	3a01      	subs	r2, #1
 8007492:	0552      	lsls	r2, r2, #21
 8007494:	4311      	orrs	r1, r2
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800749a:	0852      	lsrs	r2, r2, #1
 800749c:	3a01      	subs	r2, #1
 800749e:	0652      	lsls	r2, r2, #25
 80074a0:	4311      	orrs	r1, r2
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80074a6:	06d2      	lsls	r2, r2, #27
 80074a8:	430a      	orrs	r2, r1
 80074aa:	4912      	ldr	r1, [pc, #72]	@ (80074f4 <HAL_RCC_OscConfig+0x784>)
 80074ac:	4313      	orrs	r3, r2
 80074ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80074b0:	4b10      	ldr	r3, [pc, #64]	@ (80074f4 <HAL_RCC_OscConfig+0x784>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a0f      	ldr	r2, [pc, #60]	@ (80074f4 <HAL_RCC_OscConfig+0x784>)
 80074b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80074ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80074bc:	4b0d      	ldr	r3, [pc, #52]	@ (80074f4 <HAL_RCC_OscConfig+0x784>)
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	4a0c      	ldr	r2, [pc, #48]	@ (80074f4 <HAL_RCC_OscConfig+0x784>)
 80074c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80074c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80074c8:	f7fc f946 	bl	8003758 <HAL_GetTick>
 80074cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80074ce:	e008      	b.n	80074e2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074d0:	f7fc f942 	bl	8003758 <HAL_GetTick>
 80074d4:	4602      	mov	r2, r0
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	1ad3      	subs	r3, r2, r3
 80074da:	2b02      	cmp	r3, #2
 80074dc:	d901      	bls.n	80074e2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80074de:	2303      	movs	r3, #3
 80074e0:	e058      	b.n	8007594 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80074e2:	4b04      	ldr	r3, [pc, #16]	@ (80074f4 <HAL_RCC_OscConfig+0x784>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d0f0      	beq.n	80074d0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80074ee:	e050      	b.n	8007592 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	e04f      	b.n	8007594 <HAL_RCC_OscConfig+0x824>
 80074f4:	40021000 	.word	0x40021000
 80074f8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80074fc:	4b27      	ldr	r3, [pc, #156]	@ (800759c <HAL_RCC_OscConfig+0x82c>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007504:	2b00      	cmp	r3, #0
 8007506:	d144      	bne.n	8007592 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007508:	4b24      	ldr	r3, [pc, #144]	@ (800759c <HAL_RCC_OscConfig+0x82c>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a23      	ldr	r2, [pc, #140]	@ (800759c <HAL_RCC_OscConfig+0x82c>)
 800750e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007512:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007514:	4b21      	ldr	r3, [pc, #132]	@ (800759c <HAL_RCC_OscConfig+0x82c>)
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	4a20      	ldr	r2, [pc, #128]	@ (800759c <HAL_RCC_OscConfig+0x82c>)
 800751a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800751e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007520:	f7fc f91a 	bl	8003758 <HAL_GetTick>
 8007524:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007526:	e008      	b.n	800753a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007528:	f7fc f916 	bl	8003758 <HAL_GetTick>
 800752c:	4602      	mov	r2, r0
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	2b02      	cmp	r3, #2
 8007534:	d901      	bls.n	800753a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8007536:	2303      	movs	r3, #3
 8007538:	e02c      	b.n	8007594 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800753a:	4b18      	ldr	r3, [pc, #96]	@ (800759c <HAL_RCC_OscConfig+0x82c>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007542:	2b00      	cmp	r3, #0
 8007544:	d0f0      	beq.n	8007528 <HAL_RCC_OscConfig+0x7b8>
 8007546:	e024      	b.n	8007592 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007548:	69bb      	ldr	r3, [r7, #24]
 800754a:	2b0c      	cmp	r3, #12
 800754c:	d01f      	beq.n	800758e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800754e:	4b13      	ldr	r3, [pc, #76]	@ (800759c <HAL_RCC_OscConfig+0x82c>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a12      	ldr	r2, [pc, #72]	@ (800759c <HAL_RCC_OscConfig+0x82c>)
 8007554:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007558:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800755a:	f7fc f8fd 	bl	8003758 <HAL_GetTick>
 800755e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007560:	e008      	b.n	8007574 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007562:	f7fc f8f9 	bl	8003758 <HAL_GetTick>
 8007566:	4602      	mov	r2, r0
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	1ad3      	subs	r3, r2, r3
 800756c:	2b02      	cmp	r3, #2
 800756e:	d901      	bls.n	8007574 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8007570:	2303      	movs	r3, #3
 8007572:	e00f      	b.n	8007594 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007574:	4b09      	ldr	r3, [pc, #36]	@ (800759c <HAL_RCC_OscConfig+0x82c>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800757c:	2b00      	cmp	r3, #0
 800757e:	d1f0      	bne.n	8007562 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007580:	4b06      	ldr	r3, [pc, #24]	@ (800759c <HAL_RCC_OscConfig+0x82c>)
 8007582:	68da      	ldr	r2, [r3, #12]
 8007584:	4905      	ldr	r1, [pc, #20]	@ (800759c <HAL_RCC_OscConfig+0x82c>)
 8007586:	4b06      	ldr	r3, [pc, #24]	@ (80075a0 <HAL_RCC_OscConfig+0x830>)
 8007588:	4013      	ands	r3, r2
 800758a:	60cb      	str	r3, [r1, #12]
 800758c:	e001      	b.n	8007592 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e000      	b.n	8007594 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	3720      	adds	r7, #32
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}
 800759c:	40021000 	.word	0x40021000
 80075a0:	feeefffc 	.word	0xfeeefffc

080075a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d101      	bne.n	80075b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	e0e7      	b.n	8007788 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80075b8:	4b75      	ldr	r3, [pc, #468]	@ (8007790 <HAL_RCC_ClockConfig+0x1ec>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 0307 	and.w	r3, r3, #7
 80075c0:	683a      	ldr	r2, [r7, #0]
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d910      	bls.n	80075e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075c6:	4b72      	ldr	r3, [pc, #456]	@ (8007790 <HAL_RCC_ClockConfig+0x1ec>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f023 0207 	bic.w	r2, r3, #7
 80075ce:	4970      	ldr	r1, [pc, #448]	@ (8007790 <HAL_RCC_ClockConfig+0x1ec>)
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80075d6:	4b6e      	ldr	r3, [pc, #440]	@ (8007790 <HAL_RCC_ClockConfig+0x1ec>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f003 0307 	and.w	r3, r3, #7
 80075de:	683a      	ldr	r2, [r7, #0]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d001      	beq.n	80075e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	e0cf      	b.n	8007788 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 0302 	and.w	r3, r3, #2
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d010      	beq.n	8007616 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	689a      	ldr	r2, [r3, #8]
 80075f8:	4b66      	ldr	r3, [pc, #408]	@ (8007794 <HAL_RCC_ClockConfig+0x1f0>)
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007600:	429a      	cmp	r2, r3
 8007602:	d908      	bls.n	8007616 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007604:	4b63      	ldr	r3, [pc, #396]	@ (8007794 <HAL_RCC_ClockConfig+0x1f0>)
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	4960      	ldr	r1, [pc, #384]	@ (8007794 <HAL_RCC_ClockConfig+0x1f0>)
 8007612:	4313      	orrs	r3, r2
 8007614:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 0301 	and.w	r3, r3, #1
 800761e:	2b00      	cmp	r3, #0
 8007620:	d04c      	beq.n	80076bc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	2b03      	cmp	r3, #3
 8007628:	d107      	bne.n	800763a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800762a:	4b5a      	ldr	r3, [pc, #360]	@ (8007794 <HAL_RCC_ClockConfig+0x1f0>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007632:	2b00      	cmp	r3, #0
 8007634:	d121      	bne.n	800767a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	e0a6      	b.n	8007788 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	2b02      	cmp	r3, #2
 8007640:	d107      	bne.n	8007652 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007642:	4b54      	ldr	r3, [pc, #336]	@ (8007794 <HAL_RCC_ClockConfig+0x1f0>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800764a:	2b00      	cmp	r3, #0
 800764c:	d115      	bne.n	800767a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	e09a      	b.n	8007788 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d107      	bne.n	800766a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800765a:	4b4e      	ldr	r3, [pc, #312]	@ (8007794 <HAL_RCC_ClockConfig+0x1f0>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f003 0302 	and.w	r3, r3, #2
 8007662:	2b00      	cmp	r3, #0
 8007664:	d109      	bne.n	800767a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e08e      	b.n	8007788 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800766a:	4b4a      	ldr	r3, [pc, #296]	@ (8007794 <HAL_RCC_ClockConfig+0x1f0>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007672:	2b00      	cmp	r3, #0
 8007674:	d101      	bne.n	800767a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	e086      	b.n	8007788 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800767a:	4b46      	ldr	r3, [pc, #280]	@ (8007794 <HAL_RCC_ClockConfig+0x1f0>)
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	f023 0203 	bic.w	r2, r3, #3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	4943      	ldr	r1, [pc, #268]	@ (8007794 <HAL_RCC_ClockConfig+0x1f0>)
 8007688:	4313      	orrs	r3, r2
 800768a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800768c:	f7fc f864 	bl	8003758 <HAL_GetTick>
 8007690:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007692:	e00a      	b.n	80076aa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007694:	f7fc f860 	bl	8003758 <HAL_GetTick>
 8007698:	4602      	mov	r2, r0
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	1ad3      	subs	r3, r2, r3
 800769e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d901      	bls.n	80076aa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80076a6:	2303      	movs	r3, #3
 80076a8:	e06e      	b.n	8007788 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076aa:	4b3a      	ldr	r3, [pc, #232]	@ (8007794 <HAL_RCC_ClockConfig+0x1f0>)
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	f003 020c 	and.w	r2, r3, #12
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d1eb      	bne.n	8007694 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 0302 	and.w	r3, r3, #2
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d010      	beq.n	80076ea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	689a      	ldr	r2, [r3, #8]
 80076cc:	4b31      	ldr	r3, [pc, #196]	@ (8007794 <HAL_RCC_ClockConfig+0x1f0>)
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d208      	bcs.n	80076ea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076d8:	4b2e      	ldr	r3, [pc, #184]	@ (8007794 <HAL_RCC_ClockConfig+0x1f0>)
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	492b      	ldr	r1, [pc, #172]	@ (8007794 <HAL_RCC_ClockConfig+0x1f0>)
 80076e6:	4313      	orrs	r3, r2
 80076e8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80076ea:	4b29      	ldr	r3, [pc, #164]	@ (8007790 <HAL_RCC_ClockConfig+0x1ec>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f003 0307 	and.w	r3, r3, #7
 80076f2:	683a      	ldr	r2, [r7, #0]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d210      	bcs.n	800771a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076f8:	4b25      	ldr	r3, [pc, #148]	@ (8007790 <HAL_RCC_ClockConfig+0x1ec>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f023 0207 	bic.w	r2, r3, #7
 8007700:	4923      	ldr	r1, [pc, #140]	@ (8007790 <HAL_RCC_ClockConfig+0x1ec>)
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	4313      	orrs	r3, r2
 8007706:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007708:	4b21      	ldr	r3, [pc, #132]	@ (8007790 <HAL_RCC_ClockConfig+0x1ec>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 0307 	and.w	r3, r3, #7
 8007710:	683a      	ldr	r2, [r7, #0]
 8007712:	429a      	cmp	r2, r3
 8007714:	d001      	beq.n	800771a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	e036      	b.n	8007788 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f003 0304 	and.w	r3, r3, #4
 8007722:	2b00      	cmp	r3, #0
 8007724:	d008      	beq.n	8007738 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007726:	4b1b      	ldr	r3, [pc, #108]	@ (8007794 <HAL_RCC_ClockConfig+0x1f0>)
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	4918      	ldr	r1, [pc, #96]	@ (8007794 <HAL_RCC_ClockConfig+0x1f0>)
 8007734:	4313      	orrs	r3, r2
 8007736:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f003 0308 	and.w	r3, r3, #8
 8007740:	2b00      	cmp	r3, #0
 8007742:	d009      	beq.n	8007758 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007744:	4b13      	ldr	r3, [pc, #76]	@ (8007794 <HAL_RCC_ClockConfig+0x1f0>)
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	691b      	ldr	r3, [r3, #16]
 8007750:	00db      	lsls	r3, r3, #3
 8007752:	4910      	ldr	r1, [pc, #64]	@ (8007794 <HAL_RCC_ClockConfig+0x1f0>)
 8007754:	4313      	orrs	r3, r2
 8007756:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007758:	f000 f824 	bl	80077a4 <HAL_RCC_GetSysClockFreq>
 800775c:	4602      	mov	r2, r0
 800775e:	4b0d      	ldr	r3, [pc, #52]	@ (8007794 <HAL_RCC_ClockConfig+0x1f0>)
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	091b      	lsrs	r3, r3, #4
 8007764:	f003 030f 	and.w	r3, r3, #15
 8007768:	490b      	ldr	r1, [pc, #44]	@ (8007798 <HAL_RCC_ClockConfig+0x1f4>)
 800776a:	5ccb      	ldrb	r3, [r1, r3]
 800776c:	f003 031f 	and.w	r3, r3, #31
 8007770:	fa22 f303 	lsr.w	r3, r2, r3
 8007774:	4a09      	ldr	r2, [pc, #36]	@ (800779c <HAL_RCC_ClockConfig+0x1f8>)
 8007776:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007778:	4b09      	ldr	r3, [pc, #36]	@ (80077a0 <HAL_RCC_ClockConfig+0x1fc>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4618      	mov	r0, r3
 800777e:	f7fa fe2d 	bl	80023dc <HAL_InitTick>
 8007782:	4603      	mov	r3, r0
 8007784:	72fb      	strb	r3, [r7, #11]

  return status;
 8007786:	7afb      	ldrb	r3, [r7, #11]
}
 8007788:	4618      	mov	r0, r3
 800778a:	3710      	adds	r7, #16
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}
 8007790:	40022000 	.word	0x40022000
 8007794:	40021000 	.word	0x40021000
 8007798:	0800daf4 	.word	0x0800daf4
 800779c:	20000000 	.word	0x20000000
 80077a0:	20000004 	.word	0x20000004

080077a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b089      	sub	sp, #36	@ 0x24
 80077a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80077aa:	2300      	movs	r3, #0
 80077ac:	61fb      	str	r3, [r7, #28]
 80077ae:	2300      	movs	r3, #0
 80077b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077b2:	4b3e      	ldr	r3, [pc, #248]	@ (80078ac <HAL_RCC_GetSysClockFreq+0x108>)
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	f003 030c 	and.w	r3, r3, #12
 80077ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80077bc:	4b3b      	ldr	r3, [pc, #236]	@ (80078ac <HAL_RCC_GetSysClockFreq+0x108>)
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	f003 0303 	and.w	r3, r3, #3
 80077c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d005      	beq.n	80077d8 <HAL_RCC_GetSysClockFreq+0x34>
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	2b0c      	cmp	r3, #12
 80077d0:	d121      	bne.n	8007816 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d11e      	bne.n	8007816 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80077d8:	4b34      	ldr	r3, [pc, #208]	@ (80078ac <HAL_RCC_GetSysClockFreq+0x108>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f003 0308 	and.w	r3, r3, #8
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d107      	bne.n	80077f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80077e4:	4b31      	ldr	r3, [pc, #196]	@ (80078ac <HAL_RCC_GetSysClockFreq+0x108>)
 80077e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80077ea:	0a1b      	lsrs	r3, r3, #8
 80077ec:	f003 030f 	and.w	r3, r3, #15
 80077f0:	61fb      	str	r3, [r7, #28]
 80077f2:	e005      	b.n	8007800 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80077f4:	4b2d      	ldr	r3, [pc, #180]	@ (80078ac <HAL_RCC_GetSysClockFreq+0x108>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	091b      	lsrs	r3, r3, #4
 80077fa:	f003 030f 	and.w	r3, r3, #15
 80077fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007800:	4a2b      	ldr	r2, [pc, #172]	@ (80078b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007808:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d10d      	bne.n	800782c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007814:	e00a      	b.n	800782c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	2b04      	cmp	r3, #4
 800781a:	d102      	bne.n	8007822 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800781c:	4b25      	ldr	r3, [pc, #148]	@ (80078b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800781e:	61bb      	str	r3, [r7, #24]
 8007820:	e004      	b.n	800782c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	2b08      	cmp	r3, #8
 8007826:	d101      	bne.n	800782c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007828:	4b23      	ldr	r3, [pc, #140]	@ (80078b8 <HAL_RCC_GetSysClockFreq+0x114>)
 800782a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	2b0c      	cmp	r3, #12
 8007830:	d134      	bne.n	800789c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007832:	4b1e      	ldr	r3, [pc, #120]	@ (80078ac <HAL_RCC_GetSysClockFreq+0x108>)
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	f003 0303 	and.w	r3, r3, #3
 800783a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	2b02      	cmp	r3, #2
 8007840:	d003      	beq.n	800784a <HAL_RCC_GetSysClockFreq+0xa6>
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	2b03      	cmp	r3, #3
 8007846:	d003      	beq.n	8007850 <HAL_RCC_GetSysClockFreq+0xac>
 8007848:	e005      	b.n	8007856 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800784a:	4b1a      	ldr	r3, [pc, #104]	@ (80078b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800784c:	617b      	str	r3, [r7, #20]
      break;
 800784e:	e005      	b.n	800785c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007850:	4b19      	ldr	r3, [pc, #100]	@ (80078b8 <HAL_RCC_GetSysClockFreq+0x114>)
 8007852:	617b      	str	r3, [r7, #20]
      break;
 8007854:	e002      	b.n	800785c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007856:	69fb      	ldr	r3, [r7, #28]
 8007858:	617b      	str	r3, [r7, #20]
      break;
 800785a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800785c:	4b13      	ldr	r3, [pc, #76]	@ (80078ac <HAL_RCC_GetSysClockFreq+0x108>)
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	091b      	lsrs	r3, r3, #4
 8007862:	f003 0307 	and.w	r3, r3, #7
 8007866:	3301      	adds	r3, #1
 8007868:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800786a:	4b10      	ldr	r3, [pc, #64]	@ (80078ac <HAL_RCC_GetSysClockFreq+0x108>)
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	0a1b      	lsrs	r3, r3, #8
 8007870:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007874:	697a      	ldr	r2, [r7, #20]
 8007876:	fb03 f202 	mul.w	r2, r3, r2
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007880:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007882:	4b0a      	ldr	r3, [pc, #40]	@ (80078ac <HAL_RCC_GetSysClockFreq+0x108>)
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	0e5b      	lsrs	r3, r3, #25
 8007888:	f003 0303 	and.w	r3, r3, #3
 800788c:	3301      	adds	r3, #1
 800788e:	005b      	lsls	r3, r3, #1
 8007890:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007892:	697a      	ldr	r2, [r7, #20]
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	fbb2 f3f3 	udiv	r3, r2, r3
 800789a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800789c:	69bb      	ldr	r3, [r7, #24]
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3724      	adds	r7, #36	@ 0x24
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr
 80078aa:	bf00      	nop
 80078ac:	40021000 	.word	0x40021000
 80078b0:	0800db0c 	.word	0x0800db0c
 80078b4:	00f42400 	.word	0x00f42400
 80078b8:	007a1200 	.word	0x007a1200

080078bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078bc:	b480      	push	{r7}
 80078be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80078c0:	4b03      	ldr	r3, [pc, #12]	@ (80078d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80078c2:	681b      	ldr	r3, [r3, #0]
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr
 80078ce:	bf00      	nop
 80078d0:	20000000 	.word	0x20000000

080078d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80078d8:	f7ff fff0 	bl	80078bc <HAL_RCC_GetHCLKFreq>
 80078dc:	4602      	mov	r2, r0
 80078de:	4b06      	ldr	r3, [pc, #24]	@ (80078f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	0a1b      	lsrs	r3, r3, #8
 80078e4:	f003 0307 	and.w	r3, r3, #7
 80078e8:	4904      	ldr	r1, [pc, #16]	@ (80078fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80078ea:	5ccb      	ldrb	r3, [r1, r3]
 80078ec:	f003 031f 	and.w	r3, r3, #31
 80078f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	40021000 	.word	0x40021000
 80078fc:	0800db04 	.word	0x0800db04

08007900 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007904:	f7ff ffda 	bl	80078bc <HAL_RCC_GetHCLKFreq>
 8007908:	4602      	mov	r2, r0
 800790a:	4b06      	ldr	r3, [pc, #24]	@ (8007924 <HAL_RCC_GetPCLK2Freq+0x24>)
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	0adb      	lsrs	r3, r3, #11
 8007910:	f003 0307 	and.w	r3, r3, #7
 8007914:	4904      	ldr	r1, [pc, #16]	@ (8007928 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007916:	5ccb      	ldrb	r3, [r1, r3]
 8007918:	f003 031f 	and.w	r3, r3, #31
 800791c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007920:	4618      	mov	r0, r3
 8007922:	bd80      	pop	{r7, pc}
 8007924:	40021000 	.word	0x40021000
 8007928:	0800db04 	.word	0x0800db04

0800792c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	220f      	movs	r2, #15
 800793a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800793c:	4b12      	ldr	r3, [pc, #72]	@ (8007988 <HAL_RCC_GetClockConfig+0x5c>)
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	f003 0203 	and.w	r2, r3, #3
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8007948:	4b0f      	ldr	r3, [pc, #60]	@ (8007988 <HAL_RCC_GetClockConfig+0x5c>)
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8007954:	4b0c      	ldr	r3, [pc, #48]	@ (8007988 <HAL_RCC_GetClockConfig+0x5c>)
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8007960:	4b09      	ldr	r3, [pc, #36]	@ (8007988 <HAL_RCC_GetClockConfig+0x5c>)
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	08db      	lsrs	r3, r3, #3
 8007966:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800796e:	4b07      	ldr	r3, [pc, #28]	@ (800798c <HAL_RCC_GetClockConfig+0x60>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f003 0207 	and.w	r2, r3, #7
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	601a      	str	r2, [r3, #0]
}
 800797a:	bf00      	nop
 800797c:	370c      	adds	r7, #12
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop
 8007988:	40021000 	.word	0x40021000
 800798c:	40022000 	.word	0x40022000

08007990 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b086      	sub	sp, #24
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007998:	2300      	movs	r3, #0
 800799a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800799c:	4b2a      	ldr	r3, [pc, #168]	@ (8007a48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800799e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d003      	beq.n	80079b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80079a8:	f7ff f97e 	bl	8006ca8 <HAL_PWREx_GetVoltageRange>
 80079ac:	6178      	str	r0, [r7, #20]
 80079ae:	e014      	b.n	80079da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80079b0:	4b25      	ldr	r3, [pc, #148]	@ (8007a48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80079b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079b4:	4a24      	ldr	r2, [pc, #144]	@ (8007a48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80079b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80079ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80079bc:	4b22      	ldr	r3, [pc, #136]	@ (8007a48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80079be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079c4:	60fb      	str	r3, [r7, #12]
 80079c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80079c8:	f7ff f96e 	bl	8006ca8 <HAL_PWREx_GetVoltageRange>
 80079cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80079ce:	4b1e      	ldr	r3, [pc, #120]	@ (8007a48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80079d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079d2:	4a1d      	ldr	r2, [pc, #116]	@ (8007a48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80079d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80079d8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079e0:	d10b      	bne.n	80079fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2b80      	cmp	r3, #128	@ 0x80
 80079e6:	d919      	bls.n	8007a1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2ba0      	cmp	r3, #160	@ 0xa0
 80079ec:	d902      	bls.n	80079f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80079ee:	2302      	movs	r3, #2
 80079f0:	613b      	str	r3, [r7, #16]
 80079f2:	e013      	b.n	8007a1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80079f4:	2301      	movs	r3, #1
 80079f6:	613b      	str	r3, [r7, #16]
 80079f8:	e010      	b.n	8007a1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2b80      	cmp	r3, #128	@ 0x80
 80079fe:	d902      	bls.n	8007a06 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007a00:	2303      	movs	r3, #3
 8007a02:	613b      	str	r3, [r7, #16]
 8007a04:	e00a      	b.n	8007a1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2b80      	cmp	r3, #128	@ 0x80
 8007a0a:	d102      	bne.n	8007a12 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007a0c:	2302      	movs	r3, #2
 8007a0e:	613b      	str	r3, [r7, #16]
 8007a10:	e004      	b.n	8007a1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2b70      	cmp	r3, #112	@ 0x70
 8007a16:	d101      	bne.n	8007a1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007a18:	2301      	movs	r3, #1
 8007a1a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8007a4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f023 0207 	bic.w	r2, r3, #7
 8007a24:	4909      	ldr	r1, [pc, #36]	@ (8007a4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007a2c:	4b07      	ldr	r3, [pc, #28]	@ (8007a4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f003 0307 	and.w	r3, r3, #7
 8007a34:	693a      	ldr	r2, [r7, #16]
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d001      	beq.n	8007a3e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e000      	b.n	8007a40 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007a3e:	2300      	movs	r3, #0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3718      	adds	r7, #24
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}
 8007a48:	40021000 	.word	0x40021000
 8007a4c:	40022000 	.word	0x40022000

08007a50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b086      	sub	sp, #24
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007a58:	2300      	movs	r3, #0
 8007a5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d041      	beq.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a70:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007a74:	d02a      	beq.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007a76:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007a7a:	d824      	bhi.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007a7c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007a80:	d008      	beq.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007a82:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007a86:	d81e      	bhi.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00a      	beq.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007a8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a90:	d010      	beq.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007a92:	e018      	b.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007a94:	4b86      	ldr	r3, [pc, #536]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a96:	68db      	ldr	r3, [r3, #12]
 8007a98:	4a85      	ldr	r2, [pc, #532]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a9e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007aa0:	e015      	b.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	3304      	adds	r3, #4
 8007aa6:	2100      	movs	r1, #0
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f000 facd 	bl	8008048 <RCCEx_PLLSAI1_Config>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007ab2:	e00c      	b.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	3320      	adds	r3, #32
 8007ab8:	2100      	movs	r1, #0
 8007aba:	4618      	mov	r0, r3
 8007abc:	f000 fbb6 	bl	800822c <RCCEx_PLLSAI2_Config>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007ac4:	e003      	b.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	74fb      	strb	r3, [r7, #19]
      break;
 8007aca:	e000      	b.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007acc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ace:	7cfb      	ldrb	r3, [r7, #19]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d10b      	bne.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007ad4:	4b76      	ldr	r3, [pc, #472]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ada:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007ae2:	4973      	ldr	r1, [pc, #460]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8007aea:	e001      	b.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aec:	7cfb      	ldrb	r3, [r7, #19]
 8007aee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d041      	beq.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b00:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007b04:	d02a      	beq.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8007b06:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007b0a:	d824      	bhi.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007b0c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b10:	d008      	beq.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007b12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b16:	d81e      	bhi.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d00a      	beq.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007b1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b20:	d010      	beq.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007b22:	e018      	b.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007b24:	4b62      	ldr	r3, [pc, #392]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	4a61      	ldr	r2, [pc, #388]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b2e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007b30:	e015      	b.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	3304      	adds	r3, #4
 8007b36:	2100      	movs	r1, #0
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f000 fa85 	bl	8008048 <RCCEx_PLLSAI1_Config>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007b42:	e00c      	b.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	3320      	adds	r3, #32
 8007b48:	2100      	movs	r1, #0
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f000 fb6e 	bl	800822c <RCCEx_PLLSAI2_Config>
 8007b50:	4603      	mov	r3, r0
 8007b52:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007b54:	e003      	b.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	74fb      	strb	r3, [r7, #19]
      break;
 8007b5a:	e000      	b.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8007b5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b5e:	7cfb      	ldrb	r3, [r7, #19]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d10b      	bne.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007b64:	4b52      	ldr	r3, [pc, #328]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b6a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b72:	494f      	ldr	r1, [pc, #316]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b74:	4313      	orrs	r3, r2
 8007b76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8007b7a:	e001      	b.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b7c:	7cfb      	ldrb	r3, [r7, #19]
 8007b7e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f000 80a0 	beq.w	8007cce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007b92:	4b47      	ldr	r3, [pc, #284]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d101      	bne.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e000      	b.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d00d      	beq.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ba8:	4b41      	ldr	r3, [pc, #260]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007baa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bac:	4a40      	ldr	r2, [pc, #256]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007bae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007bb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8007bb4:	4b3e      	ldr	r3, [pc, #248]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007bbc:	60bb      	str	r3, [r7, #8]
 8007bbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007bc4:	4b3b      	ldr	r3, [pc, #236]	@ (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a3a      	ldr	r2, [pc, #232]	@ (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007bca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007bce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007bd0:	f7fb fdc2 	bl	8003758 <HAL_GetTick>
 8007bd4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007bd6:	e009      	b.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007bd8:	f7fb fdbe 	bl	8003758 <HAL_GetTick>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	1ad3      	subs	r3, r2, r3
 8007be2:	2b02      	cmp	r3, #2
 8007be4:	d902      	bls.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8007be6:	2303      	movs	r3, #3
 8007be8:	74fb      	strb	r3, [r7, #19]
        break;
 8007bea:	e005      	b.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007bec:	4b31      	ldr	r3, [pc, #196]	@ (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d0ef      	beq.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8007bf8:	7cfb      	ldrb	r3, [r7, #19]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d15c      	bne.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007bfe:	4b2c      	ldr	r3, [pc, #176]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c08:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d01f      	beq.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c16:	697a      	ldr	r2, [r7, #20]
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d019      	beq.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007c1c:	4b24      	ldr	r3, [pc, #144]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c26:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007c28:	4b21      	ldr	r3, [pc, #132]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c2e:	4a20      	ldr	r2, [pc, #128]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007c38:	4b1d      	ldr	r3, [pc, #116]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c3e:	4a1c      	ldr	r2, [pc, #112]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007c48:	4a19      	ldr	r2, [pc, #100]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	f003 0301 	and.w	r3, r3, #1
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d016      	beq.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c5a:	f7fb fd7d 	bl	8003758 <HAL_GetTick>
 8007c5e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c60:	e00b      	b.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c62:	f7fb fd79 	bl	8003758 <HAL_GetTick>
 8007c66:	4602      	mov	r2, r0
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	1ad3      	subs	r3, r2, r3
 8007c6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d902      	bls.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8007c74:	2303      	movs	r3, #3
 8007c76:	74fb      	strb	r3, [r7, #19]
            break;
 8007c78:	e006      	b.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c80:	f003 0302 	and.w	r3, r3, #2
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d0ec      	beq.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8007c88:	7cfb      	ldrb	r3, [r7, #19]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d10c      	bne.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c8e:	4b08      	ldr	r3, [pc, #32]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c9e:	4904      	ldr	r1, [pc, #16]	@ (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007ca6:	e009      	b.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007ca8:	7cfb      	ldrb	r3, [r7, #19]
 8007caa:	74bb      	strb	r3, [r7, #18]
 8007cac:	e006      	b.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8007cae:	bf00      	nop
 8007cb0:	40021000 	.word	0x40021000
 8007cb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cb8:	7cfb      	ldrb	r3, [r7, #19]
 8007cba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007cbc:	7c7b      	ldrb	r3, [r7, #17]
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d105      	bne.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007cc2:	4ba6      	ldr	r3, [pc, #664]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007cc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cc6:	4aa5      	ldr	r2, [pc, #660]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007cc8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ccc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f003 0301 	and.w	r3, r3, #1
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d00a      	beq.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007cda:	4ba0      	ldr	r3, [pc, #640]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ce0:	f023 0203 	bic.w	r2, r3, #3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ce8:	499c      	ldr	r1, [pc, #624]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007cea:	4313      	orrs	r3, r2
 8007cec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f003 0302 	and.w	r3, r3, #2
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d00a      	beq.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007cfc:	4b97      	ldr	r3, [pc, #604]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d02:	f023 020c 	bic.w	r2, r3, #12
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d0a:	4994      	ldr	r1, [pc, #592]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 0304 	and.w	r3, r3, #4
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d00a      	beq.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007d1e:	4b8f      	ldr	r3, [pc, #572]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d24:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d2c:	498b      	ldr	r1, [pc, #556]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f003 0308 	and.w	r3, r3, #8
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d00a      	beq.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007d40:	4b86      	ldr	r3, [pc, #536]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d46:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d4e:	4983      	ldr	r1, [pc, #524]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007d50:	4313      	orrs	r3, r2
 8007d52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f003 0310 	and.w	r3, r3, #16
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00a      	beq.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007d62:	4b7e      	ldr	r3, [pc, #504]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d70:	497a      	ldr	r1, [pc, #488]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007d72:	4313      	orrs	r3, r2
 8007d74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f003 0320 	and.w	r3, r3, #32
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d00a      	beq.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007d84:	4b75      	ldr	r3, [pc, #468]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d8a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d92:	4972      	ldr	r1, [pc, #456]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007d94:	4313      	orrs	r3, r2
 8007d96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d00a      	beq.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007da6:	4b6d      	ldr	r3, [pc, #436]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007db4:	4969      	ldr	r1, [pc, #420]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007db6:	4313      	orrs	r3, r2
 8007db8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00a      	beq.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007dc8:	4b64      	ldr	r3, [pc, #400]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007dd6:	4961      	ldr	r1, [pc, #388]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d00a      	beq.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007dea:	4b5c      	ldr	r3, [pc, #368]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007df0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007df8:	4958      	ldr	r1, [pc, #352]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d00a      	beq.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007e0c:	4b53      	ldr	r3, [pc, #332]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e12:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e1a:	4950      	ldr	r1, [pc, #320]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d00a      	beq.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007e2e:	4b4b      	ldr	r3, [pc, #300]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e34:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e3c:	4947      	ldr	r1, [pc, #284]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d00a      	beq.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007e50:	4b42      	ldr	r3, [pc, #264]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007e52:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007e56:	f023 0203 	bic.w	r2, r3, #3
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e5e:	493f      	ldr	r1, [pc, #252]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007e60:	4313      	orrs	r3, r2
 8007e62:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d028      	beq.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007e72:	4b3a      	ldr	r3, [pc, #232]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e78:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e80:	4936      	ldr	r1, [pc, #216]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007e82:	4313      	orrs	r3, r2
 8007e84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e90:	d106      	bne.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e92:	4b32      	ldr	r3, [pc, #200]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	4a31      	ldr	r2, [pc, #196]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007e98:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e9c:	60d3      	str	r3, [r2, #12]
 8007e9e:	e011      	b.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ea4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007ea8:	d10c      	bne.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	3304      	adds	r3, #4
 8007eae:	2101      	movs	r1, #1
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f000 f8c9 	bl	8008048 <RCCEx_PLLSAI1_Config>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007eba:	7cfb      	ldrb	r3, [r7, #19]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d001      	beq.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8007ec0:	7cfb      	ldrb	r3, [r7, #19]
 8007ec2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d028      	beq.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007ed0:	4b22      	ldr	r3, [pc, #136]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ed6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ede:	491f      	ldr	r1, [pc, #124]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007eea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007eee:	d106      	bne.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ef0:	4b1a      	ldr	r3, [pc, #104]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	4a19      	ldr	r2, [pc, #100]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007ef6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007efa:	60d3      	str	r3, [r2, #12]
 8007efc:	e011      	b.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f02:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007f06:	d10c      	bne.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	3304      	adds	r3, #4
 8007f0c:	2101      	movs	r1, #1
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f000 f89a 	bl	8008048 <RCCEx_PLLSAI1_Config>
 8007f14:	4603      	mov	r3, r0
 8007f16:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007f18:	7cfb      	ldrb	r3, [r7, #19]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d001      	beq.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8007f1e:	7cfb      	ldrb	r3, [r7, #19]
 8007f20:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d02a      	beq.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f34:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007f3c:	4907      	ldr	r1, [pc, #28]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007f48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f4c:	d108      	bne.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f4e:	4b03      	ldr	r3, [pc, #12]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	4a02      	ldr	r2, [pc, #8]	@ (8007f5c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007f54:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f58:	60d3      	str	r3, [r2, #12]
 8007f5a:	e013      	b.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8007f5c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007f64:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007f68:	d10c      	bne.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	3304      	adds	r3, #4
 8007f6e:	2101      	movs	r1, #1
 8007f70:	4618      	mov	r0, r3
 8007f72:	f000 f869 	bl	8008048 <RCCEx_PLLSAI1_Config>
 8007f76:	4603      	mov	r3, r0
 8007f78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007f7a:	7cfb      	ldrb	r3, [r7, #19]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d001      	beq.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8007f80:	7cfb      	ldrb	r3, [r7, #19]
 8007f82:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d02f      	beq.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007f90:	4b2c      	ldr	r3, [pc, #176]	@ (8008044 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f96:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f9e:	4929      	ldr	r1, [pc, #164]	@ (8008044 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007faa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007fae:	d10d      	bne.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	3304      	adds	r3, #4
 8007fb4:	2102      	movs	r1, #2
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f000 f846 	bl	8008048 <RCCEx_PLLSAI1_Config>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007fc0:	7cfb      	ldrb	r3, [r7, #19]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d014      	beq.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8007fc6:	7cfb      	ldrb	r3, [r7, #19]
 8007fc8:	74bb      	strb	r3, [r7, #18]
 8007fca:	e011      	b.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007fd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fd4:	d10c      	bne.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	3320      	adds	r3, #32
 8007fda:	2102      	movs	r1, #2
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f000 f925 	bl	800822c <RCCEx_PLLSAI2_Config>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007fe6:	7cfb      	ldrb	r3, [r7, #19]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d001      	beq.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8007fec:	7cfb      	ldrb	r3, [r7, #19]
 8007fee:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d00b      	beq.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007ffc:	4b11      	ldr	r3, [pc, #68]	@ (8008044 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008002:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800800c:	490d      	ldr	r1, [pc, #52]	@ (8008044 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800800e:	4313      	orrs	r3, r2
 8008010:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800801c:	2b00      	cmp	r3, #0
 800801e:	d00b      	beq.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008020:	4b08      	ldr	r3, [pc, #32]	@ (8008044 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8008022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008026:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008030:	4904      	ldr	r1, [pc, #16]	@ (8008044 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8008032:	4313      	orrs	r3, r2
 8008034:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008038:	7cbb      	ldrb	r3, [r7, #18]
}
 800803a:	4618      	mov	r0, r3
 800803c:	3718      	adds	r7, #24
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	40021000 	.word	0x40021000

08008048 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008052:	2300      	movs	r3, #0
 8008054:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008056:	4b74      	ldr	r3, [pc, #464]	@ (8008228 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008058:	68db      	ldr	r3, [r3, #12]
 800805a:	f003 0303 	and.w	r3, r3, #3
 800805e:	2b00      	cmp	r3, #0
 8008060:	d018      	beq.n	8008094 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008062:	4b71      	ldr	r3, [pc, #452]	@ (8008228 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	f003 0203 	and.w	r2, r3, #3
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	429a      	cmp	r2, r3
 8008070:	d10d      	bne.n	800808e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
       ||
 8008076:	2b00      	cmp	r3, #0
 8008078:	d009      	beq.n	800808e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800807a:	4b6b      	ldr	r3, [pc, #428]	@ (8008228 <RCCEx_PLLSAI1_Config+0x1e0>)
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	091b      	lsrs	r3, r3, #4
 8008080:	f003 0307 	and.w	r3, r3, #7
 8008084:	1c5a      	adds	r2, r3, #1
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	685b      	ldr	r3, [r3, #4]
       ||
 800808a:	429a      	cmp	r2, r3
 800808c:	d047      	beq.n	800811e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800808e:	2301      	movs	r3, #1
 8008090:	73fb      	strb	r3, [r7, #15]
 8008092:	e044      	b.n	800811e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	2b03      	cmp	r3, #3
 800809a:	d018      	beq.n	80080ce <RCCEx_PLLSAI1_Config+0x86>
 800809c:	2b03      	cmp	r3, #3
 800809e:	d825      	bhi.n	80080ec <RCCEx_PLLSAI1_Config+0xa4>
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d002      	beq.n	80080aa <RCCEx_PLLSAI1_Config+0x62>
 80080a4:	2b02      	cmp	r3, #2
 80080a6:	d009      	beq.n	80080bc <RCCEx_PLLSAI1_Config+0x74>
 80080a8:	e020      	b.n	80080ec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80080aa:	4b5f      	ldr	r3, [pc, #380]	@ (8008228 <RCCEx_PLLSAI1_Config+0x1e0>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f003 0302 	and.w	r3, r3, #2
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d11d      	bne.n	80080f2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80080b6:	2301      	movs	r3, #1
 80080b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80080ba:	e01a      	b.n	80080f2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80080bc:	4b5a      	ldr	r3, [pc, #360]	@ (8008228 <RCCEx_PLLSAI1_Config+0x1e0>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d116      	bne.n	80080f6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80080c8:	2301      	movs	r3, #1
 80080ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80080cc:	e013      	b.n	80080f6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80080ce:	4b56      	ldr	r3, [pc, #344]	@ (8008228 <RCCEx_PLLSAI1_Config+0x1e0>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d10f      	bne.n	80080fa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80080da:	4b53      	ldr	r3, [pc, #332]	@ (8008228 <RCCEx_PLLSAI1_Config+0x1e0>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d109      	bne.n	80080fa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80080e6:	2301      	movs	r3, #1
 80080e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80080ea:	e006      	b.n	80080fa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80080ec:	2301      	movs	r3, #1
 80080ee:	73fb      	strb	r3, [r7, #15]
      break;
 80080f0:	e004      	b.n	80080fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80080f2:	bf00      	nop
 80080f4:	e002      	b.n	80080fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80080f6:	bf00      	nop
 80080f8:	e000      	b.n	80080fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80080fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80080fc:	7bfb      	ldrb	r3, [r7, #15]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d10d      	bne.n	800811e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008102:	4b49      	ldr	r3, [pc, #292]	@ (8008228 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008104:	68db      	ldr	r3, [r3, #12]
 8008106:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6819      	ldr	r1, [r3, #0]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	3b01      	subs	r3, #1
 8008114:	011b      	lsls	r3, r3, #4
 8008116:	430b      	orrs	r3, r1
 8008118:	4943      	ldr	r1, [pc, #268]	@ (8008228 <RCCEx_PLLSAI1_Config+0x1e0>)
 800811a:	4313      	orrs	r3, r2
 800811c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800811e:	7bfb      	ldrb	r3, [r7, #15]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d17c      	bne.n	800821e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008124:	4b40      	ldr	r3, [pc, #256]	@ (8008228 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a3f      	ldr	r2, [pc, #252]	@ (8008228 <RCCEx_PLLSAI1_Config+0x1e0>)
 800812a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800812e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008130:	f7fb fb12 	bl	8003758 <HAL_GetTick>
 8008134:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008136:	e009      	b.n	800814c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008138:	f7fb fb0e 	bl	8003758 <HAL_GetTick>
 800813c:	4602      	mov	r2, r0
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	1ad3      	subs	r3, r2, r3
 8008142:	2b02      	cmp	r3, #2
 8008144:	d902      	bls.n	800814c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008146:	2303      	movs	r3, #3
 8008148:	73fb      	strb	r3, [r7, #15]
        break;
 800814a:	e005      	b.n	8008158 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800814c:	4b36      	ldr	r3, [pc, #216]	@ (8008228 <RCCEx_PLLSAI1_Config+0x1e0>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008154:	2b00      	cmp	r3, #0
 8008156:	d1ef      	bne.n	8008138 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008158:	7bfb      	ldrb	r3, [r7, #15]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d15f      	bne.n	800821e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d110      	bne.n	8008186 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008164:	4b30      	ldr	r3, [pc, #192]	@ (8008228 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008166:	691b      	ldr	r3, [r3, #16]
 8008168:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800816c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	6892      	ldr	r2, [r2, #8]
 8008174:	0211      	lsls	r1, r2, #8
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	68d2      	ldr	r2, [r2, #12]
 800817a:	06d2      	lsls	r2, r2, #27
 800817c:	430a      	orrs	r2, r1
 800817e:	492a      	ldr	r1, [pc, #168]	@ (8008228 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008180:	4313      	orrs	r3, r2
 8008182:	610b      	str	r3, [r1, #16]
 8008184:	e027      	b.n	80081d6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	2b01      	cmp	r3, #1
 800818a:	d112      	bne.n	80081b2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800818c:	4b26      	ldr	r3, [pc, #152]	@ (8008228 <RCCEx_PLLSAI1_Config+0x1e0>)
 800818e:	691b      	ldr	r3, [r3, #16]
 8008190:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8008194:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	6892      	ldr	r2, [r2, #8]
 800819c:	0211      	lsls	r1, r2, #8
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	6912      	ldr	r2, [r2, #16]
 80081a2:	0852      	lsrs	r2, r2, #1
 80081a4:	3a01      	subs	r2, #1
 80081a6:	0552      	lsls	r2, r2, #21
 80081a8:	430a      	orrs	r2, r1
 80081aa:	491f      	ldr	r1, [pc, #124]	@ (8008228 <RCCEx_PLLSAI1_Config+0x1e0>)
 80081ac:	4313      	orrs	r3, r2
 80081ae:	610b      	str	r3, [r1, #16]
 80081b0:	e011      	b.n	80081d6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80081b2:	4b1d      	ldr	r3, [pc, #116]	@ (8008228 <RCCEx_PLLSAI1_Config+0x1e0>)
 80081b4:	691b      	ldr	r3, [r3, #16]
 80081b6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80081ba:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	6892      	ldr	r2, [r2, #8]
 80081c2:	0211      	lsls	r1, r2, #8
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	6952      	ldr	r2, [r2, #20]
 80081c8:	0852      	lsrs	r2, r2, #1
 80081ca:	3a01      	subs	r2, #1
 80081cc:	0652      	lsls	r2, r2, #25
 80081ce:	430a      	orrs	r2, r1
 80081d0:	4915      	ldr	r1, [pc, #84]	@ (8008228 <RCCEx_PLLSAI1_Config+0x1e0>)
 80081d2:	4313      	orrs	r3, r2
 80081d4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80081d6:	4b14      	ldr	r3, [pc, #80]	@ (8008228 <RCCEx_PLLSAI1_Config+0x1e0>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a13      	ldr	r2, [pc, #76]	@ (8008228 <RCCEx_PLLSAI1_Config+0x1e0>)
 80081dc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80081e0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081e2:	f7fb fab9 	bl	8003758 <HAL_GetTick>
 80081e6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80081e8:	e009      	b.n	80081fe <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80081ea:	f7fb fab5 	bl	8003758 <HAL_GetTick>
 80081ee:	4602      	mov	r2, r0
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	1ad3      	subs	r3, r2, r3
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	d902      	bls.n	80081fe <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80081f8:	2303      	movs	r3, #3
 80081fa:	73fb      	strb	r3, [r7, #15]
          break;
 80081fc:	e005      	b.n	800820a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80081fe:	4b0a      	ldr	r3, [pc, #40]	@ (8008228 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008206:	2b00      	cmp	r3, #0
 8008208:	d0ef      	beq.n	80081ea <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800820a:	7bfb      	ldrb	r3, [r7, #15]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d106      	bne.n	800821e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008210:	4b05      	ldr	r3, [pc, #20]	@ (8008228 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008212:	691a      	ldr	r2, [r3, #16]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	699b      	ldr	r3, [r3, #24]
 8008218:	4903      	ldr	r1, [pc, #12]	@ (8008228 <RCCEx_PLLSAI1_Config+0x1e0>)
 800821a:	4313      	orrs	r3, r2
 800821c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800821e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008220:	4618      	mov	r0, r3
 8008222:	3710      	adds	r7, #16
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	40021000 	.word	0x40021000

0800822c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b084      	sub	sp, #16
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008236:	2300      	movs	r3, #0
 8008238:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800823a:	4b69      	ldr	r3, [pc, #420]	@ (80083e0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800823c:	68db      	ldr	r3, [r3, #12]
 800823e:	f003 0303 	and.w	r3, r3, #3
 8008242:	2b00      	cmp	r3, #0
 8008244:	d018      	beq.n	8008278 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008246:	4b66      	ldr	r3, [pc, #408]	@ (80083e0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008248:	68db      	ldr	r3, [r3, #12]
 800824a:	f003 0203 	and.w	r2, r3, #3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	429a      	cmp	r2, r3
 8008254:	d10d      	bne.n	8008272 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
       ||
 800825a:	2b00      	cmp	r3, #0
 800825c:	d009      	beq.n	8008272 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800825e:	4b60      	ldr	r3, [pc, #384]	@ (80083e0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	091b      	lsrs	r3, r3, #4
 8008264:	f003 0307 	and.w	r3, r3, #7
 8008268:	1c5a      	adds	r2, r3, #1
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	685b      	ldr	r3, [r3, #4]
       ||
 800826e:	429a      	cmp	r2, r3
 8008270:	d047      	beq.n	8008302 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	73fb      	strb	r3, [r7, #15]
 8008276:	e044      	b.n	8008302 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	2b03      	cmp	r3, #3
 800827e:	d018      	beq.n	80082b2 <RCCEx_PLLSAI2_Config+0x86>
 8008280:	2b03      	cmp	r3, #3
 8008282:	d825      	bhi.n	80082d0 <RCCEx_PLLSAI2_Config+0xa4>
 8008284:	2b01      	cmp	r3, #1
 8008286:	d002      	beq.n	800828e <RCCEx_PLLSAI2_Config+0x62>
 8008288:	2b02      	cmp	r3, #2
 800828a:	d009      	beq.n	80082a0 <RCCEx_PLLSAI2_Config+0x74>
 800828c:	e020      	b.n	80082d0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800828e:	4b54      	ldr	r3, [pc, #336]	@ (80083e0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f003 0302 	and.w	r3, r3, #2
 8008296:	2b00      	cmp	r3, #0
 8008298:	d11d      	bne.n	80082d6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800829a:	2301      	movs	r3, #1
 800829c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800829e:	e01a      	b.n	80082d6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80082a0:	4b4f      	ldr	r3, [pc, #316]	@ (80083e0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d116      	bne.n	80082da <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80082ac:	2301      	movs	r3, #1
 80082ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80082b0:	e013      	b.n	80082da <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80082b2:	4b4b      	ldr	r3, [pc, #300]	@ (80083e0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d10f      	bne.n	80082de <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80082be:	4b48      	ldr	r3, [pc, #288]	@ (80083e0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d109      	bne.n	80082de <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80082ce:	e006      	b.n	80082de <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80082d0:	2301      	movs	r3, #1
 80082d2:	73fb      	strb	r3, [r7, #15]
      break;
 80082d4:	e004      	b.n	80082e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80082d6:	bf00      	nop
 80082d8:	e002      	b.n	80082e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80082da:	bf00      	nop
 80082dc:	e000      	b.n	80082e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80082de:	bf00      	nop
    }

    if(status == HAL_OK)
 80082e0:	7bfb      	ldrb	r3, [r7, #15]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d10d      	bne.n	8008302 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80082e6:	4b3e      	ldr	r3, [pc, #248]	@ (80083e0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6819      	ldr	r1, [r3, #0]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	3b01      	subs	r3, #1
 80082f8:	011b      	lsls	r3, r3, #4
 80082fa:	430b      	orrs	r3, r1
 80082fc:	4938      	ldr	r1, [pc, #224]	@ (80083e0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80082fe:	4313      	orrs	r3, r2
 8008300:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008302:	7bfb      	ldrb	r3, [r7, #15]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d166      	bne.n	80083d6 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008308:	4b35      	ldr	r3, [pc, #212]	@ (80083e0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a34      	ldr	r2, [pc, #208]	@ (80083e0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800830e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008312:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008314:	f7fb fa20 	bl	8003758 <HAL_GetTick>
 8008318:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800831a:	e009      	b.n	8008330 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800831c:	f7fb fa1c 	bl	8003758 <HAL_GetTick>
 8008320:	4602      	mov	r2, r0
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	1ad3      	subs	r3, r2, r3
 8008326:	2b02      	cmp	r3, #2
 8008328:	d902      	bls.n	8008330 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800832a:	2303      	movs	r3, #3
 800832c:	73fb      	strb	r3, [r7, #15]
        break;
 800832e:	e005      	b.n	800833c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008330:	4b2b      	ldr	r3, [pc, #172]	@ (80083e0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008338:	2b00      	cmp	r3, #0
 800833a:	d1ef      	bne.n	800831c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800833c:	7bfb      	ldrb	r3, [r7, #15]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d149      	bne.n	80083d6 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d110      	bne.n	800836a <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008348:	4b25      	ldr	r3, [pc, #148]	@ (80083e0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800834a:	695b      	ldr	r3, [r3, #20]
 800834c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8008350:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	6892      	ldr	r2, [r2, #8]
 8008358:	0211      	lsls	r1, r2, #8
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	68d2      	ldr	r2, [r2, #12]
 800835e:	06d2      	lsls	r2, r2, #27
 8008360:	430a      	orrs	r2, r1
 8008362:	491f      	ldr	r1, [pc, #124]	@ (80083e0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008364:	4313      	orrs	r3, r2
 8008366:	614b      	str	r3, [r1, #20]
 8008368:	e011      	b.n	800838e <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800836a:	4b1d      	ldr	r3, [pc, #116]	@ (80083e0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800836c:	695b      	ldr	r3, [r3, #20]
 800836e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8008372:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	6892      	ldr	r2, [r2, #8]
 800837a:	0211      	lsls	r1, r2, #8
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	6912      	ldr	r2, [r2, #16]
 8008380:	0852      	lsrs	r2, r2, #1
 8008382:	3a01      	subs	r2, #1
 8008384:	0652      	lsls	r2, r2, #25
 8008386:	430a      	orrs	r2, r1
 8008388:	4915      	ldr	r1, [pc, #84]	@ (80083e0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800838a:	4313      	orrs	r3, r2
 800838c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800838e:	4b14      	ldr	r3, [pc, #80]	@ (80083e0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a13      	ldr	r2, [pc, #76]	@ (80083e0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008394:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008398:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800839a:	f7fb f9dd 	bl	8003758 <HAL_GetTick>
 800839e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80083a0:	e009      	b.n	80083b6 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80083a2:	f7fb f9d9 	bl	8003758 <HAL_GetTick>
 80083a6:	4602      	mov	r2, r0
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	1ad3      	subs	r3, r2, r3
 80083ac:	2b02      	cmp	r3, #2
 80083ae:	d902      	bls.n	80083b6 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 80083b0:	2303      	movs	r3, #3
 80083b2:	73fb      	strb	r3, [r7, #15]
          break;
 80083b4:	e005      	b.n	80083c2 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80083b6:	4b0a      	ldr	r3, [pc, #40]	@ (80083e0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d0ef      	beq.n	80083a2 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80083c2:	7bfb      	ldrb	r3, [r7, #15]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d106      	bne.n	80083d6 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80083c8:	4b05      	ldr	r3, [pc, #20]	@ (80083e0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80083ca:	695a      	ldr	r2, [r3, #20]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	695b      	ldr	r3, [r3, #20]
 80083d0:	4903      	ldr	r1, [pc, #12]	@ (80083e0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80083d2:	4313      	orrs	r3, r2
 80083d4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80083d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3710      	adds	r7, #16
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	40021000 	.word	0x40021000

080083e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d101      	bne.n	80083f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80083f2:	2301      	movs	r3, #1
 80083f4:	e049      	b.n	800848a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d106      	bne.n	8008410 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2200      	movs	r2, #0
 8008406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 f841 	bl	8008492 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2202      	movs	r2, #2
 8008414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	3304      	adds	r3, #4
 8008420:	4619      	mov	r1, r3
 8008422:	4610      	mov	r0, r2
 8008424:	f000 f9e0 	bl	80087e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2201      	movs	r2, #1
 800842c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2201      	movs	r2, #1
 8008434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2201      	movs	r2, #1
 800843c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2201      	movs	r2, #1
 8008444:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2201      	movs	r2, #1
 800844c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2201      	movs	r2, #1
 8008454:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2201      	movs	r2, #1
 800845c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2201      	movs	r2, #1
 8008464:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2201      	movs	r2, #1
 800846c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2201      	movs	r2, #1
 8008474:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2201      	movs	r2, #1
 800847c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008488:	2300      	movs	r3, #0
}
 800848a:	4618      	mov	r0, r3
 800848c:	3708      	adds	r7, #8
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}

08008492 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008492:	b480      	push	{r7}
 8008494:	b083      	sub	sp, #12
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800849a:	bf00      	nop
 800849c:	370c      	adds	r7, #12
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr
	...

080084a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b085      	sub	sp, #20
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d001      	beq.n	80084c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80084bc:	2301      	movs	r3, #1
 80084be:	e04f      	b.n	8008560 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2202      	movs	r2, #2
 80084c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	68da      	ldr	r2, [r3, #12]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f042 0201 	orr.w	r2, r2, #1
 80084d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a23      	ldr	r2, [pc, #140]	@ (800856c <HAL_TIM_Base_Start_IT+0xc4>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d01d      	beq.n	800851e <HAL_TIM_Base_Start_IT+0x76>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084ea:	d018      	beq.n	800851e <HAL_TIM_Base_Start_IT+0x76>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a1f      	ldr	r2, [pc, #124]	@ (8008570 <HAL_TIM_Base_Start_IT+0xc8>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d013      	beq.n	800851e <HAL_TIM_Base_Start_IT+0x76>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a1e      	ldr	r2, [pc, #120]	@ (8008574 <HAL_TIM_Base_Start_IT+0xcc>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d00e      	beq.n	800851e <HAL_TIM_Base_Start_IT+0x76>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a1c      	ldr	r2, [pc, #112]	@ (8008578 <HAL_TIM_Base_Start_IT+0xd0>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d009      	beq.n	800851e <HAL_TIM_Base_Start_IT+0x76>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a1b      	ldr	r2, [pc, #108]	@ (800857c <HAL_TIM_Base_Start_IT+0xd4>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d004      	beq.n	800851e <HAL_TIM_Base_Start_IT+0x76>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a19      	ldr	r2, [pc, #100]	@ (8008580 <HAL_TIM_Base_Start_IT+0xd8>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d115      	bne.n	800854a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	689a      	ldr	r2, [r3, #8]
 8008524:	4b17      	ldr	r3, [pc, #92]	@ (8008584 <HAL_TIM_Base_Start_IT+0xdc>)
 8008526:	4013      	ands	r3, r2
 8008528:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2b06      	cmp	r3, #6
 800852e:	d015      	beq.n	800855c <HAL_TIM_Base_Start_IT+0xb4>
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008536:	d011      	beq.n	800855c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f042 0201 	orr.w	r2, r2, #1
 8008546:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008548:	e008      	b.n	800855c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f042 0201 	orr.w	r2, r2, #1
 8008558:	601a      	str	r2, [r3, #0]
 800855a:	e000      	b.n	800855e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800855c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800855e:	2300      	movs	r3, #0
}
 8008560:	4618      	mov	r0, r3
 8008562:	3714      	adds	r7, #20
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr
 800856c:	40012c00 	.word	0x40012c00
 8008570:	40000400 	.word	0x40000400
 8008574:	40000800 	.word	0x40000800
 8008578:	40000c00 	.word	0x40000c00
 800857c:	40013400 	.word	0x40013400
 8008580:	40014000 	.word	0x40014000
 8008584:	00010007 	.word	0x00010007

08008588 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	68db      	ldr	r3, [r3, #12]
 8008596:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	691b      	ldr	r3, [r3, #16]
 800859e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	f003 0302 	and.w	r3, r3, #2
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d020      	beq.n	80085ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f003 0302 	and.w	r3, r3, #2
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d01b      	beq.n	80085ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f06f 0202 	mvn.w	r2, #2
 80085bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2201      	movs	r2, #1
 80085c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	699b      	ldr	r3, [r3, #24]
 80085ca:	f003 0303 	and.w	r3, r3, #3
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d003      	beq.n	80085da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 f8e9 	bl	80087aa <HAL_TIM_IC_CaptureCallback>
 80085d8:	e005      	b.n	80085e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 f8db 	bl	8008796 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 f8ec 	bl	80087be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2200      	movs	r2, #0
 80085ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	f003 0304 	and.w	r3, r3, #4
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d020      	beq.n	8008638 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f003 0304 	and.w	r3, r3, #4
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d01b      	beq.n	8008638 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f06f 0204 	mvn.w	r2, #4
 8008608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2202      	movs	r2, #2
 800860e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	699b      	ldr	r3, [r3, #24]
 8008616:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800861a:	2b00      	cmp	r3, #0
 800861c:	d003      	beq.n	8008626 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 f8c3 	bl	80087aa <HAL_TIM_IC_CaptureCallback>
 8008624:	e005      	b.n	8008632 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 f8b5 	bl	8008796 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 f8c6 	bl	80087be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	f003 0308 	and.w	r3, r3, #8
 800863e:	2b00      	cmp	r3, #0
 8008640:	d020      	beq.n	8008684 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f003 0308 	and.w	r3, r3, #8
 8008648:	2b00      	cmp	r3, #0
 800864a:	d01b      	beq.n	8008684 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f06f 0208 	mvn.w	r2, #8
 8008654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2204      	movs	r2, #4
 800865a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	69db      	ldr	r3, [r3, #28]
 8008662:	f003 0303 	and.w	r3, r3, #3
 8008666:	2b00      	cmp	r3, #0
 8008668:	d003      	beq.n	8008672 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 f89d 	bl	80087aa <HAL_TIM_IC_CaptureCallback>
 8008670:	e005      	b.n	800867e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 f88f 	bl	8008796 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f000 f8a0 	bl	80087be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	f003 0310 	and.w	r3, r3, #16
 800868a:	2b00      	cmp	r3, #0
 800868c:	d020      	beq.n	80086d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f003 0310 	and.w	r3, r3, #16
 8008694:	2b00      	cmp	r3, #0
 8008696:	d01b      	beq.n	80086d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f06f 0210 	mvn.w	r2, #16
 80086a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2208      	movs	r2, #8
 80086a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	69db      	ldr	r3, [r3, #28]
 80086ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d003      	beq.n	80086be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 f877 	bl	80087aa <HAL_TIM_IC_CaptureCallback>
 80086bc:	e005      	b.n	80086ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 f869 	bl	8008796 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f000 f87a 	bl	80087be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	f003 0301 	and.w	r3, r3, #1
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00c      	beq.n	80086f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f003 0301 	and.w	r3, r3, #1
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d007      	beq.n	80086f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f06f 0201 	mvn.w	r2, #1
 80086ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f7f9 fc2e 	bl	8001f50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d104      	bne.n	8008708 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008704:	2b00      	cmp	r3, #0
 8008706:	d00c      	beq.n	8008722 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800870e:	2b00      	cmp	r3, #0
 8008710:	d007      	beq.n	8008722 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800871a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 f913 	bl	8008948 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008728:	2b00      	cmp	r3, #0
 800872a:	d00c      	beq.n	8008746 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008732:	2b00      	cmp	r3, #0
 8008734:	d007      	beq.n	8008746 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800873e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f000 f90b 	bl	800895c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800874c:	2b00      	cmp	r3, #0
 800874e:	d00c      	beq.n	800876a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008756:	2b00      	cmp	r3, #0
 8008758:	d007      	beq.n	800876a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008762:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 f834 	bl	80087d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	f003 0320 	and.w	r3, r3, #32
 8008770:	2b00      	cmp	r3, #0
 8008772:	d00c      	beq.n	800878e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f003 0320 	and.w	r3, r3, #32
 800877a:	2b00      	cmp	r3, #0
 800877c:	d007      	beq.n	800878e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f06f 0220 	mvn.w	r2, #32
 8008786:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 f8d3 	bl	8008934 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800878e:	bf00      	nop
 8008790:	3710      	adds	r7, #16
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}

08008796 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008796:	b480      	push	{r7}
 8008798:	b083      	sub	sp, #12
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800879e:	bf00      	nop
 80087a0:	370c      	adds	r7, #12
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr

080087aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80087aa:	b480      	push	{r7}
 80087ac:	b083      	sub	sp, #12
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80087b2:	bf00      	nop
 80087b4:	370c      	adds	r7, #12
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr

080087be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80087be:	b480      	push	{r7}
 80087c0:	b083      	sub	sp, #12
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80087c6:	bf00      	nop
 80087c8:	370c      	adds	r7, #12
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr

080087d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80087d2:	b480      	push	{r7}
 80087d4:	b083      	sub	sp, #12
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80087da:	bf00      	nop
 80087dc:	370c      	adds	r7, #12
 80087de:	46bd      	mov	sp, r7
 80087e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e4:	4770      	bx	lr
	...

080087e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b085      	sub	sp, #20
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	4a46      	ldr	r2, [pc, #280]	@ (8008914 <TIM_Base_SetConfig+0x12c>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d013      	beq.n	8008828 <TIM_Base_SetConfig+0x40>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008806:	d00f      	beq.n	8008828 <TIM_Base_SetConfig+0x40>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	4a43      	ldr	r2, [pc, #268]	@ (8008918 <TIM_Base_SetConfig+0x130>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d00b      	beq.n	8008828 <TIM_Base_SetConfig+0x40>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	4a42      	ldr	r2, [pc, #264]	@ (800891c <TIM_Base_SetConfig+0x134>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d007      	beq.n	8008828 <TIM_Base_SetConfig+0x40>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	4a41      	ldr	r2, [pc, #260]	@ (8008920 <TIM_Base_SetConfig+0x138>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d003      	beq.n	8008828 <TIM_Base_SetConfig+0x40>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	4a40      	ldr	r2, [pc, #256]	@ (8008924 <TIM_Base_SetConfig+0x13c>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d108      	bne.n	800883a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800882e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	68fa      	ldr	r2, [r7, #12]
 8008836:	4313      	orrs	r3, r2
 8008838:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	4a35      	ldr	r2, [pc, #212]	@ (8008914 <TIM_Base_SetConfig+0x12c>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d01f      	beq.n	8008882 <TIM_Base_SetConfig+0x9a>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008848:	d01b      	beq.n	8008882 <TIM_Base_SetConfig+0x9a>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	4a32      	ldr	r2, [pc, #200]	@ (8008918 <TIM_Base_SetConfig+0x130>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d017      	beq.n	8008882 <TIM_Base_SetConfig+0x9a>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	4a31      	ldr	r2, [pc, #196]	@ (800891c <TIM_Base_SetConfig+0x134>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d013      	beq.n	8008882 <TIM_Base_SetConfig+0x9a>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	4a30      	ldr	r2, [pc, #192]	@ (8008920 <TIM_Base_SetConfig+0x138>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d00f      	beq.n	8008882 <TIM_Base_SetConfig+0x9a>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4a2f      	ldr	r2, [pc, #188]	@ (8008924 <TIM_Base_SetConfig+0x13c>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d00b      	beq.n	8008882 <TIM_Base_SetConfig+0x9a>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4a2e      	ldr	r2, [pc, #184]	@ (8008928 <TIM_Base_SetConfig+0x140>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d007      	beq.n	8008882 <TIM_Base_SetConfig+0x9a>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4a2d      	ldr	r2, [pc, #180]	@ (800892c <TIM_Base_SetConfig+0x144>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d003      	beq.n	8008882 <TIM_Base_SetConfig+0x9a>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4a2c      	ldr	r2, [pc, #176]	@ (8008930 <TIM_Base_SetConfig+0x148>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d108      	bne.n	8008894 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008888:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	68db      	ldr	r3, [r3, #12]
 800888e:	68fa      	ldr	r2, [r7, #12]
 8008890:	4313      	orrs	r3, r2
 8008892:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	695b      	ldr	r3, [r3, #20]
 800889e:	4313      	orrs	r3, r2
 80088a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	68fa      	ldr	r2, [r7, #12]
 80088a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	689a      	ldr	r2, [r3, #8]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	4a16      	ldr	r2, [pc, #88]	@ (8008914 <TIM_Base_SetConfig+0x12c>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d00f      	beq.n	80088e0 <TIM_Base_SetConfig+0xf8>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	4a18      	ldr	r2, [pc, #96]	@ (8008924 <TIM_Base_SetConfig+0x13c>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d00b      	beq.n	80088e0 <TIM_Base_SetConfig+0xf8>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	4a17      	ldr	r2, [pc, #92]	@ (8008928 <TIM_Base_SetConfig+0x140>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d007      	beq.n	80088e0 <TIM_Base_SetConfig+0xf8>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	4a16      	ldr	r2, [pc, #88]	@ (800892c <TIM_Base_SetConfig+0x144>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d003      	beq.n	80088e0 <TIM_Base_SetConfig+0xf8>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	4a15      	ldr	r2, [pc, #84]	@ (8008930 <TIM_Base_SetConfig+0x148>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d103      	bne.n	80088e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	691a      	ldr	r2, [r3, #16]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2201      	movs	r2, #1
 80088ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	691b      	ldr	r3, [r3, #16]
 80088f2:	f003 0301 	and.w	r3, r3, #1
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d105      	bne.n	8008906 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	691b      	ldr	r3, [r3, #16]
 80088fe:	f023 0201 	bic.w	r2, r3, #1
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	611a      	str	r2, [r3, #16]
  }
}
 8008906:	bf00      	nop
 8008908:	3714      	adds	r7, #20
 800890a:	46bd      	mov	sp, r7
 800890c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008910:	4770      	bx	lr
 8008912:	bf00      	nop
 8008914:	40012c00 	.word	0x40012c00
 8008918:	40000400 	.word	0x40000400
 800891c:	40000800 	.word	0x40000800
 8008920:	40000c00 	.word	0x40000c00
 8008924:	40013400 	.word	0x40013400
 8008928:	40014000 	.word	0x40014000
 800892c:	40014400 	.word	0x40014400
 8008930:	40014800 	.word	0x40014800

08008934 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800893c:	bf00      	nop
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr

08008948 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008950:	bf00      	nop
 8008952:	370c      	adds	r7, #12
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008964:	bf00      	nop
 8008966:	370c      	adds	r7, #12
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b082      	sub	sp, #8
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d101      	bne.n	8008982 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800897e:	2301      	movs	r3, #1
 8008980:	e040      	b.n	8008a04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008986:	2b00      	cmp	r3, #0
 8008988:	d106      	bne.n	8008998 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2200      	movs	r2, #0
 800898e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f7f9 fcbc 	bl	8002310 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2224      	movs	r2, #36	@ 0x24
 800899c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f022 0201 	bic.w	r2, r2, #1
 80089ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d002      	beq.n	80089bc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 fe52 	bl	8009660 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 fb97 	bl	80090f0 <UART_SetConfig>
 80089c2:	4603      	mov	r3, r0
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d101      	bne.n	80089cc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80089c8:	2301      	movs	r3, #1
 80089ca:	e01b      	b.n	8008a04 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	685a      	ldr	r2, [r3, #4]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80089da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	689a      	ldr	r2, [r3, #8]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80089ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f042 0201 	orr.w	r2, r2, #1
 80089fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 fed1 	bl	80097a4 <UART_CheckIdleState>
 8008a02:	4603      	mov	r3, r0
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3708      	adds	r7, #8
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b08a      	sub	sp, #40	@ 0x28
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	4613      	mov	r3, r2
 8008a18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a20:	2b20      	cmp	r3, #32
 8008a22:	d137      	bne.n	8008a94 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d002      	beq.n	8008a30 <HAL_UART_Receive_IT+0x24>
 8008a2a:	88fb      	ldrh	r3, [r7, #6]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d101      	bne.n	8008a34 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008a30:	2301      	movs	r3, #1
 8008a32:	e030      	b.n	8008a96 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2200      	movs	r2, #0
 8008a38:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a18      	ldr	r2, [pc, #96]	@ (8008aa0 <HAL_UART_Receive_IT+0x94>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d01f      	beq.n	8008a84 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d018      	beq.n	8008a84 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	e853 3f00 	ldrex	r3, [r3]
 8008a5e:	613b      	str	r3, [r7, #16]
   return(result);
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008a66:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a70:	623b      	str	r3, [r7, #32]
 8008a72:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a74:	69f9      	ldr	r1, [r7, #28]
 8008a76:	6a3a      	ldr	r2, [r7, #32]
 8008a78:	e841 2300 	strex	r3, r2, [r1]
 8008a7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d1e6      	bne.n	8008a52 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008a84:	88fb      	ldrh	r3, [r7, #6]
 8008a86:	461a      	mov	r2, r3
 8008a88:	68b9      	ldr	r1, [r7, #8]
 8008a8a:	68f8      	ldr	r0, [r7, #12]
 8008a8c:	f000 ffa0 	bl	80099d0 <UART_Start_Receive_IT>
 8008a90:	4603      	mov	r3, r0
 8008a92:	e000      	b.n	8008a96 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008a94:	2302      	movs	r3, #2
  }
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3728      	adds	r7, #40	@ 0x28
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	40008000 	.word	0x40008000

08008aa4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b0ba      	sub	sp, #232	@ 0xe8
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	69db      	ldr	r3, [r3, #28]
 8008ab2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	689b      	ldr	r3, [r3, #8]
 8008ac6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008aca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008ace:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008ad2:	4013      	ands	r3, r2
 8008ad4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008ad8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d115      	bne.n	8008b0c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ae4:	f003 0320 	and.w	r3, r3, #32
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d00f      	beq.n	8008b0c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008af0:	f003 0320 	and.w	r3, r3, #32
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d009      	beq.n	8008b0c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	f000 82ca 	beq.w	8009096 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	4798      	blx	r3
      }
      return;
 8008b0a:	e2c4      	b.n	8009096 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008b0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	f000 8117 	beq.w	8008d44 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008b16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b1a:	f003 0301 	and.w	r3, r3, #1
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d106      	bne.n	8008b30 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008b22:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008b26:	4b85      	ldr	r3, [pc, #532]	@ (8008d3c <HAL_UART_IRQHandler+0x298>)
 8008b28:	4013      	ands	r3, r2
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	f000 810a 	beq.w	8008d44 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b34:	f003 0301 	and.w	r3, r3, #1
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d011      	beq.n	8008b60 <HAL_UART_IRQHandler+0xbc>
 8008b3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d00b      	beq.n	8008b60 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	2201      	movs	r2, #1
 8008b4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b56:	f043 0201 	orr.w	r2, r3, #1
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b64:	f003 0302 	and.w	r3, r3, #2
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d011      	beq.n	8008b90 <HAL_UART_IRQHandler+0xec>
 8008b6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b70:	f003 0301 	and.w	r3, r3, #1
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d00b      	beq.n	8008b90 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	2202      	movs	r2, #2
 8008b7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b86:	f043 0204 	orr.w	r2, r3, #4
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b94:	f003 0304 	and.w	r3, r3, #4
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d011      	beq.n	8008bc0 <HAL_UART_IRQHandler+0x11c>
 8008b9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ba0:	f003 0301 	and.w	r3, r3, #1
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d00b      	beq.n	8008bc0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	2204      	movs	r2, #4
 8008bae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008bb6:	f043 0202 	orr.w	r2, r3, #2
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bc4:	f003 0308 	and.w	r3, r3, #8
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d017      	beq.n	8008bfc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bd0:	f003 0320 	and.w	r3, r3, #32
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d105      	bne.n	8008be4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008bd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008bdc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d00b      	beq.n	8008bfc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	2208      	movs	r2, #8
 8008bea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008bf2:	f043 0208 	orr.w	r2, r3, #8
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d012      	beq.n	8008c2e <HAL_UART_IRQHandler+0x18a>
 8008c08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c0c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d00c      	beq.n	8008c2e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008c1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c24:	f043 0220 	orr.w	r2, r3, #32
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	f000 8230 	beq.w	800909a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c3e:	f003 0320 	and.w	r3, r3, #32
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d00d      	beq.n	8008c62 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008c46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c4a:	f003 0320 	and.w	r3, r3, #32
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d007      	beq.n	8008c62 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d003      	beq.n	8008c62 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c68:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	689b      	ldr	r3, [r3, #8]
 8008c72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c76:	2b40      	cmp	r3, #64	@ 0x40
 8008c78:	d005      	beq.n	8008c86 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008c7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008c7e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d04f      	beq.n	8008d26 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 ff68 	bl	8009b5c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c96:	2b40      	cmp	r3, #64	@ 0x40
 8008c98:	d141      	bne.n	8008d1e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	3308      	adds	r3, #8
 8008ca0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008ca8:	e853 3f00 	ldrex	r3, [r3]
 8008cac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008cb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008cb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008cb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	3308      	adds	r3, #8
 8008cc2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008cc6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008cca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008cd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008cd6:	e841 2300 	strex	r3, r2, [r1]
 8008cda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008cde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d1d9      	bne.n	8008c9a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d013      	beq.n	8008d16 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cf2:	4a13      	ldr	r2, [pc, #76]	@ (8008d40 <HAL_UART_IRQHandler+0x29c>)
 8008cf4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f7fc feb4 	bl	8005a68 <HAL_DMA_Abort_IT>
 8008d00:	4603      	mov	r3, r0
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d017      	beq.n	8008d36 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d0c:	687a      	ldr	r2, [r7, #4]
 8008d0e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008d10:	4610      	mov	r0, r2
 8008d12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d14:	e00f      	b.n	8008d36 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 f9d4 	bl	80090c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d1c:	e00b      	b.n	8008d36 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 f9d0 	bl	80090c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d24:	e007      	b.n	8008d36 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 f9cc 	bl	80090c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8008d34:	e1b1      	b.n	800909a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d36:	bf00      	nop
    return;
 8008d38:	e1af      	b.n	800909a <HAL_UART_IRQHandler+0x5f6>
 8008d3a:	bf00      	nop
 8008d3c:	04000120 	.word	0x04000120
 8008d40:	08009c25 	.word	0x08009c25

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	f040 816a 	bne.w	8009022 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d52:	f003 0310 	and.w	r3, r3, #16
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	f000 8163 	beq.w	8009022 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d60:	f003 0310 	and.w	r3, r3, #16
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	f000 815c 	beq.w	8009022 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	2210      	movs	r2, #16
 8008d70:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	689b      	ldr	r3, [r3, #8]
 8008d78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d7c:	2b40      	cmp	r3, #64	@ 0x40
 8008d7e:	f040 80d4 	bne.w	8008f2a <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008d8e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	f000 80ad 	beq.w	8008ef2 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008d9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008da2:	429a      	cmp	r2, r3
 8008da4:	f080 80a5 	bcs.w	8008ef2 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008dae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f003 0320 	and.w	r3, r3, #32
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	f040 8086 	bne.w	8008ed0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008dd0:	e853 3f00 	ldrex	r3, [r3]
 8008dd4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008dd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008ddc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008de0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	461a      	mov	r2, r3
 8008dea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008dee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008df2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008dfa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008dfe:	e841 2300 	strex	r3, r2, [r1]
 8008e02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008e06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d1da      	bne.n	8008dc4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	3308      	adds	r3, #8
 8008e14:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008e18:	e853 3f00 	ldrex	r3, [r3]
 8008e1c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008e1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008e20:	f023 0301 	bic.w	r3, r3, #1
 8008e24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	3308      	adds	r3, #8
 8008e2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008e32:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008e36:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e38:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008e3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008e3e:	e841 2300 	strex	r3, r2, [r1]
 8008e42:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008e44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d1e1      	bne.n	8008e0e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	3308      	adds	r3, #8
 8008e50:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008e54:	e853 3f00 	ldrex	r3, [r3]
 8008e58:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008e5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008e5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	3308      	adds	r3, #8
 8008e6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008e6e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008e70:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e72:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008e74:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008e76:	e841 2300 	strex	r3, r2, [r1]
 8008e7a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008e7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d1e3      	bne.n	8008e4a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2220      	movs	r2, #32
 8008e86:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e98:	e853 3f00 	ldrex	r3, [r3]
 8008e9c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008e9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ea0:	f023 0310 	bic.w	r3, r3, #16
 8008ea4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	461a      	mov	r2, r3
 8008eae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008eb2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008eb4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008eb8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008eba:	e841 2300 	strex	r3, r2, [r1]
 8008ebe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008ec0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d1e4      	bne.n	8008e90 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7fc fd8e 	bl	80059ec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2202      	movs	r2, #2
 8008ed4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	1ad3      	subs	r3, r2, r3
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	4619      	mov	r1, r3
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 f8f4 	bl	80090d8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008ef0:	e0d5      	b.n	800909e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008ef8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008efc:	429a      	cmp	r2, r3
 8008efe:	f040 80ce 	bne.w	800909e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f003 0320 	and.w	r3, r3, #32
 8008f0e:	2b20      	cmp	r3, #32
 8008f10:	f040 80c5 	bne.w	800909e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2202      	movs	r2, #2
 8008f18:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008f20:	4619      	mov	r1, r3
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 f8d8 	bl	80090d8 <HAL_UARTEx_RxEventCallback>
      return;
 8008f28:	e0b9      	b.n	800909e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	1ad3      	subs	r3, r2, r3
 8008f3a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	f000 80ab 	beq.w	80090a2 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8008f4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	f000 80a6 	beq.w	80090a2 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f5e:	e853 3f00 	ldrex	r3, [r3]
 8008f62:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008f64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f6a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	461a      	mov	r2, r3
 8008f74:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008f78:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f7a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008f7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f80:	e841 2300 	strex	r3, r2, [r1]
 8008f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008f86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d1e4      	bne.n	8008f56 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	3308      	adds	r3, #8
 8008f92:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f96:	e853 3f00 	ldrex	r3, [r3]
 8008f9a:	623b      	str	r3, [r7, #32]
   return(result);
 8008f9c:	6a3b      	ldr	r3, [r7, #32]
 8008f9e:	f023 0301 	bic.w	r3, r3, #1
 8008fa2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	3308      	adds	r3, #8
 8008fac:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008fb0:	633a      	str	r2, [r7, #48]	@ 0x30
 8008fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008fb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fb8:	e841 2300 	strex	r3, r2, [r1]
 8008fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d1e3      	bne.n	8008f8c <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2220      	movs	r2, #32
 8008fc8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	e853 3f00 	ldrex	r3, [r3]
 8008fe4:	60fb      	str	r3, [r7, #12]
   return(result);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	f023 0310 	bic.w	r3, r3, #16
 8008fec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008ffa:	61fb      	str	r3, [r7, #28]
 8008ffc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ffe:	69b9      	ldr	r1, [r7, #24]
 8009000:	69fa      	ldr	r2, [r7, #28]
 8009002:	e841 2300 	strex	r3, r2, [r1]
 8009006:	617b      	str	r3, [r7, #20]
   return(result);
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d1e4      	bne.n	8008fd8 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2202      	movs	r2, #2
 8009012:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009014:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009018:	4619      	mov	r1, r3
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f000 f85c 	bl	80090d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009020:	e03f      	b.n	80090a2 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009026:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800902a:	2b00      	cmp	r3, #0
 800902c:	d00e      	beq.n	800904c <HAL_UART_IRQHandler+0x5a8>
 800902e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009032:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009036:	2b00      	cmp	r3, #0
 8009038:	d008      	beq.n	800904c <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009042:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f000 ffe9 	bl	800a01c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800904a:	e02d      	b.n	80090a8 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800904c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009050:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009054:	2b00      	cmp	r3, #0
 8009056:	d00e      	beq.n	8009076 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800905c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009060:	2b00      	cmp	r3, #0
 8009062:	d008      	beq.n	8009076 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009068:	2b00      	cmp	r3, #0
 800906a:	d01c      	beq.n	80090a6 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	4798      	blx	r3
    }
    return;
 8009074:	e017      	b.n	80090a6 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800907a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800907e:	2b00      	cmp	r3, #0
 8009080:	d012      	beq.n	80090a8 <HAL_UART_IRQHandler+0x604>
 8009082:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009086:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800908a:	2b00      	cmp	r3, #0
 800908c:	d00c      	beq.n	80090a8 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 fdde 	bl	8009c50 <UART_EndTransmit_IT>
    return;
 8009094:	e008      	b.n	80090a8 <HAL_UART_IRQHandler+0x604>
      return;
 8009096:	bf00      	nop
 8009098:	e006      	b.n	80090a8 <HAL_UART_IRQHandler+0x604>
    return;
 800909a:	bf00      	nop
 800909c:	e004      	b.n	80090a8 <HAL_UART_IRQHandler+0x604>
      return;
 800909e:	bf00      	nop
 80090a0:	e002      	b.n	80090a8 <HAL_UART_IRQHandler+0x604>
      return;
 80090a2:	bf00      	nop
 80090a4:	e000      	b.n	80090a8 <HAL_UART_IRQHandler+0x604>
    return;
 80090a6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80090a8:	37e8      	adds	r7, #232	@ 0xe8
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop

080090b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b083      	sub	sp, #12
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80090b8:	bf00      	nop
 80090ba:	370c      	adds	r7, #12
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr

080090c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b083      	sub	sp, #12
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80090cc:	bf00      	nop
 80090ce:	370c      	adds	r7, #12
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr

080090d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80090d8:	b480      	push	{r7}
 80090da:	b083      	sub	sp, #12
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	460b      	mov	r3, r1
 80090e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80090e4:	bf00      	nop
 80090e6:	370c      	adds	r7, #12
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr

080090f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80090f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80090f4:	b08a      	sub	sp, #40	@ 0x28
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80090fa:	2300      	movs	r3, #0
 80090fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	689a      	ldr	r2, [r3, #8]
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	691b      	ldr	r3, [r3, #16]
 8009108:	431a      	orrs	r2, r3
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	695b      	ldr	r3, [r3, #20]
 800910e:	431a      	orrs	r2, r3
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	69db      	ldr	r3, [r3, #28]
 8009114:	4313      	orrs	r3, r2
 8009116:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	4ba4      	ldr	r3, [pc, #656]	@ (80093b0 <UART_SetConfig+0x2c0>)
 8009120:	4013      	ands	r3, r2
 8009122:	68fa      	ldr	r2, [r7, #12]
 8009124:	6812      	ldr	r2, [r2, #0]
 8009126:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009128:	430b      	orrs	r3, r1
 800912a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	68da      	ldr	r2, [r3, #12]
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	430a      	orrs	r2, r1
 8009140:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	699b      	ldr	r3, [r3, #24]
 8009146:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a99      	ldr	r2, [pc, #612]	@ (80093b4 <UART_SetConfig+0x2c4>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d004      	beq.n	800915c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	6a1b      	ldr	r3, [r3, #32]
 8009156:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009158:	4313      	orrs	r3, r2
 800915a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	689b      	ldr	r3, [r3, #8]
 8009162:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800916c:	430a      	orrs	r2, r1
 800916e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4a90      	ldr	r2, [pc, #576]	@ (80093b8 <UART_SetConfig+0x2c8>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d126      	bne.n	80091c8 <UART_SetConfig+0xd8>
 800917a:	4b90      	ldr	r3, [pc, #576]	@ (80093bc <UART_SetConfig+0x2cc>)
 800917c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009180:	f003 0303 	and.w	r3, r3, #3
 8009184:	2b03      	cmp	r3, #3
 8009186:	d81b      	bhi.n	80091c0 <UART_SetConfig+0xd0>
 8009188:	a201      	add	r2, pc, #4	@ (adr r2, 8009190 <UART_SetConfig+0xa0>)
 800918a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800918e:	bf00      	nop
 8009190:	080091a1 	.word	0x080091a1
 8009194:	080091b1 	.word	0x080091b1
 8009198:	080091a9 	.word	0x080091a9
 800919c:	080091b9 	.word	0x080091b9
 80091a0:	2301      	movs	r3, #1
 80091a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80091a6:	e116      	b.n	80093d6 <UART_SetConfig+0x2e6>
 80091a8:	2302      	movs	r3, #2
 80091aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80091ae:	e112      	b.n	80093d6 <UART_SetConfig+0x2e6>
 80091b0:	2304      	movs	r3, #4
 80091b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80091b6:	e10e      	b.n	80093d6 <UART_SetConfig+0x2e6>
 80091b8:	2308      	movs	r3, #8
 80091ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80091be:	e10a      	b.n	80093d6 <UART_SetConfig+0x2e6>
 80091c0:	2310      	movs	r3, #16
 80091c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80091c6:	e106      	b.n	80093d6 <UART_SetConfig+0x2e6>
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a7c      	ldr	r2, [pc, #496]	@ (80093c0 <UART_SetConfig+0x2d0>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d138      	bne.n	8009244 <UART_SetConfig+0x154>
 80091d2:	4b7a      	ldr	r3, [pc, #488]	@ (80093bc <UART_SetConfig+0x2cc>)
 80091d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091d8:	f003 030c 	and.w	r3, r3, #12
 80091dc:	2b0c      	cmp	r3, #12
 80091de:	d82d      	bhi.n	800923c <UART_SetConfig+0x14c>
 80091e0:	a201      	add	r2, pc, #4	@ (adr r2, 80091e8 <UART_SetConfig+0xf8>)
 80091e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091e6:	bf00      	nop
 80091e8:	0800921d 	.word	0x0800921d
 80091ec:	0800923d 	.word	0x0800923d
 80091f0:	0800923d 	.word	0x0800923d
 80091f4:	0800923d 	.word	0x0800923d
 80091f8:	0800922d 	.word	0x0800922d
 80091fc:	0800923d 	.word	0x0800923d
 8009200:	0800923d 	.word	0x0800923d
 8009204:	0800923d 	.word	0x0800923d
 8009208:	08009225 	.word	0x08009225
 800920c:	0800923d 	.word	0x0800923d
 8009210:	0800923d 	.word	0x0800923d
 8009214:	0800923d 	.word	0x0800923d
 8009218:	08009235 	.word	0x08009235
 800921c:	2300      	movs	r3, #0
 800921e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009222:	e0d8      	b.n	80093d6 <UART_SetConfig+0x2e6>
 8009224:	2302      	movs	r3, #2
 8009226:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800922a:	e0d4      	b.n	80093d6 <UART_SetConfig+0x2e6>
 800922c:	2304      	movs	r3, #4
 800922e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009232:	e0d0      	b.n	80093d6 <UART_SetConfig+0x2e6>
 8009234:	2308      	movs	r3, #8
 8009236:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800923a:	e0cc      	b.n	80093d6 <UART_SetConfig+0x2e6>
 800923c:	2310      	movs	r3, #16
 800923e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009242:	e0c8      	b.n	80093d6 <UART_SetConfig+0x2e6>
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a5e      	ldr	r2, [pc, #376]	@ (80093c4 <UART_SetConfig+0x2d4>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d125      	bne.n	800929a <UART_SetConfig+0x1aa>
 800924e:	4b5b      	ldr	r3, [pc, #364]	@ (80093bc <UART_SetConfig+0x2cc>)
 8009250:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009254:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009258:	2b30      	cmp	r3, #48	@ 0x30
 800925a:	d016      	beq.n	800928a <UART_SetConfig+0x19a>
 800925c:	2b30      	cmp	r3, #48	@ 0x30
 800925e:	d818      	bhi.n	8009292 <UART_SetConfig+0x1a2>
 8009260:	2b20      	cmp	r3, #32
 8009262:	d00a      	beq.n	800927a <UART_SetConfig+0x18a>
 8009264:	2b20      	cmp	r3, #32
 8009266:	d814      	bhi.n	8009292 <UART_SetConfig+0x1a2>
 8009268:	2b00      	cmp	r3, #0
 800926a:	d002      	beq.n	8009272 <UART_SetConfig+0x182>
 800926c:	2b10      	cmp	r3, #16
 800926e:	d008      	beq.n	8009282 <UART_SetConfig+0x192>
 8009270:	e00f      	b.n	8009292 <UART_SetConfig+0x1a2>
 8009272:	2300      	movs	r3, #0
 8009274:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009278:	e0ad      	b.n	80093d6 <UART_SetConfig+0x2e6>
 800927a:	2302      	movs	r3, #2
 800927c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009280:	e0a9      	b.n	80093d6 <UART_SetConfig+0x2e6>
 8009282:	2304      	movs	r3, #4
 8009284:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009288:	e0a5      	b.n	80093d6 <UART_SetConfig+0x2e6>
 800928a:	2308      	movs	r3, #8
 800928c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009290:	e0a1      	b.n	80093d6 <UART_SetConfig+0x2e6>
 8009292:	2310      	movs	r3, #16
 8009294:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009298:	e09d      	b.n	80093d6 <UART_SetConfig+0x2e6>
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4a4a      	ldr	r2, [pc, #296]	@ (80093c8 <UART_SetConfig+0x2d8>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d125      	bne.n	80092f0 <UART_SetConfig+0x200>
 80092a4:	4b45      	ldr	r3, [pc, #276]	@ (80093bc <UART_SetConfig+0x2cc>)
 80092a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092aa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80092ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80092b0:	d016      	beq.n	80092e0 <UART_SetConfig+0x1f0>
 80092b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80092b4:	d818      	bhi.n	80092e8 <UART_SetConfig+0x1f8>
 80092b6:	2b80      	cmp	r3, #128	@ 0x80
 80092b8:	d00a      	beq.n	80092d0 <UART_SetConfig+0x1e0>
 80092ba:	2b80      	cmp	r3, #128	@ 0x80
 80092bc:	d814      	bhi.n	80092e8 <UART_SetConfig+0x1f8>
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d002      	beq.n	80092c8 <UART_SetConfig+0x1d8>
 80092c2:	2b40      	cmp	r3, #64	@ 0x40
 80092c4:	d008      	beq.n	80092d8 <UART_SetConfig+0x1e8>
 80092c6:	e00f      	b.n	80092e8 <UART_SetConfig+0x1f8>
 80092c8:	2300      	movs	r3, #0
 80092ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80092ce:	e082      	b.n	80093d6 <UART_SetConfig+0x2e6>
 80092d0:	2302      	movs	r3, #2
 80092d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80092d6:	e07e      	b.n	80093d6 <UART_SetConfig+0x2e6>
 80092d8:	2304      	movs	r3, #4
 80092da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80092de:	e07a      	b.n	80093d6 <UART_SetConfig+0x2e6>
 80092e0:	2308      	movs	r3, #8
 80092e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80092e6:	e076      	b.n	80093d6 <UART_SetConfig+0x2e6>
 80092e8:	2310      	movs	r3, #16
 80092ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80092ee:	e072      	b.n	80093d6 <UART_SetConfig+0x2e6>
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	4a35      	ldr	r2, [pc, #212]	@ (80093cc <UART_SetConfig+0x2dc>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d12a      	bne.n	8009350 <UART_SetConfig+0x260>
 80092fa:	4b30      	ldr	r3, [pc, #192]	@ (80093bc <UART_SetConfig+0x2cc>)
 80092fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009300:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009304:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009308:	d01a      	beq.n	8009340 <UART_SetConfig+0x250>
 800930a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800930e:	d81b      	bhi.n	8009348 <UART_SetConfig+0x258>
 8009310:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009314:	d00c      	beq.n	8009330 <UART_SetConfig+0x240>
 8009316:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800931a:	d815      	bhi.n	8009348 <UART_SetConfig+0x258>
 800931c:	2b00      	cmp	r3, #0
 800931e:	d003      	beq.n	8009328 <UART_SetConfig+0x238>
 8009320:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009324:	d008      	beq.n	8009338 <UART_SetConfig+0x248>
 8009326:	e00f      	b.n	8009348 <UART_SetConfig+0x258>
 8009328:	2300      	movs	r3, #0
 800932a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800932e:	e052      	b.n	80093d6 <UART_SetConfig+0x2e6>
 8009330:	2302      	movs	r3, #2
 8009332:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009336:	e04e      	b.n	80093d6 <UART_SetConfig+0x2e6>
 8009338:	2304      	movs	r3, #4
 800933a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800933e:	e04a      	b.n	80093d6 <UART_SetConfig+0x2e6>
 8009340:	2308      	movs	r3, #8
 8009342:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009346:	e046      	b.n	80093d6 <UART_SetConfig+0x2e6>
 8009348:	2310      	movs	r3, #16
 800934a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800934e:	e042      	b.n	80093d6 <UART_SetConfig+0x2e6>
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a17      	ldr	r2, [pc, #92]	@ (80093b4 <UART_SetConfig+0x2c4>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d13a      	bne.n	80093d0 <UART_SetConfig+0x2e0>
 800935a:	4b18      	ldr	r3, [pc, #96]	@ (80093bc <UART_SetConfig+0x2cc>)
 800935c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009360:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009364:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009368:	d01a      	beq.n	80093a0 <UART_SetConfig+0x2b0>
 800936a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800936e:	d81b      	bhi.n	80093a8 <UART_SetConfig+0x2b8>
 8009370:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009374:	d00c      	beq.n	8009390 <UART_SetConfig+0x2a0>
 8009376:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800937a:	d815      	bhi.n	80093a8 <UART_SetConfig+0x2b8>
 800937c:	2b00      	cmp	r3, #0
 800937e:	d003      	beq.n	8009388 <UART_SetConfig+0x298>
 8009380:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009384:	d008      	beq.n	8009398 <UART_SetConfig+0x2a8>
 8009386:	e00f      	b.n	80093a8 <UART_SetConfig+0x2b8>
 8009388:	2300      	movs	r3, #0
 800938a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800938e:	e022      	b.n	80093d6 <UART_SetConfig+0x2e6>
 8009390:	2302      	movs	r3, #2
 8009392:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009396:	e01e      	b.n	80093d6 <UART_SetConfig+0x2e6>
 8009398:	2304      	movs	r3, #4
 800939a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800939e:	e01a      	b.n	80093d6 <UART_SetConfig+0x2e6>
 80093a0:	2308      	movs	r3, #8
 80093a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80093a6:	e016      	b.n	80093d6 <UART_SetConfig+0x2e6>
 80093a8:	2310      	movs	r3, #16
 80093aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80093ae:	e012      	b.n	80093d6 <UART_SetConfig+0x2e6>
 80093b0:	efff69f3 	.word	0xefff69f3
 80093b4:	40008000 	.word	0x40008000
 80093b8:	40013800 	.word	0x40013800
 80093bc:	40021000 	.word	0x40021000
 80093c0:	40004400 	.word	0x40004400
 80093c4:	40004800 	.word	0x40004800
 80093c8:	40004c00 	.word	0x40004c00
 80093cc:	40005000 	.word	0x40005000
 80093d0:	2310      	movs	r3, #16
 80093d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4a9f      	ldr	r2, [pc, #636]	@ (8009658 <UART_SetConfig+0x568>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d17a      	bne.n	80094d6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80093e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80093e4:	2b08      	cmp	r3, #8
 80093e6:	d824      	bhi.n	8009432 <UART_SetConfig+0x342>
 80093e8:	a201      	add	r2, pc, #4	@ (adr r2, 80093f0 <UART_SetConfig+0x300>)
 80093ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ee:	bf00      	nop
 80093f0:	08009415 	.word	0x08009415
 80093f4:	08009433 	.word	0x08009433
 80093f8:	0800941d 	.word	0x0800941d
 80093fc:	08009433 	.word	0x08009433
 8009400:	08009423 	.word	0x08009423
 8009404:	08009433 	.word	0x08009433
 8009408:	08009433 	.word	0x08009433
 800940c:	08009433 	.word	0x08009433
 8009410:	0800942b 	.word	0x0800942b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009414:	f7fe fa5e 	bl	80078d4 <HAL_RCC_GetPCLK1Freq>
 8009418:	61f8      	str	r0, [r7, #28]
        break;
 800941a:	e010      	b.n	800943e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800941c:	4b8f      	ldr	r3, [pc, #572]	@ (800965c <UART_SetConfig+0x56c>)
 800941e:	61fb      	str	r3, [r7, #28]
        break;
 8009420:	e00d      	b.n	800943e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009422:	f7fe f9bf 	bl	80077a4 <HAL_RCC_GetSysClockFreq>
 8009426:	61f8      	str	r0, [r7, #28]
        break;
 8009428:	e009      	b.n	800943e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800942a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800942e:	61fb      	str	r3, [r7, #28]
        break;
 8009430:	e005      	b.n	800943e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8009432:	2300      	movs	r3, #0
 8009434:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009436:	2301      	movs	r3, #1
 8009438:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800943c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800943e:	69fb      	ldr	r3, [r7, #28]
 8009440:	2b00      	cmp	r3, #0
 8009442:	f000 80fb 	beq.w	800963c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	685a      	ldr	r2, [r3, #4]
 800944a:	4613      	mov	r3, r2
 800944c:	005b      	lsls	r3, r3, #1
 800944e:	4413      	add	r3, r2
 8009450:	69fa      	ldr	r2, [r7, #28]
 8009452:	429a      	cmp	r2, r3
 8009454:	d305      	bcc.n	8009462 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800945c:	69fa      	ldr	r2, [r7, #28]
 800945e:	429a      	cmp	r2, r3
 8009460:	d903      	bls.n	800946a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8009462:	2301      	movs	r3, #1
 8009464:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009468:	e0e8      	b.n	800963c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800946a:	69fb      	ldr	r3, [r7, #28]
 800946c:	2200      	movs	r2, #0
 800946e:	461c      	mov	r4, r3
 8009470:	4615      	mov	r5, r2
 8009472:	f04f 0200 	mov.w	r2, #0
 8009476:	f04f 0300 	mov.w	r3, #0
 800947a:	022b      	lsls	r3, r5, #8
 800947c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009480:	0222      	lsls	r2, r4, #8
 8009482:	68f9      	ldr	r1, [r7, #12]
 8009484:	6849      	ldr	r1, [r1, #4]
 8009486:	0849      	lsrs	r1, r1, #1
 8009488:	2000      	movs	r0, #0
 800948a:	4688      	mov	r8, r1
 800948c:	4681      	mov	r9, r0
 800948e:	eb12 0a08 	adds.w	sl, r2, r8
 8009492:	eb43 0b09 	adc.w	fp, r3, r9
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	2200      	movs	r2, #0
 800949c:	603b      	str	r3, [r7, #0]
 800949e:	607a      	str	r2, [r7, #4]
 80094a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094a4:	4650      	mov	r0, sl
 80094a6:	4659      	mov	r1, fp
 80094a8:	f7f7 f8ae 	bl	8000608 <__aeabi_uldivmod>
 80094ac:	4602      	mov	r2, r0
 80094ae:	460b      	mov	r3, r1
 80094b0:	4613      	mov	r3, r2
 80094b2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80094b4:	69bb      	ldr	r3, [r7, #24]
 80094b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80094ba:	d308      	bcc.n	80094ce <UART_SetConfig+0x3de>
 80094bc:	69bb      	ldr	r3, [r7, #24]
 80094be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80094c2:	d204      	bcs.n	80094ce <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	69ba      	ldr	r2, [r7, #24]
 80094ca:	60da      	str	r2, [r3, #12]
 80094cc:	e0b6      	b.n	800963c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80094ce:	2301      	movs	r3, #1
 80094d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80094d4:	e0b2      	b.n	800963c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	69db      	ldr	r3, [r3, #28]
 80094da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80094de:	d15e      	bne.n	800959e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80094e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80094e4:	2b08      	cmp	r3, #8
 80094e6:	d828      	bhi.n	800953a <UART_SetConfig+0x44a>
 80094e8:	a201      	add	r2, pc, #4	@ (adr r2, 80094f0 <UART_SetConfig+0x400>)
 80094ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ee:	bf00      	nop
 80094f0:	08009515 	.word	0x08009515
 80094f4:	0800951d 	.word	0x0800951d
 80094f8:	08009525 	.word	0x08009525
 80094fc:	0800953b 	.word	0x0800953b
 8009500:	0800952b 	.word	0x0800952b
 8009504:	0800953b 	.word	0x0800953b
 8009508:	0800953b 	.word	0x0800953b
 800950c:	0800953b 	.word	0x0800953b
 8009510:	08009533 	.word	0x08009533
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009514:	f7fe f9de 	bl	80078d4 <HAL_RCC_GetPCLK1Freq>
 8009518:	61f8      	str	r0, [r7, #28]
        break;
 800951a:	e014      	b.n	8009546 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800951c:	f7fe f9f0 	bl	8007900 <HAL_RCC_GetPCLK2Freq>
 8009520:	61f8      	str	r0, [r7, #28]
        break;
 8009522:	e010      	b.n	8009546 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009524:	4b4d      	ldr	r3, [pc, #308]	@ (800965c <UART_SetConfig+0x56c>)
 8009526:	61fb      	str	r3, [r7, #28]
        break;
 8009528:	e00d      	b.n	8009546 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800952a:	f7fe f93b 	bl	80077a4 <HAL_RCC_GetSysClockFreq>
 800952e:	61f8      	str	r0, [r7, #28]
        break;
 8009530:	e009      	b.n	8009546 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009532:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009536:	61fb      	str	r3, [r7, #28]
        break;
 8009538:	e005      	b.n	8009546 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800953a:	2300      	movs	r3, #0
 800953c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800953e:	2301      	movs	r3, #1
 8009540:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009544:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009546:	69fb      	ldr	r3, [r7, #28]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d077      	beq.n	800963c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800954c:	69fb      	ldr	r3, [r7, #28]
 800954e:	005a      	lsls	r2, r3, #1
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	085b      	lsrs	r3, r3, #1
 8009556:	441a      	add	r2, r3
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009560:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009562:	69bb      	ldr	r3, [r7, #24]
 8009564:	2b0f      	cmp	r3, #15
 8009566:	d916      	bls.n	8009596 <UART_SetConfig+0x4a6>
 8009568:	69bb      	ldr	r3, [r7, #24]
 800956a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800956e:	d212      	bcs.n	8009596 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009570:	69bb      	ldr	r3, [r7, #24]
 8009572:	b29b      	uxth	r3, r3
 8009574:	f023 030f 	bic.w	r3, r3, #15
 8009578:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800957a:	69bb      	ldr	r3, [r7, #24]
 800957c:	085b      	lsrs	r3, r3, #1
 800957e:	b29b      	uxth	r3, r3
 8009580:	f003 0307 	and.w	r3, r3, #7
 8009584:	b29a      	uxth	r2, r3
 8009586:	8afb      	ldrh	r3, [r7, #22]
 8009588:	4313      	orrs	r3, r2
 800958a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	8afa      	ldrh	r2, [r7, #22]
 8009592:	60da      	str	r2, [r3, #12]
 8009594:	e052      	b.n	800963c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009596:	2301      	movs	r3, #1
 8009598:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800959c:	e04e      	b.n	800963c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800959e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80095a2:	2b08      	cmp	r3, #8
 80095a4:	d827      	bhi.n	80095f6 <UART_SetConfig+0x506>
 80095a6:	a201      	add	r2, pc, #4	@ (adr r2, 80095ac <UART_SetConfig+0x4bc>)
 80095a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ac:	080095d1 	.word	0x080095d1
 80095b0:	080095d9 	.word	0x080095d9
 80095b4:	080095e1 	.word	0x080095e1
 80095b8:	080095f7 	.word	0x080095f7
 80095bc:	080095e7 	.word	0x080095e7
 80095c0:	080095f7 	.word	0x080095f7
 80095c4:	080095f7 	.word	0x080095f7
 80095c8:	080095f7 	.word	0x080095f7
 80095cc:	080095ef 	.word	0x080095ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80095d0:	f7fe f980 	bl	80078d4 <HAL_RCC_GetPCLK1Freq>
 80095d4:	61f8      	str	r0, [r7, #28]
        break;
 80095d6:	e014      	b.n	8009602 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80095d8:	f7fe f992 	bl	8007900 <HAL_RCC_GetPCLK2Freq>
 80095dc:	61f8      	str	r0, [r7, #28]
        break;
 80095de:	e010      	b.n	8009602 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80095e0:	4b1e      	ldr	r3, [pc, #120]	@ (800965c <UART_SetConfig+0x56c>)
 80095e2:	61fb      	str	r3, [r7, #28]
        break;
 80095e4:	e00d      	b.n	8009602 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80095e6:	f7fe f8dd 	bl	80077a4 <HAL_RCC_GetSysClockFreq>
 80095ea:	61f8      	str	r0, [r7, #28]
        break;
 80095ec:	e009      	b.n	8009602 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80095ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80095f2:	61fb      	str	r3, [r7, #28]
        break;
 80095f4:	e005      	b.n	8009602 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80095f6:	2300      	movs	r3, #0
 80095f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80095fa:	2301      	movs	r3, #1
 80095fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009600:	bf00      	nop
    }

    if (pclk != 0U)
 8009602:	69fb      	ldr	r3, [r7, #28]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d019      	beq.n	800963c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	085a      	lsrs	r2, r3, #1
 800960e:	69fb      	ldr	r3, [r7, #28]
 8009610:	441a      	add	r2, r3
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	fbb2 f3f3 	udiv	r3, r2, r3
 800961a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800961c:	69bb      	ldr	r3, [r7, #24]
 800961e:	2b0f      	cmp	r3, #15
 8009620:	d909      	bls.n	8009636 <UART_SetConfig+0x546>
 8009622:	69bb      	ldr	r3, [r7, #24]
 8009624:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009628:	d205      	bcs.n	8009636 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800962a:	69bb      	ldr	r3, [r7, #24]
 800962c:	b29a      	uxth	r2, r3
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	60da      	str	r2, [r3, #12]
 8009634:	e002      	b.n	800963c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009636:	2301      	movs	r3, #1
 8009638:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2200      	movs	r2, #0
 8009640:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	2200      	movs	r2, #0
 8009646:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009648:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800964c:	4618      	mov	r0, r3
 800964e:	3728      	adds	r7, #40	@ 0x28
 8009650:	46bd      	mov	sp, r7
 8009652:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009656:	bf00      	nop
 8009658:	40008000 	.word	0x40008000
 800965c:	00f42400 	.word	0x00f42400

08009660 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800966c:	f003 0308 	and.w	r3, r3, #8
 8009670:	2b00      	cmp	r3, #0
 8009672:	d00a      	beq.n	800968a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	430a      	orrs	r2, r1
 8009688:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800968e:	f003 0301 	and.w	r3, r3, #1
 8009692:	2b00      	cmp	r3, #0
 8009694:	d00a      	beq.n	80096ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	430a      	orrs	r2, r1
 80096aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096b0:	f003 0302 	and.w	r3, r3, #2
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d00a      	beq.n	80096ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	430a      	orrs	r2, r1
 80096cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096d2:	f003 0304 	and.w	r3, r3, #4
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d00a      	beq.n	80096f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	685b      	ldr	r3, [r3, #4]
 80096e0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	430a      	orrs	r2, r1
 80096ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096f4:	f003 0310 	and.w	r3, r3, #16
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d00a      	beq.n	8009712 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	689b      	ldr	r3, [r3, #8]
 8009702:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	430a      	orrs	r2, r1
 8009710:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009716:	f003 0320 	and.w	r3, r3, #32
 800971a:	2b00      	cmp	r3, #0
 800971c:	d00a      	beq.n	8009734 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	689b      	ldr	r3, [r3, #8]
 8009724:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	430a      	orrs	r2, r1
 8009732:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800973c:	2b00      	cmp	r3, #0
 800973e:	d01a      	beq.n	8009776 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	430a      	orrs	r2, r1
 8009754:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800975a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800975e:	d10a      	bne.n	8009776 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	430a      	orrs	r2, r1
 8009774:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800977a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800977e:	2b00      	cmp	r3, #0
 8009780:	d00a      	beq.n	8009798 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	430a      	orrs	r2, r1
 8009796:	605a      	str	r2, [r3, #4]
  }
}
 8009798:	bf00      	nop
 800979a:	370c      	adds	r7, #12
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b098      	sub	sp, #96	@ 0x60
 80097a8:	af02      	add	r7, sp, #8
 80097aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2200      	movs	r2, #0
 80097b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80097b4:	f7f9 ffd0 	bl	8003758 <HAL_GetTick>
 80097b8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f003 0308 	and.w	r3, r3, #8
 80097c4:	2b08      	cmp	r3, #8
 80097c6:	d12e      	bne.n	8009826 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80097cc:	9300      	str	r3, [sp, #0]
 80097ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80097d0:	2200      	movs	r2, #0
 80097d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 f88c 	bl	80098f4 <UART_WaitOnFlagUntilTimeout>
 80097dc:	4603      	mov	r3, r0
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d021      	beq.n	8009826 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ea:	e853 3f00 	ldrex	r3, [r3]
 80097ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80097f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80097f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	461a      	mov	r2, r3
 80097fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009800:	647b      	str	r3, [r7, #68]	@ 0x44
 8009802:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009804:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009806:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009808:	e841 2300 	strex	r3, r2, [r1]
 800980c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800980e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009810:	2b00      	cmp	r3, #0
 8009812:	d1e6      	bne.n	80097e2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2220      	movs	r2, #32
 8009818:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2200      	movs	r2, #0
 800981e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009822:	2303      	movs	r3, #3
 8009824:	e062      	b.n	80098ec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f003 0304 	and.w	r3, r3, #4
 8009830:	2b04      	cmp	r3, #4
 8009832:	d149      	bne.n	80098c8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009834:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009838:	9300      	str	r3, [sp, #0]
 800983a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800983c:	2200      	movs	r2, #0
 800983e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 f856 	bl	80098f4 <UART_WaitOnFlagUntilTimeout>
 8009848:	4603      	mov	r3, r0
 800984a:	2b00      	cmp	r3, #0
 800984c:	d03c      	beq.n	80098c8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009856:	e853 3f00 	ldrex	r3, [r3]
 800985a:	623b      	str	r3, [r7, #32]
   return(result);
 800985c:	6a3b      	ldr	r3, [r7, #32]
 800985e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009862:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	461a      	mov	r2, r3
 800986a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800986c:	633b      	str	r3, [r7, #48]	@ 0x30
 800986e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009870:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009872:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009874:	e841 2300 	strex	r3, r2, [r1]
 8009878:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800987a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800987c:	2b00      	cmp	r3, #0
 800987e:	d1e6      	bne.n	800984e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	3308      	adds	r3, #8
 8009886:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	e853 3f00 	ldrex	r3, [r3]
 800988e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	f023 0301 	bic.w	r3, r3, #1
 8009896:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	3308      	adds	r3, #8
 800989e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80098a0:	61fa      	str	r2, [r7, #28]
 80098a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a4:	69b9      	ldr	r1, [r7, #24]
 80098a6:	69fa      	ldr	r2, [r7, #28]
 80098a8:	e841 2300 	strex	r3, r2, [r1]
 80098ac:	617b      	str	r3, [r7, #20]
   return(result);
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d1e5      	bne.n	8009880 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2220      	movs	r2, #32
 80098b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2200      	movs	r2, #0
 80098c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80098c4:	2303      	movs	r3, #3
 80098c6:	e011      	b.n	80098ec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2220      	movs	r2, #32
 80098cc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2220      	movs	r2, #32
 80098d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2200      	movs	r2, #0
 80098da:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2200      	movs	r2, #0
 80098e0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2200      	movs	r2, #0
 80098e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80098ea:	2300      	movs	r3, #0
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3758      	adds	r7, #88	@ 0x58
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}

080098f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	60f8      	str	r0, [r7, #12]
 80098fc:	60b9      	str	r1, [r7, #8]
 80098fe:	603b      	str	r3, [r7, #0]
 8009900:	4613      	mov	r3, r2
 8009902:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009904:	e04f      	b.n	80099a6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009906:	69bb      	ldr	r3, [r7, #24]
 8009908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800990c:	d04b      	beq.n	80099a6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800990e:	f7f9 ff23 	bl	8003758 <HAL_GetTick>
 8009912:	4602      	mov	r2, r0
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	1ad3      	subs	r3, r2, r3
 8009918:	69ba      	ldr	r2, [r7, #24]
 800991a:	429a      	cmp	r2, r3
 800991c:	d302      	bcc.n	8009924 <UART_WaitOnFlagUntilTimeout+0x30>
 800991e:	69bb      	ldr	r3, [r7, #24]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d101      	bne.n	8009928 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009924:	2303      	movs	r3, #3
 8009926:	e04e      	b.n	80099c6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f003 0304 	and.w	r3, r3, #4
 8009932:	2b00      	cmp	r3, #0
 8009934:	d037      	beq.n	80099a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	2b80      	cmp	r3, #128	@ 0x80
 800993a:	d034      	beq.n	80099a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	2b40      	cmp	r3, #64	@ 0x40
 8009940:	d031      	beq.n	80099a6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	69db      	ldr	r3, [r3, #28]
 8009948:	f003 0308 	and.w	r3, r3, #8
 800994c:	2b08      	cmp	r3, #8
 800994e:	d110      	bne.n	8009972 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	2208      	movs	r2, #8
 8009956:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009958:	68f8      	ldr	r0, [r7, #12]
 800995a:	f000 f8ff 	bl	8009b5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2208      	movs	r2, #8
 8009962:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	2200      	movs	r2, #0
 800996a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800996e:	2301      	movs	r3, #1
 8009970:	e029      	b.n	80099c6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	69db      	ldr	r3, [r3, #28]
 8009978:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800997c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009980:	d111      	bne.n	80099a6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800998a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800998c:	68f8      	ldr	r0, [r7, #12]
 800998e:	f000 f8e5 	bl	8009b5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	2220      	movs	r2, #32
 8009996:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	2200      	movs	r2, #0
 800999e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80099a2:	2303      	movs	r3, #3
 80099a4:	e00f      	b.n	80099c6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	69da      	ldr	r2, [r3, #28]
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	4013      	ands	r3, r2
 80099b0:	68ba      	ldr	r2, [r7, #8]
 80099b2:	429a      	cmp	r2, r3
 80099b4:	bf0c      	ite	eq
 80099b6:	2301      	moveq	r3, #1
 80099b8:	2300      	movne	r3, #0
 80099ba:	b2db      	uxtb	r3, r3
 80099bc:	461a      	mov	r2, r3
 80099be:	79fb      	ldrb	r3, [r7, #7]
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d0a0      	beq.n	8009906 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80099c4:	2300      	movs	r3, #0
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3710      	adds	r7, #16
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
	...

080099d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b097      	sub	sp, #92	@ 0x5c
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	60f8      	str	r0, [r7, #12]
 80099d8:	60b9      	str	r1, [r7, #8]
 80099da:	4613      	mov	r3, r2
 80099dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	68ba      	ldr	r2, [r7, #8]
 80099e2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	88fa      	ldrh	r2, [r7, #6]
 80099e8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	88fa      	ldrh	r2, [r7, #6]
 80099f0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2200      	movs	r2, #0
 80099f8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	689b      	ldr	r3, [r3, #8]
 80099fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a02:	d10e      	bne.n	8009a22 <UART_Start_Receive_IT+0x52>
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	691b      	ldr	r3, [r3, #16]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d105      	bne.n	8009a18 <UART_Start_Receive_IT+0x48>
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009a12:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009a16:	e02d      	b.n	8009a74 <UART_Start_Receive_IT+0xa4>
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	22ff      	movs	r2, #255	@ 0xff
 8009a1c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009a20:	e028      	b.n	8009a74 <UART_Start_Receive_IT+0xa4>
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	689b      	ldr	r3, [r3, #8]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d10d      	bne.n	8009a46 <UART_Start_Receive_IT+0x76>
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	691b      	ldr	r3, [r3, #16]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d104      	bne.n	8009a3c <UART_Start_Receive_IT+0x6c>
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	22ff      	movs	r2, #255	@ 0xff
 8009a36:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009a3a:	e01b      	b.n	8009a74 <UART_Start_Receive_IT+0xa4>
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	227f      	movs	r2, #127	@ 0x7f
 8009a40:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009a44:	e016      	b.n	8009a74 <UART_Start_Receive_IT+0xa4>
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	689b      	ldr	r3, [r3, #8]
 8009a4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a4e:	d10d      	bne.n	8009a6c <UART_Start_Receive_IT+0x9c>
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	691b      	ldr	r3, [r3, #16]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d104      	bne.n	8009a62 <UART_Start_Receive_IT+0x92>
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	227f      	movs	r2, #127	@ 0x7f
 8009a5c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009a60:	e008      	b.n	8009a74 <UART_Start_Receive_IT+0xa4>
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	223f      	movs	r2, #63	@ 0x3f
 8009a66:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009a6a:	e003      	b.n	8009a74 <UART_Start_Receive_IT+0xa4>
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	2200      	movs	r2, #0
 8009a78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2222      	movs	r2, #34	@ 0x22
 8009a80:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	3308      	adds	r3, #8
 8009a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a8e:	e853 3f00 	ldrex	r3, [r3]
 8009a92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a96:	f043 0301 	orr.w	r3, r3, #1
 8009a9a:	657b      	str	r3, [r7, #84]	@ 0x54
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	3308      	adds	r3, #8
 8009aa2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009aa4:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009aa6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009aaa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009aac:	e841 2300 	strex	r3, r2, [r1]
 8009ab0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009ab2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d1e5      	bne.n	8009a84 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	689b      	ldr	r3, [r3, #8]
 8009abc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ac0:	d107      	bne.n	8009ad2 <UART_Start_Receive_IT+0x102>
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	691b      	ldr	r3, [r3, #16]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d103      	bne.n	8009ad2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	4a21      	ldr	r2, [pc, #132]	@ (8009b54 <UART_Start_Receive_IT+0x184>)
 8009ace:	669a      	str	r2, [r3, #104]	@ 0x68
 8009ad0:	e002      	b.n	8009ad8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	4a20      	ldr	r2, [pc, #128]	@ (8009b58 <UART_Start_Receive_IT+0x188>)
 8009ad6:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	691b      	ldr	r3, [r3, #16]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d019      	beq.n	8009b14 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ae8:	e853 3f00 	ldrex	r3, [r3]
 8009aec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009af0:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8009af4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	461a      	mov	r2, r3
 8009afc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009afe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b00:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b02:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009b04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009b06:	e841 2300 	strex	r3, r2, [r1]
 8009b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d1e6      	bne.n	8009ae0 <UART_Start_Receive_IT+0x110>
 8009b12:	e018      	b.n	8009b46 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	e853 3f00 	ldrex	r3, [r3]
 8009b20:	613b      	str	r3, [r7, #16]
   return(result);
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	f043 0320 	orr.w	r3, r3, #32
 8009b28:	653b      	str	r3, [r7, #80]	@ 0x50
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	461a      	mov	r2, r3
 8009b30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b32:	623b      	str	r3, [r7, #32]
 8009b34:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b36:	69f9      	ldr	r1, [r7, #28]
 8009b38:	6a3a      	ldr	r2, [r7, #32]
 8009b3a:	e841 2300 	strex	r3, r2, [r1]
 8009b3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009b40:	69bb      	ldr	r3, [r7, #24]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d1e6      	bne.n	8009b14 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8009b46:	2300      	movs	r3, #0
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	375c      	adds	r7, #92	@ 0x5c
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b52:	4770      	bx	lr
 8009b54:	08009e61 	.word	0x08009e61
 8009b58:	08009ca5 	.word	0x08009ca5

08009b5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b095      	sub	sp, #84	@ 0x54
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b6c:	e853 3f00 	ldrex	r3, [r3]
 8009b70:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009b78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	461a      	mov	r2, r3
 8009b80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b82:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b84:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b86:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009b88:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009b8a:	e841 2300 	strex	r3, r2, [r1]
 8009b8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d1e6      	bne.n	8009b64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	3308      	adds	r3, #8
 8009b9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b9e:	6a3b      	ldr	r3, [r7, #32]
 8009ba0:	e853 3f00 	ldrex	r3, [r3]
 8009ba4:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ba6:	69fb      	ldr	r3, [r7, #28]
 8009ba8:	f023 0301 	bic.w	r3, r3, #1
 8009bac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	3308      	adds	r3, #8
 8009bb4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009bb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009bbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009bbe:	e841 2300 	strex	r3, r2, [r1]
 8009bc2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d1e5      	bne.n	8009b96 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d118      	bne.n	8009c04 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	e853 3f00 	ldrex	r3, [r3]
 8009bde:	60bb      	str	r3, [r7, #8]
   return(result);
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	f023 0310 	bic.w	r3, r3, #16
 8009be6:	647b      	str	r3, [r7, #68]	@ 0x44
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	461a      	mov	r2, r3
 8009bee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009bf0:	61bb      	str	r3, [r7, #24]
 8009bf2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf4:	6979      	ldr	r1, [r7, #20]
 8009bf6:	69ba      	ldr	r2, [r7, #24]
 8009bf8:	e841 2300 	strex	r3, r2, [r1]
 8009bfc:	613b      	str	r3, [r7, #16]
   return(result);
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d1e6      	bne.n	8009bd2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2220      	movs	r2, #32
 8009c08:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2200      	movs	r2, #0
 8009c16:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009c18:	bf00      	nop
 8009c1a:	3754      	adds	r7, #84	@ 0x54
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr

08009c24 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c30:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	2200      	movs	r2, #0
 8009c36:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009c42:	68f8      	ldr	r0, [r7, #12]
 8009c44:	f7ff fa3e 	bl	80090c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c48:	bf00      	nop
 8009c4a:	3710      	adds	r7, #16
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}

08009c50 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b088      	sub	sp, #32
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	e853 3f00 	ldrex	r3, [r3]
 8009c64:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c6c:	61fb      	str	r3, [r7, #28]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	461a      	mov	r2, r3
 8009c74:	69fb      	ldr	r3, [r7, #28]
 8009c76:	61bb      	str	r3, [r7, #24]
 8009c78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c7a:	6979      	ldr	r1, [r7, #20]
 8009c7c:	69ba      	ldr	r2, [r7, #24]
 8009c7e:	e841 2300 	strex	r3, r2, [r1]
 8009c82:	613b      	str	r3, [r7, #16]
   return(result);
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d1e6      	bne.n	8009c58 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2220      	movs	r2, #32
 8009c8e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2200      	movs	r2, #0
 8009c94:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f7ff fa0a 	bl	80090b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c9c:	bf00      	nop
 8009c9e:	3720      	adds	r7, #32
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b09c      	sub	sp, #112	@ 0x70
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009cb2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cbc:	2b22      	cmp	r3, #34	@ 0x22
 8009cbe:	f040 80be 	bne.w	8009e3e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009cc8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009ccc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009cd0:	b2d9      	uxtb	r1, r3
 8009cd2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009cd6:	b2da      	uxtb	r2, r3
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cdc:	400a      	ands	r2, r1
 8009cde:	b2d2      	uxtb	r2, r2
 8009ce0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ce6:	1c5a      	adds	r2, r3, #1
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009cf2:	b29b      	uxth	r3, r3
 8009cf4:	3b01      	subs	r3, #1
 8009cf6:	b29a      	uxth	r2, r3
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009d04:	b29b      	uxth	r3, r3
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	f040 80a3 	bne.w	8009e52 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d14:	e853 3f00 	ldrex	r3, [r3]
 8009d18:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009d1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009d20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	461a      	mov	r2, r3
 8009d28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009d2a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009d2c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d2e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009d30:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009d32:	e841 2300 	strex	r3, r2, [r1]
 8009d36:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009d38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d1e6      	bne.n	8009d0c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	3308      	adds	r3, #8
 8009d44:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d48:	e853 3f00 	ldrex	r3, [r3]
 8009d4c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009d4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d50:	f023 0301 	bic.w	r3, r3, #1
 8009d54:	667b      	str	r3, [r7, #100]	@ 0x64
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	3308      	adds	r3, #8
 8009d5c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009d5e:	647a      	str	r2, [r7, #68]	@ 0x44
 8009d60:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d62:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009d64:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d66:	e841 2300 	strex	r3, r2, [r1]
 8009d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009d6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d1e5      	bne.n	8009d3e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2220      	movs	r2, #32
 8009d76:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2200      	movs	r2, #0
 8009d84:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4a34      	ldr	r2, [pc, #208]	@ (8009e5c <UART_RxISR_8BIT+0x1b8>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d01f      	beq.n	8009dd0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d018      	beq.n	8009dd0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009da6:	e853 3f00 	ldrex	r3, [r3]
 8009daa:	623b      	str	r3, [r7, #32]
   return(result);
 8009dac:	6a3b      	ldr	r3, [r7, #32]
 8009dae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009db2:	663b      	str	r3, [r7, #96]	@ 0x60
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	461a      	mov	r2, r3
 8009dba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009dbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8009dbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009dc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009dc4:	e841 2300 	strex	r3, r2, [r1]
 8009dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d1e6      	bne.n	8009d9e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009dd4:	2b01      	cmp	r3, #1
 8009dd6:	d12e      	bne.n	8009e36 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009de4:	693b      	ldr	r3, [r7, #16]
 8009de6:	e853 3f00 	ldrex	r3, [r3]
 8009dea:	60fb      	str	r3, [r7, #12]
   return(result);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	f023 0310 	bic.w	r3, r3, #16
 8009df2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	461a      	mov	r2, r3
 8009dfa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009dfc:	61fb      	str	r3, [r7, #28]
 8009dfe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e00:	69b9      	ldr	r1, [r7, #24]
 8009e02:	69fa      	ldr	r2, [r7, #28]
 8009e04:	e841 2300 	strex	r3, r2, [r1]
 8009e08:	617b      	str	r3, [r7, #20]
   return(result);
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d1e6      	bne.n	8009dde <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	69db      	ldr	r3, [r3, #28]
 8009e16:	f003 0310 	and.w	r3, r3, #16
 8009e1a:	2b10      	cmp	r3, #16
 8009e1c:	d103      	bne.n	8009e26 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	2210      	movs	r2, #16
 8009e24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f7ff f952 	bl	80090d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009e34:	e00d      	b.n	8009e52 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f7f7 fc84 	bl	8001744 <HAL_UART_RxCpltCallback>
}
 8009e3c:	e009      	b.n	8009e52 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	8b1b      	ldrh	r3, [r3, #24]
 8009e44:	b29a      	uxth	r2, r3
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f042 0208 	orr.w	r2, r2, #8
 8009e4e:	b292      	uxth	r2, r2
 8009e50:	831a      	strh	r2, [r3, #24]
}
 8009e52:	bf00      	nop
 8009e54:	3770      	adds	r7, #112	@ 0x70
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
 8009e5a:	bf00      	nop
 8009e5c:	40008000 	.word	0x40008000

08009e60 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b09c      	sub	sp, #112	@ 0x70
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009e6e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e78:	2b22      	cmp	r3, #34	@ 0x22
 8009e7a:	f040 80be 	bne.w	8009ffa <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009e84:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e8c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009e8e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8009e92:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009e96:	4013      	ands	r3, r2
 8009e98:	b29a      	uxth	r2, r3
 8009e9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009e9c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ea2:	1c9a      	adds	r2, r3, #2
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009eae:	b29b      	uxth	r3, r3
 8009eb0:	3b01      	subs	r3, #1
 8009eb2:	b29a      	uxth	r2, r3
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009ec0:	b29b      	uxth	r3, r3
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	f040 80a3 	bne.w	800a00e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ece:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ed0:	e853 3f00 	ldrex	r3, [r3]
 8009ed4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009ed6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ed8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009edc:	667b      	str	r3, [r7, #100]	@ 0x64
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	461a      	mov	r2, r3
 8009ee4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ee6:	657b      	str	r3, [r7, #84]	@ 0x54
 8009ee8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009eec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009eee:	e841 2300 	strex	r3, r2, [r1]
 8009ef2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009ef4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d1e6      	bne.n	8009ec8 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	3308      	adds	r3, #8
 8009f00:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f04:	e853 3f00 	ldrex	r3, [r3]
 8009f08:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f0c:	f023 0301 	bic.w	r3, r3, #1
 8009f10:	663b      	str	r3, [r7, #96]	@ 0x60
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	3308      	adds	r3, #8
 8009f18:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009f1a:	643a      	str	r2, [r7, #64]	@ 0x40
 8009f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f1e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009f20:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009f22:	e841 2300 	strex	r3, r2, [r1]
 8009f26:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d1e5      	bne.n	8009efa <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2220      	movs	r2, #32
 8009f32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4a34      	ldr	r2, [pc, #208]	@ (800a018 <UART_RxISR_16BIT+0x1b8>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d01f      	beq.n	8009f8c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d018      	beq.n	8009f8c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f60:	6a3b      	ldr	r3, [r7, #32]
 8009f62:	e853 3f00 	ldrex	r3, [r3]
 8009f66:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f68:	69fb      	ldr	r3, [r7, #28]
 8009f6a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009f6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	461a      	mov	r2, r3
 8009f76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009f7a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009f7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f80:	e841 2300 	strex	r3, r2, [r1]
 8009f84:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d1e6      	bne.n	8009f5a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	d12e      	bne.n	8009ff2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2200      	movs	r2, #0
 8009f98:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	e853 3f00 	ldrex	r3, [r3]
 8009fa6:	60bb      	str	r3, [r7, #8]
   return(result);
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	f023 0310 	bic.w	r3, r3, #16
 8009fae:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	461a      	mov	r2, r3
 8009fb6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009fb8:	61bb      	str	r3, [r7, #24]
 8009fba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fbc:	6979      	ldr	r1, [r7, #20]
 8009fbe:	69ba      	ldr	r2, [r7, #24]
 8009fc0:	e841 2300 	strex	r3, r2, [r1]
 8009fc4:	613b      	str	r3, [r7, #16]
   return(result);
 8009fc6:	693b      	ldr	r3, [r7, #16]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d1e6      	bne.n	8009f9a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	69db      	ldr	r3, [r3, #28]
 8009fd2:	f003 0310 	and.w	r3, r3, #16
 8009fd6:	2b10      	cmp	r3, #16
 8009fd8:	d103      	bne.n	8009fe2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	2210      	movs	r2, #16
 8009fe0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009fe8:	4619      	mov	r1, r3
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f7ff f874 	bl	80090d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009ff0:	e00d      	b.n	800a00e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f7f7 fba6 	bl	8001744 <HAL_UART_RxCpltCallback>
}
 8009ff8:	e009      	b.n	800a00e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	8b1b      	ldrh	r3, [r3, #24]
 800a000:	b29a      	uxth	r2, r3
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f042 0208 	orr.w	r2, r2, #8
 800a00a:	b292      	uxth	r2, r2
 800a00c:	831a      	strh	r2, [r3, #24]
}
 800a00e:	bf00      	nop
 800a010:	3770      	adds	r7, #112	@ 0x70
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
 800a016:	bf00      	nop
 800a018:	40008000 	.word	0x40008000

0800a01c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b083      	sub	sp, #12
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a024:	bf00      	nop
 800a026:	370c      	adds	r7, #12
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr

0800a030 <__NVIC_SetPriority>:
{
 800a030:	b480      	push	{r7}
 800a032:	b083      	sub	sp, #12
 800a034:	af00      	add	r7, sp, #0
 800a036:	4603      	mov	r3, r0
 800a038:	6039      	str	r1, [r7, #0]
 800a03a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a03c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a040:	2b00      	cmp	r3, #0
 800a042:	db0a      	blt.n	800a05a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	b2da      	uxtb	r2, r3
 800a048:	490c      	ldr	r1, [pc, #48]	@ (800a07c <__NVIC_SetPriority+0x4c>)
 800a04a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a04e:	0112      	lsls	r2, r2, #4
 800a050:	b2d2      	uxtb	r2, r2
 800a052:	440b      	add	r3, r1
 800a054:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a058:	e00a      	b.n	800a070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	b2da      	uxtb	r2, r3
 800a05e:	4908      	ldr	r1, [pc, #32]	@ (800a080 <__NVIC_SetPriority+0x50>)
 800a060:	79fb      	ldrb	r3, [r7, #7]
 800a062:	f003 030f 	and.w	r3, r3, #15
 800a066:	3b04      	subs	r3, #4
 800a068:	0112      	lsls	r2, r2, #4
 800a06a:	b2d2      	uxtb	r2, r2
 800a06c:	440b      	add	r3, r1
 800a06e:	761a      	strb	r2, [r3, #24]
}
 800a070:	bf00      	nop
 800a072:	370c      	adds	r7, #12
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr
 800a07c:	e000e100 	.word	0xe000e100
 800a080:	e000ed00 	.word	0xe000ed00

0800a084 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a084:	b580      	push	{r7, lr}
 800a086:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a088:	4b05      	ldr	r3, [pc, #20]	@ (800a0a0 <SysTick_Handler+0x1c>)
 800a08a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a08c:	f001 fec6 	bl	800be1c <xTaskGetSchedulerState>
 800a090:	4603      	mov	r3, r0
 800a092:	2b01      	cmp	r3, #1
 800a094:	d001      	beq.n	800a09a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a096:	f002 fcbf 	bl	800ca18 <xPortSysTickHandler>
  }
}
 800a09a:	bf00      	nop
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	e000e010 	.word	0xe000e010

0800a0a4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a0a8:	2100      	movs	r1, #0
 800a0aa:	f06f 0004 	mvn.w	r0, #4
 800a0ae:	f7ff ffbf 	bl	800a030 <__NVIC_SetPriority>
#endif
}
 800a0b2:	bf00      	nop
 800a0b4:	bd80      	pop	{r7, pc}
	...

0800a0b8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a0b8:	b480      	push	{r7}
 800a0ba:	b083      	sub	sp, #12
 800a0bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0be:	f3ef 8305 	mrs	r3, IPSR
 800a0c2:	603b      	str	r3, [r7, #0]
  return(result);
 800a0c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d003      	beq.n	800a0d2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a0ca:	f06f 0305 	mvn.w	r3, #5
 800a0ce:	607b      	str	r3, [r7, #4]
 800a0d0:	e00c      	b.n	800a0ec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a0d2:	4b0a      	ldr	r3, [pc, #40]	@ (800a0fc <osKernelInitialize+0x44>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d105      	bne.n	800a0e6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a0da:	4b08      	ldr	r3, [pc, #32]	@ (800a0fc <osKernelInitialize+0x44>)
 800a0dc:	2201      	movs	r2, #1
 800a0de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	607b      	str	r3, [r7, #4]
 800a0e4:	e002      	b.n	800a0ec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a0e6:	f04f 33ff 	mov.w	r3, #4294967295
 800a0ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a0ec:	687b      	ldr	r3, [r7, #4]
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	370c      	adds	r7, #12
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f8:	4770      	bx	lr
 800a0fa:	bf00      	nop
 800a0fc:	20000394 	.word	0x20000394

0800a100 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a100:	b580      	push	{r7, lr}
 800a102:	b082      	sub	sp, #8
 800a104:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a106:	f3ef 8305 	mrs	r3, IPSR
 800a10a:	603b      	str	r3, [r7, #0]
  return(result);
 800a10c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d003      	beq.n	800a11a <osKernelStart+0x1a>
    stat = osErrorISR;
 800a112:	f06f 0305 	mvn.w	r3, #5
 800a116:	607b      	str	r3, [r7, #4]
 800a118:	e010      	b.n	800a13c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a11a:	4b0b      	ldr	r3, [pc, #44]	@ (800a148 <osKernelStart+0x48>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d109      	bne.n	800a136 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a122:	f7ff ffbf 	bl	800a0a4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a126:	4b08      	ldr	r3, [pc, #32]	@ (800a148 <osKernelStart+0x48>)
 800a128:	2202      	movs	r2, #2
 800a12a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a12c:	f001 fa12 	bl	800b554 <vTaskStartScheduler>
      stat = osOK;
 800a130:	2300      	movs	r3, #0
 800a132:	607b      	str	r3, [r7, #4]
 800a134:	e002      	b.n	800a13c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a136:	f04f 33ff 	mov.w	r3, #4294967295
 800a13a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a13c:	687b      	ldr	r3, [r7, #4]
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3708      	adds	r7, #8
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}
 800a146:	bf00      	nop
 800a148:	20000394 	.word	0x20000394

0800a14c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b08e      	sub	sp, #56	@ 0x38
 800a150:	af04      	add	r7, sp, #16
 800a152:	60f8      	str	r0, [r7, #12]
 800a154:	60b9      	str	r1, [r7, #8]
 800a156:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a158:	2300      	movs	r3, #0
 800a15a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a15c:	f3ef 8305 	mrs	r3, IPSR
 800a160:	617b      	str	r3, [r7, #20]
  return(result);
 800a162:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a164:	2b00      	cmp	r3, #0
 800a166:	d17e      	bne.n	800a266 <osThreadNew+0x11a>
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d07b      	beq.n	800a266 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a16e:	2380      	movs	r3, #128	@ 0x80
 800a170:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a172:	2318      	movs	r3, #24
 800a174:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a176:	2300      	movs	r3, #0
 800a178:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a17a:	f04f 33ff 	mov.w	r3, #4294967295
 800a17e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d045      	beq.n	800a212 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d002      	beq.n	800a194 <osThreadNew+0x48>
        name = attr->name;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	699b      	ldr	r3, [r3, #24]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d002      	beq.n	800a1a2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	699b      	ldr	r3, [r3, #24]
 800a1a0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a1a2:	69fb      	ldr	r3, [r7, #28]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d008      	beq.n	800a1ba <osThreadNew+0x6e>
 800a1a8:	69fb      	ldr	r3, [r7, #28]
 800a1aa:	2b38      	cmp	r3, #56	@ 0x38
 800a1ac:	d805      	bhi.n	800a1ba <osThreadNew+0x6e>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	685b      	ldr	r3, [r3, #4]
 800a1b2:	f003 0301 	and.w	r3, r3, #1
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d001      	beq.n	800a1be <osThreadNew+0x72>
        return (NULL);
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	e054      	b.n	800a268 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	695b      	ldr	r3, [r3, #20]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d003      	beq.n	800a1ce <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	695b      	ldr	r3, [r3, #20]
 800a1ca:	089b      	lsrs	r3, r3, #2
 800a1cc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	689b      	ldr	r3, [r3, #8]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d00e      	beq.n	800a1f4 <osThreadNew+0xa8>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	68db      	ldr	r3, [r3, #12]
 800a1da:	2ba7      	cmp	r3, #167	@ 0xa7
 800a1dc:	d90a      	bls.n	800a1f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d006      	beq.n	800a1f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	695b      	ldr	r3, [r3, #20]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d002      	beq.n	800a1f4 <osThreadNew+0xa8>
        mem = 1;
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	61bb      	str	r3, [r7, #24]
 800a1f2:	e010      	b.n	800a216 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	689b      	ldr	r3, [r3, #8]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d10c      	bne.n	800a216 <osThreadNew+0xca>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	68db      	ldr	r3, [r3, #12]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d108      	bne.n	800a216 <osThreadNew+0xca>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	691b      	ldr	r3, [r3, #16]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d104      	bne.n	800a216 <osThreadNew+0xca>
          mem = 0;
 800a20c:	2300      	movs	r3, #0
 800a20e:	61bb      	str	r3, [r7, #24]
 800a210:	e001      	b.n	800a216 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a212:	2300      	movs	r3, #0
 800a214:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a216:	69bb      	ldr	r3, [r7, #24]
 800a218:	2b01      	cmp	r3, #1
 800a21a:	d110      	bne.n	800a23e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a220:	687a      	ldr	r2, [r7, #4]
 800a222:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a224:	9202      	str	r2, [sp, #8]
 800a226:	9301      	str	r3, [sp, #4]
 800a228:	69fb      	ldr	r3, [r7, #28]
 800a22a:	9300      	str	r3, [sp, #0]
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	6a3a      	ldr	r2, [r7, #32]
 800a230:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a232:	68f8      	ldr	r0, [r7, #12]
 800a234:	f000 ff9a 	bl	800b16c <xTaskCreateStatic>
 800a238:	4603      	mov	r3, r0
 800a23a:	613b      	str	r3, [r7, #16]
 800a23c:	e013      	b.n	800a266 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a23e:	69bb      	ldr	r3, [r7, #24]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d110      	bne.n	800a266 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a244:	6a3b      	ldr	r3, [r7, #32]
 800a246:	b29a      	uxth	r2, r3
 800a248:	f107 0310 	add.w	r3, r7, #16
 800a24c:	9301      	str	r3, [sp, #4]
 800a24e:	69fb      	ldr	r3, [r7, #28]
 800a250:	9300      	str	r3, [sp, #0]
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a256:	68f8      	ldr	r0, [r7, #12]
 800a258:	f000 ffe8 	bl	800b22c <xTaskCreate>
 800a25c:	4603      	mov	r3, r0
 800a25e:	2b01      	cmp	r3, #1
 800a260:	d001      	beq.n	800a266 <osThreadNew+0x11a>
            hTask = NULL;
 800a262:	2300      	movs	r3, #0
 800a264:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a266:	693b      	ldr	r3, [r7, #16]
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3728      	adds	r7, #40	@ 0x28
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a270:	b580      	push	{r7, lr}
 800a272:	b084      	sub	sp, #16
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a278:	f3ef 8305 	mrs	r3, IPSR
 800a27c:	60bb      	str	r3, [r7, #8]
  return(result);
 800a27e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a280:	2b00      	cmp	r3, #0
 800a282:	d003      	beq.n	800a28c <osDelay+0x1c>
    stat = osErrorISR;
 800a284:	f06f 0305 	mvn.w	r3, #5
 800a288:	60fb      	str	r3, [r7, #12]
 800a28a:	e007      	b.n	800a29c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a28c:	2300      	movs	r3, #0
 800a28e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d002      	beq.n	800a29c <osDelay+0x2c>
      vTaskDelay(ticks);
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f001 f926 	bl	800b4e8 <vTaskDelay>
    }
  }

  return (stat);
 800a29c:	68fb      	ldr	r3, [r7, #12]
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3710      	adds	r7, #16
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}

0800a2a6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a2a6:	b580      	push	{r7, lr}
 800a2a8:	b08a      	sub	sp, #40	@ 0x28
 800a2aa:	af02      	add	r7, sp, #8
 800a2ac:	60f8      	str	r0, [r7, #12]
 800a2ae:	60b9      	str	r1, [r7, #8]
 800a2b0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2b6:	f3ef 8305 	mrs	r3, IPSR
 800a2ba:	613b      	str	r3, [r7, #16]
  return(result);
 800a2bc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d175      	bne.n	800a3ae <osSemaphoreNew+0x108>
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d072      	beq.n	800a3ae <osSemaphoreNew+0x108>
 800a2c8:	68ba      	ldr	r2, [r7, #8]
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	d86e      	bhi.n	800a3ae <osSemaphoreNew+0x108>
    mem = -1;
 800a2d0:	f04f 33ff 	mov.w	r3, #4294967295
 800a2d4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d015      	beq.n	800a308 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	689b      	ldr	r3, [r3, #8]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d006      	beq.n	800a2f2 <osSemaphoreNew+0x4c>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	68db      	ldr	r3, [r3, #12]
 800a2e8:	2b4f      	cmp	r3, #79	@ 0x4f
 800a2ea:	d902      	bls.n	800a2f2 <osSemaphoreNew+0x4c>
        mem = 1;
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	61bb      	str	r3, [r7, #24]
 800a2f0:	e00c      	b.n	800a30c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	689b      	ldr	r3, [r3, #8]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d108      	bne.n	800a30c <osSemaphoreNew+0x66>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	68db      	ldr	r3, [r3, #12]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d104      	bne.n	800a30c <osSemaphoreNew+0x66>
          mem = 0;
 800a302:	2300      	movs	r3, #0
 800a304:	61bb      	str	r3, [r7, #24]
 800a306:	e001      	b.n	800a30c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800a308:	2300      	movs	r3, #0
 800a30a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800a30c:	69bb      	ldr	r3, [r7, #24]
 800a30e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a312:	d04c      	beq.n	800a3ae <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2b01      	cmp	r3, #1
 800a318:	d128      	bne.n	800a36c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800a31a:	69bb      	ldr	r3, [r7, #24]
 800a31c:	2b01      	cmp	r3, #1
 800a31e:	d10a      	bne.n	800a336 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	689b      	ldr	r3, [r3, #8]
 800a324:	2203      	movs	r2, #3
 800a326:	9200      	str	r2, [sp, #0]
 800a328:	2200      	movs	r2, #0
 800a32a:	2100      	movs	r1, #0
 800a32c:	2001      	movs	r0, #1
 800a32e:	f000 f995 	bl	800a65c <xQueueGenericCreateStatic>
 800a332:	61f8      	str	r0, [r7, #28]
 800a334:	e005      	b.n	800a342 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800a336:	2203      	movs	r2, #3
 800a338:	2100      	movs	r1, #0
 800a33a:	2001      	movs	r0, #1
 800a33c:	f000 fa0b 	bl	800a756 <xQueueGenericCreate>
 800a340:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a342:	69fb      	ldr	r3, [r7, #28]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d022      	beq.n	800a38e <osSemaphoreNew+0xe8>
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d01f      	beq.n	800a38e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a34e:	2300      	movs	r3, #0
 800a350:	2200      	movs	r2, #0
 800a352:	2100      	movs	r1, #0
 800a354:	69f8      	ldr	r0, [r7, #28]
 800a356:	f000 facb 	bl	800a8f0 <xQueueGenericSend>
 800a35a:	4603      	mov	r3, r0
 800a35c:	2b01      	cmp	r3, #1
 800a35e:	d016      	beq.n	800a38e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800a360:	69f8      	ldr	r0, [r7, #28]
 800a362:	f000 fd47 	bl	800adf4 <vQueueDelete>
            hSemaphore = NULL;
 800a366:	2300      	movs	r3, #0
 800a368:	61fb      	str	r3, [r7, #28]
 800a36a:	e010      	b.n	800a38e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800a36c:	69bb      	ldr	r3, [r7, #24]
 800a36e:	2b01      	cmp	r3, #1
 800a370:	d108      	bne.n	800a384 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	689b      	ldr	r3, [r3, #8]
 800a376:	461a      	mov	r2, r3
 800a378:	68b9      	ldr	r1, [r7, #8]
 800a37a:	68f8      	ldr	r0, [r7, #12]
 800a37c:	f000 fa49 	bl	800a812 <xQueueCreateCountingSemaphoreStatic>
 800a380:	61f8      	str	r0, [r7, #28]
 800a382:	e004      	b.n	800a38e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a384:	68b9      	ldr	r1, [r7, #8]
 800a386:	68f8      	ldr	r0, [r7, #12]
 800a388:	f000 fa7c 	bl	800a884 <xQueueCreateCountingSemaphore>
 800a38c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800a38e:	69fb      	ldr	r3, [r7, #28]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d00c      	beq.n	800a3ae <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d003      	beq.n	800a3a2 <osSemaphoreNew+0xfc>
          name = attr->name;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	617b      	str	r3, [r7, #20]
 800a3a0:	e001      	b.n	800a3a6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a3a6:	6979      	ldr	r1, [r7, #20]
 800a3a8:	69f8      	ldr	r0, [r7, #28]
 800a3aa:	f000 fe57 	bl	800b05c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800a3ae:	69fb      	ldr	r3, [r7, #28]
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3720      	adds	r7, #32
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}

0800a3b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a3b8:	b480      	push	{r7}
 800a3ba:	b085      	sub	sp, #20
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	60f8      	str	r0, [r7, #12]
 800a3c0:	60b9      	str	r1, [r7, #8]
 800a3c2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	4a07      	ldr	r2, [pc, #28]	@ (800a3e4 <vApplicationGetIdleTaskMemory+0x2c>)
 800a3c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	4a06      	ldr	r2, [pc, #24]	@ (800a3e8 <vApplicationGetIdleTaskMemory+0x30>)
 800a3ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2280      	movs	r2, #128	@ 0x80
 800a3d4:	601a      	str	r2, [r3, #0]
}
 800a3d6:	bf00      	nop
 800a3d8:	3714      	adds	r7, #20
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e0:	4770      	bx	lr
 800a3e2:	bf00      	nop
 800a3e4:	20000398 	.word	0x20000398
 800a3e8:	20000440 	.word	0x20000440

0800a3ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a3ec:	b480      	push	{r7}
 800a3ee:	b085      	sub	sp, #20
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	60f8      	str	r0, [r7, #12]
 800a3f4:	60b9      	str	r1, [r7, #8]
 800a3f6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	4a07      	ldr	r2, [pc, #28]	@ (800a418 <vApplicationGetTimerTaskMemory+0x2c>)
 800a3fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	4a06      	ldr	r2, [pc, #24]	@ (800a41c <vApplicationGetTimerTaskMemory+0x30>)
 800a402:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a40a:	601a      	str	r2, [r3, #0]
}
 800a40c:	bf00      	nop
 800a40e:	3714      	adds	r7, #20
 800a410:	46bd      	mov	sp, r7
 800a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a416:	4770      	bx	lr
 800a418:	20000640 	.word	0x20000640
 800a41c:	200006e8 	.word	0x200006e8

0800a420 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a420:	b480      	push	{r7}
 800a422:	b083      	sub	sp, #12
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f103 0208 	add.w	r2, r3, #8
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f04f 32ff 	mov.w	r2, #4294967295
 800a438:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f103 0208 	add.w	r2, r3, #8
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f103 0208 	add.w	r2, r3, #8
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2200      	movs	r2, #0
 800a452:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a454:	bf00      	nop
 800a456:	370c      	adds	r7, #12
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr

0800a460 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a460:	b480      	push	{r7}
 800a462:	b083      	sub	sp, #12
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2200      	movs	r2, #0
 800a46c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a46e:	bf00      	nop
 800a470:	370c      	adds	r7, #12
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr

0800a47a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a47a:	b480      	push	{r7}
 800a47c:	b085      	sub	sp, #20
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
 800a482:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	685b      	ldr	r3, [r3, #4]
 800a488:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	68fa      	ldr	r2, [r7, #12]
 800a48e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	689a      	ldr	r2, [r3, #8]
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	689b      	ldr	r3, [r3, #8]
 800a49c:	683a      	ldr	r2, [r7, #0]
 800a49e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	683a      	ldr	r2, [r7, #0]
 800a4a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	687a      	ldr	r2, [r7, #4]
 800a4aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	1c5a      	adds	r2, r3, #1
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	601a      	str	r2, [r3, #0]
}
 800a4b6:	bf00      	nop
 800a4b8:	3714      	adds	r7, #20
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr

0800a4c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a4c2:	b480      	push	{r7}
 800a4c4:	b085      	sub	sp, #20
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	6078      	str	r0, [r7, #4]
 800a4ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4d8:	d103      	bne.n	800a4e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	691b      	ldr	r3, [r3, #16]
 800a4de:	60fb      	str	r3, [r7, #12]
 800a4e0:	e00c      	b.n	800a4fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	3308      	adds	r3, #8
 800a4e6:	60fb      	str	r3, [r7, #12]
 800a4e8:	e002      	b.n	800a4f0 <vListInsert+0x2e>
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	60fb      	str	r3, [r7, #12]
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	68ba      	ldr	r2, [r7, #8]
 800a4f8:	429a      	cmp	r2, r3
 800a4fa:	d2f6      	bcs.n	800a4ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	685a      	ldr	r2, [r3, #4]
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	685b      	ldr	r3, [r3, #4]
 800a508:	683a      	ldr	r2, [r7, #0]
 800a50a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	68fa      	ldr	r2, [r7, #12]
 800a510:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	683a      	ldr	r2, [r7, #0]
 800a516:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	687a      	ldr	r2, [r7, #4]
 800a51c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	1c5a      	adds	r2, r3, #1
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	601a      	str	r2, [r3, #0]
}
 800a528:	bf00      	nop
 800a52a:	3714      	adds	r7, #20
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr

0800a534 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a534:	b480      	push	{r7}
 800a536:	b085      	sub	sp, #20
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	691b      	ldr	r3, [r3, #16]
 800a540:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	687a      	ldr	r2, [r7, #4]
 800a548:	6892      	ldr	r2, [r2, #8]
 800a54a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	689b      	ldr	r3, [r3, #8]
 800a550:	687a      	ldr	r2, [r7, #4]
 800a552:	6852      	ldr	r2, [r2, #4]
 800a554:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	687a      	ldr	r2, [r7, #4]
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d103      	bne.n	800a568 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	689a      	ldr	r2, [r3, #8]
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2200      	movs	r2, #0
 800a56c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	1e5a      	subs	r2, r3, #1
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3714      	adds	r7, #20
 800a580:	46bd      	mov	sp, r7
 800a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a586:	4770      	bx	lr

0800a588 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b084      	sub	sp, #16
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
 800a590:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d10b      	bne.n	800a5b4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a59c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5a0:	f383 8811 	msr	BASEPRI, r3
 800a5a4:	f3bf 8f6f 	isb	sy
 800a5a8:	f3bf 8f4f 	dsb	sy
 800a5ac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a5ae:	bf00      	nop
 800a5b0:	bf00      	nop
 800a5b2:	e7fd      	b.n	800a5b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a5b4:	f002 f9a0 	bl	800c8f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681a      	ldr	r2, [r3, #0]
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5c0:	68f9      	ldr	r1, [r7, #12]
 800a5c2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a5c4:	fb01 f303 	mul.w	r3, r1, r3
 800a5c8:	441a      	add	r2, r3
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681a      	ldr	r2, [r3, #0]
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681a      	ldr	r2, [r3, #0]
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5e4:	3b01      	subs	r3, #1
 800a5e6:	68f9      	ldr	r1, [r7, #12]
 800a5e8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a5ea:	fb01 f303 	mul.w	r3, r1, r3
 800a5ee:	441a      	add	r2, r3
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	22ff      	movs	r2, #255	@ 0xff
 800a5f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	22ff      	movs	r2, #255	@ 0xff
 800a600:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d114      	bne.n	800a634 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	691b      	ldr	r3, [r3, #16]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d01a      	beq.n	800a648 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	3310      	adds	r3, #16
 800a616:	4618      	mov	r0, r3
 800a618:	f001 fa3a 	bl	800ba90 <xTaskRemoveFromEventList>
 800a61c:	4603      	mov	r3, r0
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d012      	beq.n	800a648 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a622:	4b0d      	ldr	r3, [pc, #52]	@ (800a658 <xQueueGenericReset+0xd0>)
 800a624:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a628:	601a      	str	r2, [r3, #0]
 800a62a:	f3bf 8f4f 	dsb	sy
 800a62e:	f3bf 8f6f 	isb	sy
 800a632:	e009      	b.n	800a648 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	3310      	adds	r3, #16
 800a638:	4618      	mov	r0, r3
 800a63a:	f7ff fef1 	bl	800a420 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	3324      	adds	r3, #36	@ 0x24
 800a642:	4618      	mov	r0, r3
 800a644:	f7ff feec 	bl	800a420 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a648:	f002 f988 	bl	800c95c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a64c:	2301      	movs	r3, #1
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3710      	adds	r7, #16
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}
 800a656:	bf00      	nop
 800a658:	e000ed04 	.word	0xe000ed04

0800a65c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b08e      	sub	sp, #56	@ 0x38
 800a660:	af02      	add	r7, sp, #8
 800a662:	60f8      	str	r0, [r7, #12]
 800a664:	60b9      	str	r1, [r7, #8]
 800a666:	607a      	str	r2, [r7, #4]
 800a668:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d10b      	bne.n	800a688 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a674:	f383 8811 	msr	BASEPRI, r3
 800a678:	f3bf 8f6f 	isb	sy
 800a67c:	f3bf 8f4f 	dsb	sy
 800a680:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a682:	bf00      	nop
 800a684:	bf00      	nop
 800a686:	e7fd      	b.n	800a684 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d10b      	bne.n	800a6a6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a68e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a692:	f383 8811 	msr	BASEPRI, r3
 800a696:	f3bf 8f6f 	isb	sy
 800a69a:	f3bf 8f4f 	dsb	sy
 800a69e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a6a0:	bf00      	nop
 800a6a2:	bf00      	nop
 800a6a4:	e7fd      	b.n	800a6a2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d002      	beq.n	800a6b2 <xQueueGenericCreateStatic+0x56>
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d001      	beq.n	800a6b6 <xQueueGenericCreateStatic+0x5a>
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	e000      	b.n	800a6b8 <xQueueGenericCreateStatic+0x5c>
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d10b      	bne.n	800a6d4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a6bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6c0:	f383 8811 	msr	BASEPRI, r3
 800a6c4:	f3bf 8f6f 	isb	sy
 800a6c8:	f3bf 8f4f 	dsb	sy
 800a6cc:	623b      	str	r3, [r7, #32]
}
 800a6ce:	bf00      	nop
 800a6d0:	bf00      	nop
 800a6d2:	e7fd      	b.n	800a6d0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d102      	bne.n	800a6e0 <xQueueGenericCreateStatic+0x84>
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d101      	bne.n	800a6e4 <xQueueGenericCreateStatic+0x88>
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	e000      	b.n	800a6e6 <xQueueGenericCreateStatic+0x8a>
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d10b      	bne.n	800a702 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a6ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6ee:	f383 8811 	msr	BASEPRI, r3
 800a6f2:	f3bf 8f6f 	isb	sy
 800a6f6:	f3bf 8f4f 	dsb	sy
 800a6fa:	61fb      	str	r3, [r7, #28]
}
 800a6fc:	bf00      	nop
 800a6fe:	bf00      	nop
 800a700:	e7fd      	b.n	800a6fe <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a702:	2350      	movs	r3, #80	@ 0x50
 800a704:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	2b50      	cmp	r3, #80	@ 0x50
 800a70a:	d00b      	beq.n	800a724 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a70c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a710:	f383 8811 	msr	BASEPRI, r3
 800a714:	f3bf 8f6f 	isb	sy
 800a718:	f3bf 8f4f 	dsb	sy
 800a71c:	61bb      	str	r3, [r7, #24]
}
 800a71e:	bf00      	nop
 800a720:	bf00      	nop
 800a722:	e7fd      	b.n	800a720 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a724:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a72a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d00d      	beq.n	800a74c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a732:	2201      	movs	r2, #1
 800a734:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a738:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a73c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a73e:	9300      	str	r3, [sp, #0]
 800a740:	4613      	mov	r3, r2
 800a742:	687a      	ldr	r2, [r7, #4]
 800a744:	68b9      	ldr	r1, [r7, #8]
 800a746:	68f8      	ldr	r0, [r7, #12]
 800a748:	f000 f840 	bl	800a7cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a74c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a74e:	4618      	mov	r0, r3
 800a750:	3730      	adds	r7, #48	@ 0x30
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}

0800a756 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a756:	b580      	push	{r7, lr}
 800a758:	b08a      	sub	sp, #40	@ 0x28
 800a75a:	af02      	add	r7, sp, #8
 800a75c:	60f8      	str	r0, [r7, #12]
 800a75e:	60b9      	str	r1, [r7, #8]
 800a760:	4613      	mov	r3, r2
 800a762:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d10b      	bne.n	800a782 <xQueueGenericCreate+0x2c>
	__asm volatile
 800a76a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a76e:	f383 8811 	msr	BASEPRI, r3
 800a772:	f3bf 8f6f 	isb	sy
 800a776:	f3bf 8f4f 	dsb	sy
 800a77a:	613b      	str	r3, [r7, #16]
}
 800a77c:	bf00      	nop
 800a77e:	bf00      	nop
 800a780:	e7fd      	b.n	800a77e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	68ba      	ldr	r2, [r7, #8]
 800a786:	fb02 f303 	mul.w	r3, r2, r3
 800a78a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a78c:	69fb      	ldr	r3, [r7, #28]
 800a78e:	3350      	adds	r3, #80	@ 0x50
 800a790:	4618      	mov	r0, r3
 800a792:	f002 f9d3 	bl	800cb3c <pvPortMalloc>
 800a796:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a798:	69bb      	ldr	r3, [r7, #24]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d011      	beq.n	800a7c2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a79e:	69bb      	ldr	r3, [r7, #24]
 800a7a0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	3350      	adds	r3, #80	@ 0x50
 800a7a6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a7a8:	69bb      	ldr	r3, [r7, #24]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a7b0:	79fa      	ldrb	r2, [r7, #7]
 800a7b2:	69bb      	ldr	r3, [r7, #24]
 800a7b4:	9300      	str	r3, [sp, #0]
 800a7b6:	4613      	mov	r3, r2
 800a7b8:	697a      	ldr	r2, [r7, #20]
 800a7ba:	68b9      	ldr	r1, [r7, #8]
 800a7bc:	68f8      	ldr	r0, [r7, #12]
 800a7be:	f000 f805 	bl	800a7cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a7c2:	69bb      	ldr	r3, [r7, #24]
	}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3720      	adds	r7, #32
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}

0800a7cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b084      	sub	sp, #16
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	60f8      	str	r0, [r7, #12]
 800a7d4:	60b9      	str	r1, [r7, #8]
 800a7d6:	607a      	str	r2, [r7, #4]
 800a7d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a7da:	68bb      	ldr	r3, [r7, #8]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d103      	bne.n	800a7e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a7e0:	69bb      	ldr	r3, [r7, #24]
 800a7e2:	69ba      	ldr	r2, [r7, #24]
 800a7e4:	601a      	str	r2, [r3, #0]
 800a7e6:	e002      	b.n	800a7ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a7e8:	69bb      	ldr	r3, [r7, #24]
 800a7ea:	687a      	ldr	r2, [r7, #4]
 800a7ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a7ee:	69bb      	ldr	r3, [r7, #24]
 800a7f0:	68fa      	ldr	r2, [r7, #12]
 800a7f2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a7f4:	69bb      	ldr	r3, [r7, #24]
 800a7f6:	68ba      	ldr	r2, [r7, #8]
 800a7f8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a7fa:	2101      	movs	r1, #1
 800a7fc:	69b8      	ldr	r0, [r7, #24]
 800a7fe:	f7ff fec3 	bl	800a588 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a802:	69bb      	ldr	r3, [r7, #24]
 800a804:	78fa      	ldrb	r2, [r7, #3]
 800a806:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a80a:	bf00      	nop
 800a80c:	3710      	adds	r7, #16
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}

0800a812 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a812:	b580      	push	{r7, lr}
 800a814:	b08a      	sub	sp, #40	@ 0x28
 800a816:	af02      	add	r7, sp, #8
 800a818:	60f8      	str	r0, [r7, #12]
 800a81a:	60b9      	str	r1, [r7, #8]
 800a81c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d10b      	bne.n	800a83c <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800a824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a828:	f383 8811 	msr	BASEPRI, r3
 800a82c:	f3bf 8f6f 	isb	sy
 800a830:	f3bf 8f4f 	dsb	sy
 800a834:	61bb      	str	r3, [r7, #24]
}
 800a836:	bf00      	nop
 800a838:	bf00      	nop
 800a83a:	e7fd      	b.n	800a838 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a83c:	68ba      	ldr	r2, [r7, #8]
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	429a      	cmp	r2, r3
 800a842:	d90b      	bls.n	800a85c <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800a844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a848:	f383 8811 	msr	BASEPRI, r3
 800a84c:	f3bf 8f6f 	isb	sy
 800a850:	f3bf 8f4f 	dsb	sy
 800a854:	617b      	str	r3, [r7, #20]
}
 800a856:	bf00      	nop
 800a858:	bf00      	nop
 800a85a:	e7fd      	b.n	800a858 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a85c:	2302      	movs	r3, #2
 800a85e:	9300      	str	r3, [sp, #0]
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2200      	movs	r2, #0
 800a864:	2100      	movs	r1, #0
 800a866:	68f8      	ldr	r0, [r7, #12]
 800a868:	f7ff fef8 	bl	800a65c <xQueueGenericCreateStatic>
 800a86c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a86e:	69fb      	ldr	r3, [r7, #28]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d002      	beq.n	800a87a <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a874:	69fb      	ldr	r3, [r7, #28]
 800a876:	68ba      	ldr	r2, [r7, #8]
 800a878:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a87a:	69fb      	ldr	r3, [r7, #28]
	}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3720      	adds	r7, #32
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a884:	b580      	push	{r7, lr}
 800a886:	b086      	sub	sp, #24
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d10b      	bne.n	800a8ac <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800a894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a898:	f383 8811 	msr	BASEPRI, r3
 800a89c:	f3bf 8f6f 	isb	sy
 800a8a0:	f3bf 8f4f 	dsb	sy
 800a8a4:	613b      	str	r3, [r7, #16]
}
 800a8a6:	bf00      	nop
 800a8a8:	bf00      	nop
 800a8aa:	e7fd      	b.n	800a8a8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a8ac:	683a      	ldr	r2, [r7, #0]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	d90b      	bls.n	800a8cc <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800a8b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8b8:	f383 8811 	msr	BASEPRI, r3
 800a8bc:	f3bf 8f6f 	isb	sy
 800a8c0:	f3bf 8f4f 	dsb	sy
 800a8c4:	60fb      	str	r3, [r7, #12]
}
 800a8c6:	bf00      	nop
 800a8c8:	bf00      	nop
 800a8ca:	e7fd      	b.n	800a8c8 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a8cc:	2202      	movs	r2, #2
 800a8ce:	2100      	movs	r1, #0
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f7ff ff40 	bl	800a756 <xQueueGenericCreate>
 800a8d6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d002      	beq.n	800a8e4 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	683a      	ldr	r2, [r7, #0]
 800a8e2:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a8e4:	697b      	ldr	r3, [r7, #20]
	}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	3718      	adds	r7, #24
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}
	...

0800a8f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b08e      	sub	sp, #56	@ 0x38
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	60f8      	str	r0, [r7, #12]
 800a8f8:	60b9      	str	r1, [r7, #8]
 800a8fa:	607a      	str	r2, [r7, #4]
 800a8fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a8fe:	2300      	movs	r3, #0
 800a900:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d10b      	bne.n	800a924 <xQueueGenericSend+0x34>
	__asm volatile
 800a90c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a910:	f383 8811 	msr	BASEPRI, r3
 800a914:	f3bf 8f6f 	isb	sy
 800a918:	f3bf 8f4f 	dsb	sy
 800a91c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a91e:	bf00      	nop
 800a920:	bf00      	nop
 800a922:	e7fd      	b.n	800a920 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d103      	bne.n	800a932 <xQueueGenericSend+0x42>
 800a92a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a92c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d101      	bne.n	800a936 <xQueueGenericSend+0x46>
 800a932:	2301      	movs	r3, #1
 800a934:	e000      	b.n	800a938 <xQueueGenericSend+0x48>
 800a936:	2300      	movs	r3, #0
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d10b      	bne.n	800a954 <xQueueGenericSend+0x64>
	__asm volatile
 800a93c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a940:	f383 8811 	msr	BASEPRI, r3
 800a944:	f3bf 8f6f 	isb	sy
 800a948:	f3bf 8f4f 	dsb	sy
 800a94c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a94e:	bf00      	nop
 800a950:	bf00      	nop
 800a952:	e7fd      	b.n	800a950 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	2b02      	cmp	r3, #2
 800a958:	d103      	bne.n	800a962 <xQueueGenericSend+0x72>
 800a95a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a95c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a95e:	2b01      	cmp	r3, #1
 800a960:	d101      	bne.n	800a966 <xQueueGenericSend+0x76>
 800a962:	2301      	movs	r3, #1
 800a964:	e000      	b.n	800a968 <xQueueGenericSend+0x78>
 800a966:	2300      	movs	r3, #0
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d10b      	bne.n	800a984 <xQueueGenericSend+0x94>
	__asm volatile
 800a96c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a970:	f383 8811 	msr	BASEPRI, r3
 800a974:	f3bf 8f6f 	isb	sy
 800a978:	f3bf 8f4f 	dsb	sy
 800a97c:	623b      	str	r3, [r7, #32]
}
 800a97e:	bf00      	nop
 800a980:	bf00      	nop
 800a982:	e7fd      	b.n	800a980 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a984:	f001 fa4a 	bl	800be1c <xTaskGetSchedulerState>
 800a988:	4603      	mov	r3, r0
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d102      	bne.n	800a994 <xQueueGenericSend+0xa4>
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d101      	bne.n	800a998 <xQueueGenericSend+0xa8>
 800a994:	2301      	movs	r3, #1
 800a996:	e000      	b.n	800a99a <xQueueGenericSend+0xaa>
 800a998:	2300      	movs	r3, #0
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d10b      	bne.n	800a9b6 <xQueueGenericSend+0xc6>
	__asm volatile
 800a99e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9a2:	f383 8811 	msr	BASEPRI, r3
 800a9a6:	f3bf 8f6f 	isb	sy
 800a9aa:	f3bf 8f4f 	dsb	sy
 800a9ae:	61fb      	str	r3, [r7, #28]
}
 800a9b0:	bf00      	nop
 800a9b2:	bf00      	nop
 800a9b4:	e7fd      	b.n	800a9b2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a9b6:	f001 ff9f 	bl	800c8f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a9ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a9be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	d302      	bcc.n	800a9cc <xQueueGenericSend+0xdc>
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	2b02      	cmp	r3, #2
 800a9ca:	d129      	bne.n	800aa20 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a9cc:	683a      	ldr	r2, [r7, #0]
 800a9ce:	68b9      	ldr	r1, [r7, #8]
 800a9d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a9d2:	f000 fa33 	bl	800ae3c <prvCopyDataToQueue>
 800a9d6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a9d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d010      	beq.n	800aa02 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a9e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9e2:	3324      	adds	r3, #36	@ 0x24
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f001 f853 	bl	800ba90 <xTaskRemoveFromEventList>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d013      	beq.n	800aa18 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a9f0:	4b3f      	ldr	r3, [pc, #252]	@ (800aaf0 <xQueueGenericSend+0x200>)
 800a9f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a9f6:	601a      	str	r2, [r3, #0]
 800a9f8:	f3bf 8f4f 	dsb	sy
 800a9fc:	f3bf 8f6f 	isb	sy
 800aa00:	e00a      	b.n	800aa18 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800aa02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d007      	beq.n	800aa18 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800aa08:	4b39      	ldr	r3, [pc, #228]	@ (800aaf0 <xQueueGenericSend+0x200>)
 800aa0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa0e:	601a      	str	r2, [r3, #0]
 800aa10:	f3bf 8f4f 	dsb	sy
 800aa14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800aa18:	f001 ffa0 	bl	800c95c <vPortExitCritical>
				return pdPASS;
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	e063      	b.n	800aae8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d103      	bne.n	800aa2e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aa26:	f001 ff99 	bl	800c95c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	e05c      	b.n	800aae8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aa2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d106      	bne.n	800aa42 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aa34:	f107 0314 	add.w	r3, r7, #20
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f001 f88d 	bl	800bb58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aa3e:	2301      	movs	r3, #1
 800aa40:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aa42:	f001 ff8b 	bl	800c95c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aa46:	f000 fdf5 	bl	800b634 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aa4a:	f001 ff55 	bl	800c8f8 <vPortEnterCritical>
 800aa4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aa54:	b25b      	sxtb	r3, r3
 800aa56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa5a:	d103      	bne.n	800aa64 <xQueueGenericSend+0x174>
 800aa5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa5e:	2200      	movs	r2, #0
 800aa60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aa64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa66:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aa6a:	b25b      	sxtb	r3, r3
 800aa6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa70:	d103      	bne.n	800aa7a <xQueueGenericSend+0x18a>
 800aa72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa74:	2200      	movs	r2, #0
 800aa76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aa7a:	f001 ff6f 	bl	800c95c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa7e:	1d3a      	adds	r2, r7, #4
 800aa80:	f107 0314 	add.w	r3, r7, #20
 800aa84:	4611      	mov	r1, r2
 800aa86:	4618      	mov	r0, r3
 800aa88:	f001 f87c 	bl	800bb84 <xTaskCheckForTimeOut>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d124      	bne.n	800aadc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aa92:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aa94:	f000 faca 	bl	800b02c <prvIsQueueFull>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d018      	beq.n	800aad0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800aa9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaa0:	3310      	adds	r3, #16
 800aaa2:	687a      	ldr	r2, [r7, #4]
 800aaa4:	4611      	mov	r1, r2
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f000 ffa0 	bl	800b9ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800aaac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aaae:	f000 fa55 	bl	800af5c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800aab2:	f000 fdcd 	bl	800b650 <xTaskResumeAll>
 800aab6:	4603      	mov	r3, r0
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	f47f af7c 	bne.w	800a9b6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800aabe:	4b0c      	ldr	r3, [pc, #48]	@ (800aaf0 <xQueueGenericSend+0x200>)
 800aac0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aac4:	601a      	str	r2, [r3, #0]
 800aac6:	f3bf 8f4f 	dsb	sy
 800aaca:	f3bf 8f6f 	isb	sy
 800aace:	e772      	b.n	800a9b6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800aad0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aad2:	f000 fa43 	bl	800af5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aad6:	f000 fdbb 	bl	800b650 <xTaskResumeAll>
 800aada:	e76c      	b.n	800a9b6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800aadc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aade:	f000 fa3d 	bl	800af5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aae2:	f000 fdb5 	bl	800b650 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800aae6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3738      	adds	r7, #56	@ 0x38
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}
 800aaf0:	e000ed04 	.word	0xe000ed04

0800aaf4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b090      	sub	sp, #64	@ 0x40
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	60f8      	str	r0, [r7, #12]
 800aafc:	60b9      	str	r1, [r7, #8]
 800aafe:	607a      	str	r2, [r7, #4]
 800ab00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800ab06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d10b      	bne.n	800ab24 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800ab0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab10:	f383 8811 	msr	BASEPRI, r3
 800ab14:	f3bf 8f6f 	isb	sy
 800ab18:	f3bf 8f4f 	dsb	sy
 800ab1c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ab1e:	bf00      	nop
 800ab20:	bf00      	nop
 800ab22:	e7fd      	b.n	800ab20 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d103      	bne.n	800ab32 <xQueueGenericSendFromISR+0x3e>
 800ab2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d101      	bne.n	800ab36 <xQueueGenericSendFromISR+0x42>
 800ab32:	2301      	movs	r3, #1
 800ab34:	e000      	b.n	800ab38 <xQueueGenericSendFromISR+0x44>
 800ab36:	2300      	movs	r3, #0
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d10b      	bne.n	800ab54 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800ab3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab40:	f383 8811 	msr	BASEPRI, r3
 800ab44:	f3bf 8f6f 	isb	sy
 800ab48:	f3bf 8f4f 	dsb	sy
 800ab4c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ab4e:	bf00      	nop
 800ab50:	bf00      	nop
 800ab52:	e7fd      	b.n	800ab50 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	2b02      	cmp	r3, #2
 800ab58:	d103      	bne.n	800ab62 <xQueueGenericSendFromISR+0x6e>
 800ab5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab5e:	2b01      	cmp	r3, #1
 800ab60:	d101      	bne.n	800ab66 <xQueueGenericSendFromISR+0x72>
 800ab62:	2301      	movs	r3, #1
 800ab64:	e000      	b.n	800ab68 <xQueueGenericSendFromISR+0x74>
 800ab66:	2300      	movs	r3, #0
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d10b      	bne.n	800ab84 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800ab6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab70:	f383 8811 	msr	BASEPRI, r3
 800ab74:	f3bf 8f6f 	isb	sy
 800ab78:	f3bf 8f4f 	dsb	sy
 800ab7c:	623b      	str	r3, [r7, #32]
}
 800ab7e:	bf00      	nop
 800ab80:	bf00      	nop
 800ab82:	e7fd      	b.n	800ab80 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ab84:	f001 ff98 	bl	800cab8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ab88:	f3ef 8211 	mrs	r2, BASEPRI
 800ab8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab90:	f383 8811 	msr	BASEPRI, r3
 800ab94:	f3bf 8f6f 	isb	sy
 800ab98:	f3bf 8f4f 	dsb	sy
 800ab9c:	61fa      	str	r2, [r7, #28]
 800ab9e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800aba0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aba2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aba6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abac:	429a      	cmp	r2, r3
 800abae:	d302      	bcc.n	800abb6 <xQueueGenericSendFromISR+0xc2>
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	2b02      	cmp	r3, #2
 800abb4:	d12f      	bne.n	800ac16 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800abb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abb8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800abbc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800abc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800abc6:	683a      	ldr	r2, [r7, #0]
 800abc8:	68b9      	ldr	r1, [r7, #8]
 800abca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800abcc:	f000 f936 	bl	800ae3c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800abd0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800abd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abd8:	d112      	bne.n	800ac00 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800abda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d016      	beq.n	800ac10 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800abe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abe4:	3324      	adds	r3, #36	@ 0x24
 800abe6:	4618      	mov	r0, r3
 800abe8:	f000 ff52 	bl	800ba90 <xTaskRemoveFromEventList>
 800abec:	4603      	mov	r3, r0
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d00e      	beq.n	800ac10 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d00b      	beq.n	800ac10 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2201      	movs	r2, #1
 800abfc:	601a      	str	r2, [r3, #0]
 800abfe:	e007      	b.n	800ac10 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ac00:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800ac04:	3301      	adds	r3, #1
 800ac06:	b2db      	uxtb	r3, r3
 800ac08:	b25a      	sxtb	r2, r3
 800ac0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ac10:	2301      	movs	r3, #1
 800ac12:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800ac14:	e001      	b.n	800ac1a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ac16:	2300      	movs	r3, #0
 800ac18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac1c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ac24:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ac26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3740      	adds	r7, #64	@ 0x40
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}

0800ac30 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b08c      	sub	sp, #48	@ 0x30
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	60f8      	str	r0, [r7, #12]
 800ac38:	60b9      	str	r1, [r7, #8]
 800ac3a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ac44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d10b      	bne.n	800ac62 <xQueueReceive+0x32>
	__asm volatile
 800ac4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac4e:	f383 8811 	msr	BASEPRI, r3
 800ac52:	f3bf 8f6f 	isb	sy
 800ac56:	f3bf 8f4f 	dsb	sy
 800ac5a:	623b      	str	r3, [r7, #32]
}
 800ac5c:	bf00      	nop
 800ac5e:	bf00      	nop
 800ac60:	e7fd      	b.n	800ac5e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d103      	bne.n	800ac70 <xQueueReceive+0x40>
 800ac68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d101      	bne.n	800ac74 <xQueueReceive+0x44>
 800ac70:	2301      	movs	r3, #1
 800ac72:	e000      	b.n	800ac76 <xQueueReceive+0x46>
 800ac74:	2300      	movs	r3, #0
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d10b      	bne.n	800ac92 <xQueueReceive+0x62>
	__asm volatile
 800ac7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac7e:	f383 8811 	msr	BASEPRI, r3
 800ac82:	f3bf 8f6f 	isb	sy
 800ac86:	f3bf 8f4f 	dsb	sy
 800ac8a:	61fb      	str	r3, [r7, #28]
}
 800ac8c:	bf00      	nop
 800ac8e:	bf00      	nop
 800ac90:	e7fd      	b.n	800ac8e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ac92:	f001 f8c3 	bl	800be1c <xTaskGetSchedulerState>
 800ac96:	4603      	mov	r3, r0
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d102      	bne.n	800aca2 <xQueueReceive+0x72>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d101      	bne.n	800aca6 <xQueueReceive+0x76>
 800aca2:	2301      	movs	r3, #1
 800aca4:	e000      	b.n	800aca8 <xQueueReceive+0x78>
 800aca6:	2300      	movs	r3, #0
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d10b      	bne.n	800acc4 <xQueueReceive+0x94>
	__asm volatile
 800acac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acb0:	f383 8811 	msr	BASEPRI, r3
 800acb4:	f3bf 8f6f 	isb	sy
 800acb8:	f3bf 8f4f 	dsb	sy
 800acbc:	61bb      	str	r3, [r7, #24]
}
 800acbe:	bf00      	nop
 800acc0:	bf00      	nop
 800acc2:	e7fd      	b.n	800acc0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800acc4:	f001 fe18 	bl	800c8f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800acc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800accc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800acce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d01f      	beq.n	800ad14 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800acd4:	68b9      	ldr	r1, [r7, #8]
 800acd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800acd8:	f000 f91a 	bl	800af10 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800acdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acde:	1e5a      	subs	r2, r3, #1
 800ace0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ace2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ace4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ace6:	691b      	ldr	r3, [r3, #16]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d00f      	beq.n	800ad0c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800acec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acee:	3310      	adds	r3, #16
 800acf0:	4618      	mov	r0, r3
 800acf2:	f000 fecd 	bl	800ba90 <xTaskRemoveFromEventList>
 800acf6:	4603      	mov	r3, r0
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d007      	beq.n	800ad0c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800acfc:	4b3c      	ldr	r3, [pc, #240]	@ (800adf0 <xQueueReceive+0x1c0>)
 800acfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad02:	601a      	str	r2, [r3, #0]
 800ad04:	f3bf 8f4f 	dsb	sy
 800ad08:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ad0c:	f001 fe26 	bl	800c95c <vPortExitCritical>
				return pdPASS;
 800ad10:	2301      	movs	r3, #1
 800ad12:	e069      	b.n	800ade8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d103      	bne.n	800ad22 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ad1a:	f001 fe1f 	bl	800c95c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	e062      	b.n	800ade8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ad22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d106      	bne.n	800ad36 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ad28:	f107 0310 	add.w	r3, r7, #16
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f000 ff13 	bl	800bb58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ad32:	2301      	movs	r3, #1
 800ad34:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ad36:	f001 fe11 	bl	800c95c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ad3a:	f000 fc7b 	bl	800b634 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ad3e:	f001 fddb 	bl	800c8f8 <vPortEnterCritical>
 800ad42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ad48:	b25b      	sxtb	r3, r3
 800ad4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad4e:	d103      	bne.n	800ad58 <xQueueReceive+0x128>
 800ad50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad52:	2200      	movs	r2, #0
 800ad54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ad58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad5a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ad5e:	b25b      	sxtb	r3, r3
 800ad60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad64:	d103      	bne.n	800ad6e <xQueueReceive+0x13e>
 800ad66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad68:	2200      	movs	r2, #0
 800ad6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ad6e:	f001 fdf5 	bl	800c95c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ad72:	1d3a      	adds	r2, r7, #4
 800ad74:	f107 0310 	add.w	r3, r7, #16
 800ad78:	4611      	mov	r1, r2
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f000 ff02 	bl	800bb84 <xTaskCheckForTimeOut>
 800ad80:	4603      	mov	r3, r0
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d123      	bne.n	800adce <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad88:	f000 f93a 	bl	800b000 <prvIsQueueEmpty>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d017      	beq.n	800adc2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ad92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad94:	3324      	adds	r3, #36	@ 0x24
 800ad96:	687a      	ldr	r2, [r7, #4]
 800ad98:	4611      	mov	r1, r2
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f000 fe26 	bl	800b9ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ada0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ada2:	f000 f8db 	bl	800af5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ada6:	f000 fc53 	bl	800b650 <xTaskResumeAll>
 800adaa:	4603      	mov	r3, r0
 800adac:	2b00      	cmp	r3, #0
 800adae:	d189      	bne.n	800acc4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800adb0:	4b0f      	ldr	r3, [pc, #60]	@ (800adf0 <xQueueReceive+0x1c0>)
 800adb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800adb6:	601a      	str	r2, [r3, #0]
 800adb8:	f3bf 8f4f 	dsb	sy
 800adbc:	f3bf 8f6f 	isb	sy
 800adc0:	e780      	b.n	800acc4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800adc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800adc4:	f000 f8ca 	bl	800af5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800adc8:	f000 fc42 	bl	800b650 <xTaskResumeAll>
 800adcc:	e77a      	b.n	800acc4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800adce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800add0:	f000 f8c4 	bl	800af5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800add4:	f000 fc3c 	bl	800b650 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800add8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800adda:	f000 f911 	bl	800b000 <prvIsQueueEmpty>
 800adde:	4603      	mov	r3, r0
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	f43f af6f 	beq.w	800acc4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ade6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ade8:	4618      	mov	r0, r3
 800adea:	3730      	adds	r7, #48	@ 0x30
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}
 800adf0:	e000ed04 	.word	0xe000ed04

0800adf4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b084      	sub	sp, #16
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d10b      	bne.n	800ae1e <vQueueDelete+0x2a>
	__asm volatile
 800ae06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae0a:	f383 8811 	msr	BASEPRI, r3
 800ae0e:	f3bf 8f6f 	isb	sy
 800ae12:	f3bf 8f4f 	dsb	sy
 800ae16:	60bb      	str	r3, [r7, #8]
}
 800ae18:	bf00      	nop
 800ae1a:	bf00      	nop
 800ae1c:	e7fd      	b.n	800ae1a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ae1e:	68f8      	ldr	r0, [r7, #12]
 800ae20:	f000 f946 	bl	800b0b0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d102      	bne.n	800ae34 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800ae2e:	68f8      	ldr	r0, [r7, #12]
 800ae30:	f001 ff52 	bl	800ccd8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ae34:	bf00      	nop
 800ae36:	3710      	adds	r7, #16
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}

0800ae3c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b086      	sub	sp, #24
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	60f8      	str	r0, [r7, #12]
 800ae44:	60b9      	str	r1, [r7, #8]
 800ae46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae50:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d10d      	bne.n	800ae76 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d14d      	bne.n	800aefe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	689b      	ldr	r3, [r3, #8]
 800ae66:	4618      	mov	r0, r3
 800ae68:	f000 fff6 	bl	800be58 <xTaskPriorityDisinherit>
 800ae6c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2200      	movs	r2, #0
 800ae72:	609a      	str	r2, [r3, #8]
 800ae74:	e043      	b.n	800aefe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d119      	bne.n	800aeb0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	6858      	ldr	r0, [r3, #4]
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae84:	461a      	mov	r2, r3
 800ae86:	68b9      	ldr	r1, [r7, #8]
 800ae88:	f002 f9ce 	bl	800d228 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	685a      	ldr	r2, [r3, #4]
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae94:	441a      	add	r2, r3
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	685a      	ldr	r2, [r3, #4]
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	689b      	ldr	r3, [r3, #8]
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d32b      	bcc.n	800aefe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	681a      	ldr	r2, [r3, #0]
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	605a      	str	r2, [r3, #4]
 800aeae:	e026      	b.n	800aefe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	68d8      	ldr	r0, [r3, #12]
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aeb8:	461a      	mov	r2, r3
 800aeba:	68b9      	ldr	r1, [r7, #8]
 800aebc:	f002 f9b4 	bl	800d228 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	68da      	ldr	r2, [r3, #12]
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aec8:	425b      	negs	r3, r3
 800aeca:	441a      	add	r2, r3
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	68da      	ldr	r2, [r3, #12]
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d207      	bcs.n	800aeec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	689a      	ldr	r2, [r3, #8]
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aee4:	425b      	negs	r3, r3
 800aee6:	441a      	add	r2, r3
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2b02      	cmp	r3, #2
 800aef0:	d105      	bne.n	800aefe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d002      	beq.n	800aefe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800aef8:	693b      	ldr	r3, [r7, #16]
 800aefa:	3b01      	subs	r3, #1
 800aefc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	1c5a      	adds	r2, r3, #1
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800af06:	697b      	ldr	r3, [r7, #20]
}
 800af08:	4618      	mov	r0, r3
 800af0a:	3718      	adds	r7, #24
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}

0800af10 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b082      	sub	sp, #8
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
 800af18:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d018      	beq.n	800af54 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	68da      	ldr	r2, [r3, #12]
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af2a:	441a      	add	r2, r3
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	68da      	ldr	r2, [r3, #12]
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	689b      	ldr	r3, [r3, #8]
 800af38:	429a      	cmp	r2, r3
 800af3a:	d303      	bcc.n	800af44 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681a      	ldr	r2, [r3, #0]
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	68d9      	ldr	r1, [r3, #12]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af4c:	461a      	mov	r2, r3
 800af4e:	6838      	ldr	r0, [r7, #0]
 800af50:	f002 f96a 	bl	800d228 <memcpy>
	}
}
 800af54:	bf00      	nop
 800af56:	3708      	adds	r7, #8
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}

0800af5c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b084      	sub	sp, #16
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800af64:	f001 fcc8 	bl	800c8f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800af6e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800af70:	e011      	b.n	800af96 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af76:	2b00      	cmp	r3, #0
 800af78:	d012      	beq.n	800afa0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	3324      	adds	r3, #36	@ 0x24
 800af7e:	4618      	mov	r0, r3
 800af80:	f000 fd86 	bl	800ba90 <xTaskRemoveFromEventList>
 800af84:	4603      	mov	r3, r0
 800af86:	2b00      	cmp	r3, #0
 800af88:	d001      	beq.n	800af8e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800af8a:	f000 fe5f 	bl	800bc4c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800af8e:	7bfb      	ldrb	r3, [r7, #15]
 800af90:	3b01      	subs	r3, #1
 800af92:	b2db      	uxtb	r3, r3
 800af94:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800af96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	dce9      	bgt.n	800af72 <prvUnlockQueue+0x16>
 800af9e:	e000      	b.n	800afa2 <prvUnlockQueue+0x46>
					break;
 800afa0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	22ff      	movs	r2, #255	@ 0xff
 800afa6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800afaa:	f001 fcd7 	bl	800c95c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800afae:	f001 fca3 	bl	800c8f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800afb8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800afba:	e011      	b.n	800afe0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	691b      	ldr	r3, [r3, #16]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d012      	beq.n	800afea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	3310      	adds	r3, #16
 800afc8:	4618      	mov	r0, r3
 800afca:	f000 fd61 	bl	800ba90 <xTaskRemoveFromEventList>
 800afce:	4603      	mov	r3, r0
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d001      	beq.n	800afd8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800afd4:	f000 fe3a 	bl	800bc4c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800afd8:	7bbb      	ldrb	r3, [r7, #14]
 800afda:	3b01      	subs	r3, #1
 800afdc:	b2db      	uxtb	r3, r3
 800afde:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800afe0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	dce9      	bgt.n	800afbc <prvUnlockQueue+0x60>
 800afe8:	e000      	b.n	800afec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800afea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	22ff      	movs	r2, #255	@ 0xff
 800aff0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800aff4:	f001 fcb2 	bl	800c95c <vPortExitCritical>
}
 800aff8:	bf00      	nop
 800affa:	3710      	adds	r7, #16
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}

0800b000 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b084      	sub	sp, #16
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b008:	f001 fc76 	bl	800c8f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b010:	2b00      	cmp	r3, #0
 800b012:	d102      	bne.n	800b01a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b014:	2301      	movs	r3, #1
 800b016:	60fb      	str	r3, [r7, #12]
 800b018:	e001      	b.n	800b01e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b01a:	2300      	movs	r3, #0
 800b01c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b01e:	f001 fc9d 	bl	800c95c <vPortExitCritical>

	return xReturn;
 800b022:	68fb      	ldr	r3, [r7, #12]
}
 800b024:	4618      	mov	r0, r3
 800b026:	3710      	adds	r7, #16
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}

0800b02c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b084      	sub	sp, #16
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b034:	f001 fc60 	bl	800c8f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b040:	429a      	cmp	r2, r3
 800b042:	d102      	bne.n	800b04a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b044:	2301      	movs	r3, #1
 800b046:	60fb      	str	r3, [r7, #12]
 800b048:	e001      	b.n	800b04e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b04a:	2300      	movs	r3, #0
 800b04c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b04e:	f001 fc85 	bl	800c95c <vPortExitCritical>

	return xReturn;
 800b052:	68fb      	ldr	r3, [r7, #12]
}
 800b054:	4618      	mov	r0, r3
 800b056:	3710      	adds	r7, #16
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b05c:	b480      	push	{r7}
 800b05e:	b085      	sub	sp, #20
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
 800b064:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b066:	2300      	movs	r3, #0
 800b068:	60fb      	str	r3, [r7, #12]
 800b06a:	e014      	b.n	800b096 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b06c:	4a0f      	ldr	r2, [pc, #60]	@ (800b0ac <vQueueAddToRegistry+0x50>)
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d10b      	bne.n	800b090 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b078:	490c      	ldr	r1, [pc, #48]	@ (800b0ac <vQueueAddToRegistry+0x50>)
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	683a      	ldr	r2, [r7, #0]
 800b07e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b082:	4a0a      	ldr	r2, [pc, #40]	@ (800b0ac <vQueueAddToRegistry+0x50>)
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	00db      	lsls	r3, r3, #3
 800b088:	4413      	add	r3, r2
 800b08a:	687a      	ldr	r2, [r7, #4]
 800b08c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b08e:	e006      	b.n	800b09e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	3301      	adds	r3, #1
 800b094:	60fb      	str	r3, [r7, #12]
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	2b07      	cmp	r3, #7
 800b09a:	d9e7      	bls.n	800b06c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b09c:	bf00      	nop
 800b09e:	bf00      	nop
 800b0a0:	3714      	adds	r7, #20
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a8:	4770      	bx	lr
 800b0aa:	bf00      	nop
 800b0ac:	20000ae8 	.word	0x20000ae8

0800b0b0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b0b0:	b480      	push	{r7}
 800b0b2:	b085      	sub	sp, #20
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	60fb      	str	r3, [r7, #12]
 800b0bc:	e016      	b.n	800b0ec <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b0be:	4a10      	ldr	r2, [pc, #64]	@ (800b100 <vQueueUnregisterQueue+0x50>)
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	00db      	lsls	r3, r3, #3
 800b0c4:	4413      	add	r3, r2
 800b0c6:	685b      	ldr	r3, [r3, #4]
 800b0c8:	687a      	ldr	r2, [r7, #4]
 800b0ca:	429a      	cmp	r2, r3
 800b0cc:	d10b      	bne.n	800b0e6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b0ce:	4a0c      	ldr	r2, [pc, #48]	@ (800b100 <vQueueUnregisterQueue+0x50>)
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	2100      	movs	r1, #0
 800b0d4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b0d8:	4a09      	ldr	r2, [pc, #36]	@ (800b100 <vQueueUnregisterQueue+0x50>)
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	00db      	lsls	r3, r3, #3
 800b0de:	4413      	add	r3, r2
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	605a      	str	r2, [r3, #4]
				break;
 800b0e4:	e006      	b.n	800b0f4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	3301      	adds	r3, #1
 800b0ea:	60fb      	str	r3, [r7, #12]
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	2b07      	cmp	r3, #7
 800b0f0:	d9e5      	bls.n	800b0be <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b0f2:	bf00      	nop
 800b0f4:	bf00      	nop
 800b0f6:	3714      	adds	r7, #20
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr
 800b100:	20000ae8 	.word	0x20000ae8

0800b104 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b104:	b580      	push	{r7, lr}
 800b106:	b086      	sub	sp, #24
 800b108:	af00      	add	r7, sp, #0
 800b10a:	60f8      	str	r0, [r7, #12]
 800b10c:	60b9      	str	r1, [r7, #8]
 800b10e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b114:	f001 fbf0 	bl	800c8f8 <vPortEnterCritical>
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b11e:	b25b      	sxtb	r3, r3
 800b120:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b124:	d103      	bne.n	800b12e <vQueueWaitForMessageRestricted+0x2a>
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	2200      	movs	r2, #0
 800b12a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b134:	b25b      	sxtb	r3, r3
 800b136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b13a:	d103      	bne.n	800b144 <vQueueWaitForMessageRestricted+0x40>
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	2200      	movs	r2, #0
 800b140:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b144:	f001 fc0a 	bl	800c95c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b148:	697b      	ldr	r3, [r7, #20]
 800b14a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d106      	bne.n	800b15e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	3324      	adds	r3, #36	@ 0x24
 800b154:	687a      	ldr	r2, [r7, #4]
 800b156:	68b9      	ldr	r1, [r7, #8]
 800b158:	4618      	mov	r0, r3
 800b15a:	f000 fc6d 	bl	800ba38 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b15e:	6978      	ldr	r0, [r7, #20]
 800b160:	f7ff fefc 	bl	800af5c <prvUnlockQueue>
	}
 800b164:	bf00      	nop
 800b166:	3718      	adds	r7, #24
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}

0800b16c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b08e      	sub	sp, #56	@ 0x38
 800b170:	af04      	add	r7, sp, #16
 800b172:	60f8      	str	r0, [r7, #12]
 800b174:	60b9      	str	r1, [r7, #8]
 800b176:	607a      	str	r2, [r7, #4]
 800b178:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b17a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d10b      	bne.n	800b198 <xTaskCreateStatic+0x2c>
	__asm volatile
 800b180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b184:	f383 8811 	msr	BASEPRI, r3
 800b188:	f3bf 8f6f 	isb	sy
 800b18c:	f3bf 8f4f 	dsb	sy
 800b190:	623b      	str	r3, [r7, #32]
}
 800b192:	bf00      	nop
 800b194:	bf00      	nop
 800b196:	e7fd      	b.n	800b194 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d10b      	bne.n	800b1b6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800b19e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1a2:	f383 8811 	msr	BASEPRI, r3
 800b1a6:	f3bf 8f6f 	isb	sy
 800b1aa:	f3bf 8f4f 	dsb	sy
 800b1ae:	61fb      	str	r3, [r7, #28]
}
 800b1b0:	bf00      	nop
 800b1b2:	bf00      	nop
 800b1b4:	e7fd      	b.n	800b1b2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b1b6:	23a8      	movs	r3, #168	@ 0xa8
 800b1b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b1ba:	693b      	ldr	r3, [r7, #16]
 800b1bc:	2ba8      	cmp	r3, #168	@ 0xa8
 800b1be:	d00b      	beq.n	800b1d8 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b1c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1c4:	f383 8811 	msr	BASEPRI, r3
 800b1c8:	f3bf 8f6f 	isb	sy
 800b1cc:	f3bf 8f4f 	dsb	sy
 800b1d0:	61bb      	str	r3, [r7, #24]
}
 800b1d2:	bf00      	nop
 800b1d4:	bf00      	nop
 800b1d6:	e7fd      	b.n	800b1d4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b1d8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b1da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d01e      	beq.n	800b21e <xTaskCreateStatic+0xb2>
 800b1e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d01b      	beq.n	800b21e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b1e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1e8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b1ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b1ee:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b1f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1f2:	2202      	movs	r2, #2
 800b1f4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	9303      	str	r3, [sp, #12]
 800b1fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1fe:	9302      	str	r3, [sp, #8]
 800b200:	f107 0314 	add.w	r3, r7, #20
 800b204:	9301      	str	r3, [sp, #4]
 800b206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b208:	9300      	str	r3, [sp, #0]
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	687a      	ldr	r2, [r7, #4]
 800b20e:	68b9      	ldr	r1, [r7, #8]
 800b210:	68f8      	ldr	r0, [r7, #12]
 800b212:	f000 f851 	bl	800b2b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b216:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b218:	f000 f8f6 	bl	800b408 <prvAddNewTaskToReadyList>
 800b21c:	e001      	b.n	800b222 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b21e:	2300      	movs	r3, #0
 800b220:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b222:	697b      	ldr	r3, [r7, #20]
	}
 800b224:	4618      	mov	r0, r3
 800b226:	3728      	adds	r7, #40	@ 0x28
 800b228:	46bd      	mov	sp, r7
 800b22a:	bd80      	pop	{r7, pc}

0800b22c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b08c      	sub	sp, #48	@ 0x30
 800b230:	af04      	add	r7, sp, #16
 800b232:	60f8      	str	r0, [r7, #12]
 800b234:	60b9      	str	r1, [r7, #8]
 800b236:	603b      	str	r3, [r7, #0]
 800b238:	4613      	mov	r3, r2
 800b23a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b23c:	88fb      	ldrh	r3, [r7, #6]
 800b23e:	009b      	lsls	r3, r3, #2
 800b240:	4618      	mov	r0, r3
 800b242:	f001 fc7b 	bl	800cb3c <pvPortMalloc>
 800b246:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b248:	697b      	ldr	r3, [r7, #20]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d00e      	beq.n	800b26c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b24e:	20a8      	movs	r0, #168	@ 0xa8
 800b250:	f001 fc74 	bl	800cb3c <pvPortMalloc>
 800b254:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b256:	69fb      	ldr	r3, [r7, #28]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d003      	beq.n	800b264 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b25c:	69fb      	ldr	r3, [r7, #28]
 800b25e:	697a      	ldr	r2, [r7, #20]
 800b260:	631a      	str	r2, [r3, #48]	@ 0x30
 800b262:	e005      	b.n	800b270 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b264:	6978      	ldr	r0, [r7, #20]
 800b266:	f001 fd37 	bl	800ccd8 <vPortFree>
 800b26a:	e001      	b.n	800b270 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b26c:	2300      	movs	r3, #0
 800b26e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b270:	69fb      	ldr	r3, [r7, #28]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d017      	beq.n	800b2a6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b276:	69fb      	ldr	r3, [r7, #28]
 800b278:	2200      	movs	r2, #0
 800b27a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b27e:	88fa      	ldrh	r2, [r7, #6]
 800b280:	2300      	movs	r3, #0
 800b282:	9303      	str	r3, [sp, #12]
 800b284:	69fb      	ldr	r3, [r7, #28]
 800b286:	9302      	str	r3, [sp, #8]
 800b288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b28a:	9301      	str	r3, [sp, #4]
 800b28c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b28e:	9300      	str	r3, [sp, #0]
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	68b9      	ldr	r1, [r7, #8]
 800b294:	68f8      	ldr	r0, [r7, #12]
 800b296:	f000 f80f 	bl	800b2b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b29a:	69f8      	ldr	r0, [r7, #28]
 800b29c:	f000 f8b4 	bl	800b408 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	61bb      	str	r3, [r7, #24]
 800b2a4:	e002      	b.n	800b2ac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b2a6:	f04f 33ff 	mov.w	r3, #4294967295
 800b2aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b2ac:	69bb      	ldr	r3, [r7, #24]
	}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3720      	adds	r7, #32
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}
	...

0800b2b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b088      	sub	sp, #32
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	60f8      	str	r0, [r7, #12]
 800b2c0:	60b9      	str	r1, [r7, #8]
 800b2c2:	607a      	str	r2, [r7, #4]
 800b2c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b2c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2c8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	009b      	lsls	r3, r3, #2
 800b2ce:	461a      	mov	r2, r3
 800b2d0:	21a5      	movs	r1, #165	@ 0xa5
 800b2d2:	f001 ff0f 	bl	800d0f4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b2d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b2e0:	3b01      	subs	r3, #1
 800b2e2:	009b      	lsls	r3, r3, #2
 800b2e4:	4413      	add	r3, r2
 800b2e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b2e8:	69bb      	ldr	r3, [r7, #24]
 800b2ea:	f023 0307 	bic.w	r3, r3, #7
 800b2ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b2f0:	69bb      	ldr	r3, [r7, #24]
 800b2f2:	f003 0307 	and.w	r3, r3, #7
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d00b      	beq.n	800b312 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b2fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2fe:	f383 8811 	msr	BASEPRI, r3
 800b302:	f3bf 8f6f 	isb	sy
 800b306:	f3bf 8f4f 	dsb	sy
 800b30a:	617b      	str	r3, [r7, #20]
}
 800b30c:	bf00      	nop
 800b30e:	bf00      	nop
 800b310:	e7fd      	b.n	800b30e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d01f      	beq.n	800b358 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b318:	2300      	movs	r3, #0
 800b31a:	61fb      	str	r3, [r7, #28]
 800b31c:	e012      	b.n	800b344 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b31e:	68ba      	ldr	r2, [r7, #8]
 800b320:	69fb      	ldr	r3, [r7, #28]
 800b322:	4413      	add	r3, r2
 800b324:	7819      	ldrb	r1, [r3, #0]
 800b326:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b328:	69fb      	ldr	r3, [r7, #28]
 800b32a:	4413      	add	r3, r2
 800b32c:	3334      	adds	r3, #52	@ 0x34
 800b32e:	460a      	mov	r2, r1
 800b330:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b332:	68ba      	ldr	r2, [r7, #8]
 800b334:	69fb      	ldr	r3, [r7, #28]
 800b336:	4413      	add	r3, r2
 800b338:	781b      	ldrb	r3, [r3, #0]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d006      	beq.n	800b34c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b33e:	69fb      	ldr	r3, [r7, #28]
 800b340:	3301      	adds	r3, #1
 800b342:	61fb      	str	r3, [r7, #28]
 800b344:	69fb      	ldr	r3, [r7, #28]
 800b346:	2b0f      	cmp	r3, #15
 800b348:	d9e9      	bls.n	800b31e <prvInitialiseNewTask+0x66>
 800b34a:	e000      	b.n	800b34e <prvInitialiseNewTask+0x96>
			{
				break;
 800b34c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b34e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b350:	2200      	movs	r2, #0
 800b352:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b356:	e003      	b.n	800b360 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b35a:	2200      	movs	r2, #0
 800b35c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b362:	2b37      	cmp	r3, #55	@ 0x37
 800b364:	d901      	bls.n	800b36a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b366:	2337      	movs	r3, #55	@ 0x37
 800b368:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b36a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b36c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b36e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b372:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b374:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b378:	2200      	movs	r2, #0
 800b37a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b37c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b37e:	3304      	adds	r3, #4
 800b380:	4618      	mov	r0, r3
 800b382:	f7ff f86d 	bl	800a460 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b388:	3318      	adds	r3, #24
 800b38a:	4618      	mov	r0, r3
 800b38c:	f7ff f868 	bl	800a460 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b392:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b394:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b398:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b39c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b39e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b3a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b3a4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b3a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b3ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b3b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3b8:	3354      	adds	r3, #84	@ 0x54
 800b3ba:	224c      	movs	r2, #76	@ 0x4c
 800b3bc:	2100      	movs	r1, #0
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f001 fe98 	bl	800d0f4 <memset>
 800b3c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3c6:	4a0d      	ldr	r2, [pc, #52]	@ (800b3fc <prvInitialiseNewTask+0x144>)
 800b3c8:	659a      	str	r2, [r3, #88]	@ 0x58
 800b3ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3cc:	4a0c      	ldr	r2, [pc, #48]	@ (800b400 <prvInitialiseNewTask+0x148>)
 800b3ce:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b3d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3d2:	4a0c      	ldr	r2, [pc, #48]	@ (800b404 <prvInitialiseNewTask+0x14c>)
 800b3d4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b3d6:	683a      	ldr	r2, [r7, #0]
 800b3d8:	68f9      	ldr	r1, [r7, #12]
 800b3da:	69b8      	ldr	r0, [r7, #24]
 800b3dc:	f001 f95a 	bl	800c694 <pxPortInitialiseStack>
 800b3e0:	4602      	mov	r2, r0
 800b3e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b3e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d002      	beq.n	800b3f2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b3ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b3f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b3f2:	bf00      	nop
 800b3f4:	3720      	adds	r7, #32
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}
 800b3fa:	bf00      	nop
 800b3fc:	200028f4 	.word	0x200028f4
 800b400:	2000295c 	.word	0x2000295c
 800b404:	200029c4 	.word	0x200029c4

0800b408 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b082      	sub	sp, #8
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b410:	f001 fa72 	bl	800c8f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b414:	4b2d      	ldr	r3, [pc, #180]	@ (800b4cc <prvAddNewTaskToReadyList+0xc4>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	3301      	adds	r3, #1
 800b41a:	4a2c      	ldr	r2, [pc, #176]	@ (800b4cc <prvAddNewTaskToReadyList+0xc4>)
 800b41c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b41e:	4b2c      	ldr	r3, [pc, #176]	@ (800b4d0 <prvAddNewTaskToReadyList+0xc8>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d109      	bne.n	800b43a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b426:	4a2a      	ldr	r2, [pc, #168]	@ (800b4d0 <prvAddNewTaskToReadyList+0xc8>)
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b42c:	4b27      	ldr	r3, [pc, #156]	@ (800b4cc <prvAddNewTaskToReadyList+0xc4>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	2b01      	cmp	r3, #1
 800b432:	d110      	bne.n	800b456 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b434:	f000 fc2e 	bl	800bc94 <prvInitialiseTaskLists>
 800b438:	e00d      	b.n	800b456 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b43a:	4b26      	ldr	r3, [pc, #152]	@ (800b4d4 <prvAddNewTaskToReadyList+0xcc>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d109      	bne.n	800b456 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b442:	4b23      	ldr	r3, [pc, #140]	@ (800b4d0 <prvAddNewTaskToReadyList+0xc8>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b44c:	429a      	cmp	r2, r3
 800b44e:	d802      	bhi.n	800b456 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b450:	4a1f      	ldr	r2, [pc, #124]	@ (800b4d0 <prvAddNewTaskToReadyList+0xc8>)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b456:	4b20      	ldr	r3, [pc, #128]	@ (800b4d8 <prvAddNewTaskToReadyList+0xd0>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	3301      	adds	r3, #1
 800b45c:	4a1e      	ldr	r2, [pc, #120]	@ (800b4d8 <prvAddNewTaskToReadyList+0xd0>)
 800b45e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b460:	4b1d      	ldr	r3, [pc, #116]	@ (800b4d8 <prvAddNewTaskToReadyList+0xd0>)
 800b462:	681a      	ldr	r2, [r3, #0]
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b46c:	4b1b      	ldr	r3, [pc, #108]	@ (800b4dc <prvAddNewTaskToReadyList+0xd4>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	429a      	cmp	r2, r3
 800b472:	d903      	bls.n	800b47c <prvAddNewTaskToReadyList+0x74>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b478:	4a18      	ldr	r2, [pc, #96]	@ (800b4dc <prvAddNewTaskToReadyList+0xd4>)
 800b47a:	6013      	str	r3, [r2, #0]
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b480:	4613      	mov	r3, r2
 800b482:	009b      	lsls	r3, r3, #2
 800b484:	4413      	add	r3, r2
 800b486:	009b      	lsls	r3, r3, #2
 800b488:	4a15      	ldr	r2, [pc, #84]	@ (800b4e0 <prvAddNewTaskToReadyList+0xd8>)
 800b48a:	441a      	add	r2, r3
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	3304      	adds	r3, #4
 800b490:	4619      	mov	r1, r3
 800b492:	4610      	mov	r0, r2
 800b494:	f7fe fff1 	bl	800a47a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b498:	f001 fa60 	bl	800c95c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b49c:	4b0d      	ldr	r3, [pc, #52]	@ (800b4d4 <prvAddNewTaskToReadyList+0xcc>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d00e      	beq.n	800b4c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b4a4:	4b0a      	ldr	r3, [pc, #40]	@ (800b4d0 <prvAddNewTaskToReadyList+0xc8>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4ae:	429a      	cmp	r2, r3
 800b4b0:	d207      	bcs.n	800b4c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b4b2:	4b0c      	ldr	r3, [pc, #48]	@ (800b4e4 <prvAddNewTaskToReadyList+0xdc>)
 800b4b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4b8:	601a      	str	r2, [r3, #0]
 800b4ba:	f3bf 8f4f 	dsb	sy
 800b4be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b4c2:	bf00      	nop
 800b4c4:	3708      	adds	r7, #8
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}
 800b4ca:	bf00      	nop
 800b4cc:	20000ffc 	.word	0x20000ffc
 800b4d0:	20000b28 	.word	0x20000b28
 800b4d4:	20001008 	.word	0x20001008
 800b4d8:	20001018 	.word	0x20001018
 800b4dc:	20001004 	.word	0x20001004
 800b4e0:	20000b2c 	.word	0x20000b2c
 800b4e4:	e000ed04 	.word	0xe000ed04

0800b4e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b084      	sub	sp, #16
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d018      	beq.n	800b52c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b4fa:	4b14      	ldr	r3, [pc, #80]	@ (800b54c <vTaskDelay+0x64>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d00b      	beq.n	800b51a <vTaskDelay+0x32>
	__asm volatile
 800b502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b506:	f383 8811 	msr	BASEPRI, r3
 800b50a:	f3bf 8f6f 	isb	sy
 800b50e:	f3bf 8f4f 	dsb	sy
 800b512:	60bb      	str	r3, [r7, #8]
}
 800b514:	bf00      	nop
 800b516:	bf00      	nop
 800b518:	e7fd      	b.n	800b516 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b51a:	f000 f88b 	bl	800b634 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b51e:	2100      	movs	r1, #0
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f000 fd09 	bl	800bf38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b526:	f000 f893 	bl	800b650 <xTaskResumeAll>
 800b52a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d107      	bne.n	800b542 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b532:	4b07      	ldr	r3, [pc, #28]	@ (800b550 <vTaskDelay+0x68>)
 800b534:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b538:	601a      	str	r2, [r3, #0]
 800b53a:	f3bf 8f4f 	dsb	sy
 800b53e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b542:	bf00      	nop
 800b544:	3710      	adds	r7, #16
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}
 800b54a:	bf00      	nop
 800b54c:	20001024 	.word	0x20001024
 800b550:	e000ed04 	.word	0xe000ed04

0800b554 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b08a      	sub	sp, #40	@ 0x28
 800b558:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b55a:	2300      	movs	r3, #0
 800b55c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b55e:	2300      	movs	r3, #0
 800b560:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b562:	463a      	mov	r2, r7
 800b564:	1d39      	adds	r1, r7, #4
 800b566:	f107 0308 	add.w	r3, r7, #8
 800b56a:	4618      	mov	r0, r3
 800b56c:	f7fe ff24 	bl	800a3b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b570:	6839      	ldr	r1, [r7, #0]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	68ba      	ldr	r2, [r7, #8]
 800b576:	9202      	str	r2, [sp, #8]
 800b578:	9301      	str	r3, [sp, #4]
 800b57a:	2300      	movs	r3, #0
 800b57c:	9300      	str	r3, [sp, #0]
 800b57e:	2300      	movs	r3, #0
 800b580:	460a      	mov	r2, r1
 800b582:	4924      	ldr	r1, [pc, #144]	@ (800b614 <vTaskStartScheduler+0xc0>)
 800b584:	4824      	ldr	r0, [pc, #144]	@ (800b618 <vTaskStartScheduler+0xc4>)
 800b586:	f7ff fdf1 	bl	800b16c <xTaskCreateStatic>
 800b58a:	4603      	mov	r3, r0
 800b58c:	4a23      	ldr	r2, [pc, #140]	@ (800b61c <vTaskStartScheduler+0xc8>)
 800b58e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b590:	4b22      	ldr	r3, [pc, #136]	@ (800b61c <vTaskStartScheduler+0xc8>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d002      	beq.n	800b59e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b598:	2301      	movs	r3, #1
 800b59a:	617b      	str	r3, [r7, #20]
 800b59c:	e001      	b.n	800b5a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	2b01      	cmp	r3, #1
 800b5a6:	d102      	bne.n	800b5ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b5a8:	f000 fd1a 	bl	800bfe0 <xTimerCreateTimerTask>
 800b5ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b5ae:	697b      	ldr	r3, [r7, #20]
 800b5b0:	2b01      	cmp	r3, #1
 800b5b2:	d11b      	bne.n	800b5ec <vTaskStartScheduler+0x98>
	__asm volatile
 800b5b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5b8:	f383 8811 	msr	BASEPRI, r3
 800b5bc:	f3bf 8f6f 	isb	sy
 800b5c0:	f3bf 8f4f 	dsb	sy
 800b5c4:	613b      	str	r3, [r7, #16]
}
 800b5c6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b5c8:	4b15      	ldr	r3, [pc, #84]	@ (800b620 <vTaskStartScheduler+0xcc>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	3354      	adds	r3, #84	@ 0x54
 800b5ce:	4a15      	ldr	r2, [pc, #84]	@ (800b624 <vTaskStartScheduler+0xd0>)
 800b5d0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b5d2:	4b15      	ldr	r3, [pc, #84]	@ (800b628 <vTaskStartScheduler+0xd4>)
 800b5d4:	f04f 32ff 	mov.w	r2, #4294967295
 800b5d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b5da:	4b14      	ldr	r3, [pc, #80]	@ (800b62c <vTaskStartScheduler+0xd8>)
 800b5dc:	2201      	movs	r2, #1
 800b5de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b5e0:	4b13      	ldr	r3, [pc, #76]	@ (800b630 <vTaskStartScheduler+0xdc>)
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b5e6:	f001 f8e3 	bl	800c7b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b5ea:	e00f      	b.n	800b60c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5f2:	d10b      	bne.n	800b60c <vTaskStartScheduler+0xb8>
	__asm volatile
 800b5f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5f8:	f383 8811 	msr	BASEPRI, r3
 800b5fc:	f3bf 8f6f 	isb	sy
 800b600:	f3bf 8f4f 	dsb	sy
 800b604:	60fb      	str	r3, [r7, #12]
}
 800b606:	bf00      	nop
 800b608:	bf00      	nop
 800b60a:	e7fd      	b.n	800b608 <vTaskStartScheduler+0xb4>
}
 800b60c:	bf00      	nop
 800b60e:	3718      	adds	r7, #24
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}
 800b614:	0800da18 	.word	0x0800da18
 800b618:	0800bc65 	.word	0x0800bc65
 800b61c:	20001020 	.word	0x20001020
 800b620:	20000b28 	.word	0x20000b28
 800b624:	20000010 	.word	0x20000010
 800b628:	2000101c 	.word	0x2000101c
 800b62c:	20001008 	.word	0x20001008
 800b630:	20001000 	.word	0x20001000

0800b634 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b634:	b480      	push	{r7}
 800b636:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b638:	4b04      	ldr	r3, [pc, #16]	@ (800b64c <vTaskSuspendAll+0x18>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	3301      	adds	r3, #1
 800b63e:	4a03      	ldr	r2, [pc, #12]	@ (800b64c <vTaskSuspendAll+0x18>)
 800b640:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b642:	bf00      	nop
 800b644:	46bd      	mov	sp, r7
 800b646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64a:	4770      	bx	lr
 800b64c:	20001024 	.word	0x20001024

0800b650 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b084      	sub	sp, #16
 800b654:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b656:	2300      	movs	r3, #0
 800b658:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b65a:	2300      	movs	r3, #0
 800b65c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b65e:	4b42      	ldr	r3, [pc, #264]	@ (800b768 <xTaskResumeAll+0x118>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d10b      	bne.n	800b67e <xTaskResumeAll+0x2e>
	__asm volatile
 800b666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b66a:	f383 8811 	msr	BASEPRI, r3
 800b66e:	f3bf 8f6f 	isb	sy
 800b672:	f3bf 8f4f 	dsb	sy
 800b676:	603b      	str	r3, [r7, #0]
}
 800b678:	bf00      	nop
 800b67a:	bf00      	nop
 800b67c:	e7fd      	b.n	800b67a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b67e:	f001 f93b 	bl	800c8f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b682:	4b39      	ldr	r3, [pc, #228]	@ (800b768 <xTaskResumeAll+0x118>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	3b01      	subs	r3, #1
 800b688:	4a37      	ldr	r2, [pc, #220]	@ (800b768 <xTaskResumeAll+0x118>)
 800b68a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b68c:	4b36      	ldr	r3, [pc, #216]	@ (800b768 <xTaskResumeAll+0x118>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d162      	bne.n	800b75a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b694:	4b35      	ldr	r3, [pc, #212]	@ (800b76c <xTaskResumeAll+0x11c>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d05e      	beq.n	800b75a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b69c:	e02f      	b.n	800b6fe <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b69e:	4b34      	ldr	r3, [pc, #208]	@ (800b770 <xTaskResumeAll+0x120>)
 800b6a0:	68db      	ldr	r3, [r3, #12]
 800b6a2:	68db      	ldr	r3, [r3, #12]
 800b6a4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	3318      	adds	r3, #24
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f7fe ff42 	bl	800a534 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	3304      	adds	r3, #4
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	f7fe ff3d 	bl	800a534 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6be:	4b2d      	ldr	r3, [pc, #180]	@ (800b774 <xTaskResumeAll+0x124>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	429a      	cmp	r2, r3
 800b6c4:	d903      	bls.n	800b6ce <xTaskResumeAll+0x7e>
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6ca:	4a2a      	ldr	r2, [pc, #168]	@ (800b774 <xTaskResumeAll+0x124>)
 800b6cc:	6013      	str	r3, [r2, #0]
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6d2:	4613      	mov	r3, r2
 800b6d4:	009b      	lsls	r3, r3, #2
 800b6d6:	4413      	add	r3, r2
 800b6d8:	009b      	lsls	r3, r3, #2
 800b6da:	4a27      	ldr	r2, [pc, #156]	@ (800b778 <xTaskResumeAll+0x128>)
 800b6dc:	441a      	add	r2, r3
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	3304      	adds	r3, #4
 800b6e2:	4619      	mov	r1, r3
 800b6e4:	4610      	mov	r0, r2
 800b6e6:	f7fe fec8 	bl	800a47a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6ee:	4b23      	ldr	r3, [pc, #140]	@ (800b77c <xTaskResumeAll+0x12c>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d302      	bcc.n	800b6fe <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b6f8:	4b21      	ldr	r3, [pc, #132]	@ (800b780 <xTaskResumeAll+0x130>)
 800b6fa:	2201      	movs	r2, #1
 800b6fc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b6fe:	4b1c      	ldr	r3, [pc, #112]	@ (800b770 <xTaskResumeAll+0x120>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d1cb      	bne.n	800b69e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d001      	beq.n	800b710 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b70c:	f000 fb66 	bl	800bddc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b710:	4b1c      	ldr	r3, [pc, #112]	@ (800b784 <xTaskResumeAll+0x134>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d010      	beq.n	800b73e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b71c:	f000 f846 	bl	800b7ac <xTaskIncrementTick>
 800b720:	4603      	mov	r3, r0
 800b722:	2b00      	cmp	r3, #0
 800b724:	d002      	beq.n	800b72c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b726:	4b16      	ldr	r3, [pc, #88]	@ (800b780 <xTaskResumeAll+0x130>)
 800b728:	2201      	movs	r2, #1
 800b72a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	3b01      	subs	r3, #1
 800b730:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d1f1      	bne.n	800b71c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b738:	4b12      	ldr	r3, [pc, #72]	@ (800b784 <xTaskResumeAll+0x134>)
 800b73a:	2200      	movs	r2, #0
 800b73c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b73e:	4b10      	ldr	r3, [pc, #64]	@ (800b780 <xTaskResumeAll+0x130>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d009      	beq.n	800b75a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b746:	2301      	movs	r3, #1
 800b748:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b74a:	4b0f      	ldr	r3, [pc, #60]	@ (800b788 <xTaskResumeAll+0x138>)
 800b74c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b750:	601a      	str	r2, [r3, #0]
 800b752:	f3bf 8f4f 	dsb	sy
 800b756:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b75a:	f001 f8ff 	bl	800c95c <vPortExitCritical>

	return xAlreadyYielded;
 800b75e:	68bb      	ldr	r3, [r7, #8]
}
 800b760:	4618      	mov	r0, r3
 800b762:	3710      	adds	r7, #16
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}
 800b768:	20001024 	.word	0x20001024
 800b76c:	20000ffc 	.word	0x20000ffc
 800b770:	20000fbc 	.word	0x20000fbc
 800b774:	20001004 	.word	0x20001004
 800b778:	20000b2c 	.word	0x20000b2c
 800b77c:	20000b28 	.word	0x20000b28
 800b780:	20001010 	.word	0x20001010
 800b784:	2000100c 	.word	0x2000100c
 800b788:	e000ed04 	.word	0xe000ed04

0800b78c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b78c:	b480      	push	{r7}
 800b78e:	b083      	sub	sp, #12
 800b790:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b792:	4b05      	ldr	r3, [pc, #20]	@ (800b7a8 <xTaskGetTickCount+0x1c>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b798:	687b      	ldr	r3, [r7, #4]
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	370c      	adds	r7, #12
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a4:	4770      	bx	lr
 800b7a6:	bf00      	nop
 800b7a8:	20001000 	.word	0x20001000

0800b7ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b086      	sub	sp, #24
 800b7b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b7b6:	4b4f      	ldr	r3, [pc, #316]	@ (800b8f4 <xTaskIncrementTick+0x148>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	f040 8090 	bne.w	800b8e0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b7c0:	4b4d      	ldr	r3, [pc, #308]	@ (800b8f8 <xTaskIncrementTick+0x14c>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	3301      	adds	r3, #1
 800b7c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b7c8:	4a4b      	ldr	r2, [pc, #300]	@ (800b8f8 <xTaskIncrementTick+0x14c>)
 800b7ca:	693b      	ldr	r3, [r7, #16]
 800b7cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b7ce:	693b      	ldr	r3, [r7, #16]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d121      	bne.n	800b818 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b7d4:	4b49      	ldr	r3, [pc, #292]	@ (800b8fc <xTaskIncrementTick+0x150>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d00b      	beq.n	800b7f6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b7de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7e2:	f383 8811 	msr	BASEPRI, r3
 800b7e6:	f3bf 8f6f 	isb	sy
 800b7ea:	f3bf 8f4f 	dsb	sy
 800b7ee:	603b      	str	r3, [r7, #0]
}
 800b7f0:	bf00      	nop
 800b7f2:	bf00      	nop
 800b7f4:	e7fd      	b.n	800b7f2 <xTaskIncrementTick+0x46>
 800b7f6:	4b41      	ldr	r3, [pc, #260]	@ (800b8fc <xTaskIncrementTick+0x150>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	60fb      	str	r3, [r7, #12]
 800b7fc:	4b40      	ldr	r3, [pc, #256]	@ (800b900 <xTaskIncrementTick+0x154>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	4a3e      	ldr	r2, [pc, #248]	@ (800b8fc <xTaskIncrementTick+0x150>)
 800b802:	6013      	str	r3, [r2, #0]
 800b804:	4a3e      	ldr	r2, [pc, #248]	@ (800b900 <xTaskIncrementTick+0x154>)
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	6013      	str	r3, [r2, #0]
 800b80a:	4b3e      	ldr	r3, [pc, #248]	@ (800b904 <xTaskIncrementTick+0x158>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	3301      	adds	r3, #1
 800b810:	4a3c      	ldr	r2, [pc, #240]	@ (800b904 <xTaskIncrementTick+0x158>)
 800b812:	6013      	str	r3, [r2, #0]
 800b814:	f000 fae2 	bl	800bddc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b818:	4b3b      	ldr	r3, [pc, #236]	@ (800b908 <xTaskIncrementTick+0x15c>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	693a      	ldr	r2, [r7, #16]
 800b81e:	429a      	cmp	r2, r3
 800b820:	d349      	bcc.n	800b8b6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b822:	4b36      	ldr	r3, [pc, #216]	@ (800b8fc <xTaskIncrementTick+0x150>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d104      	bne.n	800b836 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b82c:	4b36      	ldr	r3, [pc, #216]	@ (800b908 <xTaskIncrementTick+0x15c>)
 800b82e:	f04f 32ff 	mov.w	r2, #4294967295
 800b832:	601a      	str	r2, [r3, #0]
					break;
 800b834:	e03f      	b.n	800b8b6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b836:	4b31      	ldr	r3, [pc, #196]	@ (800b8fc <xTaskIncrementTick+0x150>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	68db      	ldr	r3, [r3, #12]
 800b83c:	68db      	ldr	r3, [r3, #12]
 800b83e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	685b      	ldr	r3, [r3, #4]
 800b844:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b846:	693a      	ldr	r2, [r7, #16]
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	429a      	cmp	r2, r3
 800b84c:	d203      	bcs.n	800b856 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b84e:	4a2e      	ldr	r2, [pc, #184]	@ (800b908 <xTaskIncrementTick+0x15c>)
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b854:	e02f      	b.n	800b8b6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	3304      	adds	r3, #4
 800b85a:	4618      	mov	r0, r3
 800b85c:	f7fe fe6a 	bl	800a534 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b864:	2b00      	cmp	r3, #0
 800b866:	d004      	beq.n	800b872 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	3318      	adds	r3, #24
 800b86c:	4618      	mov	r0, r3
 800b86e:	f7fe fe61 	bl	800a534 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b872:	68bb      	ldr	r3, [r7, #8]
 800b874:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b876:	4b25      	ldr	r3, [pc, #148]	@ (800b90c <xTaskIncrementTick+0x160>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	429a      	cmp	r2, r3
 800b87c:	d903      	bls.n	800b886 <xTaskIncrementTick+0xda>
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b882:	4a22      	ldr	r2, [pc, #136]	@ (800b90c <xTaskIncrementTick+0x160>)
 800b884:	6013      	str	r3, [r2, #0]
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b88a:	4613      	mov	r3, r2
 800b88c:	009b      	lsls	r3, r3, #2
 800b88e:	4413      	add	r3, r2
 800b890:	009b      	lsls	r3, r3, #2
 800b892:	4a1f      	ldr	r2, [pc, #124]	@ (800b910 <xTaskIncrementTick+0x164>)
 800b894:	441a      	add	r2, r3
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	3304      	adds	r3, #4
 800b89a:	4619      	mov	r1, r3
 800b89c:	4610      	mov	r0, r2
 800b89e:	f7fe fdec 	bl	800a47a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b8a2:	68bb      	ldr	r3, [r7, #8]
 800b8a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8a6:	4b1b      	ldr	r3, [pc, #108]	@ (800b914 <xTaskIncrementTick+0x168>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8ac:	429a      	cmp	r2, r3
 800b8ae:	d3b8      	bcc.n	800b822 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b8b0:	2301      	movs	r3, #1
 800b8b2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b8b4:	e7b5      	b.n	800b822 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b8b6:	4b17      	ldr	r3, [pc, #92]	@ (800b914 <xTaskIncrementTick+0x168>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8bc:	4914      	ldr	r1, [pc, #80]	@ (800b910 <xTaskIncrementTick+0x164>)
 800b8be:	4613      	mov	r3, r2
 800b8c0:	009b      	lsls	r3, r3, #2
 800b8c2:	4413      	add	r3, r2
 800b8c4:	009b      	lsls	r3, r3, #2
 800b8c6:	440b      	add	r3, r1
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	2b01      	cmp	r3, #1
 800b8cc:	d901      	bls.n	800b8d2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b8d2:	4b11      	ldr	r3, [pc, #68]	@ (800b918 <xTaskIncrementTick+0x16c>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d007      	beq.n	800b8ea <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b8da:	2301      	movs	r3, #1
 800b8dc:	617b      	str	r3, [r7, #20]
 800b8de:	e004      	b.n	800b8ea <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b8e0:	4b0e      	ldr	r3, [pc, #56]	@ (800b91c <xTaskIncrementTick+0x170>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	3301      	adds	r3, #1
 800b8e6:	4a0d      	ldr	r2, [pc, #52]	@ (800b91c <xTaskIncrementTick+0x170>)
 800b8e8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b8ea:	697b      	ldr	r3, [r7, #20]
}
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	3718      	adds	r7, #24
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}
 800b8f4:	20001024 	.word	0x20001024
 800b8f8:	20001000 	.word	0x20001000
 800b8fc:	20000fb4 	.word	0x20000fb4
 800b900:	20000fb8 	.word	0x20000fb8
 800b904:	20001014 	.word	0x20001014
 800b908:	2000101c 	.word	0x2000101c
 800b90c:	20001004 	.word	0x20001004
 800b910:	20000b2c 	.word	0x20000b2c
 800b914:	20000b28 	.word	0x20000b28
 800b918:	20001010 	.word	0x20001010
 800b91c:	2000100c 	.word	0x2000100c

0800b920 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b920:	b480      	push	{r7}
 800b922:	b085      	sub	sp, #20
 800b924:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b926:	4b2b      	ldr	r3, [pc, #172]	@ (800b9d4 <vTaskSwitchContext+0xb4>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d003      	beq.n	800b936 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b92e:	4b2a      	ldr	r3, [pc, #168]	@ (800b9d8 <vTaskSwitchContext+0xb8>)
 800b930:	2201      	movs	r2, #1
 800b932:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b934:	e047      	b.n	800b9c6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800b936:	4b28      	ldr	r3, [pc, #160]	@ (800b9d8 <vTaskSwitchContext+0xb8>)
 800b938:	2200      	movs	r2, #0
 800b93a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b93c:	4b27      	ldr	r3, [pc, #156]	@ (800b9dc <vTaskSwitchContext+0xbc>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	60fb      	str	r3, [r7, #12]
 800b942:	e011      	b.n	800b968 <vTaskSwitchContext+0x48>
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d10b      	bne.n	800b962 <vTaskSwitchContext+0x42>
	__asm volatile
 800b94a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b94e:	f383 8811 	msr	BASEPRI, r3
 800b952:	f3bf 8f6f 	isb	sy
 800b956:	f3bf 8f4f 	dsb	sy
 800b95a:	607b      	str	r3, [r7, #4]
}
 800b95c:	bf00      	nop
 800b95e:	bf00      	nop
 800b960:	e7fd      	b.n	800b95e <vTaskSwitchContext+0x3e>
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	3b01      	subs	r3, #1
 800b966:	60fb      	str	r3, [r7, #12]
 800b968:	491d      	ldr	r1, [pc, #116]	@ (800b9e0 <vTaskSwitchContext+0xc0>)
 800b96a:	68fa      	ldr	r2, [r7, #12]
 800b96c:	4613      	mov	r3, r2
 800b96e:	009b      	lsls	r3, r3, #2
 800b970:	4413      	add	r3, r2
 800b972:	009b      	lsls	r3, r3, #2
 800b974:	440b      	add	r3, r1
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d0e3      	beq.n	800b944 <vTaskSwitchContext+0x24>
 800b97c:	68fa      	ldr	r2, [r7, #12]
 800b97e:	4613      	mov	r3, r2
 800b980:	009b      	lsls	r3, r3, #2
 800b982:	4413      	add	r3, r2
 800b984:	009b      	lsls	r3, r3, #2
 800b986:	4a16      	ldr	r2, [pc, #88]	@ (800b9e0 <vTaskSwitchContext+0xc0>)
 800b988:	4413      	add	r3, r2
 800b98a:	60bb      	str	r3, [r7, #8]
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	685b      	ldr	r3, [r3, #4]
 800b990:	685a      	ldr	r2, [r3, #4]
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	605a      	str	r2, [r3, #4]
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	685a      	ldr	r2, [r3, #4]
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	3308      	adds	r3, #8
 800b99e:	429a      	cmp	r2, r3
 800b9a0:	d104      	bne.n	800b9ac <vTaskSwitchContext+0x8c>
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	685b      	ldr	r3, [r3, #4]
 800b9a6:	685a      	ldr	r2, [r3, #4]
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	605a      	str	r2, [r3, #4]
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	685b      	ldr	r3, [r3, #4]
 800b9b0:	68db      	ldr	r3, [r3, #12]
 800b9b2:	4a0c      	ldr	r2, [pc, #48]	@ (800b9e4 <vTaskSwitchContext+0xc4>)
 800b9b4:	6013      	str	r3, [r2, #0]
 800b9b6:	4a09      	ldr	r2, [pc, #36]	@ (800b9dc <vTaskSwitchContext+0xbc>)
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b9bc:	4b09      	ldr	r3, [pc, #36]	@ (800b9e4 <vTaskSwitchContext+0xc4>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	3354      	adds	r3, #84	@ 0x54
 800b9c2:	4a09      	ldr	r2, [pc, #36]	@ (800b9e8 <vTaskSwitchContext+0xc8>)
 800b9c4:	6013      	str	r3, [r2, #0]
}
 800b9c6:	bf00      	nop
 800b9c8:	3714      	adds	r7, #20
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d0:	4770      	bx	lr
 800b9d2:	bf00      	nop
 800b9d4:	20001024 	.word	0x20001024
 800b9d8:	20001010 	.word	0x20001010
 800b9dc:	20001004 	.word	0x20001004
 800b9e0:	20000b2c 	.word	0x20000b2c
 800b9e4:	20000b28 	.word	0x20000b28
 800b9e8:	20000010 	.word	0x20000010

0800b9ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b084      	sub	sp, #16
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
 800b9f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d10b      	bne.n	800ba14 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b9fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba00:	f383 8811 	msr	BASEPRI, r3
 800ba04:	f3bf 8f6f 	isb	sy
 800ba08:	f3bf 8f4f 	dsb	sy
 800ba0c:	60fb      	str	r3, [r7, #12]
}
 800ba0e:	bf00      	nop
 800ba10:	bf00      	nop
 800ba12:	e7fd      	b.n	800ba10 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ba14:	4b07      	ldr	r3, [pc, #28]	@ (800ba34 <vTaskPlaceOnEventList+0x48>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	3318      	adds	r3, #24
 800ba1a:	4619      	mov	r1, r3
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	f7fe fd50 	bl	800a4c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ba22:	2101      	movs	r1, #1
 800ba24:	6838      	ldr	r0, [r7, #0]
 800ba26:	f000 fa87 	bl	800bf38 <prvAddCurrentTaskToDelayedList>
}
 800ba2a:	bf00      	nop
 800ba2c:	3710      	adds	r7, #16
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}
 800ba32:	bf00      	nop
 800ba34:	20000b28 	.word	0x20000b28

0800ba38 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b086      	sub	sp, #24
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	60f8      	str	r0, [r7, #12]
 800ba40:	60b9      	str	r1, [r7, #8]
 800ba42:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d10b      	bne.n	800ba62 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800ba4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba4e:	f383 8811 	msr	BASEPRI, r3
 800ba52:	f3bf 8f6f 	isb	sy
 800ba56:	f3bf 8f4f 	dsb	sy
 800ba5a:	617b      	str	r3, [r7, #20]
}
 800ba5c:	bf00      	nop
 800ba5e:	bf00      	nop
 800ba60:	e7fd      	b.n	800ba5e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ba62:	4b0a      	ldr	r3, [pc, #40]	@ (800ba8c <vTaskPlaceOnEventListRestricted+0x54>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	3318      	adds	r3, #24
 800ba68:	4619      	mov	r1, r3
 800ba6a:	68f8      	ldr	r0, [r7, #12]
 800ba6c:	f7fe fd05 	bl	800a47a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d002      	beq.n	800ba7c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800ba76:	f04f 33ff 	mov.w	r3, #4294967295
 800ba7a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ba7c:	6879      	ldr	r1, [r7, #4]
 800ba7e:	68b8      	ldr	r0, [r7, #8]
 800ba80:	f000 fa5a 	bl	800bf38 <prvAddCurrentTaskToDelayedList>
	}
 800ba84:	bf00      	nop
 800ba86:	3718      	adds	r7, #24
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}
 800ba8c:	20000b28 	.word	0x20000b28

0800ba90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b086      	sub	sp, #24
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	68db      	ldr	r3, [r3, #12]
 800ba9c:	68db      	ldr	r3, [r3, #12]
 800ba9e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d10b      	bne.n	800babe <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800baa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baaa:	f383 8811 	msr	BASEPRI, r3
 800baae:	f3bf 8f6f 	isb	sy
 800bab2:	f3bf 8f4f 	dsb	sy
 800bab6:	60fb      	str	r3, [r7, #12]
}
 800bab8:	bf00      	nop
 800baba:	bf00      	nop
 800babc:	e7fd      	b.n	800baba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	3318      	adds	r3, #24
 800bac2:	4618      	mov	r0, r3
 800bac4:	f7fe fd36 	bl	800a534 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bac8:	4b1d      	ldr	r3, [pc, #116]	@ (800bb40 <xTaskRemoveFromEventList+0xb0>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d11d      	bne.n	800bb0c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bad0:	693b      	ldr	r3, [r7, #16]
 800bad2:	3304      	adds	r3, #4
 800bad4:	4618      	mov	r0, r3
 800bad6:	f7fe fd2d 	bl	800a534 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bada:	693b      	ldr	r3, [r7, #16]
 800badc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bade:	4b19      	ldr	r3, [pc, #100]	@ (800bb44 <xTaskRemoveFromEventList+0xb4>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d903      	bls.n	800baee <xTaskRemoveFromEventList+0x5e>
 800bae6:	693b      	ldr	r3, [r7, #16]
 800bae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800baea:	4a16      	ldr	r2, [pc, #88]	@ (800bb44 <xTaskRemoveFromEventList+0xb4>)
 800baec:	6013      	str	r3, [r2, #0]
 800baee:	693b      	ldr	r3, [r7, #16]
 800baf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800baf2:	4613      	mov	r3, r2
 800baf4:	009b      	lsls	r3, r3, #2
 800baf6:	4413      	add	r3, r2
 800baf8:	009b      	lsls	r3, r3, #2
 800bafa:	4a13      	ldr	r2, [pc, #76]	@ (800bb48 <xTaskRemoveFromEventList+0xb8>)
 800bafc:	441a      	add	r2, r3
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	3304      	adds	r3, #4
 800bb02:	4619      	mov	r1, r3
 800bb04:	4610      	mov	r0, r2
 800bb06:	f7fe fcb8 	bl	800a47a <vListInsertEnd>
 800bb0a:	e005      	b.n	800bb18 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bb0c:	693b      	ldr	r3, [r7, #16]
 800bb0e:	3318      	adds	r3, #24
 800bb10:	4619      	mov	r1, r3
 800bb12:	480e      	ldr	r0, [pc, #56]	@ (800bb4c <xTaskRemoveFromEventList+0xbc>)
 800bb14:	f7fe fcb1 	bl	800a47a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bb18:	693b      	ldr	r3, [r7, #16]
 800bb1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb1c:	4b0c      	ldr	r3, [pc, #48]	@ (800bb50 <xTaskRemoveFromEventList+0xc0>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb22:	429a      	cmp	r2, r3
 800bb24:	d905      	bls.n	800bb32 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bb26:	2301      	movs	r3, #1
 800bb28:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bb2a:	4b0a      	ldr	r3, [pc, #40]	@ (800bb54 <xTaskRemoveFromEventList+0xc4>)
 800bb2c:	2201      	movs	r2, #1
 800bb2e:	601a      	str	r2, [r3, #0]
 800bb30:	e001      	b.n	800bb36 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800bb32:	2300      	movs	r3, #0
 800bb34:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bb36:	697b      	ldr	r3, [r7, #20]
}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	3718      	adds	r7, #24
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}
 800bb40:	20001024 	.word	0x20001024
 800bb44:	20001004 	.word	0x20001004
 800bb48:	20000b2c 	.word	0x20000b2c
 800bb4c:	20000fbc 	.word	0x20000fbc
 800bb50:	20000b28 	.word	0x20000b28
 800bb54:	20001010 	.word	0x20001010

0800bb58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b083      	sub	sp, #12
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bb60:	4b06      	ldr	r3, [pc, #24]	@ (800bb7c <vTaskInternalSetTimeOutState+0x24>)
 800bb62:	681a      	ldr	r2, [r3, #0]
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bb68:	4b05      	ldr	r3, [pc, #20]	@ (800bb80 <vTaskInternalSetTimeOutState+0x28>)
 800bb6a:	681a      	ldr	r2, [r3, #0]
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	605a      	str	r2, [r3, #4]
}
 800bb70:	bf00      	nop
 800bb72:	370c      	adds	r7, #12
 800bb74:	46bd      	mov	sp, r7
 800bb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7a:	4770      	bx	lr
 800bb7c:	20001014 	.word	0x20001014
 800bb80:	20001000 	.word	0x20001000

0800bb84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b088      	sub	sp, #32
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
 800bb8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d10b      	bne.n	800bbac <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800bb94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb98:	f383 8811 	msr	BASEPRI, r3
 800bb9c:	f3bf 8f6f 	isb	sy
 800bba0:	f3bf 8f4f 	dsb	sy
 800bba4:	613b      	str	r3, [r7, #16]
}
 800bba6:	bf00      	nop
 800bba8:	bf00      	nop
 800bbaa:	e7fd      	b.n	800bba8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d10b      	bne.n	800bbca <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800bbb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbb6:	f383 8811 	msr	BASEPRI, r3
 800bbba:	f3bf 8f6f 	isb	sy
 800bbbe:	f3bf 8f4f 	dsb	sy
 800bbc2:	60fb      	str	r3, [r7, #12]
}
 800bbc4:	bf00      	nop
 800bbc6:	bf00      	nop
 800bbc8:	e7fd      	b.n	800bbc6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800bbca:	f000 fe95 	bl	800c8f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bbce:	4b1d      	ldr	r3, [pc, #116]	@ (800bc44 <xTaskCheckForTimeOut+0xc0>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	685b      	ldr	r3, [r3, #4]
 800bbd8:	69ba      	ldr	r2, [r7, #24]
 800bbda:	1ad3      	subs	r3, r2, r3
 800bbdc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbe6:	d102      	bne.n	800bbee <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	61fb      	str	r3, [r7, #28]
 800bbec:	e023      	b.n	800bc36 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681a      	ldr	r2, [r3, #0]
 800bbf2:	4b15      	ldr	r3, [pc, #84]	@ (800bc48 <xTaskCheckForTimeOut+0xc4>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	429a      	cmp	r2, r3
 800bbf8:	d007      	beq.n	800bc0a <xTaskCheckForTimeOut+0x86>
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	685b      	ldr	r3, [r3, #4]
 800bbfe:	69ba      	ldr	r2, [r7, #24]
 800bc00:	429a      	cmp	r2, r3
 800bc02:	d302      	bcc.n	800bc0a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bc04:	2301      	movs	r3, #1
 800bc06:	61fb      	str	r3, [r7, #28]
 800bc08:	e015      	b.n	800bc36 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	697a      	ldr	r2, [r7, #20]
 800bc10:	429a      	cmp	r2, r3
 800bc12:	d20b      	bcs.n	800bc2c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	681a      	ldr	r2, [r3, #0]
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	1ad2      	subs	r2, r2, r3
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f7ff ff99 	bl	800bb58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bc26:	2300      	movs	r3, #0
 800bc28:	61fb      	str	r3, [r7, #28]
 800bc2a:	e004      	b.n	800bc36 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bc32:	2301      	movs	r3, #1
 800bc34:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bc36:	f000 fe91 	bl	800c95c <vPortExitCritical>

	return xReturn;
 800bc3a:	69fb      	ldr	r3, [r7, #28]
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3720      	adds	r7, #32
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}
 800bc44:	20001000 	.word	0x20001000
 800bc48:	20001014 	.word	0x20001014

0800bc4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bc4c:	b480      	push	{r7}
 800bc4e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bc50:	4b03      	ldr	r3, [pc, #12]	@ (800bc60 <vTaskMissedYield+0x14>)
 800bc52:	2201      	movs	r2, #1
 800bc54:	601a      	str	r2, [r3, #0]
}
 800bc56:	bf00      	nop
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5e:	4770      	bx	lr
 800bc60:	20001010 	.word	0x20001010

0800bc64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b082      	sub	sp, #8
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bc6c:	f000 f852 	bl	800bd14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bc70:	4b06      	ldr	r3, [pc, #24]	@ (800bc8c <prvIdleTask+0x28>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	2b01      	cmp	r3, #1
 800bc76:	d9f9      	bls.n	800bc6c <prvIdleTask+0x8>
			{
				taskYIELD();
 800bc78:	4b05      	ldr	r3, [pc, #20]	@ (800bc90 <prvIdleTask+0x2c>)
 800bc7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc7e:	601a      	str	r2, [r3, #0]
 800bc80:	f3bf 8f4f 	dsb	sy
 800bc84:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bc88:	e7f0      	b.n	800bc6c <prvIdleTask+0x8>
 800bc8a:	bf00      	nop
 800bc8c:	20000b2c 	.word	0x20000b2c
 800bc90:	e000ed04 	.word	0xe000ed04

0800bc94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b082      	sub	sp, #8
 800bc98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	607b      	str	r3, [r7, #4]
 800bc9e:	e00c      	b.n	800bcba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bca0:	687a      	ldr	r2, [r7, #4]
 800bca2:	4613      	mov	r3, r2
 800bca4:	009b      	lsls	r3, r3, #2
 800bca6:	4413      	add	r3, r2
 800bca8:	009b      	lsls	r3, r3, #2
 800bcaa:	4a12      	ldr	r2, [pc, #72]	@ (800bcf4 <prvInitialiseTaskLists+0x60>)
 800bcac:	4413      	add	r3, r2
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f7fe fbb6 	bl	800a420 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	3301      	adds	r3, #1
 800bcb8:	607b      	str	r3, [r7, #4]
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2b37      	cmp	r3, #55	@ 0x37
 800bcbe:	d9ef      	bls.n	800bca0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bcc0:	480d      	ldr	r0, [pc, #52]	@ (800bcf8 <prvInitialiseTaskLists+0x64>)
 800bcc2:	f7fe fbad 	bl	800a420 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bcc6:	480d      	ldr	r0, [pc, #52]	@ (800bcfc <prvInitialiseTaskLists+0x68>)
 800bcc8:	f7fe fbaa 	bl	800a420 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bccc:	480c      	ldr	r0, [pc, #48]	@ (800bd00 <prvInitialiseTaskLists+0x6c>)
 800bcce:	f7fe fba7 	bl	800a420 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bcd2:	480c      	ldr	r0, [pc, #48]	@ (800bd04 <prvInitialiseTaskLists+0x70>)
 800bcd4:	f7fe fba4 	bl	800a420 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bcd8:	480b      	ldr	r0, [pc, #44]	@ (800bd08 <prvInitialiseTaskLists+0x74>)
 800bcda:	f7fe fba1 	bl	800a420 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bcde:	4b0b      	ldr	r3, [pc, #44]	@ (800bd0c <prvInitialiseTaskLists+0x78>)
 800bce0:	4a05      	ldr	r2, [pc, #20]	@ (800bcf8 <prvInitialiseTaskLists+0x64>)
 800bce2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bce4:	4b0a      	ldr	r3, [pc, #40]	@ (800bd10 <prvInitialiseTaskLists+0x7c>)
 800bce6:	4a05      	ldr	r2, [pc, #20]	@ (800bcfc <prvInitialiseTaskLists+0x68>)
 800bce8:	601a      	str	r2, [r3, #0]
}
 800bcea:	bf00      	nop
 800bcec:	3708      	adds	r7, #8
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}
 800bcf2:	bf00      	nop
 800bcf4:	20000b2c 	.word	0x20000b2c
 800bcf8:	20000f8c 	.word	0x20000f8c
 800bcfc:	20000fa0 	.word	0x20000fa0
 800bd00:	20000fbc 	.word	0x20000fbc
 800bd04:	20000fd0 	.word	0x20000fd0
 800bd08:	20000fe8 	.word	0x20000fe8
 800bd0c:	20000fb4 	.word	0x20000fb4
 800bd10:	20000fb8 	.word	0x20000fb8

0800bd14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b082      	sub	sp, #8
 800bd18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bd1a:	e019      	b.n	800bd50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bd1c:	f000 fdec 	bl	800c8f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd20:	4b10      	ldr	r3, [pc, #64]	@ (800bd64 <prvCheckTasksWaitingTermination+0x50>)
 800bd22:	68db      	ldr	r3, [r3, #12]
 800bd24:	68db      	ldr	r3, [r3, #12]
 800bd26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	3304      	adds	r3, #4
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f7fe fc01 	bl	800a534 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bd32:	4b0d      	ldr	r3, [pc, #52]	@ (800bd68 <prvCheckTasksWaitingTermination+0x54>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	3b01      	subs	r3, #1
 800bd38:	4a0b      	ldr	r2, [pc, #44]	@ (800bd68 <prvCheckTasksWaitingTermination+0x54>)
 800bd3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bd3c:	4b0b      	ldr	r3, [pc, #44]	@ (800bd6c <prvCheckTasksWaitingTermination+0x58>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	3b01      	subs	r3, #1
 800bd42:	4a0a      	ldr	r2, [pc, #40]	@ (800bd6c <prvCheckTasksWaitingTermination+0x58>)
 800bd44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bd46:	f000 fe09 	bl	800c95c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f000 f810 	bl	800bd70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bd50:	4b06      	ldr	r3, [pc, #24]	@ (800bd6c <prvCheckTasksWaitingTermination+0x58>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d1e1      	bne.n	800bd1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bd58:	bf00      	nop
 800bd5a:	bf00      	nop
 800bd5c:	3708      	adds	r7, #8
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}
 800bd62:	bf00      	nop
 800bd64:	20000fd0 	.word	0x20000fd0
 800bd68:	20000ffc 	.word	0x20000ffc
 800bd6c:	20000fe4 	.word	0x20000fe4

0800bd70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b084      	sub	sp, #16
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	3354      	adds	r3, #84	@ 0x54
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f001 f9c1 	bl	800d104 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d108      	bne.n	800bd9e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd90:	4618      	mov	r0, r3
 800bd92:	f000 ffa1 	bl	800ccd8 <vPortFree>
				vPortFree( pxTCB );
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f000 ff9e 	bl	800ccd8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bd9c:	e019      	b.n	800bdd2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800bda4:	2b01      	cmp	r3, #1
 800bda6:	d103      	bne.n	800bdb0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	f000 ff95 	bl	800ccd8 <vPortFree>
	}
 800bdae:	e010      	b.n	800bdd2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800bdb6:	2b02      	cmp	r3, #2
 800bdb8:	d00b      	beq.n	800bdd2 <prvDeleteTCB+0x62>
	__asm volatile
 800bdba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdbe:	f383 8811 	msr	BASEPRI, r3
 800bdc2:	f3bf 8f6f 	isb	sy
 800bdc6:	f3bf 8f4f 	dsb	sy
 800bdca:	60fb      	str	r3, [r7, #12]
}
 800bdcc:	bf00      	nop
 800bdce:	bf00      	nop
 800bdd0:	e7fd      	b.n	800bdce <prvDeleteTCB+0x5e>
	}
 800bdd2:	bf00      	nop
 800bdd4:	3710      	adds	r7, #16
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}
	...

0800bddc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bddc:	b480      	push	{r7}
 800bdde:	b083      	sub	sp, #12
 800bde0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bde2:	4b0c      	ldr	r3, [pc, #48]	@ (800be14 <prvResetNextTaskUnblockTime+0x38>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d104      	bne.n	800bdf6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bdec:	4b0a      	ldr	r3, [pc, #40]	@ (800be18 <prvResetNextTaskUnblockTime+0x3c>)
 800bdee:	f04f 32ff 	mov.w	r2, #4294967295
 800bdf2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bdf4:	e008      	b.n	800be08 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdf6:	4b07      	ldr	r3, [pc, #28]	@ (800be14 <prvResetNextTaskUnblockTime+0x38>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	68db      	ldr	r3, [r3, #12]
 800bdfc:	68db      	ldr	r3, [r3, #12]
 800bdfe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	685b      	ldr	r3, [r3, #4]
 800be04:	4a04      	ldr	r2, [pc, #16]	@ (800be18 <prvResetNextTaskUnblockTime+0x3c>)
 800be06:	6013      	str	r3, [r2, #0]
}
 800be08:	bf00      	nop
 800be0a:	370c      	adds	r7, #12
 800be0c:	46bd      	mov	sp, r7
 800be0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be12:	4770      	bx	lr
 800be14:	20000fb4 	.word	0x20000fb4
 800be18:	2000101c 	.word	0x2000101c

0800be1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800be1c:	b480      	push	{r7}
 800be1e:	b083      	sub	sp, #12
 800be20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800be22:	4b0b      	ldr	r3, [pc, #44]	@ (800be50 <xTaskGetSchedulerState+0x34>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d102      	bne.n	800be30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800be2a:	2301      	movs	r3, #1
 800be2c:	607b      	str	r3, [r7, #4]
 800be2e:	e008      	b.n	800be42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be30:	4b08      	ldr	r3, [pc, #32]	@ (800be54 <xTaskGetSchedulerState+0x38>)
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d102      	bne.n	800be3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800be38:	2302      	movs	r3, #2
 800be3a:	607b      	str	r3, [r7, #4]
 800be3c:	e001      	b.n	800be42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800be3e:	2300      	movs	r3, #0
 800be40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800be42:	687b      	ldr	r3, [r7, #4]
	}
 800be44:	4618      	mov	r0, r3
 800be46:	370c      	adds	r7, #12
 800be48:	46bd      	mov	sp, r7
 800be4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4e:	4770      	bx	lr
 800be50:	20001008 	.word	0x20001008
 800be54:	20001024 	.word	0x20001024

0800be58 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b086      	sub	sp, #24
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800be64:	2300      	movs	r3, #0
 800be66:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d058      	beq.n	800bf20 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800be6e:	4b2f      	ldr	r3, [pc, #188]	@ (800bf2c <xTaskPriorityDisinherit+0xd4>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	693a      	ldr	r2, [r7, #16]
 800be74:	429a      	cmp	r2, r3
 800be76:	d00b      	beq.n	800be90 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800be78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be7c:	f383 8811 	msr	BASEPRI, r3
 800be80:	f3bf 8f6f 	isb	sy
 800be84:	f3bf 8f4f 	dsb	sy
 800be88:	60fb      	str	r3, [r7, #12]
}
 800be8a:	bf00      	nop
 800be8c:	bf00      	nop
 800be8e:	e7fd      	b.n	800be8c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be94:	2b00      	cmp	r3, #0
 800be96:	d10b      	bne.n	800beb0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800be98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be9c:	f383 8811 	msr	BASEPRI, r3
 800bea0:	f3bf 8f6f 	isb	sy
 800bea4:	f3bf 8f4f 	dsb	sy
 800bea8:	60bb      	str	r3, [r7, #8]
}
 800beaa:	bf00      	nop
 800beac:	bf00      	nop
 800beae:	e7fd      	b.n	800beac <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800beb0:	693b      	ldr	r3, [r7, #16]
 800beb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800beb4:	1e5a      	subs	r2, r3, #1
 800beb6:	693b      	ldr	r3, [r7, #16]
 800beb8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800beba:	693b      	ldr	r3, [r7, #16]
 800bebc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bebe:	693b      	ldr	r3, [r7, #16]
 800bec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bec2:	429a      	cmp	r2, r3
 800bec4:	d02c      	beq.n	800bf20 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bec6:	693b      	ldr	r3, [r7, #16]
 800bec8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800beca:	2b00      	cmp	r3, #0
 800becc:	d128      	bne.n	800bf20 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bece:	693b      	ldr	r3, [r7, #16]
 800bed0:	3304      	adds	r3, #4
 800bed2:	4618      	mov	r0, r3
 800bed4:	f7fe fb2e 	bl	800a534 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bed8:	693b      	ldr	r3, [r7, #16]
 800beda:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bee0:	693b      	ldr	r3, [r7, #16]
 800bee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bee4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bee8:	693b      	ldr	r3, [r7, #16]
 800beea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800beec:	693b      	ldr	r3, [r7, #16]
 800beee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bef0:	4b0f      	ldr	r3, [pc, #60]	@ (800bf30 <xTaskPriorityDisinherit+0xd8>)
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	429a      	cmp	r2, r3
 800bef6:	d903      	bls.n	800bf00 <xTaskPriorityDisinherit+0xa8>
 800bef8:	693b      	ldr	r3, [r7, #16]
 800befa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800befc:	4a0c      	ldr	r2, [pc, #48]	@ (800bf30 <xTaskPriorityDisinherit+0xd8>)
 800befe:	6013      	str	r3, [r2, #0]
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf04:	4613      	mov	r3, r2
 800bf06:	009b      	lsls	r3, r3, #2
 800bf08:	4413      	add	r3, r2
 800bf0a:	009b      	lsls	r3, r3, #2
 800bf0c:	4a09      	ldr	r2, [pc, #36]	@ (800bf34 <xTaskPriorityDisinherit+0xdc>)
 800bf0e:	441a      	add	r2, r3
 800bf10:	693b      	ldr	r3, [r7, #16]
 800bf12:	3304      	adds	r3, #4
 800bf14:	4619      	mov	r1, r3
 800bf16:	4610      	mov	r0, r2
 800bf18:	f7fe faaf 	bl	800a47a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bf20:	697b      	ldr	r3, [r7, #20]
	}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3718      	adds	r7, #24
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}
 800bf2a:	bf00      	nop
 800bf2c:	20000b28 	.word	0x20000b28
 800bf30:	20001004 	.word	0x20001004
 800bf34:	20000b2c 	.word	0x20000b2c

0800bf38 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b084      	sub	sp, #16
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
 800bf40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bf42:	4b21      	ldr	r3, [pc, #132]	@ (800bfc8 <prvAddCurrentTaskToDelayedList+0x90>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf48:	4b20      	ldr	r3, [pc, #128]	@ (800bfcc <prvAddCurrentTaskToDelayedList+0x94>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	3304      	adds	r3, #4
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f7fe faf0 	bl	800a534 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf5a:	d10a      	bne.n	800bf72 <prvAddCurrentTaskToDelayedList+0x3a>
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d007      	beq.n	800bf72 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf62:	4b1a      	ldr	r3, [pc, #104]	@ (800bfcc <prvAddCurrentTaskToDelayedList+0x94>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	3304      	adds	r3, #4
 800bf68:	4619      	mov	r1, r3
 800bf6a:	4819      	ldr	r0, [pc, #100]	@ (800bfd0 <prvAddCurrentTaskToDelayedList+0x98>)
 800bf6c:	f7fe fa85 	bl	800a47a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bf70:	e026      	b.n	800bfc0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bf72:	68fa      	ldr	r2, [r7, #12]
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	4413      	add	r3, r2
 800bf78:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bf7a:	4b14      	ldr	r3, [pc, #80]	@ (800bfcc <prvAddCurrentTaskToDelayedList+0x94>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	68ba      	ldr	r2, [r7, #8]
 800bf80:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bf82:	68ba      	ldr	r2, [r7, #8]
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	429a      	cmp	r2, r3
 800bf88:	d209      	bcs.n	800bf9e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf8a:	4b12      	ldr	r3, [pc, #72]	@ (800bfd4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bf8c:	681a      	ldr	r2, [r3, #0]
 800bf8e:	4b0f      	ldr	r3, [pc, #60]	@ (800bfcc <prvAddCurrentTaskToDelayedList+0x94>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	3304      	adds	r3, #4
 800bf94:	4619      	mov	r1, r3
 800bf96:	4610      	mov	r0, r2
 800bf98:	f7fe fa93 	bl	800a4c2 <vListInsert>
}
 800bf9c:	e010      	b.n	800bfc0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf9e:	4b0e      	ldr	r3, [pc, #56]	@ (800bfd8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bfa0:	681a      	ldr	r2, [r3, #0]
 800bfa2:	4b0a      	ldr	r3, [pc, #40]	@ (800bfcc <prvAddCurrentTaskToDelayedList+0x94>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	3304      	adds	r3, #4
 800bfa8:	4619      	mov	r1, r3
 800bfaa:	4610      	mov	r0, r2
 800bfac:	f7fe fa89 	bl	800a4c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bfb0:	4b0a      	ldr	r3, [pc, #40]	@ (800bfdc <prvAddCurrentTaskToDelayedList+0xa4>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	68ba      	ldr	r2, [r7, #8]
 800bfb6:	429a      	cmp	r2, r3
 800bfb8:	d202      	bcs.n	800bfc0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bfba:	4a08      	ldr	r2, [pc, #32]	@ (800bfdc <prvAddCurrentTaskToDelayedList+0xa4>)
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	6013      	str	r3, [r2, #0]
}
 800bfc0:	bf00      	nop
 800bfc2:	3710      	adds	r7, #16
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}
 800bfc8:	20001000 	.word	0x20001000
 800bfcc:	20000b28 	.word	0x20000b28
 800bfd0:	20000fe8 	.word	0x20000fe8
 800bfd4:	20000fb8 	.word	0x20000fb8
 800bfd8:	20000fb4 	.word	0x20000fb4
 800bfdc:	2000101c 	.word	0x2000101c

0800bfe0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b08a      	sub	sp, #40	@ 0x28
 800bfe4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bfea:	f000 fb13 	bl	800c614 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bfee:	4b1d      	ldr	r3, [pc, #116]	@ (800c064 <xTimerCreateTimerTask+0x84>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d021      	beq.n	800c03a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bff6:	2300      	movs	r3, #0
 800bff8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bffa:	2300      	movs	r3, #0
 800bffc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bffe:	1d3a      	adds	r2, r7, #4
 800c000:	f107 0108 	add.w	r1, r7, #8
 800c004:	f107 030c 	add.w	r3, r7, #12
 800c008:	4618      	mov	r0, r3
 800c00a:	f7fe f9ef 	bl	800a3ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c00e:	6879      	ldr	r1, [r7, #4]
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	68fa      	ldr	r2, [r7, #12]
 800c014:	9202      	str	r2, [sp, #8]
 800c016:	9301      	str	r3, [sp, #4]
 800c018:	2302      	movs	r3, #2
 800c01a:	9300      	str	r3, [sp, #0]
 800c01c:	2300      	movs	r3, #0
 800c01e:	460a      	mov	r2, r1
 800c020:	4911      	ldr	r1, [pc, #68]	@ (800c068 <xTimerCreateTimerTask+0x88>)
 800c022:	4812      	ldr	r0, [pc, #72]	@ (800c06c <xTimerCreateTimerTask+0x8c>)
 800c024:	f7ff f8a2 	bl	800b16c <xTaskCreateStatic>
 800c028:	4603      	mov	r3, r0
 800c02a:	4a11      	ldr	r2, [pc, #68]	@ (800c070 <xTimerCreateTimerTask+0x90>)
 800c02c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c02e:	4b10      	ldr	r3, [pc, #64]	@ (800c070 <xTimerCreateTimerTask+0x90>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d001      	beq.n	800c03a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c036:	2301      	movs	r3, #1
 800c038:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c03a:	697b      	ldr	r3, [r7, #20]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d10b      	bne.n	800c058 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c044:	f383 8811 	msr	BASEPRI, r3
 800c048:	f3bf 8f6f 	isb	sy
 800c04c:	f3bf 8f4f 	dsb	sy
 800c050:	613b      	str	r3, [r7, #16]
}
 800c052:	bf00      	nop
 800c054:	bf00      	nop
 800c056:	e7fd      	b.n	800c054 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c058:	697b      	ldr	r3, [r7, #20]
}
 800c05a:	4618      	mov	r0, r3
 800c05c:	3718      	adds	r7, #24
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}
 800c062:	bf00      	nop
 800c064:	20001058 	.word	0x20001058
 800c068:	0800da20 	.word	0x0800da20
 800c06c:	0800c1ad 	.word	0x0800c1ad
 800c070:	2000105c 	.word	0x2000105c

0800c074 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b08a      	sub	sp, #40	@ 0x28
 800c078:	af00      	add	r7, sp, #0
 800c07a:	60f8      	str	r0, [r7, #12]
 800c07c:	60b9      	str	r1, [r7, #8]
 800c07e:	607a      	str	r2, [r7, #4]
 800c080:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c082:	2300      	movs	r3, #0
 800c084:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d10b      	bne.n	800c0a4 <xTimerGenericCommand+0x30>
	__asm volatile
 800c08c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c090:	f383 8811 	msr	BASEPRI, r3
 800c094:	f3bf 8f6f 	isb	sy
 800c098:	f3bf 8f4f 	dsb	sy
 800c09c:	623b      	str	r3, [r7, #32]
}
 800c09e:	bf00      	nop
 800c0a0:	bf00      	nop
 800c0a2:	e7fd      	b.n	800c0a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c0a4:	4b19      	ldr	r3, [pc, #100]	@ (800c10c <xTimerGenericCommand+0x98>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d02a      	beq.n	800c102 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c0ac:	68bb      	ldr	r3, [r7, #8]
 800c0ae:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c0b8:	68bb      	ldr	r3, [r7, #8]
 800c0ba:	2b05      	cmp	r3, #5
 800c0bc:	dc18      	bgt.n	800c0f0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c0be:	f7ff fead 	bl	800be1c <xTaskGetSchedulerState>
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	2b02      	cmp	r3, #2
 800c0c6:	d109      	bne.n	800c0dc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c0c8:	4b10      	ldr	r3, [pc, #64]	@ (800c10c <xTimerGenericCommand+0x98>)
 800c0ca:	6818      	ldr	r0, [r3, #0]
 800c0cc:	f107 0110 	add.w	r1, r7, #16
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c0d4:	f7fe fc0c 	bl	800a8f0 <xQueueGenericSend>
 800c0d8:	6278      	str	r0, [r7, #36]	@ 0x24
 800c0da:	e012      	b.n	800c102 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c0dc:	4b0b      	ldr	r3, [pc, #44]	@ (800c10c <xTimerGenericCommand+0x98>)
 800c0de:	6818      	ldr	r0, [r3, #0]
 800c0e0:	f107 0110 	add.w	r1, r7, #16
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	f7fe fc02 	bl	800a8f0 <xQueueGenericSend>
 800c0ec:	6278      	str	r0, [r7, #36]	@ 0x24
 800c0ee:	e008      	b.n	800c102 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c0f0:	4b06      	ldr	r3, [pc, #24]	@ (800c10c <xTimerGenericCommand+0x98>)
 800c0f2:	6818      	ldr	r0, [r3, #0]
 800c0f4:	f107 0110 	add.w	r1, r7, #16
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	683a      	ldr	r2, [r7, #0]
 800c0fc:	f7fe fcfa 	bl	800aaf4 <xQueueGenericSendFromISR>
 800c100:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c104:	4618      	mov	r0, r3
 800c106:	3728      	adds	r7, #40	@ 0x28
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}
 800c10c:	20001058 	.word	0x20001058

0800c110 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b088      	sub	sp, #32
 800c114:	af02      	add	r7, sp, #8
 800c116:	6078      	str	r0, [r7, #4]
 800c118:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c11a:	4b23      	ldr	r3, [pc, #140]	@ (800c1a8 <prvProcessExpiredTimer+0x98>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	68db      	ldr	r3, [r3, #12]
 800c120:	68db      	ldr	r3, [r3, #12]
 800c122:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c124:	697b      	ldr	r3, [r7, #20]
 800c126:	3304      	adds	r3, #4
 800c128:	4618      	mov	r0, r3
 800c12a:	f7fe fa03 	bl	800a534 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c12e:	697b      	ldr	r3, [r7, #20]
 800c130:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c134:	f003 0304 	and.w	r3, r3, #4
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d023      	beq.n	800c184 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c13c:	697b      	ldr	r3, [r7, #20]
 800c13e:	699a      	ldr	r2, [r3, #24]
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	18d1      	adds	r1, r2, r3
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	683a      	ldr	r2, [r7, #0]
 800c148:	6978      	ldr	r0, [r7, #20]
 800c14a:	f000 f8d5 	bl	800c2f8 <prvInsertTimerInActiveList>
 800c14e:	4603      	mov	r3, r0
 800c150:	2b00      	cmp	r3, #0
 800c152:	d020      	beq.n	800c196 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c154:	2300      	movs	r3, #0
 800c156:	9300      	str	r3, [sp, #0]
 800c158:	2300      	movs	r3, #0
 800c15a:	687a      	ldr	r2, [r7, #4]
 800c15c:	2100      	movs	r1, #0
 800c15e:	6978      	ldr	r0, [r7, #20]
 800c160:	f7ff ff88 	bl	800c074 <xTimerGenericCommand>
 800c164:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c166:	693b      	ldr	r3, [r7, #16]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d114      	bne.n	800c196 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c16c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c170:	f383 8811 	msr	BASEPRI, r3
 800c174:	f3bf 8f6f 	isb	sy
 800c178:	f3bf 8f4f 	dsb	sy
 800c17c:	60fb      	str	r3, [r7, #12]
}
 800c17e:	bf00      	nop
 800c180:	bf00      	nop
 800c182:	e7fd      	b.n	800c180 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c18a:	f023 0301 	bic.w	r3, r3, #1
 800c18e:	b2da      	uxtb	r2, r3
 800c190:	697b      	ldr	r3, [r7, #20]
 800c192:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	6a1b      	ldr	r3, [r3, #32]
 800c19a:	6978      	ldr	r0, [r7, #20]
 800c19c:	4798      	blx	r3
}
 800c19e:	bf00      	nop
 800c1a0:	3718      	adds	r7, #24
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}
 800c1a6:	bf00      	nop
 800c1a8:	20001050 	.word	0x20001050

0800c1ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b084      	sub	sp, #16
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c1b4:	f107 0308 	add.w	r3, r7, #8
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	f000 f859 	bl	800c270 <prvGetNextExpireTime>
 800c1be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c1c0:	68bb      	ldr	r3, [r7, #8]
 800c1c2:	4619      	mov	r1, r3
 800c1c4:	68f8      	ldr	r0, [r7, #12]
 800c1c6:	f000 f805 	bl	800c1d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c1ca:	f000 f8d7 	bl	800c37c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c1ce:	bf00      	nop
 800c1d0:	e7f0      	b.n	800c1b4 <prvTimerTask+0x8>
	...

0800c1d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b084      	sub	sp, #16
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
 800c1dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c1de:	f7ff fa29 	bl	800b634 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c1e2:	f107 0308 	add.w	r3, r7, #8
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f000 f866 	bl	800c2b8 <prvSampleTimeNow>
 800c1ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d130      	bne.n	800c256 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d10a      	bne.n	800c210 <prvProcessTimerOrBlockTask+0x3c>
 800c1fa:	687a      	ldr	r2, [r7, #4]
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	429a      	cmp	r2, r3
 800c200:	d806      	bhi.n	800c210 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c202:	f7ff fa25 	bl	800b650 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c206:	68f9      	ldr	r1, [r7, #12]
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f7ff ff81 	bl	800c110 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c20e:	e024      	b.n	800c25a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d008      	beq.n	800c228 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c216:	4b13      	ldr	r3, [pc, #76]	@ (800c264 <prvProcessTimerOrBlockTask+0x90>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d101      	bne.n	800c224 <prvProcessTimerOrBlockTask+0x50>
 800c220:	2301      	movs	r3, #1
 800c222:	e000      	b.n	800c226 <prvProcessTimerOrBlockTask+0x52>
 800c224:	2300      	movs	r3, #0
 800c226:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c228:	4b0f      	ldr	r3, [pc, #60]	@ (800c268 <prvProcessTimerOrBlockTask+0x94>)
 800c22a:	6818      	ldr	r0, [r3, #0]
 800c22c:	687a      	ldr	r2, [r7, #4]
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	1ad3      	subs	r3, r2, r3
 800c232:	683a      	ldr	r2, [r7, #0]
 800c234:	4619      	mov	r1, r3
 800c236:	f7fe ff65 	bl	800b104 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c23a:	f7ff fa09 	bl	800b650 <xTaskResumeAll>
 800c23e:	4603      	mov	r3, r0
 800c240:	2b00      	cmp	r3, #0
 800c242:	d10a      	bne.n	800c25a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c244:	4b09      	ldr	r3, [pc, #36]	@ (800c26c <prvProcessTimerOrBlockTask+0x98>)
 800c246:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c24a:	601a      	str	r2, [r3, #0]
 800c24c:	f3bf 8f4f 	dsb	sy
 800c250:	f3bf 8f6f 	isb	sy
}
 800c254:	e001      	b.n	800c25a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c256:	f7ff f9fb 	bl	800b650 <xTaskResumeAll>
}
 800c25a:	bf00      	nop
 800c25c:	3710      	adds	r7, #16
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}
 800c262:	bf00      	nop
 800c264:	20001054 	.word	0x20001054
 800c268:	20001058 	.word	0x20001058
 800c26c:	e000ed04 	.word	0xe000ed04

0800c270 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c270:	b480      	push	{r7}
 800c272:	b085      	sub	sp, #20
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c278:	4b0e      	ldr	r3, [pc, #56]	@ (800c2b4 <prvGetNextExpireTime+0x44>)
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d101      	bne.n	800c286 <prvGetNextExpireTime+0x16>
 800c282:	2201      	movs	r2, #1
 800c284:	e000      	b.n	800c288 <prvGetNextExpireTime+0x18>
 800c286:	2200      	movs	r2, #0
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d105      	bne.n	800c2a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c294:	4b07      	ldr	r3, [pc, #28]	@ (800c2b4 <prvGetNextExpireTime+0x44>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	68db      	ldr	r3, [r3, #12]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	60fb      	str	r3, [r7, #12]
 800c29e:	e001      	b.n	800c2a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3714      	adds	r7, #20
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b0:	4770      	bx	lr
 800c2b2:	bf00      	nop
 800c2b4:	20001050 	.word	0x20001050

0800c2b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b084      	sub	sp, #16
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c2c0:	f7ff fa64 	bl	800b78c <xTaskGetTickCount>
 800c2c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c2c6:	4b0b      	ldr	r3, [pc, #44]	@ (800c2f4 <prvSampleTimeNow+0x3c>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	68fa      	ldr	r2, [r7, #12]
 800c2cc:	429a      	cmp	r2, r3
 800c2ce:	d205      	bcs.n	800c2dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c2d0:	f000 f93a 	bl	800c548 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2201      	movs	r2, #1
 800c2d8:	601a      	str	r2, [r3, #0]
 800c2da:	e002      	b.n	800c2e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c2e2:	4a04      	ldr	r2, [pc, #16]	@ (800c2f4 <prvSampleTimeNow+0x3c>)
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3710      	adds	r7, #16
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}
 800c2f2:	bf00      	nop
 800c2f4:	20001060 	.word	0x20001060

0800c2f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b086      	sub	sp, #24
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	60f8      	str	r0, [r7, #12]
 800c300:	60b9      	str	r1, [r7, #8]
 800c302:	607a      	str	r2, [r7, #4]
 800c304:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c306:	2300      	movs	r3, #0
 800c308:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	68ba      	ldr	r2, [r7, #8]
 800c30e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	68fa      	ldr	r2, [r7, #12]
 800c314:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c316:	68ba      	ldr	r2, [r7, #8]
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	429a      	cmp	r2, r3
 800c31c:	d812      	bhi.n	800c344 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c31e:	687a      	ldr	r2, [r7, #4]
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	1ad2      	subs	r2, r2, r3
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	699b      	ldr	r3, [r3, #24]
 800c328:	429a      	cmp	r2, r3
 800c32a:	d302      	bcc.n	800c332 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c32c:	2301      	movs	r3, #1
 800c32e:	617b      	str	r3, [r7, #20]
 800c330:	e01b      	b.n	800c36a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c332:	4b10      	ldr	r3, [pc, #64]	@ (800c374 <prvInsertTimerInActiveList+0x7c>)
 800c334:	681a      	ldr	r2, [r3, #0]
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	3304      	adds	r3, #4
 800c33a:	4619      	mov	r1, r3
 800c33c:	4610      	mov	r0, r2
 800c33e:	f7fe f8c0 	bl	800a4c2 <vListInsert>
 800c342:	e012      	b.n	800c36a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c344:	687a      	ldr	r2, [r7, #4]
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	429a      	cmp	r2, r3
 800c34a:	d206      	bcs.n	800c35a <prvInsertTimerInActiveList+0x62>
 800c34c:	68ba      	ldr	r2, [r7, #8]
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	429a      	cmp	r2, r3
 800c352:	d302      	bcc.n	800c35a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c354:	2301      	movs	r3, #1
 800c356:	617b      	str	r3, [r7, #20]
 800c358:	e007      	b.n	800c36a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c35a:	4b07      	ldr	r3, [pc, #28]	@ (800c378 <prvInsertTimerInActiveList+0x80>)
 800c35c:	681a      	ldr	r2, [r3, #0]
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	3304      	adds	r3, #4
 800c362:	4619      	mov	r1, r3
 800c364:	4610      	mov	r0, r2
 800c366:	f7fe f8ac 	bl	800a4c2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c36a:	697b      	ldr	r3, [r7, #20]
}
 800c36c:	4618      	mov	r0, r3
 800c36e:	3718      	adds	r7, #24
 800c370:	46bd      	mov	sp, r7
 800c372:	bd80      	pop	{r7, pc}
 800c374:	20001054 	.word	0x20001054
 800c378:	20001050 	.word	0x20001050

0800c37c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b08e      	sub	sp, #56	@ 0x38
 800c380:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c382:	e0ce      	b.n	800c522 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2b00      	cmp	r3, #0
 800c388:	da19      	bge.n	800c3be <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c38a:	1d3b      	adds	r3, r7, #4
 800c38c:	3304      	adds	r3, #4
 800c38e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c392:	2b00      	cmp	r3, #0
 800c394:	d10b      	bne.n	800c3ae <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c39a:	f383 8811 	msr	BASEPRI, r3
 800c39e:	f3bf 8f6f 	isb	sy
 800c3a2:	f3bf 8f4f 	dsb	sy
 800c3a6:	61fb      	str	r3, [r7, #28]
}
 800c3a8:	bf00      	nop
 800c3aa:	bf00      	nop
 800c3ac:	e7fd      	b.n	800c3aa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c3ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c3b4:	6850      	ldr	r0, [r2, #4]
 800c3b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c3b8:	6892      	ldr	r2, [r2, #8]
 800c3ba:	4611      	mov	r1, r2
 800c3bc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	f2c0 80ae 	blt.w	800c522 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c3ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3cc:	695b      	ldr	r3, [r3, #20]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d004      	beq.n	800c3dc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c3d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3d4:	3304      	adds	r3, #4
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f7fe f8ac 	bl	800a534 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c3dc:	463b      	mov	r3, r7
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f7ff ff6a 	bl	800c2b8 <prvSampleTimeNow>
 800c3e4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2b09      	cmp	r3, #9
 800c3ea:	f200 8097 	bhi.w	800c51c <prvProcessReceivedCommands+0x1a0>
 800c3ee:	a201      	add	r2, pc, #4	@ (adr r2, 800c3f4 <prvProcessReceivedCommands+0x78>)
 800c3f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3f4:	0800c41d 	.word	0x0800c41d
 800c3f8:	0800c41d 	.word	0x0800c41d
 800c3fc:	0800c41d 	.word	0x0800c41d
 800c400:	0800c493 	.word	0x0800c493
 800c404:	0800c4a7 	.word	0x0800c4a7
 800c408:	0800c4f3 	.word	0x0800c4f3
 800c40c:	0800c41d 	.word	0x0800c41d
 800c410:	0800c41d 	.word	0x0800c41d
 800c414:	0800c493 	.word	0x0800c493
 800c418:	0800c4a7 	.word	0x0800c4a7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c41c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c41e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c422:	f043 0301 	orr.w	r3, r3, #1
 800c426:	b2da      	uxtb	r2, r3
 800c428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c42a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c42e:	68ba      	ldr	r2, [r7, #8]
 800c430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c432:	699b      	ldr	r3, [r3, #24]
 800c434:	18d1      	adds	r1, r2, r3
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c43a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c43c:	f7ff ff5c 	bl	800c2f8 <prvInsertTimerInActiveList>
 800c440:	4603      	mov	r3, r0
 800c442:	2b00      	cmp	r3, #0
 800c444:	d06c      	beq.n	800c520 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c448:	6a1b      	ldr	r3, [r3, #32]
 800c44a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c44c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c44e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c450:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c454:	f003 0304 	and.w	r3, r3, #4
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d061      	beq.n	800c520 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c45c:	68ba      	ldr	r2, [r7, #8]
 800c45e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c460:	699b      	ldr	r3, [r3, #24]
 800c462:	441a      	add	r2, r3
 800c464:	2300      	movs	r3, #0
 800c466:	9300      	str	r3, [sp, #0]
 800c468:	2300      	movs	r3, #0
 800c46a:	2100      	movs	r1, #0
 800c46c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c46e:	f7ff fe01 	bl	800c074 <xTimerGenericCommand>
 800c472:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c474:	6a3b      	ldr	r3, [r7, #32]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d152      	bne.n	800c520 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c47a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c47e:	f383 8811 	msr	BASEPRI, r3
 800c482:	f3bf 8f6f 	isb	sy
 800c486:	f3bf 8f4f 	dsb	sy
 800c48a:	61bb      	str	r3, [r7, #24]
}
 800c48c:	bf00      	nop
 800c48e:	bf00      	nop
 800c490:	e7fd      	b.n	800c48e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c494:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c498:	f023 0301 	bic.w	r3, r3, #1
 800c49c:	b2da      	uxtb	r2, r3
 800c49e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4a0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c4a4:	e03d      	b.n	800c522 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c4a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c4ac:	f043 0301 	orr.w	r3, r3, #1
 800c4b0:	b2da      	uxtb	r2, r3
 800c4b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4b4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c4b8:	68ba      	ldr	r2, [r7, #8]
 800c4ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4bc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c4be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4c0:	699b      	ldr	r3, [r3, #24]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d10b      	bne.n	800c4de <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c4c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4ca:	f383 8811 	msr	BASEPRI, r3
 800c4ce:	f3bf 8f6f 	isb	sy
 800c4d2:	f3bf 8f4f 	dsb	sy
 800c4d6:	617b      	str	r3, [r7, #20]
}
 800c4d8:	bf00      	nop
 800c4da:	bf00      	nop
 800c4dc:	e7fd      	b.n	800c4da <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c4de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4e0:	699a      	ldr	r2, [r3, #24]
 800c4e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4e4:	18d1      	adds	r1, r2, r3
 800c4e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c4ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c4ec:	f7ff ff04 	bl	800c2f8 <prvInsertTimerInActiveList>
					break;
 800c4f0:	e017      	b.n	800c522 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c4f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c4f8:	f003 0302 	and.w	r3, r3, #2
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d103      	bne.n	800c508 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c500:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c502:	f000 fbe9 	bl	800ccd8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c506:	e00c      	b.n	800c522 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c50a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c50e:	f023 0301 	bic.w	r3, r3, #1
 800c512:	b2da      	uxtb	r2, r3
 800c514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c516:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c51a:	e002      	b.n	800c522 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c51c:	bf00      	nop
 800c51e:	e000      	b.n	800c522 <prvProcessReceivedCommands+0x1a6>
					break;
 800c520:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c522:	4b08      	ldr	r3, [pc, #32]	@ (800c544 <prvProcessReceivedCommands+0x1c8>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	1d39      	adds	r1, r7, #4
 800c528:	2200      	movs	r2, #0
 800c52a:	4618      	mov	r0, r3
 800c52c:	f7fe fb80 	bl	800ac30 <xQueueReceive>
 800c530:	4603      	mov	r3, r0
 800c532:	2b00      	cmp	r3, #0
 800c534:	f47f af26 	bne.w	800c384 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c538:	bf00      	nop
 800c53a:	bf00      	nop
 800c53c:	3730      	adds	r7, #48	@ 0x30
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}
 800c542:	bf00      	nop
 800c544:	20001058 	.word	0x20001058

0800c548 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b088      	sub	sp, #32
 800c54c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c54e:	e049      	b.n	800c5e4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c550:	4b2e      	ldr	r3, [pc, #184]	@ (800c60c <prvSwitchTimerLists+0xc4>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	68db      	ldr	r3, [r3, #12]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c55a:	4b2c      	ldr	r3, [pc, #176]	@ (800c60c <prvSwitchTimerLists+0xc4>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	68db      	ldr	r3, [r3, #12]
 800c560:	68db      	ldr	r3, [r3, #12]
 800c562:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	3304      	adds	r3, #4
 800c568:	4618      	mov	r0, r3
 800c56a:	f7fd ffe3 	bl	800a534 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	6a1b      	ldr	r3, [r3, #32]
 800c572:	68f8      	ldr	r0, [r7, #12]
 800c574:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c57c:	f003 0304 	and.w	r3, r3, #4
 800c580:	2b00      	cmp	r3, #0
 800c582:	d02f      	beq.n	800c5e4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	699b      	ldr	r3, [r3, #24]
 800c588:	693a      	ldr	r2, [r7, #16]
 800c58a:	4413      	add	r3, r2
 800c58c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c58e:	68ba      	ldr	r2, [r7, #8]
 800c590:	693b      	ldr	r3, [r7, #16]
 800c592:	429a      	cmp	r2, r3
 800c594:	d90e      	bls.n	800c5b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	68ba      	ldr	r2, [r7, #8]
 800c59a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	68fa      	ldr	r2, [r7, #12]
 800c5a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c5a2:	4b1a      	ldr	r3, [pc, #104]	@ (800c60c <prvSwitchTimerLists+0xc4>)
 800c5a4:	681a      	ldr	r2, [r3, #0]
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	3304      	adds	r3, #4
 800c5aa:	4619      	mov	r1, r3
 800c5ac:	4610      	mov	r0, r2
 800c5ae:	f7fd ff88 	bl	800a4c2 <vListInsert>
 800c5b2:	e017      	b.n	800c5e4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	9300      	str	r3, [sp, #0]
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	693a      	ldr	r2, [r7, #16]
 800c5bc:	2100      	movs	r1, #0
 800c5be:	68f8      	ldr	r0, [r7, #12]
 800c5c0:	f7ff fd58 	bl	800c074 <xTimerGenericCommand>
 800c5c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d10b      	bne.n	800c5e4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c5cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5d0:	f383 8811 	msr	BASEPRI, r3
 800c5d4:	f3bf 8f6f 	isb	sy
 800c5d8:	f3bf 8f4f 	dsb	sy
 800c5dc:	603b      	str	r3, [r7, #0]
}
 800c5de:	bf00      	nop
 800c5e0:	bf00      	nop
 800c5e2:	e7fd      	b.n	800c5e0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c5e4:	4b09      	ldr	r3, [pc, #36]	@ (800c60c <prvSwitchTimerLists+0xc4>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d1b0      	bne.n	800c550 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c5ee:	4b07      	ldr	r3, [pc, #28]	@ (800c60c <prvSwitchTimerLists+0xc4>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c5f4:	4b06      	ldr	r3, [pc, #24]	@ (800c610 <prvSwitchTimerLists+0xc8>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	4a04      	ldr	r2, [pc, #16]	@ (800c60c <prvSwitchTimerLists+0xc4>)
 800c5fa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c5fc:	4a04      	ldr	r2, [pc, #16]	@ (800c610 <prvSwitchTimerLists+0xc8>)
 800c5fe:	697b      	ldr	r3, [r7, #20]
 800c600:	6013      	str	r3, [r2, #0]
}
 800c602:	bf00      	nop
 800c604:	3718      	adds	r7, #24
 800c606:	46bd      	mov	sp, r7
 800c608:	bd80      	pop	{r7, pc}
 800c60a:	bf00      	nop
 800c60c:	20001050 	.word	0x20001050
 800c610:	20001054 	.word	0x20001054

0800c614 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b082      	sub	sp, #8
 800c618:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c61a:	f000 f96d 	bl	800c8f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c61e:	4b15      	ldr	r3, [pc, #84]	@ (800c674 <prvCheckForValidListAndQueue+0x60>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d120      	bne.n	800c668 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c626:	4814      	ldr	r0, [pc, #80]	@ (800c678 <prvCheckForValidListAndQueue+0x64>)
 800c628:	f7fd fefa 	bl	800a420 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c62c:	4813      	ldr	r0, [pc, #76]	@ (800c67c <prvCheckForValidListAndQueue+0x68>)
 800c62e:	f7fd fef7 	bl	800a420 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c632:	4b13      	ldr	r3, [pc, #76]	@ (800c680 <prvCheckForValidListAndQueue+0x6c>)
 800c634:	4a10      	ldr	r2, [pc, #64]	@ (800c678 <prvCheckForValidListAndQueue+0x64>)
 800c636:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c638:	4b12      	ldr	r3, [pc, #72]	@ (800c684 <prvCheckForValidListAndQueue+0x70>)
 800c63a:	4a10      	ldr	r2, [pc, #64]	@ (800c67c <prvCheckForValidListAndQueue+0x68>)
 800c63c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c63e:	2300      	movs	r3, #0
 800c640:	9300      	str	r3, [sp, #0]
 800c642:	4b11      	ldr	r3, [pc, #68]	@ (800c688 <prvCheckForValidListAndQueue+0x74>)
 800c644:	4a11      	ldr	r2, [pc, #68]	@ (800c68c <prvCheckForValidListAndQueue+0x78>)
 800c646:	2110      	movs	r1, #16
 800c648:	200a      	movs	r0, #10
 800c64a:	f7fe f807 	bl	800a65c <xQueueGenericCreateStatic>
 800c64e:	4603      	mov	r3, r0
 800c650:	4a08      	ldr	r2, [pc, #32]	@ (800c674 <prvCheckForValidListAndQueue+0x60>)
 800c652:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c654:	4b07      	ldr	r3, [pc, #28]	@ (800c674 <prvCheckForValidListAndQueue+0x60>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d005      	beq.n	800c668 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c65c:	4b05      	ldr	r3, [pc, #20]	@ (800c674 <prvCheckForValidListAndQueue+0x60>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	490b      	ldr	r1, [pc, #44]	@ (800c690 <prvCheckForValidListAndQueue+0x7c>)
 800c662:	4618      	mov	r0, r3
 800c664:	f7fe fcfa 	bl	800b05c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c668:	f000 f978 	bl	800c95c <vPortExitCritical>
}
 800c66c:	bf00      	nop
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}
 800c672:	bf00      	nop
 800c674:	20001058 	.word	0x20001058
 800c678:	20001028 	.word	0x20001028
 800c67c:	2000103c 	.word	0x2000103c
 800c680:	20001050 	.word	0x20001050
 800c684:	20001054 	.word	0x20001054
 800c688:	20001104 	.word	0x20001104
 800c68c:	20001064 	.word	0x20001064
 800c690:	0800da28 	.word	0x0800da28

0800c694 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c694:	b480      	push	{r7}
 800c696:	b085      	sub	sp, #20
 800c698:	af00      	add	r7, sp, #0
 800c69a:	60f8      	str	r0, [r7, #12]
 800c69c:	60b9      	str	r1, [r7, #8]
 800c69e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	3b04      	subs	r3, #4
 800c6a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c6ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	3b04      	subs	r3, #4
 800c6b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	f023 0201 	bic.w	r2, r3, #1
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	3b04      	subs	r3, #4
 800c6c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c6c4:	4a0c      	ldr	r2, [pc, #48]	@ (800c6f8 <pxPortInitialiseStack+0x64>)
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	3b14      	subs	r3, #20
 800c6ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c6d0:	687a      	ldr	r2, [r7, #4]
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	3b04      	subs	r3, #4
 800c6da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	f06f 0202 	mvn.w	r2, #2
 800c6e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	3b20      	subs	r3, #32
 800c6e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
}
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	3714      	adds	r7, #20
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f6:	4770      	bx	lr
 800c6f8:	0800c6fd 	.word	0x0800c6fd

0800c6fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c6fc:	b480      	push	{r7}
 800c6fe:	b085      	sub	sp, #20
 800c700:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c702:	2300      	movs	r3, #0
 800c704:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c706:	4b13      	ldr	r3, [pc, #76]	@ (800c754 <prvTaskExitError+0x58>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c70e:	d00b      	beq.n	800c728 <prvTaskExitError+0x2c>
	__asm volatile
 800c710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c714:	f383 8811 	msr	BASEPRI, r3
 800c718:	f3bf 8f6f 	isb	sy
 800c71c:	f3bf 8f4f 	dsb	sy
 800c720:	60fb      	str	r3, [r7, #12]
}
 800c722:	bf00      	nop
 800c724:	bf00      	nop
 800c726:	e7fd      	b.n	800c724 <prvTaskExitError+0x28>
	__asm volatile
 800c728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c72c:	f383 8811 	msr	BASEPRI, r3
 800c730:	f3bf 8f6f 	isb	sy
 800c734:	f3bf 8f4f 	dsb	sy
 800c738:	60bb      	str	r3, [r7, #8]
}
 800c73a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c73c:	bf00      	nop
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d0fc      	beq.n	800c73e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c744:	bf00      	nop
 800c746:	bf00      	nop
 800c748:	3714      	adds	r7, #20
 800c74a:	46bd      	mov	sp, r7
 800c74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c750:	4770      	bx	lr
 800c752:	bf00      	nop
 800c754:	2000000c 	.word	0x2000000c
	...

0800c760 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c760:	4b07      	ldr	r3, [pc, #28]	@ (800c780 <pxCurrentTCBConst2>)
 800c762:	6819      	ldr	r1, [r3, #0]
 800c764:	6808      	ldr	r0, [r1, #0]
 800c766:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c76a:	f380 8809 	msr	PSP, r0
 800c76e:	f3bf 8f6f 	isb	sy
 800c772:	f04f 0000 	mov.w	r0, #0
 800c776:	f380 8811 	msr	BASEPRI, r0
 800c77a:	4770      	bx	lr
 800c77c:	f3af 8000 	nop.w

0800c780 <pxCurrentTCBConst2>:
 800c780:	20000b28 	.word	0x20000b28
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c784:	bf00      	nop
 800c786:	bf00      	nop

0800c788 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c788:	4808      	ldr	r0, [pc, #32]	@ (800c7ac <prvPortStartFirstTask+0x24>)
 800c78a:	6800      	ldr	r0, [r0, #0]
 800c78c:	6800      	ldr	r0, [r0, #0]
 800c78e:	f380 8808 	msr	MSP, r0
 800c792:	f04f 0000 	mov.w	r0, #0
 800c796:	f380 8814 	msr	CONTROL, r0
 800c79a:	b662      	cpsie	i
 800c79c:	b661      	cpsie	f
 800c79e:	f3bf 8f4f 	dsb	sy
 800c7a2:	f3bf 8f6f 	isb	sy
 800c7a6:	df00      	svc	0
 800c7a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c7aa:	bf00      	nop
 800c7ac:	e000ed08 	.word	0xe000ed08

0800c7b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b086      	sub	sp, #24
 800c7b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c7b6:	4b47      	ldr	r3, [pc, #284]	@ (800c8d4 <xPortStartScheduler+0x124>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	4a47      	ldr	r2, [pc, #284]	@ (800c8d8 <xPortStartScheduler+0x128>)
 800c7bc:	4293      	cmp	r3, r2
 800c7be:	d10b      	bne.n	800c7d8 <xPortStartScheduler+0x28>
	__asm volatile
 800c7c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7c4:	f383 8811 	msr	BASEPRI, r3
 800c7c8:	f3bf 8f6f 	isb	sy
 800c7cc:	f3bf 8f4f 	dsb	sy
 800c7d0:	613b      	str	r3, [r7, #16]
}
 800c7d2:	bf00      	nop
 800c7d4:	bf00      	nop
 800c7d6:	e7fd      	b.n	800c7d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c7d8:	4b3e      	ldr	r3, [pc, #248]	@ (800c8d4 <xPortStartScheduler+0x124>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	4a3f      	ldr	r2, [pc, #252]	@ (800c8dc <xPortStartScheduler+0x12c>)
 800c7de:	4293      	cmp	r3, r2
 800c7e0:	d10b      	bne.n	800c7fa <xPortStartScheduler+0x4a>
	__asm volatile
 800c7e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7e6:	f383 8811 	msr	BASEPRI, r3
 800c7ea:	f3bf 8f6f 	isb	sy
 800c7ee:	f3bf 8f4f 	dsb	sy
 800c7f2:	60fb      	str	r3, [r7, #12]
}
 800c7f4:	bf00      	nop
 800c7f6:	bf00      	nop
 800c7f8:	e7fd      	b.n	800c7f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c7fa:	4b39      	ldr	r3, [pc, #228]	@ (800c8e0 <xPortStartScheduler+0x130>)
 800c7fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c7fe:	697b      	ldr	r3, [r7, #20]
 800c800:	781b      	ldrb	r3, [r3, #0]
 800c802:	b2db      	uxtb	r3, r3
 800c804:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	22ff      	movs	r2, #255	@ 0xff
 800c80a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c80c:	697b      	ldr	r3, [r7, #20]
 800c80e:	781b      	ldrb	r3, [r3, #0]
 800c810:	b2db      	uxtb	r3, r3
 800c812:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c814:	78fb      	ldrb	r3, [r7, #3]
 800c816:	b2db      	uxtb	r3, r3
 800c818:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c81c:	b2da      	uxtb	r2, r3
 800c81e:	4b31      	ldr	r3, [pc, #196]	@ (800c8e4 <xPortStartScheduler+0x134>)
 800c820:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c822:	4b31      	ldr	r3, [pc, #196]	@ (800c8e8 <xPortStartScheduler+0x138>)
 800c824:	2207      	movs	r2, #7
 800c826:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c828:	e009      	b.n	800c83e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c82a:	4b2f      	ldr	r3, [pc, #188]	@ (800c8e8 <xPortStartScheduler+0x138>)
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	3b01      	subs	r3, #1
 800c830:	4a2d      	ldr	r2, [pc, #180]	@ (800c8e8 <xPortStartScheduler+0x138>)
 800c832:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c834:	78fb      	ldrb	r3, [r7, #3]
 800c836:	b2db      	uxtb	r3, r3
 800c838:	005b      	lsls	r3, r3, #1
 800c83a:	b2db      	uxtb	r3, r3
 800c83c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c83e:	78fb      	ldrb	r3, [r7, #3]
 800c840:	b2db      	uxtb	r3, r3
 800c842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c846:	2b80      	cmp	r3, #128	@ 0x80
 800c848:	d0ef      	beq.n	800c82a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c84a:	4b27      	ldr	r3, [pc, #156]	@ (800c8e8 <xPortStartScheduler+0x138>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	f1c3 0307 	rsb	r3, r3, #7
 800c852:	2b04      	cmp	r3, #4
 800c854:	d00b      	beq.n	800c86e <xPortStartScheduler+0xbe>
	__asm volatile
 800c856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c85a:	f383 8811 	msr	BASEPRI, r3
 800c85e:	f3bf 8f6f 	isb	sy
 800c862:	f3bf 8f4f 	dsb	sy
 800c866:	60bb      	str	r3, [r7, #8]
}
 800c868:	bf00      	nop
 800c86a:	bf00      	nop
 800c86c:	e7fd      	b.n	800c86a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c86e:	4b1e      	ldr	r3, [pc, #120]	@ (800c8e8 <xPortStartScheduler+0x138>)
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	021b      	lsls	r3, r3, #8
 800c874:	4a1c      	ldr	r2, [pc, #112]	@ (800c8e8 <xPortStartScheduler+0x138>)
 800c876:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c878:	4b1b      	ldr	r3, [pc, #108]	@ (800c8e8 <xPortStartScheduler+0x138>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c880:	4a19      	ldr	r2, [pc, #100]	@ (800c8e8 <xPortStartScheduler+0x138>)
 800c882:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	b2da      	uxtb	r2, r3
 800c888:	697b      	ldr	r3, [r7, #20]
 800c88a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c88c:	4b17      	ldr	r3, [pc, #92]	@ (800c8ec <xPortStartScheduler+0x13c>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	4a16      	ldr	r2, [pc, #88]	@ (800c8ec <xPortStartScheduler+0x13c>)
 800c892:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c896:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c898:	4b14      	ldr	r3, [pc, #80]	@ (800c8ec <xPortStartScheduler+0x13c>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	4a13      	ldr	r2, [pc, #76]	@ (800c8ec <xPortStartScheduler+0x13c>)
 800c89e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c8a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c8a4:	f000 f8da 	bl	800ca5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c8a8:	4b11      	ldr	r3, [pc, #68]	@ (800c8f0 <xPortStartScheduler+0x140>)
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c8ae:	f000 f8f9 	bl	800caa4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c8b2:	4b10      	ldr	r3, [pc, #64]	@ (800c8f4 <xPortStartScheduler+0x144>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	4a0f      	ldr	r2, [pc, #60]	@ (800c8f4 <xPortStartScheduler+0x144>)
 800c8b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c8bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c8be:	f7ff ff63 	bl	800c788 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c8c2:	f7ff f82d 	bl	800b920 <vTaskSwitchContext>
	prvTaskExitError();
 800c8c6:	f7ff ff19 	bl	800c6fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c8ca:	2300      	movs	r3, #0
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	3718      	adds	r7, #24
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd80      	pop	{r7, pc}
 800c8d4:	e000ed00 	.word	0xe000ed00
 800c8d8:	410fc271 	.word	0x410fc271
 800c8dc:	410fc270 	.word	0x410fc270
 800c8e0:	e000e400 	.word	0xe000e400
 800c8e4:	20001154 	.word	0x20001154
 800c8e8:	20001158 	.word	0x20001158
 800c8ec:	e000ed20 	.word	0xe000ed20
 800c8f0:	2000000c 	.word	0x2000000c
 800c8f4:	e000ef34 	.word	0xe000ef34

0800c8f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c8f8:	b480      	push	{r7}
 800c8fa:	b083      	sub	sp, #12
 800c8fc:	af00      	add	r7, sp, #0
	__asm volatile
 800c8fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c902:	f383 8811 	msr	BASEPRI, r3
 800c906:	f3bf 8f6f 	isb	sy
 800c90a:	f3bf 8f4f 	dsb	sy
 800c90e:	607b      	str	r3, [r7, #4]
}
 800c910:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c912:	4b10      	ldr	r3, [pc, #64]	@ (800c954 <vPortEnterCritical+0x5c>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	3301      	adds	r3, #1
 800c918:	4a0e      	ldr	r2, [pc, #56]	@ (800c954 <vPortEnterCritical+0x5c>)
 800c91a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c91c:	4b0d      	ldr	r3, [pc, #52]	@ (800c954 <vPortEnterCritical+0x5c>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	2b01      	cmp	r3, #1
 800c922:	d110      	bne.n	800c946 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c924:	4b0c      	ldr	r3, [pc, #48]	@ (800c958 <vPortEnterCritical+0x60>)
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	b2db      	uxtb	r3, r3
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d00b      	beq.n	800c946 <vPortEnterCritical+0x4e>
	__asm volatile
 800c92e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c932:	f383 8811 	msr	BASEPRI, r3
 800c936:	f3bf 8f6f 	isb	sy
 800c93a:	f3bf 8f4f 	dsb	sy
 800c93e:	603b      	str	r3, [r7, #0]
}
 800c940:	bf00      	nop
 800c942:	bf00      	nop
 800c944:	e7fd      	b.n	800c942 <vPortEnterCritical+0x4a>
	}
}
 800c946:	bf00      	nop
 800c948:	370c      	adds	r7, #12
 800c94a:	46bd      	mov	sp, r7
 800c94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c950:	4770      	bx	lr
 800c952:	bf00      	nop
 800c954:	2000000c 	.word	0x2000000c
 800c958:	e000ed04 	.word	0xe000ed04

0800c95c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c95c:	b480      	push	{r7}
 800c95e:	b083      	sub	sp, #12
 800c960:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c962:	4b12      	ldr	r3, [pc, #72]	@ (800c9ac <vPortExitCritical+0x50>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d10b      	bne.n	800c982 <vPortExitCritical+0x26>
	__asm volatile
 800c96a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c96e:	f383 8811 	msr	BASEPRI, r3
 800c972:	f3bf 8f6f 	isb	sy
 800c976:	f3bf 8f4f 	dsb	sy
 800c97a:	607b      	str	r3, [r7, #4]
}
 800c97c:	bf00      	nop
 800c97e:	bf00      	nop
 800c980:	e7fd      	b.n	800c97e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c982:	4b0a      	ldr	r3, [pc, #40]	@ (800c9ac <vPortExitCritical+0x50>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	3b01      	subs	r3, #1
 800c988:	4a08      	ldr	r2, [pc, #32]	@ (800c9ac <vPortExitCritical+0x50>)
 800c98a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c98c:	4b07      	ldr	r3, [pc, #28]	@ (800c9ac <vPortExitCritical+0x50>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d105      	bne.n	800c9a0 <vPortExitCritical+0x44>
 800c994:	2300      	movs	r3, #0
 800c996:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	f383 8811 	msr	BASEPRI, r3
}
 800c99e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c9a0:	bf00      	nop
 800c9a2:	370c      	adds	r7, #12
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9aa:	4770      	bx	lr
 800c9ac:	2000000c 	.word	0x2000000c

0800c9b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c9b0:	f3ef 8009 	mrs	r0, PSP
 800c9b4:	f3bf 8f6f 	isb	sy
 800c9b8:	4b15      	ldr	r3, [pc, #84]	@ (800ca10 <pxCurrentTCBConst>)
 800c9ba:	681a      	ldr	r2, [r3, #0]
 800c9bc:	f01e 0f10 	tst.w	lr, #16
 800c9c0:	bf08      	it	eq
 800c9c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c9c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9ca:	6010      	str	r0, [r2, #0]
 800c9cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c9d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c9d4:	f380 8811 	msr	BASEPRI, r0
 800c9d8:	f3bf 8f4f 	dsb	sy
 800c9dc:	f3bf 8f6f 	isb	sy
 800c9e0:	f7fe ff9e 	bl	800b920 <vTaskSwitchContext>
 800c9e4:	f04f 0000 	mov.w	r0, #0
 800c9e8:	f380 8811 	msr	BASEPRI, r0
 800c9ec:	bc09      	pop	{r0, r3}
 800c9ee:	6819      	ldr	r1, [r3, #0]
 800c9f0:	6808      	ldr	r0, [r1, #0]
 800c9f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9f6:	f01e 0f10 	tst.w	lr, #16
 800c9fa:	bf08      	it	eq
 800c9fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ca00:	f380 8809 	msr	PSP, r0
 800ca04:	f3bf 8f6f 	isb	sy
 800ca08:	4770      	bx	lr
 800ca0a:	bf00      	nop
 800ca0c:	f3af 8000 	nop.w

0800ca10 <pxCurrentTCBConst>:
 800ca10:	20000b28 	.word	0x20000b28
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ca14:	bf00      	nop
 800ca16:	bf00      	nop

0800ca18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b082      	sub	sp, #8
 800ca1c:	af00      	add	r7, sp, #0
	__asm volatile
 800ca1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca22:	f383 8811 	msr	BASEPRI, r3
 800ca26:	f3bf 8f6f 	isb	sy
 800ca2a:	f3bf 8f4f 	dsb	sy
 800ca2e:	607b      	str	r3, [r7, #4]
}
 800ca30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ca32:	f7fe febb 	bl	800b7ac <xTaskIncrementTick>
 800ca36:	4603      	mov	r3, r0
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d003      	beq.n	800ca44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ca3c:	4b06      	ldr	r3, [pc, #24]	@ (800ca58 <xPortSysTickHandler+0x40>)
 800ca3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca42:	601a      	str	r2, [r3, #0]
 800ca44:	2300      	movs	r3, #0
 800ca46:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	f383 8811 	msr	BASEPRI, r3
}
 800ca4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ca50:	bf00      	nop
 800ca52:	3708      	adds	r7, #8
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}
 800ca58:	e000ed04 	.word	0xe000ed04

0800ca5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ca5c:	b480      	push	{r7}
 800ca5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ca60:	4b0b      	ldr	r3, [pc, #44]	@ (800ca90 <vPortSetupTimerInterrupt+0x34>)
 800ca62:	2200      	movs	r2, #0
 800ca64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ca66:	4b0b      	ldr	r3, [pc, #44]	@ (800ca94 <vPortSetupTimerInterrupt+0x38>)
 800ca68:	2200      	movs	r2, #0
 800ca6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ca6c:	4b0a      	ldr	r3, [pc, #40]	@ (800ca98 <vPortSetupTimerInterrupt+0x3c>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	4a0a      	ldr	r2, [pc, #40]	@ (800ca9c <vPortSetupTimerInterrupt+0x40>)
 800ca72:	fba2 2303 	umull	r2, r3, r2, r3
 800ca76:	099b      	lsrs	r3, r3, #6
 800ca78:	4a09      	ldr	r2, [pc, #36]	@ (800caa0 <vPortSetupTimerInterrupt+0x44>)
 800ca7a:	3b01      	subs	r3, #1
 800ca7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ca7e:	4b04      	ldr	r3, [pc, #16]	@ (800ca90 <vPortSetupTimerInterrupt+0x34>)
 800ca80:	2207      	movs	r2, #7
 800ca82:	601a      	str	r2, [r3, #0]
}
 800ca84:	bf00      	nop
 800ca86:	46bd      	mov	sp, r7
 800ca88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8c:	4770      	bx	lr
 800ca8e:	bf00      	nop
 800ca90:	e000e010 	.word	0xe000e010
 800ca94:	e000e018 	.word	0xe000e018
 800ca98:	20000000 	.word	0x20000000
 800ca9c:	10624dd3 	.word	0x10624dd3
 800caa0:	e000e014 	.word	0xe000e014

0800caa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800caa4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800cab4 <vPortEnableVFP+0x10>
 800caa8:	6801      	ldr	r1, [r0, #0]
 800caaa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800caae:	6001      	str	r1, [r0, #0]
 800cab0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cab2:	bf00      	nop
 800cab4:	e000ed88 	.word	0xe000ed88

0800cab8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cab8:	b480      	push	{r7}
 800caba:	b085      	sub	sp, #20
 800cabc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cabe:	f3ef 8305 	mrs	r3, IPSR
 800cac2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	2b0f      	cmp	r3, #15
 800cac8:	d915      	bls.n	800caf6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800caca:	4a18      	ldr	r2, [pc, #96]	@ (800cb2c <vPortValidateInterruptPriority+0x74>)
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	4413      	add	r3, r2
 800cad0:	781b      	ldrb	r3, [r3, #0]
 800cad2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cad4:	4b16      	ldr	r3, [pc, #88]	@ (800cb30 <vPortValidateInterruptPriority+0x78>)
 800cad6:	781b      	ldrb	r3, [r3, #0]
 800cad8:	7afa      	ldrb	r2, [r7, #11]
 800cada:	429a      	cmp	r2, r3
 800cadc:	d20b      	bcs.n	800caf6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800cade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cae2:	f383 8811 	msr	BASEPRI, r3
 800cae6:	f3bf 8f6f 	isb	sy
 800caea:	f3bf 8f4f 	dsb	sy
 800caee:	607b      	str	r3, [r7, #4]
}
 800caf0:	bf00      	nop
 800caf2:	bf00      	nop
 800caf4:	e7fd      	b.n	800caf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800caf6:	4b0f      	ldr	r3, [pc, #60]	@ (800cb34 <vPortValidateInterruptPriority+0x7c>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800cafe:	4b0e      	ldr	r3, [pc, #56]	@ (800cb38 <vPortValidateInterruptPriority+0x80>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	429a      	cmp	r2, r3
 800cb04:	d90b      	bls.n	800cb1e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800cb06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb0a:	f383 8811 	msr	BASEPRI, r3
 800cb0e:	f3bf 8f6f 	isb	sy
 800cb12:	f3bf 8f4f 	dsb	sy
 800cb16:	603b      	str	r3, [r7, #0]
}
 800cb18:	bf00      	nop
 800cb1a:	bf00      	nop
 800cb1c:	e7fd      	b.n	800cb1a <vPortValidateInterruptPriority+0x62>
	}
 800cb1e:	bf00      	nop
 800cb20:	3714      	adds	r7, #20
 800cb22:	46bd      	mov	sp, r7
 800cb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb28:	4770      	bx	lr
 800cb2a:	bf00      	nop
 800cb2c:	e000e3f0 	.word	0xe000e3f0
 800cb30:	20001154 	.word	0x20001154
 800cb34:	e000ed0c 	.word	0xe000ed0c
 800cb38:	20001158 	.word	0x20001158

0800cb3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b08a      	sub	sp, #40	@ 0x28
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cb44:	2300      	movs	r3, #0
 800cb46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cb48:	f7fe fd74 	bl	800b634 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cb4c:	4b5c      	ldr	r3, [pc, #368]	@ (800ccc0 <pvPortMalloc+0x184>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d101      	bne.n	800cb58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cb54:	f000 f924 	bl	800cda0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cb58:	4b5a      	ldr	r3, [pc, #360]	@ (800ccc4 <pvPortMalloc+0x188>)
 800cb5a:	681a      	ldr	r2, [r3, #0]
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	4013      	ands	r3, r2
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	f040 8095 	bne.w	800cc90 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d01e      	beq.n	800cbaa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800cb6c:	2208      	movs	r2, #8
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	4413      	add	r3, r2
 800cb72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	f003 0307 	and.w	r3, r3, #7
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d015      	beq.n	800cbaa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	f023 0307 	bic.w	r3, r3, #7
 800cb84:	3308      	adds	r3, #8
 800cb86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	f003 0307 	and.w	r3, r3, #7
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d00b      	beq.n	800cbaa <pvPortMalloc+0x6e>
	__asm volatile
 800cb92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb96:	f383 8811 	msr	BASEPRI, r3
 800cb9a:	f3bf 8f6f 	isb	sy
 800cb9e:	f3bf 8f4f 	dsb	sy
 800cba2:	617b      	str	r3, [r7, #20]
}
 800cba4:	bf00      	nop
 800cba6:	bf00      	nop
 800cba8:	e7fd      	b.n	800cba6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d06f      	beq.n	800cc90 <pvPortMalloc+0x154>
 800cbb0:	4b45      	ldr	r3, [pc, #276]	@ (800ccc8 <pvPortMalloc+0x18c>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	687a      	ldr	r2, [r7, #4]
 800cbb6:	429a      	cmp	r2, r3
 800cbb8:	d86a      	bhi.n	800cc90 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cbba:	4b44      	ldr	r3, [pc, #272]	@ (800cccc <pvPortMalloc+0x190>)
 800cbbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cbbe:	4b43      	ldr	r3, [pc, #268]	@ (800cccc <pvPortMalloc+0x190>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cbc4:	e004      	b.n	800cbd0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800cbc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cbca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cbd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbd2:	685b      	ldr	r3, [r3, #4]
 800cbd4:	687a      	ldr	r2, [r7, #4]
 800cbd6:	429a      	cmp	r2, r3
 800cbd8:	d903      	bls.n	800cbe2 <pvPortMalloc+0xa6>
 800cbda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d1f1      	bne.n	800cbc6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cbe2:	4b37      	ldr	r3, [pc, #220]	@ (800ccc0 <pvPortMalloc+0x184>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cbe8:	429a      	cmp	r2, r3
 800cbea:	d051      	beq.n	800cc90 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cbec:	6a3b      	ldr	r3, [r7, #32]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	2208      	movs	r2, #8
 800cbf2:	4413      	add	r3, r2
 800cbf4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cbf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbf8:	681a      	ldr	r2, [r3, #0]
 800cbfa:	6a3b      	ldr	r3, [r7, #32]
 800cbfc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cbfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc00:	685a      	ldr	r2, [r3, #4]
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	1ad2      	subs	r2, r2, r3
 800cc06:	2308      	movs	r3, #8
 800cc08:	005b      	lsls	r3, r3, #1
 800cc0a:	429a      	cmp	r2, r3
 800cc0c:	d920      	bls.n	800cc50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cc0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	4413      	add	r3, r2
 800cc14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc16:	69bb      	ldr	r3, [r7, #24]
 800cc18:	f003 0307 	and.w	r3, r3, #7
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d00b      	beq.n	800cc38 <pvPortMalloc+0xfc>
	__asm volatile
 800cc20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc24:	f383 8811 	msr	BASEPRI, r3
 800cc28:	f3bf 8f6f 	isb	sy
 800cc2c:	f3bf 8f4f 	dsb	sy
 800cc30:	613b      	str	r3, [r7, #16]
}
 800cc32:	bf00      	nop
 800cc34:	bf00      	nop
 800cc36:	e7fd      	b.n	800cc34 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cc38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc3a:	685a      	ldr	r2, [r3, #4]
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	1ad2      	subs	r2, r2, r3
 800cc40:	69bb      	ldr	r3, [r7, #24]
 800cc42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cc44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc46:	687a      	ldr	r2, [r7, #4]
 800cc48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cc4a:	69b8      	ldr	r0, [r7, #24]
 800cc4c:	f000 f90a 	bl	800ce64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cc50:	4b1d      	ldr	r3, [pc, #116]	@ (800ccc8 <pvPortMalloc+0x18c>)
 800cc52:	681a      	ldr	r2, [r3, #0]
 800cc54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc56:	685b      	ldr	r3, [r3, #4]
 800cc58:	1ad3      	subs	r3, r2, r3
 800cc5a:	4a1b      	ldr	r2, [pc, #108]	@ (800ccc8 <pvPortMalloc+0x18c>)
 800cc5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cc5e:	4b1a      	ldr	r3, [pc, #104]	@ (800ccc8 <pvPortMalloc+0x18c>)
 800cc60:	681a      	ldr	r2, [r3, #0]
 800cc62:	4b1b      	ldr	r3, [pc, #108]	@ (800ccd0 <pvPortMalloc+0x194>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	429a      	cmp	r2, r3
 800cc68:	d203      	bcs.n	800cc72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cc6a:	4b17      	ldr	r3, [pc, #92]	@ (800ccc8 <pvPortMalloc+0x18c>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	4a18      	ldr	r2, [pc, #96]	@ (800ccd0 <pvPortMalloc+0x194>)
 800cc70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cc72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc74:	685a      	ldr	r2, [r3, #4]
 800cc76:	4b13      	ldr	r3, [pc, #76]	@ (800ccc4 <pvPortMalloc+0x188>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	431a      	orrs	r2, r3
 800cc7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cc80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc82:	2200      	movs	r2, #0
 800cc84:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cc86:	4b13      	ldr	r3, [pc, #76]	@ (800ccd4 <pvPortMalloc+0x198>)
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	3301      	adds	r3, #1
 800cc8c:	4a11      	ldr	r2, [pc, #68]	@ (800ccd4 <pvPortMalloc+0x198>)
 800cc8e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cc90:	f7fe fcde 	bl	800b650 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc94:	69fb      	ldr	r3, [r7, #28]
 800cc96:	f003 0307 	and.w	r3, r3, #7
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d00b      	beq.n	800ccb6 <pvPortMalloc+0x17a>
	__asm volatile
 800cc9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cca2:	f383 8811 	msr	BASEPRI, r3
 800cca6:	f3bf 8f6f 	isb	sy
 800ccaa:	f3bf 8f4f 	dsb	sy
 800ccae:	60fb      	str	r3, [r7, #12]
}
 800ccb0:	bf00      	nop
 800ccb2:	bf00      	nop
 800ccb4:	e7fd      	b.n	800ccb2 <pvPortMalloc+0x176>
	return pvReturn;
 800ccb6:	69fb      	ldr	r3, [r7, #28]
}
 800ccb8:	4618      	mov	r0, r3
 800ccba:	3728      	adds	r7, #40	@ 0x28
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	bd80      	pop	{r7, pc}
 800ccc0:	200028d4 	.word	0x200028d4
 800ccc4:	200028e8 	.word	0x200028e8
 800ccc8:	200028d8 	.word	0x200028d8
 800cccc:	200028cc 	.word	0x200028cc
 800ccd0:	200028dc 	.word	0x200028dc
 800ccd4:	200028e0 	.word	0x200028e0

0800ccd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b086      	sub	sp, #24
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d04f      	beq.n	800cd8a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ccea:	2308      	movs	r3, #8
 800ccec:	425b      	negs	r3, r3
 800ccee:	697a      	ldr	r2, [r7, #20]
 800ccf0:	4413      	add	r3, r2
 800ccf2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ccf8:	693b      	ldr	r3, [r7, #16]
 800ccfa:	685a      	ldr	r2, [r3, #4]
 800ccfc:	4b25      	ldr	r3, [pc, #148]	@ (800cd94 <vPortFree+0xbc>)
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	4013      	ands	r3, r2
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d10b      	bne.n	800cd1e <vPortFree+0x46>
	__asm volatile
 800cd06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd0a:	f383 8811 	msr	BASEPRI, r3
 800cd0e:	f3bf 8f6f 	isb	sy
 800cd12:	f3bf 8f4f 	dsb	sy
 800cd16:	60fb      	str	r3, [r7, #12]
}
 800cd18:	bf00      	nop
 800cd1a:	bf00      	nop
 800cd1c:	e7fd      	b.n	800cd1a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cd1e:	693b      	ldr	r3, [r7, #16]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d00b      	beq.n	800cd3e <vPortFree+0x66>
	__asm volatile
 800cd26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd2a:	f383 8811 	msr	BASEPRI, r3
 800cd2e:	f3bf 8f6f 	isb	sy
 800cd32:	f3bf 8f4f 	dsb	sy
 800cd36:	60bb      	str	r3, [r7, #8]
}
 800cd38:	bf00      	nop
 800cd3a:	bf00      	nop
 800cd3c:	e7fd      	b.n	800cd3a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cd3e:	693b      	ldr	r3, [r7, #16]
 800cd40:	685a      	ldr	r2, [r3, #4]
 800cd42:	4b14      	ldr	r3, [pc, #80]	@ (800cd94 <vPortFree+0xbc>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	4013      	ands	r3, r2
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d01e      	beq.n	800cd8a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cd4c:	693b      	ldr	r3, [r7, #16]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d11a      	bne.n	800cd8a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cd54:	693b      	ldr	r3, [r7, #16]
 800cd56:	685a      	ldr	r2, [r3, #4]
 800cd58:	4b0e      	ldr	r3, [pc, #56]	@ (800cd94 <vPortFree+0xbc>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	43db      	mvns	r3, r3
 800cd5e:	401a      	ands	r2, r3
 800cd60:	693b      	ldr	r3, [r7, #16]
 800cd62:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cd64:	f7fe fc66 	bl	800b634 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cd68:	693b      	ldr	r3, [r7, #16]
 800cd6a:	685a      	ldr	r2, [r3, #4]
 800cd6c:	4b0a      	ldr	r3, [pc, #40]	@ (800cd98 <vPortFree+0xc0>)
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	4413      	add	r3, r2
 800cd72:	4a09      	ldr	r2, [pc, #36]	@ (800cd98 <vPortFree+0xc0>)
 800cd74:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cd76:	6938      	ldr	r0, [r7, #16]
 800cd78:	f000 f874 	bl	800ce64 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cd7c:	4b07      	ldr	r3, [pc, #28]	@ (800cd9c <vPortFree+0xc4>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	3301      	adds	r3, #1
 800cd82:	4a06      	ldr	r2, [pc, #24]	@ (800cd9c <vPortFree+0xc4>)
 800cd84:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cd86:	f7fe fc63 	bl	800b650 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cd8a:	bf00      	nop
 800cd8c:	3718      	adds	r7, #24
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	bd80      	pop	{r7, pc}
 800cd92:	bf00      	nop
 800cd94:	200028e8 	.word	0x200028e8
 800cd98:	200028d8 	.word	0x200028d8
 800cd9c:	200028e4 	.word	0x200028e4

0800cda0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cda0:	b480      	push	{r7}
 800cda2:	b085      	sub	sp, #20
 800cda4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cda6:	f241 7370 	movw	r3, #6000	@ 0x1770
 800cdaa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cdac:	4b27      	ldr	r3, [pc, #156]	@ (800ce4c <prvHeapInit+0xac>)
 800cdae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	f003 0307 	and.w	r3, r3, #7
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d00c      	beq.n	800cdd4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	3307      	adds	r3, #7
 800cdbe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	f023 0307 	bic.w	r3, r3, #7
 800cdc6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cdc8:	68ba      	ldr	r2, [r7, #8]
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	1ad3      	subs	r3, r2, r3
 800cdce:	4a1f      	ldr	r2, [pc, #124]	@ (800ce4c <prvHeapInit+0xac>)
 800cdd0:	4413      	add	r3, r2
 800cdd2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cdd8:	4a1d      	ldr	r2, [pc, #116]	@ (800ce50 <prvHeapInit+0xb0>)
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cdde:	4b1c      	ldr	r3, [pc, #112]	@ (800ce50 <prvHeapInit+0xb0>)
 800cde0:	2200      	movs	r2, #0
 800cde2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	68ba      	ldr	r2, [r7, #8]
 800cde8:	4413      	add	r3, r2
 800cdea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cdec:	2208      	movs	r2, #8
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	1a9b      	subs	r3, r3, r2
 800cdf2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	f023 0307 	bic.w	r3, r3, #7
 800cdfa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	4a15      	ldr	r2, [pc, #84]	@ (800ce54 <prvHeapInit+0xb4>)
 800ce00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ce02:	4b14      	ldr	r3, [pc, #80]	@ (800ce54 <prvHeapInit+0xb4>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	2200      	movs	r2, #0
 800ce08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ce0a:	4b12      	ldr	r3, [pc, #72]	@ (800ce54 <prvHeapInit+0xb4>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	2200      	movs	r2, #0
 800ce10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	68fa      	ldr	r2, [r7, #12]
 800ce1a:	1ad2      	subs	r2, r2, r3
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ce20:	4b0c      	ldr	r3, [pc, #48]	@ (800ce54 <prvHeapInit+0xb4>)
 800ce22:	681a      	ldr	r2, [r3, #0]
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	685b      	ldr	r3, [r3, #4]
 800ce2c:	4a0a      	ldr	r2, [pc, #40]	@ (800ce58 <prvHeapInit+0xb8>)
 800ce2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	685b      	ldr	r3, [r3, #4]
 800ce34:	4a09      	ldr	r2, [pc, #36]	@ (800ce5c <prvHeapInit+0xbc>)
 800ce36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ce38:	4b09      	ldr	r3, [pc, #36]	@ (800ce60 <prvHeapInit+0xc0>)
 800ce3a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ce3e:	601a      	str	r2, [r3, #0]
}
 800ce40:	bf00      	nop
 800ce42:	3714      	adds	r7, #20
 800ce44:	46bd      	mov	sp, r7
 800ce46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4a:	4770      	bx	lr
 800ce4c:	2000115c 	.word	0x2000115c
 800ce50:	200028cc 	.word	0x200028cc
 800ce54:	200028d4 	.word	0x200028d4
 800ce58:	200028dc 	.word	0x200028dc
 800ce5c:	200028d8 	.word	0x200028d8
 800ce60:	200028e8 	.word	0x200028e8

0800ce64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ce64:	b480      	push	{r7}
 800ce66:	b085      	sub	sp, #20
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ce6c:	4b28      	ldr	r3, [pc, #160]	@ (800cf10 <prvInsertBlockIntoFreeList+0xac>)
 800ce6e:	60fb      	str	r3, [r7, #12]
 800ce70:	e002      	b.n	800ce78 <prvInsertBlockIntoFreeList+0x14>
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	60fb      	str	r3, [r7, #12]
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	687a      	ldr	r2, [r7, #4]
 800ce7e:	429a      	cmp	r2, r3
 800ce80:	d8f7      	bhi.n	800ce72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	685b      	ldr	r3, [r3, #4]
 800ce8a:	68ba      	ldr	r2, [r7, #8]
 800ce8c:	4413      	add	r3, r2
 800ce8e:	687a      	ldr	r2, [r7, #4]
 800ce90:	429a      	cmp	r2, r3
 800ce92:	d108      	bne.n	800cea6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	685a      	ldr	r2, [r3, #4]
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	685b      	ldr	r3, [r3, #4]
 800ce9c:	441a      	add	r2, r3
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	685b      	ldr	r3, [r3, #4]
 800ceae:	68ba      	ldr	r2, [r7, #8]
 800ceb0:	441a      	add	r2, r3
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	429a      	cmp	r2, r3
 800ceb8:	d118      	bne.n	800ceec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	681a      	ldr	r2, [r3, #0]
 800cebe:	4b15      	ldr	r3, [pc, #84]	@ (800cf14 <prvInsertBlockIntoFreeList+0xb0>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	429a      	cmp	r2, r3
 800cec4:	d00d      	beq.n	800cee2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	685a      	ldr	r2, [r3, #4]
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	685b      	ldr	r3, [r3, #4]
 800ced0:	441a      	add	r2, r3
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	681a      	ldr	r2, [r3, #0]
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	601a      	str	r2, [r3, #0]
 800cee0:	e008      	b.n	800cef4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cee2:	4b0c      	ldr	r3, [pc, #48]	@ (800cf14 <prvInsertBlockIntoFreeList+0xb0>)
 800cee4:	681a      	ldr	r2, [r3, #0]
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	601a      	str	r2, [r3, #0]
 800ceea:	e003      	b.n	800cef4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	681a      	ldr	r2, [r3, #0]
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cef4:	68fa      	ldr	r2, [r7, #12]
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	429a      	cmp	r2, r3
 800cefa:	d002      	beq.n	800cf02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	687a      	ldr	r2, [r7, #4]
 800cf00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cf02:	bf00      	nop
 800cf04:	3714      	adds	r7, #20
 800cf06:	46bd      	mov	sp, r7
 800cf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0c:	4770      	bx	lr
 800cf0e:	bf00      	nop
 800cf10:	200028cc 	.word	0x200028cc
 800cf14:	200028d4 	.word	0x200028d4

0800cf18 <_ZdlPvj>:
 800cf18:	f000 b800 	b.w	800cf1c <_ZdlPv>

0800cf1c <_ZdlPv>:
 800cf1c:	f000 b800 	b.w	800cf20 <free>

0800cf20 <free>:
 800cf20:	4b02      	ldr	r3, [pc, #8]	@ (800cf2c <free+0xc>)
 800cf22:	4601      	mov	r1, r0
 800cf24:	6818      	ldr	r0, [r3, #0]
 800cf26:	f000 b98d 	b.w	800d244 <_free_r>
 800cf2a:	bf00      	nop
 800cf2c:	20000010 	.word	0x20000010

0800cf30 <sbrk_aligned>:
 800cf30:	b570      	push	{r4, r5, r6, lr}
 800cf32:	4e0f      	ldr	r6, [pc, #60]	@ (800cf70 <sbrk_aligned+0x40>)
 800cf34:	460c      	mov	r4, r1
 800cf36:	6831      	ldr	r1, [r6, #0]
 800cf38:	4605      	mov	r5, r0
 800cf3a:	b911      	cbnz	r1, 800cf42 <sbrk_aligned+0x12>
 800cf3c:	f000 f938 	bl	800d1b0 <_sbrk_r>
 800cf40:	6030      	str	r0, [r6, #0]
 800cf42:	4621      	mov	r1, r4
 800cf44:	4628      	mov	r0, r5
 800cf46:	f000 f933 	bl	800d1b0 <_sbrk_r>
 800cf4a:	1c43      	adds	r3, r0, #1
 800cf4c:	d103      	bne.n	800cf56 <sbrk_aligned+0x26>
 800cf4e:	f04f 34ff 	mov.w	r4, #4294967295
 800cf52:	4620      	mov	r0, r4
 800cf54:	bd70      	pop	{r4, r5, r6, pc}
 800cf56:	1cc4      	adds	r4, r0, #3
 800cf58:	f024 0403 	bic.w	r4, r4, #3
 800cf5c:	42a0      	cmp	r0, r4
 800cf5e:	d0f8      	beq.n	800cf52 <sbrk_aligned+0x22>
 800cf60:	1a21      	subs	r1, r4, r0
 800cf62:	4628      	mov	r0, r5
 800cf64:	f000 f924 	bl	800d1b0 <_sbrk_r>
 800cf68:	3001      	adds	r0, #1
 800cf6a:	d1f2      	bne.n	800cf52 <sbrk_aligned+0x22>
 800cf6c:	e7ef      	b.n	800cf4e <sbrk_aligned+0x1e>
 800cf6e:	bf00      	nop
 800cf70:	200028ec 	.word	0x200028ec

0800cf74 <_malloc_r>:
 800cf74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf78:	1ccd      	adds	r5, r1, #3
 800cf7a:	f025 0503 	bic.w	r5, r5, #3
 800cf7e:	3508      	adds	r5, #8
 800cf80:	2d0c      	cmp	r5, #12
 800cf82:	bf38      	it	cc
 800cf84:	250c      	movcc	r5, #12
 800cf86:	2d00      	cmp	r5, #0
 800cf88:	4606      	mov	r6, r0
 800cf8a:	db01      	blt.n	800cf90 <_malloc_r+0x1c>
 800cf8c:	42a9      	cmp	r1, r5
 800cf8e:	d904      	bls.n	800cf9a <_malloc_r+0x26>
 800cf90:	230c      	movs	r3, #12
 800cf92:	6033      	str	r3, [r6, #0]
 800cf94:	2000      	movs	r0, #0
 800cf96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d070 <_malloc_r+0xfc>
 800cf9e:	f000 f869 	bl	800d074 <__malloc_lock>
 800cfa2:	f8d8 3000 	ldr.w	r3, [r8]
 800cfa6:	461c      	mov	r4, r3
 800cfa8:	bb44      	cbnz	r4, 800cffc <_malloc_r+0x88>
 800cfaa:	4629      	mov	r1, r5
 800cfac:	4630      	mov	r0, r6
 800cfae:	f7ff ffbf 	bl	800cf30 <sbrk_aligned>
 800cfb2:	1c43      	adds	r3, r0, #1
 800cfb4:	4604      	mov	r4, r0
 800cfb6:	d158      	bne.n	800d06a <_malloc_r+0xf6>
 800cfb8:	f8d8 4000 	ldr.w	r4, [r8]
 800cfbc:	4627      	mov	r7, r4
 800cfbe:	2f00      	cmp	r7, #0
 800cfc0:	d143      	bne.n	800d04a <_malloc_r+0xd6>
 800cfc2:	2c00      	cmp	r4, #0
 800cfc4:	d04b      	beq.n	800d05e <_malloc_r+0xea>
 800cfc6:	6823      	ldr	r3, [r4, #0]
 800cfc8:	4639      	mov	r1, r7
 800cfca:	4630      	mov	r0, r6
 800cfcc:	eb04 0903 	add.w	r9, r4, r3
 800cfd0:	f000 f8ee 	bl	800d1b0 <_sbrk_r>
 800cfd4:	4581      	cmp	r9, r0
 800cfd6:	d142      	bne.n	800d05e <_malloc_r+0xea>
 800cfd8:	6821      	ldr	r1, [r4, #0]
 800cfda:	1a6d      	subs	r5, r5, r1
 800cfdc:	4629      	mov	r1, r5
 800cfde:	4630      	mov	r0, r6
 800cfe0:	f7ff ffa6 	bl	800cf30 <sbrk_aligned>
 800cfe4:	3001      	adds	r0, #1
 800cfe6:	d03a      	beq.n	800d05e <_malloc_r+0xea>
 800cfe8:	6823      	ldr	r3, [r4, #0]
 800cfea:	442b      	add	r3, r5
 800cfec:	6023      	str	r3, [r4, #0]
 800cfee:	f8d8 3000 	ldr.w	r3, [r8]
 800cff2:	685a      	ldr	r2, [r3, #4]
 800cff4:	bb62      	cbnz	r2, 800d050 <_malloc_r+0xdc>
 800cff6:	f8c8 7000 	str.w	r7, [r8]
 800cffa:	e00f      	b.n	800d01c <_malloc_r+0xa8>
 800cffc:	6822      	ldr	r2, [r4, #0]
 800cffe:	1b52      	subs	r2, r2, r5
 800d000:	d420      	bmi.n	800d044 <_malloc_r+0xd0>
 800d002:	2a0b      	cmp	r2, #11
 800d004:	d917      	bls.n	800d036 <_malloc_r+0xc2>
 800d006:	1961      	adds	r1, r4, r5
 800d008:	42a3      	cmp	r3, r4
 800d00a:	6025      	str	r5, [r4, #0]
 800d00c:	bf18      	it	ne
 800d00e:	6059      	strne	r1, [r3, #4]
 800d010:	6863      	ldr	r3, [r4, #4]
 800d012:	bf08      	it	eq
 800d014:	f8c8 1000 	streq.w	r1, [r8]
 800d018:	5162      	str	r2, [r4, r5]
 800d01a:	604b      	str	r3, [r1, #4]
 800d01c:	4630      	mov	r0, r6
 800d01e:	f000 f82f 	bl	800d080 <__malloc_unlock>
 800d022:	f104 000b 	add.w	r0, r4, #11
 800d026:	1d23      	adds	r3, r4, #4
 800d028:	f020 0007 	bic.w	r0, r0, #7
 800d02c:	1ac2      	subs	r2, r0, r3
 800d02e:	bf1c      	itt	ne
 800d030:	1a1b      	subne	r3, r3, r0
 800d032:	50a3      	strne	r3, [r4, r2]
 800d034:	e7af      	b.n	800cf96 <_malloc_r+0x22>
 800d036:	6862      	ldr	r2, [r4, #4]
 800d038:	42a3      	cmp	r3, r4
 800d03a:	bf0c      	ite	eq
 800d03c:	f8c8 2000 	streq.w	r2, [r8]
 800d040:	605a      	strne	r2, [r3, #4]
 800d042:	e7eb      	b.n	800d01c <_malloc_r+0xa8>
 800d044:	4623      	mov	r3, r4
 800d046:	6864      	ldr	r4, [r4, #4]
 800d048:	e7ae      	b.n	800cfa8 <_malloc_r+0x34>
 800d04a:	463c      	mov	r4, r7
 800d04c:	687f      	ldr	r7, [r7, #4]
 800d04e:	e7b6      	b.n	800cfbe <_malloc_r+0x4a>
 800d050:	461a      	mov	r2, r3
 800d052:	685b      	ldr	r3, [r3, #4]
 800d054:	42a3      	cmp	r3, r4
 800d056:	d1fb      	bne.n	800d050 <_malloc_r+0xdc>
 800d058:	2300      	movs	r3, #0
 800d05a:	6053      	str	r3, [r2, #4]
 800d05c:	e7de      	b.n	800d01c <_malloc_r+0xa8>
 800d05e:	230c      	movs	r3, #12
 800d060:	6033      	str	r3, [r6, #0]
 800d062:	4630      	mov	r0, r6
 800d064:	f000 f80c 	bl	800d080 <__malloc_unlock>
 800d068:	e794      	b.n	800cf94 <_malloc_r+0x20>
 800d06a:	6005      	str	r5, [r0, #0]
 800d06c:	e7d6      	b.n	800d01c <_malloc_r+0xa8>
 800d06e:	bf00      	nop
 800d070:	200028f0 	.word	0x200028f0

0800d074 <__malloc_lock>:
 800d074:	4801      	ldr	r0, [pc, #4]	@ (800d07c <__malloc_lock+0x8>)
 800d076:	f000 b8d5 	b.w	800d224 <__retarget_lock_acquire_recursive>
 800d07a:	bf00      	nop
 800d07c:	20002a30 	.word	0x20002a30

0800d080 <__malloc_unlock>:
 800d080:	4801      	ldr	r0, [pc, #4]	@ (800d088 <__malloc_unlock+0x8>)
 800d082:	f000 b8d0 	b.w	800d226 <__retarget_lock_release_recursive>
 800d086:	bf00      	nop
 800d088:	20002a30 	.word	0x20002a30

0800d08c <sniprintf>:
 800d08c:	b40c      	push	{r2, r3}
 800d08e:	b530      	push	{r4, r5, lr}
 800d090:	4b17      	ldr	r3, [pc, #92]	@ (800d0f0 <sniprintf+0x64>)
 800d092:	1e0c      	subs	r4, r1, #0
 800d094:	681d      	ldr	r5, [r3, #0]
 800d096:	b09d      	sub	sp, #116	@ 0x74
 800d098:	da08      	bge.n	800d0ac <sniprintf+0x20>
 800d09a:	238b      	movs	r3, #139	@ 0x8b
 800d09c:	602b      	str	r3, [r5, #0]
 800d09e:	f04f 30ff 	mov.w	r0, #4294967295
 800d0a2:	b01d      	add	sp, #116	@ 0x74
 800d0a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d0a8:	b002      	add	sp, #8
 800d0aa:	4770      	bx	lr
 800d0ac:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d0b0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d0b4:	bf14      	ite	ne
 800d0b6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d0ba:	4623      	moveq	r3, r4
 800d0bc:	9304      	str	r3, [sp, #16]
 800d0be:	9307      	str	r3, [sp, #28]
 800d0c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d0c4:	9002      	str	r0, [sp, #8]
 800d0c6:	9006      	str	r0, [sp, #24]
 800d0c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d0cc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d0ce:	ab21      	add	r3, sp, #132	@ 0x84
 800d0d0:	a902      	add	r1, sp, #8
 800d0d2:	4628      	mov	r0, r5
 800d0d4:	9301      	str	r3, [sp, #4]
 800d0d6:	f000 f95b 	bl	800d390 <_svfiprintf_r>
 800d0da:	1c43      	adds	r3, r0, #1
 800d0dc:	bfbc      	itt	lt
 800d0de:	238b      	movlt	r3, #139	@ 0x8b
 800d0e0:	602b      	strlt	r3, [r5, #0]
 800d0e2:	2c00      	cmp	r4, #0
 800d0e4:	d0dd      	beq.n	800d0a2 <sniprintf+0x16>
 800d0e6:	9b02      	ldr	r3, [sp, #8]
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	701a      	strb	r2, [r3, #0]
 800d0ec:	e7d9      	b.n	800d0a2 <sniprintf+0x16>
 800d0ee:	bf00      	nop
 800d0f0:	20000010 	.word	0x20000010

0800d0f4 <memset>:
 800d0f4:	4402      	add	r2, r0
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	4293      	cmp	r3, r2
 800d0fa:	d100      	bne.n	800d0fe <memset+0xa>
 800d0fc:	4770      	bx	lr
 800d0fe:	f803 1b01 	strb.w	r1, [r3], #1
 800d102:	e7f9      	b.n	800d0f8 <memset+0x4>

0800d104 <_reclaim_reent>:
 800d104:	4b29      	ldr	r3, [pc, #164]	@ (800d1ac <_reclaim_reent+0xa8>)
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	4283      	cmp	r3, r0
 800d10a:	b570      	push	{r4, r5, r6, lr}
 800d10c:	4604      	mov	r4, r0
 800d10e:	d04b      	beq.n	800d1a8 <_reclaim_reent+0xa4>
 800d110:	69c3      	ldr	r3, [r0, #28]
 800d112:	b1ab      	cbz	r3, 800d140 <_reclaim_reent+0x3c>
 800d114:	68db      	ldr	r3, [r3, #12]
 800d116:	b16b      	cbz	r3, 800d134 <_reclaim_reent+0x30>
 800d118:	2500      	movs	r5, #0
 800d11a:	69e3      	ldr	r3, [r4, #28]
 800d11c:	68db      	ldr	r3, [r3, #12]
 800d11e:	5959      	ldr	r1, [r3, r5]
 800d120:	2900      	cmp	r1, #0
 800d122:	d13b      	bne.n	800d19c <_reclaim_reent+0x98>
 800d124:	3504      	adds	r5, #4
 800d126:	2d80      	cmp	r5, #128	@ 0x80
 800d128:	d1f7      	bne.n	800d11a <_reclaim_reent+0x16>
 800d12a:	69e3      	ldr	r3, [r4, #28]
 800d12c:	4620      	mov	r0, r4
 800d12e:	68d9      	ldr	r1, [r3, #12]
 800d130:	f000 f888 	bl	800d244 <_free_r>
 800d134:	69e3      	ldr	r3, [r4, #28]
 800d136:	6819      	ldr	r1, [r3, #0]
 800d138:	b111      	cbz	r1, 800d140 <_reclaim_reent+0x3c>
 800d13a:	4620      	mov	r0, r4
 800d13c:	f000 f882 	bl	800d244 <_free_r>
 800d140:	6961      	ldr	r1, [r4, #20]
 800d142:	b111      	cbz	r1, 800d14a <_reclaim_reent+0x46>
 800d144:	4620      	mov	r0, r4
 800d146:	f000 f87d 	bl	800d244 <_free_r>
 800d14a:	69e1      	ldr	r1, [r4, #28]
 800d14c:	b111      	cbz	r1, 800d154 <_reclaim_reent+0x50>
 800d14e:	4620      	mov	r0, r4
 800d150:	f000 f878 	bl	800d244 <_free_r>
 800d154:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d156:	b111      	cbz	r1, 800d15e <_reclaim_reent+0x5a>
 800d158:	4620      	mov	r0, r4
 800d15a:	f000 f873 	bl	800d244 <_free_r>
 800d15e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d160:	b111      	cbz	r1, 800d168 <_reclaim_reent+0x64>
 800d162:	4620      	mov	r0, r4
 800d164:	f000 f86e 	bl	800d244 <_free_r>
 800d168:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800d16a:	b111      	cbz	r1, 800d172 <_reclaim_reent+0x6e>
 800d16c:	4620      	mov	r0, r4
 800d16e:	f000 f869 	bl	800d244 <_free_r>
 800d172:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d174:	b111      	cbz	r1, 800d17c <_reclaim_reent+0x78>
 800d176:	4620      	mov	r0, r4
 800d178:	f000 f864 	bl	800d244 <_free_r>
 800d17c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800d17e:	b111      	cbz	r1, 800d186 <_reclaim_reent+0x82>
 800d180:	4620      	mov	r0, r4
 800d182:	f000 f85f 	bl	800d244 <_free_r>
 800d186:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d188:	b111      	cbz	r1, 800d190 <_reclaim_reent+0x8c>
 800d18a:	4620      	mov	r0, r4
 800d18c:	f000 f85a 	bl	800d244 <_free_r>
 800d190:	6a23      	ldr	r3, [r4, #32]
 800d192:	b14b      	cbz	r3, 800d1a8 <_reclaim_reent+0xa4>
 800d194:	4620      	mov	r0, r4
 800d196:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d19a:	4718      	bx	r3
 800d19c:	680e      	ldr	r6, [r1, #0]
 800d19e:	4620      	mov	r0, r4
 800d1a0:	f000 f850 	bl	800d244 <_free_r>
 800d1a4:	4631      	mov	r1, r6
 800d1a6:	e7bb      	b.n	800d120 <_reclaim_reent+0x1c>
 800d1a8:	bd70      	pop	{r4, r5, r6, pc}
 800d1aa:	bf00      	nop
 800d1ac:	20000010 	.word	0x20000010

0800d1b0 <_sbrk_r>:
 800d1b0:	b538      	push	{r3, r4, r5, lr}
 800d1b2:	4d06      	ldr	r5, [pc, #24]	@ (800d1cc <_sbrk_r+0x1c>)
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	4604      	mov	r4, r0
 800d1b8:	4608      	mov	r0, r1
 800d1ba:	602b      	str	r3, [r5, #0]
 800d1bc:	f7f5 f9c8 	bl	8002550 <_sbrk>
 800d1c0:	1c43      	adds	r3, r0, #1
 800d1c2:	d102      	bne.n	800d1ca <_sbrk_r+0x1a>
 800d1c4:	682b      	ldr	r3, [r5, #0]
 800d1c6:	b103      	cbz	r3, 800d1ca <_sbrk_r+0x1a>
 800d1c8:	6023      	str	r3, [r4, #0]
 800d1ca:	bd38      	pop	{r3, r4, r5, pc}
 800d1cc:	20002a2c 	.word	0x20002a2c

0800d1d0 <__errno>:
 800d1d0:	4b01      	ldr	r3, [pc, #4]	@ (800d1d8 <__errno+0x8>)
 800d1d2:	6818      	ldr	r0, [r3, #0]
 800d1d4:	4770      	bx	lr
 800d1d6:	bf00      	nop
 800d1d8:	20000010 	.word	0x20000010

0800d1dc <__libc_init_array>:
 800d1dc:	b570      	push	{r4, r5, r6, lr}
 800d1de:	4d0d      	ldr	r5, [pc, #52]	@ (800d214 <__libc_init_array+0x38>)
 800d1e0:	4c0d      	ldr	r4, [pc, #52]	@ (800d218 <__libc_init_array+0x3c>)
 800d1e2:	1b64      	subs	r4, r4, r5
 800d1e4:	10a4      	asrs	r4, r4, #2
 800d1e6:	2600      	movs	r6, #0
 800d1e8:	42a6      	cmp	r6, r4
 800d1ea:	d109      	bne.n	800d200 <__libc_init_array+0x24>
 800d1ec:	4d0b      	ldr	r5, [pc, #44]	@ (800d21c <__libc_init_array+0x40>)
 800d1ee:	4c0c      	ldr	r4, [pc, #48]	@ (800d220 <__libc_init_array+0x44>)
 800d1f0:	f000 fba8 	bl	800d944 <_init>
 800d1f4:	1b64      	subs	r4, r4, r5
 800d1f6:	10a4      	asrs	r4, r4, #2
 800d1f8:	2600      	movs	r6, #0
 800d1fa:	42a6      	cmp	r6, r4
 800d1fc:	d105      	bne.n	800d20a <__libc_init_array+0x2e>
 800d1fe:	bd70      	pop	{r4, r5, r6, pc}
 800d200:	f855 3b04 	ldr.w	r3, [r5], #4
 800d204:	4798      	blx	r3
 800d206:	3601      	adds	r6, #1
 800d208:	e7ee      	b.n	800d1e8 <__libc_init_array+0xc>
 800d20a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d20e:	4798      	blx	r3
 800d210:	3601      	adds	r6, #1
 800d212:	e7f2      	b.n	800d1fa <__libc_init_array+0x1e>
 800d214:	0800e0ac 	.word	0x0800e0ac
 800d218:	0800e0ac 	.word	0x0800e0ac
 800d21c:	0800e0ac 	.word	0x0800e0ac
 800d220:	0800e0b4 	.word	0x0800e0b4

0800d224 <__retarget_lock_acquire_recursive>:
 800d224:	4770      	bx	lr

0800d226 <__retarget_lock_release_recursive>:
 800d226:	4770      	bx	lr

0800d228 <memcpy>:
 800d228:	440a      	add	r2, r1
 800d22a:	4291      	cmp	r1, r2
 800d22c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d230:	d100      	bne.n	800d234 <memcpy+0xc>
 800d232:	4770      	bx	lr
 800d234:	b510      	push	{r4, lr}
 800d236:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d23a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d23e:	4291      	cmp	r1, r2
 800d240:	d1f9      	bne.n	800d236 <memcpy+0xe>
 800d242:	bd10      	pop	{r4, pc}

0800d244 <_free_r>:
 800d244:	b538      	push	{r3, r4, r5, lr}
 800d246:	4605      	mov	r5, r0
 800d248:	2900      	cmp	r1, #0
 800d24a:	d041      	beq.n	800d2d0 <_free_r+0x8c>
 800d24c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d250:	1f0c      	subs	r4, r1, #4
 800d252:	2b00      	cmp	r3, #0
 800d254:	bfb8      	it	lt
 800d256:	18e4      	addlt	r4, r4, r3
 800d258:	f7ff ff0c 	bl	800d074 <__malloc_lock>
 800d25c:	4a1d      	ldr	r2, [pc, #116]	@ (800d2d4 <_free_r+0x90>)
 800d25e:	6813      	ldr	r3, [r2, #0]
 800d260:	b933      	cbnz	r3, 800d270 <_free_r+0x2c>
 800d262:	6063      	str	r3, [r4, #4]
 800d264:	6014      	str	r4, [r2, #0]
 800d266:	4628      	mov	r0, r5
 800d268:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d26c:	f7ff bf08 	b.w	800d080 <__malloc_unlock>
 800d270:	42a3      	cmp	r3, r4
 800d272:	d908      	bls.n	800d286 <_free_r+0x42>
 800d274:	6820      	ldr	r0, [r4, #0]
 800d276:	1821      	adds	r1, r4, r0
 800d278:	428b      	cmp	r3, r1
 800d27a:	bf01      	itttt	eq
 800d27c:	6819      	ldreq	r1, [r3, #0]
 800d27e:	685b      	ldreq	r3, [r3, #4]
 800d280:	1809      	addeq	r1, r1, r0
 800d282:	6021      	streq	r1, [r4, #0]
 800d284:	e7ed      	b.n	800d262 <_free_r+0x1e>
 800d286:	461a      	mov	r2, r3
 800d288:	685b      	ldr	r3, [r3, #4]
 800d28a:	b10b      	cbz	r3, 800d290 <_free_r+0x4c>
 800d28c:	42a3      	cmp	r3, r4
 800d28e:	d9fa      	bls.n	800d286 <_free_r+0x42>
 800d290:	6811      	ldr	r1, [r2, #0]
 800d292:	1850      	adds	r0, r2, r1
 800d294:	42a0      	cmp	r0, r4
 800d296:	d10b      	bne.n	800d2b0 <_free_r+0x6c>
 800d298:	6820      	ldr	r0, [r4, #0]
 800d29a:	4401      	add	r1, r0
 800d29c:	1850      	adds	r0, r2, r1
 800d29e:	4283      	cmp	r3, r0
 800d2a0:	6011      	str	r1, [r2, #0]
 800d2a2:	d1e0      	bne.n	800d266 <_free_r+0x22>
 800d2a4:	6818      	ldr	r0, [r3, #0]
 800d2a6:	685b      	ldr	r3, [r3, #4]
 800d2a8:	6053      	str	r3, [r2, #4]
 800d2aa:	4408      	add	r0, r1
 800d2ac:	6010      	str	r0, [r2, #0]
 800d2ae:	e7da      	b.n	800d266 <_free_r+0x22>
 800d2b0:	d902      	bls.n	800d2b8 <_free_r+0x74>
 800d2b2:	230c      	movs	r3, #12
 800d2b4:	602b      	str	r3, [r5, #0]
 800d2b6:	e7d6      	b.n	800d266 <_free_r+0x22>
 800d2b8:	6820      	ldr	r0, [r4, #0]
 800d2ba:	1821      	adds	r1, r4, r0
 800d2bc:	428b      	cmp	r3, r1
 800d2be:	bf04      	itt	eq
 800d2c0:	6819      	ldreq	r1, [r3, #0]
 800d2c2:	685b      	ldreq	r3, [r3, #4]
 800d2c4:	6063      	str	r3, [r4, #4]
 800d2c6:	bf04      	itt	eq
 800d2c8:	1809      	addeq	r1, r1, r0
 800d2ca:	6021      	streq	r1, [r4, #0]
 800d2cc:	6054      	str	r4, [r2, #4]
 800d2ce:	e7ca      	b.n	800d266 <_free_r+0x22>
 800d2d0:	bd38      	pop	{r3, r4, r5, pc}
 800d2d2:	bf00      	nop
 800d2d4:	200028f0 	.word	0x200028f0

0800d2d8 <__ssputs_r>:
 800d2d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2dc:	688e      	ldr	r6, [r1, #8]
 800d2de:	461f      	mov	r7, r3
 800d2e0:	42be      	cmp	r6, r7
 800d2e2:	680b      	ldr	r3, [r1, #0]
 800d2e4:	4682      	mov	sl, r0
 800d2e6:	460c      	mov	r4, r1
 800d2e8:	4690      	mov	r8, r2
 800d2ea:	d82d      	bhi.n	800d348 <__ssputs_r+0x70>
 800d2ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d2f0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d2f4:	d026      	beq.n	800d344 <__ssputs_r+0x6c>
 800d2f6:	6965      	ldr	r5, [r4, #20]
 800d2f8:	6909      	ldr	r1, [r1, #16]
 800d2fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d2fe:	eba3 0901 	sub.w	r9, r3, r1
 800d302:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d306:	1c7b      	adds	r3, r7, #1
 800d308:	444b      	add	r3, r9
 800d30a:	106d      	asrs	r5, r5, #1
 800d30c:	429d      	cmp	r5, r3
 800d30e:	bf38      	it	cc
 800d310:	461d      	movcc	r5, r3
 800d312:	0553      	lsls	r3, r2, #21
 800d314:	d527      	bpl.n	800d366 <__ssputs_r+0x8e>
 800d316:	4629      	mov	r1, r5
 800d318:	f7ff fe2c 	bl	800cf74 <_malloc_r>
 800d31c:	4606      	mov	r6, r0
 800d31e:	b360      	cbz	r0, 800d37a <__ssputs_r+0xa2>
 800d320:	6921      	ldr	r1, [r4, #16]
 800d322:	464a      	mov	r2, r9
 800d324:	f7ff ff80 	bl	800d228 <memcpy>
 800d328:	89a3      	ldrh	r3, [r4, #12]
 800d32a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d32e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d332:	81a3      	strh	r3, [r4, #12]
 800d334:	6126      	str	r6, [r4, #16]
 800d336:	6165      	str	r5, [r4, #20]
 800d338:	444e      	add	r6, r9
 800d33a:	eba5 0509 	sub.w	r5, r5, r9
 800d33e:	6026      	str	r6, [r4, #0]
 800d340:	60a5      	str	r5, [r4, #8]
 800d342:	463e      	mov	r6, r7
 800d344:	42be      	cmp	r6, r7
 800d346:	d900      	bls.n	800d34a <__ssputs_r+0x72>
 800d348:	463e      	mov	r6, r7
 800d34a:	6820      	ldr	r0, [r4, #0]
 800d34c:	4632      	mov	r2, r6
 800d34e:	4641      	mov	r1, r8
 800d350:	f000 faa8 	bl	800d8a4 <memmove>
 800d354:	68a3      	ldr	r3, [r4, #8]
 800d356:	1b9b      	subs	r3, r3, r6
 800d358:	60a3      	str	r3, [r4, #8]
 800d35a:	6823      	ldr	r3, [r4, #0]
 800d35c:	4433      	add	r3, r6
 800d35e:	6023      	str	r3, [r4, #0]
 800d360:	2000      	movs	r0, #0
 800d362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d366:	462a      	mov	r2, r5
 800d368:	f000 fab6 	bl	800d8d8 <_realloc_r>
 800d36c:	4606      	mov	r6, r0
 800d36e:	2800      	cmp	r0, #0
 800d370:	d1e0      	bne.n	800d334 <__ssputs_r+0x5c>
 800d372:	6921      	ldr	r1, [r4, #16]
 800d374:	4650      	mov	r0, sl
 800d376:	f7ff ff65 	bl	800d244 <_free_r>
 800d37a:	230c      	movs	r3, #12
 800d37c:	f8ca 3000 	str.w	r3, [sl]
 800d380:	89a3      	ldrh	r3, [r4, #12]
 800d382:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d386:	81a3      	strh	r3, [r4, #12]
 800d388:	f04f 30ff 	mov.w	r0, #4294967295
 800d38c:	e7e9      	b.n	800d362 <__ssputs_r+0x8a>
	...

0800d390 <_svfiprintf_r>:
 800d390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d394:	4698      	mov	r8, r3
 800d396:	898b      	ldrh	r3, [r1, #12]
 800d398:	061b      	lsls	r3, r3, #24
 800d39a:	b09d      	sub	sp, #116	@ 0x74
 800d39c:	4607      	mov	r7, r0
 800d39e:	460d      	mov	r5, r1
 800d3a0:	4614      	mov	r4, r2
 800d3a2:	d510      	bpl.n	800d3c6 <_svfiprintf_r+0x36>
 800d3a4:	690b      	ldr	r3, [r1, #16]
 800d3a6:	b973      	cbnz	r3, 800d3c6 <_svfiprintf_r+0x36>
 800d3a8:	2140      	movs	r1, #64	@ 0x40
 800d3aa:	f7ff fde3 	bl	800cf74 <_malloc_r>
 800d3ae:	6028      	str	r0, [r5, #0]
 800d3b0:	6128      	str	r0, [r5, #16]
 800d3b2:	b930      	cbnz	r0, 800d3c2 <_svfiprintf_r+0x32>
 800d3b4:	230c      	movs	r3, #12
 800d3b6:	603b      	str	r3, [r7, #0]
 800d3b8:	f04f 30ff 	mov.w	r0, #4294967295
 800d3bc:	b01d      	add	sp, #116	@ 0x74
 800d3be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3c2:	2340      	movs	r3, #64	@ 0x40
 800d3c4:	616b      	str	r3, [r5, #20]
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3ca:	2320      	movs	r3, #32
 800d3cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d3d0:	f8cd 800c 	str.w	r8, [sp, #12]
 800d3d4:	2330      	movs	r3, #48	@ 0x30
 800d3d6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d574 <_svfiprintf_r+0x1e4>
 800d3da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d3de:	f04f 0901 	mov.w	r9, #1
 800d3e2:	4623      	mov	r3, r4
 800d3e4:	469a      	mov	sl, r3
 800d3e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3ea:	b10a      	cbz	r2, 800d3f0 <_svfiprintf_r+0x60>
 800d3ec:	2a25      	cmp	r2, #37	@ 0x25
 800d3ee:	d1f9      	bne.n	800d3e4 <_svfiprintf_r+0x54>
 800d3f0:	ebba 0b04 	subs.w	fp, sl, r4
 800d3f4:	d00b      	beq.n	800d40e <_svfiprintf_r+0x7e>
 800d3f6:	465b      	mov	r3, fp
 800d3f8:	4622      	mov	r2, r4
 800d3fa:	4629      	mov	r1, r5
 800d3fc:	4638      	mov	r0, r7
 800d3fe:	f7ff ff6b 	bl	800d2d8 <__ssputs_r>
 800d402:	3001      	adds	r0, #1
 800d404:	f000 80a7 	beq.w	800d556 <_svfiprintf_r+0x1c6>
 800d408:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d40a:	445a      	add	r2, fp
 800d40c:	9209      	str	r2, [sp, #36]	@ 0x24
 800d40e:	f89a 3000 	ldrb.w	r3, [sl]
 800d412:	2b00      	cmp	r3, #0
 800d414:	f000 809f 	beq.w	800d556 <_svfiprintf_r+0x1c6>
 800d418:	2300      	movs	r3, #0
 800d41a:	f04f 32ff 	mov.w	r2, #4294967295
 800d41e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d422:	f10a 0a01 	add.w	sl, sl, #1
 800d426:	9304      	str	r3, [sp, #16]
 800d428:	9307      	str	r3, [sp, #28]
 800d42a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d42e:	931a      	str	r3, [sp, #104]	@ 0x68
 800d430:	4654      	mov	r4, sl
 800d432:	2205      	movs	r2, #5
 800d434:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d438:	484e      	ldr	r0, [pc, #312]	@ (800d574 <_svfiprintf_r+0x1e4>)
 800d43a:	f7f2 fed9 	bl	80001f0 <memchr>
 800d43e:	9a04      	ldr	r2, [sp, #16]
 800d440:	b9d8      	cbnz	r0, 800d47a <_svfiprintf_r+0xea>
 800d442:	06d0      	lsls	r0, r2, #27
 800d444:	bf44      	itt	mi
 800d446:	2320      	movmi	r3, #32
 800d448:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d44c:	0711      	lsls	r1, r2, #28
 800d44e:	bf44      	itt	mi
 800d450:	232b      	movmi	r3, #43	@ 0x2b
 800d452:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d456:	f89a 3000 	ldrb.w	r3, [sl]
 800d45a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d45c:	d015      	beq.n	800d48a <_svfiprintf_r+0xfa>
 800d45e:	9a07      	ldr	r2, [sp, #28]
 800d460:	4654      	mov	r4, sl
 800d462:	2000      	movs	r0, #0
 800d464:	f04f 0c0a 	mov.w	ip, #10
 800d468:	4621      	mov	r1, r4
 800d46a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d46e:	3b30      	subs	r3, #48	@ 0x30
 800d470:	2b09      	cmp	r3, #9
 800d472:	d94b      	bls.n	800d50c <_svfiprintf_r+0x17c>
 800d474:	b1b0      	cbz	r0, 800d4a4 <_svfiprintf_r+0x114>
 800d476:	9207      	str	r2, [sp, #28]
 800d478:	e014      	b.n	800d4a4 <_svfiprintf_r+0x114>
 800d47a:	eba0 0308 	sub.w	r3, r0, r8
 800d47e:	fa09 f303 	lsl.w	r3, r9, r3
 800d482:	4313      	orrs	r3, r2
 800d484:	9304      	str	r3, [sp, #16]
 800d486:	46a2      	mov	sl, r4
 800d488:	e7d2      	b.n	800d430 <_svfiprintf_r+0xa0>
 800d48a:	9b03      	ldr	r3, [sp, #12]
 800d48c:	1d19      	adds	r1, r3, #4
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	9103      	str	r1, [sp, #12]
 800d492:	2b00      	cmp	r3, #0
 800d494:	bfbb      	ittet	lt
 800d496:	425b      	neglt	r3, r3
 800d498:	f042 0202 	orrlt.w	r2, r2, #2
 800d49c:	9307      	strge	r3, [sp, #28]
 800d49e:	9307      	strlt	r3, [sp, #28]
 800d4a0:	bfb8      	it	lt
 800d4a2:	9204      	strlt	r2, [sp, #16]
 800d4a4:	7823      	ldrb	r3, [r4, #0]
 800d4a6:	2b2e      	cmp	r3, #46	@ 0x2e
 800d4a8:	d10a      	bne.n	800d4c0 <_svfiprintf_r+0x130>
 800d4aa:	7863      	ldrb	r3, [r4, #1]
 800d4ac:	2b2a      	cmp	r3, #42	@ 0x2a
 800d4ae:	d132      	bne.n	800d516 <_svfiprintf_r+0x186>
 800d4b0:	9b03      	ldr	r3, [sp, #12]
 800d4b2:	1d1a      	adds	r2, r3, #4
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	9203      	str	r2, [sp, #12]
 800d4b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d4bc:	3402      	adds	r4, #2
 800d4be:	9305      	str	r3, [sp, #20]
 800d4c0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d584 <_svfiprintf_r+0x1f4>
 800d4c4:	7821      	ldrb	r1, [r4, #0]
 800d4c6:	2203      	movs	r2, #3
 800d4c8:	4650      	mov	r0, sl
 800d4ca:	f7f2 fe91 	bl	80001f0 <memchr>
 800d4ce:	b138      	cbz	r0, 800d4e0 <_svfiprintf_r+0x150>
 800d4d0:	9b04      	ldr	r3, [sp, #16]
 800d4d2:	eba0 000a 	sub.w	r0, r0, sl
 800d4d6:	2240      	movs	r2, #64	@ 0x40
 800d4d8:	4082      	lsls	r2, r0
 800d4da:	4313      	orrs	r3, r2
 800d4dc:	3401      	adds	r4, #1
 800d4de:	9304      	str	r3, [sp, #16]
 800d4e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4e4:	4824      	ldr	r0, [pc, #144]	@ (800d578 <_svfiprintf_r+0x1e8>)
 800d4e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d4ea:	2206      	movs	r2, #6
 800d4ec:	f7f2 fe80 	bl	80001f0 <memchr>
 800d4f0:	2800      	cmp	r0, #0
 800d4f2:	d036      	beq.n	800d562 <_svfiprintf_r+0x1d2>
 800d4f4:	4b21      	ldr	r3, [pc, #132]	@ (800d57c <_svfiprintf_r+0x1ec>)
 800d4f6:	bb1b      	cbnz	r3, 800d540 <_svfiprintf_r+0x1b0>
 800d4f8:	9b03      	ldr	r3, [sp, #12]
 800d4fa:	3307      	adds	r3, #7
 800d4fc:	f023 0307 	bic.w	r3, r3, #7
 800d500:	3308      	adds	r3, #8
 800d502:	9303      	str	r3, [sp, #12]
 800d504:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d506:	4433      	add	r3, r6
 800d508:	9309      	str	r3, [sp, #36]	@ 0x24
 800d50a:	e76a      	b.n	800d3e2 <_svfiprintf_r+0x52>
 800d50c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d510:	460c      	mov	r4, r1
 800d512:	2001      	movs	r0, #1
 800d514:	e7a8      	b.n	800d468 <_svfiprintf_r+0xd8>
 800d516:	2300      	movs	r3, #0
 800d518:	3401      	adds	r4, #1
 800d51a:	9305      	str	r3, [sp, #20]
 800d51c:	4619      	mov	r1, r3
 800d51e:	f04f 0c0a 	mov.w	ip, #10
 800d522:	4620      	mov	r0, r4
 800d524:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d528:	3a30      	subs	r2, #48	@ 0x30
 800d52a:	2a09      	cmp	r2, #9
 800d52c:	d903      	bls.n	800d536 <_svfiprintf_r+0x1a6>
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d0c6      	beq.n	800d4c0 <_svfiprintf_r+0x130>
 800d532:	9105      	str	r1, [sp, #20]
 800d534:	e7c4      	b.n	800d4c0 <_svfiprintf_r+0x130>
 800d536:	fb0c 2101 	mla	r1, ip, r1, r2
 800d53a:	4604      	mov	r4, r0
 800d53c:	2301      	movs	r3, #1
 800d53e:	e7f0      	b.n	800d522 <_svfiprintf_r+0x192>
 800d540:	ab03      	add	r3, sp, #12
 800d542:	9300      	str	r3, [sp, #0]
 800d544:	462a      	mov	r2, r5
 800d546:	4b0e      	ldr	r3, [pc, #56]	@ (800d580 <_svfiprintf_r+0x1f0>)
 800d548:	a904      	add	r1, sp, #16
 800d54a:	4638      	mov	r0, r7
 800d54c:	f3af 8000 	nop.w
 800d550:	1c42      	adds	r2, r0, #1
 800d552:	4606      	mov	r6, r0
 800d554:	d1d6      	bne.n	800d504 <_svfiprintf_r+0x174>
 800d556:	89ab      	ldrh	r3, [r5, #12]
 800d558:	065b      	lsls	r3, r3, #25
 800d55a:	f53f af2d 	bmi.w	800d3b8 <_svfiprintf_r+0x28>
 800d55e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d560:	e72c      	b.n	800d3bc <_svfiprintf_r+0x2c>
 800d562:	ab03      	add	r3, sp, #12
 800d564:	9300      	str	r3, [sp, #0]
 800d566:	462a      	mov	r2, r5
 800d568:	4b05      	ldr	r3, [pc, #20]	@ (800d580 <_svfiprintf_r+0x1f0>)
 800d56a:	a904      	add	r1, sp, #16
 800d56c:	4638      	mov	r0, r7
 800d56e:	f000 f879 	bl	800d664 <_printf_i>
 800d572:	e7ed      	b.n	800d550 <_svfiprintf_r+0x1c0>
 800d574:	0800e070 	.word	0x0800e070
 800d578:	0800e07a 	.word	0x0800e07a
 800d57c:	00000000 	.word	0x00000000
 800d580:	0800d2d9 	.word	0x0800d2d9
 800d584:	0800e076 	.word	0x0800e076

0800d588 <_printf_common>:
 800d588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d58c:	4616      	mov	r6, r2
 800d58e:	4698      	mov	r8, r3
 800d590:	688a      	ldr	r2, [r1, #8]
 800d592:	690b      	ldr	r3, [r1, #16]
 800d594:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d598:	4293      	cmp	r3, r2
 800d59a:	bfb8      	it	lt
 800d59c:	4613      	movlt	r3, r2
 800d59e:	6033      	str	r3, [r6, #0]
 800d5a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d5a4:	4607      	mov	r7, r0
 800d5a6:	460c      	mov	r4, r1
 800d5a8:	b10a      	cbz	r2, 800d5ae <_printf_common+0x26>
 800d5aa:	3301      	adds	r3, #1
 800d5ac:	6033      	str	r3, [r6, #0]
 800d5ae:	6823      	ldr	r3, [r4, #0]
 800d5b0:	0699      	lsls	r1, r3, #26
 800d5b2:	bf42      	ittt	mi
 800d5b4:	6833      	ldrmi	r3, [r6, #0]
 800d5b6:	3302      	addmi	r3, #2
 800d5b8:	6033      	strmi	r3, [r6, #0]
 800d5ba:	6825      	ldr	r5, [r4, #0]
 800d5bc:	f015 0506 	ands.w	r5, r5, #6
 800d5c0:	d106      	bne.n	800d5d0 <_printf_common+0x48>
 800d5c2:	f104 0a19 	add.w	sl, r4, #25
 800d5c6:	68e3      	ldr	r3, [r4, #12]
 800d5c8:	6832      	ldr	r2, [r6, #0]
 800d5ca:	1a9b      	subs	r3, r3, r2
 800d5cc:	42ab      	cmp	r3, r5
 800d5ce:	dc26      	bgt.n	800d61e <_printf_common+0x96>
 800d5d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d5d4:	6822      	ldr	r2, [r4, #0]
 800d5d6:	3b00      	subs	r3, #0
 800d5d8:	bf18      	it	ne
 800d5da:	2301      	movne	r3, #1
 800d5dc:	0692      	lsls	r2, r2, #26
 800d5de:	d42b      	bmi.n	800d638 <_printf_common+0xb0>
 800d5e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d5e4:	4641      	mov	r1, r8
 800d5e6:	4638      	mov	r0, r7
 800d5e8:	47c8      	blx	r9
 800d5ea:	3001      	adds	r0, #1
 800d5ec:	d01e      	beq.n	800d62c <_printf_common+0xa4>
 800d5ee:	6823      	ldr	r3, [r4, #0]
 800d5f0:	6922      	ldr	r2, [r4, #16]
 800d5f2:	f003 0306 	and.w	r3, r3, #6
 800d5f6:	2b04      	cmp	r3, #4
 800d5f8:	bf02      	ittt	eq
 800d5fa:	68e5      	ldreq	r5, [r4, #12]
 800d5fc:	6833      	ldreq	r3, [r6, #0]
 800d5fe:	1aed      	subeq	r5, r5, r3
 800d600:	68a3      	ldr	r3, [r4, #8]
 800d602:	bf0c      	ite	eq
 800d604:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d608:	2500      	movne	r5, #0
 800d60a:	4293      	cmp	r3, r2
 800d60c:	bfc4      	itt	gt
 800d60e:	1a9b      	subgt	r3, r3, r2
 800d610:	18ed      	addgt	r5, r5, r3
 800d612:	2600      	movs	r6, #0
 800d614:	341a      	adds	r4, #26
 800d616:	42b5      	cmp	r5, r6
 800d618:	d11a      	bne.n	800d650 <_printf_common+0xc8>
 800d61a:	2000      	movs	r0, #0
 800d61c:	e008      	b.n	800d630 <_printf_common+0xa8>
 800d61e:	2301      	movs	r3, #1
 800d620:	4652      	mov	r2, sl
 800d622:	4641      	mov	r1, r8
 800d624:	4638      	mov	r0, r7
 800d626:	47c8      	blx	r9
 800d628:	3001      	adds	r0, #1
 800d62a:	d103      	bne.n	800d634 <_printf_common+0xac>
 800d62c:	f04f 30ff 	mov.w	r0, #4294967295
 800d630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d634:	3501      	adds	r5, #1
 800d636:	e7c6      	b.n	800d5c6 <_printf_common+0x3e>
 800d638:	18e1      	adds	r1, r4, r3
 800d63a:	1c5a      	adds	r2, r3, #1
 800d63c:	2030      	movs	r0, #48	@ 0x30
 800d63e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d642:	4422      	add	r2, r4
 800d644:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d648:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d64c:	3302      	adds	r3, #2
 800d64e:	e7c7      	b.n	800d5e0 <_printf_common+0x58>
 800d650:	2301      	movs	r3, #1
 800d652:	4622      	mov	r2, r4
 800d654:	4641      	mov	r1, r8
 800d656:	4638      	mov	r0, r7
 800d658:	47c8      	blx	r9
 800d65a:	3001      	adds	r0, #1
 800d65c:	d0e6      	beq.n	800d62c <_printf_common+0xa4>
 800d65e:	3601      	adds	r6, #1
 800d660:	e7d9      	b.n	800d616 <_printf_common+0x8e>
	...

0800d664 <_printf_i>:
 800d664:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d668:	7e0f      	ldrb	r7, [r1, #24]
 800d66a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d66c:	2f78      	cmp	r7, #120	@ 0x78
 800d66e:	4691      	mov	r9, r2
 800d670:	4680      	mov	r8, r0
 800d672:	460c      	mov	r4, r1
 800d674:	469a      	mov	sl, r3
 800d676:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d67a:	d807      	bhi.n	800d68c <_printf_i+0x28>
 800d67c:	2f62      	cmp	r7, #98	@ 0x62
 800d67e:	d80a      	bhi.n	800d696 <_printf_i+0x32>
 800d680:	2f00      	cmp	r7, #0
 800d682:	f000 80d2 	beq.w	800d82a <_printf_i+0x1c6>
 800d686:	2f58      	cmp	r7, #88	@ 0x58
 800d688:	f000 80b9 	beq.w	800d7fe <_printf_i+0x19a>
 800d68c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d690:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d694:	e03a      	b.n	800d70c <_printf_i+0xa8>
 800d696:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d69a:	2b15      	cmp	r3, #21
 800d69c:	d8f6      	bhi.n	800d68c <_printf_i+0x28>
 800d69e:	a101      	add	r1, pc, #4	@ (adr r1, 800d6a4 <_printf_i+0x40>)
 800d6a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d6a4:	0800d6fd 	.word	0x0800d6fd
 800d6a8:	0800d711 	.word	0x0800d711
 800d6ac:	0800d68d 	.word	0x0800d68d
 800d6b0:	0800d68d 	.word	0x0800d68d
 800d6b4:	0800d68d 	.word	0x0800d68d
 800d6b8:	0800d68d 	.word	0x0800d68d
 800d6bc:	0800d711 	.word	0x0800d711
 800d6c0:	0800d68d 	.word	0x0800d68d
 800d6c4:	0800d68d 	.word	0x0800d68d
 800d6c8:	0800d68d 	.word	0x0800d68d
 800d6cc:	0800d68d 	.word	0x0800d68d
 800d6d0:	0800d811 	.word	0x0800d811
 800d6d4:	0800d73b 	.word	0x0800d73b
 800d6d8:	0800d7cb 	.word	0x0800d7cb
 800d6dc:	0800d68d 	.word	0x0800d68d
 800d6e0:	0800d68d 	.word	0x0800d68d
 800d6e4:	0800d833 	.word	0x0800d833
 800d6e8:	0800d68d 	.word	0x0800d68d
 800d6ec:	0800d73b 	.word	0x0800d73b
 800d6f0:	0800d68d 	.word	0x0800d68d
 800d6f4:	0800d68d 	.word	0x0800d68d
 800d6f8:	0800d7d3 	.word	0x0800d7d3
 800d6fc:	6833      	ldr	r3, [r6, #0]
 800d6fe:	1d1a      	adds	r2, r3, #4
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	6032      	str	r2, [r6, #0]
 800d704:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d708:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d70c:	2301      	movs	r3, #1
 800d70e:	e09d      	b.n	800d84c <_printf_i+0x1e8>
 800d710:	6833      	ldr	r3, [r6, #0]
 800d712:	6820      	ldr	r0, [r4, #0]
 800d714:	1d19      	adds	r1, r3, #4
 800d716:	6031      	str	r1, [r6, #0]
 800d718:	0606      	lsls	r6, r0, #24
 800d71a:	d501      	bpl.n	800d720 <_printf_i+0xbc>
 800d71c:	681d      	ldr	r5, [r3, #0]
 800d71e:	e003      	b.n	800d728 <_printf_i+0xc4>
 800d720:	0645      	lsls	r5, r0, #25
 800d722:	d5fb      	bpl.n	800d71c <_printf_i+0xb8>
 800d724:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d728:	2d00      	cmp	r5, #0
 800d72a:	da03      	bge.n	800d734 <_printf_i+0xd0>
 800d72c:	232d      	movs	r3, #45	@ 0x2d
 800d72e:	426d      	negs	r5, r5
 800d730:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d734:	4859      	ldr	r0, [pc, #356]	@ (800d89c <_printf_i+0x238>)
 800d736:	230a      	movs	r3, #10
 800d738:	e011      	b.n	800d75e <_printf_i+0xfa>
 800d73a:	6821      	ldr	r1, [r4, #0]
 800d73c:	6833      	ldr	r3, [r6, #0]
 800d73e:	0608      	lsls	r0, r1, #24
 800d740:	f853 5b04 	ldr.w	r5, [r3], #4
 800d744:	d402      	bmi.n	800d74c <_printf_i+0xe8>
 800d746:	0649      	lsls	r1, r1, #25
 800d748:	bf48      	it	mi
 800d74a:	b2ad      	uxthmi	r5, r5
 800d74c:	2f6f      	cmp	r7, #111	@ 0x6f
 800d74e:	4853      	ldr	r0, [pc, #332]	@ (800d89c <_printf_i+0x238>)
 800d750:	6033      	str	r3, [r6, #0]
 800d752:	bf14      	ite	ne
 800d754:	230a      	movne	r3, #10
 800d756:	2308      	moveq	r3, #8
 800d758:	2100      	movs	r1, #0
 800d75a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d75e:	6866      	ldr	r6, [r4, #4]
 800d760:	60a6      	str	r6, [r4, #8]
 800d762:	2e00      	cmp	r6, #0
 800d764:	bfa2      	ittt	ge
 800d766:	6821      	ldrge	r1, [r4, #0]
 800d768:	f021 0104 	bicge.w	r1, r1, #4
 800d76c:	6021      	strge	r1, [r4, #0]
 800d76e:	b90d      	cbnz	r5, 800d774 <_printf_i+0x110>
 800d770:	2e00      	cmp	r6, #0
 800d772:	d04b      	beq.n	800d80c <_printf_i+0x1a8>
 800d774:	4616      	mov	r6, r2
 800d776:	fbb5 f1f3 	udiv	r1, r5, r3
 800d77a:	fb03 5711 	mls	r7, r3, r1, r5
 800d77e:	5dc7      	ldrb	r7, [r0, r7]
 800d780:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d784:	462f      	mov	r7, r5
 800d786:	42bb      	cmp	r3, r7
 800d788:	460d      	mov	r5, r1
 800d78a:	d9f4      	bls.n	800d776 <_printf_i+0x112>
 800d78c:	2b08      	cmp	r3, #8
 800d78e:	d10b      	bne.n	800d7a8 <_printf_i+0x144>
 800d790:	6823      	ldr	r3, [r4, #0]
 800d792:	07df      	lsls	r7, r3, #31
 800d794:	d508      	bpl.n	800d7a8 <_printf_i+0x144>
 800d796:	6923      	ldr	r3, [r4, #16]
 800d798:	6861      	ldr	r1, [r4, #4]
 800d79a:	4299      	cmp	r1, r3
 800d79c:	bfde      	ittt	le
 800d79e:	2330      	movle	r3, #48	@ 0x30
 800d7a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d7a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d7a8:	1b92      	subs	r2, r2, r6
 800d7aa:	6122      	str	r2, [r4, #16]
 800d7ac:	f8cd a000 	str.w	sl, [sp]
 800d7b0:	464b      	mov	r3, r9
 800d7b2:	aa03      	add	r2, sp, #12
 800d7b4:	4621      	mov	r1, r4
 800d7b6:	4640      	mov	r0, r8
 800d7b8:	f7ff fee6 	bl	800d588 <_printf_common>
 800d7bc:	3001      	adds	r0, #1
 800d7be:	d14a      	bne.n	800d856 <_printf_i+0x1f2>
 800d7c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d7c4:	b004      	add	sp, #16
 800d7c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7ca:	6823      	ldr	r3, [r4, #0]
 800d7cc:	f043 0320 	orr.w	r3, r3, #32
 800d7d0:	6023      	str	r3, [r4, #0]
 800d7d2:	4833      	ldr	r0, [pc, #204]	@ (800d8a0 <_printf_i+0x23c>)
 800d7d4:	2778      	movs	r7, #120	@ 0x78
 800d7d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d7da:	6823      	ldr	r3, [r4, #0]
 800d7dc:	6831      	ldr	r1, [r6, #0]
 800d7de:	061f      	lsls	r7, r3, #24
 800d7e0:	f851 5b04 	ldr.w	r5, [r1], #4
 800d7e4:	d402      	bmi.n	800d7ec <_printf_i+0x188>
 800d7e6:	065f      	lsls	r7, r3, #25
 800d7e8:	bf48      	it	mi
 800d7ea:	b2ad      	uxthmi	r5, r5
 800d7ec:	6031      	str	r1, [r6, #0]
 800d7ee:	07d9      	lsls	r1, r3, #31
 800d7f0:	bf44      	itt	mi
 800d7f2:	f043 0320 	orrmi.w	r3, r3, #32
 800d7f6:	6023      	strmi	r3, [r4, #0]
 800d7f8:	b11d      	cbz	r5, 800d802 <_printf_i+0x19e>
 800d7fa:	2310      	movs	r3, #16
 800d7fc:	e7ac      	b.n	800d758 <_printf_i+0xf4>
 800d7fe:	4827      	ldr	r0, [pc, #156]	@ (800d89c <_printf_i+0x238>)
 800d800:	e7e9      	b.n	800d7d6 <_printf_i+0x172>
 800d802:	6823      	ldr	r3, [r4, #0]
 800d804:	f023 0320 	bic.w	r3, r3, #32
 800d808:	6023      	str	r3, [r4, #0]
 800d80a:	e7f6      	b.n	800d7fa <_printf_i+0x196>
 800d80c:	4616      	mov	r6, r2
 800d80e:	e7bd      	b.n	800d78c <_printf_i+0x128>
 800d810:	6833      	ldr	r3, [r6, #0]
 800d812:	6825      	ldr	r5, [r4, #0]
 800d814:	6961      	ldr	r1, [r4, #20]
 800d816:	1d18      	adds	r0, r3, #4
 800d818:	6030      	str	r0, [r6, #0]
 800d81a:	062e      	lsls	r6, r5, #24
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	d501      	bpl.n	800d824 <_printf_i+0x1c0>
 800d820:	6019      	str	r1, [r3, #0]
 800d822:	e002      	b.n	800d82a <_printf_i+0x1c6>
 800d824:	0668      	lsls	r0, r5, #25
 800d826:	d5fb      	bpl.n	800d820 <_printf_i+0x1bc>
 800d828:	8019      	strh	r1, [r3, #0]
 800d82a:	2300      	movs	r3, #0
 800d82c:	6123      	str	r3, [r4, #16]
 800d82e:	4616      	mov	r6, r2
 800d830:	e7bc      	b.n	800d7ac <_printf_i+0x148>
 800d832:	6833      	ldr	r3, [r6, #0]
 800d834:	1d1a      	adds	r2, r3, #4
 800d836:	6032      	str	r2, [r6, #0]
 800d838:	681e      	ldr	r6, [r3, #0]
 800d83a:	6862      	ldr	r2, [r4, #4]
 800d83c:	2100      	movs	r1, #0
 800d83e:	4630      	mov	r0, r6
 800d840:	f7f2 fcd6 	bl	80001f0 <memchr>
 800d844:	b108      	cbz	r0, 800d84a <_printf_i+0x1e6>
 800d846:	1b80      	subs	r0, r0, r6
 800d848:	6060      	str	r0, [r4, #4]
 800d84a:	6863      	ldr	r3, [r4, #4]
 800d84c:	6123      	str	r3, [r4, #16]
 800d84e:	2300      	movs	r3, #0
 800d850:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d854:	e7aa      	b.n	800d7ac <_printf_i+0x148>
 800d856:	6923      	ldr	r3, [r4, #16]
 800d858:	4632      	mov	r2, r6
 800d85a:	4649      	mov	r1, r9
 800d85c:	4640      	mov	r0, r8
 800d85e:	47d0      	blx	sl
 800d860:	3001      	adds	r0, #1
 800d862:	d0ad      	beq.n	800d7c0 <_printf_i+0x15c>
 800d864:	6823      	ldr	r3, [r4, #0]
 800d866:	079b      	lsls	r3, r3, #30
 800d868:	d413      	bmi.n	800d892 <_printf_i+0x22e>
 800d86a:	68e0      	ldr	r0, [r4, #12]
 800d86c:	9b03      	ldr	r3, [sp, #12]
 800d86e:	4298      	cmp	r0, r3
 800d870:	bfb8      	it	lt
 800d872:	4618      	movlt	r0, r3
 800d874:	e7a6      	b.n	800d7c4 <_printf_i+0x160>
 800d876:	2301      	movs	r3, #1
 800d878:	4632      	mov	r2, r6
 800d87a:	4649      	mov	r1, r9
 800d87c:	4640      	mov	r0, r8
 800d87e:	47d0      	blx	sl
 800d880:	3001      	adds	r0, #1
 800d882:	d09d      	beq.n	800d7c0 <_printf_i+0x15c>
 800d884:	3501      	adds	r5, #1
 800d886:	68e3      	ldr	r3, [r4, #12]
 800d888:	9903      	ldr	r1, [sp, #12]
 800d88a:	1a5b      	subs	r3, r3, r1
 800d88c:	42ab      	cmp	r3, r5
 800d88e:	dcf2      	bgt.n	800d876 <_printf_i+0x212>
 800d890:	e7eb      	b.n	800d86a <_printf_i+0x206>
 800d892:	2500      	movs	r5, #0
 800d894:	f104 0619 	add.w	r6, r4, #25
 800d898:	e7f5      	b.n	800d886 <_printf_i+0x222>
 800d89a:	bf00      	nop
 800d89c:	0800e081 	.word	0x0800e081
 800d8a0:	0800e092 	.word	0x0800e092

0800d8a4 <memmove>:
 800d8a4:	4288      	cmp	r0, r1
 800d8a6:	b510      	push	{r4, lr}
 800d8a8:	eb01 0402 	add.w	r4, r1, r2
 800d8ac:	d902      	bls.n	800d8b4 <memmove+0x10>
 800d8ae:	4284      	cmp	r4, r0
 800d8b0:	4623      	mov	r3, r4
 800d8b2:	d807      	bhi.n	800d8c4 <memmove+0x20>
 800d8b4:	1e43      	subs	r3, r0, #1
 800d8b6:	42a1      	cmp	r1, r4
 800d8b8:	d008      	beq.n	800d8cc <memmove+0x28>
 800d8ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d8be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d8c2:	e7f8      	b.n	800d8b6 <memmove+0x12>
 800d8c4:	4402      	add	r2, r0
 800d8c6:	4601      	mov	r1, r0
 800d8c8:	428a      	cmp	r2, r1
 800d8ca:	d100      	bne.n	800d8ce <memmove+0x2a>
 800d8cc:	bd10      	pop	{r4, pc}
 800d8ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d8d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d8d6:	e7f7      	b.n	800d8c8 <memmove+0x24>

0800d8d8 <_realloc_r>:
 800d8d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8dc:	4680      	mov	r8, r0
 800d8de:	4615      	mov	r5, r2
 800d8e0:	460c      	mov	r4, r1
 800d8e2:	b921      	cbnz	r1, 800d8ee <_realloc_r+0x16>
 800d8e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d8e8:	4611      	mov	r1, r2
 800d8ea:	f7ff bb43 	b.w	800cf74 <_malloc_r>
 800d8ee:	b92a      	cbnz	r2, 800d8fc <_realloc_r+0x24>
 800d8f0:	f7ff fca8 	bl	800d244 <_free_r>
 800d8f4:	2400      	movs	r4, #0
 800d8f6:	4620      	mov	r0, r4
 800d8f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8fc:	f000 f81a 	bl	800d934 <_malloc_usable_size_r>
 800d900:	4285      	cmp	r5, r0
 800d902:	4606      	mov	r6, r0
 800d904:	d802      	bhi.n	800d90c <_realloc_r+0x34>
 800d906:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d90a:	d8f4      	bhi.n	800d8f6 <_realloc_r+0x1e>
 800d90c:	4629      	mov	r1, r5
 800d90e:	4640      	mov	r0, r8
 800d910:	f7ff fb30 	bl	800cf74 <_malloc_r>
 800d914:	4607      	mov	r7, r0
 800d916:	2800      	cmp	r0, #0
 800d918:	d0ec      	beq.n	800d8f4 <_realloc_r+0x1c>
 800d91a:	42b5      	cmp	r5, r6
 800d91c:	462a      	mov	r2, r5
 800d91e:	4621      	mov	r1, r4
 800d920:	bf28      	it	cs
 800d922:	4632      	movcs	r2, r6
 800d924:	f7ff fc80 	bl	800d228 <memcpy>
 800d928:	4621      	mov	r1, r4
 800d92a:	4640      	mov	r0, r8
 800d92c:	f7ff fc8a 	bl	800d244 <_free_r>
 800d930:	463c      	mov	r4, r7
 800d932:	e7e0      	b.n	800d8f6 <_realloc_r+0x1e>

0800d934 <_malloc_usable_size_r>:
 800d934:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d938:	1f18      	subs	r0, r3, #4
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	bfbc      	itt	lt
 800d93e:	580b      	ldrlt	r3, [r1, r0]
 800d940:	18c0      	addlt	r0, r0, r3
 800d942:	4770      	bx	lr

0800d944 <_init>:
 800d944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d946:	bf00      	nop
 800d948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d94a:	bc08      	pop	{r3}
 800d94c:	469e      	mov	lr, r3
 800d94e:	4770      	bx	lr

0800d950 <_fini>:
 800d950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d952:	bf00      	nop
 800d954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d956:	bc08      	pop	{r3}
 800d958:	469e      	mov	lr, r3
 800d95a:	4770      	bx	lr
