
Dashbaord2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca08  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006ec  0800cbb8  0800cbb8  0000dbb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d2a4  0800d2a4  0000f060  2**0
                  CONTENTS
  4 .ARM          00000008  0800d2a4  0800d2a4  0000e2a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d2ac  0800d2ac  0000f060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800d2ac  0800d2ac  0000e2ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800d2b4  0800d2b4  0000e2b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800d2bc  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000029c0  20000060  0800d31c  0000f060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002a20  0800d31c  0000fa20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029f28  00000000  00000000  0000f090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000532e  00000000  00000000  00038fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021f0  00000000  00000000  0003e2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a7c  00000000  00000000  000404d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f0f5  00000000  00000000  00041f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002843e  00000000  00000000  00071049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00126776  00000000  00000000  00099487  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001bfbfd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009520  00000000  00000000  001bfc40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001c9160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800cba0 	.word	0x0800cba0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	0800cba0 	.word	0x0800cba0

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b96a 	b.w	80004dc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	460c      	mov	r4, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14e      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022c:	4694      	mov	ip, r2
 800022e:	458c      	cmp	ip, r1
 8000230:	4686      	mov	lr, r0
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	d962      	bls.n	80002fe <__udivmoddi4+0xde>
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0320 	rsb	r3, r2, #32
 800023e:	4091      	lsls	r1, r2
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	fa0c fc02 	lsl.w	ip, ip, r2
 8000248:	4319      	orrs	r1, r3
 800024a:	fa00 fe02 	lsl.w	lr, r0, r2
 800024e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000252:	fa1f f68c 	uxth.w	r6, ip
 8000256:	fbb1 f4f7 	udiv	r4, r1, r7
 800025a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025e:	fb07 1114 	mls	r1, r7, r4, r1
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	fb04 f106 	mul.w	r1, r4, r6
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f104 30ff 	add.w	r0, r4, #4294967295
 8000276:	f080 8112 	bcs.w	800049e <__udivmoddi4+0x27e>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 810f 	bls.w	800049e <__udivmoddi4+0x27e>
 8000280:	3c02      	subs	r4, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a59      	subs	r1, r3, r1
 8000286:	fa1f f38e 	uxth.w	r3, lr
 800028a:	fbb1 f0f7 	udiv	r0, r1, r7
 800028e:	fb07 1110 	mls	r1, r7, r0, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb00 f606 	mul.w	r6, r0, r6
 800029a:	429e      	cmp	r6, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x94>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a6:	f080 80fc 	bcs.w	80004a2 <__udivmoddi4+0x282>
 80002aa:	429e      	cmp	r6, r3
 80002ac:	f240 80f9 	bls.w	80004a2 <__udivmoddi4+0x282>
 80002b0:	4463      	add	r3, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	1b9b      	subs	r3, r3, r6
 80002b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11d      	cbz	r5, 80002c6 <__udivmoddi4+0xa6>
 80002be:	40d3      	lsrs	r3, r2
 80002c0:	2200      	movs	r2, #0
 80002c2:	e9c5 3200 	strd	r3, r2, [r5]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d905      	bls.n	80002da <__udivmoddi4+0xba>
 80002ce:	b10d      	cbz	r5, 80002d4 <__udivmoddi4+0xb4>
 80002d0:	e9c5 0100 	strd	r0, r1, [r5]
 80002d4:	2100      	movs	r1, #0
 80002d6:	4608      	mov	r0, r1
 80002d8:	e7f5      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d146      	bne.n	8000370 <__udivmoddi4+0x150>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xcc>
 80002e6:	4290      	cmp	r0, r2
 80002e8:	f0c0 80f0 	bcc.w	80004cc <__udivmoddi4+0x2ac>
 80002ec:	1a86      	subs	r6, r0, r2
 80002ee:	eb64 0303 	sbc.w	r3, r4, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d0e6      	beq.n	80002c6 <__udivmoddi4+0xa6>
 80002f8:	e9c5 6300 	strd	r6, r3, [r5]
 80002fc:	e7e3      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x204>
 8000304:	eba1 040c 	sub.w	r4, r1, ip
 8000308:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800030c:	fa1f f78c 	uxth.w	r7, ip
 8000310:	2101      	movs	r1, #1
 8000312:	fbb4 f6f8 	udiv	r6, r4, r8
 8000316:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031a:	fb08 4416 	mls	r4, r8, r6, r4
 800031e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000322:	fb07 f006 	mul.w	r0, r7, r6
 8000326:	4298      	cmp	r0, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x11c>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x11a>
 8000334:	4298      	cmp	r0, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 800033a:	4626      	mov	r6, r4
 800033c:	1a1c      	subs	r4, r3, r0
 800033e:	fa1f f38e 	uxth.w	r3, lr
 8000342:	fbb4 f0f8 	udiv	r0, r4, r8
 8000346:	fb08 4410 	mls	r4, r8, r0, r4
 800034a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034e:	fb00 f707 	mul.w	r7, r0, r7
 8000352:	429f      	cmp	r7, r3
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x148>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f100 34ff 	add.w	r4, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x146>
 8000360:	429f      	cmp	r7, r3
 8000362:	f200 80b0 	bhi.w	80004c6 <__udivmoddi4+0x2a6>
 8000366:	4620      	mov	r0, r4
 8000368:	1bdb      	subs	r3, r3, r7
 800036a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0x9c>
 8000370:	f1c1 0620 	rsb	r6, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 f706 	lsr.w	r7, r2, r6
 800037a:	431f      	orrs	r7, r3
 800037c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000380:	fa04 f301 	lsl.w	r3, r4, r1
 8000384:	ea43 030c 	orr.w	r3, r3, ip
 8000388:	40f4      	lsrs	r4, r6
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	0c38      	lsrs	r0, r7, #16
 8000390:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000394:	fbb4 fef0 	udiv	lr, r4, r0
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	fb00 441e 	mls	r4, r0, lr, r4
 80003a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a4:	fb0e f90c 	mul.w	r9, lr, ip
 80003a8:	45a1      	cmp	r9, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x1a6>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b6:	f080 8084 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80003ba:	45a1      	cmp	r9, r4
 80003bc:	f240 8081 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80003c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	eba4 0409 	sub.w	r4, r4, r9
 80003ca:	fa1f f983 	uxth.w	r9, r3
 80003ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d2:	fb00 4413 	mls	r4, r0, r3, r4
 80003d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003da:	fb03 fc0c 	mul.w	ip, r3, ip
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x1d2>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e8:	d267      	bcs.n	80004ba <__udivmoddi4+0x29a>
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d965      	bls.n	80004ba <__udivmoddi4+0x29a>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	443c      	add	r4, r7
 80003f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f6:	fba0 9302 	umull	r9, r3, r0, r2
 80003fa:	eba4 040c 	sub.w	r4, r4, ip
 80003fe:	429c      	cmp	r4, r3
 8000400:	46ce      	mov	lr, r9
 8000402:	469c      	mov	ip, r3
 8000404:	d351      	bcc.n	80004aa <__udivmoddi4+0x28a>
 8000406:	d04e      	beq.n	80004a6 <__udivmoddi4+0x286>
 8000408:	b155      	cbz	r5, 8000420 <__udivmoddi4+0x200>
 800040a:	ebb8 030e 	subs.w	r3, r8, lr
 800040e:	eb64 040c 	sbc.w	r4, r4, ip
 8000412:	fa04 f606 	lsl.w	r6, r4, r6
 8000416:	40cb      	lsrs	r3, r1
 8000418:	431e      	orrs	r6, r3
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c5 6400 	strd	r6, r4, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	e750      	b.n	80002c6 <__udivmoddi4+0xa6>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f103 	lsr.w	r1, r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa24 f303 	lsr.w	r3, r4, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	430c      	orrs	r4, r1
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000440:	fa1f f78c 	uxth.w	r7, ip
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3110 	mls	r1, r8, r0, r3
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000452:	fb00 f107 	mul.w	r1, r0, r7
 8000456:	4299      	cmp	r1, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x24c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000462:	d22c      	bcs.n	80004be <__udivmoddi4+0x29e>
 8000464:	4299      	cmp	r1, r3
 8000466:	d92a      	bls.n	80004be <__udivmoddi4+0x29e>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb3 f1f8 	udiv	r1, r3, r8
 8000474:	fb08 3311 	mls	r3, r8, r1, r3
 8000478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047c:	fb01 f307 	mul.w	r3, r1, r7
 8000480:	42a3      	cmp	r3, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x276>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f101 36ff 	add.w	r6, r1, #4294967295
 800048c:	d213      	bcs.n	80004b6 <__udivmoddi4+0x296>
 800048e:	42a3      	cmp	r3, r4
 8000490:	d911      	bls.n	80004b6 <__udivmoddi4+0x296>
 8000492:	3902      	subs	r1, #2
 8000494:	4464      	add	r4, ip
 8000496:	1ae4      	subs	r4, r4, r3
 8000498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049c:	e739      	b.n	8000312 <__udivmoddi4+0xf2>
 800049e:	4604      	mov	r4, r0
 80004a0:	e6f0      	b.n	8000284 <__udivmoddi4+0x64>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e706      	b.n	80002b4 <__udivmoddi4+0x94>
 80004a6:	45c8      	cmp	r8, r9
 80004a8:	d2ae      	bcs.n	8000408 <__udivmoddi4+0x1e8>
 80004aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7a8      	b.n	8000408 <__udivmoddi4+0x1e8>
 80004b6:	4631      	mov	r1, r6
 80004b8:	e7ed      	b.n	8000496 <__udivmoddi4+0x276>
 80004ba:	4603      	mov	r3, r0
 80004bc:	e799      	b.n	80003f2 <__udivmoddi4+0x1d2>
 80004be:	4630      	mov	r0, r6
 80004c0:	e7d4      	b.n	800046c <__udivmoddi4+0x24c>
 80004c2:	46d6      	mov	lr, sl
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1a6>
 80004c6:	4463      	add	r3, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e74d      	b.n	8000368 <__udivmoddi4+0x148>
 80004cc:	4606      	mov	r6, r0
 80004ce:	4623      	mov	r3, r4
 80004d0:	4608      	mov	r0, r1
 80004d2:	e70f      	b.n	80002f4 <__udivmoddi4+0xd4>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	e730      	b.n	800033c <__udivmoddi4+0x11c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <_ZN14DashboardState5resetEv>:
#include "DashboardState.hpp"

void DashboardState::reset() {
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
    lightState = LIGHTS_NONE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2200      	movs	r2, #0
 80004ec:	701a      	strb	r2, [r3, #0]
    oldLightState = LIGHTS_NONE;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	2200      	movs	r2, #0
 80004f2:	709a      	strb	r2, [r3, #2]

    outputPortState = 0;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2200      	movs	r2, #0
 80004f8:	70da      	strb	r2, [r3, #3]
    hornState = 0;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	2200      	movs	r2, #0
 80004fe:	711a      	strb	r2, [r3, #4]
    fanState = 0;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	2200      	movs	r2, #0
 8000504:	715a      	strb	r2, [r3, #5]
    headlightState = 0;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	2200      	movs	r2, #0
 800050a:	719a      	strb	r2, [r3, #6]
    pttState = 0;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	2200      	movs	r2, #0
 8000510:	71da      	strb	r2, [r3, #7]
    displayState = 0;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	2200      	movs	r2, #0
 8000516:	721a      	strb	r2, [r3, #8]

    bmsStatus = 0;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2200      	movs	r2, #0
 800051c:	74da      	strb	r2, [r3, #19]
    mcStatus = 0;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2200      	movs	r2, #0
 8000522:	751a      	strb	r2, [r3, #20]
    arrayStatus = 0;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2200      	movs	r2, #0
 8000528:	755a      	strb	r2, [r3, #21]

    old_bmsStatus = 0;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2200      	movs	r2, #0
 800052e:	759a      	strb	r2, [r3, #22]
    old_mcStatus = 0;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2200      	movs	r2, #0
 8000534:	75da      	strb	r2, [r3, #23]
    old_arrayStatus = 0;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2200      	movs	r2, #0
 800053a:	761a      	strb	r2, [r3, #24]

    uart_rx = 0;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2200      	movs	r2, #0
 8000540:	765a      	strb	r2, [r3, #25]
    old_uart_rx = 0;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2200      	movs	r2, #0
 8000546:	769a      	strb	r2, [r3, #26]
    updateRequested = 0;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2200      	movs	r2, #0
 800054c:	76da      	strb	r2, [r3, #27]
}
 800054e:	bf00      	nop
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr

0800055a <_ZN14DashboardState14updateFromUARTEv>:

// gets called only when something changes in the dashboard state
void DashboardState::updateFromUART() {
 800055a:	b580      	push	{r7, lr}
 800055c:	b082      	sub	sp, #8
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]

    // uart data for lights (blinkers)
    if (uart_rx & BUTTON_HAZARD) {
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	7e5b      	ldrb	r3, [r3, #25]
 8000566:	f003 0304 	and.w	r3, r3, #4
 800056a:	2b00      	cmp	r3, #0
 800056c:	d003      	beq.n	8000576 <_ZN14DashboardState14updateFromUARTEv+0x1c>
        lightState = LIGHTS_HAZARD;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2203      	movs	r2, #3
 8000572:	701a      	strb	r2, [r3, #0]
 8000574:	e015      	b.n	80005a2 <_ZN14DashboardState14updateFromUARTEv+0x48>
    }
    else if (uart_rx & BUTTON_LEFT_TURN) {
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	7e5b      	ldrb	r3, [r3, #25]
 800057a:	f003 0308 	and.w	r3, r3, #8
 800057e:	2b00      	cmp	r3, #0
 8000580:	d003      	beq.n	800058a <_ZN14DashboardState14updateFromUARTEv+0x30>
        lightState = LIGHTS_LEFT;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2201      	movs	r2, #1
 8000586:	701a      	strb	r2, [r3, #0]
 8000588:	e00b      	b.n	80005a2 <_ZN14DashboardState14updateFromUARTEv+0x48>
    }
    else if (uart_rx & BUTTON_RIGHT_TURN) {
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	7e5b      	ldrb	r3, [r3, #25]
 800058e:	b25b      	sxtb	r3, r3
 8000590:	2b00      	cmp	r3, #0
 8000592:	da03      	bge.n	800059c <_ZN14DashboardState14updateFromUARTEv+0x42>
        lightState = LIGHTS_RIGHT;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2202      	movs	r2, #2
 8000598:	701a      	strb	r2, [r3, #0]
 800059a:	e002      	b.n	80005a2 <_ZN14DashboardState14updateFromUARTEv+0x48>
    }
    else {
        lightState = LIGHTS_NONE;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2200      	movs	r2, #0
 80005a0:	701a      	strb	r2, [r3, #0]
    }

    // if the light state has changed, reset the blink time and update the output port state
    if (oldLightState != lightState) {
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	789a      	ldrb	r2, [r3, #2]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	429a      	cmp	r2, r3
 80005ac:	d041      	beq.n	8000632 <_ZN14DashboardState14updateFromUARTEv+0xd8>
        lastBlinkTime = HAL_GetTick(); // reset blink time if light state changes
 80005ae:	f002 fe25 	bl	80031fc <HAL_GetTick>
 80005b2:	4602      	mov	r2, r0
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	60da      	str	r2, [r3, #12]
        oldLightState = lightState;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	781a      	ldrb	r2, [r3, #0]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	709a      	strb	r2, [r3, #2]
        if (lightState == LIGHTS_HAZARD) {
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b03      	cmp	r3, #3
 80005c6:	d107      	bne.n	80005d8 <_ZN14DashboardState14updateFromUARTEv+0x7e>
            outputPortState |= (OUTPUT_FL_LIGHT_CTRL | OUTPUT_FR_LIGHT_CTRL);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	78db      	ldrb	r3, [r3, #3]
 80005cc:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80005d0:	b2da      	uxtb	r2, r3
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	70da      	strb	r2, [r3, #3]
 80005d6:	e02c      	b.n	8000632 <_ZN14DashboardState14updateFromUARTEv+0xd8>
        }
        else if (lightState == LIGHTS_LEFT) {
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d10e      	bne.n	80005fe <_ZN14DashboardState14updateFromUARTEv+0xa4>
            outputPortState |= OUTPUT_FL_LIGHT_CTRL;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	78db      	ldrb	r3, [r3, #3]
 80005e4:	f043 0320 	orr.w	r3, r3, #32
 80005e8:	b2da      	uxtb	r2, r3
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	70da      	strb	r2, [r3, #3]
            outputPortState &= ~OUTPUT_FR_LIGHT_CTRL;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	78db      	ldrb	r3, [r3, #3]
 80005f2:	f023 0310 	bic.w	r3, r3, #16
 80005f6:	b2da      	uxtb	r2, r3
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	70da      	strb	r2, [r3, #3]
 80005fc:	e019      	b.n	8000632 <_ZN14DashboardState14updateFromUARTEv+0xd8>
        }
        else if (lightState == LIGHTS_RIGHT) {
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b02      	cmp	r3, #2
 8000604:	d10e      	bne.n	8000624 <_ZN14DashboardState14updateFromUARTEv+0xca>
            outputPortState |= OUTPUT_FR_LIGHT_CTRL;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	78db      	ldrb	r3, [r3, #3]
 800060a:	f043 0310 	orr.w	r3, r3, #16
 800060e:	b2da      	uxtb	r2, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	70da      	strb	r2, [r3, #3]
            outputPortState &= ~OUTPUT_FL_LIGHT_CTRL;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	78db      	ldrb	r3, [r3, #3]
 8000618:	f023 0320 	bic.w	r3, r3, #32
 800061c:	b2da      	uxtb	r2, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	70da      	strb	r2, [r3, #3]
 8000622:	e006      	b.n	8000632 <_ZN14DashboardState14updateFromUARTEv+0xd8>
        }
        else {
            outputPortState &= ~(OUTPUT_FL_LIGHT_CTRL | OUTPUT_FR_LIGHT_CTRL);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	78db      	ldrb	r3, [r3, #3]
 8000628:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800062c:	b2da      	uxtb	r2, r3
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	70da      	strb	r2, [r3, #3]
        }
    }

    // if headlight should be on  
    if (uart_rx & BUTTON_HEADLIGHTS) {
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	7e5b      	ldrb	r3, [r3, #25]
 8000636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800063a:	2b00      	cmp	r3, #0
 800063c:	d00a      	beq.n	8000654 <_ZN14DashboardState14updateFromUARTEv+0xfa>
        outputPortState |= (OUTPUT_R_HEAD_CTRL | OUTPUT_L_HEAD_CTRL);
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	78db      	ldrb	r3, [r3, #3]
 8000642:	f043 030c 	orr.w	r3, r3, #12
 8000646:	b2da      	uxtb	r2, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	70da      	strb	r2, [r3, #3]
        headlightState = 1;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2201      	movs	r2, #1
 8000650:	719a      	strb	r2, [r3, #6]
 8000652:	e009      	b.n	8000668 <_ZN14DashboardState14updateFromUARTEv+0x10e>
    }
    else  {
        outputPortState &= ~(OUTPUT_R_HEAD_CTRL | OUTPUT_L_HEAD_CTRL);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	78db      	ldrb	r3, [r3, #3]
 8000658:	f023 030c 	bic.w	r3, r3, #12
 800065c:	b2da      	uxtb	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	70da      	strb	r2, [r3, #3]
        headlightState = 0;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2200      	movs	r2, #0
 8000666:	719a      	strb	r2, [r3, #6]
    }

    // if horn should be on
    if (uart_rx & BUTTON_HORN) {
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	7e5b      	ldrb	r3, [r3, #25]
 800066c:	f003 0320 	and.w	r3, r3, #32
 8000670:	2b00      	cmp	r3, #0
 8000672:	d00a      	beq.n	800068a <_ZN14DashboardState14updateFromUARTEv+0x130>
        outputPortState |= OUTPUT_HORN_CTRL;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	78db      	ldrb	r3, [r3, #3]
 8000678:	f043 0302 	orr.w	r3, r3, #2
 800067c:	b2da      	uxtb	r2, r3
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	70da      	strb	r2, [r3, #3]
        hornState = 1;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2201      	movs	r2, #1
 8000686:	711a      	strb	r2, [r3, #4]
 8000688:	e009      	b.n	800069e <_ZN14DashboardState14updateFromUARTEv+0x144>
    }
    else {
        outputPortState &= ~OUTPUT_HORN_CTRL;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	78db      	ldrb	r3, [r3, #3]
 800068e:	f023 0302 	bic.w	r3, r3, #2
 8000692:	b2da      	uxtb	r2, r3
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	70da      	strb	r2, [r3, #3]
        hornState = 0;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2200      	movs	r2, #0
 800069c:	711a      	strb	r2, [r3, #4]
    }

    // if fan should be on
    if (uart_rx & BUTTON_FAN) {
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	7e5b      	ldrb	r3, [r3, #25]
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d00a      	beq.n	80006c0 <_ZN14DashboardState14updateFromUARTEv+0x166>
        outputPortState |= OUTPUT_FAN_CTRL;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	78db      	ldrb	r3, [r3, #3]
 80006ae:	f043 0301 	orr.w	r3, r3, #1
 80006b2:	b2da      	uxtb	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	70da      	strb	r2, [r3, #3]
        fanState = 1;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2201      	movs	r2, #1
 80006bc:	715a      	strb	r2, [r3, #5]
 80006be:	e009      	b.n	80006d4 <_ZN14DashboardState14updateFromUARTEv+0x17a>
    }
    else {
        outputPortState &= ~OUTPUT_FAN_CTRL;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	78db      	ldrb	r3, [r3, #3]
 80006c4:	f023 0301 	bic.w	r3, r3, #1
 80006c8:	b2da      	uxtb	r2, r3
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	70da      	strb	r2, [r3, #3]
        fanState = 0;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2200      	movs	r2, #0
 80006d2:	715a      	strb	r2, [r3, #5]
    }

    // if PTT should be on
    if (uart_rx & BUTTON_PTT) {
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	7e5b      	ldrb	r3, [r3, #25]
 80006d8:	f003 0310 	and.w	r3, r3, #16
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d003      	beq.n	80006e8 <_ZN14DashboardState14updateFromUARTEv+0x18e>
        pttState = 1;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2201      	movs	r2, #1
 80006e4:	71da      	strb	r2, [r3, #7]
 80006e6:	e002      	b.n	80006ee <_ZN14DashboardState14updateFromUARTEv+0x194>
    }
    else {
        pttState = 0;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2200      	movs	r2, #0
 80006ec:	71da      	strb	r2, [r3, #7]
    }

    // TODO: do something with displayState cause this isn't setup to go anywhere
    if (uart_rx & BUTTON_DISPLAY) {
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	7e5b      	ldrb	r3, [r3, #25]
 80006f2:	f003 0302 	and.w	r3, r3, #2
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d003      	beq.n	8000702 <_ZN14DashboardState14updateFromUARTEv+0x1a8>
        displayState = 1;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	2201      	movs	r2, #1
 80006fe:	721a      	strb	r2, [r3, #8]
    }
    else {
        displayState = 0;
    }

}
 8000700:	e002      	b.n	8000708 <_ZN14DashboardState14updateFromUARTEv+0x1ae>
        displayState = 0;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2200      	movs	r2, #0
 8000706:	721a      	strb	r2, [r3, #8]
}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <_ZN14DashboardState11writeToPortER12TCAL9538RSVR>:

HAL_StatusTypeDef DashboardState::writeToPort(TCAL9538RSVR &U7) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	6039      	str	r1, [r7, #0]
	uint8_t inverted = ~outputPortState;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	78db      	ldrb	r3, [r3, #3]
 800071e:	43db      	mvns	r3, r3
 8000720:	b2db      	uxtb	r3, r3
 8000722:	73fb      	strb	r3, [r7, #15]
    return TCAL9538RSVR_SetOutput(&U7, &inverted); // write to output port
 8000724:	f107 030f 	add.w	r3, r7, #15
 8000728:	4619      	mov	r1, r3
 800072a:	6838      	ldr	r0, [r7, #0]
 800072c:	f002 fcc7 	bl	80030be <TCAL9538RSVR_SetOutput>
 8000730:	4603      	mov	r3, r0
}
 8000732:	4618      	mov	r0, r3
 8000734:	3710      	adds	r7, #16
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
	...

0800073c <_ZN14DashboardState11blinkLightsEv>:

void DashboardState::blinkLights() {
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
    switch (lightState) {
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	2b03      	cmp	r3, #3
 800074a:	d82b      	bhi.n	80007a4 <_ZN14DashboardState11blinkLightsEv+0x68>
 800074c:	a201      	add	r2, pc, #4	@ (adr r2, 8000754 <_ZN14DashboardState11blinkLightsEv+0x18>)
 800074e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000752:	bf00      	nop
 8000754:	08000795 	.word	0x08000795
 8000758:	08000775 	.word	0x08000775
 800075c:	08000785 	.word	0x08000785
 8000760:	08000765 	.word	0x08000765
        case LIGHTS_HAZARD:
            outputPortState ^= (OUTPUT_FL_LIGHT_CTRL | OUTPUT_FR_LIGHT_CTRL);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	78db      	ldrb	r3, [r3, #3]
 8000768:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 800076c:	b2da      	uxtb	r2, r3
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	70da      	strb	r2, [r3, #3]
            break;
 8000772:	e017      	b.n	80007a4 <_ZN14DashboardState11blinkLightsEv+0x68>
        case LIGHTS_LEFT:
            outputPortState ^= OUTPUT_FL_LIGHT_CTRL;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	78db      	ldrb	r3, [r3, #3]
 8000778:	f083 0320 	eor.w	r3, r3, #32
 800077c:	b2da      	uxtb	r2, r3
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	70da      	strb	r2, [r3, #3]
            break;
 8000782:	e00f      	b.n	80007a4 <_ZN14DashboardState11blinkLightsEv+0x68>
        case LIGHTS_RIGHT:
            outputPortState ^= OUTPUT_FR_LIGHT_CTRL;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	78db      	ldrb	r3, [r3, #3]
 8000788:	f083 0310 	eor.w	r3, r3, #16
 800078c:	b2da      	uxtb	r2, r3
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	70da      	strb	r2, [r3, #3]
            break;
 8000792:	e007      	b.n	80007a4 <_ZN14DashboardState11blinkLightsEv+0x68>
        case LIGHTS_NONE:
            outputPortState &= ~(OUTPUT_FL_LIGHT_CTRL | OUTPUT_FR_LIGHT_CTRL);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	78db      	ldrb	r3, [r3, #3]
 8000798:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800079c:	b2da      	uxtb	r2, r3
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	70da      	strb	r2, [r3, #3]
            break;
 80007a2:	bf00      	nop
    }
}
 80007a4:	bf00      	nop
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr

080007b0 <CPP_UserSetup>:

DashboardState dashboardState; // Dashboard state object

ILI9341 screen(320, 240);

void CPP_UserSetup(void) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af02      	add	r7, sp, #8
    // Make sure that timer priorities are configured correctly
    HAL_Delay(10);
 80007b6:	200a      	movs	r0, #10
 80007b8:	f002 fd2c 	bl	8003214 <HAL_Delay>

	dashboardState.reset(); // reset dashboard state
 80007bc:	4860      	ldr	r0, [pc, #384]	@ (8000940 <CPP_UserSetup+0x190>)
 80007be:	f7ff fe8f 	bl	80004e0 <_ZN14DashboardState5resetEv>

    dma_flag = 0;
 80007c2:	4b60      	ldr	r3, [pc, #384]	@ (8000944 <CPP_UserSetup+0x194>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	701a      	strb	r2, [r3, #0]
    cc_enable = 0;
 80007c8:	4b5f      	ldr	r3, [pc, #380]	@ (8000948 <CPP_UserSetup+0x198>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	701a      	strb	r2, [r3, #0]

	// -------------------------
	// CAN INIT
	// -------------------------
	Init_CAN_Filter1(hcan1); // set up CAN filter for CAN1
 80007ce:	485f      	ldr	r0, [pc, #380]	@ (800094c <CPP_UserSetup+0x19c>)
 80007d0:	f000 fd1c 	bl	800120c <_Z16Init_CAN_Filter1R17CAN_HandleTypeDef>
	HAL_CAN_Start(&hcan1); // start CAN1
 80007d4:	485d      	ldr	r0, [pc, #372]	@ (800094c <CPP_UserSetup+0x19c>)
 80007d6:	f004 faf1 	bl	8004dbc <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING); // enable CAN1 RX interrupt
 80007da:	2102      	movs	r1, #2
 80007dc:	485b      	ldr	r0, [pc, #364]	@ (800094c <CPP_UserSetup+0x19c>)
 80007de:	f004 fc36 	bl	800504e <HAL_CAN_ActivateNotification>

	// -------------------------
	// GPIO EXPANDERS INIT
	// -------------------------

    if (TCAL9538RSVR_INIT(&U5, &hi2c4, 0b10, 0xFF, 0x00) != HAL_OK) { Error_Handler(); } // inputs
 80007e2:	2300      	movs	r3, #0
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	23ff      	movs	r3, #255	@ 0xff
 80007e8:	2202      	movs	r2, #2
 80007ea:	4959      	ldr	r1, [pc, #356]	@ (8000950 <CPP_UserSetup+0x1a0>)
 80007ec:	4859      	ldr	r0, [pc, #356]	@ (8000954 <CPP_UserSetup+0x1a4>)
 80007ee:	f002 fba9 	bl	8002f44 <TCAL9538RSVR_INIT>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	bf14      	ite	ne
 80007f8:	2301      	movne	r3, #1
 80007fa:	2300      	moveq	r3, #0
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <CPP_UserSetup+0x56>
 8000802:	f001 f93f 	bl	8001a84 <Error_Handler>
    //if (TCAL9538RSVR_INIT(&U16, &hi2c4, 0b01, 0b00111111, 0b11000000) != HAL_OK) { Error_Handler(); }
    if (TCAL9538RSVR_INIT(&U7, &hi2c4, 0x00, 0b00000000, 0b00000000) != HAL_OK) { Error_Handler(); } // output
 8000806:	2300      	movs	r3, #0
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	2300      	movs	r3, #0
 800080c:	2200      	movs	r2, #0
 800080e:	4950      	ldr	r1, [pc, #320]	@ (8000950 <CPP_UserSetup+0x1a0>)
 8000810:	4851      	ldr	r0, [pc, #324]	@ (8000958 <CPP_UserSetup+0x1a8>)
 8000812:	f002 fb97 	bl	8002f44 <TCAL9538RSVR_INIT>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	bf14      	ite	ne
 800081c:	2301      	movne	r3, #1
 800081e:	2300      	moveq	r3, #0
 8000820:	b2db      	uxtb	r3, r3
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <CPP_UserSetup+0x7a>
 8000826:	f001 f92d 	bl	8001a84 <Error_Handler>

    // set outputs to low to start
	if (dashboardState.writeToPort(U7) != HAL_OK) { Error_Handler(); }
 800082a:	494b      	ldr	r1, [pc, #300]	@ (8000958 <CPP_UserSetup+0x1a8>)
 800082c:	4844      	ldr	r0, [pc, #272]	@ (8000940 <CPP_UserSetup+0x190>)
 800082e:	f7ff ff6f 	bl	8000710 <_ZN14DashboardState11writeToPortER12TCAL9538RSVR>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	bf14      	ite	ne
 8000838:	2301      	movne	r3, #1
 800083a:	2300      	moveq	r3, #0
 800083c:	b2db      	uxtb	r3, r3
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <CPP_UserSetup+0x96>
 8000842:	f001 f91f 	bl	8001a84 <Error_Handler>

	// Set up UART4 for receiving data from the steering wheel
	HAL_UART_Receive_IT(&huart4, &dashboardState.uart_rx, 1); // enable uart interrupt
 8000846:	2201      	movs	r2, #1
 8000848:	4944      	ldr	r1, [pc, #272]	@ (800095c <CPP_UserSetup+0x1ac>)
 800084a:	4845      	ldr	r0, [pc, #276]	@ (8000960 <CPP_UserSetup+0x1b0>)
 800084c:	f007 fe30 	bl	80084b0 <HAL_UART_Receive_IT>

	// -------------------------
	// SCREEN INIT 
	// -------------------------
	
    screen.Init();
 8000850:	4844      	ldr	r0, [pc, #272]	@ (8000964 <CPP_UserSetup+0x1b4>)
 8000852:	f001 fcd1 	bl	80021f8 <_ZN7ILI93414InitEv>
    screen.SetRotation(3);
 8000856:	2103      	movs	r1, #3
 8000858:	4842      	ldr	r0, [pc, #264]	@ (8000964 <CPP_UserSetup+0x1b4>)
 800085a:	f002 f857 	bl	800290c <_ZN7ILI934111SetRotationEh>
    screen.ClearScreen(RGB565_WHITE);
 800085e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000862:	4840      	ldr	r0, [pc, #256]	@ (8000964 <CPP_UserSetup+0x1b4>)
 8000864:	f001 ff87 	bl	8002776 <_ZN7ILI934111ClearScreenEt>

    uint16_t x_text = 70;
 8000868:	2346      	movs	r3, #70	@ 0x46
 800086a:	81fb      	strh	r3, [r7, #14]
    uint16_t y_text = 10;
 800086c:	230a      	movs	r3, #10
 800086e:	81bb      	strh	r3, [r7, #12]
    const char* str1 = "UF Solar Gators :)\0";
 8000870:	4b3d      	ldr	r3, [pc, #244]	@ (8000968 <CPP_UserSetup+0x1b8>)
 8000872:	60bb      	str	r3, [r7, #8]
    screen.SetTextSize(2);
 8000874:	2102      	movs	r1, #2
 8000876:	483b      	ldr	r0, [pc, #236]	@ (8000964 <CPP_UserSetup+0x1b4>)
 8000878:	f002 f8b4 	bl	80029e4 <_ZN7ILI934111SetTextSizeEh>
    screen.DrawText(x_text, y_text, str1, RGB565_BLACK);
 800087c:	89ba      	ldrh	r2, [r7, #12]
 800087e:	89f9      	ldrh	r1, [r7, #14]
 8000880:	2300      	movs	r3, #0
 8000882:	9300      	str	r3, [sp, #0]
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	4837      	ldr	r0, [pc, #220]	@ (8000964 <CPP_UserSetup+0x1b4>)
 8000888:	f002 f9d8 	bl	8002c3c <_ZN7ILI93418DrawTextEttPKct>

    x_text = 55;
 800088c:	2337      	movs	r3, #55	@ 0x37
 800088e:	81fb      	strh	r3, [r7, #14]
    y_text = 170;
 8000890:	23aa      	movs	r3, #170	@ 0xaa
 8000892:	81bb      	strh	r3, [r7, #12]
    const char* str2 = "BMS    MC    Array\0";
 8000894:	4b35      	ldr	r3, [pc, #212]	@ (800096c <CPP_UserSetup+0x1bc>)
 8000896:	607b      	str	r3, [r7, #4]

    screen.SetTextSize(2);
 8000898:	2102      	movs	r1, #2
 800089a:	4832      	ldr	r0, [pc, #200]	@ (8000964 <CPP_UserSetup+0x1b4>)
 800089c:	f002 f8a2 	bl	80029e4 <_ZN7ILI934111SetTextSizeEh>
    screen.DrawText(x_text, y_text, str2, RGB565_BLACK);
 80008a0:	89ba      	ldrh	r2, [r7, #12]
 80008a2:	89f9      	ldrh	r1, [r7, #14]
 80008a4:	2300      	movs	r3, #0
 80008a6:	9300      	str	r3, [sp, #0]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	482e      	ldr	r0, [pc, #184]	@ (8000964 <CPP_UserSetup+0x1b4>)
 80008ac:	f002 f9c6 	bl	8002c3c <_ZN7ILI93418DrawTextEttPKct>

    screen.FillCircle(70, 210, 10, RGB565_RED);
 80008b0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80008b4:	9300      	str	r3, [sp, #0]
 80008b6:	230a      	movs	r3, #10
 80008b8:	22d2      	movs	r2, #210	@ 0xd2
 80008ba:	2146      	movs	r1, #70	@ 0x46
 80008bc:	4829      	ldr	r0, [pc, #164]	@ (8000964 <CPP_UserSetup+0x1b4>)
 80008be:	f002 fa9b 	bl	8002df8 <_ZN7ILI934110FillCircleEtttt>
    screen.FillCircle(150, 210, 10, RGB565_RED);
 80008c2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80008c6:	9300      	str	r3, [sp, #0]
 80008c8:	230a      	movs	r3, #10
 80008ca:	22d2      	movs	r2, #210	@ 0xd2
 80008cc:	2196      	movs	r1, #150	@ 0x96
 80008ce:	4825      	ldr	r0, [pc, #148]	@ (8000964 <CPP_UserSetup+0x1b4>)
 80008d0:	f002 fa92 	bl	8002df8 <_ZN7ILI934110FillCircleEtttt>
    screen.FillCircle(235, 210, 10, RGB565_RED);
 80008d4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80008d8:	9300      	str	r3, [sp, #0]
 80008da:	230a      	movs	r3, #10
 80008dc:	22d2      	movs	r2, #210	@ 0xd2
 80008de:	21eb      	movs	r1, #235	@ 0xeb
 80008e0:	4820      	ldr	r0, [pc, #128]	@ (8000964 <CPP_UserSetup+0x1b4>)
 80008e2:	f002 fa89 	bl	8002df8 <_ZN7ILI934110FillCircleEtttt>

	// temp to help debug  
	const char* str3 = "HedLit Horn  Fan\0";
 80008e6:	4b22      	ldr	r3, [pc, #136]	@ (8000970 <CPP_UserSetup+0x1c0>)
 80008e8:	603b      	str	r3, [r7, #0]
    screen.SetTextSize(2);
 80008ea:	2102      	movs	r1, #2
 80008ec:	481d      	ldr	r0, [pc, #116]	@ (8000964 <CPP_UserSetup+0x1b4>)
 80008ee:	f002 f879 	bl	80029e4 <_ZN7ILI934111SetTextSizeEh>
    screen.DrawText(55, 80, str3, RGB565_BLACK);  // Labels above the circles
 80008f2:	2300      	movs	r3, #0
 80008f4:	9300      	str	r3, [sp, #0]
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	2250      	movs	r2, #80	@ 0x50
 80008fa:	2137      	movs	r1, #55	@ 0x37
 80008fc:	4819      	ldr	r0, [pc, #100]	@ (8000964 <CPP_UserSetup+0x1b4>)
 80008fe:	f002 f99d 	bl	8002c3c <_ZN7ILI93418DrawTextEttPKct>

    screen.FillCircle(70, 120, 10, RGB565_RED);   // Headlights
 8000902:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000906:	9300      	str	r3, [sp, #0]
 8000908:	230a      	movs	r3, #10
 800090a:	2278      	movs	r2, #120	@ 0x78
 800090c:	2146      	movs	r1, #70	@ 0x46
 800090e:	4815      	ldr	r0, [pc, #84]	@ (8000964 <CPP_UserSetup+0x1b4>)
 8000910:	f002 fa72 	bl	8002df8 <_ZN7ILI934110FillCircleEtttt>
    screen.FillCircle(150, 120, 10, RGB565_RED);  // Horn
 8000914:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000918:	9300      	str	r3, [sp, #0]
 800091a:	230a      	movs	r3, #10
 800091c:	2278      	movs	r2, #120	@ 0x78
 800091e:	2196      	movs	r1, #150	@ 0x96
 8000920:	4810      	ldr	r0, [pc, #64]	@ (8000964 <CPP_UserSetup+0x1b4>)
 8000922:	f002 fa69 	bl	8002df8 <_ZN7ILI934110FillCircleEtttt>
    screen.FillCircle(235, 120, 10, RGB565_RED);  // Fan
 8000926:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800092a:	9300      	str	r3, [sp, #0]
 800092c:	230a      	movs	r3, #10
 800092e:	2278      	movs	r2, #120	@ 0x78
 8000930:	21eb      	movs	r1, #235	@ 0xeb
 8000932:	480c      	ldr	r0, [pc, #48]	@ (8000964 <CPP_UserSetup+0x1b4>)
 8000934:	f002 fa60 	bl	8002df8 <_ZN7ILI934110FillCircleEtttt>
}
 8000938:	bf00      	nop
 800093a:	3710      	adds	r7, #16
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	200000ac 	.word	0x200000ac
 8000944:	200000a8 	.word	0x200000a8
 8000948:	200000a9 	.word	0x200000a9
 800094c:	200001f0 	.word	0x200001f0
 8000950:	20000240 	.word	0x20000240
 8000954:	2000007c 	.word	0x2000007c
 8000958:	2000008c 	.word	0x2000008c
 800095c:	200000c5 	.word	0x200000c5
 8000960:	20000294 	.word	0x20000294
 8000964:	200000cc 	.word	0x200000cc
 8000968:	0800cbb8 	.word	0x0800cbb8
 800096c:	0800cbcc 	.word	0x0800cbcc
 8000970:	0800cbe0 	.word	0x0800cbe0

08000974 <_Z11StartTask01Pv>:


void StartTask01(void *argument)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  //HAL_UART_Receive(&huart4, UART4_rxBuffer, 1, HAL_MAX_DELAY);
	  HAL_GPIO_TogglePin(GPIOA, OK_LED_Pin);
 800097c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000980:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000984:	f005 f88c 	bl	8005aa0 <HAL_GPIO_TogglePin>
    osDelay(500);
 8000988:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800098c:	f009 f9c2 	bl	8009d14 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, OK_LED_Pin);
 8000990:	bf00      	nop
 8000992:	e7f3      	b.n	800097c <_Z11StartTask01Pv+0x8>

08000994 <_Z11StartTask02Pv>:
  }
  /* USER CODE END 5 */
}

void StartTask02(void *argument)
{
 8000994:	b5b0      	push	{r4, r5, r7, lr}
 8000996:	b092      	sub	sp, #72	@ 0x48
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */

	uint16_t adc_var_avg = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

	int HAL_CAN_BUSY = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	643b      	str	r3, [r7, #64]	@ 0x40
	uint64_t messages_sent = 0;
 80009a6:	f04f 0200 	mov.w	r2, #0
 80009aa:	f04f 0300 	mov.w	r3, #0
 80009ae:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	static uint8_t update_cc = 0;

	CAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData[8] = { 0 };
 80009b2:	2300      	movs	r3, #0
 80009b4:	613b      	str	r3, [r7, #16]
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]
	uint32_t TxMailbox = { 0 };
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]

	TxHeader.IDE = CAN_ID_STD; // Standard ID (not extended)
 80009be:	2300      	movs	r3, #0
 80009c0:	623b      	str	r3, [r7, #32]
	TxHeader.StdId = 0x0; // 11 bit Identifier
 80009c2:	2300      	movs	r3, #0
 80009c4:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR = CAN_RTR_DATA; // Std RTR Data frame
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	@ 0x24
	TxHeader.DLC = 8; // 8 bytes being transmitted
 80009ca:	2308      	movs	r3, #8
 80009cc:	62bb      	str	r3, [r7, #40]	@ 0x28
	TxData[0] = 1;
 80009ce:	2301      	movs	r3, #1
 80009d0:	743b      	strb	r3, [r7, #16]
	uint8_t adc_data[2];



  	  // Transmit over CAN
  	  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 80009d2:	f107 030c 	add.w	r3, r7, #12
 80009d6:	f107 0210 	add.w	r2, r7, #16
 80009da:	f107 0118 	add.w	r1, r7, #24
 80009de:	4848      	ldr	r0, [pc, #288]	@ (8000b00 <_Z11StartTask02Pv+0x16c>)
 80009e0:	f004 fa30 	bl	8004e44 <HAL_CAN_AddTxMessage>


  for (;;)
  {

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 80009e4:	220a      	movs	r2, #10
 80009e6:	4947      	ldr	r1, [pc, #284]	@ (8000b04 <_Z11StartTask02Pv+0x170>)
 80009e8:	4847      	ldr	r0, [pc, #284]	@ (8000b08 <_Z11StartTask02Pv+0x174>)
 80009ea:	f002 ffc1 	bl	8003970 <HAL_ADC_Start_DMA>
	// Start ADC with DMA
	while (!(dma_flag));
 80009ee:	bf00      	nop
 80009f0:	4b46      	ldr	r3, [pc, #280]	@ (8000b0c <_Z11StartTask02Pv+0x178>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	bf0c      	ite	eq
 80009fa:	2301      	moveq	r3, #1
 80009fc:	2300      	movne	r3, #0
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d1f5      	bne.n	80009f0 <_Z11StartTask02Pv+0x5c>

	// Stop ADC with DMA
	HAL_ADC_Stop_DMA(&hadc1);
 8000a04:	4840      	ldr	r0, [pc, #256]	@ (8000b08 <_Z11StartTask02Pv+0x174>)
 8000a06:	f003 f86f 	bl	8003ae8 <HAL_ADC_Stop_DMA>
	dma_flag = 0;
 8000a0a:	4b40      	ldr	r3, [pc, #256]	@ (8000b0c <_Z11StartTask02Pv+0x178>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	701a      	strb	r2, [r3, #0]
	adc_var_avg = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	// Copy ADC buffer and compute average
	for (int i = 0; i < ADC_BUF_LEN; i++)
 8000a16:	2300      	movs	r3, #0
 8000a18:	637b      	str	r3, [r7, #52]	@ 0x34
 8000a1a:	e00b      	b.n	8000a34 <_Z11StartTask02Pv+0xa0>
	{
		adc_var_avg += adc_buf[i];
 8000a1c:	4a39      	ldr	r2, [pc, #228]	@ (8000b04 <_Z11StartTask02Pv+0x170>)
 8000a1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a20:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000a24:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000a28:	4413      	add	r3, r2
 8000a2a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	for (int i = 0; i < ADC_BUF_LEN; i++)
 8000a2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a30:	3301      	adds	r3, #1
 8000a32:	637b      	str	r3, [r7, #52]	@ 0x34
 8000a34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a36:	2b09      	cmp	r3, #9
 8000a38:	ddf0      	ble.n	8000a1c <_Z11StartTask02Pv+0x88>
	}
	adc_var_avg /= ADC_BUF_LEN;
 8000a3a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000a3e:	4a34      	ldr	r2, [pc, #208]	@ (8000b10 <_Z11StartTask02Pv+0x17c>)
 8000a40:	fba2 2303 	umull	r2, r3, r2, r3
 8000a44:	08db      	lsrs	r3, r3, #3
 8000a46:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46


	adc_data[0] = adc_var_avg & 0xFF;
 8000a4a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	723b      	strb	r3, [r7, #8]
	adc_data[1] = (adc_var_avg >> 8) & 0x0F;
 8000a52:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000a56:	0a1b      	lsrs	r3, r3, #8
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	f003 030f 	and.w	r3, r3, #15
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	727b      	strb	r3, [r7, #9]

	if (cc_enable)
 8000a64:	4b2b      	ldr	r3, [pc, #172]	@ (8000b14 <_Z11StartTask02Pv+0x180>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d00b      	beq.n	8000a84 <_Z11StartTask02Pv+0xf0>
	{
		if (update_cc)
 8000a6c:	4b2a      	ldr	r3, [pc, #168]	@ (8000b18 <_Z11StartTask02Pv+0x184>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d00e      	beq.n	8000a92 <_Z11StartTask02Pv+0xfe>
		{
			TxData[5] = adc_data[0];
 8000a74:	7a3b      	ldrb	r3, [r7, #8]
 8000a76:	757b      	strb	r3, [r7, #21]
			TxData[6] = adc_data[1];
 8000a78:	7a7b      	ldrb	r3, [r7, #9]
 8000a7a:	75bb      	strb	r3, [r7, #22]
			update_cc = 0;
 8000a7c:	4b26      	ldr	r3, [pc, #152]	@ (8000b18 <_Z11StartTask02Pv+0x184>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	701a      	strb	r2, [r3, #0]
 8000a82:	e006      	b.n	8000a92 <_Z11StartTask02Pv+0xfe>
		}
	}
	else
	{
		TxData[5] = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	757b      	strb	r3, [r7, #21]
		TxData[6] = 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	75bb      	strb	r3, [r7, #22]
		update_cc = 1;
 8000a8c:	4b22      	ldr	r3, [pc, #136]	@ (8000b18 <_Z11StartTask02Pv+0x184>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	701a      	strb	r2, [r3, #0]
	}


	TxData[0] = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	743b      	strb	r3, [r7, #16]
	TxData[1] = adc_data[0];
 8000a96:	7a3b      	ldrb	r3, [r7, #8]
 8000a98:	747b      	strb	r3, [r7, #17]
	TxData[2] = adc_data[1];
 8000a9a:	7a7b      	ldrb	r3, [r7, #9]
 8000a9c:	74bb      	strb	r3, [r7, #18]
	//Update_CAN_Message1(TxData, &U5.portValues, &U16.portValues);
    // Wait until the ADC DMA completes
	  // Send CAN messages
	  while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
 8000a9e:	bf00      	nop
 8000aa0:	4817      	ldr	r0, [pc, #92]	@ (8000b00 <_Z11StartTask02Pv+0x16c>)
 8000aa2:	f004 fa9f 	bl	8004fe4 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	bf0c      	ite	eq
 8000aac:	2301      	moveq	r3, #1
 8000aae:	2300      	movne	r3, #0
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d1f4      	bne.n	8000aa0 <_Z11StartTask02Pv+0x10c>
	  HAL_StatusTypeDef status;
	  status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000ab6:	f107 030c 	add.w	r3, r7, #12
 8000aba:	f107 0210 	add.w	r2, r7, #16
 8000abe:	f107 0118 	add.w	r1, r7, #24
 8000ac2:	480f      	ldr	r0, [pc, #60]	@ (8000b00 <_Z11StartTask02Pv+0x16c>)
 8000ac4:	f004 f9be 	bl	8004e44 <HAL_CAN_AddTxMessage>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	  messages_sent++;
 8000ace:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8000ad2:	1c54      	adds	r4, r2, #1
 8000ad4:	f143 0500 	adc.w	r5, r3, #0
 8000ad8:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
	  if (status == HAL_ERROR)
 8000adc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d102      	bne.n	8000aea <_Z11StartTask02Pv+0x156>
	  {
		  Error_Handler();
 8000ae4:	f000 ffce 	bl	8001a84 <Error_Handler>
 8000ae8:	e006      	b.n	8000af8 <_Z11StartTask02Pv+0x164>
	  }
	  else if (status == HAL_BUSY)
 8000aea:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000aee:	2b02      	cmp	r3, #2
 8000af0:	d102      	bne.n	8000af8 <_Z11StartTask02Pv+0x164>
	  {
		  HAL_CAN_BUSY++;
 8000af2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000af4:	3301      	adds	r3, #1
 8000af6:	643b      	str	r3, [r7, #64]	@ 0x40
	  }
    osDelay(20);
 8000af8:	2014      	movs	r0, #20
 8000afa:	f009 f90b 	bl	8009d14 <osDelay>
  }
 8000afe:	e771      	b.n	80009e4 <_Z11StartTask02Pv+0x50>
 8000b00:	200001f0 	.word	0x200001f0
 8000b04:	20000094 	.word	0x20000094
 8000b08:	20000140 	.word	0x20000140
 8000b0c:	200000a8 	.word	0x200000a8
 8000b10:	cccccccd 	.word	0xcccccccd
 8000b14:	200000a9 	.word	0x200000a9
 8000b18:	2000013c 	.word	0x2000013c

08000b1c <_Z11StartTask03Pv>:
  /* USER CODE END StartTask02 */
}

void StartTask03(void *argument)
{
 8000b1c:	b5b0      	push	{r4, r5, r7, lr}
 8000b1e:	b090      	sub	sp, #64	@ 0x40
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */

	int debounce_count = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int HAL_CAN_BUSY = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint64_t messages_sent = 0;
 8000b2c:	f04f 0200 	mov.w	r2, #0
 8000b30:	f04f 0300 	mov.w	r3, #0
 8000b34:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

	CAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData[8] = { 0 };
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	613b      	str	r3, [r7, #16]
	uint32_t TxMailbox = { 0 };
 8000b40:	2300      	movs	r3, #0
 8000b42:	60bb      	str	r3, [r7, #8]

	TxHeader.IDE = CAN_ID_STD; // Standard ID (not extended)
 8000b44:	2300      	movs	r3, #0
 8000b46:	61fb      	str	r3, [r7, #28]
	TxHeader.StdId = 0x7FF; // 11 bit Identifier !!Change!!
 8000b48:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000b4c:	617b      	str	r3, [r7, #20]
	TxHeader.RTR = CAN_RTR_DATA; // Std RTR Data frame
 8000b4e:	2300      	movs	r3, #0
 8000b50:	623b      	str	r3, [r7, #32]
	TxHeader.DLC = 8; // 8 bytes being transmitted
 8000b52:	2308      	movs	r3, #8
 8000b54:	627b      	str	r3, [r7, #36]	@ 0x24
	TxData[0] = 1;
 8000b56:	2301      	movs	r3, #1
 8000b58:	733b      	strb	r3, [r7, #12]

	Update_CAN_Message1(TxData, &U5.portValues, &U16.portValues);
 8000b5a:	f107 030c 	add.w	r3, r7, #12
 8000b5e:	4a2f      	ldr	r2, [pc, #188]	@ (8000c1c <_Z11StartTask03Pv+0x100>)
 8000b60:	492f      	ldr	r1, [pc, #188]	@ (8000c20 <_Z11StartTask03Pv+0x104>)
 8000b62:	4618      	mov	r0, r3
 8000b64:	f000 fa1a 	bl	8000f9c <_Z19Update_CAN_Message1PhS_S_>

	/* Infinite loop */
	for(;;)
	{
	  // Read TCAL Input and update flags
	  if (GPIO_Interrupt_Triggered)
 8000b68:	4b2e      	ldr	r3, [pc, #184]	@ (8000c24 <_Z11StartTask03Pv+0x108>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d022      	beq.n	8000bb6 <_Z11StartTask03Pv+0x9a>
	  {
		  if (debounce_count++ <= 2) {continue;}
 8000b70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b72:	1c5a      	adds	r2, r3, #1
 8000b74:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000b76:	2b02      	cmp	r3, #2
 8000b78:	bfd4      	ite	le
 8000b7a:	2301      	movle	r3, #1
 8000b7c:	2300      	movgt	r3, #0
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d149      	bne.n	8000c18 <_Z11StartTask03Pv+0xfc>
		  if (TCAL9538RSVR_HandleInterrupt(&U5) != HAL_OK){ Error_Handler(); }
 8000b84:	4828      	ldr	r0, [pc, #160]	@ (8000c28 <_Z11StartTask03Pv+0x10c>)
 8000b86:	f002 fa63 	bl	8003050 <TCAL9538RSVR_HandleInterrupt>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	bf14      	ite	ne
 8000b90:	2301      	movne	r3, #1
 8000b92:	2300      	moveq	r3, #0
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <_Z11StartTask03Pv+0x82>
 8000b9a:	f000 ff73 	bl	8001a84 <Error_Handler>
		  //if (TCAL9538RSVR_HandleInterrupt(&U16) != HAL_OK){ Error_Handler(); }


		  Update_CAN_Message1(TxData, &U5.portValues, &U16.portValues);
 8000b9e:	f107 030c 	add.w	r3, r7, #12
 8000ba2:	4a1e      	ldr	r2, [pc, #120]	@ (8000c1c <_Z11StartTask03Pv+0x100>)
 8000ba4:	491e      	ldr	r1, [pc, #120]	@ (8000c20 <_Z11StartTask03Pv+0x104>)
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f000 f9f8 	bl	8000f9c <_Z19Update_CAN_Message1PhS_S_>
		  GPIO_Interrupt_Triggered = 0;
 8000bac:	4b1d      	ldr	r3, [pc, #116]	@ (8000c24 <_Z11StartTask03Pv+0x108>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	701a      	strb	r2, [r3, #0]
		  debounce_count = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  }

	  // Send CAN messages
	  while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
 8000bb6:	bf00      	nop
 8000bb8:	481c      	ldr	r0, [pc, #112]	@ (8000c2c <_Z11StartTask03Pv+0x110>)
 8000bba:	f004 fa13 	bl	8004fe4 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	bf0c      	ite	eq
 8000bc4:	2301      	moveq	r3, #1
 8000bc6:	2300      	movne	r3, #0
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d1f4      	bne.n	8000bb8 <_Z11StartTask03Pv+0x9c>
	  HAL_StatusTypeDef status;
	  status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000bce:	f107 0308 	add.w	r3, r7, #8
 8000bd2:	f107 020c 	add.w	r2, r7, #12
 8000bd6:	f107 0114 	add.w	r1, r7, #20
 8000bda:	4814      	ldr	r0, [pc, #80]	@ (8000c2c <_Z11StartTask03Pv+0x110>)
 8000bdc:	f004 f932 	bl	8004e44 <HAL_CAN_AddTxMessage>
 8000be0:	4603      	mov	r3, r0
 8000be2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	  messages_sent++;
 8000be6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000bea:	1c54      	adds	r4, r2, #1
 8000bec:	f143 0500 	adc.w	r5, r3, #0
 8000bf0:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30
	  if (status == HAL_ERROR)
 8000bf4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d102      	bne.n	8000c02 <_Z11StartTask03Pv+0xe6>
	  {
		  Error_Handler();
 8000bfc:	f000 ff42 	bl	8001a84 <Error_Handler>
 8000c00:	e006      	b.n	8000c10 <_Z11StartTask03Pv+0xf4>
	  }
	  else if (status == HAL_BUSY)
 8000c02:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	d102      	bne.n	8000c10 <_Z11StartTask03Pv+0xf4>
	  {
		  HAL_CAN_BUSY++;
 8000c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	63bb      	str	r3, [r7, #56]	@ 0x38
	  }
	  osDelay(50);
 8000c10:	2032      	movs	r0, #50	@ 0x32
 8000c12:	f009 f87f 	bl	8009d14 <osDelay>
 8000c16:	e7a7      	b.n	8000b68 <_Z11StartTask03Pv+0x4c>
		  if (debounce_count++ <= 2) {continue;}
 8000c18:	bf00      	nop
  }
 8000c1a:	e7a5      	b.n	8000b68 <_Z11StartTask03Pv+0x4c>
 8000c1c:	20000089 	.word	0x20000089
 8000c20:	20000081 	.word	0x20000081
 8000c24:	200000aa 	.word	0x200000aa
 8000c28:	2000007c 	.word	0x2000007c
 8000c2c:	200001f0 	.word	0x200001f0

08000c30 <_Z11StartTask04Pv>:
  /* USER CODE END StartTask03 */
}


void StartTask04(void *argument)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */

  dashboardState.lastBlinkTime = HAL_GetTick(); // initialize last blink time
 8000c38:	f002 fae0 	bl	80031fc <HAL_GetTick>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	4a1b      	ldr	r2, [pc, #108]	@ (8000cac <_Z11StartTask04Pv+0x7c>)
 8000c40:	60d3      	str	r3, [r2, #12]

  /* Infinite loop */
  for(;;)
  {

    uint32_t currentTick = HAL_GetTick();
 8000c42:	f002 fadb 	bl	80031fc <HAL_GetTick>
 8000c46:	60f8      	str	r0, [r7, #12]

    if (currentTick - dashboardState.lastBlinkTime > BLINK_INTERVAL_MS)
 8000c48:	4b18      	ldr	r3, [pc, #96]	@ (8000cac <_Z11StartTask04Pv+0x7c>)
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	68fa      	ldr	r2, [r7, #12]
 8000c4e:	1ad3      	subs	r3, r2, r3
 8000c50:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000c54:	d909      	bls.n	8000c6a <_Z11StartTask04Pv+0x3a>
    {
      	dashboardState.lastBlinkTime = currentTick;
 8000c56:	4a15      	ldr	r2, [pc, #84]	@ (8000cac <_Z11StartTask04Pv+0x7c>)
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	60d3      	str	r3, [r2, #12]
		// enter critical section because we do read-modify-write operations in that function
		DASHBOARD_CRITICAL(
 8000c5c:	f00b fb9c 	bl	800c398 <vPortEnterCritical>
 8000c60:	4812      	ldr	r0, [pc, #72]	@ (8000cac <_Z11StartTask04Pv+0x7c>)
 8000c62:	f7ff fd6b 	bl	800073c <_ZN14DashboardState11blinkLightsEv>
 8000c66:	f00b fbc9 	bl	800c3fc <vPortExitCritical>
			dashboardState.blinkLights()
	  	);
	}

	if (dashboardState.updateRequested) {
 8000c6a:	4b10      	ldr	r3, [pc, #64]	@ (8000cac <_Z11StartTask04Pv+0x7c>)
 8000c6c:	7edb      	ldrb	r3, [r3, #27]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d009      	beq.n	8000c86 <_Z11StartTask04Pv+0x56>
		// enter critical section because we do read-modify-write operations in that function
		DASHBOARD_CRITICAL(
 8000c72:	f00b fb91 	bl	800c398 <vPortEnterCritical>
 8000c76:	480d      	ldr	r0, [pc, #52]	@ (8000cac <_Z11StartTask04Pv+0x7c>)
 8000c78:	f7ff fc6f 	bl	800055a <_ZN14DashboardState14updateFromUARTEv>
 8000c7c:	f00b fbbe 	bl	800c3fc <vPortExitCritical>
			dashboardState.updateFromUART()
		);
		dashboardState.updateRequested = 0; // reset update requested flag
 8000c80:	4b0a      	ldr	r3, [pc, #40]	@ (8000cac <_Z11StartTask04Pv+0x7c>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	76da      	strb	r2, [r3, #27]
	}

	if (dashboardState.writeToPort(U7) != HAL_OK) { Error_Handler(); } // write to output port
 8000c86:	490a      	ldr	r1, [pc, #40]	@ (8000cb0 <_Z11StartTask04Pv+0x80>)
 8000c88:	4808      	ldr	r0, [pc, #32]	@ (8000cac <_Z11StartTask04Pv+0x7c>)
 8000c8a:	f7ff fd41 	bl	8000710 <_ZN14DashboardState11writeToPortER12TCAL9538RSVR>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	bf14      	ite	ne
 8000c94:	2301      	movne	r3, #1
 8000c96:	2300      	moveq	r3, #0
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <_Z11StartTask04Pv+0x72>
 8000c9e:	f000 fef1 	bl	8001a84 <Error_Handler>

    osDelay(50);
 8000ca2:	2032      	movs	r0, #50	@ 0x32
 8000ca4:	f009 f836 	bl	8009d14 <osDelay>
  }
 8000ca8:	e7cb      	b.n	8000c42 <_Z11StartTask04Pv+0x12>
 8000caa:	bf00      	nop
 8000cac:	200000ac 	.word	0x200000ac
 8000cb0:	2000008c 	.word	0x2000008c

08000cb4 <_Z11StartTask05Pv>:
  /* USER CODE END StartTask04 */
}


void StartTask05(void *argument)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b088      	sub	sp, #32
 8000cb8:	af02      	add	r7, sp, #8
 8000cba:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask05 */
	uint16_t color;
	bool lightStateChanged = false;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	757b      	strb	r3, [r7, #21]
	bool bmsStatusChanged = false;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	753b      	strb	r3, [r7, #20]
	bool mcStatusChanged = false;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	74fb      	strb	r3, [r7, #19]
	bool arrayStatusChanged = false;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	74bb      	strb	r3, [r7, #18]
	bool hornStateChanged = false;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	747b      	strb	r3, [r7, #17]
	bool fanStateChanged = false;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	743b      	strb	r3, [r7, #16]
	bool headlightStateChanged = false;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	DASHBOARD_CRITICAL( // critical region for all of these read-read operations that are not atomic
 8000cd8:	f00b fb5e 	bl	800c398 <vPortEnterCritical>
 8000cdc:	4b98      	ldr	r3, [pc, #608]	@ (8000f40 <_Z11StartTask05Pv+0x28c>)
 8000cde:	785a      	ldrb	r2, [r3, #1]
 8000ce0:	4b97      	ldr	r3, [pc, #604]	@ (8000f40 <_Z11StartTask05Pv+0x28c>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	bf14      	ite	ne
 8000ce8:	2301      	movne	r3, #1
 8000cea:	2300      	moveq	r3, #0
 8000cec:	757b      	strb	r3, [r7, #21]
 8000cee:	4b94      	ldr	r3, [pc, #592]	@ (8000f40 <_Z11StartTask05Pv+0x28c>)
 8000cf0:	7d9a      	ldrb	r2, [r3, #22]
 8000cf2:	4b93      	ldr	r3, [pc, #588]	@ (8000f40 <_Z11StartTask05Pv+0x28c>)
 8000cf4:	7cdb      	ldrb	r3, [r3, #19]
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	bf14      	ite	ne
 8000cfa:	2301      	movne	r3, #1
 8000cfc:	2300      	moveq	r3, #0
 8000cfe:	753b      	strb	r3, [r7, #20]
 8000d00:	4b8f      	ldr	r3, [pc, #572]	@ (8000f40 <_Z11StartTask05Pv+0x28c>)
 8000d02:	7dda      	ldrb	r2, [r3, #23]
 8000d04:	4b8e      	ldr	r3, [pc, #568]	@ (8000f40 <_Z11StartTask05Pv+0x28c>)
 8000d06:	7d1b      	ldrb	r3, [r3, #20]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	bf14      	ite	ne
 8000d0c:	2301      	movne	r3, #1
 8000d0e:	2300      	moveq	r3, #0
 8000d10:	74fb      	strb	r3, [r7, #19]
 8000d12:	4b8b      	ldr	r3, [pc, #556]	@ (8000f40 <_Z11StartTask05Pv+0x28c>)
 8000d14:	7e1a      	ldrb	r2, [r3, #24]
 8000d16:	4b8a      	ldr	r3, [pc, #552]	@ (8000f40 <_Z11StartTask05Pv+0x28c>)
 8000d18:	7d5b      	ldrb	r3, [r3, #21]
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	bf14      	ite	ne
 8000d1e:	2301      	movne	r3, #1
 8000d20:	2300      	moveq	r3, #0
 8000d22:	74bb      	strb	r3, [r7, #18]
 8000d24:	4b86      	ldr	r3, [pc, #536]	@ (8000f40 <_Z11StartTask05Pv+0x28c>)
 8000d26:	7c1a      	ldrb	r2, [r3, #16]
 8000d28:	4b85      	ldr	r3, [pc, #532]	@ (8000f40 <_Z11StartTask05Pv+0x28c>)
 8000d2a:	791b      	ldrb	r3, [r3, #4]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	bf14      	ite	ne
 8000d30:	2301      	movne	r3, #1
 8000d32:	2300      	moveq	r3, #0
 8000d34:	747b      	strb	r3, [r7, #17]
 8000d36:	4b82      	ldr	r3, [pc, #520]	@ (8000f40 <_Z11StartTask05Pv+0x28c>)
 8000d38:	7c5a      	ldrb	r2, [r3, #17]
 8000d3a:	4b81      	ldr	r3, [pc, #516]	@ (8000f40 <_Z11StartTask05Pv+0x28c>)
 8000d3c:	795b      	ldrb	r3, [r3, #5]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	bf14      	ite	ne
 8000d42:	2301      	movne	r3, #1
 8000d44:	2300      	moveq	r3, #0
 8000d46:	743b      	strb	r3, [r7, #16]
 8000d48:	4b7d      	ldr	r3, [pc, #500]	@ (8000f40 <_Z11StartTask05Pv+0x28c>)
 8000d4a:	7c9a      	ldrb	r2, [r3, #18]
 8000d4c:	4b7c      	ldr	r3, [pc, #496]	@ (8000f40 <_Z11StartTask05Pv+0x28c>)
 8000d4e:	799b      	ldrb	r3, [r3, #6]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	bf14      	ite	ne
 8000d54:	2301      	movne	r3, #1
 8000d56:	2300      	moveq	r3, #0
 8000d58:	73fb      	strb	r3, [r7, #15]
 8000d5a:	4b79      	ldr	r3, [pc, #484]	@ (8000f40 <_Z11StartTask05Pv+0x28c>)
 8000d5c:	781a      	ldrb	r2, [r3, #0]
 8000d5e:	4b78      	ldr	r3, [pc, #480]	@ (8000f40 <_Z11StartTask05Pv+0x28c>)
 8000d60:	705a      	strb	r2, [r3, #1]
 8000d62:	4b77      	ldr	r3, [pc, #476]	@ (8000f40 <_Z11StartTask05Pv+0x28c>)
 8000d64:	7cda      	ldrb	r2, [r3, #19]
 8000d66:	4b76      	ldr	r3, [pc, #472]	@ (8000f40 <_Z11StartTask05Pv+0x28c>)
 8000d68:	759a      	strb	r2, [r3, #22]
 8000d6a:	4b75      	ldr	r3, [pc, #468]	@ (8000f40 <_Z11StartTask05Pv+0x28c>)
 8000d6c:	7d1a      	ldrb	r2, [r3, #20]
 8000d6e:	4b74      	ldr	r3, [pc, #464]	@ (8000f40 <_Z11StartTask05Pv+0x28c>)
 8000d70:	75da      	strb	r2, [r3, #23]
 8000d72:	4b73      	ldr	r3, [pc, #460]	@ (8000f40 <_Z11StartTask05Pv+0x28c>)
 8000d74:	7d5a      	ldrb	r2, [r3, #21]
 8000d76:	4b72      	ldr	r3, [pc, #456]	@ (8000f40 <_Z11StartTask05Pv+0x28c>)
 8000d78:	761a      	strb	r2, [r3, #24]
 8000d7a:	4b71      	ldr	r3, [pc, #452]	@ (8000f40 <_Z11StartTask05Pv+0x28c>)
 8000d7c:	791a      	ldrb	r2, [r3, #4]
 8000d7e:	4b70      	ldr	r3, [pc, #448]	@ (8000f40 <_Z11StartTask05Pv+0x28c>)
 8000d80:	741a      	strb	r2, [r3, #16]
 8000d82:	4b6f      	ldr	r3, [pc, #444]	@ (8000f40 <_Z11StartTask05Pv+0x28c>)
 8000d84:	795a      	ldrb	r2, [r3, #5]
 8000d86:	4b6e      	ldr	r3, [pc, #440]	@ (8000f40 <_Z11StartTask05Pv+0x28c>)
 8000d88:	745a      	strb	r2, [r3, #17]
 8000d8a:	4b6d      	ldr	r3, [pc, #436]	@ (8000f40 <_Z11StartTask05Pv+0x28c>)
 8000d8c:	799a      	ldrb	r2, [r3, #6]
 8000d8e:	4b6c      	ldr	r3, [pc, #432]	@ (8000f40 <_Z11StartTask05Pv+0x28c>)
 8000d90:	749a      	strb	r2, [r3, #18]
 8000d92:	f00b fb33 	bl	800c3fc <vPortExitCritical>
		dashboardState.oldHornState = dashboardState.hornState;
		dashboardState.oldFanState = dashboardState.fanState;
		dashboardState.oldHeadlightState = dashboardState.headlightState;
	); // end critical section

	if(lightStateChanged){
 8000d96:	7d7b      	ldrb	r3, [r7, #21]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d06e      	beq.n	8000e7a <_Z11StartTask05Pv+0x1c6>
		HAL_Delay(1);
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	f002 fa39 	bl	8003214 <HAL_Delay>
		if(dashboardState.lightState == LIGHTS_LEFT){
 8000da2:	4b67      	ldr	r3, [pc, #412]	@ (8000f40 <_Z11StartTask05Pv+0x28c>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d116      	bne.n	8000dd8 <_Z11StartTask05Pv+0x124>
			color = RGB565_GREEN;
 8000daa:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000dae:	82fb      	strh	r3, [r7, #22]
			screen.FillCircle(20, 20, 10, color);
 8000db0:	8afb      	ldrh	r3, [r7, #22]
 8000db2:	9300      	str	r3, [sp, #0]
 8000db4:	230a      	movs	r3, #10
 8000db6:	2214      	movs	r2, #20
 8000db8:	2114      	movs	r1, #20
 8000dba:	4862      	ldr	r0, [pc, #392]	@ (8000f44 <_Z11StartTask05Pv+0x290>)
 8000dbc:	f002 f81c 	bl	8002df8 <_ZN7ILI934110FillCircleEtttt>

			color = RGB565_WHITE;
 8000dc0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000dc4:	82fb      	strh	r3, [r7, #22]
			screen.FillCircle(300, 20, 10, color);
 8000dc6:	8afb      	ldrh	r3, [r7, #22]
 8000dc8:	9300      	str	r3, [sp, #0]
 8000dca:	230a      	movs	r3, #10
 8000dcc:	2214      	movs	r2, #20
 8000dce:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000dd2:	485c      	ldr	r0, [pc, #368]	@ (8000f44 <_Z11StartTask05Pv+0x290>)
 8000dd4:	f002 f810 	bl	8002df8 <_ZN7ILI934110FillCircleEtttt>
		}
		if(dashboardState.lightState == LIGHTS_RIGHT){
 8000dd8:	4b59      	ldr	r3, [pc, #356]	@ (8000f40 <_Z11StartTask05Pv+0x28c>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d116      	bne.n	8000e0e <_Z11StartTask05Pv+0x15a>
			color = RGB565_WHITE;
 8000de0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000de4:	82fb      	strh	r3, [r7, #22]
			screen.FillCircle(20, 20, 10, color);
 8000de6:	8afb      	ldrh	r3, [r7, #22]
 8000de8:	9300      	str	r3, [sp, #0]
 8000dea:	230a      	movs	r3, #10
 8000dec:	2214      	movs	r2, #20
 8000dee:	2114      	movs	r1, #20
 8000df0:	4854      	ldr	r0, [pc, #336]	@ (8000f44 <_Z11StartTask05Pv+0x290>)
 8000df2:	f002 f801 	bl	8002df8 <_ZN7ILI934110FillCircleEtttt>

			color = RGB565_GREEN;
 8000df6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000dfa:	82fb      	strh	r3, [r7, #22]
			screen.FillCircle(300, 20, 10, color);
 8000dfc:	8afb      	ldrh	r3, [r7, #22]
 8000dfe:	9300      	str	r3, [sp, #0]
 8000e00:	230a      	movs	r3, #10
 8000e02:	2214      	movs	r2, #20
 8000e04:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000e08:	484e      	ldr	r0, [pc, #312]	@ (8000f44 <_Z11StartTask05Pv+0x290>)
 8000e0a:	f001 fff5 	bl	8002df8 <_ZN7ILI934110FillCircleEtttt>
		}
		if(dashboardState.lightState == LIGHTS_HAZARD){
 8000e0e:	4b4c      	ldr	r3, [pc, #304]	@ (8000f40 <_Z11StartTask05Pv+0x28c>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b03      	cmp	r3, #3
 8000e14:	d116      	bne.n	8000e44 <_Z11StartTask05Pv+0x190>
			color = RGB565_GREEN;
 8000e16:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000e1a:	82fb      	strh	r3, [r7, #22]
			screen.FillCircle(20, 20, 10, color);
 8000e1c:	8afb      	ldrh	r3, [r7, #22]
 8000e1e:	9300      	str	r3, [sp, #0]
 8000e20:	230a      	movs	r3, #10
 8000e22:	2214      	movs	r2, #20
 8000e24:	2114      	movs	r1, #20
 8000e26:	4847      	ldr	r0, [pc, #284]	@ (8000f44 <_Z11StartTask05Pv+0x290>)
 8000e28:	f001 ffe6 	bl	8002df8 <_ZN7ILI934110FillCircleEtttt>

			color = RGB565_GREEN;
 8000e2c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000e30:	82fb      	strh	r3, [r7, #22]
			screen.FillCircle(300, 20, 10, color);
 8000e32:	8afb      	ldrh	r3, [r7, #22]
 8000e34:	9300      	str	r3, [sp, #0]
 8000e36:	230a      	movs	r3, #10
 8000e38:	2214      	movs	r2, #20
 8000e3a:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000e3e:	4841      	ldr	r0, [pc, #260]	@ (8000f44 <_Z11StartTask05Pv+0x290>)
 8000e40:	f001 ffda 	bl	8002df8 <_ZN7ILI934110FillCircleEtttt>
		}
		if(dashboardState.lightState == LIGHTS_NONE){
 8000e44:	4b3e      	ldr	r3, [pc, #248]	@ (8000f40 <_Z11StartTask05Pv+0x28c>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d116      	bne.n	8000e7a <_Z11StartTask05Pv+0x1c6>

			color = RGB565_WHITE;
 8000e4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e50:	82fb      	strh	r3, [r7, #22]
			screen.FillCircle(20, 20, 10, color);
 8000e52:	8afb      	ldrh	r3, [r7, #22]
 8000e54:	9300      	str	r3, [sp, #0]
 8000e56:	230a      	movs	r3, #10
 8000e58:	2214      	movs	r2, #20
 8000e5a:	2114      	movs	r1, #20
 8000e5c:	4839      	ldr	r0, [pc, #228]	@ (8000f44 <_Z11StartTask05Pv+0x290>)
 8000e5e:	f001 ffcb 	bl	8002df8 <_ZN7ILI934110FillCircleEtttt>

			color = RGB565_WHITE;
 8000e62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e66:	82fb      	strh	r3, [r7, #22]
			screen.FillCircle(300, 20, 10, color);
 8000e68:	8afb      	ldrh	r3, [r7, #22]
 8000e6a:	9300      	str	r3, [sp, #0]
 8000e6c:	230a      	movs	r3, #10
 8000e6e:	2214      	movs	r2, #20
 8000e70:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000e74:	4833      	ldr	r0, [pc, #204]	@ (8000f44 <_Z11StartTask05Pv+0x290>)
 8000e76:	f001 ffbf 	bl	8002df8 <_ZN7ILI934110FillCircleEtttt>
		}
	}
	if(bmsStatusChanged){
 8000e7a:	7d3b      	ldrb	r3, [r7, #20]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d012      	beq.n	8000ea6 <_Z11StartTask05Pv+0x1f2>
		if (dashboardState.bmsStatus) color = RGB565_GREEN;
 8000e80:	4b2f      	ldr	r3, [pc, #188]	@ (8000f40 <_Z11StartTask05Pv+0x28c>)
 8000e82:	7cdb      	ldrb	r3, [r3, #19]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d003      	beq.n	8000e90 <_Z11StartTask05Pv+0x1dc>
 8000e88:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000e8c:	82fb      	strh	r3, [r7, #22]
 8000e8e:	e002      	b.n	8000e96 <_Z11StartTask05Pv+0x1e2>
		else color = RGB565_RED;
 8000e90:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000e94:	82fb      	strh	r3, [r7, #22]
		screen.FillCircle(70, 210, 10, color);
 8000e96:	8afb      	ldrh	r3, [r7, #22]
 8000e98:	9300      	str	r3, [sp, #0]
 8000e9a:	230a      	movs	r3, #10
 8000e9c:	22d2      	movs	r2, #210	@ 0xd2
 8000e9e:	2146      	movs	r1, #70	@ 0x46
 8000ea0:	4828      	ldr	r0, [pc, #160]	@ (8000f44 <_Z11StartTask05Pv+0x290>)
 8000ea2:	f001 ffa9 	bl	8002df8 <_ZN7ILI934110FillCircleEtttt>
	}
	if(mcStatusChanged){
 8000ea6:	7cfb      	ldrb	r3, [r7, #19]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d012      	beq.n	8000ed2 <_Z11StartTask05Pv+0x21e>
		if (dashboardState.mcStatus) color = RGB565_GREEN;
 8000eac:	4b24      	ldr	r3, [pc, #144]	@ (8000f40 <_Z11StartTask05Pv+0x28c>)
 8000eae:	7d1b      	ldrb	r3, [r3, #20]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d003      	beq.n	8000ebc <_Z11StartTask05Pv+0x208>
 8000eb4:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000eb8:	82fb      	strh	r3, [r7, #22]
 8000eba:	e002      	b.n	8000ec2 <_Z11StartTask05Pv+0x20e>
		else color = RGB565_RED;
 8000ebc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000ec0:	82fb      	strh	r3, [r7, #22]
		screen.FillCircle(150, 210, 10, color);
 8000ec2:	8afb      	ldrh	r3, [r7, #22]
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	230a      	movs	r3, #10
 8000ec8:	22d2      	movs	r2, #210	@ 0xd2
 8000eca:	2196      	movs	r1, #150	@ 0x96
 8000ecc:	481d      	ldr	r0, [pc, #116]	@ (8000f44 <_Z11StartTask05Pv+0x290>)
 8000ece:	f001 ff93 	bl	8002df8 <_ZN7ILI934110FillCircleEtttt>
	}
	if(arrayStatusChanged){
 8000ed2:	7cbb      	ldrb	r3, [r7, #18]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d012      	beq.n	8000efe <_Z11StartTask05Pv+0x24a>
		if (dashboardState.arrayStatus) color = RGB565_GREEN;
 8000ed8:	4b19      	ldr	r3, [pc, #100]	@ (8000f40 <_Z11StartTask05Pv+0x28c>)
 8000eda:	7d5b      	ldrb	r3, [r3, #21]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d003      	beq.n	8000ee8 <_Z11StartTask05Pv+0x234>
 8000ee0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000ee4:	82fb      	strh	r3, [r7, #22]
 8000ee6:	e002      	b.n	8000eee <_Z11StartTask05Pv+0x23a>
		else color = RGB565_RED;
 8000ee8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000eec:	82fb      	strh	r3, [r7, #22]
		screen.FillCircle(235, 210, 10, color);
 8000eee:	8afb      	ldrh	r3, [r7, #22]
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	230a      	movs	r3, #10
 8000ef4:	22d2      	movs	r2, #210	@ 0xd2
 8000ef6:	21eb      	movs	r1, #235	@ 0xeb
 8000ef8:	4812      	ldr	r0, [pc, #72]	@ (8000f44 <_Z11StartTask05Pv+0x290>)
 8000efa:	f001 ff7d 	bl	8002df8 <_ZN7ILI934110FillCircleEtttt>
	}

	// temp debug stuff
	if (hornStateChanged) {
 8000efe:	7c7b      	ldrb	r3, [r7, #17]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d012      	beq.n	8000f2a <_Z11StartTask05Pv+0x276>
		if (dashboardState.hornState) color = RGB565_GREEN;
 8000f04:	4b0e      	ldr	r3, [pc, #56]	@ (8000f40 <_Z11StartTask05Pv+0x28c>)
 8000f06:	791b      	ldrb	r3, [r3, #4]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d003      	beq.n	8000f14 <_Z11StartTask05Pv+0x260>
 8000f0c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000f10:	82fb      	strh	r3, [r7, #22]
 8000f12:	e002      	b.n	8000f1a <_Z11StartTask05Pv+0x266>
		else color = RGB565_RED;
 8000f14:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000f18:	82fb      	strh	r3, [r7, #22]
		screen.FillCircle(150, 120, 10, color);
 8000f1a:	8afb      	ldrh	r3, [r7, #22]
 8000f1c:	9300      	str	r3, [sp, #0]
 8000f1e:	230a      	movs	r3, #10
 8000f20:	2278      	movs	r2, #120	@ 0x78
 8000f22:	2196      	movs	r1, #150	@ 0x96
 8000f24:	4807      	ldr	r0, [pc, #28]	@ (8000f44 <_Z11StartTask05Pv+0x290>)
 8000f26:	f001 ff67 	bl	8002df8 <_ZN7ILI934110FillCircleEtttt>
	}
	if (fanStateChanged) {
 8000f2a:	7c3b      	ldrb	r3, [r7, #16]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d016      	beq.n	8000f5e <_Z11StartTask05Pv+0x2aa>
		if (dashboardState.fanState) color = RGB565_GREEN;
 8000f30:	4b03      	ldr	r3, [pc, #12]	@ (8000f40 <_Z11StartTask05Pv+0x28c>)
 8000f32:	795b      	ldrb	r3, [r3, #5]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d007      	beq.n	8000f48 <_Z11StartTask05Pv+0x294>
 8000f38:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000f3c:	82fb      	strh	r3, [r7, #22]
 8000f3e:	e006      	b.n	8000f4e <_Z11StartTask05Pv+0x29a>
 8000f40:	200000ac 	.word	0x200000ac
 8000f44:	200000cc 	.word	0x200000cc
		else color = RGB565_RED;
 8000f48:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000f4c:	82fb      	strh	r3, [r7, #22]
		screen.FillCircle(235, 120, 10, color);
 8000f4e:	8afb      	ldrh	r3, [r7, #22]
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	230a      	movs	r3, #10
 8000f54:	2278      	movs	r2, #120	@ 0x78
 8000f56:	21eb      	movs	r1, #235	@ 0xeb
 8000f58:	480e      	ldr	r0, [pc, #56]	@ (8000f94 <_Z11StartTask05Pv+0x2e0>)
 8000f5a:	f001 ff4d 	bl	8002df8 <_ZN7ILI934110FillCircleEtttt>
	}
	if (headlightStateChanged) {
 8000f5e:	7bfb      	ldrb	r3, [r7, #15]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d012      	beq.n	8000f8a <_Z11StartTask05Pv+0x2d6>
		if (dashboardState.headlightState) color = RGB565_GREEN;
 8000f64:	4b0c      	ldr	r3, [pc, #48]	@ (8000f98 <_Z11StartTask05Pv+0x2e4>)
 8000f66:	799b      	ldrb	r3, [r3, #6]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d003      	beq.n	8000f74 <_Z11StartTask05Pv+0x2c0>
 8000f6c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000f70:	82fb      	strh	r3, [r7, #22]
 8000f72:	e002      	b.n	8000f7a <_Z11StartTask05Pv+0x2c6>
		else color = RGB565_RED;
 8000f74:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000f78:	82fb      	strh	r3, [r7, #22]
		screen.FillCircle(70, 120, 10, color);
 8000f7a:	8afb      	ldrh	r3, [r7, #22]
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	230a      	movs	r3, #10
 8000f80:	2278      	movs	r2, #120	@ 0x78
 8000f82:	2146      	movs	r1, #70	@ 0x46
 8000f84:	4803      	ldr	r0, [pc, #12]	@ (8000f94 <_Z11StartTask05Pv+0x2e0>)
 8000f86:	f001 ff37 	bl	8002df8 <_ZN7ILI934110FillCircleEtttt>
	}

    osDelay(100);
 8000f8a:	2064      	movs	r0, #100	@ 0x64
 8000f8c:	f008 fec2 	bl	8009d14 <osDelay>
	DASHBOARD_CRITICAL( // critical region for all of these read-read operations that are not atomic
 8000f90:	e6a2      	b.n	8000cd8 <_Z11StartTask05Pv+0x24>
 8000f92:	bf00      	nop
 8000f94:	200000cc 	.word	0x200000cc
 8000f98:	200000ac 	.word	0x200000ac

08000f9c <_Z19Update_CAN_Message1PhS_S_>:
  /* USER CODE END StartTask05 */
}


void Update_CAN_Message1(uint8_t flags[8], uint8_t* Input1, uint8_t* Input2)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b087      	sub	sp, #28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]

	static uint8_t prev_input1 = 0;
	static uint8_t prev_input2 = 0;


	flags[3] = 0;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	3303      	adds	r3, #3
 8000fac:	2200      	movs	r2, #0
 8000fae:	701a      	strb	r2, [r3, #0]
	flags[4] = 0;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	3304      	adds	r3, #4
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	701a      	strb	r2, [r3, #0]


	// Detect rising edges for each flag
	uint8_t risingEdges_flag1 = (~prev_input1) & *Input1;
 8000fb8:	4b90      	ldr	r3, [pc, #576]	@ (80011fc <_Z19Update_CAN_Message1PhS_S_+0x260>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	b25b      	sxtb	r3, r3
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	b25a      	sxtb	r2, r3
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	b25b      	sxtb	r3, r3
 8000fc8:	4013      	ands	r3, r2
 8000fca:	b25b      	sxtb	r3, r3
 8000fcc:	75fb      	strb	r3, [r7, #23]
	uint8_t risingEdges_flag2 = (~prev_input2) & *Input2;
 8000fce:	4b8c      	ldr	r3, [pc, #560]	@ (8001200 <_Z19Update_CAN_Message1PhS_S_+0x264>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	b25b      	sxtb	r3, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	b25a      	sxtb	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	b25b      	sxtb	r3, r3
 8000fde:	4013      	ands	r3, r2
 8000fe0:	b25b      	sxtb	r3, r3
 8000fe2:	75bb      	strb	r3, [r7, #22]


	flags[1] ^= CHECK_BIT(risingEdges_flag2, 4) << 0; // Main
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	b25a      	sxtb	r2, r3
 8000fec:	7dbb      	ldrb	r3, [r7, #22]
 8000fee:	f003 0310 	and.w	r3, r3, #16
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	bf14      	ite	ne
 8000ff6:	2301      	movne	r3, #1
 8000ff8:	2300      	moveq	r3, #0
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	b25b      	sxtb	r3, r3
 8000ffe:	4053      	eors	r3, r2
 8001000:	b25a      	sxtb	r2, r3
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	3301      	adds	r3, #1
 8001006:	b2d2      	uxtb	r2, r2
 8001008:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag2, 5) << 1; // Break
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	3301      	adds	r3, #1
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	b25a      	sxtb	r2, r3
 8001012:	7dbb      	ldrb	r3, [r7, #22]
 8001014:	111b      	asrs	r3, r3, #4
 8001016:	b25b      	sxtb	r3, r3
 8001018:	f003 0302 	and.w	r3, r3, #2
 800101c:	b25b      	sxtb	r3, r3
 800101e:	4053      	eors	r3, r2
 8001020:	b25a      	sxtb	r2, r3
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	3301      	adds	r3, #1
 8001026:	b2d2      	uxtb	r2, r2
 8001028:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag2, 0) << 2; // Mode
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	3301      	adds	r3, #1
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	b25a      	sxtb	r2, r3
 8001032:	7dbb      	ldrb	r3, [r7, #22]
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	b25b      	sxtb	r3, r3
 8001038:	f003 0304 	and.w	r3, r3, #4
 800103c:	b25b      	sxtb	r3, r3
 800103e:	4053      	eors	r3, r2
 8001040:	b25a      	sxtb	r2, r3
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	3301      	adds	r3, #1
 8001046:	b2d2      	uxtb	r2, r2
 8001048:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag1, 5) << 3; // MC
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	3301      	adds	r3, #1
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	b25a      	sxtb	r2, r3
 8001052:	7dfb      	ldrb	r3, [r7, #23]
 8001054:	109b      	asrs	r3, r3, #2
 8001056:	b25b      	sxtb	r3, r3
 8001058:	f003 0308 	and.w	r3, r3, #8
 800105c:	b25b      	sxtb	r3, r3
 800105e:	4053      	eors	r3, r2
 8001060:	b25a      	sxtb	r2, r3
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	3301      	adds	r3, #1
 8001066:	b2d2      	uxtb	r2, r2
 8001068:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag1, 6) << 4; // Array
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	3301      	adds	r3, #1
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	b25a      	sxtb	r2, r3
 8001072:	7dfb      	ldrb	r3, [r7, #23]
 8001074:	109b      	asrs	r3, r3, #2
 8001076:	b25b      	sxtb	r3, r3
 8001078:	f003 0310 	and.w	r3, r3, #16
 800107c:	b25b      	sxtb	r3, r3
 800107e:	4053      	eors	r3, r2
 8001080:	b25a      	sxtb	r2, r3
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	3301      	adds	r3, #1
 8001086:	b2d2      	uxtb	r2, r2
 8001088:	701a      	strb	r2, [r3, #0]
	flags[1] ^= CHECK_BIT(risingEdges_flag1, 4) << 5; // Extra 1
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	3301      	adds	r3, #1
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	b25a      	sxtb	r2, r3
 8001092:	7dfb      	ldrb	r3, [r7, #23]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	b25b      	sxtb	r3, r3
 8001098:	f003 0320 	and.w	r3, r3, #32
 800109c:	b25b      	sxtb	r3, r3
 800109e:	4053      	eors	r3, r2
 80010a0:	b25a      	sxtb	r2, r3
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	3301      	adds	r3, #1
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	701a      	strb	r2, [r3, #0]
	if (dashboardState.hornState) // Horn
 80010aa:	4b56      	ldr	r3, [pc, #344]	@ (8001204 <_Z19Update_CAN_Message1PhS_S_+0x268>)
 80010ac:	791b      	ldrb	r3, [r3, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d009      	beq.n	80010c6 <_Z19Update_CAN_Message1PhS_S_+0x12a>
		flags[1] |= (1 << 6);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	3301      	adds	r3, #1
 80010b6:	781a      	ldrb	r2, [r3, #0]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	3301      	adds	r3, #1
 80010bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	701a      	strb	r2, [r3, #0]
 80010c4:	e008      	b.n	80010d8 <_Z19Update_CAN_Message1PhS_S_+0x13c>
	else
		flags[1] &= ~(1 << 6);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	3301      	adds	r3, #1
 80010ca:	781a      	ldrb	r2, [r3, #0]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	3301      	adds	r3, #1
 80010d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80010d4:	b2d2      	uxtb	r2, r2
 80010d6:	701a      	strb	r2, [r3, #0]
	if (dashboardState.pttState) // PTT (Push to Talk)
 80010d8:	4b4a      	ldr	r3, [pc, #296]	@ (8001204 <_Z19Update_CAN_Message1PhS_S_+0x268>)
 80010da:	79db      	ldrb	r3, [r3, #7]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d009      	beq.n	80010f4 <_Z19Update_CAN_Message1PhS_S_+0x158>
		flags[1] |= (1 << 7);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	3301      	adds	r3, #1
 80010e4:	781a      	ldrb	r2, [r3, #0]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	3301      	adds	r3, #1
 80010ea:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80010ee:	b2d2      	uxtb	r2, r2
 80010f0:	701a      	strb	r2, [r3, #0]
 80010f2:	e008      	b.n	8001106 <_Z19Update_CAN_Message1PhS_S_+0x16a>
	else
		flags[1] &= ~(1 << 7);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	3301      	adds	r3, #1
 80010f8:	781a      	ldrb	r2, [r3, #0]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	3301      	adds	r3, #1
 80010fe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001102:	b2d2      	uxtb	r2, r2
 8001104:	701a      	strb	r2, [r3, #0]
	/*
		NOTE:
			currently sending state of turn signal, turn signal on or off
			if wanting to send actual control of turn signal light, need to send outputPortState variable instead of lightState	
	*/
	if (dashboardState.lightState == LIGHTS_HAZARD) // Blinkers
 8001106:	4b3f      	ldr	r3, [pc, #252]	@ (8001204 <_Z19Update_CAN_Message1PhS_S_+0x268>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b03      	cmp	r3, #3
 800110c:	d109      	bne.n	8001122 <_Z19Update_CAN_Message1PhS_S_+0x186>
		flags[2] |= (1 << 0);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	3302      	adds	r3, #2
 8001112:	781a      	ldrb	r2, [r3, #0]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	3302      	adds	r3, #2
 8001118:	f042 0201 	orr.w	r2, r2, #1
 800111c:	b2d2      	uxtb	r2, r2
 800111e:	701a      	strb	r2, [r3, #0]
 8001120:	e008      	b.n	8001134 <_Z19Update_CAN_Message1PhS_S_+0x198>
	else
		flags[2] &= ~(1 << 0);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	3302      	adds	r3, #2
 8001126:	781a      	ldrb	r2, [r3, #0]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	3302      	adds	r3, #2
 800112c:	f022 0201 	bic.w	r2, r2, #1
 8001130:	b2d2      	uxtb	r2, r2
 8001132:	701a      	strb	r2, [r3, #0]
	if (dashboardState.lightState == LIGHTS_LEFT) // Left Turn
 8001134:	4b33      	ldr	r3, [pc, #204]	@ (8001204 <_Z19Update_CAN_Message1PhS_S_+0x268>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d109      	bne.n	8001150 <_Z19Update_CAN_Message1PhS_S_+0x1b4>
		flags[2] |= (1 << 1);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	3302      	adds	r3, #2
 8001140:	781a      	ldrb	r2, [r3, #0]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	3302      	adds	r3, #2
 8001146:	f042 0202 	orr.w	r2, r2, #2
 800114a:	b2d2      	uxtb	r2, r2
 800114c:	701a      	strb	r2, [r3, #0]
 800114e:	e008      	b.n	8001162 <_Z19Update_CAN_Message1PhS_S_+0x1c6>
	else
		flags[2] &= ~(1 << 1);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	3302      	adds	r3, #2
 8001154:	781a      	ldrb	r2, [r3, #0]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	3302      	adds	r3, #2
 800115a:	f022 0202 	bic.w	r2, r2, #2
 800115e:	b2d2      	uxtb	r2, r2
 8001160:	701a      	strb	r2, [r3, #0]
	if (dashboardState.lightState == LIGHTS_RIGHT) // Right Turn
 8001162:	4b28      	ldr	r3, [pc, #160]	@ (8001204 <_Z19Update_CAN_Message1PhS_S_+0x268>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b02      	cmp	r3, #2
 8001168:	d109      	bne.n	800117e <_Z19Update_CAN_Message1PhS_S_+0x1e2>
		flags[2] |= (1 << 2);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	3302      	adds	r3, #2
 800116e:	781a      	ldrb	r2, [r3, #0]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	3302      	adds	r3, #2
 8001174:	f042 0204 	orr.w	r2, r2, #4
 8001178:	b2d2      	uxtb	r2, r2
 800117a:	701a      	strb	r2, [r3, #0]
 800117c:	e008      	b.n	8001190 <_Z19Update_CAN_Message1PhS_S_+0x1f4>
	else
		flags[2] &= ~(1 << 2);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	3302      	adds	r3, #2
 8001182:	781a      	ldrb	r2, [r3, #0]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	3302      	adds	r3, #2
 8001188:	f022 0204 	bic.w	r2, r2, #4
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	701a      	strb	r2, [r3, #0]
	if (dashboardState.headlightState) // Headlights
 8001190:	4b1c      	ldr	r3, [pc, #112]	@ (8001204 <_Z19Update_CAN_Message1PhS_S_+0x268>)
 8001192:	799b      	ldrb	r3, [r3, #6]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d009      	beq.n	80011ac <_Z19Update_CAN_Message1PhS_S_+0x210>
		flags[2] |= (1 << 3);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	3302      	adds	r3, #2
 800119c:	781a      	ldrb	r2, [r3, #0]
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	3302      	adds	r3, #2
 80011a2:	f042 0208 	orr.w	r2, r2, #8
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	701a      	strb	r2, [r3, #0]
 80011aa:	e008      	b.n	80011be <_Z19Update_CAN_Message1PhS_S_+0x222>
	else
		flags[2] &= ~(1 << 3);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	3302      	adds	r3, #2
 80011b0:	781a      	ldrb	r2, [r3, #0]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	3302      	adds	r3, #2
 80011b6:	f022 0208 	bic.w	r2, r2, #8
 80011ba:	b2d2      	uxtb	r2, r2
 80011bc:	701a      	strb	r2, [r3, #0]

	cc_enable ^= CHECK_BIT(risingEdges_flag2, 1);
 80011be:	7dbb      	ldrb	r3, [r7, #22]
 80011c0:	f003 0302 	and.w	r3, r3, #2
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	bf14      	ite	ne
 80011c8:	2301      	movne	r3, #1
 80011ca:	2300      	moveq	r3, #0
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	b25a      	sxtb	r2, r3
 80011d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001208 <_Z19Update_CAN_Message1PhS_S_+0x26c>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	b25b      	sxtb	r3, r3
 80011d6:	4053      	eors	r3, r2
 80011d8:	b25b      	sxtb	r3, r3
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001208 <_Z19Update_CAN_Message1PhS_S_+0x26c>)
 80011de:	701a      	strb	r2, [r3, #0]

	prev_input1 = *Input1;
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	781a      	ldrb	r2, [r3, #0]
 80011e4:	4b05      	ldr	r3, [pc, #20]	@ (80011fc <_Z19Update_CAN_Message1PhS_S_+0x260>)
 80011e6:	701a      	strb	r2, [r3, #0]
	prev_input2 = *Input2;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	781a      	ldrb	r2, [r3, #0]
 80011ec:	4b04      	ldr	r3, [pc, #16]	@ (8001200 <_Z19Update_CAN_Message1PhS_S_+0x264>)
 80011ee:	701a      	strb	r2, [r3, #0]

}
 80011f0:	bf00      	nop
 80011f2:	371c      	adds	r7, #28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	2000013d 	.word	0x2000013d
 8001200:	2000013e 	.word	0x2000013e
 8001204:	200000ac 	.word	0x200000ac
 8001208:	200000a9 	.word	0x200000a9

0800120c <_Z16Init_CAN_Filter1R17CAN_HandleTypeDef>:
	 *
	 * */
}

void Init_CAN_Filter1(CAN_HandleTypeDef &hcan1)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08c      	sub	sp, #48	@ 0x30
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  CAN_FilterTypeDef canfilterconfig;
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001214:	2301      	movs	r3, #1
 8001216:	62bb      	str	r3, [r7, #40]	@ 0x28
  canfilterconfig.FilterBank = 18;
 8001218:	2312      	movs	r3, #18
 800121a:	61fb      	str	r3, [r7, #28]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800121c:	2300      	movs	r3, #0
 800121e:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8001220:	2301      	movs	r3, #1
 8001222:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001224:	2301      	movs	r3, #1
 8001226:	627b      	str	r3, [r7, #36]	@ 0x24
  canfilterconfig.SlaveStartFilterBank = 20;
 8001228:	2314      	movs	r3, #20
 800122a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  // CAN ID"S TO ACCEPT GO HERE, 4 ACCEPTED IN LIST MODE
  canfilterconfig.FilterIdHigh = CAN_ID_VCU_SENSORS << 5;
 800122c:	2340      	movs	r3, #64	@ 0x40
 800122e:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterIdLow = CAN_ID_POWERBOARD << 5;
 8001230:	2360      	movs	r3, #96	@ 0x60
 8001232:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMaskIdHigh = CAN_ID_BMS << 5;
 8001234:	2380      	movs	r3, #128	@ 0x80
 8001236:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterMaskIdLow = CAN_ID_MITSUBA_MOTOR << 5;
 8001238:	4b05      	ldr	r3, [pc, #20]	@ (8001250 <_Z16Init_CAN_Filter1R17CAN_HandleTypeDef+0x44>)
 800123a:	617b      	str	r3, [r7, #20]

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 800123c:	f107 0308 	add.w	r3, r7, #8
 8001240:	4619      	mov	r1, r3
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f003 fcda 	bl	8004bfc <HAL_CAN_ConfigFilter>
}
 8001248:	bf00      	nop
 800124a:	3730      	adds	r7, #48	@ 0x30
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	0001ffe0 	.word	0x0001ffe0

08001254 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART4)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a0c      	ldr	r2, [pc, #48]	@ (8001294 <HAL_UART_RxCpltCallback+0x40>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d10c      	bne.n	8001280 <HAL_UART_RxCpltCallback+0x2c>
  	{
		if (dashboardState.uart_rx != dashboardState.old_uart_rx)
 8001266:	4b0c      	ldr	r3, [pc, #48]	@ (8001298 <HAL_UART_RxCpltCallback+0x44>)
 8001268:	7e5a      	ldrb	r2, [r3, #25]
 800126a:	4b0b      	ldr	r3, [pc, #44]	@ (8001298 <HAL_UART_RxCpltCallback+0x44>)
 800126c:	7e9b      	ldrb	r3, [r3, #26]
 800126e:	429a      	cmp	r2, r3
 8001270:	d006      	beq.n	8001280 <HAL_UART_RxCpltCallback+0x2c>
		{
			dashboardState.updateRequested = 1; // set flag to update dashboard state
 8001272:	4b09      	ldr	r3, [pc, #36]	@ (8001298 <HAL_UART_RxCpltCallback+0x44>)
 8001274:	2201      	movs	r2, #1
 8001276:	76da      	strb	r2, [r3, #27]
			dashboardState.old_uart_rx = dashboardState.uart_rx;
 8001278:	4b07      	ldr	r3, [pc, #28]	@ (8001298 <HAL_UART_RxCpltCallback+0x44>)
 800127a:	7e5a      	ldrb	r2, [r3, #25]
 800127c:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <HAL_UART_RxCpltCallback+0x44>)
 800127e:	769a      	strb	r2, [r3, #26]
		}
	}
	HAL_UART_Receive_IT(&huart4, &dashboardState.uart_rx, 1);
 8001280:	2201      	movs	r2, #1
 8001282:	4906      	ldr	r1, [pc, #24]	@ (800129c <HAL_UART_RxCpltCallback+0x48>)
 8001284:	4806      	ldr	r0, [pc, #24]	@ (80012a0 <HAL_UART_RxCpltCallback+0x4c>)
 8001286:	f007 f913 	bl	80084b0 <HAL_UART_Receive_IT>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40004c00 	.word	0x40004c00
 8001298:	200000ac 	.word	0x200000ac
 800129c:	200000c5 	.word	0x200000c5
 80012a0:	20000294 	.word	0x20000294

080012a4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	dma_flag = 1;
 80012ac:	4b04      	ldr	r3, [pc, #16]	@ (80012c0 <HAL_ADC_ConvCpltCallback+0x1c>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	701a      	strb	r2, [r3, #0]
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	200000a8 	.word	0x200000a8

080012c4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	80fb      	strh	r3, [r7, #6]
	GPIO_Interrupt_Triggered = 1;
 80012ce:	4b04      	ldr	r3, [pc, #16]	@ (80012e0 <HAL_GPIO_EXTI_Callback+0x1c>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	701a      	strb	r2, [r3, #0]
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	200000aa 	.word	0x200000aa

080012e4 <_Z41__static_initialization_and_destruction_0ii>:
	// mitsuba motor sends velocity and other data?
	else if (RxHeader.StdId == CAN_ID_MITSUBA_MOTOR)
	{
		// Process message from Mitsuba Motor
	}
}
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d10a      	bne.n	800130a <_Z41__static_initialization_and_destruction_0ii+0x26>
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d105      	bne.n	800130a <_Z41__static_initialization_and_destruction_0ii+0x26>
ILI9341 screen(320, 240);
 80012fe:	22f0      	movs	r2, #240	@ 0xf0
 8001300:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8001304:	4808      	ldr	r0, [pc, #32]	@ (8001328 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001306:	f000 febd 	bl	8002084 <_ZN7ILI9341C1Ess>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d107      	bne.n	8001320 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001316:	4293      	cmp	r3, r2
 8001318:	d102      	bne.n	8001320 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800131a:	4803      	ldr	r0, [pc, #12]	@ (8001328 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800131c:	f000 ff4c 	bl	80021b8 <_ZN7ILI9341D1Ev>
}
 8001320:	bf00      	nop
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	200000cc 	.word	0x200000cc

0800132c <_GLOBAL__sub_I_U5>:
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
 8001330:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001334:	2001      	movs	r0, #1
 8001336:	f7ff ffd5 	bl	80012e4 <_Z41__static_initialization_and_destruction_0ii>
 800133a:	bd80      	pop	{r7, pc}

0800133c <_GLOBAL__sub_D_U5>:
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
 8001340:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001344:	2000      	movs	r0, #0
 8001346:	f7ff ffcd 	bl	80012e4 <_Z41__static_initialization_and_destruction_0ii>
 800134a:	bd80      	pop	{r7, pc}

0800134c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001350:	f001 ff27 	bl	80031a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001354:	f000 f868 	bl	8001428 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001358:	f000 faf4 	bl	8001944 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800135c:	f000 fad4 	bl	8001908 <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 8001360:	f000 f8b8 	bl	80014d4 <_ZL12MX_ADC1_Initv>
  MX_I2C4_Init();
 8001364:	f000 fa4e 	bl	8001804 <_ZL12MX_I2C4_Initv>
  MX_CAN1_Init();
 8001368:	f000 f9d8 	bl	800171c <_ZL12MX_CAN1_Initv>
  MX_CAN2_Init();
 800136c:	f000 fa10 	bl	8001790 <_ZL12MX_CAN2_Initv>
  MX_UART4_Init();
 8001370:	f000 fa96 	bl	80018a0 <_ZL13MX_UART4_Initv>
  /* USER CODE BEGIN 2 */
  
  CPP_UserSetup();
 8001374:	f7ff fa1c 	bl	80007b0 <CPP_UserSetup>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001378:	f008 fbf0 	bl	8009b5c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of CAN_Mutex */
  CAN_MutexHandle = osSemaphoreNew(1, 1, &CAN_Mutex_attributes);
 800137c:	4a19      	ldr	r2, [pc, #100]	@ (80013e4 <main+0x98>)
 800137e:	2101      	movs	r1, #1
 8001380:	2001      	movs	r0, #1
 8001382:	f008 fce2 	bl	8009d4a <osSemaphoreNew>
 8001386:	4603      	mov	r3, r0
 8001388:	4a17      	ldr	r2, [pc, #92]	@ (80013e8 <main+0x9c>)
 800138a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HeartBeat */
  HeartBeatHandle = osThreadNew(StartTask01, NULL, &HeartBeat_attributes);
 800138c:	4a17      	ldr	r2, [pc, #92]	@ (80013ec <main+0xa0>)
 800138e:	2100      	movs	r1, #0
 8001390:	4817      	ldr	r0, [pc, #92]	@ (80013f0 <main+0xa4>)
 8001392:	f008 fc2d 	bl	8009bf0 <osThreadNew>
 8001396:	4603      	mov	r3, r0
 8001398:	4a16      	ldr	r2, [pc, #88]	@ (80013f4 <main+0xa8>)
 800139a:	6013      	str	r3, [r2, #0]

  /* creation of Critical_Inputs */
  Critical_InputsHandle = osThreadNew(StartTask02, NULL, &Critical_Inputs_attributes);
 800139c:	4a16      	ldr	r2, [pc, #88]	@ (80013f8 <main+0xac>)
 800139e:	2100      	movs	r1, #0
 80013a0:	4816      	ldr	r0, [pc, #88]	@ (80013fc <main+0xb0>)
 80013a2:	f008 fc25 	bl	8009bf0 <osThreadNew>
 80013a6:	4603      	mov	r3, r0
 80013a8:	4a15      	ldr	r2, [pc, #84]	@ (8001400 <main+0xb4>)
 80013aa:	6013      	str	r3, [r2, #0]

  /* creation of ReadIOExpander */
  ReadIOExpanderHandle = osThreadNew(StartTask03, NULL, &ReadIOExpander_attributes);
 80013ac:	4a15      	ldr	r2, [pc, #84]	@ (8001404 <main+0xb8>)
 80013ae:	2100      	movs	r1, #0
 80013b0:	4815      	ldr	r0, [pc, #84]	@ (8001408 <main+0xbc>)
 80013b2:	f008 fc1d 	bl	8009bf0 <osThreadNew>
 80013b6:	4603      	mov	r3, r0
 80013b8:	4a14      	ldr	r2, [pc, #80]	@ (800140c <main+0xc0>)
 80013ba:	6013      	str	r3, [r2, #0]

  /* creation of Outputs_Control */
  Outputs_ControlHandle = osThreadNew(StartTask04, NULL, &Outputs_Control_attributes);
 80013bc:	4a14      	ldr	r2, [pc, #80]	@ (8001410 <main+0xc4>)
 80013be:	2100      	movs	r1, #0
 80013c0:	4814      	ldr	r0, [pc, #80]	@ (8001414 <main+0xc8>)
 80013c2:	f008 fc15 	bl	8009bf0 <osThreadNew>
 80013c6:	4603      	mov	r3, r0
 80013c8:	4a13      	ldr	r2, [pc, #76]	@ (8001418 <main+0xcc>)
 80013ca:	6013      	str	r3, [r2, #0]


  ScreenControlHandle = osThreadNew(StartTask05, NULL, &ScreenControl_attributes);
 80013cc:	4a13      	ldr	r2, [pc, #76]	@ (800141c <main+0xd0>)
 80013ce:	2100      	movs	r1, #0
 80013d0:	4813      	ldr	r0, [pc, #76]	@ (8001420 <main+0xd4>)
 80013d2:	f008 fc0d 	bl	8009bf0 <osThreadNew>
 80013d6:	4603      	mov	r3, r0
 80013d8:	4a12      	ldr	r2, [pc, #72]	@ (8001424 <main+0xd8>)
 80013da:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80013dc:	f008 fbe2 	bl	8009ba4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013e0:	bf00      	nop
 80013e2:	e7fd      	b.n	80013e0 <main+0x94>
 80013e4:	0800cd18 	.word	0x0800cd18
 80013e8:	20000330 	.word	0x20000330
 80013ec:	0800cc64 	.word	0x0800cc64
 80013f0:	08000975 	.word	0x08000975
 80013f4:	2000031c 	.word	0x2000031c
 80013f8:	0800cc88 	.word	0x0800cc88
 80013fc:	08000995 	.word	0x08000995
 8001400:	20000320 	.word	0x20000320
 8001404:	0800ccac 	.word	0x0800ccac
 8001408:	08000b1d 	.word	0x08000b1d
 800140c:	20000324 	.word	0x20000324
 8001410:	0800ccd0 	.word	0x0800ccd0
 8001414:	08000c31 	.word	0x08000c31
 8001418:	20000328 	.word	0x20000328
 800141c:	0800ccf4 	.word	0x0800ccf4
 8001420:	08000cb5 	.word	0x08000cb5
 8001424:	2000032c 	.word	0x2000032c

08001428 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b096      	sub	sp, #88	@ 0x58
 800142c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800142e:	f107 0314 	add.w	r3, r7, #20
 8001432:	2244      	movs	r2, #68	@ 0x44
 8001434:	2100      	movs	r1, #0
 8001436:	4618      	mov	r0, r3
 8001438:	f00b fad6 	bl	800c9e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800143c:	463b      	mov	r3, r7
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
 8001448:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800144a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800144e:	f005 f98b 	bl	8006768 <HAL_PWREx_ControlVoltageScaling>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	bf14      	ite	ne
 8001458:	2301      	movne	r3, #1
 800145a:	2300      	moveq	r3, #0
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8001462:	f000 fb0f 	bl	8001a84 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001466:	2310      	movs	r3, #16
 8001468:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800146a:	2301      	movs	r3, #1
 800146c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001472:	2360      	movs	r3, #96	@ 0x60
 8001474:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001476:	2300      	movs	r3, #0
 8001478:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800147a:	f107 0314 	add.w	r3, r7, #20
 800147e:	4618      	mov	r0, r3
 8001480:	f005 f9c8 	bl	8006814 <HAL_RCC_OscConfig>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	bf14      	ite	ne
 800148a:	2301      	movne	r3, #1
 800148c:	2300      	moveq	r3, #0
 800148e:	b2db      	uxtb	r3, r3
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8001494:	f000 faf6 	bl	8001a84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001498:	230f      	movs	r3, #15
 800149a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800149c:	2300      	movs	r3, #0
 800149e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014a8:	2300      	movs	r3, #0
 80014aa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014ac:	463b      	mov	r3, r7
 80014ae:	2100      	movs	r1, #0
 80014b0:	4618      	mov	r0, r3
 80014b2:	f005 fdc9 	bl	8007048 <HAL_RCC_ClockConfig>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	bf14      	ite	ne
 80014bc:	2301      	movne	r3, #1
 80014be:	2300      	moveq	r3, #0
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 80014c6:	f000 fadd 	bl	8001a84 <Error_Handler>
  }
}
 80014ca:	bf00      	nop
 80014cc:	3758      	adds	r7, #88	@ 0x58
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08a      	sub	sp, #40	@ 0x28
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80014da:	f107 031c 	add.w	r3, r7, #28
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
 80014f4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80014f6:	4b86      	ldr	r3, [pc, #536]	@ (8001710 <_ZL12MX_ADC1_Initv+0x23c>)
 80014f8:	4a86      	ldr	r2, [pc, #536]	@ (8001714 <_ZL12MX_ADC1_Initv+0x240>)
 80014fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80014fc:	4b84      	ldr	r3, [pc, #528]	@ (8001710 <_ZL12MX_ADC1_Initv+0x23c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001502:	4b83      	ldr	r3, [pc, #524]	@ (8001710 <_ZL12MX_ADC1_Initv+0x23c>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001508:	4b81      	ldr	r3, [pc, #516]	@ (8001710 <_ZL12MX_ADC1_Initv+0x23c>)
 800150a:	2200      	movs	r2, #0
 800150c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800150e:	4b80      	ldr	r3, [pc, #512]	@ (8001710 <_ZL12MX_ADC1_Initv+0x23c>)
 8001510:	2201      	movs	r2, #1
 8001512:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001514:	4b7e      	ldr	r3, [pc, #504]	@ (8001710 <_ZL12MX_ADC1_Initv+0x23c>)
 8001516:	2208      	movs	r2, #8
 8001518:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800151a:	4b7d      	ldr	r3, [pc, #500]	@ (8001710 <_ZL12MX_ADC1_Initv+0x23c>)
 800151c:	2200      	movs	r2, #0
 800151e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001520:	4b7b      	ldr	r3, [pc, #492]	@ (8001710 <_ZL12MX_ADC1_Initv+0x23c>)
 8001522:	2201      	movs	r2, #1
 8001524:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 10;
 8001526:	4b7a      	ldr	r3, [pc, #488]	@ (8001710 <_ZL12MX_ADC1_Initv+0x23c>)
 8001528:	220a      	movs	r2, #10
 800152a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800152c:	4b78      	ldr	r3, [pc, #480]	@ (8001710 <_ZL12MX_ADC1_Initv+0x23c>)
 800152e:	2200      	movs	r2, #0
 8001530:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001534:	4b76      	ldr	r3, [pc, #472]	@ (8001710 <_ZL12MX_ADC1_Initv+0x23c>)
 8001536:	2200      	movs	r2, #0
 8001538:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800153a:	4b75      	ldr	r3, [pc, #468]	@ (8001710 <_ZL12MX_ADC1_Initv+0x23c>)
 800153c:	2200      	movs	r2, #0
 800153e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001540:	4b73      	ldr	r3, [pc, #460]	@ (8001710 <_ZL12MX_ADC1_Initv+0x23c>)
 8001542:	2200      	movs	r2, #0
 8001544:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001548:	4b71      	ldr	r3, [pc, #452]	@ (8001710 <_ZL12MX_ADC1_Initv+0x23c>)
 800154a:	2200      	movs	r2, #0
 800154c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800154e:	4b70      	ldr	r3, [pc, #448]	@ (8001710 <_ZL12MX_ADC1_Initv+0x23c>)
 8001550:	2200      	movs	r2, #0
 8001552:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001556:	486e      	ldr	r0, [pc, #440]	@ (8001710 <_ZL12MX_ADC1_Initv+0x23c>)
 8001558:	f002 f8b6 	bl	80036c8 <HAL_ADC_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	bf14      	ite	ne
 8001562:	2301      	movne	r3, #1
 8001564:	2300      	moveq	r3, #0
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <_ZL12MX_ADC1_Initv+0x9c>
  {
    Error_Handler();
 800156c:	f000 fa8a 	bl	8001a84 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001570:	2300      	movs	r3, #0
 8001572:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001574:	f107 031c 	add.w	r3, r7, #28
 8001578:	4619      	mov	r1, r3
 800157a:	4865      	ldr	r0, [pc, #404]	@ (8001710 <_ZL12MX_ADC1_Initv+0x23c>)
 800157c:	f003 f992 	bl	80048a4 <HAL_ADCEx_MultiModeConfigChannel>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	bf14      	ite	ne
 8001586:	2301      	movne	r3, #1
 8001588:	2300      	moveq	r3, #0
 800158a:	b2db      	uxtb	r3, r3
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <_ZL12MX_ADC1_Initv+0xc0>
  {
    Error_Handler();
 8001590:	f000 fa78 	bl	8001a84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001594:	4b60      	ldr	r3, [pc, #384]	@ (8001718 <_ZL12MX_ADC1_Initv+0x244>)
 8001596:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001598:	2306      	movs	r3, #6
 800159a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800159c:	2300      	movs	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015a0:	237f      	movs	r3, #127	@ 0x7f
 80015a2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015a4:	2304      	movs	r3, #4
 80015a6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	4619      	mov	r1, r3
 80015b0:	4857      	ldr	r0, [pc, #348]	@ (8001710 <_ZL12MX_ADC1_Initv+0x23c>)
 80015b2:	f002 fb0f 	bl	8003bd4 <HAL_ADC_ConfigChannel>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	bf14      	ite	ne
 80015bc:	2301      	movne	r3, #1
 80015be:	2300      	moveq	r3, #0
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <_ZL12MX_ADC1_Initv+0xf6>
  {
    Error_Handler();
 80015c6:	f000 fa5d 	bl	8001a84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80015ca:	230c      	movs	r3, #12
 80015cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	4619      	mov	r1, r3
 80015d2:	484f      	ldr	r0, [pc, #316]	@ (8001710 <_ZL12MX_ADC1_Initv+0x23c>)
 80015d4:	f002 fafe 	bl	8003bd4 <HAL_ADC_ConfigChannel>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	bf14      	ite	ne
 80015de:	2301      	movne	r3, #1
 80015e0:	2300      	moveq	r3, #0
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <_ZL12MX_ADC1_Initv+0x118>
  {
    Error_Handler();
 80015e8:	f000 fa4c 	bl	8001a84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80015ec:	2312      	movs	r3, #18
 80015ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015f0:	1d3b      	adds	r3, r7, #4
 80015f2:	4619      	mov	r1, r3
 80015f4:	4846      	ldr	r0, [pc, #280]	@ (8001710 <_ZL12MX_ADC1_Initv+0x23c>)
 80015f6:	f002 faed 	bl	8003bd4 <HAL_ADC_ConfigChannel>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	bf14      	ite	ne
 8001600:	2301      	movne	r3, #1
 8001602:	2300      	moveq	r3, #0
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <_ZL12MX_ADC1_Initv+0x13a>
  {
    Error_Handler();
 800160a:	f000 fa3b 	bl	8001a84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800160e:	2318      	movs	r3, #24
 8001610:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	4619      	mov	r1, r3
 8001616:	483e      	ldr	r0, [pc, #248]	@ (8001710 <_ZL12MX_ADC1_Initv+0x23c>)
 8001618:	f002 fadc 	bl	8003bd4 <HAL_ADC_ConfigChannel>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	bf14      	ite	ne
 8001622:	2301      	movne	r3, #1
 8001624:	2300      	moveq	r3, #0
 8001626:	b2db      	uxtb	r3, r3
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <_ZL12MX_ADC1_Initv+0x15c>
  {
    Error_Handler();
 800162c:	f000 fa2a 	bl	8001a84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001630:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001634:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001636:	1d3b      	adds	r3, r7, #4
 8001638:	4619      	mov	r1, r3
 800163a:	4835      	ldr	r0, [pc, #212]	@ (8001710 <_ZL12MX_ADC1_Initv+0x23c>)
 800163c:	f002 faca 	bl	8003bd4 <HAL_ADC_ConfigChannel>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	bf14      	ite	ne
 8001646:	2301      	movne	r3, #1
 8001648:	2300      	moveq	r3, #0
 800164a:	b2db      	uxtb	r3, r3
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <_ZL12MX_ADC1_Initv+0x180>
  {
    Error_Handler();
 8001650:	f000 fa18 	bl	8001a84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001654:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8001658:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	4619      	mov	r1, r3
 800165e:	482c      	ldr	r0, [pc, #176]	@ (8001710 <_ZL12MX_ADC1_Initv+0x23c>)
 8001660:	f002 fab8 	bl	8003bd4 <HAL_ADC_ConfigChannel>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	bf14      	ite	ne
 800166a:	2301      	movne	r3, #1
 800166c:	2300      	moveq	r3, #0
 800166e:	b2db      	uxtb	r3, r3
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <_ZL12MX_ADC1_Initv+0x1a4>
  {
    Error_Handler();
 8001674:	f000 fa06 	bl	8001a84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001678:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 800167c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	4619      	mov	r1, r3
 8001682:	4823      	ldr	r0, [pc, #140]	@ (8001710 <_ZL12MX_ADC1_Initv+0x23c>)
 8001684:	f002 faa6 	bl	8003bd4 <HAL_ADC_ConfigChannel>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	bf14      	ite	ne
 800168e:	2301      	movne	r3, #1
 8001690:	2300      	moveq	r3, #0
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <_ZL12MX_ADC1_Initv+0x1c8>
  {
    Error_Handler();
 8001698:	f000 f9f4 	bl	8001a84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800169c:	f44f 7389 	mov.w	r3, #274	@ 0x112
 80016a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016a2:	1d3b      	adds	r3, r7, #4
 80016a4:	4619      	mov	r1, r3
 80016a6:	481a      	ldr	r0, [pc, #104]	@ (8001710 <_ZL12MX_ADC1_Initv+0x23c>)
 80016a8:	f002 fa94 	bl	8003bd4 <HAL_ADC_ConfigChannel>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	bf14      	ite	ne
 80016b2:	2301      	movne	r3, #1
 80016b4:	2300      	moveq	r3, #0
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <_ZL12MX_ADC1_Initv+0x1ec>
  {
    Error_Handler();
 80016bc:	f000 f9e2 	bl	8001a84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80016c0:	f44f 738c 	mov.w	r3, #280	@ 0x118
 80016c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	4619      	mov	r1, r3
 80016ca:	4811      	ldr	r0, [pc, #68]	@ (8001710 <_ZL12MX_ADC1_Initv+0x23c>)
 80016cc:	f002 fa82 	bl	8003bd4 <HAL_ADC_ConfigChannel>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	bf14      	ite	ne
 80016d6:	2301      	movne	r3, #1
 80016d8:	2300      	moveq	r3, #0
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <_ZL12MX_ADC1_Initv+0x210>
  {
    Error_Handler();
 80016e0:	f000 f9d0 	bl	8001a84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80016e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016ea:	1d3b      	adds	r3, r7, #4
 80016ec:	4619      	mov	r1, r3
 80016ee:	4808      	ldr	r0, [pc, #32]	@ (8001710 <_ZL12MX_ADC1_Initv+0x23c>)
 80016f0:	f002 fa70 	bl	8003bd4 <HAL_ADC_ConfigChannel>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	bf14      	ite	ne
 80016fa:	2301      	movne	r3, #1
 80016fc:	2300      	moveq	r3, #0
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <_ZL12MX_ADC1_Initv+0x234>
  {
    Error_Handler();
 8001704:	f000 f9be 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001708:	bf00      	nop
 800170a:	3728      	adds	r7, #40	@ 0x28
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20000140 	.word	0x20000140
 8001714:	50040000 	.word	0x50040000
 8001718:	04300002 	.word	0x04300002

0800171c <_ZL12MX_CAN1_Initv>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001720:	4b19      	ldr	r3, [pc, #100]	@ (8001788 <_ZL12MX_CAN1_Initv+0x6c>)
 8001722:	4a1a      	ldr	r2, [pc, #104]	@ (800178c <_ZL12MX_CAN1_Initv+0x70>)
 8001724:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8001726:	4b18      	ldr	r3, [pc, #96]	@ (8001788 <_ZL12MX_CAN1_Initv+0x6c>)
 8001728:	2202      	movs	r2, #2
 800172a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800172c:	4b16      	ldr	r3, [pc, #88]	@ (8001788 <_ZL12MX_CAN1_Initv+0x6c>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001732:	4b15      	ldr	r3, [pc, #84]	@ (8001788 <_ZL12MX_CAN1_Initv+0x6c>)
 8001734:	2200      	movs	r2, #0
 8001736:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001738:	4b13      	ldr	r3, [pc, #76]	@ (8001788 <_ZL12MX_CAN1_Initv+0x6c>)
 800173a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800173e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001740:	4b11      	ldr	r3, [pc, #68]	@ (8001788 <_ZL12MX_CAN1_Initv+0x6c>)
 8001742:	2200      	movs	r2, #0
 8001744:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001746:	4b10      	ldr	r3, [pc, #64]	@ (8001788 <_ZL12MX_CAN1_Initv+0x6c>)
 8001748:	2200      	movs	r2, #0
 800174a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800174c:	4b0e      	ldr	r3, [pc, #56]	@ (8001788 <_ZL12MX_CAN1_Initv+0x6c>)
 800174e:	2200      	movs	r2, #0
 8001750:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001752:	4b0d      	ldr	r3, [pc, #52]	@ (8001788 <_ZL12MX_CAN1_Initv+0x6c>)
 8001754:	2200      	movs	r2, #0
 8001756:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001758:	4b0b      	ldr	r3, [pc, #44]	@ (8001788 <_ZL12MX_CAN1_Initv+0x6c>)
 800175a:	2200      	movs	r2, #0
 800175c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800175e:	4b0a      	ldr	r3, [pc, #40]	@ (8001788 <_ZL12MX_CAN1_Initv+0x6c>)
 8001760:	2200      	movs	r2, #0
 8001762:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001764:	4b08      	ldr	r3, [pc, #32]	@ (8001788 <_ZL12MX_CAN1_Initv+0x6c>)
 8001766:	2200      	movs	r2, #0
 8001768:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800176a:	4807      	ldr	r0, [pc, #28]	@ (8001788 <_ZL12MX_CAN1_Initv+0x6c>)
 800176c:	f003 f94a 	bl	8004a04 <HAL_CAN_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	bf14      	ite	ne
 8001776:	2301      	movne	r3, #1
 8001778:	2300      	moveq	r3, #0
 800177a:	b2db      	uxtb	r3, r3
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <_ZL12MX_CAN1_Initv+0x68>
  {
    Error_Handler();
 8001780:	f000 f980 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}
 8001788:	200001f0 	.word	0x200001f0
 800178c:	40006400 	.word	0x40006400

08001790 <_ZL12MX_CAN2_Initv>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001794:	4b19      	ldr	r3, [pc, #100]	@ (80017fc <_ZL12MX_CAN2_Initv+0x6c>)
 8001796:	4a1a      	ldr	r2, [pc, #104]	@ (8001800 <_ZL12MX_CAN2_Initv+0x70>)
 8001798:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 2;
 800179a:	4b18      	ldr	r3, [pc, #96]	@ (80017fc <_ZL12MX_CAN2_Initv+0x6c>)
 800179c:	2202      	movs	r2, #2
 800179e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80017a0:	4b16      	ldr	r3, [pc, #88]	@ (80017fc <_ZL12MX_CAN2_Initv+0x6c>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80017a6:	4b15      	ldr	r3, [pc, #84]	@ (80017fc <_ZL12MX_CAN2_Initv+0x6c>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 80017ac:	4b13      	ldr	r3, [pc, #76]	@ (80017fc <_ZL12MX_CAN2_Initv+0x6c>)
 80017ae:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80017b2:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80017b4:	4b11      	ldr	r3, [pc, #68]	@ (80017fc <_ZL12MX_CAN2_Initv+0x6c>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80017ba:	4b10      	ldr	r3, [pc, #64]	@ (80017fc <_ZL12MX_CAN2_Initv+0x6c>)
 80017bc:	2200      	movs	r2, #0
 80017be:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80017c0:	4b0e      	ldr	r3, [pc, #56]	@ (80017fc <_ZL12MX_CAN2_Initv+0x6c>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80017c6:	4b0d      	ldr	r3, [pc, #52]	@ (80017fc <_ZL12MX_CAN2_Initv+0x6c>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80017cc:	4b0b      	ldr	r3, [pc, #44]	@ (80017fc <_ZL12MX_CAN2_Initv+0x6c>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80017d2:	4b0a      	ldr	r3, [pc, #40]	@ (80017fc <_ZL12MX_CAN2_Initv+0x6c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80017d8:	4b08      	ldr	r3, [pc, #32]	@ (80017fc <_ZL12MX_CAN2_Initv+0x6c>)
 80017da:	2200      	movs	r2, #0
 80017dc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80017de:	4807      	ldr	r0, [pc, #28]	@ (80017fc <_ZL12MX_CAN2_Initv+0x6c>)
 80017e0:	f003 f910 	bl	8004a04 <HAL_CAN_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	bf14      	ite	ne
 80017ea:	2301      	movne	r3, #1
 80017ec:	2300      	moveq	r3, #0
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <_ZL12MX_CAN2_Initv+0x68>
  {
    Error_Handler();
 80017f4:	f000 f946 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000218 	.word	0x20000218
 8001800:	40006800 	.word	0x40006800

08001804 <_ZL12MX_I2C4_Initv>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001808:	4b22      	ldr	r3, [pc, #136]	@ (8001894 <_ZL12MX_I2C4_Initv+0x90>)
 800180a:	4a23      	ldr	r2, [pc, #140]	@ (8001898 <_ZL12MX_I2C4_Initv+0x94>)
 800180c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00100D14;
 800180e:	4b21      	ldr	r3, [pc, #132]	@ (8001894 <_ZL12MX_I2C4_Initv+0x90>)
 8001810:	4a22      	ldr	r2, [pc, #136]	@ (800189c <_ZL12MX_I2C4_Initv+0x98>)
 8001812:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001814:	4b1f      	ldr	r3, [pc, #124]	@ (8001894 <_ZL12MX_I2C4_Initv+0x90>)
 8001816:	2200      	movs	r2, #0
 8001818:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800181a:	4b1e      	ldr	r3, [pc, #120]	@ (8001894 <_ZL12MX_I2C4_Initv+0x90>)
 800181c:	2201      	movs	r2, #1
 800181e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001820:	4b1c      	ldr	r3, [pc, #112]	@ (8001894 <_ZL12MX_I2C4_Initv+0x90>)
 8001822:	2200      	movs	r2, #0
 8001824:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001826:	4b1b      	ldr	r3, [pc, #108]	@ (8001894 <_ZL12MX_I2C4_Initv+0x90>)
 8001828:	2200      	movs	r2, #0
 800182a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800182c:	4b19      	ldr	r3, [pc, #100]	@ (8001894 <_ZL12MX_I2C4_Initv+0x90>)
 800182e:	2200      	movs	r2, #0
 8001830:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001832:	4b18      	ldr	r3, [pc, #96]	@ (8001894 <_ZL12MX_I2C4_Initv+0x90>)
 8001834:	2200      	movs	r2, #0
 8001836:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001838:	4b16      	ldr	r3, [pc, #88]	@ (8001894 <_ZL12MX_I2C4_Initv+0x90>)
 800183a:	2200      	movs	r2, #0
 800183c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800183e:	4815      	ldr	r0, [pc, #84]	@ (8001894 <_ZL12MX_I2C4_Initv+0x90>)
 8001840:	f004 f960 	bl	8005b04 <HAL_I2C_Init>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	bf14      	ite	ne
 800184a:	2301      	movne	r3, #1
 800184c:	2300      	moveq	r3, #0
 800184e:	b2db      	uxtb	r3, r3
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <_ZL12MX_I2C4_Initv+0x54>
  {
    Error_Handler();
 8001854:	f000 f916 	bl	8001a84 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001858:	2100      	movs	r1, #0
 800185a:	480e      	ldr	r0, [pc, #56]	@ (8001894 <_ZL12MX_I2C4_Initv+0x90>)
 800185c:	f004 fede 	bl	800661c <HAL_I2CEx_ConfigAnalogFilter>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	bf14      	ite	ne
 8001866:	2301      	movne	r3, #1
 8001868:	2300      	moveq	r3, #0
 800186a:	b2db      	uxtb	r3, r3
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <_ZL12MX_I2C4_Initv+0x70>
  {
    Error_Handler();
 8001870:	f000 f908 	bl	8001a84 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001874:	2100      	movs	r1, #0
 8001876:	4807      	ldr	r0, [pc, #28]	@ (8001894 <_ZL12MX_I2C4_Initv+0x90>)
 8001878:	f004 ff1b 	bl	80066b2 <HAL_I2CEx_ConfigDigitalFilter>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	bf14      	ite	ne
 8001882:	2301      	movne	r3, #1
 8001884:	2300      	moveq	r3, #0
 8001886:	b2db      	uxtb	r3, r3
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <_ZL12MX_I2C4_Initv+0x8c>
  {
    Error_Handler();
 800188c:	f000 f8fa 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000240 	.word	0x20000240
 8001898:	40008400 	.word	0x40008400
 800189c:	00100d14 	.word	0x00100d14

080018a0 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80018a4:	4b16      	ldr	r3, [pc, #88]	@ (8001900 <_ZL13MX_UART4_Initv+0x60>)
 80018a6:	4a17      	ldr	r2, [pc, #92]	@ (8001904 <_ZL13MX_UART4_Initv+0x64>)
 80018a8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80018aa:	4b15      	ldr	r3, [pc, #84]	@ (8001900 <_ZL13MX_UART4_Initv+0x60>)
 80018ac:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80018b0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80018b2:	4b13      	ldr	r3, [pc, #76]	@ (8001900 <_ZL13MX_UART4_Initv+0x60>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80018b8:	4b11      	ldr	r3, [pc, #68]	@ (8001900 <_ZL13MX_UART4_Initv+0x60>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80018be:	4b10      	ldr	r3, [pc, #64]	@ (8001900 <_ZL13MX_UART4_Initv+0x60>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80018c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001900 <_ZL13MX_UART4_Initv+0x60>)
 80018c6:	220c      	movs	r2, #12
 80018c8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001900 <_ZL13MX_UART4_Initv+0x60>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001900 <_ZL13MX_UART4_Initv+0x60>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001900 <_ZL13MX_UART4_Initv+0x60>)
 80018d8:	2200      	movs	r2, #0
 80018da:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018dc:	4b08      	ldr	r3, [pc, #32]	@ (8001900 <_ZL13MX_UART4_Initv+0x60>)
 80018de:	2200      	movs	r2, #0
 80018e0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80018e2:	4807      	ldr	r0, [pc, #28]	@ (8001900 <_ZL13MX_UART4_Initv+0x60>)
 80018e4:	f006 fd96 	bl	8008414 <HAL_UART_Init>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	bf14      	ite	ne
 80018ee:	2301      	movne	r3, #1
 80018f0:	2300      	moveq	r3, #0
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <_ZL13MX_UART4_Initv+0x5c>
  {
    Error_Handler();
 80018f8:	f000 f8c4 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80018fc:	bf00      	nop
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20000294 	.word	0x20000294
 8001904:	40004c00 	.word	0x40004c00

08001908 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800190e:	4b0c      	ldr	r3, [pc, #48]	@ (8001940 <_ZL11MX_DMA_Initv+0x38>)
 8001910:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001912:	4a0b      	ldr	r2, [pc, #44]	@ (8001940 <_ZL11MX_DMA_Initv+0x38>)
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	6493      	str	r3, [r2, #72]	@ 0x48
 800191a:	4b09      	ldr	r3, [pc, #36]	@ (8001940 <_ZL11MX_DMA_Initv+0x38>)
 800191c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	607b      	str	r3, [r7, #4]
 8001924:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001926:	2200      	movs	r2, #0
 8001928:	2105      	movs	r1, #5
 800192a:	200b      	movs	r0, #11
 800192c:	f003 fc6e 	bl	800520c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001930:	200b      	movs	r0, #11
 8001932:	f003 fc87 	bl	8005244 <HAL_NVIC_EnableIRQ>

}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40021000 	.word	0x40021000

08001944 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b088      	sub	sp, #32
 8001948:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194a:	f107 030c 	add.w	r3, r7, #12
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	605a      	str	r2, [r3, #4]
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	60da      	str	r2, [r3, #12]
 8001958:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800195a:	4b3e      	ldr	r3, [pc, #248]	@ (8001a54 <_ZL12MX_GPIO_Initv+0x110>)
 800195c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800195e:	4a3d      	ldr	r2, [pc, #244]	@ (8001a54 <_ZL12MX_GPIO_Initv+0x110>)
 8001960:	f043 0304 	orr.w	r3, r3, #4
 8001964:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001966:	4b3b      	ldr	r3, [pc, #236]	@ (8001a54 <_ZL12MX_GPIO_Initv+0x110>)
 8001968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800196a:	f003 0304 	and.w	r3, r3, #4
 800196e:	60bb      	str	r3, [r7, #8]
 8001970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001972:	4b38      	ldr	r3, [pc, #224]	@ (8001a54 <_ZL12MX_GPIO_Initv+0x110>)
 8001974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001976:	4a37      	ldr	r2, [pc, #220]	@ (8001a54 <_ZL12MX_GPIO_Initv+0x110>)
 8001978:	f043 0301 	orr.w	r3, r3, #1
 800197c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800197e:	4b35      	ldr	r3, [pc, #212]	@ (8001a54 <_ZL12MX_GPIO_Initv+0x110>)
 8001980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	607b      	str	r3, [r7, #4]
 8001988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800198a:	4b32      	ldr	r3, [pc, #200]	@ (8001a54 <_ZL12MX_GPIO_Initv+0x110>)
 800198c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800198e:	4a31      	ldr	r2, [pc, #196]	@ (8001a54 <_ZL12MX_GPIO_Initv+0x110>)
 8001990:	f043 0302 	orr.w	r3, r3, #2
 8001994:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001996:	4b2f      	ldr	r3, [pc, #188]	@ (8001a54 <_ZL12MX_GPIO_Initv+0x110>)
 8001998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	603b      	str	r3, [r7, #0]
 80019a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D0_Pin|D1_Pin|D2_Pin|D3_Pin
 80019a2:	2200      	movs	r2, #0
 80019a4:	f240 11ff 	movw	r1, #511	@ 0x1ff
 80019a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019ac:	f004 f860 	bl	8005a70 <HAL_GPIO_WritePin>
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin
                          |OK_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Backlight_PWM_GPIO_Port, Backlight_PWM_Pin, GPIO_PIN_RESET);
 80019b0:	2200      	movs	r2, #0
 80019b2:	2110      	movs	r1, #16
 80019b4:	4828      	ldr	r0, [pc, #160]	@ (8001a58 <_ZL12MX_GPIO_Initv+0x114>)
 80019b6:	f004 f85b 	bl	8005a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, C_D_Pin|WR_Pin|RD_Pin|Parallel_CS_Pin
 80019ba:	2200      	movs	r2, #0
 80019bc:	f241 0117 	movw	r1, #4119	@ 0x1017
 80019c0:	4826      	ldr	r0, [pc, #152]	@ (8001a5c <_ZL12MX_GPIO_Initv+0x118>)
 80019c2:	f004 f855 	bl	8005a70 <HAL_GPIO_WritePin>
                          |D_C_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Alert1_Pin */
  GPIO_InitStruct.Pin = Alert1_Pin;
 80019c6:	2304      	movs	r3, #4
 80019c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019ca:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80019ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019d0:	2301      	movs	r3, #1
 80019d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Alert1_GPIO_Port, &GPIO_InitStruct);
 80019d4:	f107 030c 	add.w	r3, r7, #12
 80019d8:	4619      	mov	r1, r3
 80019da:	481f      	ldr	r0, [pc, #124]	@ (8001a58 <_ZL12MX_GPIO_Initv+0x114>)
 80019dc:	f003 feb6 	bl	800574c <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin D5_Pin D6_Pin D7_Pin
                           OK_LED_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 80019e0:	f240 13ff 	movw	r3, #511	@ 0x1ff
 80019e4:	60fb      	str	r3, [r7, #12]
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin
                          |OK_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e6:	2301      	movs	r3, #1
 80019e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f2:	f107 030c 	add.w	r3, r7, #12
 80019f6:	4619      	mov	r1, r3
 80019f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019fc:	f003 fea6 	bl	800574c <HAL_GPIO_Init>

  /*Configure GPIO pin : Backlight_PWM_Pin */
  GPIO_InitStruct.Pin = Backlight_PWM_Pin;
 8001a00:	2310      	movs	r3, #16
 8001a02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a04:	2301      	movs	r3, #1
 8001a06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Backlight_PWM_GPIO_Port, &GPIO_InitStruct);
 8001a10:	f107 030c 	add.w	r3, r7, #12
 8001a14:	4619      	mov	r1, r3
 8001a16:	4810      	ldr	r0, [pc, #64]	@ (8001a58 <_ZL12MX_GPIO_Initv+0x114>)
 8001a18:	f003 fe98 	bl	800574c <HAL_GPIO_Init>

  /*Configure GPIO pins : C_D_Pin WR_Pin RD_Pin Parallel_CS_Pin
                           D_C_Pin */
  GPIO_InitStruct.Pin = C_D_Pin|WR_Pin|RD_Pin|Parallel_CS_Pin
 8001a1c:	f241 0317 	movw	r3, #4119	@ 0x1017
 8001a20:	60fb      	str	r3, [r7, #12]
                          |D_C_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a22:	2301      	movs	r3, #1
 8001a24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a2e:	f107 030c 	add.w	r3, r7, #12
 8001a32:	4619      	mov	r1, r3
 8001a34:	4809      	ldr	r0, [pc, #36]	@ (8001a5c <_ZL12MX_GPIO_Initv+0x118>)
 8001a36:	f003 fe89 	bl	800574c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2105      	movs	r1, #5
 8001a3e:	2008      	movs	r0, #8
 8001a40:	f003 fbe4 	bl	800520c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001a44:	2008      	movs	r0, #8
 8001a46:	f003 fbfd 	bl	8005244 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a4a:	bf00      	nop
 8001a4c:	3720      	adds	r7, #32
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40021000 	.word	0x40021000
 8001a58:	48000800 	.word	0x48000800
 8001a5c:	48000400 	.word	0x48000400

08001a60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a04      	ldr	r2, [pc, #16]	@ (8001a80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d101      	bne.n	8001a76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a72:	f001 fbaf 	bl	80031d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40000400 	.word	0x40000400

08001a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a88:	b672      	cpsid	i
}
 8001a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a8c:	bf00      	nop
 8001a8e:	e7fd      	b.n	8001a8c <Error_Handler+0x8>

08001a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a96:	4b11      	ldr	r3, [pc, #68]	@ (8001adc <HAL_MspInit+0x4c>)
 8001a98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a9a:	4a10      	ldr	r2, [pc, #64]	@ (8001adc <HAL_MspInit+0x4c>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8001adc <HAL_MspInit+0x4c>)
 8001aa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	607b      	str	r3, [r7, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aae:	4b0b      	ldr	r3, [pc, #44]	@ (8001adc <HAL_MspInit+0x4c>)
 8001ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ab2:	4a0a      	ldr	r2, [pc, #40]	@ (8001adc <HAL_MspInit+0x4c>)
 8001ab4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ab8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001aba:	4b08      	ldr	r3, [pc, #32]	@ (8001adc <HAL_MspInit+0x4c>)
 8001abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001abe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ac2:	603b      	str	r3, [r7, #0]
 8001ac4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	210f      	movs	r1, #15
 8001aca:	f06f 0001 	mvn.w	r0, #1
 8001ace:	f003 fb9d 	bl	800520c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40021000 	.word	0x40021000

08001ae0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b0ac      	sub	sp, #176	@ 0xb0
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001af8:	f107 0310 	add.w	r3, r7, #16
 8001afc:	228c      	movs	r2, #140	@ 0x8c
 8001afe:	2100      	movs	r1, #0
 8001b00:	4618      	mov	r0, r3
 8001b02:	f00a ff71 	bl	800c9e8 <memset>
  if(hadc->Instance==ADC1)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a35      	ldr	r2, [pc, #212]	@ (8001be0 <HAL_ADC_MspInit+0x100>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d163      	bne.n	8001bd8 <HAL_ADC_MspInit+0xf8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001b10:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001b14:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8001b16:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001b1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b1e:	f107 0310 	add.w	r3, r7, #16
 8001b22:	4618      	mov	r0, r3
 8001b24:	f005 fce6 	bl	80074f4 <HAL_RCCEx_PeriphCLKConfig>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8001b2e:	f7ff ffa9 	bl	8001a84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001b32:	4b2c      	ldr	r3, [pc, #176]	@ (8001be4 <HAL_ADC_MspInit+0x104>)
 8001b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b36:	4a2b      	ldr	r2, [pc, #172]	@ (8001be4 <HAL_ADC_MspInit+0x104>)
 8001b38:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001b3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b3e:	4b29      	ldr	r3, [pc, #164]	@ (8001be4 <HAL_ADC_MspInit+0x104>)
 8001b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b4a:	4b26      	ldr	r3, [pc, #152]	@ (8001be4 <HAL_ADC_MspInit+0x104>)
 8001b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b4e:	4a25      	ldr	r2, [pc, #148]	@ (8001be4 <HAL_ADC_MspInit+0x104>)
 8001b50:	f043 0304 	orr.w	r3, r3, #4
 8001b54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b56:	4b23      	ldr	r3, [pc, #140]	@ (8001be4 <HAL_ADC_MspInit+0x104>)
 8001b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b5a:	f003 0304 	and.w	r3, r3, #4
 8001b5e:	60bb      	str	r3, [r7, #8]
 8001b60:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b62:	2301      	movs	r3, #1
 8001b64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b74:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001b78:	4619      	mov	r1, r3
 8001b7a:	481b      	ldr	r0, [pc, #108]	@ (8001be8 <HAL_ADC_MspInit+0x108>)
 8001b7c:	f003 fde6 	bl	800574c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001b80:	4b1a      	ldr	r3, [pc, #104]	@ (8001bec <HAL_ADC_MspInit+0x10c>)
 8001b82:	4a1b      	ldr	r2, [pc, #108]	@ (8001bf0 <HAL_ADC_MspInit+0x110>)
 8001b84:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001b86:	4b19      	ldr	r3, [pc, #100]	@ (8001bec <HAL_ADC_MspInit+0x10c>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b8c:	4b17      	ldr	r3, [pc, #92]	@ (8001bec <HAL_ADC_MspInit+0x10c>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b92:	4b16      	ldr	r3, [pc, #88]	@ (8001bec <HAL_ADC_MspInit+0x10c>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b98:	4b14      	ldr	r3, [pc, #80]	@ (8001bec <HAL_ADC_MspInit+0x10c>)
 8001b9a:	2280      	movs	r2, #128	@ 0x80
 8001b9c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b9e:	4b13      	ldr	r3, [pc, #76]	@ (8001bec <HAL_ADC_MspInit+0x10c>)
 8001ba0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ba4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ba6:	4b11      	ldr	r3, [pc, #68]	@ (8001bec <HAL_ADC_MspInit+0x10c>)
 8001ba8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001bae:	4b0f      	ldr	r3, [pc, #60]	@ (8001bec <HAL_ADC_MspInit+0x10c>)
 8001bb0:	2220      	movs	r2, #32
 8001bb2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001bb4:	4b0d      	ldr	r3, [pc, #52]	@ (8001bec <HAL_ADC_MspInit+0x10c>)
 8001bb6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001bbc:	480b      	ldr	r0, [pc, #44]	@ (8001bec <HAL_ADC_MspInit+0x10c>)
 8001bbe:	f003 fb4f 	bl	8005260 <HAL_DMA_Init>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <HAL_ADC_MspInit+0xec>
    {
      Error_Handler();
 8001bc8:	f7ff ff5c 	bl	8001a84 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a07      	ldr	r2, [pc, #28]	@ (8001bec <HAL_ADC_MspInit+0x10c>)
 8001bd0:	651a      	str	r2, [r3, #80]	@ 0x50
 8001bd2:	4a06      	ldr	r2, [pc, #24]	@ (8001bec <HAL_ADC_MspInit+0x10c>)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001bd8:	bf00      	nop
 8001bda:	37b0      	adds	r7, #176	@ 0xb0
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	50040000 	.word	0x50040000
 8001be4:	40021000 	.word	0x40021000
 8001be8:	48000800 	.word	0x48000800
 8001bec:	200001a8 	.word	0x200001a8
 8001bf0:	40020008 	.word	0x40020008

08001bf4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b08c      	sub	sp, #48	@ 0x30
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfc:	f107 031c 	add.w	r3, r7, #28
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	60da      	str	r2, [r3, #12]
 8001c0a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a4e      	ldr	r2, [pc, #312]	@ (8001d4c <HAL_CAN_MspInit+0x158>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d143      	bne.n	8001c9e <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001c16:	4b4e      	ldr	r3, [pc, #312]	@ (8001d50 <HAL_CAN_MspInit+0x15c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	4a4c      	ldr	r2, [pc, #304]	@ (8001d50 <HAL_CAN_MspInit+0x15c>)
 8001c1e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001c20:	4b4b      	ldr	r3, [pc, #300]	@ (8001d50 <HAL_CAN_MspInit+0x15c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d10b      	bne.n	8001c40 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001c28:	4b4a      	ldr	r3, [pc, #296]	@ (8001d54 <HAL_CAN_MspInit+0x160>)
 8001c2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c2c:	4a49      	ldr	r2, [pc, #292]	@ (8001d54 <HAL_CAN_MspInit+0x160>)
 8001c2e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c32:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c34:	4b47      	ldr	r3, [pc, #284]	@ (8001d54 <HAL_CAN_MspInit+0x160>)
 8001c36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c3c:	61bb      	str	r3, [r7, #24]
 8001c3e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c40:	4b44      	ldr	r3, [pc, #272]	@ (8001d54 <HAL_CAN_MspInit+0x160>)
 8001c42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c44:	4a43      	ldr	r2, [pc, #268]	@ (8001d54 <HAL_CAN_MspInit+0x160>)
 8001c46:	f043 0302 	orr.w	r3, r3, #2
 8001c4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c4c:	4b41      	ldr	r3, [pc, #260]	@ (8001d54 <HAL_CAN_MspInit+0x160>)
 8001c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	617b      	str	r3, [r7, #20]
 8001c56:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c62:	2301      	movs	r3, #1
 8001c64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c66:	2303      	movs	r3, #3
 8001c68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001c6a:	2309      	movs	r3, #9
 8001c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c6e:	f107 031c 	add.w	r3, r7, #28
 8001c72:	4619      	mov	r1, r3
 8001c74:	4838      	ldr	r0, [pc, #224]	@ (8001d58 <HAL_CAN_MspInit+0x164>)
 8001c76:	f003 fd69 	bl	800574c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c80:	2302      	movs	r3, #2
 8001c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001c8c:	2309      	movs	r3, #9
 8001c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c90:	f107 031c 	add.w	r3, r7, #28
 8001c94:	4619      	mov	r1, r3
 8001c96:	4830      	ldr	r0, [pc, #192]	@ (8001d58 <HAL_CAN_MspInit+0x164>)
 8001c98:	f003 fd58 	bl	800574c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001c9c:	e051      	b.n	8001d42 <HAL_CAN_MspInit+0x14e>
  else if(hcan->Instance==CAN2)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a2e      	ldr	r2, [pc, #184]	@ (8001d5c <HAL_CAN_MspInit+0x168>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d14c      	bne.n	8001d42 <HAL_CAN_MspInit+0x14e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001ca8:	4b2a      	ldr	r3, [pc, #168]	@ (8001d54 <HAL_CAN_MspInit+0x160>)
 8001caa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cac:	4a29      	ldr	r2, [pc, #164]	@ (8001d54 <HAL_CAN_MspInit+0x160>)
 8001cae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001cb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cb4:	4b27      	ldr	r3, [pc, #156]	@ (8001d54 <HAL_CAN_MspInit+0x160>)
 8001cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001cbc:	613b      	str	r3, [r7, #16]
 8001cbe:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001cc0:	4b23      	ldr	r3, [pc, #140]	@ (8001d50 <HAL_CAN_MspInit+0x15c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	4a22      	ldr	r2, [pc, #136]	@ (8001d50 <HAL_CAN_MspInit+0x15c>)
 8001cc8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001cca:	4b21      	ldr	r3, [pc, #132]	@ (8001d50 <HAL_CAN_MspInit+0x15c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d10b      	bne.n	8001cea <HAL_CAN_MspInit+0xf6>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001cd2:	4b20      	ldr	r3, [pc, #128]	@ (8001d54 <HAL_CAN_MspInit+0x160>)
 8001cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd6:	4a1f      	ldr	r2, [pc, #124]	@ (8001d54 <HAL_CAN_MspInit+0x160>)
 8001cd8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001cdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cde:	4b1d      	ldr	r3, [pc, #116]	@ (8001d54 <HAL_CAN_MspInit+0x160>)
 8001ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ce2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cea:	4b1a      	ldr	r3, [pc, #104]	@ (8001d54 <HAL_CAN_MspInit+0x160>)
 8001cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cee:	4a19      	ldr	r2, [pc, #100]	@ (8001d54 <HAL_CAN_MspInit+0x160>)
 8001cf0:	f043 0302 	orr.w	r3, r3, #2
 8001cf4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cf6:	4b17      	ldr	r3, [pc, #92]	@ (8001d54 <HAL_CAN_MspInit+0x160>)
 8001cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	60bb      	str	r3, [r7, #8]
 8001d00:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001d02:	2320      	movs	r3, #32
 8001d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d06:	2302      	movs	r3, #2
 8001d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_CAN2;
 8001d12:	2303      	movs	r3, #3
 8001d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d16:	f107 031c 	add.w	r3, r7, #28
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	480e      	ldr	r0, [pc, #56]	@ (8001d58 <HAL_CAN_MspInit+0x164>)
 8001d1e:	f003 fd15 	bl	800574c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d22:	2340      	movs	r3, #64	@ 0x40
 8001d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d26:	2302      	movs	r3, #2
 8001d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN2;
 8001d32:	2308      	movs	r3, #8
 8001d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d36:	f107 031c 	add.w	r3, r7, #28
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4806      	ldr	r0, [pc, #24]	@ (8001d58 <HAL_CAN_MspInit+0x164>)
 8001d3e:	f003 fd05 	bl	800574c <HAL_GPIO_Init>
}
 8001d42:	bf00      	nop
 8001d44:	3730      	adds	r7, #48	@ 0x30
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40006400 	.word	0x40006400
 8001d50:	20000334 	.word	0x20000334
 8001d54:	40021000 	.word	0x40021000
 8001d58:	48000400 	.word	0x48000400
 8001d5c:	40006800 	.word	0x40006800

08001d60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b0ac      	sub	sp, #176	@ 0xb0
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d68:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	60da      	str	r2, [r3, #12]
 8001d76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d78:	f107 0310 	add.w	r3, r7, #16
 8001d7c:	228c      	movs	r2, #140	@ 0x8c
 8001d7e:	2100      	movs	r1, #0
 8001d80:	4618      	mov	r0, r3
 8001d82:	f00a fe31 	bl	800c9e8 <memset>
  if(hi2c->Instance==I2C4)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a22      	ldr	r2, [pc, #136]	@ (8001e14 <HAL_I2C_MspInit+0xb4>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d13c      	bne.n	8001e0a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001d90:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001d94:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001d96:	2300      	movs	r3, #0
 8001d98:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d9a:	f107 0310 	add.w	r3, r7, #16
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f005 fba8 	bl	80074f4 <HAL_RCCEx_PeriphCLKConfig>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001daa:	f7ff fe6b 	bl	8001a84 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dae:	4b1a      	ldr	r3, [pc, #104]	@ (8001e18 <HAL_I2C_MspInit+0xb8>)
 8001db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001db2:	4a19      	ldr	r2, [pc, #100]	@ (8001e18 <HAL_I2C_MspInit+0xb8>)
 8001db4:	f043 0302 	orr.w	r3, r3, #2
 8001db8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dba:	4b17      	ldr	r3, [pc, #92]	@ (8001e18 <HAL_I2C_MspInit+0xb8>)
 8001dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PB10     ------> I2C4_SCL
    PB11     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001dc6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001dca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dce:	2312      	movs	r3, #18
 8001dd0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 8001de0:	2303      	movs	r3, #3
 8001de2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001dea:	4619      	mov	r1, r3
 8001dec:	480b      	ldr	r0, [pc, #44]	@ (8001e1c <HAL_I2C_MspInit+0xbc>)
 8001dee:	f003 fcad 	bl	800574c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001df2:	4b09      	ldr	r3, [pc, #36]	@ (8001e18 <HAL_I2C_MspInit+0xb8>)
 8001df4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001df6:	4a08      	ldr	r2, [pc, #32]	@ (8001e18 <HAL_I2C_MspInit+0xb8>)
 8001df8:	f043 0302 	orr.w	r3, r3, #2
 8001dfc:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001dfe:	4b06      	ldr	r3, [pc, #24]	@ (8001e18 <HAL_I2C_MspInit+0xb8>)
 8001e00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	60bb      	str	r3, [r7, #8]
 8001e08:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 8001e0a:	bf00      	nop
 8001e0c:	37b0      	adds	r7, #176	@ 0xb0
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40008400 	.word	0x40008400
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	48000400 	.word	0x48000400

08001e20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b0ac      	sub	sp, #176	@ 0xb0
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e28:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]
 8001e36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e38:	f107 0310 	add.w	r3, r7, #16
 8001e3c:	228c      	movs	r2, #140	@ 0x8c
 8001e3e:	2100      	movs	r1, #0
 8001e40:	4618      	mov	r0, r3
 8001e42:	f00a fdd1 	bl	800c9e8 <memset>
  if(huart->Instance==UART4)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a25      	ldr	r2, [pc, #148]	@ (8001ee0 <HAL_UART_MspInit+0xc0>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d143      	bne.n	8001ed8 <HAL_UART_MspInit+0xb8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001e50:	2308      	movs	r3, #8
 8001e52:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001e54:	2300      	movs	r3, #0
 8001e56:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e58:	f107 0310 	add.w	r3, r7, #16
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f005 fb49 	bl	80074f4 <HAL_RCCEx_PeriphCLKConfig>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e68:	f7ff fe0c 	bl	8001a84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001e6c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee4 <HAL_UART_MspInit+0xc4>)
 8001e6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e70:	4a1c      	ldr	r2, [pc, #112]	@ (8001ee4 <HAL_UART_MspInit+0xc4>)
 8001e72:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001e76:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e78:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee4 <HAL_UART_MspInit+0xc4>)
 8001e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e7c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e84:	4b17      	ldr	r3, [pc, #92]	@ (8001ee4 <HAL_UART_MspInit+0xc4>)
 8001e86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e88:	4a16      	ldr	r2, [pc, #88]	@ (8001ee4 <HAL_UART_MspInit+0xc4>)
 8001e8a:	f043 0304 	orr.w	r3, r3, #4
 8001e8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e90:	4b14      	ldr	r3, [pc, #80]	@ (8001ee4 <HAL_UART_MspInit+0xc4>)
 8001e92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e94:	f003 0304 	and.w	r3, r3, #4
 8001e98:	60bb      	str	r3, [r7, #8]
 8001e9a:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e9c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001ea0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001eb6:	2308      	movs	r3, #8
 8001eb8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ebc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4809      	ldr	r0, [pc, #36]	@ (8001ee8 <HAL_UART_MspInit+0xc8>)
 8001ec4:	f003 fc42 	bl	800574c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001ec8:	2200      	movs	r2, #0
 8001eca:	2105      	movs	r1, #5
 8001ecc:	2034      	movs	r0, #52	@ 0x34
 8001ece:	f003 f99d 	bl	800520c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001ed2:	2034      	movs	r0, #52	@ 0x34
 8001ed4:	f003 f9b6 	bl	8005244 <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 8001ed8:	bf00      	nop
 8001eda:	37b0      	adds	r7, #176	@ 0xb0
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40004c00 	.word	0x40004c00
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	48000800 	.word	0x48000800

08001eec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08e      	sub	sp, #56	@ 0x38
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001efa:	4b34      	ldr	r3, [pc, #208]	@ (8001fcc <HAL_InitTick+0xe0>)
 8001efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001efe:	4a33      	ldr	r2, [pc, #204]	@ (8001fcc <HAL_InitTick+0xe0>)
 8001f00:	f043 0302 	orr.w	r3, r3, #2
 8001f04:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f06:	4b31      	ldr	r3, [pc, #196]	@ (8001fcc <HAL_InitTick+0xe0>)
 8001f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f12:	f107 0210 	add.w	r2, r7, #16
 8001f16:	f107 0314 	add.w	r3, r7, #20
 8001f1a:	4611      	mov	r1, r2
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f005 fa57 	bl	80073d0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001f22:	6a3b      	ldr	r3, [r7, #32]
 8001f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d103      	bne.n	8001f34 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001f2c:	f005 fa24 	bl	8007378 <HAL_RCC_GetPCLK1Freq>
 8001f30:	6378      	str	r0, [r7, #52]	@ 0x34
 8001f32:	e004      	b.n	8001f3e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001f34:	f005 fa20 	bl	8007378 <HAL_RCC_GetPCLK1Freq>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f40:	4a23      	ldr	r2, [pc, #140]	@ (8001fd0 <HAL_InitTick+0xe4>)
 8001f42:	fba2 2303 	umull	r2, r3, r2, r3
 8001f46:	0c9b      	lsrs	r3, r3, #18
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001f4c:	4b21      	ldr	r3, [pc, #132]	@ (8001fd4 <HAL_InitTick+0xe8>)
 8001f4e:	4a22      	ldr	r2, [pc, #136]	@ (8001fd8 <HAL_InitTick+0xec>)
 8001f50:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8001f52:	4b20      	ldr	r3, [pc, #128]	@ (8001fd4 <HAL_InitTick+0xe8>)
 8001f54:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f58:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8001f5a:	4a1e      	ldr	r2, [pc, #120]	@ (8001fd4 <HAL_InitTick+0xe8>)
 8001f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f5e:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001f60:	4b1c      	ldr	r3, [pc, #112]	@ (8001fd4 <HAL_InitTick+0xe8>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f66:	4b1b      	ldr	r3, [pc, #108]	@ (8001fd4 <HAL_InitTick+0xe8>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f6c:	4b19      	ldr	r3, [pc, #100]	@ (8001fd4 <HAL_InitTick+0xe8>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8001f72:	4818      	ldr	r0, [pc, #96]	@ (8001fd4 <HAL_InitTick+0xe8>)
 8001f74:	f005 ff88 	bl	8007e88 <HAL_TIM_Base_Init>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001f7e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d11b      	bne.n	8001fbe <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8001f86:	4813      	ldr	r0, [pc, #76]	@ (8001fd4 <HAL_InitTick+0xe8>)
 8001f88:	f005 ffe0 	bl	8007f4c <HAL_TIM_Base_Start_IT>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001f92:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d111      	bne.n	8001fbe <HAL_InitTick+0xd2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f9a:	201d      	movs	r0, #29
 8001f9c:	f003 f952 	bl	8005244 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b0f      	cmp	r3, #15
 8001fa4:	d808      	bhi.n	8001fb8 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	6879      	ldr	r1, [r7, #4]
 8001faa:	201d      	movs	r0, #29
 8001fac:	f003 f92e 	bl	800520c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fb0:	4a0a      	ldr	r2, [pc, #40]	@ (8001fdc <HAL_InitTick+0xf0>)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	e002      	b.n	8001fbe <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001fbe:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3738      	adds	r7, #56	@ 0x38
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	431bde83 	.word	0x431bde83
 8001fd4:	20000338 	.word	0x20000338
 8001fd8:	40000400 	.word	0x40000400
 8001fdc:	20000004 	.word	0x20000004

08001fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fe4:	bf00      	nop
 8001fe6:	e7fd      	b.n	8001fe4 <NMI_Handler+0x4>

08001fe8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fec:	bf00      	nop
 8001fee:	e7fd      	b.n	8001fec <HardFault_Handler+0x4>

08001ff0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ff4:	bf00      	nop
 8001ff6:	e7fd      	b.n	8001ff4 <MemManage_Handler+0x4>

08001ff8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ffc:	bf00      	nop
 8001ffe:	e7fd      	b.n	8001ffc <BusFault_Handler+0x4>

08002000 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002004:	bf00      	nop
 8002006:	e7fd      	b.n	8002004 <UsageFault_Handler+0x4>

08002008 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Alert1_Pin);
 800201a:	2004      	movs	r0, #4
 800201c:	f003 fd5a 	bl	8005ad4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002020:	bf00      	nop
 8002022:	bd80      	pop	{r7, pc}

08002024 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002028:	4802      	ldr	r0, [pc, #8]	@ (8002034 <DMA1_Channel1_IRQHandler+0x10>)
 800202a:	f003 fab0 	bl	800558e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	200001a8 	.word	0x200001a8

08002038 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800203c:	4802      	ldr	r0, [pc, #8]	@ (8002048 <TIM3_IRQHandler+0x10>)
 800203e:	f005 fff5 	bl	800802c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	20000338 	.word	0x20000338

0800204c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002050:	4802      	ldr	r0, [pc, #8]	@ (800205c <UART4_IRQHandler+0x10>)
 8002052:	f006 fa79 	bl	8008548 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000294 	.word	0x20000294

08002060 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002064:	4b06      	ldr	r3, [pc, #24]	@ (8002080 <SystemInit+0x20>)
 8002066:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800206a:	4a05      	ldr	r2, [pc, #20]	@ (8002080 <SystemInit+0x20>)
 800206c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002070:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <_ZN7ILI9341C1Ess>:
/**
  * @brief   Constructor for ILI9341 class
  * @param   w: width of LCD
  * @param   h: height of LCD
  */
ILI9341::ILI9341(int16_t w, int16_t h):WIDTH(w),HEIGHT(h)
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	807b      	strh	r3, [r7, #2]
 8002090:	4613      	mov	r3, r2
 8002092:	803b      	strh	r3, [r7, #0]
 8002094:	4a45      	ldr	r2, [pc, #276]	@ (80021ac <_ZN7ILI9341C1Ess+0x128>)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	887a      	ldrh	r2, [r7, #2]
 800209e:	809a      	strh	r2, [r3, #4]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	883a      	ldrh	r2, [r7, #0]
 80020a4:	80da      	strh	r2, [r3, #6]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	81da      	strh	r2, [r3, #14]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	821a      	strh	r2, [r3, #16]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80020b8:	621a      	str	r2, [r3, #32]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80020c0:	625a      	str	r2, [r3, #36]	@ 0x24
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80020c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80020d0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80020d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80020e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80020e8:	639a      	str	r2, [r3, #56]	@ 0x38
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80020f0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2204      	movs	r2, #4
 80020f6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a2c      	ldr	r2, [pc, #176]	@ (80021b0 <_ZN7ILI9341C1Ess+0x12c>)
 80020fe:	645a      	str	r2, [r3, #68]	@ 0x44
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2202      	movs	r2, #2
 8002104:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a29      	ldr	r2, [pc, #164]	@ (80021b0 <_ZN7ILI9341C1Ess+0x12c>)
 800210c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2201      	movs	r2, #1
 8002112:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a25      	ldr	r2, [pc, #148]	@ (80021b0 <_ZN7ILI9341C1Ess+0x12c>)
 800211a:	655a      	str	r2, [r3, #84]	@ 0x54
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002122:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a21      	ldr	r2, [pc, #132]	@ (80021b0 <_ZN7ILI9341C1Ess+0x12c>)
 800212a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2220      	movs	r2, #32
 8002130:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a1f      	ldr	r2, [pc, #124]	@ (80021b4 <_ZN7ILI9341C1Ess+0x130>)
 8002138:	665a      	str	r2, [r3, #100]	@ 0x64
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2210      	movs	r2, #16
 800213e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a1b      	ldr	r2, [pc, #108]	@ (80021b4 <_ZN7ILI9341C1Ess+0x130>)
 8002146:	66da      	str	r2, [r3, #108]	@ 0x6c
{
  text_size_ = 1;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	819a      	strh	r2, [r3, #12]
  width_ = WIDTH;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	811a      	strh	r2, [r3, #8]
  height_ = HEIGHT;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	815a      	strh	r2, [r3, #10]
  rotation = 0;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	771a      	strb	r2, [r3, #28]
  cursor_y = cursor_x = 0;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	825a      	strh	r2, [r3, #18]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	829a      	strh	r2, [r3, #20]
  textsize_x = textsize_y = 1;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	76da      	strb	r2, [r3, #27]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	7eda      	ldrb	r2, [r3, #27]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	769a      	strb	r2, [r3, #26]
  textcolor = textbgcolor = 0xFFFF;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800218c:	831a      	strh	r2, [r3, #24]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	8b1a      	ldrh	r2, [r3, #24]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	82da      	strh	r2, [r3, #22]
  wrap = true;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2201      	movs	r2, #1
 800219a:	775a      	strb	r2, [r3, #29]
}
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4618      	mov	r0, r3
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	0800d29c 	.word	0x0800d29c
 80021b0:	48000400 	.word	0x48000400
 80021b4:	48000800 	.word	0x48000800

080021b8 <_ZN7ILI9341D1Ev>:

ILI9341::~ILI9341()
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	4a04      	ldr	r2, [pc, #16]	@ (80021d4 <_ZN7ILI9341D1Ev+0x1c>)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	601a      	str	r2, [r3, #0]
{
  // TODO Auto-generated destructor stub
}
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4618      	mov	r0, r3
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	0800d29c 	.word	0x0800d29c

080021d8 <_ZN7ILI9341D0Ev>:
ILI9341::~ILI9341()
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
}
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f7ff ffe9 	bl	80021b8 <_ZN7ILI9341D1Ev>
 80021e6:	2170      	movs	r1, #112	@ 0x70
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f00a fbe5 	bl	800c9b8 <_ZdlPvj>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4618      	mov	r0, r3
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <_ZN7ILI93414InitEv>:

/**
  * @brief  Initialize the LCD.
  */
void ILI9341::Init()
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b088      	sub	sp, #32
 80021fc:	af02      	add	r7, sp, #8
 80021fe:	6078      	str	r0, [r7, #4]
  // Write all control signals high
  HAL_GPIO_WritePin(Backlight_PWM_GPIO_Port_, Backlight_PWM_Pin_, GPIO_PIN_SET);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800220a:	2201      	movs	r2, #1
 800220c:	4619      	mov	r1, r3
 800220e:	f003 fc2f 	bl	8005a70 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_SET);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800221c:	2201      	movs	r2, #1
 800221e:	4619      	mov	r1, r3
 8002220:	f003 fc26 	bl	8005a70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_SET);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800222e:	2201      	movs	r2, #1
 8002230:	4619      	mov	r1, r3
 8002232:	f003 fc1d 	bl	8005a70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_SET);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8002240:	2201      	movs	r2, #1
 8002242:	4619      	mov	r1, r3
 8002244:	f003 fc14 	bl	8005a70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_READ_GPIO_Port_, LCD_READ_Pin_, GPIO_PIN_SET);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002252:	2201      	movs	r2, #1
 8002254:	4619      	mov	r1, r3
 8002256:	f003 fc0b 	bl	8005a70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port_, LCD_RST_Pin_, GPIO_PIN_SET);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8002264:	2201      	movs	r2, #1
 8002266:	4619      	mov	r1, r3
 8002268:	f003 fc02 	bl	8005a70 <HAL_GPIO_WritePin>

  // Hold reset pin
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port_, LCD_RST_Pin_, GPIO_PIN_RESET);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8002276:	2200      	movs	r2, #0
 8002278:	4619      	mov	r1, r3
 800227a:	f003 fbf9 	bl	8005a70 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800227e:	200a      	movs	r0, #10
 8002280:	f000 ffc8 	bl	8003214 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port_, LCD_RST_Pin_, GPIO_PIN_SET);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800228e:	2201      	movs	r2, #1
 8002290:	4619      	mov	r1, r3
 8002292:	f003 fbed 	bl	8005a70 <HAL_GPIO_WritePin>

  // enable chip select -> LOW
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_RESET);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80022a0:	2200      	movs	r2, #0
 80022a2:	4619      	mov	r1, r3
 80022a4:	f003 fbe4 	bl	8005a70 <HAL_GPIO_WritePin>

  // Soft reset the LCD
  TransmitCmd(ILI9341_SWRESET);
 80022a8:	2101      	movs	r1, #1
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f8c4 	bl	8002438 <_ZN7ILI934111TransmitCmdEh>
  Transmit8bitData(0x00);
 80022b0:	2100      	movs	r1, #0
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f8d8 	bl	8002468 <_ZN7ILI934116Transmit8bitDataEh>
  HAL_Delay(50);
 80022b8:	2032      	movs	r0, #50	@ 0x32
 80022ba:	f000 ffab 	bl	8003214 <HAL_Delay>


  uint8_t cmd, x, numArgs;
  const uint8_t *addr = initcmd;
 80022be:	4b27      	ldr	r3, [pc, #156]	@ (800235c <_ZN7ILI93414InitEv+0x164>)
 80022c0:	613b      	str	r3, [r7, #16]
  while((cmd = *(addr++)) > 0)
 80022c2:	e027      	b.n	8002314 <_ZN7ILI93414InitEv+0x11c>
  {
    x = *(addr++);
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1c5a      	adds	r2, r3, #1
 80022c8:	613a      	str	r2, [r7, #16]
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	73bb      	strb	r3, [r7, #14]
    numArgs = x & 0x7F;
 80022ce:	7bbb      	ldrb	r3, [r7, #14]
 80022d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80022d4:	75fb      	strb	r3, [r7, #23]
    TransmitCmd(cmd);
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
 80022d8:	4619      	mov	r1, r3
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f8ac 	bl	8002438 <_ZN7ILI934111TransmitCmdEh>
    while(numArgs--)
 80022e0:	e007      	b.n	80022f2 <_ZN7ILI93414InitEv+0xfa>
    {
      Transmit8bitData(*(addr++));
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1c5a      	adds	r2, r3, #1
 80022e6:	613a      	str	r2, [r7, #16]
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	4619      	mov	r1, r3
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 f8bb 	bl	8002468 <_ZN7ILI934116Transmit8bitDataEh>
    while(numArgs--)
 80022f2:	7dfb      	ldrb	r3, [r7, #23]
 80022f4:	1e5a      	subs	r2, r3, #1
 80022f6:	75fa      	strb	r2, [r7, #23]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	bf14      	ite	ne
 80022fc:	2301      	movne	r3, #1
 80022fe:	2300      	moveq	r3, #0
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1ed      	bne.n	80022e2 <_ZN7ILI93414InitEv+0xea>
    }
    if(x & 0x80)
 8002306:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800230a:	2b00      	cmp	r3, #0
 800230c:	da02      	bge.n	8002314 <_ZN7ILI93414InitEv+0x11c>
    {
      HAL_Delay(150);
 800230e:	2096      	movs	r0, #150	@ 0x96
 8002310:	f000 ff80 	bl	8003214 <HAL_Delay>
  while((cmd = *(addr++)) > 0)
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1c5a      	adds	r2, r3, #1
 8002318:	613a      	str	r2, [r7, #16]
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	73fb      	strb	r3, [r7, #15]
 800231e:	7bfb      	ldrb	r3, [r7, #15]
 8002320:	2b00      	cmp	r3, #0
 8002322:	bf14      	ite	ne
 8002324:	2301      	movne	r3, #1
 8002326:	2300      	moveq	r3, #0
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1ca      	bne.n	80022c4 <_ZN7ILI93414InitEv+0xcc>
    }
  }

  SetWindow(0, 0, width_-1, height_-1);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002334:	b29b      	uxth	r3, r3
 8002336:	3b01      	subs	r3, #1
 8002338:	b29a      	uxth	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002340:	b29b      	uxth	r3, r3
 8002342:	3b01      	subs	r3, #1
 8002344:	b29b      	uxth	r3, r3
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	4613      	mov	r3, r2
 800234a:	2200      	movs	r2, #0
 800234c:	2100      	movs	r1, #0
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 f8f0 	bl	8002534 <_ZN7ILI93419SetWindowEtttt>
}
 8002354:	bf00      	nop
 8002356:	3718      	adds	r7, #24
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	0800d270 	.word	0x0800d270

08002360 <_ZN7ILI93415WriteEh>:

/**
  * @brief  Write data to LCD bus.
  */
inline void ILI9341::Write(uint8_t data)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	460b      	mov	r3, r1
 800236a:	70fb      	strb	r3, [r7, #3]
  // Put data on Bus
#if UI_USE_HAL
  HAL_GPIO_WritePin(LCD_DATA0_GPIO_Port_, LCD_DATA0_Pin_, static_cast<GPIO_PinState>(data & 0x01U) );
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002370:	78fb      	ldrb	r3, [r7, #3]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	b2db      	uxtb	r3, r3
 8002378:	461a      	mov	r2, r3
 800237a:	2101      	movs	r1, #1
 800237c:	f003 fb78 	bl	8005a70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA1_GPIO_Port_, LCD_DATA1_Pin_, static_cast<GPIO_PinState>(data & 0x02U) );
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002384:	78fb      	ldrb	r3, [r7, #3]
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	b2db      	uxtb	r3, r3
 800238c:	461a      	mov	r2, r3
 800238e:	2102      	movs	r1, #2
 8002390:	f003 fb6e 	bl	8005a70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA2_GPIO_Port_, LCD_DATA2_Pin_, static_cast<GPIO_PinState>(data & 0x04U) );
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8002398:	78fb      	ldrb	r3, [r7, #3]
 800239a:	f003 0304 	and.w	r3, r3, #4
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	461a      	mov	r2, r3
 80023a2:	2104      	movs	r1, #4
 80023a4:	f003 fb64 	bl	8005a70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA3_GPIO_Port_, LCD_DATA3_Pin_, static_cast<GPIO_PinState>(data & 0x08U) );
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80023ac:	78fb      	ldrb	r3, [r7, #3]
 80023ae:	f003 0308 	and.w	r3, r3, #8
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	461a      	mov	r2, r3
 80023b6:	2108      	movs	r1, #8
 80023b8:	f003 fb5a 	bl	8005a70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA4_GPIO_Port_, LCD_DATA4_Pin_, static_cast<GPIO_PinState>(data & 0x10U) );
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80023c0:	78fb      	ldrb	r3, [r7, #3]
 80023c2:	f003 0310 	and.w	r3, r3, #16
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	461a      	mov	r2, r3
 80023ca:	2110      	movs	r1, #16
 80023cc:	f003 fb50 	bl	8005a70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA5_GPIO_Port_, LCD_DATA5_Pin_, static_cast<GPIO_PinState>(data & 0x20U) );
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80023d4:	78fb      	ldrb	r3, [r7, #3]
 80023d6:	f003 0320 	and.w	r3, r3, #32
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	461a      	mov	r2, r3
 80023de:	2120      	movs	r1, #32
 80023e0:	f003 fb46 	bl	8005a70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA6_GPIO_Port_, LCD_DATA6_Pin_, static_cast<GPIO_PinState>(data & 0x40U) );
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80023e8:	78fb      	ldrb	r3, [r7, #3]
 80023ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	461a      	mov	r2, r3
 80023f2:	2140      	movs	r1, #64	@ 0x40
 80023f4:	f003 fb3c 	bl	8005a70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DATA7_GPIO_Port_, LCD_DATA7_Pin_, static_cast<GPIO_PinState>(data & 0x80U) );
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a18      	ldr	r0, [r3, #32]
 80023fc:	78fb      	ldrb	r3, [r7, #3]
 80023fe:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002402:	b2db      	uxtb	r3, r3
 8002404:	461a      	mov	r2, r3
 8002406:	2180      	movs	r1, #128	@ 0x80
 8002408:	f003 fb32 	bl	8005a70 <HAL_GPIO_WritePin>
  // Pulse Write
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_RESET);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8002416:	2200      	movs	r2, #0
 8002418:	4619      	mov	r1, r3
 800241a:	f003 fb29 	bl	8005a70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_SET);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8002428:	2201      	movs	r2, #1
 800242a:	4619      	mov	r1, r3
 800242c:	f003 fb20 	bl	8005a70 <HAL_GPIO_WritePin>
  // Pulse Write
  LCD_WRITE_GPIO_Port_->BSRR = LCD_WRITE_Pin_; // changed from brr to bsrr... ok?
  LCD_WRITE_GPIO_Port_->BSRR = (uint32_t)LCD_WRITE_Pin_ << 16U;
#endif

}
 8002430:	bf00      	nop
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <_ZN7ILI934111TransmitCmdEh>:
/**
  * @brief  Sends 8-bit command to LCD.
  * @param  cmd: 8-bit command to be sent.
  */
void ILI9341::TransmitCmd(uint8_t cmd)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	70fb      	strb	r3, [r7, #3]
  // D/C -> LOW
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_RESET);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800244e:	2200      	movs	r2, #0
 8002450:	4619      	mov	r1, r3
 8002452:	f003 fb0d 	bl	8005a70 <HAL_GPIO_WritePin>

  Write(cmd);
 8002456:	78fb      	ldrb	r3, [r7, #3]
 8002458:	4619      	mov	r1, r3
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7ff ff80 	bl	8002360 <_ZN7ILI93415WriteEh>

  // TODO: Can this line be removed?
  // D/C -> HIGH
  // HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_SET);
}
 8002460:	bf00      	nop
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <_ZN7ILI934116Transmit8bitDataEh>:
/**
  * @brief  Sends 8-bit data to LCD.
  * @param  data: 8-bit data to be sent.
  */
void ILI9341::Transmit8bitData(uint8_t data)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	460b      	mov	r3, r1
 8002472:	70fb      	strb	r3, [r7, #3]
  // D/C -> High
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_SET);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800247e:	2201      	movs	r2, #1
 8002480:	4619      	mov	r1, r3
 8002482:	f003 faf5 	bl	8005a70 <HAL_GPIO_WritePin>

  Write(data);
 8002486:	78fb      	ldrb	r3, [r7, #3]
 8002488:	4619      	mov	r1, r3
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7ff ff68 	bl	8002360 <_ZN7ILI93415WriteEh>
}
 8002490:	bf00      	nop
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <_ZN7ILI934117Transmit16bitDataEt>:
/**
  * @brief  Sends 16-bit data to LCD.
  * @param  data: 16-bit data to be sent to LCD.
  */
void ILI9341::Transmit16bitData(uint16_t data)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	460b      	mov	r3, r1
 80024a2:	807b      	strh	r3, [r7, #2]
  // D/C -> High
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_SET);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024ae:	2201      	movs	r2, #1
 80024b0:	4619      	mov	r1, r3
 80024b2:	f003 fadd 	bl	8005a70 <HAL_GPIO_WritePin>

  Write(static_cast<uint8_t>(data >> 8));
 80024b6:	887b      	ldrh	r3, [r7, #2]
 80024b8:	0a1b      	lsrs	r3, r3, #8
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	4619      	mov	r1, r3
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f7ff ff4d 	bl	8002360 <_ZN7ILI93415WriteEh>
  Write(static_cast<uint8_t>(data >> 0));
 80024c6:	887b      	ldrh	r3, [r7, #2]
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	4619      	mov	r1, r3
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f7ff ff47 	bl	8002360 <_ZN7ILI93415WriteEh>

}
 80024d2:	bf00      	nop
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <_ZN7ILI934117Transmit32bitDataEm>:
/**
  * @brief  Sends 32-bit data to LCD.
  * @param  data: 32-bit data to be sent to LCD.
  */
void ILI9341::Transmit32bitData(uint32_t data)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b082      	sub	sp, #8
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
 80024e2:	6039      	str	r1, [r7, #0]
  // D/C -> High
  HAL_GPIO_WritePin(LCD_CD_GPIO_Port_, LCD_CD_Pin_, GPIO_PIN_SET);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024ee:	2201      	movs	r2, #1
 80024f0:	4619      	mov	r1, r3
 80024f2:	f003 fabd 	bl	8005a70 <HAL_GPIO_WritePin>

  Write(static_cast<uint8_t>(data >> 24));
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	0e1b      	lsrs	r3, r3, #24
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	4619      	mov	r1, r3
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f7ff ff2e 	bl	8002360 <_ZN7ILI93415WriteEh>
  Write(static_cast<uint8_t>(data >> 16));
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	0c1b      	lsrs	r3, r3, #16
 8002508:	b2db      	uxtb	r3, r3
 800250a:	4619      	mov	r1, r3
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f7ff ff27 	bl	8002360 <_ZN7ILI93415WriteEh>
  Write(static_cast<uint8_t>(data >> 8 ));
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	0a1b      	lsrs	r3, r3, #8
 8002516:	b2db      	uxtb	r3, r3
 8002518:	4619      	mov	r1, r3
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7ff ff20 	bl	8002360 <_ZN7ILI93415WriteEh>
  Write(static_cast<uint8_t>(data >> 0 ));
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	b2db      	uxtb	r3, r3
 8002524:	4619      	mov	r1, r3
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7ff ff1a 	bl	8002360 <_ZN7ILI93415WriteEh>

}
 800252c:	bf00      	nop
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <_ZN7ILI93419SetWindowEtttt>:
  * @param  xe: x end coordinate. xe > xs.
  * @param  ye: y end coordinate. ye > ys.
  * @retval ILI9341_SUCCESS or ILI9341_ERROR.
  */
char ILI9341::SetWindow (uint16_t xs, uint16_t ys, uint16_t xe, uint16_t ye)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	4608      	mov	r0, r1
 800253e:	4611      	mov	r1, r2
 8002540:	461a      	mov	r2, r3
 8002542:	4603      	mov	r3, r0
 8002544:	817b      	strh	r3, [r7, #10]
 8002546:	460b      	mov	r3, r1
 8002548:	813b      	strh	r3, [r7, #8]
 800254a:	4613      	mov	r3, r2
 800254c:	80fb      	strh	r3, [r7, #6]
  // enable chip select -> LOW
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_RESET);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002558:	2200      	movs	r2, #0
 800255a:	4619      	mov	r1, r3
 800255c:	f003 fa88 	bl	8005a70 <HAL_GPIO_WritePin>

  // check if coordinates is out of range
  // TODO: Use >=, <= instead of >, < for width_ and height_?
  if ((xs > xe) || (xe > width_) ||
 8002560:	897a      	ldrh	r2, [r7, #10]
 8002562:	88fb      	ldrh	r3, [r7, #6]
 8002564:	429a      	cmp	r2, r3
 8002566:	d80f      	bhi.n	8002588 <_ZN7ILI93419SetWindowEtttt+0x54>
 8002568:	88fb      	ldrh	r3, [r7, #6]
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002570:	4293      	cmp	r3, r2
 8002572:	dc09      	bgt.n	8002588 <_ZN7ILI93419SetWindowEtttt+0x54>
 8002574:	893a      	ldrh	r2, [r7, #8]
 8002576:	8b3b      	ldrh	r3, [r7, #24]
 8002578:	429a      	cmp	r2, r3
 800257a:	d805      	bhi.n	8002588 <_ZN7ILI93419SetWindowEtttt+0x54>
      (ys > ye) || (ye > height_))
 800257c:	8b3b      	ldrh	r3, [r7, #24]
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8002584:	4293      	cmp	r3, r2
 8002586:	dd01      	ble.n	800258c <_ZN7ILI93419SetWindowEtttt+0x58>
  {
    // out of range
    return ILI9341_ERROR;
 8002588:	2300      	movs	r3, #0
 800258a:	e021      	b.n	80025d0 <_ZN7ILI93419SetWindowEtttt+0x9c>
  }

  // set column
  TransmitCmd(ILI9341_CASET);
 800258c:	212a      	movs	r1, #42	@ 0x2a
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	f7ff ff52 	bl	8002438 <_ZN7ILI934111TransmitCmdEh>
  // set column -> set column
  Transmit32bitData(((uint32_t) xs << 16) | xe);
 8002594:	897b      	ldrh	r3, [r7, #10]
 8002596:	041a      	lsls	r2, r3, #16
 8002598:	88fb      	ldrh	r3, [r7, #6]
 800259a:	4313      	orrs	r3, r2
 800259c:	4619      	mov	r1, r3
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f7ff ff9b 	bl	80024da <_ZN7ILI934117Transmit32bitDataEm>
  // set page
  TransmitCmd(ILI9341_PASET);
 80025a4:	212b      	movs	r1, #43	@ 0x2b
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f7ff ff46 	bl	8002438 <_ZN7ILI934111TransmitCmdEh>
  // set page -> high byte first
  Transmit32bitData(((uint32_t) ys << 16) | ye);
 80025ac:	893b      	ldrh	r3, [r7, #8]
 80025ae:	041a      	lsls	r2, r3, #16
 80025b0:	8b3b      	ldrh	r3, [r7, #24]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	4619      	mov	r1, r3
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f7ff ff8f 	bl	80024da <_ZN7ILI934117Transmit32bitDataEm>

  // disable chip select -> HIGH
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_SET);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80025c6:	2201      	movs	r2, #1
 80025c8:	4619      	mov	r1, r3
 80025ca:	f003 fa51 	bl	8005a70 <HAL_GPIO_WritePin>
  // success
  return ILI9341_SUCCESS;
 80025ce:	2301      	movs	r3, #1
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <_ZN7ILI93419DrawPixelEttt>:
  * @param  y: y coordinate.
  * @param  color: 16-bit color.
  * @retval ILI9341_SUCCESS or ILI9341_ERROR.
  */
char ILI9341::DrawPixel (uint16_t x, uint16_t y, uint16_t color)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af02      	add	r7, sp, #8
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	4608      	mov	r0, r1
 80025e2:	4611      	mov	r1, r2
 80025e4:	461a      	mov	r2, r3
 80025e6:	4603      	mov	r3, r0
 80025e8:	817b      	strh	r3, [r7, #10]
 80025ea:	460b      	mov	r3, r1
 80025ec:	813b      	strh	r3, [r7, #8]
 80025ee:	4613      	mov	r3, r2
 80025f0:	80fb      	strh	r3, [r7, #6]
  // check dimension
  if ((x > width_) || (y > height_)) {
 80025f2:	897b      	ldrh	r3, [r7, #10]
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80025fa:	4293      	cmp	r3, r2
 80025fc:	dc05      	bgt.n	800260a <_ZN7ILI93419DrawPixelEttt+0x32>
 80025fe:	893b      	ldrh	r3, [r7, #8]
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8002606:	4293      	cmp	r3, r2
 8002608:	dd01      	ble.n	800260e <_ZN7ILI93419DrawPixelEttt+0x36>
    // error
    return ILI9341_ERROR;
 800260a:	2300      	movs	r3, #0
 800260c:	e00f      	b.n	800262e <_ZN7ILI93419DrawPixelEttt+0x56>
  }
  // set window
  SetWindow(x, y, x, y);
 800260e:	8978      	ldrh	r0, [r7, #10]
 8002610:	893a      	ldrh	r2, [r7, #8]
 8002612:	8979      	ldrh	r1, [r7, #10]
 8002614:	893b      	ldrh	r3, [r7, #8]
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	4603      	mov	r3, r0
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f7ff ff8a 	bl	8002534 <_ZN7ILI93419SetWindowEtttt>
  // draw pixel by 565 mode
  SendColor565(color, 1);
 8002620:	88fb      	ldrh	r3, [r7, #6]
 8002622:	2201      	movs	r2, #1
 8002624:	4619      	mov	r1, r3
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	f000 f805 	bl	8002636 <_ZN7ILI934112SendColor565Etm>
  // success
  return ILI9341_SUCCESS;
 800262c:	2301      	movs	r3, #1
}
 800262e:	4618      	mov	r0, r3
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <_ZN7ILI934112SendColor565Etm>:

void ILI9341::SendColor565(uint16_t color, uint32_t count)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b084      	sub	sp, #16
 800263a:	af00      	add	r7, sp, #0
 800263c:	60f8      	str	r0, [r7, #12]
 800263e:	460b      	mov	r3, r1
 8002640:	607a      	str	r2, [r7, #4]
 8002642:	817b      	strh	r3, [r7, #10]
  // enable chip select -> LOW
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_RESET);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800264e:	2200      	movs	r2, #0
 8002650:	4619      	mov	r1, r3
 8002652:	f003 fa0d 	bl	8005a70 <HAL_GPIO_WritePin>
  // access to RAM
  TransmitCmd(ILI9341_RAMWR);
 8002656:	212c      	movs	r1, #44	@ 0x2c
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f7ff feed 	bl	8002438 <_ZN7ILI934111TransmitCmdEh>
  // counter
  while (count--) {
 800265e:	e004      	b.n	800266a <_ZN7ILI934112SendColor565Etm+0x34>
    // write color - first colors byte
    Transmit16bitData(color);
 8002660:	897b      	ldrh	r3, [r7, #10]
 8002662:	4619      	mov	r1, r3
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f7ff ff17 	bl	8002498 <_ZN7ILI934117Transmit16bitDataEt>
  while (count--) {
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	1e5a      	subs	r2, r3, #1
 800266e:	607a      	str	r2, [r7, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	bf14      	ite	ne
 8002674:	2301      	movne	r3, #1
 8002676:	2300      	moveq	r3, #0
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1f0      	bne.n	8002660 <_ZN7ILI934112SendColor565Etm+0x2a>
  }
  // disable chip select -> HIGH
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_SET);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002688:	2201      	movs	r2, #1
 800268a:	4619      	mov	r1, r3
 800268c:	f003 f9f0 	bl	8005a70 <HAL_GPIO_WritePin>
}
 8002690:	bf00      	nop
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <_ZN7ILI93415FloodEtm>:

void ILI9341::Flood(uint16_t color, uint32_t count)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	460b      	mov	r3, r1
 80026a2:	607a      	str	r2, [r7, #4]
 80026a4:	817b      	strh	r3, [r7, #10]
  // enable chip select -> LOW
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_RESET);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80026b0:	2200      	movs	r2, #0
 80026b2:	4619      	mov	r1, r3
 80026b4:	f003 f9dc 	bl	8005a70 <HAL_GPIO_WritePin>
  // access to RAM
  TransmitCmd(ILI9341_RAMWR);
 80026b8:	212c      	movs	r1, #44	@ 0x2c
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f7ff febc 	bl	8002438 <_ZN7ILI934111TransmitCmdEh>
  // counter
  // Upper and lower are the same
  if( (color & 0xFF) == (color >> 8))
 80026c0:	897b      	ldrh	r3, [r7, #10]
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	897a      	ldrh	r2, [r7, #10]
 80026c6:	0a12      	lsrs	r2, r2, #8
 80026c8:	b292      	uxth	r2, r2
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d13c      	bne.n	8002748 <_ZN7ILI93415FloodEtm+0xb0>
  {
    count--;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	3b01      	subs	r3, #1
 80026d2:	607b      	str	r3, [r7, #4]
    Transmit16bitData(color);
 80026d4:	897b      	ldrh	r3, [r7, #10]
 80026d6:	4619      	mov	r1, r3
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f7ff fedd 	bl	8002498 <_ZN7ILI934117Transmit16bitDataEt>
    while(count--)
 80026de:	e023      	b.n	8002728 <_ZN7ILI93415FloodEtm+0x90>
    {
#if UI_USE_HAL
  // Pulse Write
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_RESET);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80026ea:	2200      	movs	r2, #0
 80026ec:	4619      	mov	r1, r3
 80026ee:	f003 f9bf 	bl	8005a70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_SET);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80026fc:	2201      	movs	r2, #1
 80026fe:	4619      	mov	r1, r3
 8002700:	f003 f9b6 	bl	8005a70 <HAL_GPIO_WritePin>
  // Pulse Write
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_RESET);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800270e:	2200      	movs	r2, #0
 8002710:	4619      	mov	r1, r3
 8002712:	f003 f9ad 	bl	8005a70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_WRITE_GPIO_Port_, LCD_WRITE_Pin_, GPIO_PIN_SET);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8002720:	2201      	movs	r2, #1
 8002722:	4619      	mov	r1, r3
 8002724:	f003 f9a4 	bl	8005a70 <HAL_GPIO_WritePin>
    while(count--)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	1e5a      	subs	r2, r3, #1
 800272c:	607a      	str	r2, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	bf14      	ite	ne
 8002732:	2301      	movne	r3, #1
 8002734:	2300      	moveq	r3, #0
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1d1      	bne.n	80026e0 <_ZN7ILI93415FloodEtm+0x48>
 800273c:	e00e      	b.n	800275c <_ZN7ILI93415FloodEtm+0xc4>
  }
  else
  {
    while (count--)
    {
      Transmit16bitData(color);
 800273e:	897b      	ldrh	r3, [r7, #10]
 8002740:	4619      	mov	r1, r3
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f7ff fea8 	bl	8002498 <_ZN7ILI934117Transmit16bitDataEt>
    while (count--)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	1e5a      	subs	r2, r3, #1
 800274c:	607a      	str	r2, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	bf14      	ite	ne
 8002752:	2301      	movne	r3, #1
 8002754:	2300      	moveq	r3, #0
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1f0      	bne.n	800273e <_ZN7ILI93415FloodEtm+0xa6>
    }
  }
  // disable chip select -> HIGH
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_SET);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002766:	2201      	movs	r2, #1
 8002768:	4619      	mov	r1, r3
 800276a:	f003 f981 	bl	8005a70 <HAL_GPIO_WritePin>
}
 800276e:	bf00      	nop
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <_ZN7ILI934111ClearScreenEt>:

void ILI9341::ClearScreen(uint16_t color)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b084      	sub	sp, #16
 800277a:	af02      	add	r7, sp, #8
 800277c:	6078      	str	r0, [r7, #4]
 800277e:	460b      	mov	r3, r1
 8002780:	807b      	strh	r3, [r7, #2]
  // set whole window
  SetWindow(0, 0, width_, height_);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002788:	b29a      	uxth	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002790:	b29b      	uxth	r3, r3
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	4613      	mov	r3, r2
 8002796:	2200      	movs	r2, #0
 8002798:	2100      	movs	r1, #0
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7ff feca 	bl	8002534 <_ZN7ILI93419SetWindowEtttt>
  // draw individual pixels
  Flood(color, ILI9341_CACHE_MEM);
 80027a0:	887b      	ldrh	r3, [r7, #2]
 80027a2:	f44f 3296 	mov.w	r2, #76800	@ 0x12c00
 80027a6:	4619      	mov	r1, r3
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f7ff ff75 	bl	8002698 <_ZN7ILI93415FloodEtm>
  // Update background color
  textbgcolor = color;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	887a      	ldrh	r2, [r7, #2]
 80027b2:	831a      	strh	r2, [r3, #24]
}
 80027b4:	bf00      	nop
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <_ZN7ILI934113DrawFastHLineEtttt>:

void ILI9341::DrawFastHLine(uint16_t x, uint16_t y, uint16_t length,
                                    uint16_t color) {
 80027bc:	b580      	push	{r7, lr}
 80027be:	b088      	sub	sp, #32
 80027c0:	af02      	add	r7, sp, #8
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	4608      	mov	r0, r1
 80027c6:	4611      	mov	r1, r2
 80027c8:	461a      	mov	r2, r3
 80027ca:	4603      	mov	r3, r0
 80027cc:	817b      	strh	r3, [r7, #10]
 80027ce:	460b      	mov	r3, r1
 80027d0:	813b      	strh	r3, [r7, #8]
 80027d2:	4613      	mov	r3, r2
 80027d4:	80fb      	strh	r3, [r7, #6]
  int16_t x2;

  // Initial off-screen clipping
  if ((length <= 0) || (y < 0) || (y >= height_) || (x >= width_) ||
 80027d6:	88fb      	ldrh	r3, [r7, #6]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d016      	beq.n	800280a <_ZN7ILI934113DrawFastHLineEtttt+0x4e>
 80027dc:	893b      	ldrh	r3, [r7, #8]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80027e4:	4293      	cmp	r3, r2
 80027e6:	da10      	bge.n	800280a <_ZN7ILI934113DrawFastHLineEtttt+0x4e>
 80027e8:	897b      	ldrh	r3, [r7, #10]
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80027f0:	4293      	cmp	r3, r2
 80027f2:	da0a      	bge.n	800280a <_ZN7ILI934113DrawFastHLineEtttt+0x4e>
      ((x2 = (x + length - 1)) < 0))
 80027f4:	897a      	ldrh	r2, [r7, #10]
 80027f6:	88fb      	ldrh	r3, [r7, #6]
 80027f8:	4413      	add	r3, r2
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	3b01      	subs	r3, #1
 80027fe:	b29b      	uxth	r3, r3
 8002800:	82fb      	strh	r3, [r7, #22]
  if ((length <= 0) || (y < 0) || (y >= height_) || (x >= width_) ||
 8002802:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002806:	2b00      	cmp	r3, #0
 8002808:	da01      	bge.n	800280e <_ZN7ILI934113DrawFastHLineEtttt+0x52>
 800280a:	2301      	movs	r3, #1
 800280c:	e000      	b.n	8002810 <_ZN7ILI934113DrawFastHLineEtttt+0x54>
 800280e:	2300      	movs	r3, #0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d123      	bne.n	800285c <_ZN7ILI934113DrawFastHLineEtttt+0xa0>

  if (x < 0) { // Clip left
    length += x;
    x = 0;
  }
  if (x2 >= width_) { // Clip right
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800281a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800281e:	429a      	cmp	r2, r3
 8002820:	db0c      	blt.n	800283c <_ZN7ILI934113DrawFastHLineEtttt+0x80>
    x2 = width_ - 1;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002828:	b29b      	uxth	r3, r3
 800282a:	3b01      	subs	r3, #1
 800282c:	b29b      	uxth	r3, r3
 800282e:	82fb      	strh	r3, [r7, #22]
    length = x2 - x + 1;
 8002830:	8afa      	ldrh	r2, [r7, #22]
 8002832:	897b      	ldrh	r3, [r7, #10]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	b29b      	uxth	r3, r3
 8002838:	3301      	adds	r3, #1
 800283a:	80fb      	strh	r3, [r7, #6]
  }

  SetWindow(x, y, x2, y);
 800283c:	8af8      	ldrh	r0, [r7, #22]
 800283e:	893a      	ldrh	r2, [r7, #8]
 8002840:	8979      	ldrh	r1, [r7, #10]
 8002842:	893b      	ldrh	r3, [r7, #8]
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	4603      	mov	r3, r0
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f7ff fe73 	bl	8002534 <_ZN7ILI93419SetWindowEtttt>
  Flood(color, length);
 800284e:	88fa      	ldrh	r2, [r7, #6]
 8002850:	8c3b      	ldrh	r3, [r7, #32]
 8002852:	4619      	mov	r1, r3
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f7ff ff1f 	bl	8002698 <_ZN7ILI93415FloodEtm>
 800285a:	e000      	b.n	800285e <_ZN7ILI934113DrawFastHLineEtttt+0xa2>
    return;
 800285c:	bf00      	nop
}
 800285e:	3718      	adds	r7, #24
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <_ZN7ILI934113DrawFastVLineEtttt>:

void ILI9341::DrawFastVLine(uint16_t x, uint16_t y, uint16_t length,
                                    uint16_t color) {
 8002864:	b580      	push	{r7, lr}
 8002866:	b088      	sub	sp, #32
 8002868:	af02      	add	r7, sp, #8
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	4608      	mov	r0, r1
 800286e:	4611      	mov	r1, r2
 8002870:	461a      	mov	r2, r3
 8002872:	4603      	mov	r3, r0
 8002874:	817b      	strh	r3, [r7, #10]
 8002876:	460b      	mov	r3, r1
 8002878:	813b      	strh	r3, [r7, #8]
 800287a:	4613      	mov	r3, r2
 800287c:	80fb      	strh	r3, [r7, #6]
  int16_t y2;

  // Initial off-screen clipping
  if ((length <= 0) || (x < 0) || (x >= width_) || (y >= height_) ||
 800287e:	88fb      	ldrh	r3, [r7, #6]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d016      	beq.n	80028b2 <_ZN7ILI934113DrawFastVLineEtttt+0x4e>
 8002884:	897b      	ldrh	r3, [r7, #10]
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800288c:	4293      	cmp	r3, r2
 800288e:	da10      	bge.n	80028b2 <_ZN7ILI934113DrawFastVLineEtttt+0x4e>
 8002890:	893b      	ldrh	r3, [r7, #8]
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8002898:	4293      	cmp	r3, r2
 800289a:	da0a      	bge.n	80028b2 <_ZN7ILI934113DrawFastVLineEtttt+0x4e>
      ((y2 = (y + length - 1)) < 0))
 800289c:	893a      	ldrh	r2, [r7, #8]
 800289e:	88fb      	ldrh	r3, [r7, #6]
 80028a0:	4413      	add	r3, r2
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	3b01      	subs	r3, #1
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	82fb      	strh	r3, [r7, #22]
  if ((length <= 0) || (x < 0) || (x >= width_) || (y >= height_) ||
 80028aa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	da01      	bge.n	80028b6 <_ZN7ILI934113DrawFastVLineEtttt+0x52>
 80028b2:	2301      	movs	r3, #1
 80028b4:	e000      	b.n	80028b8 <_ZN7ILI934113DrawFastVLineEtttt+0x54>
 80028b6:	2300      	movs	r3, #0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d123      	bne.n	8002904 <_ZN7ILI934113DrawFastVLineEtttt+0xa0>
    return;
  if (y < 0) { // Clip top
    length += y;
    y = 0;
  }
  if (y2 >= height_) { // Clip bottom
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80028c2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	db0c      	blt.n	80028e4 <_ZN7ILI934113DrawFastVLineEtttt+0x80>
    y2 = height_ - 1;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	3b01      	subs	r3, #1
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	82fb      	strh	r3, [r7, #22]
    length = y2 - y + 1;
 80028d8:	8afa      	ldrh	r2, [r7, #22]
 80028da:	893b      	ldrh	r3, [r7, #8]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	b29b      	uxth	r3, r3
 80028e0:	3301      	adds	r3, #1
 80028e2:	80fb      	strh	r3, [r7, #6]
  }

  SetWindow(x, y, x, y2);
 80028e4:	8afb      	ldrh	r3, [r7, #22]
 80028e6:	8978      	ldrh	r0, [r7, #10]
 80028e8:	893a      	ldrh	r2, [r7, #8]
 80028ea:	8979      	ldrh	r1, [r7, #10]
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	4603      	mov	r3, r0
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f7ff fe1f 	bl	8002534 <_ZN7ILI93419SetWindowEtttt>
  Flood(color, length);
 80028f6:	88fa      	ldrh	r2, [r7, #6]
 80028f8:	8c3b      	ldrh	r3, [r7, #32]
 80028fa:	4619      	mov	r1, r3
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f7ff fecb 	bl	8002698 <_ZN7ILI93415FloodEtm>
 8002902:	e000      	b.n	8002906 <_ZN7ILI934113DrawFastVLineEtttt+0xa2>
    return;
 8002904:	bf00      	nop
}
 8002906:	3718      	adds	r7, #24
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <_ZN7ILI934111SetRotationEh>:

void ILI9341::SetRotation(uint8_t x) {
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af02      	add	r7, sp, #8
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	460b      	mov	r3, r1
 8002916:	70fb      	strb	r3, [r7, #3]
  // enable chip select -> LOW
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port_, LCD_CS_Pin_, GPIO_PIN_RESET);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002922:	2200      	movs	r2, #0
 8002924:	4619      	mov	r1, r3
 8002926:	f003 f8a3 	bl	8005a70 <HAL_GPIO_WritePin>
  rotation = x % 4; // can't be higher than 3
 800292a:	78fb      	ldrb	r3, [r7, #3]
 800292c:	f003 0303 	and.w	r3, r3, #3
 8002930:	b2da      	uxtb	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	771a      	strb	r2, [r3, #28]
  switch (rotation) {
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	7f1b      	ldrb	r3, [r3, #28]
 800293a:	2b03      	cmp	r3, #3
 800293c:	d832      	bhi.n	80029a4 <_ZN7ILI934111SetRotationEh+0x98>
 800293e:	a201      	add	r2, pc, #4	@ (adr r2, 8002944 <_ZN7ILI934111SetRotationEh+0x38>)
 8002940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002944:	08002955 	.word	0x08002955
 8002948:	08002969 	.word	0x08002969
 800294c:	0800297d 	.word	0x0800297d
 8002950:	08002991 	.word	0x08002991
  case 0:
    x = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
 8002954:	2348      	movs	r3, #72	@ 0x48
 8002956:	70fb      	strb	r3, [r7, #3]
    width_ = ILI9341_TFTWIDTH;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	22f0      	movs	r2, #240	@ 0xf0
 800295c:	811a      	strh	r2, [r3, #8]
    height_ = ILI9341_TFTHEIGHT;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002964:	815a      	strh	r2, [r3, #10]
    break;
 8002966:	e01d      	b.n	80029a4 <_ZN7ILI934111SetRotationEh+0x98>
  case 1:
    x = (ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8002968:	2328      	movs	r3, #40	@ 0x28
 800296a:	70fb      	strb	r3, [r7, #3]
    width_ = ILI9341_TFTHEIGHT;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002972:	811a      	strh	r2, [r3, #8]
    height_ = ILI9341_TFTWIDTH;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	22f0      	movs	r2, #240	@ 0xf0
 8002978:	815a      	strh	r2, [r3, #10]
    break;
 800297a:	e013      	b.n	80029a4 <_ZN7ILI934111SetRotationEh+0x98>
  case 2:
    x = (ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 800297c:	2388      	movs	r3, #136	@ 0x88
 800297e:	70fb      	strb	r3, [r7, #3]
    width_ = ILI9341_TFTWIDTH;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	22f0      	movs	r2, #240	@ 0xf0
 8002984:	811a      	strh	r2, [r3, #8]
    height_ = ILI9341_TFTHEIGHT;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800298c:	815a      	strh	r2, [r3, #10]
    break;
 800298e:	e009      	b.n	80029a4 <_ZN7ILI934111SetRotationEh+0x98>
  case 3:
    x = (ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8002990:	23e8      	movs	r3, #232	@ 0xe8
 8002992:	70fb      	strb	r3, [r7, #3]
    width_ = ILI9341_TFTHEIGHT;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800299a:	811a      	strh	r2, [r3, #8]
    height_ = ILI9341_TFTWIDTH;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	22f0      	movs	r2, #240	@ 0xf0
 80029a0:	815a      	strh	r2, [r3, #10]
    break;
 80029a2:	bf00      	nop
  }
  TransmitCmd(ILI9341_MADCTL); // MADCTL
 80029a4:	2136      	movs	r1, #54	@ 0x36
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7ff fd46 	bl	8002438 <_ZN7ILI934111TransmitCmdEh>
  Transmit8bitData(x);
 80029ac:	78fb      	ldrb	r3, [r7, #3]
 80029ae:	4619      	mov	r1, r3
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f7ff fd59 	bl	8002468 <_ZN7ILI934116Transmit8bitDataEh>
  // For 9341, init default full-screen address window:
  SetWindow(0, 0, width_ - 1, height_ - 1); // CS_IDLE happens here
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80029bc:	b29b      	uxth	r3, r3
 80029be:	3b01      	subs	r3, #1
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	3b01      	subs	r3, #1
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	9300      	str	r3, [sp, #0]
 80029d0:	4613      	mov	r3, r2
 80029d2:	2200      	movs	r2, #0
 80029d4:	2100      	movs	r1, #0
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7ff fdac 	bl	8002534 <_ZN7ILI93419SetWindowEtttt>
}
 80029dc:	bf00      	nop
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <_ZN7ILI934111SetTextSizeEh>:

void ILI9341::SetTextSize(uint8_t size)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	70fb      	strb	r3, [r7, #3]
  text_size_ = size;
 80029f0:	78fb      	ldrb	r3, [r7, #3]
 80029f2:	b21a      	sxth	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	819a      	strh	r2, [r3, #12]
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <_ZN7ILI93418DrawCharEsshth>:

void ILI9341::DrawChar(int16_t x, int16_t y, unsigned char c,
    uint16_t color, uint8_t size)
{
 8002a04:	b590      	push	{r4, r7, lr}
 8002a06:	b089      	sub	sp, #36	@ 0x24
 8002a08:	af04      	add	r7, sp, #16
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	4608      	mov	r0, r1
 8002a0e:	4611      	mov	r1, r2
 8002a10:	461a      	mov	r2, r3
 8002a12:	4603      	mov	r3, r0
 8002a14:	817b      	strh	r3, [r7, #10]
 8002a16:	460b      	mov	r3, r1
 8002a18:	813b      	strh	r3, [r7, #8]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	71fb      	strb	r3, [r7, #7]
  DrawChar(x, y, c, color, textbgcolor, size, size);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8b1b      	ldrh	r3, [r3, #24]
 8002a22:	79fc      	ldrb	r4, [r7, #7]
 8002a24:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 8002a28:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002a2c:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002a30:	9203      	str	r2, [sp, #12]
 8002a32:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002a36:	9202      	str	r2, [sp, #8]
 8002a38:	9301      	str	r3, [sp, #4]
 8002a3a:	8c3b      	ldrh	r3, [r7, #32]
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	4623      	mov	r3, r4
 8002a40:	4602      	mov	r2, r0
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f000 f804 	bl	8002a50 <_ZN7ILI93418DrawCharEsshtthh>
}
 8002a48:	bf00      	nop
 8002a4a:	3714      	adds	r7, #20
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd90      	pop	{r4, r7, pc}

08002a50 <_ZN7ILI93418DrawCharEsshtthh>:

void ILI9341::DrawChar(int16_t x, int16_t y, unsigned char c,
    uint16_t color, uint16_t bg, uint8_t size_x,
    uint8_t size_y)
{
 8002a50:	b590      	push	{r4, r7, lr}
 8002a52:	b089      	sub	sp, #36	@ 0x24
 8002a54:	af02      	add	r7, sp, #8
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	4608      	mov	r0, r1
 8002a5a:	4611      	mov	r1, r2
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	4603      	mov	r3, r0
 8002a60:	817b      	strh	r3, [r7, #10]
 8002a62:	460b      	mov	r3, r1
 8002a64:	813b      	strh	r3, [r7, #8]
 8002a66:	4613      	mov	r3, r2
 8002a68:	71fb      	strb	r3, [r7, #7]
  for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	75fb      	strb	r3, [r7, #23]
 8002a6e:	e0a8      	b.n	8002bc2 <_ZN7ILI93418DrawCharEsshtthh+0x172>
      uint8_t line = font[c * 5 + i];
 8002a70:	79fa      	ldrb	r2, [r7, #7]
 8002a72:	4613      	mov	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	441a      	add	r2, r3
 8002a78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	4a6e      	ldr	r2, [pc, #440]	@ (8002c38 <_ZN7ILI93418DrawCharEsshtthh+0x1e8>)
 8002a80:	5cd3      	ldrb	r3, [r2, r3]
 8002a82:	75bb      	strb	r3, [r7, #22]
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 8002a84:	2300      	movs	r3, #0
 8002a86:	757b      	strb	r3, [r7, #21]
 8002a88:	e090      	b.n	8002bac <_ZN7ILI93418DrawCharEsshtthh+0x15c>
        if (line & 1) {
 8002a8a:	7dbb      	ldrb	r3, [r7, #22]
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d03f      	beq.n	8002b14 <_ZN7ILI93418DrawCharEsshtthh+0xc4>
          if (size_x == 1 && size_y == 1)
 8002a94:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d114      	bne.n	8002ac6 <_ZN7ILI93418DrawCharEsshtthh+0x76>
 8002a9c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d110      	bne.n	8002ac6 <_ZN7ILI93418DrawCharEsshtthh+0x76>
            DrawPixel(x + i, y + j, color);
 8002aa4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	897b      	ldrh	r3, [r7, #10]
 8002aac:	4413      	add	r3, r2
 8002aae:	b299      	uxth	r1, r3
 8002ab0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	893b      	ldrh	r3, [r7, #8]
 8002ab8:	4413      	add	r3, r2
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f7ff fd8a 	bl	80025d8 <_ZN7ILI93419DrawPixelEttt>
 8002ac4:	e069      	b.n	8002b9a <_ZN7ILI93418DrawCharEsshtthh+0x14a>
          else
            FillRect(x + i * size_x, y + j * size_y, size_x, size_y,
 8002ac6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	fb12 f303 	smulbb	r3, r2, r3
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	897b      	ldrh	r3, [r7, #10]
 8002ada:	4413      	add	r3, r2
 8002adc:	b299      	uxth	r1, r3
 8002ade:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	fb12 f303 	smulbb	r3, r2, r3
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	893b      	ldrh	r3, [r7, #8]
 8002af2:	4413      	add	r3, r2
 8002af4:	b298      	uxth	r0, r3
 8002af6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002afa:	b29c      	uxth	r4, r3
 8002afc:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8002b04:	9201      	str	r2, [sp, #4]
 8002b06:	9300      	str	r3, [sp, #0]
 8002b08:	4623      	mov	r3, r4
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f000 f8fa 	bl	8002d06 <_ZN7ILI93418FillRectEttttt>
 8002b12:	e042      	b.n	8002b9a <_ZN7ILI93418DrawCharEsshtthh+0x14a>
                          color);
        } else if (bg != color) {
 8002b14:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8002b16:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d03e      	beq.n	8002b9a <_ZN7ILI93418DrawCharEsshtthh+0x14a>
          if (size_x == 1 && size_y == 1)
 8002b1c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d114      	bne.n	8002b4e <_ZN7ILI93418DrawCharEsshtthh+0xfe>
 8002b24:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d110      	bne.n	8002b4e <_ZN7ILI93418DrawCharEsshtthh+0xfe>
            DrawPixel(x + i, y + j, bg);
 8002b2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	897b      	ldrh	r3, [r7, #10]
 8002b34:	4413      	add	r3, r2
 8002b36:	b299      	uxth	r1, r3
 8002b38:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	893b      	ldrh	r3, [r7, #8]
 8002b40:	4413      	add	r3, r2
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f7ff fd46 	bl	80025d8 <_ZN7ILI93419DrawPixelEttt>
 8002b4c:	e025      	b.n	8002b9a <_ZN7ILI93418DrawCharEsshtthh+0x14a>
          else
            FillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 8002b4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	fb12 f303 	smulbb	r3, r2, r3
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	897b      	ldrh	r3, [r7, #10]
 8002b62:	4413      	add	r3, r2
 8002b64:	b299      	uxth	r1, r3
 8002b66:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	fb12 f303 	smulbb	r3, r2, r3
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	893b      	ldrh	r3, [r7, #8]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	b298      	uxth	r0, r3
 8002b7e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002b82:	b29c      	uxth	r4, r3
 8002b84:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8002b8c:	9201      	str	r2, [sp, #4]
 8002b8e:	9300      	str	r3, [sp, #0]
 8002b90:	4623      	mov	r3, r4
 8002b92:	4602      	mov	r2, r0
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f000 f8b6 	bl	8002d06 <_ZN7ILI93418FillRectEttttt>
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 8002b9a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	757b      	strb	r3, [r7, #21]
 8002ba6:	7dbb      	ldrb	r3, [r7, #22]
 8002ba8:	085b      	lsrs	r3, r3, #1
 8002baa:	75bb      	strb	r3, [r7, #22]
 8002bac:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002bb0:	2b07      	cmp	r3, #7
 8002bb2:	f77f af6a 	ble.w	8002a8a <_ZN7ILI93418DrawCharEsshtthh+0x3a>
  for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 8002bb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	75fb      	strb	r3, [r7, #23]
 8002bc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	f77f af52 	ble.w	8002a70 <_ZN7ILI93418DrawCharEsshtthh+0x20>
        }
      }
    }
    if (bg != color) { // If opaque, draw vertical line for last column
 8002bcc:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8002bce:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d02d      	beq.n	8002c30 <_ZN7ILI93418DrawCharEsshtthh+0x1e0>
      if (size_x == 1 && size_y == 1)
 8002bd4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d10e      	bne.n	8002bfa <_ZN7ILI93418DrawCharEsshtthh+0x1aa>
 8002bdc:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d10a      	bne.n	8002bfa <_ZN7ILI93418DrawCharEsshtthh+0x1aa>
        DrawFastVLine(x + 5, y, 8, bg);
 8002be4:	897b      	ldrh	r3, [r7, #10]
 8002be6:	3305      	adds	r3, #5
 8002be8:	b299      	uxth	r1, r3
 8002bea:	893a      	ldrh	r2, [r7, #8]
 8002bec:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002bee:	9300      	str	r3, [sp, #0]
 8002bf0:	2308      	movs	r3, #8
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f7ff fe36 	bl	8002864 <_ZN7ILI934113DrawFastVLineEtttt>
      else
        FillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
    }
}
 8002bf8:	e01a      	b.n	8002c30 <_ZN7ILI93418DrawCharEsshtthh+0x1e0>
        FillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 8002bfa:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	461a      	mov	r2, r3
 8002c02:	0092      	lsls	r2, r2, #2
 8002c04:	4413      	add	r3, r2
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	897b      	ldrh	r3, [r7, #10]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	b299      	uxth	r1, r3
 8002c0e:	8938      	ldrh	r0, [r7, #8]
 8002c10:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002c14:	b29c      	uxth	r4, r3
 8002c16:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8002c22:	9201      	str	r2, [sp, #4]
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	4623      	mov	r3, r4
 8002c28:	4602      	mov	r2, r0
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f000 f86b 	bl	8002d06 <_ZN7ILI93418FillRectEttttt>
}
 8002c30:	bf00      	nop
 8002c32:	371c      	adds	r7, #28
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd90      	pop	{r4, r7, pc}
 8002c38:	0800cd70 	.word	0x0800cd70

08002c3c <_ZN7ILI93418DrawTextEttPKct>:

void ILI9341::DrawText(uint16_t x, uint16_t y, const char *str, uint16_t color)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b088      	sub	sp, #32
 8002c40:	af02      	add	r7, sp, #8
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	607b      	str	r3, [r7, #4]
 8002c46:	460b      	mov	r3, r1
 8002c48:	817b      	strh	r3, [r7, #10]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	813b      	strh	r3, [r7, #8]
  // NOTE: Characters are 6x8 (wxh)
    uint8_t TempChar;

    /* Set area back to span the entire LCD */
    SetWindow(0, 0, width_ - 1, height_ - 1);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	3b01      	subs	r3, #1
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	3b01      	subs	r3, #1
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f7ff fc60 	bl	8002534 <_ZN7ILI93419SetWindowEtttt>
    do
    {
        TempChar = *str++;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	1c5a      	adds	r2, r3, #1
 8002c78:	607a      	str	r2, [r7, #4]
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	75fb      	strb	r3, [r7, #23]
        DrawChar( x, y, TempChar, color, text_size_);
 8002c7e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002c82:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	7df8      	ldrb	r0, [r7, #23]
 8002c90:	9301      	str	r3, [sp, #4]
 8002c92:	8c3b      	ldrh	r3, [r7, #32]
 8002c94:	9300      	str	r3, [sp, #0]
 8002c96:	4603      	mov	r3, r0
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f7ff feb3 	bl	8002a04 <_ZN7ILI93418DrawCharEsshth>
        if( x < width_ - 1 - 8)
 8002c9e:	897a      	ldrh	r2, [r7, #10]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002ca6:	3b09      	subs	r3, #9
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	da0c      	bge.n	8002cc6 <_ZN7ILI93418DrawTextEttPKct+0x8a>
        {
            x += (6 * text_size_);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	0052      	lsls	r2, r2, #1
 8002cb8:	4413      	add	r3, r2
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	897b      	ldrh	r3, [r7, #10]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	817b      	strh	r3, [r7, #10]
 8002cc4:	e016      	b.n	8002cf4 <_ZN7ILI93418DrawTextEttPKct+0xb8>
        }
        else if ( y < height_ - 1 - 16)
 8002cc6:	893a      	ldrh	r2, [r7, #8]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002cce:	3b11      	subs	r3, #17
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	da0b      	bge.n	8002cec <_ZN7ILI93418DrawTextEttPKct+0xb0>
        {
            x = 0;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	817b      	strh	r3, [r7, #10]
            y += (8 * text_size_);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	893b      	ldrh	r3, [r7, #8]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	813b      	strh	r3, [r7, #8]
 8002cea:	e003      	b.n	8002cf4 <_ZN7ILI93418DrawTextEttPKct+0xb8>
        }
        else
        {
            x = 0;
 8002cec:	2300      	movs	r3, #0
 8002cee:	817b      	strh	r3, [r7, #10]
            y = 0;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	813b      	strh	r3, [r7, #8]
        }
    }
    while ( *str != 0 );
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1bb      	bne.n	8002c74 <_ZN7ILI93418DrawTextEttPKct+0x38>
}
 8002cfc:	bf00      	nop
 8002cfe:	bf00      	nop
 8002d00:	3718      	adds	r7, #24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <_ZN7ILI93418FillRectEttttt>:
  DrawFastVLine(x, y, h, color);
  DrawFastVLine(x + w - 1, y, h, color);
}

void ILI9341::FillRect(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h, uint16_t color)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b088      	sub	sp, #32
 8002d0a:	af02      	add	r7, sp, #8
 8002d0c:	60f8      	str	r0, [r7, #12]
 8002d0e:	4608      	mov	r0, r1
 8002d10:	4611      	mov	r1, r2
 8002d12:	461a      	mov	r2, r3
 8002d14:	4603      	mov	r3, r0
 8002d16:	817b      	strh	r3, [r7, #10]
 8002d18:	460b      	mov	r3, r1
 8002d1a:	813b      	strh	r3, [r7, #8]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	80fb      	strh	r3, [r7, #6]
  int16_t x2, y2;

  // Initial off-screen clipping
  if ((w <= 0) || (h <= 0) || (x1 >= width_) || (y1 >= height_) ||
      ((x2 = x1 + w - 1) < 0) || ((y2 = y1 + h - 1) < 0))
 8002d20:	88fb      	ldrh	r3, [r7, #6]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d024      	beq.n	8002d70 <_ZN7ILI93418FillRectEttttt+0x6a>
  if ((w <= 0) || (h <= 0) || (x1 >= width_) || (y1 >= height_) ||
 8002d26:	8c3b      	ldrh	r3, [r7, #32]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d021      	beq.n	8002d70 <_ZN7ILI93418FillRectEttttt+0x6a>
 8002d2c:	897b      	ldrh	r3, [r7, #10]
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002d34:	4293      	cmp	r3, r2
 8002d36:	da1b      	bge.n	8002d70 <_ZN7ILI93418FillRectEttttt+0x6a>
 8002d38:	893b      	ldrh	r3, [r7, #8]
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8002d40:	4293      	cmp	r3, r2
 8002d42:	da15      	bge.n	8002d70 <_ZN7ILI93418FillRectEttttt+0x6a>
      ((x2 = x1 + w - 1) < 0) || ((y2 = y1 + h - 1) < 0))
 8002d44:	897a      	ldrh	r2, [r7, #10]
 8002d46:	88fb      	ldrh	r3, [r7, #6]
 8002d48:	4413      	add	r3, r2
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	82fb      	strh	r3, [r7, #22]
  if ((w <= 0) || (h <= 0) || (x1 >= width_) || (y1 >= height_) ||
 8002d52:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	db0a      	blt.n	8002d70 <_ZN7ILI93418FillRectEttttt+0x6a>
      ((x2 = x1 + w - 1) < 0) || ((y2 = y1 + h - 1) < 0))
 8002d5a:	893a      	ldrh	r2, [r7, #8]
 8002d5c:	8c3b      	ldrh	r3, [r7, #32]
 8002d5e:	4413      	add	r3, r2
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	3b01      	subs	r3, #1
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	82bb      	strh	r3, [r7, #20]
 8002d68:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	da01      	bge.n	8002d74 <_ZN7ILI93418FillRectEttttt+0x6e>
 8002d70:	2301      	movs	r3, #1
 8002d72:	e000      	b.n	8002d76 <_ZN7ILI93418FillRectEttttt+0x70>
 8002d74:	2300      	movs	r3, #0
  if ((w <= 0) || (h <= 0) || (x1 >= width_) || (y1 >= height_) ||
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d13a      	bne.n	8002df0 <_ZN7ILI93418FillRectEttttt+0xea>
  }
  if (y1 < 0) { // Clip top
    h += y1;
    y1 = 0;
  }
  if (x2 >= width_) { // Clip right
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002d80:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	db0c      	blt.n	8002da2 <_ZN7ILI93418FillRectEttttt+0x9c>
    x2 = width_ - 1;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	3b01      	subs	r3, #1
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	82fb      	strh	r3, [r7, #22]
    w = x2 - x1 + 1;
 8002d96:	8afa      	ldrh	r2, [r7, #22]
 8002d98:	897b      	ldrh	r3, [r7, #10]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	3301      	adds	r3, #1
 8002da0:	80fb      	strh	r3, [r7, #6]
  }
  if (y2 >= height_) { // Clip bottom
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002da8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	db0c      	blt.n	8002dca <_ZN7ILI93418FillRectEttttt+0xc4>
    y2 = height_ - 1;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	3b01      	subs	r3, #1
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	82bb      	strh	r3, [r7, #20]
    h = y2 - y1 + 1;
 8002dbe:	8aba      	ldrh	r2, [r7, #20]
 8002dc0:	893b      	ldrh	r3, [r7, #8]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	843b      	strh	r3, [r7, #32]
  }

  SetWindow(x1, y1, x2, y2);
 8002dca:	8af8      	ldrh	r0, [r7, #22]
 8002dcc:	8abb      	ldrh	r3, [r7, #20]
 8002dce:	893a      	ldrh	r2, [r7, #8]
 8002dd0:	8979      	ldrh	r1, [r7, #10]
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f7ff fbac 	bl	8002534 <_ZN7ILI93419SetWindowEtttt>
  Flood(color, (uint32_t)w * (uint32_t)h);
 8002ddc:	88fb      	ldrh	r3, [r7, #6]
 8002dde:	8c3a      	ldrh	r2, [r7, #32]
 8002de0:	fb03 f202 	mul.w	r2, r3, r2
 8002de4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002de6:	4619      	mov	r1, r3
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f7ff fc55 	bl	8002698 <_ZN7ILI93415FloodEtm>
 8002dee:	e000      	b.n	8002df2 <_ZN7ILI93418FillRectEttttt+0xec>
    return;
 8002df0:	bf00      	nop
}
 8002df2:	3718      	adds	r7, #24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <_ZN7ILI934110FillCircleEtttt>:
void ILI9341::FillCircle(uint16_t x0, uint16_t y0, uint16_t r, uint16_t color) {
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b088      	sub	sp, #32
 8002dfc:	af02      	add	r7, sp, #8
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	4608      	mov	r0, r1
 8002e02:	4611      	mov	r1, r2
 8002e04:	461a      	mov	r2, r3
 8002e06:	4603      	mov	r3, r0
 8002e08:	817b      	strh	r3, [r7, #10]
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	813b      	strh	r3, [r7, #8]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	80fb      	strh	r3, [r7, #6]
    int16_t x = 0, y = r;
 8002e12:	2300      	movs	r3, #0
 8002e14:	82fb      	strh	r3, [r7, #22]
 8002e16:	88fb      	ldrh	r3, [r7, #6]
 8002e18:	82bb      	strh	r3, [r7, #20]
    int16_t d = 1 - r;
 8002e1a:	88fb      	ldrh	r3, [r7, #6]
 8002e1c:	f1c3 0301 	rsb	r3, r3, #1
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	827b      	strh	r3, [r7, #18]

    // Draw initial center line
    DrawFastHLine(x0 - r, y0, 2 * r + 1, color);
 8002e24:	897a      	ldrh	r2, [r7, #10]
 8002e26:	88fb      	ldrh	r3, [r7, #6]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	b299      	uxth	r1, r3
 8002e2c:	88fb      	ldrh	r3, [r7, #6]
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	3301      	adds	r3, #1
 8002e34:	b298      	uxth	r0, r3
 8002e36:	893a      	ldrh	r2, [r7, #8]
 8002e38:	8c3b      	ldrh	r3, [r7, #32]
 8002e3a:	9300      	str	r3, [sp, #0]
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f7ff fcbc 	bl	80027bc <_ZN7ILI934113DrawFastHLineEtttt>

    while (y >= x) {
 8002e44:	e073      	b.n	8002f2e <_ZN7ILI934110FillCircleEtttt+0x136>
        // Draw horizontal spans
        DrawFastHLine(x0 - x, y0 + y, 2 * x + 1, color);
 8002e46:	8afb      	ldrh	r3, [r7, #22]
 8002e48:	897a      	ldrh	r2, [r7, #10]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	b299      	uxth	r1, r3
 8002e4e:	8aba      	ldrh	r2, [r7, #20]
 8002e50:	893b      	ldrh	r3, [r7, #8]
 8002e52:	4413      	add	r3, r2
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	8afb      	ldrh	r3, [r7, #22]
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	b298      	uxth	r0, r3
 8002e60:	8c3b      	ldrh	r3, [r7, #32]
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	4603      	mov	r3, r0
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f7ff fca8 	bl	80027bc <_ZN7ILI934113DrawFastHLineEtttt>
        DrawFastHLine(x0 - x, y0 - y, 2 * x + 1, color);
 8002e6c:	8afb      	ldrh	r3, [r7, #22]
 8002e6e:	897a      	ldrh	r2, [r7, #10]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	b299      	uxth	r1, r3
 8002e74:	8abb      	ldrh	r3, [r7, #20]
 8002e76:	893a      	ldrh	r2, [r7, #8]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	8afb      	ldrh	r3, [r7, #22]
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	3301      	adds	r3, #1
 8002e84:	b298      	uxth	r0, r3
 8002e86:	8c3b      	ldrh	r3, [r7, #32]
 8002e88:	9300      	str	r3, [sp, #0]
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f7ff fc95 	bl	80027bc <_ZN7ILI934113DrawFastHLineEtttt>
        DrawFastHLine(x0 - y, y0 + x, 2 * y + 1, color);
 8002e92:	8abb      	ldrh	r3, [r7, #20]
 8002e94:	897a      	ldrh	r2, [r7, #10]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	b299      	uxth	r1, r3
 8002e9a:	8afa      	ldrh	r2, [r7, #22]
 8002e9c:	893b      	ldrh	r3, [r7, #8]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	8abb      	ldrh	r3, [r7, #20]
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	b298      	uxth	r0, r3
 8002eac:	8c3b      	ldrh	r3, [r7, #32]
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f7ff fc82 	bl	80027bc <_ZN7ILI934113DrawFastHLineEtttt>
        DrawFastHLine(x0 - y, y0 - x, 2 * y + 1, color);
 8002eb8:	8abb      	ldrh	r3, [r7, #20]
 8002eba:	897a      	ldrh	r2, [r7, #10]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	b299      	uxth	r1, r3
 8002ec0:	8afb      	ldrh	r3, [r7, #22]
 8002ec2:	893a      	ldrh	r2, [r7, #8]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	8abb      	ldrh	r3, [r7, #20]
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	3301      	adds	r3, #1
 8002ed0:	b298      	uxth	r0, r3
 8002ed2:	8c3b      	ldrh	r3, [r7, #32]
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f7ff fc6f 	bl	80027bc <_ZN7ILI934113DrawFastHLineEtttt>

        x++;
 8002ede:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	82fb      	strh	r3, [r7, #22]
        if (d < 0) {
 8002eea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	da09      	bge.n	8002f06 <_ZN7ILI934110FillCircleEtttt+0x10e>
            d += 2 * x + 1;
 8002ef2:	8afb      	ldrh	r3, [r7, #22]
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	8a7b      	ldrh	r3, [r7, #18]
 8002efa:	4413      	add	r3, r2
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	3301      	adds	r3, #1
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	827b      	strh	r3, [r7, #18]
 8002f04:	e013      	b.n	8002f2e <_ZN7ILI934110FillCircleEtttt+0x136>
        } else {
            y--;
 8002f06:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	82bb      	strh	r3, [r7, #20]
            d += 2 * (x - y) + 1;
 8002f12:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002f16:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	8a7b      	ldrh	r3, [r7, #18]
 8002f24:	4413      	add	r3, r2
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	3301      	adds	r3, #1
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	827b      	strh	r3, [r7, #18]
    while (y >= x) {
 8002f2e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002f32:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	da85      	bge.n	8002e46 <_ZN7ILI934110FillCircleEtttt+0x4e>
        }
    }
}
 8002f3a:	bf00      	nop
 8002f3c:	bf00      	nop
 8002f3e:	3718      	adds	r7, #24
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <TCAL9538RSVR_INIT>:
*/



uint8_t TCAL9538RSVR_INIT(TCAL9538RSVR *dev, I2C_HandleTypeDef *i2cHandle, uint8_t hardwareAddress, uint8_t direction_bitMask, uint8_t interrupt_bitMask)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	4611      	mov	r1, r2
 8002f50:	461a      	mov	r2, r3
 8002f52:	460b      	mov	r3, r1
 8002f54:	71fb      	strb	r3, [r7, #7]
 8002f56:	4613      	mov	r3, r2
 8002f58:	71bb      	strb	r3, [r7, #6]
	uint8_t errNum = 0;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef status;
	dev->input = direction_bitMask;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	79ba      	ldrb	r2, [r7, #6]
 8002f62:	719a      	strb	r2, [r3, #6]


    dev->i2cHandle = i2cHandle;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	68ba      	ldr	r2, [r7, #8]
 8002f68:	601a      	str	r2, [r3, #0]
    dev->portValues = 0;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	715a      	strb	r2, [r3, #5]
    // hardware address should be from 0-3
    // (A0 = GND, A1 = GND) == 0
    hardwareAddress &= 0b00000011;
 8002f70:	79fb      	ldrb	r3, [r7, #7]
 8002f72:	f003 0303 	and.w	r3, r3, #3
 8002f76:	71fb      	strb	r3, [r7, #7]
    dev->deviceAddress = TCAL9538RSVR_ADDR | (hardwareAddress<<1);
 8002f78:	79fb      	ldrb	r3, [r7, #7]
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	b25b      	sxtb	r3, r3
 8002f7e:	f063 031f 	orn	r3, r3, #31
 8002f82:	b25b      	sxtb	r3, r3
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	711a      	strb	r2, [r3, #4]
    uint8_t hold_bitMask = direction_bitMask;
 8002f8a:	79bb      	ldrb	r3, [r7, #6]
 8002f8c:	757b      	strb	r3, [r7, #21]

    status = TCAL9538RSVR_SetDirection(dev, &hold_bitMask);
 8002f8e:	f107 0315 	add.w	r3, r7, #21
 8002f92:	4619      	mov	r1, r3
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f000 f83b 	bl	8003010 <TCAL9538RSVR_SetDirection>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	75bb      	strb	r3, [r7, #22]
    errNum += (status != HAL_OK);
 8002f9e:	7dbb      	ldrb	r3, [r7, #22]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	bf14      	ite	ne
 8002fa4:	2301      	movne	r3, #1
 8002fa6:	2300      	moveq	r3, #0
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	461a      	mov	r2, r3
 8002fac:	7dfb      	ldrb	r3, [r7, #23]
 8002fae:	4413      	add	r3, r2
 8002fb0:	75fb      	strb	r3, [r7, #23]

    status = TCAL9538RSVR_SetInterrupts(dev, interrupt_bitMask);
 8002fb2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f000 f838 	bl	800302e <TCAL9538RSVR_SetInterrupts>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	75bb      	strb	r3, [r7, #22]
    errNum += (status != HAL_OK);
 8002fc2:	7dbb      	ldrb	r3, [r7, #22]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	bf14      	ite	ne
 8002fc8:	2301      	movne	r3, #1
 8002fca:	2300      	moveq	r3, #0
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	461a      	mov	r2, r3
 8002fd0:	7dfb      	ldrb	r3, [r7, #23]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	75fb      	strb	r3, [r7, #23]

    // if all pins are inputs, invert all pins
    if (direction_bitMask == 0xFF) {
 8002fd6:	79bb      	ldrb	r3, [r7, #6]
 8002fd8:	2bff      	cmp	r3, #255	@ 0xff
 8002fda:	d114      	bne.n	8003006 <TCAL9538RSVR_INIT+0xc2>
        uint8_t full = 0xFF;
 8002fdc:	23ff      	movs	r3, #255	@ 0xff
 8002fde:	753b      	strb	r3, [r7, #20]
        status = TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_GPIO_INVERSION, &full);
 8002fe0:	f107 0314 	add.w	r3, r7, #20
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	2102      	movs	r1, #2
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f000 f894 	bl	8003116 <TCAL9538RSVR_WriteRegister>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	75bb      	strb	r3, [r7, #22]
        errNum += (status != HAL_OK);
 8002ff2:	7dbb      	ldrb	r3, [r7, #22]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	bf14      	ite	ne
 8002ff8:	2301      	movne	r3, #1
 8002ffa:	2300      	moveq	r3, #0
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	461a      	mov	r2, r3
 8003000:	7dfb      	ldrb	r3, [r7, #23]
 8003002:	4413      	add	r3, r2
 8003004:	75fb      	strb	r3, [r7, #23]
    }
    

    return (errNum);
 8003006:	7dfb      	ldrb	r3, [r7, #23]
}
 8003008:	4618      	mov	r0, r3
 800300a:	3718      	adds	r7, #24
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <TCAL9538RSVR_SetDirection>:
 * @param uint8_t : bitMask -> '1' is input
 * 					default is input
 * @retval HAL_StatusTypeDef : HAL_Status
 */
HAL_StatusTypeDef TCAL9538RSVR_SetDirection(TCAL9538RSVR* dev, uint8_t* bitMask)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_DIR_CONFIG, bitMask);
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	2103      	movs	r1, #3
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f879 	bl	8003116 <TCAL9538RSVR_WriteRegister>
 8003024:	4603      	mov	r3, r0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <TCAL9538RSVR_SetInterrupts>:
 * @brief Sets interrupt register
 * @param uint8_t : bitMask -> '0' will enable interrupts for that pin
 * @retval HAL_StatusTypeDef : HAL_Status
 */
HAL_StatusTypeDef TCAL9538RSVR_SetInterrupts(TCAL9538RSVR* dev, uint8_t bitMask)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b082      	sub	sp, #8
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
 8003036:	460b      	mov	r3, r1
 8003038:	70fb      	strb	r3, [r7, #3]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_INT_CONFIG, &bitMask);
 800303a:	1cfb      	adds	r3, r7, #3
 800303c:	461a      	mov	r2, r3
 800303e:	2145      	movs	r1, #69	@ 0x45
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 f868 	bl	8003116 <TCAL9538RSVR_WriteRegister>
 8003046:	4603      	mov	r3, r0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3708      	adds	r7, #8
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <TCAL9538RSVR_HandleInterrupt>:
 * @brief Handles interrupt and returns pin# that triggered
 * 			stores triggered pin in dev->triggeredInterrupt
 * @retval uint8_t : errNum
 */
HAL_StatusTypeDef TCAL9538RSVR_HandleInterrupt(TCAL9538RSVR* dev)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
    uint8_t errNum = 0;
 8003058:	2300      	movs	r3, #0
 800305a:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status;
    uint8_t triggeredInterrupts = 0;
 800305c:	2300      	movs	r3, #0
 800305e:	737b      	strb	r3, [r7, #13]


    // read interrupt status register, puts a bit mask of the pin that triggered the interrupt in intPinBitMask
    status = TCAL9538RSVR_ReadRegister(dev, TCAL9538RSVR_INT_STATUS, &triggeredInterrupts);
 8003060:	f107 030d 	add.w	r3, r7, #13
 8003064:	461a      	mov	r2, r3
 8003066:	2146      	movs	r1, #70	@ 0x46
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 f837 	bl	80030dc <TCAL9538RSVR_ReadRegister>
 800306e:	4603      	mov	r3, r0
 8003070:	73bb      	strb	r3, [r7, #14]
    errNum += (status != HAL_OK);
 8003072:	7bbb      	ldrb	r3, [r7, #14]
 8003074:	2b00      	cmp	r3, #0
 8003076:	bf14      	ite	ne
 8003078:	2301      	movne	r3, #1
 800307a:	2300      	moveq	r3, #0
 800307c:	b2db      	uxtb	r3, r3
 800307e:	461a      	mov	r2, r3
 8003080:	7bfb      	ldrb	r3, [r7, #15]
 8003082:	4413      	add	r3, r2
 8003084:	73fb      	strb	r3, [r7, #15]

    // Read updated input values
    status = TCAL9538RSVR_ReadInput(dev, &dev->portValues);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	3305      	adds	r3, #5
 800308a:	4619      	mov	r1, r3
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f807 	bl	80030a0 <TCAL9538RSVR_ReadInput>
 8003092:	4603      	mov	r3, r0
 8003094:	73bb      	strb	r3, [r7, #14]


    return (errNum);
 8003096:	7bfb      	ldrb	r3, [r7, #15]
}
 8003098:	4618      	mov	r0, r3
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <TCAL9538RSVR_ReadInput>:




HAL_StatusTypeDef TCAL9538RSVR_ReadInput(TCAL9538RSVR* dev, uint8_t *data)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_ReadRegister(dev, TCAL9538RSVR_GPIO_INPUT, data);
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	2100      	movs	r1, #0
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f814 	bl	80030dc <TCAL9538RSVR_ReadRegister>
 80030b4:	4603      	mov	r3, r0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <TCAL9538RSVR_SetOutput>:
HAL_StatusTypeDef TCAL9538RSVR_SetOutput(TCAL9538RSVR* dev, uint8_t *data)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b082      	sub	sp, #8
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
 80030c6:	6039      	str	r1, [r7, #0]
    return TCAL9538RSVR_WriteRegister(dev, TCAL9538RSVR_GPIO_OUTPUT, data);
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	2101      	movs	r1, #1
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 f822 	bl	8003116 <TCAL9538RSVR_WriteRegister>
 80030d2:	4603      	mov	r3, r0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3708      	adds	r7, #8
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <TCAL9538RSVR_ReadRegister>:

//low level functions
HAL_StatusTypeDef TCAL9538RSVR_ReadRegister(TCAL9538RSVR *dev, uint8_t reg, uint8_t *data)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b088      	sub	sp, #32
 80030e0:	af04      	add	r7, sp, #16
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	460b      	mov	r3, r1
 80030e6:	607a      	str	r2, [r7, #4]
 80030e8:	72fb      	strb	r3, [r7, #11]
    return(HAL_I2C_Mem_Read(dev->i2cHandle, dev->deviceAddress, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY));
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6818      	ldr	r0, [r3, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	791b      	ldrb	r3, [r3, #4]
 80030f2:	4619      	mov	r1, r3
 80030f4:	7afb      	ldrb	r3, [r7, #11]
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	f04f 33ff 	mov.w	r3, #4294967295
 80030fc:	9302      	str	r3, [sp, #8]
 80030fe:	2301      	movs	r3, #1
 8003100:	9301      	str	r3, [sp, #4]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	2301      	movs	r3, #1
 8003108:	f002 feac 	bl	8005e64 <HAL_I2C_Mem_Read>
 800310c:	4603      	mov	r3, r0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <TCAL9538RSVR_WriteRegister>:
HAL_StatusTypeDef TCAL9538RSVR_WriteRegister(TCAL9538RSVR *dev, uint8_t reg, uint8_t *data)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b088      	sub	sp, #32
 800311a:	af04      	add	r7, sp, #16
 800311c:	60f8      	str	r0, [r7, #12]
 800311e:	460b      	mov	r3, r1
 8003120:	607a      	str	r2, [r7, #4]
 8003122:	72fb      	strb	r3, [r7, #11]
    return(HAL_I2C_Mem_Write(dev->i2cHandle, dev->deviceAddress, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY));
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6818      	ldr	r0, [r3, #0]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	791b      	ldrb	r3, [r3, #4]
 800312c:	4619      	mov	r1, r3
 800312e:	7afb      	ldrb	r3, [r7, #11]
 8003130:	b29a      	uxth	r2, r3
 8003132:	f04f 33ff 	mov.w	r3, #4294967295
 8003136:	9302      	str	r3, [sp, #8]
 8003138:	2301      	movs	r3, #1
 800313a:	9301      	str	r3, [sp, #4]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	9300      	str	r3, [sp, #0]
 8003140:	2301      	movs	r3, #1
 8003142:	f002 fd7b 	bl	8005c3c <HAL_I2C_Mem_Write>
 8003146:	4603      	mov	r3, r0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3710      	adds	r7, #16
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003150:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003188 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003154:	f7fe ff84 	bl	8002060 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003158:	480c      	ldr	r0, [pc, #48]	@ (800318c <LoopForever+0x6>)
  ldr r1, =_edata
 800315a:	490d      	ldr	r1, [pc, #52]	@ (8003190 <LoopForever+0xa>)
  ldr r2, =_sidata
 800315c:	4a0d      	ldr	r2, [pc, #52]	@ (8003194 <LoopForever+0xe>)
  movs r3, #0
 800315e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003160:	e002      	b.n	8003168 <LoopCopyDataInit>

08003162 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003162:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003164:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003166:	3304      	adds	r3, #4

08003168 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003168:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800316a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800316c:	d3f9      	bcc.n	8003162 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800316e:	4a0a      	ldr	r2, [pc, #40]	@ (8003198 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003170:	4c0a      	ldr	r4, [pc, #40]	@ (800319c <LoopForever+0x16>)
  movs r3, #0
 8003172:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003174:	e001      	b.n	800317a <LoopFillZerobss>

08003176 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003176:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003178:	3204      	adds	r2, #4

0800317a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800317a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800317c:	d3fb      	bcc.n	8003176 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800317e:	f009 fc91 	bl	800caa4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003182:	f7fe f8e3 	bl	800134c <main>

08003186 <LoopForever>:

LoopForever:
    b LoopForever
 8003186:	e7fe      	b.n	8003186 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003188:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800318c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003190:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8003194:	0800d2bc 	.word	0x0800d2bc
  ldr r2, =_sbss
 8003198:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800319c:	20002a20 	.word	0x20002a20

080031a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80031a0:	e7fe      	b.n	80031a0 <ADC1_2_IRQHandler>

080031a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b082      	sub	sp, #8
 80031a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80031a8:	2300      	movs	r3, #0
 80031aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031ac:	2003      	movs	r0, #3
 80031ae:	f002 f822 	bl	80051f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80031b2:	200f      	movs	r0, #15
 80031b4:	f7fe fe9a 	bl	8001eec <HAL_InitTick>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d002      	beq.n	80031c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	71fb      	strb	r3, [r7, #7]
 80031c2:	e001      	b.n	80031c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80031c4:	f7fe fc64 	bl	8001a90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80031c8:	79fb      	ldrb	r3, [r7, #7]
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
	...

080031d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80031d8:	4b06      	ldr	r3, [pc, #24]	@ (80031f4 <HAL_IncTick+0x20>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	461a      	mov	r2, r3
 80031de:	4b06      	ldr	r3, [pc, #24]	@ (80031f8 <HAL_IncTick+0x24>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4413      	add	r3, r2
 80031e4:	4a04      	ldr	r2, [pc, #16]	@ (80031f8 <HAL_IncTick+0x24>)
 80031e6:	6013      	str	r3, [r2, #0]
}
 80031e8:	bf00      	nop
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	20000008 	.word	0x20000008
 80031f8:	20000384 	.word	0x20000384

080031fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  return uwTick;
 8003200:	4b03      	ldr	r3, [pc, #12]	@ (8003210 <HAL_GetTick+0x14>)
 8003202:	681b      	ldr	r3, [r3, #0]
}
 8003204:	4618      	mov	r0, r3
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	20000384 	.word	0x20000384

08003214 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800321c:	f7ff ffee 	bl	80031fc <HAL_GetTick>
 8003220:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800322c:	d005      	beq.n	800323a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800322e:	4b0a      	ldr	r3, [pc, #40]	@ (8003258 <HAL_Delay+0x44>)
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	461a      	mov	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	4413      	add	r3, r2
 8003238:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800323a:	bf00      	nop
 800323c:	f7ff ffde 	bl	80031fc <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	429a      	cmp	r2, r3
 800324a:	d8f7      	bhi.n	800323c <HAL_Delay+0x28>
  {
  }
}
 800324c:	bf00      	nop
 800324e:	bf00      	nop
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	20000008 	.word	0x20000008

0800325c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	431a      	orrs	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	609a      	str	r2, [r3, #8]
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr

08003282 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003282:	b480      	push	{r7}
 8003284:	b083      	sub	sp, #12
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
 800328a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	431a      	orrs	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	609a      	str	r2, [r3, #8]
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b087      	sub	sp, #28
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
 80032d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	3360      	adds	r3, #96	@ 0x60
 80032d6:	461a      	mov	r2, r3
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4413      	add	r3, r2
 80032de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	4b08      	ldr	r3, [pc, #32]	@ (8003308 <LL_ADC_SetOffset+0x44>)
 80032e6:	4013      	ands	r3, r2
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	4313      	orrs	r3, r2
 80032f4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80032fc:	bf00      	nop
 80032fe:	371c      	adds	r7, #28
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	03fff000 	.word	0x03fff000

0800330c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	3360      	adds	r3, #96	@ 0x60
 800331a:	461a      	mov	r2, r3
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4413      	add	r3, r2
 8003322:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800332c:	4618      	mov	r0, r3
 800332e:	3714      	adds	r7, #20
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003338:	b480      	push	{r7}
 800333a:	b087      	sub	sp, #28
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	3360      	adds	r3, #96	@ 0x60
 8003348:	461a      	mov	r2, r3
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4413      	add	r3, r2
 8003350:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	431a      	orrs	r2, r3
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003362:	bf00      	nop
 8003364:	371c      	adds	r7, #28
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr

0800336e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800336e:	b480      	push	{r7}
 8003370:	b083      	sub	sp, #12
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
 8003376:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	431a      	orrs	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	615a      	str	r2, [r3, #20]
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d101      	bne.n	80033ac <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80033a8:	2301      	movs	r3, #1
 80033aa:	e000      	b.n	80033ae <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80033ba:	b480      	push	{r7}
 80033bc:	b087      	sub	sp, #28
 80033be:	af00      	add	r7, sp, #0
 80033c0:	60f8      	str	r0, [r7, #12]
 80033c2:	60b9      	str	r1, [r7, #8]
 80033c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	3330      	adds	r3, #48	@ 0x30
 80033ca:	461a      	mov	r2, r3
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	0a1b      	lsrs	r3, r3, #8
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	f003 030c 	and.w	r3, r3, #12
 80033d6:	4413      	add	r3, r2
 80033d8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	f003 031f 	and.w	r3, r3, #31
 80033e4:	211f      	movs	r1, #31
 80033e6:	fa01 f303 	lsl.w	r3, r1, r3
 80033ea:	43db      	mvns	r3, r3
 80033ec:	401a      	ands	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	0e9b      	lsrs	r3, r3, #26
 80033f2:	f003 011f 	and.w	r1, r3, #31
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	f003 031f 	and.w	r3, r3, #31
 80033fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003400:	431a      	orrs	r2, r3
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003406:	bf00      	nop
 8003408:	371c      	adds	r7, #28
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003412:	b480      	push	{r7}
 8003414:	b087      	sub	sp, #28
 8003416:	af00      	add	r7, sp, #0
 8003418:	60f8      	str	r0, [r7, #12]
 800341a:	60b9      	str	r1, [r7, #8]
 800341c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	3314      	adds	r3, #20
 8003422:	461a      	mov	r2, r3
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	0e5b      	lsrs	r3, r3, #25
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	f003 0304 	and.w	r3, r3, #4
 800342e:	4413      	add	r3, r2
 8003430:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	0d1b      	lsrs	r3, r3, #20
 800343a:	f003 031f 	and.w	r3, r3, #31
 800343e:	2107      	movs	r1, #7
 8003440:	fa01 f303 	lsl.w	r3, r1, r3
 8003444:	43db      	mvns	r3, r3
 8003446:	401a      	ands	r2, r3
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	0d1b      	lsrs	r3, r3, #20
 800344c:	f003 031f 	and.w	r3, r3, #31
 8003450:	6879      	ldr	r1, [r7, #4]
 8003452:	fa01 f303 	lsl.w	r3, r1, r3
 8003456:	431a      	orrs	r2, r3
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800345c:	bf00      	nop
 800345e:	371c      	adds	r7, #28
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003480:	43db      	mvns	r3, r3
 8003482:	401a      	ands	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f003 0318 	and.w	r3, r3, #24
 800348a:	4908      	ldr	r1, [pc, #32]	@ (80034ac <LL_ADC_SetChannelSingleDiff+0x44>)
 800348c:	40d9      	lsrs	r1, r3
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	400b      	ands	r3, r1
 8003492:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003496:	431a      	orrs	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800349e:	bf00      	nop
 80034a0:	3714      	adds	r7, #20
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	0007ffff 	.word	0x0007ffff

080034b0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f003 031f 	and.w	r3, r3, #31
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80034dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	6093      	str	r3, [r2, #8]
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003500:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003504:	d101      	bne.n	800350a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003506:	2301      	movs	r3, #1
 8003508:	e000      	b.n	800350c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003528:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800352c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003550:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003554:	d101      	bne.n	800355a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003556:	2301      	movs	r3, #1
 8003558:	e000      	b.n	800355c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003578:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800357c:	f043 0201 	orr.w	r2, r3, #1
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80035a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80035a4:	f043 0202 	orr.w	r2, r3, #2
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d101      	bne.n	80035d0 <LL_ADC_IsEnabled+0x18>
 80035cc:	2301      	movs	r3, #1
 80035ce:	e000      	b.n	80035d2 <LL_ADC_IsEnabled+0x1a>
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr

080035de <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80035de:	b480      	push	{r7}
 80035e0:	b083      	sub	sp, #12
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d101      	bne.n	80035f6 <LL_ADC_IsDisableOngoing+0x18>
 80035f2:	2301      	movs	r3, #1
 80035f4:	e000      	b.n	80035f8 <LL_ADC_IsDisableOngoing+0x1a>
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003614:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003618:	f043 0204 	orr.w	r2, r3, #4
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800363c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003640:	f043 0210 	orr.w	r2, r3, #16
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	2b04      	cmp	r3, #4
 8003666:	d101      	bne.n	800366c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003668:	2301      	movs	r3, #1
 800366a:	e000      	b.n	800366e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr

0800367a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800367a:	b480      	push	{r7}
 800367c:	b083      	sub	sp, #12
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800368a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800368e:	f043 0220 	orr.w	r2, r3, #32
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b083      	sub	sp, #12
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f003 0308 	and.w	r3, r3, #8
 80036b2:	2b08      	cmp	r3, #8
 80036b4:	d101      	bne.n	80036ba <LL_ADC_INJ_IsConversionOngoing+0x18>
 80036b6:	2301      	movs	r3, #1
 80036b8:	e000      	b.n	80036bc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80036c8:	b590      	push	{r4, r7, lr}
 80036ca:	b089      	sub	sp, #36	@ 0x24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036d0:	2300      	movs	r3, #0
 80036d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80036d4:	2300      	movs	r3, #0
 80036d6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e133      	b.n	800394a <HAL_ADC_Init+0x282>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d109      	bne.n	8003704 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f7fe f9f5 	bl	8001ae0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4618      	mov	r0, r3
 800370a:	f7ff fef1 	bl	80034f0 <LL_ADC_IsDeepPowerDownEnabled>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d004      	beq.n	800371e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4618      	mov	r0, r3
 800371a:	f7ff fed7 	bl	80034cc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4618      	mov	r0, r3
 8003724:	f7ff ff0c 	bl	8003540 <LL_ADC_IsInternalRegulatorEnabled>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d115      	bne.n	800375a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff fef0 	bl	8003518 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003738:	4b86      	ldr	r3, [pc, #536]	@ (8003954 <HAL_ADC_Init+0x28c>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	099b      	lsrs	r3, r3, #6
 800373e:	4a86      	ldr	r2, [pc, #536]	@ (8003958 <HAL_ADC_Init+0x290>)
 8003740:	fba2 2303 	umull	r2, r3, r2, r3
 8003744:	099b      	lsrs	r3, r3, #6
 8003746:	3301      	adds	r3, #1
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800374c:	e002      	b.n	8003754 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	3b01      	subs	r3, #1
 8003752:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1f9      	bne.n	800374e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4618      	mov	r0, r3
 8003760:	f7ff feee 	bl	8003540 <LL_ADC_IsInternalRegulatorEnabled>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10d      	bne.n	8003786 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800376e:	f043 0210 	orr.w	r2, r3, #16
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800377a:	f043 0201 	orr.w	r2, r3, #1
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f7ff ff62 	bl	8003654 <LL_ADC_REG_IsConversionOngoing>
 8003790:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003796:	f003 0310 	and.w	r3, r3, #16
 800379a:	2b00      	cmp	r3, #0
 800379c:	f040 80cc 	bne.w	8003938 <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f040 80c8 	bne.w	8003938 <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ac:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80037b0:	f043 0202 	orr.w	r2, r3, #2
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4618      	mov	r0, r3
 80037be:	f7ff fefb 	bl	80035b8 <LL_ADC_IsEnabled>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d115      	bne.n	80037f4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037c8:	4864      	ldr	r0, [pc, #400]	@ (800395c <HAL_ADC_Init+0x294>)
 80037ca:	f7ff fef5 	bl	80035b8 <LL_ADC_IsEnabled>
 80037ce:	4604      	mov	r4, r0
 80037d0:	4863      	ldr	r0, [pc, #396]	@ (8003960 <HAL_ADC_Init+0x298>)
 80037d2:	f7ff fef1 	bl	80035b8 <LL_ADC_IsEnabled>
 80037d6:	4603      	mov	r3, r0
 80037d8:	431c      	orrs	r4, r3
 80037da:	4862      	ldr	r0, [pc, #392]	@ (8003964 <HAL_ADC_Init+0x29c>)
 80037dc:	f7ff feec 	bl	80035b8 <LL_ADC_IsEnabled>
 80037e0:	4603      	mov	r3, r0
 80037e2:	4323      	orrs	r3, r4
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d105      	bne.n	80037f4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	4619      	mov	r1, r3
 80037ee:	485e      	ldr	r0, [pc, #376]	@ (8003968 <HAL_ADC_Init+0x2a0>)
 80037f0:	f7ff fd34 	bl	800325c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	7e5b      	ldrb	r3, [r3, #25]
 80037f8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80037fe:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003804:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800380a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003812:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003814:	4313      	orrs	r3, r2
 8003816:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d106      	bne.n	8003830 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003826:	3b01      	subs	r3, #1
 8003828:	045b      	lsls	r3, r3, #17
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	4313      	orrs	r3, r2
 800382e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003834:	2b00      	cmp	r3, #0
 8003836:	d009      	beq.n	800384c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800383c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003844:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003846:	69ba      	ldr	r2, [r7, #24]
 8003848:	4313      	orrs	r3, r2
 800384a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68da      	ldr	r2, [r3, #12]
 8003852:	4b46      	ldr	r3, [pc, #280]	@ (800396c <HAL_ADC_Init+0x2a4>)
 8003854:	4013      	ands	r3, r2
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6812      	ldr	r2, [r2, #0]
 800385a:	69b9      	ldr	r1, [r7, #24]
 800385c:	430b      	orrs	r3, r1
 800385e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4618      	mov	r0, r3
 8003866:	f7ff ff1c 	bl	80036a2 <LL_ADC_INJ_IsConversionOngoing>
 800386a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d140      	bne.n	80038f4 <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d13d      	bne.n	80038f4 <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	7e1b      	ldrb	r3, [r3, #24]
 8003880:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003882:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800388a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800388c:	4313      	orrs	r3, r2
 800388e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800389a:	f023 0306 	bic.w	r3, r3, #6
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	6812      	ldr	r2, [r2, #0]
 80038a2:	69b9      	ldr	r1, [r7, #24]
 80038a4:	430b      	orrs	r3, r1
 80038a6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d118      	bne.n	80038e4 <HAL_ADC_Init+0x21c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80038bc:	f023 0304 	bic.w	r3, r3, #4
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80038c8:	4311      	orrs	r1, r2
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80038ce:	4311      	orrs	r1, r2
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80038d4:	430a      	orrs	r2, r1
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f042 0201 	orr.w	r2, r2, #1
 80038e0:	611a      	str	r2, [r3, #16]
 80038e2:	e007      	b.n	80038f4 <HAL_ADC_Init+0x22c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	691a      	ldr	r2, [r3, #16]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 0201 	bic.w	r2, r2, #1
 80038f2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d10c      	bne.n	8003916 <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003902:	f023 010f 	bic.w	r1, r3, #15
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	1e5a      	subs	r2, r3, #1
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	430a      	orrs	r2, r1
 8003912:	631a      	str	r2, [r3, #48]	@ 0x30
 8003914:	e007      	b.n	8003926 <HAL_ADC_Init+0x25e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 020f 	bic.w	r2, r2, #15
 8003924:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800392a:	f023 0303 	bic.w	r3, r3, #3
 800392e:	f043 0201 	orr.w	r2, r3, #1
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	659a      	str	r2, [r3, #88]	@ 0x58
 8003936:	e007      	b.n	8003948 <HAL_ADC_Init+0x280>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800393c:	f043 0210 	orr.w	r2, r3, #16
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003948:	7ffb      	ldrb	r3, [r7, #31]
}
 800394a:	4618      	mov	r0, r3
 800394c:	3724      	adds	r7, #36	@ 0x24
 800394e:	46bd      	mov	sp, r7
 8003950:	bd90      	pop	{r4, r7, pc}
 8003952:	bf00      	nop
 8003954:	20000000 	.word	0x20000000
 8003958:	053e2d63 	.word	0x053e2d63
 800395c:	50040000 	.word	0x50040000
 8003960:	50040100 	.word	0x50040100
 8003964:	50040200 	.word	0x50040200
 8003968:	50040300 	.word	0x50040300
 800396c:	fff0c007 	.word	0xfff0c007

08003970 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800397c:	4853      	ldr	r0, [pc, #332]	@ (8003acc <HAL_ADC_Start_DMA+0x15c>)
 800397e:	f7ff fd97 	bl	80034b0 <LL_ADC_GetMultimode>
 8003982:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4618      	mov	r0, r3
 800398a:	f7ff fe63 	bl	8003654 <LL_ADC_REG_IsConversionOngoing>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	f040 8093 	bne.w	8003abc <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800399c:	2b01      	cmp	r3, #1
 800399e:	d101      	bne.n	80039a4 <HAL_ADC_Start_DMA+0x34>
 80039a0:	2302      	movs	r3, #2
 80039a2:	e08e      	b.n	8003ac2 <HAL_ADC_Start_DMA+0x152>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a47      	ldr	r2, [pc, #284]	@ (8003ad0 <HAL_ADC_Start_DMA+0x160>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d008      	beq.n	80039c8 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d005      	beq.n	80039c8 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	2b05      	cmp	r3, #5
 80039c0:	d002      	beq.n	80039c8 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	2b09      	cmp	r3, #9
 80039c6:	d172      	bne.n	8003aae <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f000 fdcb 	bl	8004564 <ADC_Enable>
 80039ce:	4603      	mov	r3, r0
 80039d0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80039d2:	7dfb      	ldrb	r3, [r7, #23]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d165      	bne.n	8003aa4 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039dc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80039e0:	f023 0301 	bic.w	r3, r3, #1
 80039e4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a38      	ldr	r2, [pc, #224]	@ (8003ad4 <HAL_ADC_Start_DMA+0x164>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d002      	beq.n	80039fc <HAL_ADC_Start_DMA+0x8c>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	e000      	b.n	80039fe <HAL_ADC_Start_DMA+0x8e>
 80039fc:	4b36      	ldr	r3, [pc, #216]	@ (8003ad8 <HAL_ADC_Start_DMA+0x168>)
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	6812      	ldr	r2, [r2, #0]
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d002      	beq.n	8003a0c <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d105      	bne.n	8003a18 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a10:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d006      	beq.n	8003a32 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a28:	f023 0206 	bic.w	r2, r3, #6
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003a30:	e002      	b.n	8003a38 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a3c:	4a27      	ldr	r2, [pc, #156]	@ (8003adc <HAL_ADC_Start_DMA+0x16c>)
 8003a3e:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a44:	4a26      	ldr	r2, [pc, #152]	@ (8003ae0 <HAL_ADC_Start_DMA+0x170>)
 8003a46:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a4c:	4a25      	ldr	r2, [pc, #148]	@ (8003ae4 <HAL_ADC_Start_DMA+0x174>)
 8003a4e:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	221c      	movs	r2, #28
 8003a56:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685a      	ldr	r2, [r3, #4]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f042 0210 	orr.w	r2, r2, #16
 8003a6e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68da      	ldr	r2, [r3, #12]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0201 	orr.w	r2, r2, #1
 8003a7e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	3340      	adds	r3, #64	@ 0x40
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f001 fc9e 	bl	80053d0 <HAL_DMA_Start_IT>
 8003a94:	4603      	mov	r3, r0
 8003a96:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7ff fdb1 	bl	8003604 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003aa2:	e00d      	b.n	8003ac0 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      if (tmp_hal_status == HAL_OK)
 8003aac:	e008      	b.n	8003ac0 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8003aba:	e001      	b.n	8003ac0 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003abc:	2302      	movs	r3, #2
 8003abe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003ac0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3718      	adds	r7, #24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	50040300 	.word	0x50040300
 8003ad0:	50040200 	.word	0x50040200
 8003ad4:	50040100 	.word	0x50040100
 8003ad8:	50040000 	.word	0x50040000
 8003adc:	0800472f 	.word	0x0800472f
 8003ae0:	08004807 	.word	0x08004807
 8003ae4:	08004823 	.word	0x08004823

08003ae8 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d101      	bne.n	8003afe <HAL_ADC_Stop_DMA+0x16>
 8003afa:	2302      	movs	r3, #2
 8003afc:	e051      	b.n	8003ba2 <HAL_ADC_Stop_DMA+0xba>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003b06:	2103      	movs	r1, #3
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 fc6f 	bl	80043ec <ADC_ConversionStop>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003b12:	7bfb      	ldrb	r3, [r7, #15]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d13f      	bne.n	8003b98 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68da      	ldr	r2, [r3, #12]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f022 0201 	bic.w	r2, r2, #1
 8003b26:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b2c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d10f      	bne.n	8003b56 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f001 fca8 	bl	8005490 <HAL_DMA_Abort>
 8003b40:	4603      	mov	r3, r0
 8003b42:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003b44:	7bfb      	ldrb	r3, [r7, #15]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d005      	beq.n	8003b56 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b4e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	659a      	str	r2, [r3, #88]	@ 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 0210 	bic.w	r2, r2, #16
 8003b64:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8003b66:	7bfb      	ldrb	r3, [r7, #15]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d105      	bne.n	8003b78 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 fd7f 	bl	8004670 <ADC_Disable>
 8003b72:	4603      	mov	r3, r0
 8003b74:	73fb      	strb	r3, [r7, #15]
 8003b76:	e002      	b.n	8003b7e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 fd79 	bl	8004670 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003b7e:	7bfb      	ldrb	r3, [r7, #15]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d109      	bne.n	8003b98 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b88:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003b8c:	f023 0301 	bic.w	r3, r3, #1
 8003b90:	f043 0201 	orr.w	r2, r3, #1
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003baa:	b480      	push	{r7}
 8003bac:	b083      	sub	sp, #12
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003bb2:	bf00      	nop
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b083      	sub	sp, #12
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003bc6:	bf00      	nop
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
	...

08003bd4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b0b6      	sub	sp, #216	@ 0xd8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bde:	2300      	movs	r3, #0
 8003be0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003be4:	2300      	movs	r3, #0
 8003be6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d101      	bne.n	8003bf6 <HAL_ADC_ConfigChannel+0x22>
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	e3e3      	b.n	80043be <HAL_ADC_ConfigChannel+0x7ea>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7ff fd26 	bl	8003654 <LL_ADC_REG_IsConversionOngoing>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	f040 83c4 	bne.w	8004398 <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	2b05      	cmp	r3, #5
 8003c1e:	d824      	bhi.n	8003c6a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	3b02      	subs	r3, #2
 8003c26:	2b03      	cmp	r3, #3
 8003c28:	d81b      	bhi.n	8003c62 <HAL_ADC_ConfigChannel+0x8e>
 8003c2a:	a201      	add	r2, pc, #4	@ (adr r2, 8003c30 <HAL_ADC_ConfigChannel+0x5c>)
 8003c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c30:	08003c41 	.word	0x08003c41
 8003c34:	08003c49 	.word	0x08003c49
 8003c38:	08003c51 	.word	0x08003c51
 8003c3c:	08003c59 	.word	0x08003c59
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003c40:	230c      	movs	r3, #12
 8003c42:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003c46:	e010      	b.n	8003c6a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003c48:	2312      	movs	r3, #18
 8003c4a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003c4e:	e00c      	b.n	8003c6a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003c50:	2318      	movs	r3, #24
 8003c52:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003c56:	e008      	b.n	8003c6a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003c58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003c5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003c60:	e003      	b.n	8003c6a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8003c62:	2306      	movs	r3, #6
 8003c64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003c68:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6818      	ldr	r0, [r3, #0]
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	461a      	mov	r2, r3
 8003c74:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003c78:	f7ff fb9f 	bl	80033ba <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7ff fce7 	bl	8003654 <LL_ADC_REG_IsConversionOngoing>
 8003c86:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7ff fd07 	bl	80036a2 <LL_ADC_INJ_IsConversionOngoing>
 8003c94:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f040 81bf 	bne.w	8004020 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ca2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f040 81ba 	bne.w	8004020 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003cb4:	d10f      	bne.n	8003cd6 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6818      	ldr	r0, [r3, #0]
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	f7ff fba6 	bl	8003412 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7ff fb4d 	bl	800336e <LL_ADC_SetSamplingTimeCommonConfig>
 8003cd4:	e00e      	b.n	8003cf4 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6818      	ldr	r0, [r3, #0]
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	6819      	ldr	r1, [r3, #0]
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	f7ff fb95 	bl	8003412 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2100      	movs	r1, #0
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7ff fb3d 	bl	800336e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	695a      	ldr	r2, [r3, #20]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	08db      	lsrs	r3, r3, #3
 8003d00:	f003 0303 	and.w	r3, r3, #3
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	2b04      	cmp	r3, #4
 8003d14:	d00a      	beq.n	8003d2c <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6818      	ldr	r0, [r3, #0]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	6919      	ldr	r1, [r3, #16]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003d26:	f7ff facd 	bl	80032c4 <LL_ADC_SetOffset>
 8003d2a:	e179      	b.n	8004020 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2100      	movs	r1, #0
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7ff faea 	bl	800330c <LL_ADC_GetOffsetChannel>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10a      	bne.n	8003d58 <HAL_ADC_ConfigChannel+0x184>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2100      	movs	r1, #0
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7ff fadf 	bl	800330c <LL_ADC_GetOffsetChannel>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	0e9b      	lsrs	r3, r3, #26
 8003d52:	f003 021f 	and.w	r2, r3, #31
 8003d56:	e01e      	b.n	8003d96 <HAL_ADC_ConfigChannel+0x1c2>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7ff fad4 	bl	800330c <LL_ADC_GetOffsetChannel>
 8003d64:	4603      	mov	r3, r0
 8003d66:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003d6e:	fa93 f3a3 	rbit	r3, r3
 8003d72:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003d76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003d7a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003d7e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8003d86:	2320      	movs	r3, #32
 8003d88:	e004      	b.n	8003d94 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8003d8a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003d8e:	fab3 f383 	clz	r3, r3
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d105      	bne.n	8003dae <HAL_ADC_ConfigChannel+0x1da>
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	0e9b      	lsrs	r3, r3, #26
 8003da8:	f003 031f 	and.w	r3, r3, #31
 8003dac:	e018      	b.n	8003de0 <HAL_ADC_ConfigChannel+0x20c>
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003dba:	fa93 f3a3 	rbit	r3, r3
 8003dbe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003dc2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003dc6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003dca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8003dd2:	2320      	movs	r3, #32
 8003dd4:	e004      	b.n	8003de0 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8003dd6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003dda:	fab3 f383 	clz	r3, r3
 8003dde:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d106      	bne.n	8003df2 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2200      	movs	r2, #0
 8003dea:	2100      	movs	r1, #0
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7ff faa3 	bl	8003338 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2101      	movs	r1, #1
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7ff fa87 	bl	800330c <LL_ADC_GetOffsetChannel>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d10a      	bne.n	8003e1e <HAL_ADC_ConfigChannel+0x24a>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2101      	movs	r1, #1
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7ff fa7c 	bl	800330c <LL_ADC_GetOffsetChannel>
 8003e14:	4603      	mov	r3, r0
 8003e16:	0e9b      	lsrs	r3, r3, #26
 8003e18:	f003 021f 	and.w	r2, r3, #31
 8003e1c:	e01e      	b.n	8003e5c <HAL_ADC_ConfigChannel+0x288>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2101      	movs	r1, #1
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7ff fa71 	bl	800330c <LL_ADC_GetOffsetChannel>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003e34:	fa93 f3a3 	rbit	r3, r3
 8003e38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003e3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003e40:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003e44:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d101      	bne.n	8003e50 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8003e4c:	2320      	movs	r3, #32
 8003e4e:	e004      	b.n	8003e5a <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8003e50:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003e54:	fab3 f383 	clz	r3, r3
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d105      	bne.n	8003e74 <HAL_ADC_ConfigChannel+0x2a0>
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	0e9b      	lsrs	r3, r3, #26
 8003e6e:	f003 031f 	and.w	r3, r3, #31
 8003e72:	e018      	b.n	8003ea6 <HAL_ADC_ConfigChannel+0x2d2>
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e80:	fa93 f3a3 	rbit	r3, r3
 8003e84:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003e88:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003e8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003e90:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d101      	bne.n	8003e9c <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8003e98:	2320      	movs	r3, #32
 8003e9a:	e004      	b.n	8003ea6 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8003e9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ea0:	fab3 f383 	clz	r3, r3
 8003ea4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d106      	bne.n	8003eb8 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	2101      	movs	r1, #1
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7ff fa40 	bl	8003338 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2102      	movs	r1, #2
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7ff fa24 	bl	800330c <LL_ADC_GetOffsetChannel>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10a      	bne.n	8003ee4 <HAL_ADC_ConfigChannel+0x310>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2102      	movs	r1, #2
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7ff fa19 	bl	800330c <LL_ADC_GetOffsetChannel>
 8003eda:	4603      	mov	r3, r0
 8003edc:	0e9b      	lsrs	r3, r3, #26
 8003ede:	f003 021f 	and.w	r2, r3, #31
 8003ee2:	e01e      	b.n	8003f22 <HAL_ADC_ConfigChannel+0x34e>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2102      	movs	r1, #2
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7ff fa0e 	bl	800330c <LL_ADC_GetOffsetChannel>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003efa:	fa93 f3a3 	rbit	r3, r3
 8003efe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003f02:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003f0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8003f12:	2320      	movs	r3, #32
 8003f14:	e004      	b.n	8003f20 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8003f16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f1a:	fab3 f383 	clz	r3, r3
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d105      	bne.n	8003f3a <HAL_ADC_ConfigChannel+0x366>
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	0e9b      	lsrs	r3, r3, #26
 8003f34:	f003 031f 	and.w	r3, r3, #31
 8003f38:	e014      	b.n	8003f64 <HAL_ADC_ConfigChannel+0x390>
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f40:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f42:	fa93 f3a3 	rbit	r3, r3
 8003f46:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003f48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f4a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003f4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d101      	bne.n	8003f5a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8003f56:	2320      	movs	r3, #32
 8003f58:	e004      	b.n	8003f64 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8003f5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f5e:	fab3 f383 	clz	r3, r3
 8003f62:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d106      	bne.n	8003f76 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	2102      	movs	r1, #2
 8003f70:	4618      	mov	r0, r3
 8003f72:	f7ff f9e1 	bl	8003338 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2103      	movs	r1, #3
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7ff f9c5 	bl	800330c <LL_ADC_GetOffsetChannel>
 8003f82:	4603      	mov	r3, r0
 8003f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10a      	bne.n	8003fa2 <HAL_ADC_ConfigChannel+0x3ce>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2103      	movs	r1, #3
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7ff f9ba 	bl	800330c <LL_ADC_GetOffsetChannel>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	0e9b      	lsrs	r3, r3, #26
 8003f9c:	f003 021f 	and.w	r2, r3, #31
 8003fa0:	e017      	b.n	8003fd2 <HAL_ADC_ConfigChannel+0x3fe>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2103      	movs	r1, #3
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7ff f9af 	bl	800330c <LL_ADC_GetOffsetChannel>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003fb4:	fa93 f3a3 	rbit	r3, r3
 8003fb8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003fba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fbc:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003fbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8003fc4:	2320      	movs	r3, #32
 8003fc6:	e003      	b.n	8003fd0 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8003fc8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fca:	fab3 f383 	clz	r3, r3
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d105      	bne.n	8003fea <HAL_ADC_ConfigChannel+0x416>
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	0e9b      	lsrs	r3, r3, #26
 8003fe4:	f003 031f 	and.w	r3, r3, #31
 8003fe8:	e011      	b.n	800400e <HAL_ADC_ConfigChannel+0x43a>
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ff2:	fa93 f3a3 	rbit	r3, r3
 8003ff6:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003ff8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ffa:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003ffc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8004002:	2320      	movs	r3, #32
 8004004:	e003      	b.n	800400e <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8004006:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004008:	fab3 f383 	clz	r3, r3
 800400c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800400e:	429a      	cmp	r2, r3
 8004010:	d106      	bne.n	8004020 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2200      	movs	r2, #0
 8004018:	2103      	movs	r1, #3
 800401a:	4618      	mov	r0, r3
 800401c:	f7ff f98c 	bl	8003338 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4618      	mov	r0, r3
 8004026:	f7ff fac7 	bl	80035b8 <LL_ADC_IsEnabled>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	f040 813f 	bne.w	80042b0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6818      	ldr	r0, [r3, #0]
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	6819      	ldr	r1, [r3, #0]
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	461a      	mov	r2, r3
 8004040:	f7ff fa12 	bl	8003468 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	4a8e      	ldr	r2, [pc, #568]	@ (8004284 <HAL_ADC_ConfigChannel+0x6b0>)
 800404a:	4293      	cmp	r3, r2
 800404c:	f040 8130 	bne.w	80042b0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10b      	bne.n	8004078 <HAL_ADC_ConfigChannel+0x4a4>
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	0e9b      	lsrs	r3, r3, #26
 8004066:	3301      	adds	r3, #1
 8004068:	f003 031f 	and.w	r3, r3, #31
 800406c:	2b09      	cmp	r3, #9
 800406e:	bf94      	ite	ls
 8004070:	2301      	movls	r3, #1
 8004072:	2300      	movhi	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	e019      	b.n	80040ac <HAL_ADC_ConfigChannel+0x4d8>
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004080:	fa93 f3a3 	rbit	r3, r3
 8004084:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004086:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004088:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800408a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8004090:	2320      	movs	r3, #32
 8004092:	e003      	b.n	800409c <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8004094:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004096:	fab3 f383 	clz	r3, r3
 800409a:	b2db      	uxtb	r3, r3
 800409c:	3301      	adds	r3, #1
 800409e:	f003 031f 	and.w	r3, r3, #31
 80040a2:	2b09      	cmp	r3, #9
 80040a4:	bf94      	ite	ls
 80040a6:	2301      	movls	r3, #1
 80040a8:	2300      	movhi	r3, #0
 80040aa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d079      	beq.n	80041a4 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d107      	bne.n	80040cc <HAL_ADC_ConfigChannel+0x4f8>
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	0e9b      	lsrs	r3, r3, #26
 80040c2:	3301      	adds	r3, #1
 80040c4:	069b      	lsls	r3, r3, #26
 80040c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040ca:	e015      	b.n	80040f8 <HAL_ADC_ConfigChannel+0x524>
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040d4:	fa93 f3a3 	rbit	r3, r3
 80040d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80040da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040dc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80040de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d101      	bne.n	80040e8 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80040e4:	2320      	movs	r3, #32
 80040e6:	e003      	b.n	80040f0 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80040e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040ea:	fab3 f383 	clz	r3, r3
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	3301      	adds	r3, #1
 80040f2:	069b      	lsls	r3, r3, #26
 80040f4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004100:	2b00      	cmp	r3, #0
 8004102:	d109      	bne.n	8004118 <HAL_ADC_ConfigChannel+0x544>
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	0e9b      	lsrs	r3, r3, #26
 800410a:	3301      	adds	r3, #1
 800410c:	f003 031f 	and.w	r3, r3, #31
 8004110:	2101      	movs	r1, #1
 8004112:	fa01 f303 	lsl.w	r3, r1, r3
 8004116:	e017      	b.n	8004148 <HAL_ADC_ConfigChannel+0x574>
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800411e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004120:	fa93 f3a3 	rbit	r3, r3
 8004124:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004126:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004128:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800412a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800412c:	2b00      	cmp	r3, #0
 800412e:	d101      	bne.n	8004134 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8004130:	2320      	movs	r3, #32
 8004132:	e003      	b.n	800413c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8004134:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004136:	fab3 f383 	clz	r3, r3
 800413a:	b2db      	uxtb	r3, r3
 800413c:	3301      	adds	r3, #1
 800413e:	f003 031f 	and.w	r3, r3, #31
 8004142:	2101      	movs	r1, #1
 8004144:	fa01 f303 	lsl.w	r3, r1, r3
 8004148:	ea42 0103 	orr.w	r1, r2, r3
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10a      	bne.n	800416e <HAL_ADC_ConfigChannel+0x59a>
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	0e9b      	lsrs	r3, r3, #26
 800415e:	3301      	adds	r3, #1
 8004160:	f003 021f 	and.w	r2, r3, #31
 8004164:	4613      	mov	r3, r2
 8004166:	005b      	lsls	r3, r3, #1
 8004168:	4413      	add	r3, r2
 800416a:	051b      	lsls	r3, r3, #20
 800416c:	e018      	b.n	80041a0 <HAL_ADC_ConfigChannel+0x5cc>
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004176:	fa93 f3a3 	rbit	r3, r3
 800417a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800417c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800417e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8004186:	2320      	movs	r3, #32
 8004188:	e003      	b.n	8004192 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800418a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800418c:	fab3 f383 	clz	r3, r3
 8004190:	b2db      	uxtb	r3, r3
 8004192:	3301      	adds	r3, #1
 8004194:	f003 021f 	and.w	r2, r3, #31
 8004198:	4613      	mov	r3, r2
 800419a:	005b      	lsls	r3, r3, #1
 800419c:	4413      	add	r3, r2
 800419e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041a0:	430b      	orrs	r3, r1
 80041a2:	e080      	b.n	80042a6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d107      	bne.n	80041c0 <HAL_ADC_ConfigChannel+0x5ec>
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	0e9b      	lsrs	r3, r3, #26
 80041b6:	3301      	adds	r3, #1
 80041b8:	069b      	lsls	r3, r3, #26
 80041ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041be:	e015      	b.n	80041ec <HAL_ADC_ConfigChannel+0x618>
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041c8:	fa93 f3a3 	rbit	r3, r3
 80041cc:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80041ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80041d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d101      	bne.n	80041dc <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80041d8:	2320      	movs	r3, #32
 80041da:	e003      	b.n	80041e4 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80041dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041de:	fab3 f383 	clz	r3, r3
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	3301      	adds	r3, #1
 80041e6:	069b      	lsls	r3, r3, #26
 80041e8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d109      	bne.n	800420c <HAL_ADC_ConfigChannel+0x638>
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	0e9b      	lsrs	r3, r3, #26
 80041fe:	3301      	adds	r3, #1
 8004200:	f003 031f 	and.w	r3, r3, #31
 8004204:	2101      	movs	r1, #1
 8004206:	fa01 f303 	lsl.w	r3, r1, r3
 800420a:	e017      	b.n	800423c <HAL_ADC_ConfigChannel+0x668>
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	fa93 f3a3 	rbit	r3, r3
 8004218:	61bb      	str	r3, [r7, #24]
  return result;
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800421e:	6a3b      	ldr	r3, [r7, #32]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d101      	bne.n	8004228 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8004224:	2320      	movs	r3, #32
 8004226:	e003      	b.n	8004230 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8004228:	6a3b      	ldr	r3, [r7, #32]
 800422a:	fab3 f383 	clz	r3, r3
 800422e:	b2db      	uxtb	r3, r3
 8004230:	3301      	adds	r3, #1
 8004232:	f003 031f 	and.w	r3, r3, #31
 8004236:	2101      	movs	r1, #1
 8004238:	fa01 f303 	lsl.w	r3, r1, r3
 800423c:	ea42 0103 	orr.w	r1, r2, r3
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004248:	2b00      	cmp	r3, #0
 800424a:	d10d      	bne.n	8004268 <HAL_ADC_ConfigChannel+0x694>
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	0e9b      	lsrs	r3, r3, #26
 8004252:	3301      	adds	r3, #1
 8004254:	f003 021f 	and.w	r2, r3, #31
 8004258:	4613      	mov	r3, r2
 800425a:	005b      	lsls	r3, r3, #1
 800425c:	4413      	add	r3, r2
 800425e:	3b1e      	subs	r3, #30
 8004260:	051b      	lsls	r3, r3, #20
 8004262:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004266:	e01d      	b.n	80042a4 <HAL_ADC_ConfigChannel+0x6d0>
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	fa93 f3a3 	rbit	r3, r3
 8004274:	60fb      	str	r3, [r7, #12]
  return result;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d103      	bne.n	8004288 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8004280:	2320      	movs	r3, #32
 8004282:	e005      	b.n	8004290 <HAL_ADC_ConfigChannel+0x6bc>
 8004284:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	fab3 f383 	clz	r3, r3
 800428e:	b2db      	uxtb	r3, r3
 8004290:	3301      	adds	r3, #1
 8004292:	f003 021f 	and.w	r2, r3, #31
 8004296:	4613      	mov	r3, r2
 8004298:	005b      	lsls	r3, r3, #1
 800429a:	4413      	add	r3, r2
 800429c:	3b1e      	subs	r3, #30
 800429e:	051b      	lsls	r3, r3, #20
 80042a0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042a4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80042a6:	683a      	ldr	r2, [r7, #0]
 80042a8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042aa:	4619      	mov	r1, r3
 80042ac:	f7ff f8b1 	bl	8003412 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	4b44      	ldr	r3, [pc, #272]	@ (80043c8 <HAL_ADC_ConfigChannel+0x7f4>)
 80042b6:	4013      	ands	r3, r2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d07a      	beq.n	80043b2 <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042bc:	4843      	ldr	r0, [pc, #268]	@ (80043cc <HAL_ADC_ConfigChannel+0x7f8>)
 80042be:	f7fe fff3 	bl	80032a8 <LL_ADC_GetCommonPathInternalCh>
 80042c2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a41      	ldr	r2, [pc, #260]	@ (80043d0 <HAL_ADC_ConfigChannel+0x7fc>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d12c      	bne.n	800432a <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80042d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80042d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d126      	bne.n	800432a <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a3c      	ldr	r2, [pc, #240]	@ (80043d4 <HAL_ADC_ConfigChannel+0x800>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d004      	beq.n	80042f0 <HAL_ADC_ConfigChannel+0x71c>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a3b      	ldr	r2, [pc, #236]	@ (80043d8 <HAL_ADC_ConfigChannel+0x804>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d15d      	bne.n	80043ac <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80042f4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80042f8:	4619      	mov	r1, r3
 80042fa:	4834      	ldr	r0, [pc, #208]	@ (80043cc <HAL_ADC_ConfigChannel+0x7f8>)
 80042fc:	f7fe ffc1 	bl	8003282 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004300:	4b36      	ldr	r3, [pc, #216]	@ (80043dc <HAL_ADC_ConfigChannel+0x808>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	099b      	lsrs	r3, r3, #6
 8004306:	4a36      	ldr	r2, [pc, #216]	@ (80043e0 <HAL_ADC_ConfigChannel+0x80c>)
 8004308:	fba2 2303 	umull	r2, r3, r2, r3
 800430c:	099b      	lsrs	r3, r3, #6
 800430e:	1c5a      	adds	r2, r3, #1
 8004310:	4613      	mov	r3, r2
 8004312:	005b      	lsls	r3, r3, #1
 8004314:	4413      	add	r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800431a:	e002      	b.n	8004322 <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	3b01      	subs	r3, #1
 8004320:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1f9      	bne.n	800431c <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004328:	e040      	b.n	80043ac <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a2d      	ldr	r2, [pc, #180]	@ (80043e4 <HAL_ADC_ConfigChannel+0x810>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d118      	bne.n	8004366 <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004334:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004338:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d112      	bne.n	8004366 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a23      	ldr	r2, [pc, #140]	@ (80043d4 <HAL_ADC_ConfigChannel+0x800>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d004      	beq.n	8004354 <HAL_ADC_ConfigChannel+0x780>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a22      	ldr	r2, [pc, #136]	@ (80043d8 <HAL_ADC_ConfigChannel+0x804>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d12d      	bne.n	80043b0 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004354:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004358:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800435c:	4619      	mov	r1, r3
 800435e:	481b      	ldr	r0, [pc, #108]	@ (80043cc <HAL_ADC_ConfigChannel+0x7f8>)
 8004360:	f7fe ff8f 	bl	8003282 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004364:	e024      	b.n	80043b0 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a1f      	ldr	r2, [pc, #124]	@ (80043e8 <HAL_ADC_ConfigChannel+0x814>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d120      	bne.n	80043b2 <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004370:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004374:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d11a      	bne.n	80043b2 <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a14      	ldr	r2, [pc, #80]	@ (80043d4 <HAL_ADC_ConfigChannel+0x800>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d115      	bne.n	80043b2 <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004386:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800438a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800438e:	4619      	mov	r1, r3
 8004390:	480e      	ldr	r0, [pc, #56]	@ (80043cc <HAL_ADC_ConfigChannel+0x7f8>)
 8004392:	f7fe ff76 	bl	8003282 <LL_ADC_SetCommonPathInternalCh>
 8004396:	e00c      	b.n	80043b2 <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800439c:	f043 0220 	orr.w	r2, r3, #32
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80043aa:	e002      	b.n	80043b2 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043ac:	bf00      	nop
 80043ae:	e000      	b.n	80043b2 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043b0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80043ba:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80043be:	4618      	mov	r0, r3
 80043c0:	37d8      	adds	r7, #216	@ 0xd8
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	80080000 	.word	0x80080000
 80043cc:	50040300 	.word	0x50040300
 80043d0:	c7520000 	.word	0xc7520000
 80043d4:	50040000 	.word	0x50040000
 80043d8:	50040200 	.word	0x50040200
 80043dc:	20000000 	.word	0x20000000
 80043e0:	053e2d63 	.word	0x053e2d63
 80043e4:	cb840000 	.word	0xcb840000
 80043e8:	80000001 	.word	0x80000001

080043ec <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b088      	sub	sp, #32
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80043f6:	2300      	movs	r3, #0
 80043f8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4618      	mov	r0, r3
 8004404:	f7ff f926 	bl	8003654 <LL_ADC_REG_IsConversionOngoing>
 8004408:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4618      	mov	r0, r3
 8004410:	f7ff f947 	bl	80036a2 <LL_ADC_INJ_IsConversionOngoing>
 8004414:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d103      	bne.n	8004424 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2b00      	cmp	r3, #0
 8004420:	f000 8098 	beq.w	8004554 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d02a      	beq.n	8004488 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	7e5b      	ldrb	r3, [r3, #25]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d126      	bne.n	8004488 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	7e1b      	ldrb	r3, [r3, #24]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d122      	bne.n	8004488 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004442:	2301      	movs	r3, #1
 8004444:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004446:	e014      	b.n	8004472 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	4a45      	ldr	r2, [pc, #276]	@ (8004560 <ADC_ConversionStop+0x174>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d90d      	bls.n	800446c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004454:	f043 0210 	orr.w	r2, r3, #16
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004460:	f043 0201 	orr.w	r2, r3, #1
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e074      	b.n	8004556 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	3301      	adds	r3, #1
 8004470:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800447c:	2b40      	cmp	r3, #64	@ 0x40
 800447e:	d1e3      	bne.n	8004448 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2240      	movs	r2, #64	@ 0x40
 8004486:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	2b02      	cmp	r3, #2
 800448c:	d014      	beq.n	80044b8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4618      	mov	r0, r3
 8004494:	f7ff f8de 	bl	8003654 <LL_ADC_REG_IsConversionOngoing>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00c      	beq.n	80044b8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7ff f89b 	bl	80035de <LL_ADC_IsDisableOngoing>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d104      	bne.n	80044b8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7ff f8ba 	bl	800362c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d014      	beq.n	80044e8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7ff f8ed 	bl	80036a2 <LL_ADC_INJ_IsConversionOngoing>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00c      	beq.n	80044e8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7ff f883 	bl	80035de <LL_ADC_IsDisableOngoing>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d104      	bne.n	80044e8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7ff f8c9 	bl	800367a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d005      	beq.n	80044fa <ADC_ConversionStop+0x10e>
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	2b03      	cmp	r3, #3
 80044f2:	d105      	bne.n	8004500 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80044f4:	230c      	movs	r3, #12
 80044f6:	617b      	str	r3, [r7, #20]
        break;
 80044f8:	e005      	b.n	8004506 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80044fa:	2308      	movs	r3, #8
 80044fc:	617b      	str	r3, [r7, #20]
        break;
 80044fe:	e002      	b.n	8004506 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004500:	2304      	movs	r3, #4
 8004502:	617b      	str	r3, [r7, #20]
        break;
 8004504:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004506:	f7fe fe79 	bl	80031fc <HAL_GetTick>
 800450a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800450c:	e01b      	b.n	8004546 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800450e:	f7fe fe75 	bl	80031fc <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b05      	cmp	r3, #5
 800451a:	d914      	bls.n	8004546 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	689a      	ldr	r2, [r3, #8]
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	4013      	ands	r3, r2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00d      	beq.n	8004546 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800452e:	f043 0210 	orr.w	r2, r3, #16
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800453a:	f043 0201 	orr.w	r2, r3, #1
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e007      	b.n	8004556 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	689a      	ldr	r2, [r3, #8]
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	4013      	ands	r3, r2
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1dc      	bne.n	800450e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3720      	adds	r7, #32
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	a33fffff 	.word	0xa33fffff

08004564 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800456c:	2300      	movs	r3, #0
 800456e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4618      	mov	r0, r3
 8004576:	f7ff f81f 	bl	80035b8 <LL_ADC_IsEnabled>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d169      	bne.n	8004654 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689a      	ldr	r2, [r3, #8]
 8004586:	4b36      	ldr	r3, [pc, #216]	@ (8004660 <ADC_Enable+0xfc>)
 8004588:	4013      	ands	r3, r2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00d      	beq.n	80045aa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004592:	f043 0210 	orr.w	r2, r3, #16
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800459e:	f043 0201 	orr.w	r2, r3, #1
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e055      	b.n	8004656 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7fe ffda 	bl	8003568 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80045b4:	482b      	ldr	r0, [pc, #172]	@ (8004664 <ADC_Enable+0x100>)
 80045b6:	f7fe fe77 	bl	80032a8 <LL_ADC_GetCommonPathInternalCh>
 80045ba:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80045bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d013      	beq.n	80045ec <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045c4:	4b28      	ldr	r3, [pc, #160]	@ (8004668 <ADC_Enable+0x104>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	099b      	lsrs	r3, r3, #6
 80045ca:	4a28      	ldr	r2, [pc, #160]	@ (800466c <ADC_Enable+0x108>)
 80045cc:	fba2 2303 	umull	r2, r3, r2, r3
 80045d0:	099b      	lsrs	r3, r3, #6
 80045d2:	1c5a      	adds	r2, r3, #1
 80045d4:	4613      	mov	r3, r2
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	4413      	add	r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80045de:	e002      	b.n	80045e6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	3b01      	subs	r3, #1
 80045e4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1f9      	bne.n	80045e0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80045ec:	f7fe fe06 	bl	80031fc <HAL_GetTick>
 80045f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045f2:	e028      	b.n	8004646 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7fe ffdd 	bl	80035b8 <LL_ADC_IsEnabled>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d104      	bne.n	800460e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4618      	mov	r0, r3
 800460a:	f7fe ffad 	bl	8003568 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800460e:	f7fe fdf5 	bl	80031fc <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	2b02      	cmp	r3, #2
 800461a:	d914      	bls.n	8004646 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b01      	cmp	r3, #1
 8004628:	d00d      	beq.n	8004646 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800462e:	f043 0210 	orr.w	r2, r3, #16
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800463a:	f043 0201 	orr.w	r2, r3, #1
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e007      	b.n	8004656 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b01      	cmp	r3, #1
 8004652:	d1cf      	bne.n	80045f4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	8000003f 	.word	0x8000003f
 8004664:	50040300 	.word	0x50040300
 8004668:	20000000 	.word	0x20000000
 800466c:	053e2d63 	.word	0x053e2d63

08004670 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4618      	mov	r0, r3
 800467e:	f7fe ffae 	bl	80035de <LL_ADC_IsDisableOngoing>
 8004682:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4618      	mov	r0, r3
 800468a:	f7fe ff95 	bl	80035b8 <LL_ADC_IsEnabled>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d047      	beq.n	8004724 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d144      	bne.n	8004724 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f003 030d 	and.w	r3, r3, #13
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d10c      	bne.n	80046c2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7fe ff6f 	bl	8003590 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2203      	movs	r2, #3
 80046b8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80046ba:	f7fe fd9f 	bl	80031fc <HAL_GetTick>
 80046be:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80046c0:	e029      	b.n	8004716 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046c6:	f043 0210 	orr.w	r2, r3, #16
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046d2:	f043 0201 	orr.w	r2, r3, #1
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e023      	b.n	8004726 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80046de:	f7fe fd8d 	bl	80031fc <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d914      	bls.n	8004716 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00d      	beq.n	8004716 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046fe:	f043 0210 	orr.w	r2, r3, #16
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800470a:	f043 0201 	orr.w	r2, r3, #1
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e007      	b.n	8004726 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1dc      	bne.n	80046de <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3710      	adds	r7, #16
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800472e:	b580      	push	{r7, lr}
 8004730:	b084      	sub	sp, #16
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800473a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004740:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004744:	2b00      	cmp	r3, #0
 8004746:	d14b      	bne.n	80047e0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800474c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0308 	and.w	r3, r3, #8
 800475e:	2b00      	cmp	r3, #0
 8004760:	d021      	beq.n	80047a6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f7fe fe14 	bl	8003394 <LL_ADC_REG_IsTriggerSourceSWStart>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d032      	beq.n	80047d8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d12b      	bne.n	80047d8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004784:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004790:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d11f      	bne.n	80047d8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800479c:	f043 0201 	orr.w	r2, r3, #1
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	659a      	str	r2, [r3, #88]	@ 0x58
 80047a4:	e018      	b.n	80047d8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d111      	bne.n	80047d8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d105      	bne.n	80047d8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047d0:	f043 0201 	orr.w	r2, r3, #1
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f7fc fd63 	bl	80012a4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80047de:	e00e      	b.n	80047fe <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047e4:	f003 0310 	and.w	r3, r3, #16
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d003      	beq.n	80047f4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f7ff f9e6 	bl	8003bbe <HAL_ADC_ErrorCallback>
}
 80047f2:	e004      	b.n	80047fe <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	4798      	blx	r3
}
 80047fe:	bf00      	nop
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b084      	sub	sp, #16
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004812:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f7ff f9c8 	bl	8003baa <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800481a:	bf00      	nop
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b084      	sub	sp, #16
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800482e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004834:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004840:	f043 0204 	orr.w	r2, r3, #4
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f7ff f9b8 	bl	8003bbe <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800484e:	bf00      	nop
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <LL_ADC_IsEnabled>:
{
 8004856:	b480      	push	{r7}
 8004858:	b083      	sub	sp, #12
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b01      	cmp	r3, #1
 8004868:	d101      	bne.n	800486e <LL_ADC_IsEnabled+0x18>
 800486a:	2301      	movs	r3, #1
 800486c:	e000      	b.n	8004870 <LL_ADC_IsEnabled+0x1a>
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <LL_ADC_REG_IsConversionOngoing>:
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f003 0304 	and.w	r3, r3, #4
 800488c:	2b04      	cmp	r3, #4
 800488e:	d101      	bne.n	8004894 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004890:	2301      	movs	r3, #1
 8004892:	e000      	b.n	8004896 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
	...

080048a4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80048a4:	b590      	push	{r4, r7, lr}
 80048a6:	b0a1      	sub	sp, #132	@ 0x84
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048ae:	2300      	movs	r3, #0
 80048b0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d101      	bne.n	80048c2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80048be:	2302      	movs	r3, #2
 80048c0:	e093      	b.n	80049ea <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80048ca:	2300      	movs	r3, #0
 80048cc:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80048ce:	2300      	movs	r3, #0
 80048d0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a47      	ldr	r2, [pc, #284]	@ (80049f4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d102      	bne.n	80048e2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80048dc:	4b46      	ldr	r3, [pc, #280]	@ (80049f8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	e001      	b.n	80048e6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80048e2:	2300      	movs	r3, #0
 80048e4:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10b      	bne.n	8004904 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048f0:	f043 0220 	orr.w	r2, r3, #32
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e072      	b.n	80049ea <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4618      	mov	r0, r3
 8004908:	f7ff ffb8 	bl	800487c <LL_ADC_REG_IsConversionOngoing>
 800490c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4618      	mov	r0, r3
 8004914:	f7ff ffb2 	bl	800487c <LL_ADC_REG_IsConversionOngoing>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d154      	bne.n	80049c8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800491e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004920:	2b00      	cmp	r3, #0
 8004922:	d151      	bne.n	80049c8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004924:	4b35      	ldr	r3, [pc, #212]	@ (80049fc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8004926:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d02c      	beq.n	800498a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004930:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	6859      	ldr	r1, [r3, #4]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004942:	035b      	lsls	r3, r3, #13
 8004944:	430b      	orrs	r3, r1
 8004946:	431a      	orrs	r2, r3
 8004948:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800494a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800494c:	4829      	ldr	r0, [pc, #164]	@ (80049f4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800494e:	f7ff ff82 	bl	8004856 <LL_ADC_IsEnabled>
 8004952:	4604      	mov	r4, r0
 8004954:	4828      	ldr	r0, [pc, #160]	@ (80049f8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004956:	f7ff ff7e 	bl	8004856 <LL_ADC_IsEnabled>
 800495a:	4603      	mov	r3, r0
 800495c:	431c      	orrs	r4, r3
 800495e:	4828      	ldr	r0, [pc, #160]	@ (8004a00 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004960:	f7ff ff79 	bl	8004856 <LL_ADC_IsEnabled>
 8004964:	4603      	mov	r3, r0
 8004966:	4323      	orrs	r3, r4
 8004968:	2b00      	cmp	r3, #0
 800496a:	d137      	bne.n	80049dc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800496c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004974:	f023 030f 	bic.w	r3, r3, #15
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	6811      	ldr	r1, [r2, #0]
 800497c:	683a      	ldr	r2, [r7, #0]
 800497e:	6892      	ldr	r2, [r2, #8]
 8004980:	430a      	orrs	r2, r1
 8004982:	431a      	orrs	r2, r3
 8004984:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004986:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004988:	e028      	b.n	80049dc <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800498a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004992:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004994:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004996:	4817      	ldr	r0, [pc, #92]	@ (80049f4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004998:	f7ff ff5d 	bl	8004856 <LL_ADC_IsEnabled>
 800499c:	4604      	mov	r4, r0
 800499e:	4816      	ldr	r0, [pc, #88]	@ (80049f8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80049a0:	f7ff ff59 	bl	8004856 <LL_ADC_IsEnabled>
 80049a4:	4603      	mov	r3, r0
 80049a6:	431c      	orrs	r4, r3
 80049a8:	4815      	ldr	r0, [pc, #84]	@ (8004a00 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80049aa:	f7ff ff54 	bl	8004856 <LL_ADC_IsEnabled>
 80049ae:	4603      	mov	r3, r0
 80049b0:	4323      	orrs	r3, r4
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d112      	bne.n	80049dc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80049b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80049be:	f023 030f 	bic.w	r3, r3, #15
 80049c2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80049c4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80049c6:	e009      	b.n	80049dc <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049cc:	f043 0220 	orr.w	r2, r3, #32
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80049da:	e000      	b.n	80049de <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80049dc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80049e6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3784      	adds	r7, #132	@ 0x84
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd90      	pop	{r4, r7, pc}
 80049f2:	bf00      	nop
 80049f4:	50040000 	.word	0x50040000
 80049f8:	50040100 	.word	0x50040100
 80049fc:	50040300 	.word	0x50040300
 8004a00:	50040200 	.word	0x50040200

08004a04 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e0ed      	b.n	8004bf2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d102      	bne.n	8004a28 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f7fd f8e6 	bl	8001bf4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f042 0201 	orr.w	r2, r2, #1
 8004a36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a38:	f7fe fbe0 	bl	80031fc <HAL_GetTick>
 8004a3c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004a3e:	e012      	b.n	8004a66 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004a40:	f7fe fbdc 	bl	80031fc <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b0a      	cmp	r3, #10
 8004a4c:	d90b      	bls.n	8004a66 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a52:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2205      	movs	r2, #5
 8004a5e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e0c5      	b.n	8004bf2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f003 0301 	and.w	r3, r3, #1
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d0e5      	beq.n	8004a40 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f022 0202 	bic.w	r2, r2, #2
 8004a82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a84:	f7fe fbba 	bl	80031fc <HAL_GetTick>
 8004a88:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004a8a:	e012      	b.n	8004ab2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004a8c:	f7fe fbb6 	bl	80031fc <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b0a      	cmp	r3, #10
 8004a98:	d90b      	bls.n	8004ab2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2205      	movs	r2, #5
 8004aaa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e09f      	b.n	8004bf2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1e5      	bne.n	8004a8c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	7e1b      	ldrb	r3, [r3, #24]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d108      	bne.n	8004ada <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004ad6:	601a      	str	r2, [r3, #0]
 8004ad8:	e007      	b.n	8004aea <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ae8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	7e5b      	ldrb	r3, [r3, #25]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d108      	bne.n	8004b04 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b00:	601a      	str	r2, [r3, #0]
 8004b02:	e007      	b.n	8004b14 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b12:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	7e9b      	ldrb	r3, [r3, #26]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d108      	bne.n	8004b2e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f042 0220 	orr.w	r2, r2, #32
 8004b2a:	601a      	str	r2, [r3, #0]
 8004b2c:	e007      	b.n	8004b3e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f022 0220 	bic.w	r2, r2, #32
 8004b3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	7edb      	ldrb	r3, [r3, #27]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d108      	bne.n	8004b58 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f022 0210 	bic.w	r2, r2, #16
 8004b54:	601a      	str	r2, [r3, #0]
 8004b56:	e007      	b.n	8004b68 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f042 0210 	orr.w	r2, r2, #16
 8004b66:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	7f1b      	ldrb	r3, [r3, #28]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d108      	bne.n	8004b82 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f042 0208 	orr.w	r2, r2, #8
 8004b7e:	601a      	str	r2, [r3, #0]
 8004b80:	e007      	b.n	8004b92 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f022 0208 	bic.w	r2, r2, #8
 8004b90:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	7f5b      	ldrb	r3, [r3, #29]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d108      	bne.n	8004bac <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f042 0204 	orr.w	r2, r2, #4
 8004ba8:	601a      	str	r2, [r3, #0]
 8004baa:	e007      	b.n	8004bbc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f022 0204 	bic.w	r2, r2, #4
 8004bba:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689a      	ldr	r2, [r3, #8]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	695b      	ldr	r3, [r3, #20]
 8004bd0:	ea42 0103 	orr.w	r1, r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	1e5a      	subs	r2, r3, #1
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	430a      	orrs	r2, r1
 8004be0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3710      	adds	r7, #16
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
	...

08004bfc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b087      	sub	sp, #28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c12:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004c14:	7cfb      	ldrb	r3, [r7, #19]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d003      	beq.n	8004c22 <HAL_CAN_ConfigFilter+0x26>
 8004c1a:	7cfb      	ldrb	r3, [r7, #19]
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	f040 80be 	bne.w	8004d9e <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004c22:	4b65      	ldr	r3, [pc, #404]	@ (8004db8 <HAL_CAN_ConfigFilter+0x1bc>)
 8004c24:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004c2c:	f043 0201 	orr.w	r2, r3, #1
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004c3c:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c50:	021b      	lsls	r3, r3, #8
 8004c52:	431a      	orrs	r2, r3
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	f003 031f 	and.w	r3, r3, #31
 8004c62:	2201      	movs	r2, #1
 8004c64:	fa02 f303 	lsl.w	r3, r2, r3
 8004c68:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	43db      	mvns	r3, r3
 8004c74:	401a      	ands	r2, r3
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	69db      	ldr	r3, [r3, #28]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d123      	bne.n	8004ccc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	43db      	mvns	r3, r3
 8004c8e:	401a      	ands	r2, r3
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004ca2:	683a      	ldr	r2, [r7, #0]
 8004ca4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004ca6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	3248      	adds	r2, #72	@ 0x48
 8004cac:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004cc0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004cc2:	6979      	ldr	r1, [r7, #20]
 8004cc4:	3348      	adds	r3, #72	@ 0x48
 8004cc6:	00db      	lsls	r3, r3, #3
 8004cc8:	440b      	add	r3, r1
 8004cca:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	69db      	ldr	r3, [r3, #28]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d122      	bne.n	8004d1a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004cf0:	683a      	ldr	r2, [r7, #0]
 8004cf2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004cf4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	3248      	adds	r2, #72	@ 0x48
 8004cfa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004d0e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004d10:	6979      	ldr	r1, [r7, #20]
 8004d12:	3348      	adds	r3, #72	@ 0x48
 8004d14:	00db      	lsls	r3, r3, #3
 8004d16:	440b      	add	r3, r1
 8004d18:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d109      	bne.n	8004d36 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	43db      	mvns	r3, r3
 8004d2c:	401a      	ands	r2, r3
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8004d34:	e007      	b.n	8004d46 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	431a      	orrs	r2, r3
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d109      	bne.n	8004d62 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	43db      	mvns	r3, r3
 8004d58:	401a      	ands	r2, r3
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8004d60:	e007      	b.n	8004d72 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	431a      	orrs	r2, r3
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d107      	bne.n	8004d8a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	431a      	orrs	r2, r3
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004d90:	f023 0201 	bic.w	r2, r3, #1
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	e006      	b.n	8004dac <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
  }
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	371c      	adds	r7, #28
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr
 8004db8:	40006400 	.word	0x40006400

08004dbc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d12e      	bne.n	8004e2e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f022 0201 	bic.w	r2, r2, #1
 8004de6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004de8:	f7fe fa08 	bl	80031fc <HAL_GetTick>
 8004dec:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004dee:	e012      	b.n	8004e16 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004df0:	f7fe fa04 	bl	80031fc <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b0a      	cmp	r3, #10
 8004dfc:	d90b      	bls.n	8004e16 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e02:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2205      	movs	r2, #5
 8004e0e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e012      	b.n	8004e3c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f003 0301 	and.w	r3, r3, #1
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1e5      	bne.n	8004df0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	e006      	b.n	8004e3c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e32:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
  }
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b089      	sub	sp, #36	@ 0x24
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
 8004e50:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e58:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004e62:	7ffb      	ldrb	r3, [r7, #31]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d003      	beq.n	8004e70 <HAL_CAN_AddTxMessage+0x2c>
 8004e68:	7ffb      	ldrb	r3, [r7, #31]
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	f040 80ad 	bne.w	8004fca <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10a      	bne.n	8004e90 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d105      	bne.n	8004e90 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	f000 8095 	beq.w	8004fba <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	0e1b      	lsrs	r3, r3, #24
 8004e94:	f003 0303 	and.w	r3, r3, #3
 8004e98:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	409a      	lsls	r2, r3
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10d      	bne.n	8004ec8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004eb6:	68f9      	ldr	r1, [r7, #12]
 8004eb8:	6809      	ldr	r1, [r1, #0]
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	3318      	adds	r3, #24
 8004ec0:	011b      	lsls	r3, r3, #4
 8004ec2:	440b      	add	r3, r1
 8004ec4:	601a      	str	r2, [r3, #0]
 8004ec6:	e00f      	b.n	8004ee8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004ed2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004ed8:	68f9      	ldr	r1, [r7, #12]
 8004eda:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004edc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	3318      	adds	r3, #24
 8004ee2:	011b      	lsls	r3, r3, #4
 8004ee4:	440b      	add	r3, r1
 8004ee6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6819      	ldr	r1, [r3, #0]
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	691a      	ldr	r2, [r3, #16]
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	3318      	adds	r3, #24
 8004ef4:	011b      	lsls	r3, r3, #4
 8004ef6:	440b      	add	r3, r1
 8004ef8:	3304      	adds	r3, #4
 8004efa:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	7d1b      	ldrb	r3, [r3, #20]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d111      	bne.n	8004f28 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	3318      	adds	r3, #24
 8004f0c:	011b      	lsls	r3, r3, #4
 8004f0e:	4413      	add	r3, r2
 8004f10:	3304      	adds	r3, #4
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	6811      	ldr	r1, [r2, #0]
 8004f18:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	3318      	adds	r3, #24
 8004f20:	011b      	lsls	r3, r3, #4
 8004f22:	440b      	add	r3, r1
 8004f24:	3304      	adds	r3, #4
 8004f26:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	3307      	adds	r3, #7
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	061a      	lsls	r2, r3, #24
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	3306      	adds	r3, #6
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	041b      	lsls	r3, r3, #16
 8004f38:	431a      	orrs	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	3305      	adds	r3, #5
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	021b      	lsls	r3, r3, #8
 8004f42:	4313      	orrs	r3, r2
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	3204      	adds	r2, #4
 8004f48:	7812      	ldrb	r2, [r2, #0]
 8004f4a:	4610      	mov	r0, r2
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	6811      	ldr	r1, [r2, #0]
 8004f50:	ea43 0200 	orr.w	r2, r3, r0
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	011b      	lsls	r3, r3, #4
 8004f58:	440b      	add	r3, r1
 8004f5a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8004f5e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	3303      	adds	r3, #3
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	061a      	lsls	r2, r3, #24
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	3302      	adds	r3, #2
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	041b      	lsls	r3, r3, #16
 8004f70:	431a      	orrs	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	3301      	adds	r3, #1
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	021b      	lsls	r3, r3, #8
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	7812      	ldrb	r2, [r2, #0]
 8004f80:	4610      	mov	r0, r2
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	6811      	ldr	r1, [r2, #0]
 8004f86:	ea43 0200 	orr.w	r2, r3, r0
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	011b      	lsls	r3, r3, #4
 8004f8e:	440b      	add	r3, r1
 8004f90:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8004f94:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	3318      	adds	r3, #24
 8004f9e:	011b      	lsls	r3, r3, #4
 8004fa0:	4413      	add	r3, r2
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	6811      	ldr	r1, [r2, #0]
 8004fa8:	f043 0201 	orr.w	r2, r3, #1
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	3318      	adds	r3, #24
 8004fb0:	011b      	lsls	r3, r3, #4
 8004fb2:	440b      	add	r3, r1
 8004fb4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	e00e      	b.n	8004fd8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fbe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e006      	b.n	8004fd8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fce:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
  }
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3724      	adds	r7, #36	@ 0x24
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8004fec:	2300      	movs	r3, #0
 8004fee:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ff6:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8004ff8:	7afb      	ldrb	r3, [r7, #11]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d002      	beq.n	8005004 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8004ffe:	7afb      	ldrb	r3, [r7, #11]
 8005000:	2b02      	cmp	r3, #2
 8005002:	d11d      	bne.n	8005040 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d002      	beq.n	8005018 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	3301      	adds	r3, #1
 8005016:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d002      	beq.n	800502c <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	3301      	adds	r3, #1
 800502a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d002      	beq.n	8005040 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	3301      	adds	r3, #1
 800503e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8005040:	68fb      	ldr	r3, [r7, #12]
}
 8005042:	4618      	mov	r0, r3
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr

0800504e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800504e:	b480      	push	{r7}
 8005050:	b085      	sub	sp, #20
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
 8005056:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800505e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005060:	7bfb      	ldrb	r3, [r7, #15]
 8005062:	2b01      	cmp	r3, #1
 8005064:	d002      	beq.n	800506c <HAL_CAN_ActivateNotification+0x1e>
 8005066:	7bfb      	ldrb	r3, [r7, #15]
 8005068:	2b02      	cmp	r3, #2
 800506a:	d109      	bne.n	8005080 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6959      	ldr	r1, [r3, #20]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	683a      	ldr	r2, [r7, #0]
 8005078:	430a      	orrs	r2, r1
 800507a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800507c:	2300      	movs	r3, #0
 800507e:	e006      	b.n	800508e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005084:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
  }
}
 800508e:	4618      	mov	r0, r3
 8005090:	3714      	adds	r7, #20
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
	...

0800509c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f003 0307 	and.w	r3, r3, #7
 80050aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050ac:	4b0c      	ldr	r3, [pc, #48]	@ (80050e0 <__NVIC_SetPriorityGrouping+0x44>)
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050b2:	68ba      	ldr	r2, [r7, #8]
 80050b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80050b8:	4013      	ands	r3, r2
 80050ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80050c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80050c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050ce:	4a04      	ldr	r2, [pc, #16]	@ (80050e0 <__NVIC_SetPriorityGrouping+0x44>)
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	60d3      	str	r3, [r2, #12]
}
 80050d4:	bf00      	nop
 80050d6:	3714      	adds	r7, #20
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr
 80050e0:	e000ed00 	.word	0xe000ed00

080050e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80050e4:	b480      	push	{r7}
 80050e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80050e8:	4b04      	ldr	r3, [pc, #16]	@ (80050fc <__NVIC_GetPriorityGrouping+0x18>)
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	0a1b      	lsrs	r3, r3, #8
 80050ee:	f003 0307 	and.w	r3, r3, #7
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr
 80050fc:	e000ed00 	.word	0xe000ed00

08005100 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	4603      	mov	r3, r0
 8005108:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800510a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800510e:	2b00      	cmp	r3, #0
 8005110:	db0b      	blt.n	800512a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005112:	79fb      	ldrb	r3, [r7, #7]
 8005114:	f003 021f 	and.w	r2, r3, #31
 8005118:	4907      	ldr	r1, [pc, #28]	@ (8005138 <__NVIC_EnableIRQ+0x38>)
 800511a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800511e:	095b      	lsrs	r3, r3, #5
 8005120:	2001      	movs	r0, #1
 8005122:	fa00 f202 	lsl.w	r2, r0, r2
 8005126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800512a:	bf00      	nop
 800512c:	370c      	adds	r7, #12
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	e000e100 	.word	0xe000e100

0800513c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	4603      	mov	r3, r0
 8005144:	6039      	str	r1, [r7, #0]
 8005146:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800514c:	2b00      	cmp	r3, #0
 800514e:	db0a      	blt.n	8005166 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	b2da      	uxtb	r2, r3
 8005154:	490c      	ldr	r1, [pc, #48]	@ (8005188 <__NVIC_SetPriority+0x4c>)
 8005156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800515a:	0112      	lsls	r2, r2, #4
 800515c:	b2d2      	uxtb	r2, r2
 800515e:	440b      	add	r3, r1
 8005160:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005164:	e00a      	b.n	800517c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	b2da      	uxtb	r2, r3
 800516a:	4908      	ldr	r1, [pc, #32]	@ (800518c <__NVIC_SetPriority+0x50>)
 800516c:	79fb      	ldrb	r3, [r7, #7]
 800516e:	f003 030f 	and.w	r3, r3, #15
 8005172:	3b04      	subs	r3, #4
 8005174:	0112      	lsls	r2, r2, #4
 8005176:	b2d2      	uxtb	r2, r2
 8005178:	440b      	add	r3, r1
 800517a:	761a      	strb	r2, [r3, #24]
}
 800517c:	bf00      	nop
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr
 8005188:	e000e100 	.word	0xe000e100
 800518c:	e000ed00 	.word	0xe000ed00

08005190 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005190:	b480      	push	{r7}
 8005192:	b089      	sub	sp, #36	@ 0x24
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f003 0307 	and.w	r3, r3, #7
 80051a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	f1c3 0307 	rsb	r3, r3, #7
 80051aa:	2b04      	cmp	r3, #4
 80051ac:	bf28      	it	cs
 80051ae:	2304      	movcs	r3, #4
 80051b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	3304      	adds	r3, #4
 80051b6:	2b06      	cmp	r3, #6
 80051b8:	d902      	bls.n	80051c0 <NVIC_EncodePriority+0x30>
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	3b03      	subs	r3, #3
 80051be:	e000      	b.n	80051c2 <NVIC_EncodePriority+0x32>
 80051c0:	2300      	movs	r3, #0
 80051c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051c4:	f04f 32ff 	mov.w	r2, #4294967295
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	fa02 f303 	lsl.w	r3, r2, r3
 80051ce:	43da      	mvns	r2, r3
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	401a      	ands	r2, r3
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051d8:	f04f 31ff 	mov.w	r1, #4294967295
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	fa01 f303 	lsl.w	r3, r1, r3
 80051e2:	43d9      	mvns	r1, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051e8:	4313      	orrs	r3, r2
         );
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3724      	adds	r7, #36	@ 0x24
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr

080051f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b082      	sub	sp, #8
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f7ff ff4c 	bl	800509c <__NVIC_SetPriorityGrouping>
}
 8005204:	bf00      	nop
 8005206:	3708      	adds	r7, #8
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af00      	add	r7, sp, #0
 8005212:	4603      	mov	r3, r0
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
 8005218:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800521a:	2300      	movs	r3, #0
 800521c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800521e:	f7ff ff61 	bl	80050e4 <__NVIC_GetPriorityGrouping>
 8005222:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	68b9      	ldr	r1, [r7, #8]
 8005228:	6978      	ldr	r0, [r7, #20]
 800522a:	f7ff ffb1 	bl	8005190 <NVIC_EncodePriority>
 800522e:	4602      	mov	r2, r0
 8005230:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005234:	4611      	mov	r1, r2
 8005236:	4618      	mov	r0, r3
 8005238:	f7ff ff80 	bl	800513c <__NVIC_SetPriority>
}
 800523c:	bf00      	nop
 800523e:	3718      	adds	r7, #24
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
 800524a:	4603      	mov	r3, r0
 800524c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800524e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005252:	4618      	mov	r0, r3
 8005254:	f7ff ff54 	bl	8005100 <__NVIC_EnableIRQ>
}
 8005258:	bf00      	nop
 800525a:	3708      	adds	r7, #8
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d101      	bne.n	8005272 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e098      	b.n	80053a4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	461a      	mov	r2, r3
 8005278:	4b4d      	ldr	r3, [pc, #308]	@ (80053b0 <HAL_DMA_Init+0x150>)
 800527a:	429a      	cmp	r2, r3
 800527c:	d80f      	bhi.n	800529e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	461a      	mov	r2, r3
 8005284:	4b4b      	ldr	r3, [pc, #300]	@ (80053b4 <HAL_DMA_Init+0x154>)
 8005286:	4413      	add	r3, r2
 8005288:	4a4b      	ldr	r2, [pc, #300]	@ (80053b8 <HAL_DMA_Init+0x158>)
 800528a:	fba2 2303 	umull	r2, r3, r2, r3
 800528e:	091b      	lsrs	r3, r3, #4
 8005290:	009a      	lsls	r2, r3, #2
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a48      	ldr	r2, [pc, #288]	@ (80053bc <HAL_DMA_Init+0x15c>)
 800529a:	641a      	str	r2, [r3, #64]	@ 0x40
 800529c:	e00e      	b.n	80052bc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	461a      	mov	r2, r3
 80052a4:	4b46      	ldr	r3, [pc, #280]	@ (80053c0 <HAL_DMA_Init+0x160>)
 80052a6:	4413      	add	r3, r2
 80052a8:	4a43      	ldr	r2, [pc, #268]	@ (80053b8 <HAL_DMA_Init+0x158>)
 80052aa:	fba2 2303 	umull	r2, r3, r2, r3
 80052ae:	091b      	lsrs	r3, r3, #4
 80052b0:	009a      	lsls	r2, r3, #2
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a42      	ldr	r2, [pc, #264]	@ (80053c4 <HAL_DMA_Init+0x164>)
 80052ba:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2202      	movs	r2, #2
 80052c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80052d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80052e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	4313      	orrs	r3, r2
 8005304:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005316:	d039      	beq.n	800538c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800531c:	4a27      	ldr	r2, [pc, #156]	@ (80053bc <HAL_DMA_Init+0x15c>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d11a      	bne.n	8005358 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005322:	4b29      	ldr	r3, [pc, #164]	@ (80053c8 <HAL_DMA_Init+0x168>)
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800532a:	f003 031c 	and.w	r3, r3, #28
 800532e:	210f      	movs	r1, #15
 8005330:	fa01 f303 	lsl.w	r3, r1, r3
 8005334:	43db      	mvns	r3, r3
 8005336:	4924      	ldr	r1, [pc, #144]	@ (80053c8 <HAL_DMA_Init+0x168>)
 8005338:	4013      	ands	r3, r2
 800533a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800533c:	4b22      	ldr	r3, [pc, #136]	@ (80053c8 <HAL_DMA_Init+0x168>)
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6859      	ldr	r1, [r3, #4]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005348:	f003 031c 	and.w	r3, r3, #28
 800534c:	fa01 f303 	lsl.w	r3, r1, r3
 8005350:	491d      	ldr	r1, [pc, #116]	@ (80053c8 <HAL_DMA_Init+0x168>)
 8005352:	4313      	orrs	r3, r2
 8005354:	600b      	str	r3, [r1, #0]
 8005356:	e019      	b.n	800538c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005358:	4b1c      	ldr	r3, [pc, #112]	@ (80053cc <HAL_DMA_Init+0x16c>)
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005360:	f003 031c 	and.w	r3, r3, #28
 8005364:	210f      	movs	r1, #15
 8005366:	fa01 f303 	lsl.w	r3, r1, r3
 800536a:	43db      	mvns	r3, r3
 800536c:	4917      	ldr	r1, [pc, #92]	@ (80053cc <HAL_DMA_Init+0x16c>)
 800536e:	4013      	ands	r3, r2
 8005370:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005372:	4b16      	ldr	r3, [pc, #88]	@ (80053cc <HAL_DMA_Init+0x16c>)
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6859      	ldr	r1, [r3, #4]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800537e:	f003 031c 	and.w	r3, r3, #28
 8005382:	fa01 f303 	lsl.w	r3, r1, r3
 8005386:	4911      	ldr	r1, [pc, #68]	@ (80053cc <HAL_DMA_Init+0x16c>)
 8005388:	4313      	orrs	r3, r2
 800538a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3714      	adds	r7, #20
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr
 80053b0:	40020407 	.word	0x40020407
 80053b4:	bffdfff8 	.word	0xbffdfff8
 80053b8:	cccccccd 	.word	0xcccccccd
 80053bc:	40020000 	.word	0x40020000
 80053c0:	bffdfbf8 	.word	0xbffdfbf8
 80053c4:	40020400 	.word	0x40020400
 80053c8:	400200a8 	.word	0x400200a8
 80053cc:	400204a8 	.word	0x400204a8

080053d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b086      	sub	sp, #24
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
 80053dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053de:	2300      	movs	r3, #0
 80053e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d101      	bne.n	80053f0 <HAL_DMA_Start_IT+0x20>
 80053ec:	2302      	movs	r3, #2
 80053ee:	e04b      	b.n	8005488 <HAL_DMA_Start_IT+0xb8>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	2b01      	cmp	r3, #1
 8005402:	d13a      	bne.n	800547a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2202      	movs	r2, #2
 8005408:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f022 0201 	bic.w	r2, r2, #1
 8005420:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	68b9      	ldr	r1, [r7, #8]
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	f000 f95f 	bl	80056ec <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005432:	2b00      	cmp	r3, #0
 8005434:	d008      	beq.n	8005448 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f042 020e 	orr.w	r2, r2, #14
 8005444:	601a      	str	r2, [r3, #0]
 8005446:	e00f      	b.n	8005468 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f022 0204 	bic.w	r2, r2, #4
 8005456:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f042 020a 	orr.w	r2, r2, #10
 8005466:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f042 0201 	orr.w	r2, r2, #1
 8005476:	601a      	str	r2, [r3, #0]
 8005478:	e005      	b.n	8005486 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005482:	2302      	movs	r3, #2
 8005484:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005486:	7dfb      	ldrb	r3, [r7, #23]
}
 8005488:	4618      	mov	r0, r3
 800548a:	3718      	adds	r7, #24
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005498:	2300      	movs	r3, #0
 800549a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d008      	beq.n	80054ba <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2204      	movs	r2, #4
 80054ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e022      	b.n	8005500 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f022 020e 	bic.w	r2, r2, #14
 80054c8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f022 0201 	bic.w	r2, r2, #1
 80054d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054de:	f003 021c 	and.w	r2, r3, #28
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e6:	2101      	movs	r1, #1
 80054e8:	fa01 f202 	lsl.w	r2, r1, r2
 80054ec:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80054fe:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005500:	4618      	mov	r0, r3
 8005502:	3714      	adds	r7, #20
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005514:	2300      	movs	r3, #0
 8005516:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800551e:	b2db      	uxtb	r3, r3
 8005520:	2b02      	cmp	r3, #2
 8005522:	d005      	beq.n	8005530 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2204      	movs	r2, #4
 8005528:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	73fb      	strb	r3, [r7, #15]
 800552e:	e029      	b.n	8005584 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f022 020e 	bic.w	r2, r2, #14
 800553e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f022 0201 	bic.w	r2, r2, #1
 800554e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005554:	f003 021c 	and.w	r2, r3, #28
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800555c:	2101      	movs	r1, #1
 800555e:	fa01 f202 	lsl.w	r2, r1, r2
 8005562:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005578:	2b00      	cmp	r3, #0
 800557a:	d003      	beq.n	8005584 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	4798      	blx	r3
    }
  }
  return status;
 8005584:	7bfb      	ldrb	r3, [r7, #15]
}
 8005586:	4618      	mov	r0, r3
 8005588:	3710      	adds	r7, #16
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}

0800558e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800558e:	b580      	push	{r7, lr}
 8005590:	b084      	sub	sp, #16
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055aa:	f003 031c 	and.w	r3, r3, #28
 80055ae:	2204      	movs	r2, #4
 80055b0:	409a      	lsls	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	4013      	ands	r3, r2
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d026      	beq.n	8005608 <HAL_DMA_IRQHandler+0x7a>
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	f003 0304 	and.w	r3, r3, #4
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d021      	beq.n	8005608 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0320 	and.w	r3, r3, #32
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d107      	bne.n	80055e2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f022 0204 	bic.w	r2, r2, #4
 80055e0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055e6:	f003 021c 	and.w	r2, r3, #28
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ee:	2104      	movs	r1, #4
 80055f0:	fa01 f202 	lsl.w	r2, r1, r2
 80055f4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d071      	beq.n	80056e2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005606:	e06c      	b.n	80056e2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800560c:	f003 031c 	and.w	r3, r3, #28
 8005610:	2202      	movs	r2, #2
 8005612:	409a      	lsls	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	4013      	ands	r3, r2
 8005618:	2b00      	cmp	r3, #0
 800561a:	d02e      	beq.n	800567a <HAL_DMA_IRQHandler+0xec>
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	f003 0302 	and.w	r3, r3, #2
 8005622:	2b00      	cmp	r3, #0
 8005624:	d029      	beq.n	800567a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0320 	and.w	r3, r3, #32
 8005630:	2b00      	cmp	r3, #0
 8005632:	d10b      	bne.n	800564c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f022 020a 	bic.w	r2, r2, #10
 8005642:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005650:	f003 021c 	and.w	r2, r3, #28
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005658:	2102      	movs	r1, #2
 800565a:	fa01 f202 	lsl.w	r2, r1, r2
 800565e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800566c:	2b00      	cmp	r3, #0
 800566e:	d038      	beq.n	80056e2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005678:	e033      	b.n	80056e2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800567e:	f003 031c 	and.w	r3, r3, #28
 8005682:	2208      	movs	r2, #8
 8005684:	409a      	lsls	r2, r3
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	4013      	ands	r3, r2
 800568a:	2b00      	cmp	r3, #0
 800568c:	d02a      	beq.n	80056e4 <HAL_DMA_IRQHandler+0x156>
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	f003 0308 	and.w	r3, r3, #8
 8005694:	2b00      	cmp	r3, #0
 8005696:	d025      	beq.n	80056e4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f022 020e 	bic.w	r2, r2, #14
 80056a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ac:	f003 021c 	and.w	r2, r3, #28
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b4:	2101      	movs	r1, #1
 80056b6:	fa01 f202 	lsl.w	r2, r1, r2
 80056ba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d004      	beq.n	80056e4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80056e2:	bf00      	nop
 80056e4:	bf00      	nop
}
 80056e6:	3710      	adds	r7, #16
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]
 80056f8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056fe:	f003 021c 	and.w	r2, r3, #28
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005706:	2101      	movs	r1, #1
 8005708:	fa01 f202 	lsl.w	r2, r1, r2
 800570c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	683a      	ldr	r2, [r7, #0]
 8005714:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	2b10      	cmp	r3, #16
 800571c:	d108      	bne.n	8005730 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800572e:	e007      	b.n	8005740 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68ba      	ldr	r2, [r7, #8]
 8005736:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	60da      	str	r2, [r3, #12]
}
 8005740:	bf00      	nop
 8005742:	3714      	adds	r7, #20
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800574c:	b480      	push	{r7}
 800574e:	b087      	sub	sp, #28
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005756:	2300      	movs	r3, #0
 8005758:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800575a:	e166      	b.n	8005a2a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	2101      	movs	r1, #1
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	fa01 f303 	lsl.w	r3, r1, r3
 8005768:	4013      	ands	r3, r2
 800576a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2b00      	cmp	r3, #0
 8005770:	f000 8158 	beq.w	8005a24 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f003 0303 	and.w	r3, r3, #3
 800577c:	2b01      	cmp	r3, #1
 800577e:	d005      	beq.n	800578c <HAL_GPIO_Init+0x40>
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f003 0303 	and.w	r3, r3, #3
 8005788:	2b02      	cmp	r3, #2
 800578a:	d130      	bne.n	80057ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	005b      	lsls	r3, r3, #1
 8005796:	2203      	movs	r2, #3
 8005798:	fa02 f303 	lsl.w	r3, r2, r3
 800579c:	43db      	mvns	r3, r3
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	4013      	ands	r3, r2
 80057a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	68da      	ldr	r2, [r3, #12]
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	005b      	lsls	r3, r3, #1
 80057ac:	fa02 f303 	lsl.w	r3, r2, r3
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80057c2:	2201      	movs	r2, #1
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ca:	43db      	mvns	r3, r3
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	4013      	ands	r3, r2
 80057d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	091b      	lsrs	r3, r3, #4
 80057d8:	f003 0201 	and.w	r2, r3, #1
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	fa02 f303 	lsl.w	r3, r2, r3
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	693a      	ldr	r2, [r7, #16]
 80057ec:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f003 0303 	and.w	r3, r3, #3
 80057f6:	2b03      	cmp	r3, #3
 80057f8:	d017      	beq.n	800582a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	2203      	movs	r2, #3
 8005806:	fa02 f303 	lsl.w	r3, r2, r3
 800580a:	43db      	mvns	r3, r3
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	4013      	ands	r3, r2
 8005810:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	689a      	ldr	r2, [r3, #8]
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	005b      	lsls	r3, r3, #1
 800581a:	fa02 f303 	lsl.w	r3, r2, r3
 800581e:	693a      	ldr	r2, [r7, #16]
 8005820:	4313      	orrs	r3, r2
 8005822:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	693a      	ldr	r2, [r7, #16]
 8005828:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f003 0303 	and.w	r3, r3, #3
 8005832:	2b02      	cmp	r3, #2
 8005834:	d123      	bne.n	800587e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	08da      	lsrs	r2, r3, #3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	3208      	adds	r2, #8
 800583e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005842:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	f003 0307 	and.w	r3, r3, #7
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	220f      	movs	r2, #15
 800584e:	fa02 f303 	lsl.w	r3, r2, r3
 8005852:	43db      	mvns	r3, r3
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	4013      	ands	r3, r2
 8005858:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	691a      	ldr	r2, [r3, #16]
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	f003 0307 	and.w	r3, r3, #7
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	fa02 f303 	lsl.w	r3, r2, r3
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	4313      	orrs	r3, r2
 800586e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	08da      	lsrs	r2, r3, #3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	3208      	adds	r2, #8
 8005878:	6939      	ldr	r1, [r7, #16]
 800587a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	005b      	lsls	r3, r3, #1
 8005888:	2203      	movs	r2, #3
 800588a:	fa02 f303 	lsl.w	r3, r2, r3
 800588e:	43db      	mvns	r3, r3
 8005890:	693a      	ldr	r2, [r7, #16]
 8005892:	4013      	ands	r3, r2
 8005894:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f003 0203 	and.w	r2, r3, #3
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	005b      	lsls	r3, r3, #1
 80058a2:	fa02 f303 	lsl.w	r3, r2, r3
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	693a      	ldr	r2, [r7, #16]
 80058b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	f000 80b2 	beq.w	8005a24 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058c0:	4b61      	ldr	r3, [pc, #388]	@ (8005a48 <HAL_GPIO_Init+0x2fc>)
 80058c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058c4:	4a60      	ldr	r2, [pc, #384]	@ (8005a48 <HAL_GPIO_Init+0x2fc>)
 80058c6:	f043 0301 	orr.w	r3, r3, #1
 80058ca:	6613      	str	r3, [r2, #96]	@ 0x60
 80058cc:	4b5e      	ldr	r3, [pc, #376]	@ (8005a48 <HAL_GPIO_Init+0x2fc>)
 80058ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058d0:	f003 0301 	and.w	r3, r3, #1
 80058d4:	60bb      	str	r3, [r7, #8]
 80058d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80058d8:	4a5c      	ldr	r2, [pc, #368]	@ (8005a4c <HAL_GPIO_Init+0x300>)
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	089b      	lsrs	r3, r3, #2
 80058de:	3302      	adds	r3, #2
 80058e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	f003 0303 	and.w	r3, r3, #3
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	220f      	movs	r2, #15
 80058f0:	fa02 f303 	lsl.w	r3, r2, r3
 80058f4:	43db      	mvns	r3, r3
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	4013      	ands	r3, r2
 80058fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005902:	d02b      	beq.n	800595c <HAL_GPIO_Init+0x210>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a52      	ldr	r2, [pc, #328]	@ (8005a50 <HAL_GPIO_Init+0x304>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d025      	beq.n	8005958 <HAL_GPIO_Init+0x20c>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a51      	ldr	r2, [pc, #324]	@ (8005a54 <HAL_GPIO_Init+0x308>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d01f      	beq.n	8005954 <HAL_GPIO_Init+0x208>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a50      	ldr	r2, [pc, #320]	@ (8005a58 <HAL_GPIO_Init+0x30c>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d019      	beq.n	8005950 <HAL_GPIO_Init+0x204>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a4f      	ldr	r2, [pc, #316]	@ (8005a5c <HAL_GPIO_Init+0x310>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d013      	beq.n	800594c <HAL_GPIO_Init+0x200>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a4e      	ldr	r2, [pc, #312]	@ (8005a60 <HAL_GPIO_Init+0x314>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d00d      	beq.n	8005948 <HAL_GPIO_Init+0x1fc>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a4d      	ldr	r2, [pc, #308]	@ (8005a64 <HAL_GPIO_Init+0x318>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d007      	beq.n	8005944 <HAL_GPIO_Init+0x1f8>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a4c      	ldr	r2, [pc, #304]	@ (8005a68 <HAL_GPIO_Init+0x31c>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d101      	bne.n	8005940 <HAL_GPIO_Init+0x1f4>
 800593c:	2307      	movs	r3, #7
 800593e:	e00e      	b.n	800595e <HAL_GPIO_Init+0x212>
 8005940:	2308      	movs	r3, #8
 8005942:	e00c      	b.n	800595e <HAL_GPIO_Init+0x212>
 8005944:	2306      	movs	r3, #6
 8005946:	e00a      	b.n	800595e <HAL_GPIO_Init+0x212>
 8005948:	2305      	movs	r3, #5
 800594a:	e008      	b.n	800595e <HAL_GPIO_Init+0x212>
 800594c:	2304      	movs	r3, #4
 800594e:	e006      	b.n	800595e <HAL_GPIO_Init+0x212>
 8005950:	2303      	movs	r3, #3
 8005952:	e004      	b.n	800595e <HAL_GPIO_Init+0x212>
 8005954:	2302      	movs	r3, #2
 8005956:	e002      	b.n	800595e <HAL_GPIO_Init+0x212>
 8005958:	2301      	movs	r3, #1
 800595a:	e000      	b.n	800595e <HAL_GPIO_Init+0x212>
 800595c:	2300      	movs	r3, #0
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	f002 0203 	and.w	r2, r2, #3
 8005964:	0092      	lsls	r2, r2, #2
 8005966:	4093      	lsls	r3, r2
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	4313      	orrs	r3, r2
 800596c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800596e:	4937      	ldr	r1, [pc, #220]	@ (8005a4c <HAL_GPIO_Init+0x300>)
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	089b      	lsrs	r3, r3, #2
 8005974:	3302      	adds	r3, #2
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800597c:	4b3b      	ldr	r3, [pc, #236]	@ (8005a6c <HAL_GPIO_Init+0x320>)
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	43db      	mvns	r3, r3
 8005986:	693a      	ldr	r2, [r7, #16]
 8005988:	4013      	ands	r3, r2
 800598a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d003      	beq.n	80059a0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	4313      	orrs	r3, r2
 800599e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80059a0:	4a32      	ldr	r2, [pc, #200]	@ (8005a6c <HAL_GPIO_Init+0x320>)
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80059a6:	4b31      	ldr	r3, [pc, #196]	@ (8005a6c <HAL_GPIO_Init+0x320>)
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	43db      	mvns	r3, r3
 80059b0:	693a      	ldr	r2, [r7, #16]
 80059b2:	4013      	ands	r3, r2
 80059b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d003      	beq.n	80059ca <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80059ca:	4a28      	ldr	r2, [pc, #160]	@ (8005a6c <HAL_GPIO_Init+0x320>)
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80059d0:	4b26      	ldr	r3, [pc, #152]	@ (8005a6c <HAL_GPIO_Init+0x320>)
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	43db      	mvns	r3, r3
 80059da:	693a      	ldr	r2, [r7, #16]
 80059dc:	4013      	ands	r3, r2
 80059de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d003      	beq.n	80059f4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80059f4:	4a1d      	ldr	r2, [pc, #116]	@ (8005a6c <HAL_GPIO_Init+0x320>)
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80059fa:	4b1c      	ldr	r3, [pc, #112]	@ (8005a6c <HAL_GPIO_Init+0x320>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	43db      	mvns	r3, r3
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	4013      	ands	r3, r2
 8005a08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d003      	beq.n	8005a1e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8005a16:	693a      	ldr	r2, [r7, #16]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005a1e:	4a13      	ldr	r2, [pc, #76]	@ (8005a6c <HAL_GPIO_Init+0x320>)
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	3301      	adds	r3, #1
 8005a28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	fa22 f303 	lsr.w	r3, r2, r3
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f47f ae91 	bne.w	800575c <HAL_GPIO_Init+0x10>
  }
}
 8005a3a:	bf00      	nop
 8005a3c:	bf00      	nop
 8005a3e:	371c      	adds	r7, #28
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr
 8005a48:	40021000 	.word	0x40021000
 8005a4c:	40010000 	.word	0x40010000
 8005a50:	48000400 	.word	0x48000400
 8005a54:	48000800 	.word	0x48000800
 8005a58:	48000c00 	.word	0x48000c00
 8005a5c:	48001000 	.word	0x48001000
 8005a60:	48001400 	.word	0x48001400
 8005a64:	48001800 	.word	0x48001800
 8005a68:	48001c00 	.word	0x48001c00
 8005a6c:	40010400 	.word	0x40010400

08005a70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	460b      	mov	r3, r1
 8005a7a:	807b      	strh	r3, [r7, #2]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a80:	787b      	ldrb	r3, [r7, #1]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d003      	beq.n	8005a8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005a86:	887a      	ldrh	r2, [r7, #2]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005a8c:	e002      	b.n	8005a94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005a8e:	887a      	ldrh	r2, [r7, #2]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005a94:	bf00      	nop
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	695b      	ldr	r3, [r3, #20]
 8005ab0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005ab2:	887a      	ldrh	r2, [r7, #2]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	041a      	lsls	r2, r3, #16
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	43d9      	mvns	r1, r3
 8005abe:	887b      	ldrh	r3, [r7, #2]
 8005ac0:	400b      	ands	r3, r1
 8005ac2:	431a      	orrs	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	619a      	str	r2, [r3, #24]
}
 8005ac8:	bf00      	nop
 8005aca:	3714      	adds	r7, #20
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	4603      	mov	r3, r0
 8005adc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005ade:	4b08      	ldr	r3, [pc, #32]	@ (8005b00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ae0:	695a      	ldr	r2, [r3, #20]
 8005ae2:	88fb      	ldrh	r3, [r7, #6]
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d006      	beq.n	8005af8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005aea:	4a05      	ldr	r2, [pc, #20]	@ (8005b00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005aec:	88fb      	ldrh	r3, [r7, #6]
 8005aee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005af0:	88fb      	ldrh	r3, [r7, #6]
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7fb fbe6 	bl	80012c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005af8:	bf00      	nop
 8005afa:	3708      	adds	r7, #8
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	40010400 	.word	0x40010400

08005b04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e08d      	b.n	8005c32 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d106      	bne.n	8005b30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f7fc f918 	bl	8001d60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2224      	movs	r2, #36	@ 0x24
 8005b34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f022 0201 	bic.w	r2, r2, #1
 8005b46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685a      	ldr	r2, [r3, #4]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005b54:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	689a      	ldr	r2, [r3, #8]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b64:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d107      	bne.n	8005b7e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	689a      	ldr	r2, [r3, #8]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b7a:	609a      	str	r2, [r3, #8]
 8005b7c:	e006      	b.n	8005b8c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	689a      	ldr	r2, [r3, #8]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005b8a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d108      	bne.n	8005ba6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	685a      	ldr	r2, [r3, #4]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ba2:	605a      	str	r2, [r3, #4]
 8005ba4:	e007      	b.n	8005bb6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	685a      	ldr	r2, [r3, #4]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005bb4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	6812      	ldr	r2, [r2, #0]
 8005bc0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005bc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bc8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68da      	ldr	r2, [r3, #12]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005bd8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	691a      	ldr	r2, [r3, #16]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	699b      	ldr	r3, [r3, #24]
 8005bea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	430a      	orrs	r2, r1
 8005bf2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	69d9      	ldr	r1, [r3, #28]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6a1a      	ldr	r2, [r3, #32]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	430a      	orrs	r2, r1
 8005c02:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f042 0201 	orr.w	r2, r2, #1
 8005c12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3708      	adds	r7, #8
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
	...

08005c3c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b088      	sub	sp, #32
 8005c40:	af02      	add	r7, sp, #8
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	4608      	mov	r0, r1
 8005c46:	4611      	mov	r1, r2
 8005c48:	461a      	mov	r2, r3
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	817b      	strh	r3, [r7, #10]
 8005c4e:	460b      	mov	r3, r1
 8005c50:	813b      	strh	r3, [r7, #8]
 8005c52:	4613      	mov	r3, r2
 8005c54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	2b20      	cmp	r3, #32
 8005c60:	f040 80f9 	bne.w	8005e56 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c64:	6a3b      	ldr	r3, [r7, #32]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d002      	beq.n	8005c70 <HAL_I2C_Mem_Write+0x34>
 8005c6a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d105      	bne.n	8005c7c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c76:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e0ed      	b.n	8005e58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d101      	bne.n	8005c8a <HAL_I2C_Mem_Write+0x4e>
 8005c86:	2302      	movs	r3, #2
 8005c88:	e0e6      	b.n	8005e58 <HAL_I2C_Mem_Write+0x21c>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005c92:	f7fd fab3 	bl	80031fc <HAL_GetTick>
 8005c96:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	9300      	str	r3, [sp, #0]
 8005c9c:	2319      	movs	r3, #25
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f000 fac3 	bl	8006230 <I2C_WaitOnFlagUntilTimeout>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d001      	beq.n	8005cb4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e0d1      	b.n	8005e58 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2221      	movs	r2, #33	@ 0x21
 8005cb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2240      	movs	r2, #64	@ 0x40
 8005cc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6a3a      	ldr	r2, [r7, #32]
 8005cce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005cd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005cdc:	88f8      	ldrh	r0, [r7, #6]
 8005cde:	893a      	ldrh	r2, [r7, #8]
 8005ce0:	8979      	ldrh	r1, [r7, #10]
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	9301      	str	r3, [sp, #4]
 8005ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ce8:	9300      	str	r3, [sp, #0]
 8005cea:	4603      	mov	r3, r0
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f000 f9d3 	bl	8006098 <I2C_RequestMemoryWrite>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d005      	beq.n	8005d04 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e0a9      	b.n	8005e58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	2bff      	cmp	r3, #255	@ 0xff
 8005d0c:	d90e      	bls.n	8005d2c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	22ff      	movs	r2, #255	@ 0xff
 8005d12:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d18:	b2da      	uxtb	r2, r3
 8005d1a:	8979      	ldrh	r1, [r7, #10]
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	9300      	str	r3, [sp, #0]
 8005d20:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f000 fc47 	bl	80065b8 <I2C_TransferConfig>
 8005d2a:	e00f      	b.n	8005d4c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d3a:	b2da      	uxtb	r2, r3
 8005d3c:	8979      	ldrh	r1, [r7, #10]
 8005d3e:	2300      	movs	r3, #0
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f000 fc36 	bl	80065b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d50:	68f8      	ldr	r0, [r7, #12]
 8005d52:	f000 fac6 	bl	80062e2 <I2C_WaitOnTXISFlagUntilTimeout>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d001      	beq.n	8005d60 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e07b      	b.n	8005e58 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d64:	781a      	ldrb	r2, [r3, #0]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d70:	1c5a      	adds	r2, r3, #1
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d034      	beq.n	8005e04 <HAL_I2C_Mem_Write+0x1c8>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d130      	bne.n	8005e04 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	9300      	str	r3, [sp, #0]
 8005da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005da8:	2200      	movs	r2, #0
 8005daa:	2180      	movs	r1, #128	@ 0x80
 8005dac:	68f8      	ldr	r0, [r7, #12]
 8005dae:	f000 fa3f 	bl	8006230 <I2C_WaitOnFlagUntilTimeout>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d001      	beq.n	8005dbc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e04d      	b.n	8005e58 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	2bff      	cmp	r3, #255	@ 0xff
 8005dc4:	d90e      	bls.n	8005de4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	22ff      	movs	r2, #255	@ 0xff
 8005dca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dd0:	b2da      	uxtb	r2, r3
 8005dd2:	8979      	ldrh	r1, [r7, #10]
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	9300      	str	r3, [sp, #0]
 8005dd8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f000 fbeb 	bl	80065b8 <I2C_TransferConfig>
 8005de2:	e00f      	b.n	8005e04 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005de8:	b29a      	uxth	r2, r3
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005df2:	b2da      	uxtb	r2, r3
 8005df4:	8979      	ldrh	r1, [r7, #10]
 8005df6:	2300      	movs	r3, #0
 8005df8:	9300      	str	r3, [sp, #0]
 8005dfa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005dfe:	68f8      	ldr	r0, [r7, #12]
 8005e00:	f000 fbda 	bl	80065b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d19e      	bne.n	8005d4c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e0e:	697a      	ldr	r2, [r7, #20]
 8005e10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	f000 faac 	bl	8006370 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d001      	beq.n	8005e22 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e01a      	b.n	8005e58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2220      	movs	r2, #32
 8005e28:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	6859      	ldr	r1, [r3, #4]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	4b0a      	ldr	r3, [pc, #40]	@ (8005e60 <HAL_I2C_Mem_Write+0x224>)
 8005e36:	400b      	ands	r3, r1
 8005e38:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2220      	movs	r2, #32
 8005e3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005e52:	2300      	movs	r3, #0
 8005e54:	e000      	b.n	8005e58 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005e56:	2302      	movs	r3, #2
  }
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3718      	adds	r7, #24
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	fe00e800 	.word	0xfe00e800

08005e64 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b088      	sub	sp, #32
 8005e68:	af02      	add	r7, sp, #8
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	4608      	mov	r0, r1
 8005e6e:	4611      	mov	r1, r2
 8005e70:	461a      	mov	r2, r3
 8005e72:	4603      	mov	r3, r0
 8005e74:	817b      	strh	r3, [r7, #10]
 8005e76:	460b      	mov	r3, r1
 8005e78:	813b      	strh	r3, [r7, #8]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	2b20      	cmp	r3, #32
 8005e88:	f040 80fd 	bne.w	8006086 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e8c:	6a3b      	ldr	r3, [r7, #32]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d002      	beq.n	8005e98 <HAL_I2C_Mem_Read+0x34>
 8005e92:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d105      	bne.n	8005ea4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e9e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e0f1      	b.n	8006088 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d101      	bne.n	8005eb2 <HAL_I2C_Mem_Read+0x4e>
 8005eae:	2302      	movs	r3, #2
 8005eb0:	e0ea      	b.n	8006088 <HAL_I2C_Mem_Read+0x224>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005eba:	f7fd f99f 	bl	80031fc <HAL_GetTick>
 8005ebe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	9300      	str	r3, [sp, #0]
 8005ec4:	2319      	movs	r3, #25
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f000 f9af 	bl	8006230 <I2C_WaitOnFlagUntilTimeout>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d001      	beq.n	8005edc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e0d5      	b.n	8006088 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2222      	movs	r2, #34	@ 0x22
 8005ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2240      	movs	r2, #64	@ 0x40
 8005ee8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6a3a      	ldr	r2, [r7, #32]
 8005ef6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005efc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f04:	88f8      	ldrh	r0, [r7, #6]
 8005f06:	893a      	ldrh	r2, [r7, #8]
 8005f08:	8979      	ldrh	r1, [r7, #10]
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	9301      	str	r3, [sp, #4]
 8005f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f10:	9300      	str	r3, [sp, #0]
 8005f12:	4603      	mov	r3, r0
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	f000 f913 	bl	8006140 <I2C_RequestMemoryRead>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d005      	beq.n	8005f2c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e0ad      	b.n	8006088 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	2bff      	cmp	r3, #255	@ 0xff
 8005f34:	d90e      	bls.n	8005f54 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f40:	b2da      	uxtb	r2, r3
 8005f42:	8979      	ldrh	r1, [r7, #10]
 8005f44:	4b52      	ldr	r3, [pc, #328]	@ (8006090 <HAL_I2C_Mem_Read+0x22c>)
 8005f46:	9300      	str	r3, [sp, #0]
 8005f48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f4c:	68f8      	ldr	r0, [r7, #12]
 8005f4e:	f000 fb33 	bl	80065b8 <I2C_TransferConfig>
 8005f52:	e00f      	b.n	8005f74 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f58:	b29a      	uxth	r2, r3
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f62:	b2da      	uxtb	r2, r3
 8005f64:	8979      	ldrh	r1, [r7, #10]
 8005f66:	4b4a      	ldr	r3, [pc, #296]	@ (8006090 <HAL_I2C_Mem_Read+0x22c>)
 8005f68:	9300      	str	r3, [sp, #0]
 8005f6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f000 fb22 	bl	80065b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	9300      	str	r3, [sp, #0]
 8005f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	2104      	movs	r1, #4
 8005f7e:	68f8      	ldr	r0, [r7, #12]
 8005f80:	f000 f956 	bl	8006230 <I2C_WaitOnFlagUntilTimeout>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d001      	beq.n	8005f8e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e07c      	b.n	8006088 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f98:	b2d2      	uxtb	r2, r2
 8005f9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa0:	1c5a      	adds	r2, r3, #1
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005faa:	3b01      	subs	r3, #1
 8005fac:	b29a      	uxth	r2, r3
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d034      	beq.n	8006034 <HAL_I2C_Mem_Read+0x1d0>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d130      	bne.n	8006034 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	9300      	str	r3, [sp, #0]
 8005fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fd8:	2200      	movs	r2, #0
 8005fda:	2180      	movs	r1, #128	@ 0x80
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f000 f927 	bl	8006230 <I2C_WaitOnFlagUntilTimeout>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d001      	beq.n	8005fec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e04d      	b.n	8006088 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	2bff      	cmp	r3, #255	@ 0xff
 8005ff4:	d90e      	bls.n	8006014 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006000:	b2da      	uxtb	r2, r3
 8006002:	8979      	ldrh	r1, [r7, #10]
 8006004:	2300      	movs	r3, #0
 8006006:	9300      	str	r3, [sp, #0]
 8006008:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	f000 fad3 	bl	80065b8 <I2C_TransferConfig>
 8006012:	e00f      	b.n	8006034 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006018:	b29a      	uxth	r2, r3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006022:	b2da      	uxtb	r2, r3
 8006024:	8979      	ldrh	r1, [r7, #10]
 8006026:	2300      	movs	r3, #0
 8006028:	9300      	str	r3, [sp, #0]
 800602a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800602e:	68f8      	ldr	r0, [r7, #12]
 8006030:	f000 fac2 	bl	80065b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006038:	b29b      	uxth	r3, r3
 800603a:	2b00      	cmp	r3, #0
 800603c:	d19a      	bne.n	8005f74 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f000 f994 	bl	8006370 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d001      	beq.n	8006052 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e01a      	b.n	8006088 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2220      	movs	r2, #32
 8006058:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	6859      	ldr	r1, [r3, #4]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	4b0b      	ldr	r3, [pc, #44]	@ (8006094 <HAL_I2C_Mem_Read+0x230>)
 8006066:	400b      	ands	r3, r1
 8006068:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2220      	movs	r2, #32
 800606e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006082:	2300      	movs	r3, #0
 8006084:	e000      	b.n	8006088 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006086:	2302      	movs	r3, #2
  }
}
 8006088:	4618      	mov	r0, r3
 800608a:	3718      	adds	r7, #24
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	80002400 	.word	0x80002400
 8006094:	fe00e800 	.word	0xfe00e800

08006098 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af02      	add	r7, sp, #8
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	4608      	mov	r0, r1
 80060a2:	4611      	mov	r1, r2
 80060a4:	461a      	mov	r2, r3
 80060a6:	4603      	mov	r3, r0
 80060a8:	817b      	strh	r3, [r7, #10]
 80060aa:	460b      	mov	r3, r1
 80060ac:	813b      	strh	r3, [r7, #8]
 80060ae:	4613      	mov	r3, r2
 80060b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80060b2:	88fb      	ldrh	r3, [r7, #6]
 80060b4:	b2da      	uxtb	r2, r3
 80060b6:	8979      	ldrh	r1, [r7, #10]
 80060b8:	4b20      	ldr	r3, [pc, #128]	@ (800613c <I2C_RequestMemoryWrite+0xa4>)
 80060ba:	9300      	str	r3, [sp, #0]
 80060bc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f000 fa79 	bl	80065b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060c6:	69fa      	ldr	r2, [r7, #28]
 80060c8:	69b9      	ldr	r1, [r7, #24]
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	f000 f909 	bl	80062e2 <I2C_WaitOnTXISFlagUntilTimeout>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d001      	beq.n	80060da <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e02c      	b.n	8006134 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80060da:	88fb      	ldrh	r3, [r7, #6]
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d105      	bne.n	80060ec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80060e0:	893b      	ldrh	r3, [r7, #8]
 80060e2:	b2da      	uxtb	r2, r3
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	629a      	str	r2, [r3, #40]	@ 0x28
 80060ea:	e015      	b.n	8006118 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80060ec:	893b      	ldrh	r3, [r7, #8]
 80060ee:	0a1b      	lsrs	r3, r3, #8
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	b2da      	uxtb	r2, r3
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060fa:	69fa      	ldr	r2, [r7, #28]
 80060fc:	69b9      	ldr	r1, [r7, #24]
 80060fe:	68f8      	ldr	r0, [r7, #12]
 8006100:	f000 f8ef 	bl	80062e2 <I2C_WaitOnTXISFlagUntilTimeout>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d001      	beq.n	800610e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e012      	b.n	8006134 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800610e:	893b      	ldrh	r3, [r7, #8]
 8006110:	b2da      	uxtb	r2, r3
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	9300      	str	r3, [sp, #0]
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	2200      	movs	r2, #0
 8006120:	2180      	movs	r1, #128	@ 0x80
 8006122:	68f8      	ldr	r0, [r7, #12]
 8006124:	f000 f884 	bl	8006230 <I2C_WaitOnFlagUntilTimeout>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d001      	beq.n	8006132 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e000      	b.n	8006134 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3710      	adds	r7, #16
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}
 800613c:	80002000 	.word	0x80002000

08006140 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b086      	sub	sp, #24
 8006144:	af02      	add	r7, sp, #8
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	4608      	mov	r0, r1
 800614a:	4611      	mov	r1, r2
 800614c:	461a      	mov	r2, r3
 800614e:	4603      	mov	r3, r0
 8006150:	817b      	strh	r3, [r7, #10]
 8006152:	460b      	mov	r3, r1
 8006154:	813b      	strh	r3, [r7, #8]
 8006156:	4613      	mov	r3, r2
 8006158:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800615a:	88fb      	ldrh	r3, [r7, #6]
 800615c:	b2da      	uxtb	r2, r3
 800615e:	8979      	ldrh	r1, [r7, #10]
 8006160:	4b20      	ldr	r3, [pc, #128]	@ (80061e4 <I2C_RequestMemoryRead+0xa4>)
 8006162:	9300      	str	r3, [sp, #0]
 8006164:	2300      	movs	r3, #0
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f000 fa26 	bl	80065b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800616c:	69fa      	ldr	r2, [r7, #28]
 800616e:	69b9      	ldr	r1, [r7, #24]
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f000 f8b6 	bl	80062e2 <I2C_WaitOnTXISFlagUntilTimeout>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d001      	beq.n	8006180 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e02c      	b.n	80061da <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006180:	88fb      	ldrh	r3, [r7, #6]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d105      	bne.n	8006192 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006186:	893b      	ldrh	r3, [r7, #8]
 8006188:	b2da      	uxtb	r2, r3
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006190:	e015      	b.n	80061be <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006192:	893b      	ldrh	r3, [r7, #8]
 8006194:	0a1b      	lsrs	r3, r3, #8
 8006196:	b29b      	uxth	r3, r3
 8006198:	b2da      	uxtb	r2, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061a0:	69fa      	ldr	r2, [r7, #28]
 80061a2:	69b9      	ldr	r1, [r7, #24]
 80061a4:	68f8      	ldr	r0, [r7, #12]
 80061a6:	f000 f89c 	bl	80062e2 <I2C_WaitOnTXISFlagUntilTimeout>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d001      	beq.n	80061b4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e012      	b.n	80061da <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80061b4:	893b      	ldrh	r3, [r7, #8]
 80061b6:	b2da      	uxtb	r2, r3
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	9300      	str	r3, [sp, #0]
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	2200      	movs	r2, #0
 80061c6:	2140      	movs	r1, #64	@ 0x40
 80061c8:	68f8      	ldr	r0, [r7, #12]
 80061ca:	f000 f831 	bl	8006230 <I2C_WaitOnFlagUntilTimeout>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d001      	beq.n	80061d8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e000      	b.n	80061da <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	80002000 	.word	0x80002000

080061e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	f003 0302 	and.w	r3, r3, #2
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d103      	bne.n	8006206 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2200      	movs	r2, #0
 8006204:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	699b      	ldr	r3, [r3, #24]
 800620c:	f003 0301 	and.w	r3, r3, #1
 8006210:	2b01      	cmp	r3, #1
 8006212:	d007      	beq.n	8006224 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	699a      	ldr	r2, [r3, #24]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f042 0201 	orr.w	r2, r2, #1
 8006222:	619a      	str	r2, [r3, #24]
  }
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	603b      	str	r3, [r7, #0]
 800623c:	4613      	mov	r3, r2
 800623e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006240:	e03b      	b.n	80062ba <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006242:	69ba      	ldr	r2, [r7, #24]
 8006244:	6839      	ldr	r1, [r7, #0]
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f000 f8d6 	bl	80063f8 <I2C_IsErrorOccurred>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e041      	b.n	80062da <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800625c:	d02d      	beq.n	80062ba <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800625e:	f7fc ffcd 	bl	80031fc <HAL_GetTick>
 8006262:	4602      	mov	r2, r0
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	1ad3      	subs	r3, r2, r3
 8006268:	683a      	ldr	r2, [r7, #0]
 800626a:	429a      	cmp	r2, r3
 800626c:	d302      	bcc.n	8006274 <I2C_WaitOnFlagUntilTimeout+0x44>
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d122      	bne.n	80062ba <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	699a      	ldr	r2, [r3, #24]
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	4013      	ands	r3, r2
 800627e:	68ba      	ldr	r2, [r7, #8]
 8006280:	429a      	cmp	r2, r3
 8006282:	bf0c      	ite	eq
 8006284:	2301      	moveq	r3, #1
 8006286:	2300      	movne	r3, #0
 8006288:	b2db      	uxtb	r3, r3
 800628a:	461a      	mov	r2, r3
 800628c:	79fb      	ldrb	r3, [r7, #7]
 800628e:	429a      	cmp	r2, r3
 8006290:	d113      	bne.n	80062ba <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006296:	f043 0220 	orr.w	r2, r3, #32
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2220      	movs	r2, #32
 80062a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e00f      	b.n	80062da <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	699a      	ldr	r2, [r3, #24]
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	4013      	ands	r3, r2
 80062c4:	68ba      	ldr	r2, [r7, #8]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	bf0c      	ite	eq
 80062ca:	2301      	moveq	r3, #1
 80062cc:	2300      	movne	r3, #0
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	461a      	mov	r2, r3
 80062d2:	79fb      	ldrb	r3, [r7, #7]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d0b4      	beq.n	8006242 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b084      	sub	sp, #16
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	60f8      	str	r0, [r7, #12]
 80062ea:	60b9      	str	r1, [r7, #8]
 80062ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80062ee:	e033      	b.n	8006358 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	68b9      	ldr	r1, [r7, #8]
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f000 f87f 	bl	80063f8 <I2C_IsErrorOccurred>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d001      	beq.n	8006304 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e031      	b.n	8006368 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800630a:	d025      	beq.n	8006358 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800630c:	f7fc ff76 	bl	80031fc <HAL_GetTick>
 8006310:	4602      	mov	r2, r0
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	68ba      	ldr	r2, [r7, #8]
 8006318:	429a      	cmp	r2, r3
 800631a:	d302      	bcc.n	8006322 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d11a      	bne.n	8006358 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	699b      	ldr	r3, [r3, #24]
 8006328:	f003 0302 	and.w	r3, r3, #2
 800632c:	2b02      	cmp	r3, #2
 800632e:	d013      	beq.n	8006358 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006334:	f043 0220 	orr.w	r2, r3, #32
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2220      	movs	r2, #32
 8006340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e007      	b.n	8006368 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	f003 0302 	and.w	r3, r3, #2
 8006362:	2b02      	cmp	r3, #2
 8006364:	d1c4      	bne.n	80062f0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3710      	adds	r7, #16
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800637c:	e02f      	b.n	80063de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	68b9      	ldr	r1, [r7, #8]
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f000 f838 	bl	80063f8 <I2C_IsErrorOccurred>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d001      	beq.n	8006392 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e02d      	b.n	80063ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006392:	f7fc ff33 	bl	80031fc <HAL_GetTick>
 8006396:	4602      	mov	r2, r0
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	68ba      	ldr	r2, [r7, #8]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d302      	bcc.n	80063a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d11a      	bne.n	80063de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	f003 0320 	and.w	r3, r3, #32
 80063b2:	2b20      	cmp	r3, #32
 80063b4:	d013      	beq.n	80063de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ba:	f043 0220 	orr.w	r2, r3, #32
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2220      	movs	r2, #32
 80063c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e007      	b.n	80063ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	699b      	ldr	r3, [r3, #24]
 80063e4:	f003 0320 	and.w	r3, r3, #32
 80063e8:	2b20      	cmp	r3, #32
 80063ea:	d1c8      	bne.n	800637e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3710      	adds	r7, #16
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
	...

080063f8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b08a      	sub	sp, #40	@ 0x28
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006404:	2300      	movs	r3, #0
 8006406:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	699b      	ldr	r3, [r3, #24]
 8006410:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006412:	2300      	movs	r3, #0
 8006414:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	f003 0310 	and.w	r3, r3, #16
 8006420:	2b00      	cmp	r3, #0
 8006422:	d068      	beq.n	80064f6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2210      	movs	r2, #16
 800642a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800642c:	e049      	b.n	80064c2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006434:	d045      	beq.n	80064c2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006436:	f7fc fee1 	bl	80031fc <HAL_GetTick>
 800643a:	4602      	mov	r2, r0
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	68ba      	ldr	r2, [r7, #8]
 8006442:	429a      	cmp	r2, r3
 8006444:	d302      	bcc.n	800644c <I2C_IsErrorOccurred+0x54>
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d13a      	bne.n	80064c2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006456:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800645e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800646a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800646e:	d121      	bne.n	80064b4 <I2C_IsErrorOccurred+0xbc>
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006476:	d01d      	beq.n	80064b4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006478:	7cfb      	ldrb	r3, [r7, #19]
 800647a:	2b20      	cmp	r3, #32
 800647c:	d01a      	beq.n	80064b4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	685a      	ldr	r2, [r3, #4]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800648c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800648e:	f7fc feb5 	bl	80031fc <HAL_GetTick>
 8006492:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006494:	e00e      	b.n	80064b4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006496:	f7fc feb1 	bl	80031fc <HAL_GetTick>
 800649a:	4602      	mov	r2, r0
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	1ad3      	subs	r3, r2, r3
 80064a0:	2b19      	cmp	r3, #25
 80064a2:	d907      	bls.n	80064b4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80064a4:	6a3b      	ldr	r3, [r7, #32]
 80064a6:	f043 0320 	orr.w	r3, r3, #32
 80064aa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80064b2:	e006      	b.n	80064c2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	699b      	ldr	r3, [r3, #24]
 80064ba:	f003 0320 	and.w	r3, r3, #32
 80064be:	2b20      	cmp	r3, #32
 80064c0:	d1e9      	bne.n	8006496 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	699b      	ldr	r3, [r3, #24]
 80064c8:	f003 0320 	and.w	r3, r3, #32
 80064cc:	2b20      	cmp	r3, #32
 80064ce:	d003      	beq.n	80064d8 <I2C_IsErrorOccurred+0xe0>
 80064d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d0aa      	beq.n	800642e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80064d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d103      	bne.n	80064e8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2220      	movs	r2, #32
 80064e6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80064e8:	6a3b      	ldr	r3, [r7, #32]
 80064ea:	f043 0304 	orr.w	r3, r3, #4
 80064ee:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	699b      	ldr	r3, [r3, #24]
 80064fc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006504:	2b00      	cmp	r3, #0
 8006506:	d00b      	beq.n	8006520 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006508:	6a3b      	ldr	r3, [r7, #32]
 800650a:	f043 0301 	orr.w	r3, r3, #1
 800650e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006518:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00b      	beq.n	8006542 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800652a:	6a3b      	ldr	r3, [r7, #32]
 800652c:	f043 0308 	orr.w	r3, r3, #8
 8006530:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800653a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00b      	beq.n	8006564 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800654c:	6a3b      	ldr	r3, [r7, #32]
 800654e:	f043 0302 	orr.w	r3, r3, #2
 8006552:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800655c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006564:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006568:	2b00      	cmp	r3, #0
 800656a:	d01c      	beq.n	80065a6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	f7ff fe3b 	bl	80061e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	6859      	ldr	r1, [r3, #4]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	4b0d      	ldr	r3, [pc, #52]	@ (80065b4 <I2C_IsErrorOccurred+0x1bc>)
 800657e:	400b      	ands	r3, r1
 8006580:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006586:	6a3b      	ldr	r3, [r7, #32]
 8006588:	431a      	orrs	r2, r3
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2220      	movs	r2, #32
 8006592:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80065a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3728      	adds	r7, #40	@ 0x28
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	fe00e800 	.word	0xfe00e800

080065b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b087      	sub	sp, #28
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	607b      	str	r3, [r7, #4]
 80065c2:	460b      	mov	r3, r1
 80065c4:	817b      	strh	r3, [r7, #10]
 80065c6:	4613      	mov	r3, r2
 80065c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80065ca:	897b      	ldrh	r3, [r7, #10]
 80065cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80065d0:	7a7b      	ldrb	r3, [r7, #9]
 80065d2:	041b      	lsls	r3, r3, #16
 80065d4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80065d8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80065de:	6a3b      	ldr	r3, [r7, #32]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80065e6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	685a      	ldr	r2, [r3, #4]
 80065ee:	6a3b      	ldr	r3, [r7, #32]
 80065f0:	0d5b      	lsrs	r3, r3, #21
 80065f2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80065f6:	4b08      	ldr	r3, [pc, #32]	@ (8006618 <I2C_TransferConfig+0x60>)
 80065f8:	430b      	orrs	r3, r1
 80065fa:	43db      	mvns	r3, r3
 80065fc:	ea02 0103 	and.w	r1, r2, r3
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	697a      	ldr	r2, [r7, #20]
 8006606:	430a      	orrs	r2, r1
 8006608:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800660a:	bf00      	nop
 800660c:	371c      	adds	r7, #28
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr
 8006616:	bf00      	nop
 8006618:	03ff63ff 	.word	0x03ff63ff

0800661c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b20      	cmp	r3, #32
 8006630:	d138      	bne.n	80066a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006638:	2b01      	cmp	r3, #1
 800663a:	d101      	bne.n	8006640 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800663c:	2302      	movs	r3, #2
 800663e:	e032      	b.n	80066a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2224      	movs	r2, #36	@ 0x24
 800664c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f022 0201 	bic.w	r2, r2, #1
 800665e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800666e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	6819      	ldr	r1, [r3, #0]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	683a      	ldr	r2, [r7, #0]
 800667c:	430a      	orrs	r2, r1
 800667e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f042 0201 	orr.w	r2, r2, #1
 800668e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2220      	movs	r2, #32
 8006694:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80066a0:	2300      	movs	r3, #0
 80066a2:	e000      	b.n	80066a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80066a4:	2302      	movs	r3, #2
  }
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	370c      	adds	r7, #12
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr

080066b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80066b2:	b480      	push	{r7}
 80066b4:	b085      	sub	sp, #20
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
 80066ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	2b20      	cmp	r3, #32
 80066c6:	d139      	bne.n	800673c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d101      	bne.n	80066d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80066d2:	2302      	movs	r3, #2
 80066d4:	e033      	b.n	800673e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2224      	movs	r2, #36	@ 0x24
 80066e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f022 0201 	bic.w	r2, r2, #1
 80066f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006704:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	021b      	lsls	r3, r3, #8
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	4313      	orrs	r3, r2
 800670e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f042 0201 	orr.w	r2, r2, #1
 8006726:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2220      	movs	r2, #32
 800672c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006738:	2300      	movs	r3, #0
 800673a:	e000      	b.n	800673e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800673c:	2302      	movs	r3, #2
  }
}
 800673e:	4618      	mov	r0, r3
 8006740:	3714      	adds	r7, #20
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr
	...

0800674c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800674c:	b480      	push	{r7}
 800674e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006750:	4b04      	ldr	r3, [pc, #16]	@ (8006764 <HAL_PWREx_GetVoltageRange+0x18>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8006758:	4618      	mov	r0, r3
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	40007000 	.word	0x40007000

08006768 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006768:	b480      	push	{r7}
 800676a:	b085      	sub	sp, #20
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006776:	d130      	bne.n	80067da <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006778:	4b23      	ldr	r3, [pc, #140]	@ (8006808 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006780:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006784:	d038      	beq.n	80067f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006786:	4b20      	ldr	r3, [pc, #128]	@ (8006808 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800678e:	4a1e      	ldr	r2, [pc, #120]	@ (8006808 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006790:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006794:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006796:	4b1d      	ldr	r3, [pc, #116]	@ (800680c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2232      	movs	r2, #50	@ 0x32
 800679c:	fb02 f303 	mul.w	r3, r2, r3
 80067a0:	4a1b      	ldr	r2, [pc, #108]	@ (8006810 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80067a2:	fba2 2303 	umull	r2, r3, r2, r3
 80067a6:	0c9b      	lsrs	r3, r3, #18
 80067a8:	3301      	adds	r3, #1
 80067aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067ac:	e002      	b.n	80067b4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	3b01      	subs	r3, #1
 80067b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067b4:	4b14      	ldr	r3, [pc, #80]	@ (8006808 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80067b6:	695b      	ldr	r3, [r3, #20]
 80067b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067c0:	d102      	bne.n	80067c8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d1f2      	bne.n	80067ae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80067c8:	4b0f      	ldr	r3, [pc, #60]	@ (8006808 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80067ca:	695b      	ldr	r3, [r3, #20]
 80067cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067d4:	d110      	bne.n	80067f8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80067d6:	2303      	movs	r3, #3
 80067d8:	e00f      	b.n	80067fa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80067da:	4b0b      	ldr	r3, [pc, #44]	@ (8006808 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80067e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067e6:	d007      	beq.n	80067f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80067e8:	4b07      	ldr	r3, [pc, #28]	@ (8006808 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80067f0:	4a05      	ldr	r2, [pc, #20]	@ (8006808 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80067f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80067f6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3714      	adds	r7, #20
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	40007000 	.word	0x40007000
 800680c:	20000000 	.word	0x20000000
 8006810:	431bde83 	.word	0x431bde83

08006814 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b088      	sub	sp, #32
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d102      	bne.n	8006828 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	f000 bc08 	b.w	8007038 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006828:	4b96      	ldr	r3, [pc, #600]	@ (8006a84 <HAL_RCC_OscConfig+0x270>)
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	f003 030c 	and.w	r3, r3, #12
 8006830:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006832:	4b94      	ldr	r3, [pc, #592]	@ (8006a84 <HAL_RCC_OscConfig+0x270>)
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	f003 0303 	and.w	r3, r3, #3
 800683a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 0310 	and.w	r3, r3, #16
 8006844:	2b00      	cmp	r3, #0
 8006846:	f000 80e4 	beq.w	8006a12 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d007      	beq.n	8006860 <HAL_RCC_OscConfig+0x4c>
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	2b0c      	cmp	r3, #12
 8006854:	f040 808b 	bne.w	800696e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	2b01      	cmp	r3, #1
 800685c:	f040 8087 	bne.w	800696e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006860:	4b88      	ldr	r3, [pc, #544]	@ (8006a84 <HAL_RCC_OscConfig+0x270>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 0302 	and.w	r3, r3, #2
 8006868:	2b00      	cmp	r3, #0
 800686a:	d005      	beq.n	8006878 <HAL_RCC_OscConfig+0x64>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d101      	bne.n	8006878 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e3df      	b.n	8007038 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6a1a      	ldr	r2, [r3, #32]
 800687c:	4b81      	ldr	r3, [pc, #516]	@ (8006a84 <HAL_RCC_OscConfig+0x270>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0308 	and.w	r3, r3, #8
 8006884:	2b00      	cmp	r3, #0
 8006886:	d004      	beq.n	8006892 <HAL_RCC_OscConfig+0x7e>
 8006888:	4b7e      	ldr	r3, [pc, #504]	@ (8006a84 <HAL_RCC_OscConfig+0x270>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006890:	e005      	b.n	800689e <HAL_RCC_OscConfig+0x8a>
 8006892:	4b7c      	ldr	r3, [pc, #496]	@ (8006a84 <HAL_RCC_OscConfig+0x270>)
 8006894:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006898:	091b      	lsrs	r3, r3, #4
 800689a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800689e:	4293      	cmp	r3, r2
 80068a0:	d223      	bcs.n	80068ea <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a1b      	ldr	r3, [r3, #32]
 80068a6:	4618      	mov	r0, r3
 80068a8:	f000 fdc4 	bl	8007434 <RCC_SetFlashLatencyFromMSIRange>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d001      	beq.n	80068b6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	e3c0      	b.n	8007038 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80068b6:	4b73      	ldr	r3, [pc, #460]	@ (8006a84 <HAL_RCC_OscConfig+0x270>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a72      	ldr	r2, [pc, #456]	@ (8006a84 <HAL_RCC_OscConfig+0x270>)
 80068bc:	f043 0308 	orr.w	r3, r3, #8
 80068c0:	6013      	str	r3, [r2, #0]
 80068c2:	4b70      	ldr	r3, [pc, #448]	@ (8006a84 <HAL_RCC_OscConfig+0x270>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a1b      	ldr	r3, [r3, #32]
 80068ce:	496d      	ldr	r1, [pc, #436]	@ (8006a84 <HAL_RCC_OscConfig+0x270>)
 80068d0:	4313      	orrs	r3, r2
 80068d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80068d4:	4b6b      	ldr	r3, [pc, #428]	@ (8006a84 <HAL_RCC_OscConfig+0x270>)
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	69db      	ldr	r3, [r3, #28]
 80068e0:	021b      	lsls	r3, r3, #8
 80068e2:	4968      	ldr	r1, [pc, #416]	@ (8006a84 <HAL_RCC_OscConfig+0x270>)
 80068e4:	4313      	orrs	r3, r2
 80068e6:	604b      	str	r3, [r1, #4]
 80068e8:	e025      	b.n	8006936 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80068ea:	4b66      	ldr	r3, [pc, #408]	@ (8006a84 <HAL_RCC_OscConfig+0x270>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a65      	ldr	r2, [pc, #404]	@ (8006a84 <HAL_RCC_OscConfig+0x270>)
 80068f0:	f043 0308 	orr.w	r3, r3, #8
 80068f4:	6013      	str	r3, [r2, #0]
 80068f6:	4b63      	ldr	r3, [pc, #396]	@ (8006a84 <HAL_RCC_OscConfig+0x270>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	4960      	ldr	r1, [pc, #384]	@ (8006a84 <HAL_RCC_OscConfig+0x270>)
 8006904:	4313      	orrs	r3, r2
 8006906:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006908:	4b5e      	ldr	r3, [pc, #376]	@ (8006a84 <HAL_RCC_OscConfig+0x270>)
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	69db      	ldr	r3, [r3, #28]
 8006914:	021b      	lsls	r3, r3, #8
 8006916:	495b      	ldr	r1, [pc, #364]	@ (8006a84 <HAL_RCC_OscConfig+0x270>)
 8006918:	4313      	orrs	r3, r2
 800691a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d109      	bne.n	8006936 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	4618      	mov	r0, r3
 8006928:	f000 fd84 	bl	8007434 <RCC_SetFlashLatencyFromMSIRange>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d001      	beq.n	8006936 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e380      	b.n	8007038 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006936:	f000 fc87 	bl	8007248 <HAL_RCC_GetSysClockFreq>
 800693a:	4602      	mov	r2, r0
 800693c:	4b51      	ldr	r3, [pc, #324]	@ (8006a84 <HAL_RCC_OscConfig+0x270>)
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	091b      	lsrs	r3, r3, #4
 8006942:	f003 030f 	and.w	r3, r3, #15
 8006946:	4950      	ldr	r1, [pc, #320]	@ (8006a88 <HAL_RCC_OscConfig+0x274>)
 8006948:	5ccb      	ldrb	r3, [r1, r3]
 800694a:	f003 031f 	and.w	r3, r3, #31
 800694e:	fa22 f303 	lsr.w	r3, r2, r3
 8006952:	4a4e      	ldr	r2, [pc, #312]	@ (8006a8c <HAL_RCC_OscConfig+0x278>)
 8006954:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006956:	4b4e      	ldr	r3, [pc, #312]	@ (8006a90 <HAL_RCC_OscConfig+0x27c>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4618      	mov	r0, r3
 800695c:	f7fb fac6 	bl	8001eec <HAL_InitTick>
 8006960:	4603      	mov	r3, r0
 8006962:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006964:	7bfb      	ldrb	r3, [r7, #15]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d052      	beq.n	8006a10 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800696a:	7bfb      	ldrb	r3, [r7, #15]
 800696c:	e364      	b.n	8007038 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	699b      	ldr	r3, [r3, #24]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d032      	beq.n	80069dc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006976:	4b43      	ldr	r3, [pc, #268]	@ (8006a84 <HAL_RCC_OscConfig+0x270>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a42      	ldr	r2, [pc, #264]	@ (8006a84 <HAL_RCC_OscConfig+0x270>)
 800697c:	f043 0301 	orr.w	r3, r3, #1
 8006980:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006982:	f7fc fc3b 	bl	80031fc <HAL_GetTick>
 8006986:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006988:	e008      	b.n	800699c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800698a:	f7fc fc37 	bl	80031fc <HAL_GetTick>
 800698e:	4602      	mov	r2, r0
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	2b02      	cmp	r3, #2
 8006996:	d901      	bls.n	800699c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	e34d      	b.n	8007038 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800699c:	4b39      	ldr	r3, [pc, #228]	@ (8006a84 <HAL_RCC_OscConfig+0x270>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f003 0302 	and.w	r3, r3, #2
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d0f0      	beq.n	800698a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80069a8:	4b36      	ldr	r3, [pc, #216]	@ (8006a84 <HAL_RCC_OscConfig+0x270>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a35      	ldr	r2, [pc, #212]	@ (8006a84 <HAL_RCC_OscConfig+0x270>)
 80069ae:	f043 0308 	orr.w	r3, r3, #8
 80069b2:	6013      	str	r3, [r2, #0]
 80069b4:	4b33      	ldr	r3, [pc, #204]	@ (8006a84 <HAL_RCC_OscConfig+0x270>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a1b      	ldr	r3, [r3, #32]
 80069c0:	4930      	ldr	r1, [pc, #192]	@ (8006a84 <HAL_RCC_OscConfig+0x270>)
 80069c2:	4313      	orrs	r3, r2
 80069c4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80069c6:	4b2f      	ldr	r3, [pc, #188]	@ (8006a84 <HAL_RCC_OscConfig+0x270>)
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	69db      	ldr	r3, [r3, #28]
 80069d2:	021b      	lsls	r3, r3, #8
 80069d4:	492b      	ldr	r1, [pc, #172]	@ (8006a84 <HAL_RCC_OscConfig+0x270>)
 80069d6:	4313      	orrs	r3, r2
 80069d8:	604b      	str	r3, [r1, #4]
 80069da:	e01a      	b.n	8006a12 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80069dc:	4b29      	ldr	r3, [pc, #164]	@ (8006a84 <HAL_RCC_OscConfig+0x270>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a28      	ldr	r2, [pc, #160]	@ (8006a84 <HAL_RCC_OscConfig+0x270>)
 80069e2:	f023 0301 	bic.w	r3, r3, #1
 80069e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80069e8:	f7fc fc08 	bl	80031fc <HAL_GetTick>
 80069ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80069ee:	e008      	b.n	8006a02 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80069f0:	f7fc fc04 	bl	80031fc <HAL_GetTick>
 80069f4:	4602      	mov	r2, r0
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	d901      	bls.n	8006a02 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e31a      	b.n	8007038 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006a02:	4b20      	ldr	r3, [pc, #128]	@ (8006a84 <HAL_RCC_OscConfig+0x270>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 0302 	and.w	r3, r3, #2
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d1f0      	bne.n	80069f0 <HAL_RCC_OscConfig+0x1dc>
 8006a0e:	e000      	b.n	8006a12 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006a10:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 0301 	and.w	r3, r3, #1
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d073      	beq.n	8006b06 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	2b08      	cmp	r3, #8
 8006a22:	d005      	beq.n	8006a30 <HAL_RCC_OscConfig+0x21c>
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	2b0c      	cmp	r3, #12
 8006a28:	d10e      	bne.n	8006a48 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	2b03      	cmp	r3, #3
 8006a2e:	d10b      	bne.n	8006a48 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a30:	4b14      	ldr	r3, [pc, #80]	@ (8006a84 <HAL_RCC_OscConfig+0x270>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d063      	beq.n	8006b04 <HAL_RCC_OscConfig+0x2f0>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d15f      	bne.n	8006b04 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	e2f7      	b.n	8007038 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a50:	d106      	bne.n	8006a60 <HAL_RCC_OscConfig+0x24c>
 8006a52:	4b0c      	ldr	r3, [pc, #48]	@ (8006a84 <HAL_RCC_OscConfig+0x270>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a0b      	ldr	r2, [pc, #44]	@ (8006a84 <HAL_RCC_OscConfig+0x270>)
 8006a58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a5c:	6013      	str	r3, [r2, #0]
 8006a5e:	e025      	b.n	8006aac <HAL_RCC_OscConfig+0x298>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a68:	d114      	bne.n	8006a94 <HAL_RCC_OscConfig+0x280>
 8006a6a:	4b06      	ldr	r3, [pc, #24]	@ (8006a84 <HAL_RCC_OscConfig+0x270>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a05      	ldr	r2, [pc, #20]	@ (8006a84 <HAL_RCC_OscConfig+0x270>)
 8006a70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006a74:	6013      	str	r3, [r2, #0]
 8006a76:	4b03      	ldr	r3, [pc, #12]	@ (8006a84 <HAL_RCC_OscConfig+0x270>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a02      	ldr	r2, [pc, #8]	@ (8006a84 <HAL_RCC_OscConfig+0x270>)
 8006a7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a80:	6013      	str	r3, [r2, #0]
 8006a82:	e013      	b.n	8006aac <HAL_RCC_OscConfig+0x298>
 8006a84:	40021000 	.word	0x40021000
 8006a88:	0800cd28 	.word	0x0800cd28
 8006a8c:	20000000 	.word	0x20000000
 8006a90:	20000004 	.word	0x20000004
 8006a94:	4ba0      	ldr	r3, [pc, #640]	@ (8006d18 <HAL_RCC_OscConfig+0x504>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a9f      	ldr	r2, [pc, #636]	@ (8006d18 <HAL_RCC_OscConfig+0x504>)
 8006a9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a9e:	6013      	str	r3, [r2, #0]
 8006aa0:	4b9d      	ldr	r3, [pc, #628]	@ (8006d18 <HAL_RCC_OscConfig+0x504>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a9c      	ldr	r2, [pc, #624]	@ (8006d18 <HAL_RCC_OscConfig+0x504>)
 8006aa6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006aaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d013      	beq.n	8006adc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ab4:	f7fc fba2 	bl	80031fc <HAL_GetTick>
 8006ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006aba:	e008      	b.n	8006ace <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006abc:	f7fc fb9e 	bl	80031fc <HAL_GetTick>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	2b64      	cmp	r3, #100	@ 0x64
 8006ac8:	d901      	bls.n	8006ace <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006aca:	2303      	movs	r3, #3
 8006acc:	e2b4      	b.n	8007038 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ace:	4b92      	ldr	r3, [pc, #584]	@ (8006d18 <HAL_RCC_OscConfig+0x504>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d0f0      	beq.n	8006abc <HAL_RCC_OscConfig+0x2a8>
 8006ada:	e014      	b.n	8006b06 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006adc:	f7fc fb8e 	bl	80031fc <HAL_GetTick>
 8006ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006ae2:	e008      	b.n	8006af6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ae4:	f7fc fb8a 	bl	80031fc <HAL_GetTick>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	1ad3      	subs	r3, r2, r3
 8006aee:	2b64      	cmp	r3, #100	@ 0x64
 8006af0:	d901      	bls.n	8006af6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	e2a0      	b.n	8007038 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006af6:	4b88      	ldr	r3, [pc, #544]	@ (8006d18 <HAL_RCC_OscConfig+0x504>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d1f0      	bne.n	8006ae4 <HAL_RCC_OscConfig+0x2d0>
 8006b02:	e000      	b.n	8006b06 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 0302 	and.w	r3, r3, #2
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d060      	beq.n	8006bd4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	2b04      	cmp	r3, #4
 8006b16:	d005      	beq.n	8006b24 <HAL_RCC_OscConfig+0x310>
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	2b0c      	cmp	r3, #12
 8006b1c:	d119      	bne.n	8006b52 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	2b02      	cmp	r3, #2
 8006b22:	d116      	bne.n	8006b52 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b24:	4b7c      	ldr	r3, [pc, #496]	@ (8006d18 <HAL_RCC_OscConfig+0x504>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d005      	beq.n	8006b3c <HAL_RCC_OscConfig+0x328>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d101      	bne.n	8006b3c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e27d      	b.n	8007038 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b3c:	4b76      	ldr	r3, [pc, #472]	@ (8006d18 <HAL_RCC_OscConfig+0x504>)
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	061b      	lsls	r3, r3, #24
 8006b4a:	4973      	ldr	r1, [pc, #460]	@ (8006d18 <HAL_RCC_OscConfig+0x504>)
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b50:	e040      	b.n	8006bd4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d023      	beq.n	8006ba2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b5a:	4b6f      	ldr	r3, [pc, #444]	@ (8006d18 <HAL_RCC_OscConfig+0x504>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a6e      	ldr	r2, [pc, #440]	@ (8006d18 <HAL_RCC_OscConfig+0x504>)
 8006b60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b66:	f7fc fb49 	bl	80031fc <HAL_GetTick>
 8006b6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b6c:	e008      	b.n	8006b80 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b6e:	f7fc fb45 	bl	80031fc <HAL_GetTick>
 8006b72:	4602      	mov	r2, r0
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	d901      	bls.n	8006b80 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	e25b      	b.n	8007038 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b80:	4b65      	ldr	r3, [pc, #404]	@ (8006d18 <HAL_RCC_OscConfig+0x504>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d0f0      	beq.n	8006b6e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b8c:	4b62      	ldr	r3, [pc, #392]	@ (8006d18 <HAL_RCC_OscConfig+0x504>)
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	061b      	lsls	r3, r3, #24
 8006b9a:	495f      	ldr	r1, [pc, #380]	@ (8006d18 <HAL_RCC_OscConfig+0x504>)
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	604b      	str	r3, [r1, #4]
 8006ba0:	e018      	b.n	8006bd4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ba2:	4b5d      	ldr	r3, [pc, #372]	@ (8006d18 <HAL_RCC_OscConfig+0x504>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a5c      	ldr	r2, [pc, #368]	@ (8006d18 <HAL_RCC_OscConfig+0x504>)
 8006ba8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006bac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bae:	f7fc fb25 	bl	80031fc <HAL_GetTick>
 8006bb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006bb4:	e008      	b.n	8006bc8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bb6:	f7fc fb21 	bl	80031fc <HAL_GetTick>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	1ad3      	subs	r3, r2, r3
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	d901      	bls.n	8006bc8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006bc4:	2303      	movs	r3, #3
 8006bc6:	e237      	b.n	8007038 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006bc8:	4b53      	ldr	r3, [pc, #332]	@ (8006d18 <HAL_RCC_OscConfig+0x504>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d1f0      	bne.n	8006bb6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 0308 	and.w	r3, r3, #8
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d03c      	beq.n	8006c5a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	695b      	ldr	r3, [r3, #20]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d01c      	beq.n	8006c22 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006be8:	4b4b      	ldr	r3, [pc, #300]	@ (8006d18 <HAL_RCC_OscConfig+0x504>)
 8006bea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bee:	4a4a      	ldr	r2, [pc, #296]	@ (8006d18 <HAL_RCC_OscConfig+0x504>)
 8006bf0:	f043 0301 	orr.w	r3, r3, #1
 8006bf4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bf8:	f7fc fb00 	bl	80031fc <HAL_GetTick>
 8006bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006bfe:	e008      	b.n	8006c12 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c00:	f7fc fafc 	bl	80031fc <HAL_GetTick>
 8006c04:	4602      	mov	r2, r0
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	1ad3      	subs	r3, r2, r3
 8006c0a:	2b02      	cmp	r3, #2
 8006c0c:	d901      	bls.n	8006c12 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006c0e:	2303      	movs	r3, #3
 8006c10:	e212      	b.n	8007038 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006c12:	4b41      	ldr	r3, [pc, #260]	@ (8006d18 <HAL_RCC_OscConfig+0x504>)
 8006c14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c18:	f003 0302 	and.w	r3, r3, #2
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d0ef      	beq.n	8006c00 <HAL_RCC_OscConfig+0x3ec>
 8006c20:	e01b      	b.n	8006c5a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c22:	4b3d      	ldr	r3, [pc, #244]	@ (8006d18 <HAL_RCC_OscConfig+0x504>)
 8006c24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c28:	4a3b      	ldr	r2, [pc, #236]	@ (8006d18 <HAL_RCC_OscConfig+0x504>)
 8006c2a:	f023 0301 	bic.w	r3, r3, #1
 8006c2e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c32:	f7fc fae3 	bl	80031fc <HAL_GetTick>
 8006c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006c38:	e008      	b.n	8006c4c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c3a:	f7fc fadf 	bl	80031fc <HAL_GetTick>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	1ad3      	subs	r3, r2, r3
 8006c44:	2b02      	cmp	r3, #2
 8006c46:	d901      	bls.n	8006c4c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	e1f5      	b.n	8007038 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006c4c:	4b32      	ldr	r3, [pc, #200]	@ (8006d18 <HAL_RCC_OscConfig+0x504>)
 8006c4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c52:	f003 0302 	and.w	r3, r3, #2
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d1ef      	bne.n	8006c3a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 0304 	and.w	r3, r3, #4
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	f000 80a6 	beq.w	8006db4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006c6c:	4b2a      	ldr	r3, [pc, #168]	@ (8006d18 <HAL_RCC_OscConfig+0x504>)
 8006c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d10d      	bne.n	8006c94 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c78:	4b27      	ldr	r3, [pc, #156]	@ (8006d18 <HAL_RCC_OscConfig+0x504>)
 8006c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c7c:	4a26      	ldr	r2, [pc, #152]	@ (8006d18 <HAL_RCC_OscConfig+0x504>)
 8006c7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c82:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c84:	4b24      	ldr	r3, [pc, #144]	@ (8006d18 <HAL_RCC_OscConfig+0x504>)
 8006c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c8c:	60bb      	str	r3, [r7, #8]
 8006c8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c90:	2301      	movs	r3, #1
 8006c92:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c94:	4b21      	ldr	r3, [pc, #132]	@ (8006d1c <HAL_RCC_OscConfig+0x508>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d118      	bne.n	8006cd2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ca0:	4b1e      	ldr	r3, [pc, #120]	@ (8006d1c <HAL_RCC_OscConfig+0x508>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a1d      	ldr	r2, [pc, #116]	@ (8006d1c <HAL_RCC_OscConfig+0x508>)
 8006ca6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006caa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006cac:	f7fc faa6 	bl	80031fc <HAL_GetTick>
 8006cb0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006cb2:	e008      	b.n	8006cc6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cb4:	f7fc faa2 	bl	80031fc <HAL_GetTick>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	2b02      	cmp	r3, #2
 8006cc0:	d901      	bls.n	8006cc6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	e1b8      	b.n	8007038 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006cc6:	4b15      	ldr	r3, [pc, #84]	@ (8006d1c <HAL_RCC_OscConfig+0x508>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d0f0      	beq.n	8006cb4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d108      	bne.n	8006cec <HAL_RCC_OscConfig+0x4d8>
 8006cda:	4b0f      	ldr	r3, [pc, #60]	@ (8006d18 <HAL_RCC_OscConfig+0x504>)
 8006cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ce0:	4a0d      	ldr	r2, [pc, #52]	@ (8006d18 <HAL_RCC_OscConfig+0x504>)
 8006ce2:	f043 0301 	orr.w	r3, r3, #1
 8006ce6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006cea:	e029      	b.n	8006d40 <HAL_RCC_OscConfig+0x52c>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	2b05      	cmp	r3, #5
 8006cf2:	d115      	bne.n	8006d20 <HAL_RCC_OscConfig+0x50c>
 8006cf4:	4b08      	ldr	r3, [pc, #32]	@ (8006d18 <HAL_RCC_OscConfig+0x504>)
 8006cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cfa:	4a07      	ldr	r2, [pc, #28]	@ (8006d18 <HAL_RCC_OscConfig+0x504>)
 8006cfc:	f043 0304 	orr.w	r3, r3, #4
 8006d00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006d04:	4b04      	ldr	r3, [pc, #16]	@ (8006d18 <HAL_RCC_OscConfig+0x504>)
 8006d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d0a:	4a03      	ldr	r2, [pc, #12]	@ (8006d18 <HAL_RCC_OscConfig+0x504>)
 8006d0c:	f043 0301 	orr.w	r3, r3, #1
 8006d10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006d14:	e014      	b.n	8006d40 <HAL_RCC_OscConfig+0x52c>
 8006d16:	bf00      	nop
 8006d18:	40021000 	.word	0x40021000
 8006d1c:	40007000 	.word	0x40007000
 8006d20:	4b9d      	ldr	r3, [pc, #628]	@ (8006f98 <HAL_RCC_OscConfig+0x784>)
 8006d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d26:	4a9c      	ldr	r2, [pc, #624]	@ (8006f98 <HAL_RCC_OscConfig+0x784>)
 8006d28:	f023 0301 	bic.w	r3, r3, #1
 8006d2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006d30:	4b99      	ldr	r3, [pc, #612]	@ (8006f98 <HAL_RCC_OscConfig+0x784>)
 8006d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d36:	4a98      	ldr	r2, [pc, #608]	@ (8006f98 <HAL_RCC_OscConfig+0x784>)
 8006d38:	f023 0304 	bic.w	r3, r3, #4
 8006d3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d016      	beq.n	8006d76 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d48:	f7fc fa58 	bl	80031fc <HAL_GetTick>
 8006d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d4e:	e00a      	b.n	8006d66 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d50:	f7fc fa54 	bl	80031fc <HAL_GetTick>
 8006d54:	4602      	mov	r2, r0
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	1ad3      	subs	r3, r2, r3
 8006d5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d901      	bls.n	8006d66 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006d62:	2303      	movs	r3, #3
 8006d64:	e168      	b.n	8007038 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d66:	4b8c      	ldr	r3, [pc, #560]	@ (8006f98 <HAL_RCC_OscConfig+0x784>)
 8006d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d6c:	f003 0302 	and.w	r3, r3, #2
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d0ed      	beq.n	8006d50 <HAL_RCC_OscConfig+0x53c>
 8006d74:	e015      	b.n	8006da2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d76:	f7fc fa41 	bl	80031fc <HAL_GetTick>
 8006d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d7c:	e00a      	b.n	8006d94 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d7e:	f7fc fa3d 	bl	80031fc <HAL_GetTick>
 8006d82:	4602      	mov	r2, r0
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	1ad3      	subs	r3, r2, r3
 8006d88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d901      	bls.n	8006d94 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006d90:	2303      	movs	r3, #3
 8006d92:	e151      	b.n	8007038 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d94:	4b80      	ldr	r3, [pc, #512]	@ (8006f98 <HAL_RCC_OscConfig+0x784>)
 8006d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d9a:	f003 0302 	and.w	r3, r3, #2
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d1ed      	bne.n	8006d7e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006da2:	7ffb      	ldrb	r3, [r7, #31]
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d105      	bne.n	8006db4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006da8:	4b7b      	ldr	r3, [pc, #492]	@ (8006f98 <HAL_RCC_OscConfig+0x784>)
 8006daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dac:	4a7a      	ldr	r2, [pc, #488]	@ (8006f98 <HAL_RCC_OscConfig+0x784>)
 8006dae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006db2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 0320 	and.w	r3, r3, #32
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d03c      	beq.n	8006e3a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d01c      	beq.n	8006e02 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006dc8:	4b73      	ldr	r3, [pc, #460]	@ (8006f98 <HAL_RCC_OscConfig+0x784>)
 8006dca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006dce:	4a72      	ldr	r2, [pc, #456]	@ (8006f98 <HAL_RCC_OscConfig+0x784>)
 8006dd0:	f043 0301 	orr.w	r3, r3, #1
 8006dd4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dd8:	f7fc fa10 	bl	80031fc <HAL_GetTick>
 8006ddc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006dde:	e008      	b.n	8006df2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006de0:	f7fc fa0c 	bl	80031fc <HAL_GetTick>
 8006de4:	4602      	mov	r2, r0
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	1ad3      	subs	r3, r2, r3
 8006dea:	2b02      	cmp	r3, #2
 8006dec:	d901      	bls.n	8006df2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006dee:	2303      	movs	r3, #3
 8006df0:	e122      	b.n	8007038 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006df2:	4b69      	ldr	r3, [pc, #420]	@ (8006f98 <HAL_RCC_OscConfig+0x784>)
 8006df4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006df8:	f003 0302 	and.w	r3, r3, #2
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d0ef      	beq.n	8006de0 <HAL_RCC_OscConfig+0x5cc>
 8006e00:	e01b      	b.n	8006e3a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006e02:	4b65      	ldr	r3, [pc, #404]	@ (8006f98 <HAL_RCC_OscConfig+0x784>)
 8006e04:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006e08:	4a63      	ldr	r2, [pc, #396]	@ (8006f98 <HAL_RCC_OscConfig+0x784>)
 8006e0a:	f023 0301 	bic.w	r3, r3, #1
 8006e0e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e12:	f7fc f9f3 	bl	80031fc <HAL_GetTick>
 8006e16:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006e18:	e008      	b.n	8006e2c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006e1a:	f7fc f9ef 	bl	80031fc <HAL_GetTick>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	1ad3      	subs	r3, r2, r3
 8006e24:	2b02      	cmp	r3, #2
 8006e26:	d901      	bls.n	8006e2c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006e28:	2303      	movs	r3, #3
 8006e2a:	e105      	b.n	8007038 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006e2c:	4b5a      	ldr	r3, [pc, #360]	@ (8006f98 <HAL_RCC_OscConfig+0x784>)
 8006e2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006e32:	f003 0302 	and.w	r3, r3, #2
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1ef      	bne.n	8006e1a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	f000 80f9 	beq.w	8007036 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	f040 80cf 	bne.w	8006fec <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006e4e:	4b52      	ldr	r3, [pc, #328]	@ (8006f98 <HAL_RCC_OscConfig+0x784>)
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	f003 0203 	and.w	r2, r3, #3
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d12c      	bne.n	8006ebc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e6c:	3b01      	subs	r3, #1
 8006e6e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d123      	bne.n	8006ebc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e7e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d11b      	bne.n	8006ebc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e8e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d113      	bne.n	8006ebc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e9e:	085b      	lsrs	r3, r3, #1
 8006ea0:	3b01      	subs	r3, #1
 8006ea2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d109      	bne.n	8006ebc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eb2:	085b      	lsrs	r3, r3, #1
 8006eb4:	3b01      	subs	r3, #1
 8006eb6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d071      	beq.n	8006fa0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	2b0c      	cmp	r3, #12
 8006ec0:	d068      	beq.n	8006f94 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006ec2:	4b35      	ldr	r3, [pc, #212]	@ (8006f98 <HAL_RCC_OscConfig+0x784>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d105      	bne.n	8006eda <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006ece:	4b32      	ldr	r3, [pc, #200]	@ (8006f98 <HAL_RCC_OscConfig+0x784>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d001      	beq.n	8006ede <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e0ac      	b.n	8007038 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006ede:	4b2e      	ldr	r3, [pc, #184]	@ (8006f98 <HAL_RCC_OscConfig+0x784>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a2d      	ldr	r2, [pc, #180]	@ (8006f98 <HAL_RCC_OscConfig+0x784>)
 8006ee4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ee8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006eea:	f7fc f987 	bl	80031fc <HAL_GetTick>
 8006eee:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ef0:	e008      	b.n	8006f04 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ef2:	f7fc f983 	bl	80031fc <HAL_GetTick>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	1ad3      	subs	r3, r2, r3
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d901      	bls.n	8006f04 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8006f00:	2303      	movs	r3, #3
 8006f02:	e099      	b.n	8007038 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f04:	4b24      	ldr	r3, [pc, #144]	@ (8006f98 <HAL_RCC_OscConfig+0x784>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d1f0      	bne.n	8006ef2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f10:	4b21      	ldr	r3, [pc, #132]	@ (8006f98 <HAL_RCC_OscConfig+0x784>)
 8006f12:	68da      	ldr	r2, [r3, #12]
 8006f14:	4b21      	ldr	r3, [pc, #132]	@ (8006f9c <HAL_RCC_OscConfig+0x788>)
 8006f16:	4013      	ands	r3, r2
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006f20:	3a01      	subs	r2, #1
 8006f22:	0112      	lsls	r2, r2, #4
 8006f24:	4311      	orrs	r1, r2
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006f2a:	0212      	lsls	r2, r2, #8
 8006f2c:	4311      	orrs	r1, r2
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006f32:	0852      	lsrs	r2, r2, #1
 8006f34:	3a01      	subs	r2, #1
 8006f36:	0552      	lsls	r2, r2, #21
 8006f38:	4311      	orrs	r1, r2
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006f3e:	0852      	lsrs	r2, r2, #1
 8006f40:	3a01      	subs	r2, #1
 8006f42:	0652      	lsls	r2, r2, #25
 8006f44:	4311      	orrs	r1, r2
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006f4a:	06d2      	lsls	r2, r2, #27
 8006f4c:	430a      	orrs	r2, r1
 8006f4e:	4912      	ldr	r1, [pc, #72]	@ (8006f98 <HAL_RCC_OscConfig+0x784>)
 8006f50:	4313      	orrs	r3, r2
 8006f52:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006f54:	4b10      	ldr	r3, [pc, #64]	@ (8006f98 <HAL_RCC_OscConfig+0x784>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a0f      	ldr	r2, [pc, #60]	@ (8006f98 <HAL_RCC_OscConfig+0x784>)
 8006f5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f5e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006f60:	4b0d      	ldr	r3, [pc, #52]	@ (8006f98 <HAL_RCC_OscConfig+0x784>)
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	4a0c      	ldr	r2, [pc, #48]	@ (8006f98 <HAL_RCC_OscConfig+0x784>)
 8006f66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f6a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006f6c:	f7fc f946 	bl	80031fc <HAL_GetTick>
 8006f70:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f72:	e008      	b.n	8006f86 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f74:	f7fc f942 	bl	80031fc <HAL_GetTick>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	1ad3      	subs	r3, r2, r3
 8006f7e:	2b02      	cmp	r3, #2
 8006f80:	d901      	bls.n	8006f86 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8006f82:	2303      	movs	r3, #3
 8006f84:	e058      	b.n	8007038 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f86:	4b04      	ldr	r3, [pc, #16]	@ (8006f98 <HAL_RCC_OscConfig+0x784>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d0f0      	beq.n	8006f74 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006f92:	e050      	b.n	8007036 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	e04f      	b.n	8007038 <HAL_RCC_OscConfig+0x824>
 8006f98:	40021000 	.word	0x40021000
 8006f9c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006fa0:	4b27      	ldr	r3, [pc, #156]	@ (8007040 <HAL_RCC_OscConfig+0x82c>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d144      	bne.n	8007036 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006fac:	4b24      	ldr	r3, [pc, #144]	@ (8007040 <HAL_RCC_OscConfig+0x82c>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a23      	ldr	r2, [pc, #140]	@ (8007040 <HAL_RCC_OscConfig+0x82c>)
 8006fb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006fb6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006fb8:	4b21      	ldr	r3, [pc, #132]	@ (8007040 <HAL_RCC_OscConfig+0x82c>)
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	4a20      	ldr	r2, [pc, #128]	@ (8007040 <HAL_RCC_OscConfig+0x82c>)
 8006fbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006fc2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006fc4:	f7fc f91a 	bl	80031fc <HAL_GetTick>
 8006fc8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006fca:	e008      	b.n	8006fde <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fcc:	f7fc f916 	bl	80031fc <HAL_GetTick>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	1ad3      	subs	r3, r2, r3
 8006fd6:	2b02      	cmp	r3, #2
 8006fd8:	d901      	bls.n	8006fde <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8006fda:	2303      	movs	r3, #3
 8006fdc:	e02c      	b.n	8007038 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006fde:	4b18      	ldr	r3, [pc, #96]	@ (8007040 <HAL_RCC_OscConfig+0x82c>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d0f0      	beq.n	8006fcc <HAL_RCC_OscConfig+0x7b8>
 8006fea:	e024      	b.n	8007036 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	2b0c      	cmp	r3, #12
 8006ff0:	d01f      	beq.n	8007032 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ff2:	4b13      	ldr	r3, [pc, #76]	@ (8007040 <HAL_RCC_OscConfig+0x82c>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a12      	ldr	r2, [pc, #72]	@ (8007040 <HAL_RCC_OscConfig+0x82c>)
 8006ff8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ffc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ffe:	f7fc f8fd 	bl	80031fc <HAL_GetTick>
 8007002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007004:	e008      	b.n	8007018 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007006:	f7fc f8f9 	bl	80031fc <HAL_GetTick>
 800700a:	4602      	mov	r2, r0
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	1ad3      	subs	r3, r2, r3
 8007010:	2b02      	cmp	r3, #2
 8007012:	d901      	bls.n	8007018 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8007014:	2303      	movs	r3, #3
 8007016:	e00f      	b.n	8007038 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007018:	4b09      	ldr	r3, [pc, #36]	@ (8007040 <HAL_RCC_OscConfig+0x82c>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007020:	2b00      	cmp	r3, #0
 8007022:	d1f0      	bne.n	8007006 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007024:	4b06      	ldr	r3, [pc, #24]	@ (8007040 <HAL_RCC_OscConfig+0x82c>)
 8007026:	68da      	ldr	r2, [r3, #12]
 8007028:	4905      	ldr	r1, [pc, #20]	@ (8007040 <HAL_RCC_OscConfig+0x82c>)
 800702a:	4b06      	ldr	r3, [pc, #24]	@ (8007044 <HAL_RCC_OscConfig+0x830>)
 800702c:	4013      	ands	r3, r2
 800702e:	60cb      	str	r3, [r1, #12]
 8007030:	e001      	b.n	8007036 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	e000      	b.n	8007038 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8007036:	2300      	movs	r3, #0
}
 8007038:	4618      	mov	r0, r3
 800703a:	3720      	adds	r7, #32
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	40021000 	.word	0x40021000
 8007044:	feeefffc 	.word	0xfeeefffc

08007048 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d101      	bne.n	800705c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	e0e7      	b.n	800722c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800705c:	4b75      	ldr	r3, [pc, #468]	@ (8007234 <HAL_RCC_ClockConfig+0x1ec>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 0307 	and.w	r3, r3, #7
 8007064:	683a      	ldr	r2, [r7, #0]
 8007066:	429a      	cmp	r2, r3
 8007068:	d910      	bls.n	800708c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800706a:	4b72      	ldr	r3, [pc, #456]	@ (8007234 <HAL_RCC_ClockConfig+0x1ec>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f023 0207 	bic.w	r2, r3, #7
 8007072:	4970      	ldr	r1, [pc, #448]	@ (8007234 <HAL_RCC_ClockConfig+0x1ec>)
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	4313      	orrs	r3, r2
 8007078:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800707a:	4b6e      	ldr	r3, [pc, #440]	@ (8007234 <HAL_RCC_ClockConfig+0x1ec>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0307 	and.w	r3, r3, #7
 8007082:	683a      	ldr	r2, [r7, #0]
 8007084:	429a      	cmp	r2, r3
 8007086:	d001      	beq.n	800708c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	e0cf      	b.n	800722c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 0302 	and.w	r3, r3, #2
 8007094:	2b00      	cmp	r3, #0
 8007096:	d010      	beq.n	80070ba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	689a      	ldr	r2, [r3, #8]
 800709c:	4b66      	ldr	r3, [pc, #408]	@ (8007238 <HAL_RCC_ClockConfig+0x1f0>)
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d908      	bls.n	80070ba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070a8:	4b63      	ldr	r3, [pc, #396]	@ (8007238 <HAL_RCC_ClockConfig+0x1f0>)
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	4960      	ldr	r1, [pc, #384]	@ (8007238 <HAL_RCC_ClockConfig+0x1f0>)
 80070b6:	4313      	orrs	r3, r2
 80070b8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 0301 	and.w	r3, r3, #1
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d04c      	beq.n	8007160 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	2b03      	cmp	r3, #3
 80070cc:	d107      	bne.n	80070de <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80070ce:	4b5a      	ldr	r3, [pc, #360]	@ (8007238 <HAL_RCC_ClockConfig+0x1f0>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d121      	bne.n	800711e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80070da:	2301      	movs	r3, #1
 80070dc:	e0a6      	b.n	800722c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	2b02      	cmp	r3, #2
 80070e4:	d107      	bne.n	80070f6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070e6:	4b54      	ldr	r3, [pc, #336]	@ (8007238 <HAL_RCC_ClockConfig+0x1f0>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d115      	bne.n	800711e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	e09a      	b.n	800722c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d107      	bne.n	800710e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80070fe:	4b4e      	ldr	r3, [pc, #312]	@ (8007238 <HAL_RCC_ClockConfig+0x1f0>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 0302 	and.w	r3, r3, #2
 8007106:	2b00      	cmp	r3, #0
 8007108:	d109      	bne.n	800711e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e08e      	b.n	800722c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800710e:	4b4a      	ldr	r3, [pc, #296]	@ (8007238 <HAL_RCC_ClockConfig+0x1f0>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007116:	2b00      	cmp	r3, #0
 8007118:	d101      	bne.n	800711e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	e086      	b.n	800722c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800711e:	4b46      	ldr	r3, [pc, #280]	@ (8007238 <HAL_RCC_ClockConfig+0x1f0>)
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	f023 0203 	bic.w	r2, r3, #3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	4943      	ldr	r1, [pc, #268]	@ (8007238 <HAL_RCC_ClockConfig+0x1f0>)
 800712c:	4313      	orrs	r3, r2
 800712e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007130:	f7fc f864 	bl	80031fc <HAL_GetTick>
 8007134:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007136:	e00a      	b.n	800714e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007138:	f7fc f860 	bl	80031fc <HAL_GetTick>
 800713c:	4602      	mov	r2, r0
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007146:	4293      	cmp	r3, r2
 8007148:	d901      	bls.n	800714e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	e06e      	b.n	800722c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800714e:	4b3a      	ldr	r3, [pc, #232]	@ (8007238 <HAL_RCC_ClockConfig+0x1f0>)
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	f003 020c 	and.w	r2, r3, #12
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	429a      	cmp	r2, r3
 800715e:	d1eb      	bne.n	8007138 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 0302 	and.w	r3, r3, #2
 8007168:	2b00      	cmp	r3, #0
 800716a:	d010      	beq.n	800718e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	689a      	ldr	r2, [r3, #8]
 8007170:	4b31      	ldr	r3, [pc, #196]	@ (8007238 <HAL_RCC_ClockConfig+0x1f0>)
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007178:	429a      	cmp	r2, r3
 800717a:	d208      	bcs.n	800718e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800717c:	4b2e      	ldr	r3, [pc, #184]	@ (8007238 <HAL_RCC_ClockConfig+0x1f0>)
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	492b      	ldr	r1, [pc, #172]	@ (8007238 <HAL_RCC_ClockConfig+0x1f0>)
 800718a:	4313      	orrs	r3, r2
 800718c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800718e:	4b29      	ldr	r3, [pc, #164]	@ (8007234 <HAL_RCC_ClockConfig+0x1ec>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 0307 	and.w	r3, r3, #7
 8007196:	683a      	ldr	r2, [r7, #0]
 8007198:	429a      	cmp	r2, r3
 800719a:	d210      	bcs.n	80071be <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800719c:	4b25      	ldr	r3, [pc, #148]	@ (8007234 <HAL_RCC_ClockConfig+0x1ec>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f023 0207 	bic.w	r2, r3, #7
 80071a4:	4923      	ldr	r1, [pc, #140]	@ (8007234 <HAL_RCC_ClockConfig+0x1ec>)
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071ac:	4b21      	ldr	r3, [pc, #132]	@ (8007234 <HAL_RCC_ClockConfig+0x1ec>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f003 0307 	and.w	r3, r3, #7
 80071b4:	683a      	ldr	r2, [r7, #0]
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d001      	beq.n	80071be <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e036      	b.n	800722c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f003 0304 	and.w	r3, r3, #4
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d008      	beq.n	80071dc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071ca:	4b1b      	ldr	r3, [pc, #108]	@ (8007238 <HAL_RCC_ClockConfig+0x1f0>)
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	4918      	ldr	r1, [pc, #96]	@ (8007238 <HAL_RCC_ClockConfig+0x1f0>)
 80071d8:	4313      	orrs	r3, r2
 80071da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f003 0308 	and.w	r3, r3, #8
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d009      	beq.n	80071fc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80071e8:	4b13      	ldr	r3, [pc, #76]	@ (8007238 <HAL_RCC_ClockConfig+0x1f0>)
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	691b      	ldr	r3, [r3, #16]
 80071f4:	00db      	lsls	r3, r3, #3
 80071f6:	4910      	ldr	r1, [pc, #64]	@ (8007238 <HAL_RCC_ClockConfig+0x1f0>)
 80071f8:	4313      	orrs	r3, r2
 80071fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80071fc:	f000 f824 	bl	8007248 <HAL_RCC_GetSysClockFreq>
 8007200:	4602      	mov	r2, r0
 8007202:	4b0d      	ldr	r3, [pc, #52]	@ (8007238 <HAL_RCC_ClockConfig+0x1f0>)
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	091b      	lsrs	r3, r3, #4
 8007208:	f003 030f 	and.w	r3, r3, #15
 800720c:	490b      	ldr	r1, [pc, #44]	@ (800723c <HAL_RCC_ClockConfig+0x1f4>)
 800720e:	5ccb      	ldrb	r3, [r1, r3]
 8007210:	f003 031f 	and.w	r3, r3, #31
 8007214:	fa22 f303 	lsr.w	r3, r2, r3
 8007218:	4a09      	ldr	r2, [pc, #36]	@ (8007240 <HAL_RCC_ClockConfig+0x1f8>)
 800721a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800721c:	4b09      	ldr	r3, [pc, #36]	@ (8007244 <HAL_RCC_ClockConfig+0x1fc>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4618      	mov	r0, r3
 8007222:	f7fa fe63 	bl	8001eec <HAL_InitTick>
 8007226:	4603      	mov	r3, r0
 8007228:	72fb      	strb	r3, [r7, #11]

  return status;
 800722a:	7afb      	ldrb	r3, [r7, #11]
}
 800722c:	4618      	mov	r0, r3
 800722e:	3710      	adds	r7, #16
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}
 8007234:	40022000 	.word	0x40022000
 8007238:	40021000 	.word	0x40021000
 800723c:	0800cd28 	.word	0x0800cd28
 8007240:	20000000 	.word	0x20000000
 8007244:	20000004 	.word	0x20000004

08007248 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007248:	b480      	push	{r7}
 800724a:	b089      	sub	sp, #36	@ 0x24
 800724c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800724e:	2300      	movs	r3, #0
 8007250:	61fb      	str	r3, [r7, #28]
 8007252:	2300      	movs	r3, #0
 8007254:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007256:	4b3e      	ldr	r3, [pc, #248]	@ (8007350 <HAL_RCC_GetSysClockFreq+0x108>)
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	f003 030c 	and.w	r3, r3, #12
 800725e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007260:	4b3b      	ldr	r3, [pc, #236]	@ (8007350 <HAL_RCC_GetSysClockFreq+0x108>)
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	f003 0303 	and.w	r3, r3, #3
 8007268:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d005      	beq.n	800727c <HAL_RCC_GetSysClockFreq+0x34>
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	2b0c      	cmp	r3, #12
 8007274:	d121      	bne.n	80072ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2b01      	cmp	r3, #1
 800727a:	d11e      	bne.n	80072ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800727c:	4b34      	ldr	r3, [pc, #208]	@ (8007350 <HAL_RCC_GetSysClockFreq+0x108>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 0308 	and.w	r3, r3, #8
 8007284:	2b00      	cmp	r3, #0
 8007286:	d107      	bne.n	8007298 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007288:	4b31      	ldr	r3, [pc, #196]	@ (8007350 <HAL_RCC_GetSysClockFreq+0x108>)
 800728a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800728e:	0a1b      	lsrs	r3, r3, #8
 8007290:	f003 030f 	and.w	r3, r3, #15
 8007294:	61fb      	str	r3, [r7, #28]
 8007296:	e005      	b.n	80072a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007298:	4b2d      	ldr	r3, [pc, #180]	@ (8007350 <HAL_RCC_GetSysClockFreq+0x108>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	091b      	lsrs	r3, r3, #4
 800729e:	f003 030f 	and.w	r3, r3, #15
 80072a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80072a4:	4a2b      	ldr	r2, [pc, #172]	@ (8007354 <HAL_RCC_GetSysClockFreq+0x10c>)
 80072a6:	69fb      	ldr	r3, [r7, #28]
 80072a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d10d      	bne.n	80072d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80072b8:	e00a      	b.n	80072d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	2b04      	cmp	r3, #4
 80072be:	d102      	bne.n	80072c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80072c0:	4b25      	ldr	r3, [pc, #148]	@ (8007358 <HAL_RCC_GetSysClockFreq+0x110>)
 80072c2:	61bb      	str	r3, [r7, #24]
 80072c4:	e004      	b.n	80072d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	2b08      	cmp	r3, #8
 80072ca:	d101      	bne.n	80072d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80072cc:	4b23      	ldr	r3, [pc, #140]	@ (800735c <HAL_RCC_GetSysClockFreq+0x114>)
 80072ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	2b0c      	cmp	r3, #12
 80072d4:	d134      	bne.n	8007340 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80072d6:	4b1e      	ldr	r3, [pc, #120]	@ (8007350 <HAL_RCC_GetSysClockFreq+0x108>)
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	f003 0303 	and.w	r3, r3, #3
 80072de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d003      	beq.n	80072ee <HAL_RCC_GetSysClockFreq+0xa6>
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	2b03      	cmp	r3, #3
 80072ea:	d003      	beq.n	80072f4 <HAL_RCC_GetSysClockFreq+0xac>
 80072ec:	e005      	b.n	80072fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80072ee:	4b1a      	ldr	r3, [pc, #104]	@ (8007358 <HAL_RCC_GetSysClockFreq+0x110>)
 80072f0:	617b      	str	r3, [r7, #20]
      break;
 80072f2:	e005      	b.n	8007300 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80072f4:	4b19      	ldr	r3, [pc, #100]	@ (800735c <HAL_RCC_GetSysClockFreq+0x114>)
 80072f6:	617b      	str	r3, [r7, #20]
      break;
 80072f8:	e002      	b.n	8007300 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80072fa:	69fb      	ldr	r3, [r7, #28]
 80072fc:	617b      	str	r3, [r7, #20]
      break;
 80072fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007300:	4b13      	ldr	r3, [pc, #76]	@ (8007350 <HAL_RCC_GetSysClockFreq+0x108>)
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	091b      	lsrs	r3, r3, #4
 8007306:	f003 0307 	and.w	r3, r3, #7
 800730a:	3301      	adds	r3, #1
 800730c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800730e:	4b10      	ldr	r3, [pc, #64]	@ (8007350 <HAL_RCC_GetSysClockFreq+0x108>)
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	0a1b      	lsrs	r3, r3, #8
 8007314:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007318:	697a      	ldr	r2, [r7, #20]
 800731a:	fb03 f202 	mul.w	r2, r3, r2
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	fbb2 f3f3 	udiv	r3, r2, r3
 8007324:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007326:	4b0a      	ldr	r3, [pc, #40]	@ (8007350 <HAL_RCC_GetSysClockFreq+0x108>)
 8007328:	68db      	ldr	r3, [r3, #12]
 800732a:	0e5b      	lsrs	r3, r3, #25
 800732c:	f003 0303 	and.w	r3, r3, #3
 8007330:	3301      	adds	r3, #1
 8007332:	005b      	lsls	r3, r3, #1
 8007334:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007336:	697a      	ldr	r2, [r7, #20]
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	fbb2 f3f3 	udiv	r3, r2, r3
 800733e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007340:	69bb      	ldr	r3, [r7, #24]
}
 8007342:	4618      	mov	r0, r3
 8007344:	3724      	adds	r7, #36	@ 0x24
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop
 8007350:	40021000 	.word	0x40021000
 8007354:	0800cd40 	.word	0x0800cd40
 8007358:	00f42400 	.word	0x00f42400
 800735c:	007a1200 	.word	0x007a1200

08007360 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007360:	b480      	push	{r7}
 8007362:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007364:	4b03      	ldr	r3, [pc, #12]	@ (8007374 <HAL_RCC_GetHCLKFreq+0x14>)
 8007366:	681b      	ldr	r3, [r3, #0]
}
 8007368:	4618      	mov	r0, r3
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr
 8007372:	bf00      	nop
 8007374:	20000000 	.word	0x20000000

08007378 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800737c:	f7ff fff0 	bl	8007360 <HAL_RCC_GetHCLKFreq>
 8007380:	4602      	mov	r2, r0
 8007382:	4b06      	ldr	r3, [pc, #24]	@ (800739c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	0a1b      	lsrs	r3, r3, #8
 8007388:	f003 0307 	and.w	r3, r3, #7
 800738c:	4904      	ldr	r1, [pc, #16]	@ (80073a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800738e:	5ccb      	ldrb	r3, [r1, r3]
 8007390:	f003 031f 	and.w	r3, r3, #31
 8007394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007398:	4618      	mov	r0, r3
 800739a:	bd80      	pop	{r7, pc}
 800739c:	40021000 	.word	0x40021000
 80073a0:	0800cd38 	.word	0x0800cd38

080073a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80073a8:	f7ff ffda 	bl	8007360 <HAL_RCC_GetHCLKFreq>
 80073ac:	4602      	mov	r2, r0
 80073ae:	4b06      	ldr	r3, [pc, #24]	@ (80073c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	0adb      	lsrs	r3, r3, #11
 80073b4:	f003 0307 	and.w	r3, r3, #7
 80073b8:	4904      	ldr	r1, [pc, #16]	@ (80073cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80073ba:	5ccb      	ldrb	r3, [r1, r3]
 80073bc:	f003 031f 	and.w	r3, r3, #31
 80073c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	40021000 	.word	0x40021000
 80073cc:	0800cd38 	.word	0x0800cd38

080073d0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	220f      	movs	r2, #15
 80073de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80073e0:	4b12      	ldr	r3, [pc, #72]	@ (800742c <HAL_RCC_GetClockConfig+0x5c>)
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	f003 0203 	and.w	r2, r3, #3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80073ec:	4b0f      	ldr	r3, [pc, #60]	@ (800742c <HAL_RCC_GetClockConfig+0x5c>)
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80073f8:	4b0c      	ldr	r3, [pc, #48]	@ (800742c <HAL_RCC_GetClockConfig+0x5c>)
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8007404:	4b09      	ldr	r3, [pc, #36]	@ (800742c <HAL_RCC_GetClockConfig+0x5c>)
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	08db      	lsrs	r3, r3, #3
 800740a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8007412:	4b07      	ldr	r3, [pc, #28]	@ (8007430 <HAL_RCC_GetClockConfig+0x60>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f003 0207 	and.w	r2, r3, #7
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	601a      	str	r2, [r3, #0]
}
 800741e:	bf00      	nop
 8007420:	370c      	adds	r7, #12
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr
 800742a:	bf00      	nop
 800742c:	40021000 	.word	0x40021000
 8007430:	40022000 	.word	0x40022000

08007434 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b086      	sub	sp, #24
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800743c:	2300      	movs	r3, #0
 800743e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007440:	4b2a      	ldr	r3, [pc, #168]	@ (80074ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007444:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007448:	2b00      	cmp	r3, #0
 800744a:	d003      	beq.n	8007454 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800744c:	f7ff f97e 	bl	800674c <HAL_PWREx_GetVoltageRange>
 8007450:	6178      	str	r0, [r7, #20]
 8007452:	e014      	b.n	800747e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007454:	4b25      	ldr	r3, [pc, #148]	@ (80074ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007458:	4a24      	ldr	r2, [pc, #144]	@ (80074ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800745a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800745e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007460:	4b22      	ldr	r3, [pc, #136]	@ (80074ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007464:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007468:	60fb      	str	r3, [r7, #12]
 800746a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800746c:	f7ff f96e 	bl	800674c <HAL_PWREx_GetVoltageRange>
 8007470:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007472:	4b1e      	ldr	r3, [pc, #120]	@ (80074ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007476:	4a1d      	ldr	r2, [pc, #116]	@ (80074ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007478:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800747c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007484:	d10b      	bne.n	800749e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2b80      	cmp	r3, #128	@ 0x80
 800748a:	d919      	bls.n	80074c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2ba0      	cmp	r3, #160	@ 0xa0
 8007490:	d902      	bls.n	8007498 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007492:	2302      	movs	r3, #2
 8007494:	613b      	str	r3, [r7, #16]
 8007496:	e013      	b.n	80074c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007498:	2301      	movs	r3, #1
 800749a:	613b      	str	r3, [r7, #16]
 800749c:	e010      	b.n	80074c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2b80      	cmp	r3, #128	@ 0x80
 80074a2:	d902      	bls.n	80074aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80074a4:	2303      	movs	r3, #3
 80074a6:	613b      	str	r3, [r7, #16]
 80074a8:	e00a      	b.n	80074c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2b80      	cmp	r3, #128	@ 0x80
 80074ae:	d102      	bne.n	80074b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80074b0:	2302      	movs	r3, #2
 80074b2:	613b      	str	r3, [r7, #16]
 80074b4:	e004      	b.n	80074c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2b70      	cmp	r3, #112	@ 0x70
 80074ba:	d101      	bne.n	80074c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80074bc:	2301      	movs	r3, #1
 80074be:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80074c0:	4b0b      	ldr	r3, [pc, #44]	@ (80074f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f023 0207 	bic.w	r2, r3, #7
 80074c8:	4909      	ldr	r1, [pc, #36]	@ (80074f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	4313      	orrs	r3, r2
 80074ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80074d0:	4b07      	ldr	r3, [pc, #28]	@ (80074f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f003 0307 	and.w	r3, r3, #7
 80074d8:	693a      	ldr	r2, [r7, #16]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d001      	beq.n	80074e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	e000      	b.n	80074e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3718      	adds	r7, #24
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}
 80074ec:	40021000 	.word	0x40021000
 80074f0:	40022000 	.word	0x40022000

080074f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b086      	sub	sp, #24
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80074fc:	2300      	movs	r3, #0
 80074fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007500:	2300      	movs	r3, #0
 8007502:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800750c:	2b00      	cmp	r3, #0
 800750e:	d041      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007514:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007518:	d02a      	beq.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800751a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800751e:	d824      	bhi.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007520:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007524:	d008      	beq.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007526:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800752a:	d81e      	bhi.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00a      	beq.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007530:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007534:	d010      	beq.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007536:	e018      	b.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007538:	4b86      	ldr	r3, [pc, #536]	@ (8007754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	4a85      	ldr	r2, [pc, #532]	@ (8007754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800753e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007542:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007544:	e015      	b.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	3304      	adds	r3, #4
 800754a:	2100      	movs	r1, #0
 800754c:	4618      	mov	r0, r3
 800754e:	f000 facd 	bl	8007aec <RCCEx_PLLSAI1_Config>
 8007552:	4603      	mov	r3, r0
 8007554:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007556:	e00c      	b.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	3320      	adds	r3, #32
 800755c:	2100      	movs	r1, #0
 800755e:	4618      	mov	r0, r3
 8007560:	f000 fbb6 	bl	8007cd0 <RCCEx_PLLSAI2_Config>
 8007564:	4603      	mov	r3, r0
 8007566:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007568:	e003      	b.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	74fb      	strb	r3, [r7, #19]
      break;
 800756e:	e000      	b.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007570:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007572:	7cfb      	ldrb	r3, [r7, #19]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d10b      	bne.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007578:	4b76      	ldr	r3, [pc, #472]	@ (8007754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800757a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800757e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007586:	4973      	ldr	r1, [pc, #460]	@ (8007754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007588:	4313      	orrs	r3, r2
 800758a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800758e:	e001      	b.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007590:	7cfb      	ldrb	r3, [r7, #19]
 8007592:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800759c:	2b00      	cmp	r3, #0
 800759e:	d041      	beq.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075a4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80075a8:	d02a      	beq.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80075aa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80075ae:	d824      	bhi.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80075b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80075b4:	d008      	beq.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80075b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80075ba:	d81e      	bhi.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d00a      	beq.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80075c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80075c4:	d010      	beq.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80075c6:	e018      	b.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80075c8:	4b62      	ldr	r3, [pc, #392]	@ (8007754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	4a61      	ldr	r2, [pc, #388]	@ (8007754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075d2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80075d4:	e015      	b.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	3304      	adds	r3, #4
 80075da:	2100      	movs	r1, #0
 80075dc:	4618      	mov	r0, r3
 80075de:	f000 fa85 	bl	8007aec <RCCEx_PLLSAI1_Config>
 80075e2:	4603      	mov	r3, r0
 80075e4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80075e6:	e00c      	b.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	3320      	adds	r3, #32
 80075ec:	2100      	movs	r1, #0
 80075ee:	4618      	mov	r0, r3
 80075f0:	f000 fb6e 	bl	8007cd0 <RCCEx_PLLSAI2_Config>
 80075f4:	4603      	mov	r3, r0
 80075f6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80075f8:	e003      	b.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	74fb      	strb	r3, [r7, #19]
      break;
 80075fe:	e000      	b.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8007600:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007602:	7cfb      	ldrb	r3, [r7, #19]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d10b      	bne.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007608:	4b52      	ldr	r3, [pc, #328]	@ (8007754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800760a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800760e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007616:	494f      	ldr	r1, [pc, #316]	@ (8007754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007618:	4313      	orrs	r3, r2
 800761a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800761e:	e001      	b.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007620:	7cfb      	ldrb	r3, [r7, #19]
 8007622:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800762c:	2b00      	cmp	r3, #0
 800762e:	f000 80a0 	beq.w	8007772 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007632:	2300      	movs	r3, #0
 8007634:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007636:	4b47      	ldr	r3, [pc, #284]	@ (8007754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800763a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800763e:	2b00      	cmp	r3, #0
 8007640:	d101      	bne.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8007642:	2301      	movs	r3, #1
 8007644:	e000      	b.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8007646:	2300      	movs	r3, #0
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00d      	beq.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800764c:	4b41      	ldr	r3, [pc, #260]	@ (8007754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800764e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007650:	4a40      	ldr	r2, [pc, #256]	@ (8007754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007652:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007656:	6593      	str	r3, [r2, #88]	@ 0x58
 8007658:	4b3e      	ldr	r3, [pc, #248]	@ (8007754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800765a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800765c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007660:	60bb      	str	r3, [r7, #8]
 8007662:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007664:	2301      	movs	r3, #1
 8007666:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007668:	4b3b      	ldr	r3, [pc, #236]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a3a      	ldr	r2, [pc, #232]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800766e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007672:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007674:	f7fb fdc2 	bl	80031fc <HAL_GetTick>
 8007678:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800767a:	e009      	b.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800767c:	f7fb fdbe 	bl	80031fc <HAL_GetTick>
 8007680:	4602      	mov	r2, r0
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	1ad3      	subs	r3, r2, r3
 8007686:	2b02      	cmp	r3, #2
 8007688:	d902      	bls.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800768a:	2303      	movs	r3, #3
 800768c:	74fb      	strb	r3, [r7, #19]
        break;
 800768e:	e005      	b.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007690:	4b31      	ldr	r3, [pc, #196]	@ (8007758 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007698:	2b00      	cmp	r3, #0
 800769a:	d0ef      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800769c:	7cfb      	ldrb	r3, [r7, #19]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d15c      	bne.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80076a2:	4b2c      	ldr	r3, [pc, #176]	@ (8007754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80076a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076ac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d01f      	beq.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076ba:	697a      	ldr	r2, [r7, #20]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d019      	beq.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80076c0:	4b24      	ldr	r3, [pc, #144]	@ (8007754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80076c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80076ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80076cc:	4b21      	ldr	r3, [pc, #132]	@ (8007754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80076ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076d2:	4a20      	ldr	r2, [pc, #128]	@ (8007754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80076d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80076d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80076dc:	4b1d      	ldr	r3, [pc, #116]	@ (8007754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80076de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076e2:	4a1c      	ldr	r2, [pc, #112]	@ (8007754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80076e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80076e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80076ec:	4a19      	ldr	r2, [pc, #100]	@ (8007754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	f003 0301 	and.w	r3, r3, #1
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d016      	beq.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076fe:	f7fb fd7d 	bl	80031fc <HAL_GetTick>
 8007702:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007704:	e00b      	b.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007706:	f7fb fd79 	bl	80031fc <HAL_GetTick>
 800770a:	4602      	mov	r2, r0
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	1ad3      	subs	r3, r2, r3
 8007710:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007714:	4293      	cmp	r3, r2
 8007716:	d902      	bls.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8007718:	2303      	movs	r3, #3
 800771a:	74fb      	strb	r3, [r7, #19]
            break;
 800771c:	e006      	b.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800771e:	4b0d      	ldr	r3, [pc, #52]	@ (8007754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007720:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007724:	f003 0302 	and.w	r3, r3, #2
 8007728:	2b00      	cmp	r3, #0
 800772a:	d0ec      	beq.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800772c:	7cfb      	ldrb	r3, [r7, #19]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d10c      	bne.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007732:	4b08      	ldr	r3, [pc, #32]	@ (8007754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007734:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007738:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007742:	4904      	ldr	r1, [pc, #16]	@ (8007754 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007744:	4313      	orrs	r3, r2
 8007746:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800774a:	e009      	b.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800774c:	7cfb      	ldrb	r3, [r7, #19]
 800774e:	74bb      	strb	r3, [r7, #18]
 8007750:	e006      	b.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8007752:	bf00      	nop
 8007754:	40021000 	.word	0x40021000
 8007758:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800775c:	7cfb      	ldrb	r3, [r7, #19]
 800775e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007760:	7c7b      	ldrb	r3, [r7, #17]
 8007762:	2b01      	cmp	r3, #1
 8007764:	d105      	bne.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007766:	4ba6      	ldr	r3, [pc, #664]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800776a:	4aa5      	ldr	r2, [pc, #660]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800776c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007770:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f003 0301 	and.w	r3, r3, #1
 800777a:	2b00      	cmp	r3, #0
 800777c:	d00a      	beq.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800777e:	4ba0      	ldr	r3, [pc, #640]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007780:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007784:	f023 0203 	bic.w	r2, r3, #3
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800778c:	499c      	ldr	r1, [pc, #624]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800778e:	4313      	orrs	r3, r2
 8007790:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f003 0302 	and.w	r3, r3, #2
 800779c:	2b00      	cmp	r3, #0
 800779e:	d00a      	beq.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80077a0:	4b97      	ldr	r3, [pc, #604]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80077a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077a6:	f023 020c 	bic.w	r2, r3, #12
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077ae:	4994      	ldr	r1, [pc, #592]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80077b0:	4313      	orrs	r3, r2
 80077b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f003 0304 	and.w	r3, r3, #4
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d00a      	beq.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80077c2:	4b8f      	ldr	r3, [pc, #572]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80077c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077c8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077d0:	498b      	ldr	r1, [pc, #556]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80077d2:	4313      	orrs	r3, r2
 80077d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f003 0308 	and.w	r3, r3, #8
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d00a      	beq.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80077e4:	4b86      	ldr	r3, [pc, #536]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80077e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077ea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077f2:	4983      	ldr	r1, [pc, #524]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80077f4:	4313      	orrs	r3, r2
 80077f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 0310 	and.w	r3, r3, #16
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00a      	beq.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007806:	4b7e      	ldr	r3, [pc, #504]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007808:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800780c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007814:	497a      	ldr	r1, [pc, #488]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007816:	4313      	orrs	r3, r2
 8007818:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 0320 	and.w	r3, r3, #32
 8007824:	2b00      	cmp	r3, #0
 8007826:	d00a      	beq.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007828:	4b75      	ldr	r3, [pc, #468]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800782a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800782e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007836:	4972      	ldr	r1, [pc, #456]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007838:	4313      	orrs	r3, r2
 800783a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00a      	beq.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800784a:	4b6d      	ldr	r3, [pc, #436]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800784c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007850:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007858:	4969      	ldr	r1, [pc, #420]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800785a:	4313      	orrs	r3, r2
 800785c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007868:	2b00      	cmp	r3, #0
 800786a:	d00a      	beq.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800786c:	4b64      	ldr	r3, [pc, #400]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800786e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007872:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800787a:	4961      	ldr	r1, [pc, #388]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800787c:	4313      	orrs	r3, r2
 800787e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00a      	beq.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800788e:	4b5c      	ldr	r3, [pc, #368]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007894:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800789c:	4958      	ldr	r1, [pc, #352]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800789e:	4313      	orrs	r3, r2
 80078a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d00a      	beq.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80078b0:	4b53      	ldr	r3, [pc, #332]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80078b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078b6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078be:	4950      	ldr	r1, [pc, #320]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80078c0:	4313      	orrs	r3, r2
 80078c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00a      	beq.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80078d2:	4b4b      	ldr	r3, [pc, #300]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80078d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078e0:	4947      	ldr	r1, [pc, #284]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80078e2:	4313      	orrs	r3, r2
 80078e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d00a      	beq.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80078f4:	4b42      	ldr	r3, [pc, #264]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80078f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80078fa:	f023 0203 	bic.w	r2, r3, #3
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007902:	493f      	ldr	r1, [pc, #252]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007904:	4313      	orrs	r3, r2
 8007906:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007912:	2b00      	cmp	r3, #0
 8007914:	d028      	beq.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007916:	4b3a      	ldr	r3, [pc, #232]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007918:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800791c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007924:	4936      	ldr	r1, [pc, #216]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007926:	4313      	orrs	r3, r2
 8007928:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007930:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007934:	d106      	bne.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007936:	4b32      	ldr	r3, [pc, #200]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	4a31      	ldr	r2, [pc, #196]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800793c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007940:	60d3      	str	r3, [r2, #12]
 8007942:	e011      	b.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007948:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800794c:	d10c      	bne.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	3304      	adds	r3, #4
 8007952:	2101      	movs	r1, #1
 8007954:	4618      	mov	r0, r3
 8007956:	f000 f8c9 	bl	8007aec <RCCEx_PLLSAI1_Config>
 800795a:	4603      	mov	r3, r0
 800795c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800795e:	7cfb      	ldrb	r3, [r7, #19]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d001      	beq.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8007964:	7cfb      	ldrb	r3, [r7, #19]
 8007966:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007970:	2b00      	cmp	r3, #0
 8007972:	d028      	beq.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007974:	4b22      	ldr	r3, [pc, #136]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800797a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007982:	491f      	ldr	r1, [pc, #124]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007984:	4313      	orrs	r3, r2
 8007986:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800798e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007992:	d106      	bne.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007994:	4b1a      	ldr	r3, [pc, #104]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	4a19      	ldr	r2, [pc, #100]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800799a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800799e:	60d3      	str	r3, [r2, #12]
 80079a0:	e011      	b.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80079aa:	d10c      	bne.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	3304      	adds	r3, #4
 80079b0:	2101      	movs	r1, #1
 80079b2:	4618      	mov	r0, r3
 80079b4:	f000 f89a 	bl	8007aec <RCCEx_PLLSAI1_Config>
 80079b8:	4603      	mov	r3, r0
 80079ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80079bc:	7cfb      	ldrb	r3, [r7, #19]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d001      	beq.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80079c2:	7cfb      	ldrb	r3, [r7, #19]
 80079c4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d02a      	beq.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80079d2:	4b0b      	ldr	r3, [pc, #44]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80079d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079d8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80079e0:	4907      	ldr	r1, [pc, #28]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80079e2:	4313      	orrs	r3, r2
 80079e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80079ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80079f0:	d108      	bne.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80079f2:	4b03      	ldr	r3, [pc, #12]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	4a02      	ldr	r2, [pc, #8]	@ (8007a00 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80079f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80079fc:	60d3      	str	r3, [r2, #12]
 80079fe:	e013      	b.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8007a00:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a08:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007a0c:	d10c      	bne.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	3304      	adds	r3, #4
 8007a12:	2101      	movs	r1, #1
 8007a14:	4618      	mov	r0, r3
 8007a16:	f000 f869 	bl	8007aec <RCCEx_PLLSAI1_Config>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007a1e:	7cfb      	ldrb	r3, [r7, #19]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d001      	beq.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8007a24:	7cfb      	ldrb	r3, [r7, #19]
 8007a26:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d02f      	beq.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007a34:	4b2c      	ldr	r3, [pc, #176]	@ (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a3a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007a42:	4929      	ldr	r1, [pc, #164]	@ (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007a44:	4313      	orrs	r3, r2
 8007a46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007a4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a52:	d10d      	bne.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	3304      	adds	r3, #4
 8007a58:	2102      	movs	r1, #2
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f000 f846 	bl	8007aec <RCCEx_PLLSAI1_Config>
 8007a60:	4603      	mov	r3, r0
 8007a62:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007a64:	7cfb      	ldrb	r3, [r7, #19]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d014      	beq.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8007a6a:	7cfb      	ldrb	r3, [r7, #19]
 8007a6c:	74bb      	strb	r3, [r7, #18]
 8007a6e:	e011      	b.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007a74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a78:	d10c      	bne.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	3320      	adds	r3, #32
 8007a7e:	2102      	movs	r1, #2
 8007a80:	4618      	mov	r0, r3
 8007a82:	f000 f925 	bl	8007cd0 <RCCEx_PLLSAI2_Config>
 8007a86:	4603      	mov	r3, r0
 8007a88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007a8a:	7cfb      	ldrb	r3, [r7, #19]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d001      	beq.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8007a90:	7cfb      	ldrb	r3, [r7, #19]
 8007a92:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d00b      	beq.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007aa0:	4b11      	ldr	r3, [pc, #68]	@ (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007aa6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ab0:	490d      	ldr	r1, [pc, #52]	@ (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d00b      	beq.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007ac4:	4b08      	ldr	r3, [pc, #32]	@ (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007aca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ad4:	4904      	ldr	r1, [pc, #16]	@ (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007adc:	7cbb      	ldrb	r3, [r7, #18]
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3718      	adds	r7, #24
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	40021000 	.word	0x40021000

08007aec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007af6:	2300      	movs	r3, #0
 8007af8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007afa:	4b74      	ldr	r3, [pc, #464]	@ (8007ccc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007afc:	68db      	ldr	r3, [r3, #12]
 8007afe:	f003 0303 	and.w	r3, r3, #3
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d018      	beq.n	8007b38 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007b06:	4b71      	ldr	r3, [pc, #452]	@ (8007ccc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	f003 0203 	and.w	r2, r3, #3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d10d      	bne.n	8007b32 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
       ||
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d009      	beq.n	8007b32 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007b1e:	4b6b      	ldr	r3, [pc, #428]	@ (8007ccc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	091b      	lsrs	r3, r3, #4
 8007b24:	f003 0307 	and.w	r3, r3, #7
 8007b28:	1c5a      	adds	r2, r3, #1
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	685b      	ldr	r3, [r3, #4]
       ||
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d047      	beq.n	8007bc2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	73fb      	strb	r3, [r7, #15]
 8007b36:	e044      	b.n	8007bc2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	2b03      	cmp	r3, #3
 8007b3e:	d018      	beq.n	8007b72 <RCCEx_PLLSAI1_Config+0x86>
 8007b40:	2b03      	cmp	r3, #3
 8007b42:	d825      	bhi.n	8007b90 <RCCEx_PLLSAI1_Config+0xa4>
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d002      	beq.n	8007b4e <RCCEx_PLLSAI1_Config+0x62>
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d009      	beq.n	8007b60 <RCCEx_PLLSAI1_Config+0x74>
 8007b4c:	e020      	b.n	8007b90 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007b4e:	4b5f      	ldr	r3, [pc, #380]	@ (8007ccc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f003 0302 	and.w	r3, r3, #2
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d11d      	bne.n	8007b96 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007b5e:	e01a      	b.n	8007b96 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007b60:	4b5a      	ldr	r3, [pc, #360]	@ (8007ccc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d116      	bne.n	8007b9a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007b70:	e013      	b.n	8007b9a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007b72:	4b56      	ldr	r3, [pc, #344]	@ (8007ccc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d10f      	bne.n	8007b9e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007b7e:	4b53      	ldr	r3, [pc, #332]	@ (8007ccc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d109      	bne.n	8007b9e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007b8e:	e006      	b.n	8007b9e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	73fb      	strb	r3, [r7, #15]
      break;
 8007b94:	e004      	b.n	8007ba0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007b96:	bf00      	nop
 8007b98:	e002      	b.n	8007ba0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007b9a:	bf00      	nop
 8007b9c:	e000      	b.n	8007ba0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007b9e:	bf00      	nop
    }

    if(status == HAL_OK)
 8007ba0:	7bfb      	ldrb	r3, [r7, #15]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d10d      	bne.n	8007bc2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007ba6:	4b49      	ldr	r3, [pc, #292]	@ (8007ccc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ba8:	68db      	ldr	r3, [r3, #12]
 8007baa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6819      	ldr	r1, [r3, #0]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	3b01      	subs	r3, #1
 8007bb8:	011b      	lsls	r3, r3, #4
 8007bba:	430b      	orrs	r3, r1
 8007bbc:	4943      	ldr	r1, [pc, #268]	@ (8007ccc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007bc2:	7bfb      	ldrb	r3, [r7, #15]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d17c      	bne.n	8007cc2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007bc8:	4b40      	ldr	r3, [pc, #256]	@ (8007ccc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a3f      	ldr	r2, [pc, #252]	@ (8007ccc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007bce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007bd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bd4:	f7fb fb12 	bl	80031fc <HAL_GetTick>
 8007bd8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007bda:	e009      	b.n	8007bf0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007bdc:	f7fb fb0e 	bl	80031fc <HAL_GetTick>
 8007be0:	4602      	mov	r2, r0
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	1ad3      	subs	r3, r2, r3
 8007be6:	2b02      	cmp	r3, #2
 8007be8:	d902      	bls.n	8007bf0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007bea:	2303      	movs	r3, #3
 8007bec:	73fb      	strb	r3, [r7, #15]
        break;
 8007bee:	e005      	b.n	8007bfc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007bf0:	4b36      	ldr	r3, [pc, #216]	@ (8007ccc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d1ef      	bne.n	8007bdc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007bfc:	7bfb      	ldrb	r3, [r7, #15]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d15f      	bne.n	8007cc2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d110      	bne.n	8007c2a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007c08:	4b30      	ldr	r3, [pc, #192]	@ (8007ccc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c0a:	691b      	ldr	r3, [r3, #16]
 8007c0c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8007c10:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	6892      	ldr	r2, [r2, #8]
 8007c18:	0211      	lsls	r1, r2, #8
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	68d2      	ldr	r2, [r2, #12]
 8007c1e:	06d2      	lsls	r2, r2, #27
 8007c20:	430a      	orrs	r2, r1
 8007c22:	492a      	ldr	r1, [pc, #168]	@ (8007ccc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c24:	4313      	orrs	r3, r2
 8007c26:	610b      	str	r3, [r1, #16]
 8007c28:	e027      	b.n	8007c7a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d112      	bne.n	8007c56 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007c30:	4b26      	ldr	r3, [pc, #152]	@ (8007ccc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c32:	691b      	ldr	r3, [r3, #16]
 8007c34:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8007c38:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	6892      	ldr	r2, [r2, #8]
 8007c40:	0211      	lsls	r1, r2, #8
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	6912      	ldr	r2, [r2, #16]
 8007c46:	0852      	lsrs	r2, r2, #1
 8007c48:	3a01      	subs	r2, #1
 8007c4a:	0552      	lsls	r2, r2, #21
 8007c4c:	430a      	orrs	r2, r1
 8007c4e:	491f      	ldr	r1, [pc, #124]	@ (8007ccc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c50:	4313      	orrs	r3, r2
 8007c52:	610b      	str	r3, [r1, #16]
 8007c54:	e011      	b.n	8007c7a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007c56:	4b1d      	ldr	r3, [pc, #116]	@ (8007ccc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c58:	691b      	ldr	r3, [r3, #16]
 8007c5a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007c5e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	6892      	ldr	r2, [r2, #8]
 8007c66:	0211      	lsls	r1, r2, #8
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	6952      	ldr	r2, [r2, #20]
 8007c6c:	0852      	lsrs	r2, r2, #1
 8007c6e:	3a01      	subs	r2, #1
 8007c70:	0652      	lsls	r2, r2, #25
 8007c72:	430a      	orrs	r2, r1
 8007c74:	4915      	ldr	r1, [pc, #84]	@ (8007ccc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c76:	4313      	orrs	r3, r2
 8007c78:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007c7a:	4b14      	ldr	r3, [pc, #80]	@ (8007ccc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a13      	ldr	r2, [pc, #76]	@ (8007ccc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c80:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007c84:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c86:	f7fb fab9 	bl	80031fc <HAL_GetTick>
 8007c8a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007c8c:	e009      	b.n	8007ca2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007c8e:	f7fb fab5 	bl	80031fc <HAL_GetTick>
 8007c92:	4602      	mov	r2, r0
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	1ad3      	subs	r3, r2, r3
 8007c98:	2b02      	cmp	r3, #2
 8007c9a:	d902      	bls.n	8007ca2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007c9c:	2303      	movs	r3, #3
 8007c9e:	73fb      	strb	r3, [r7, #15]
          break;
 8007ca0:	e005      	b.n	8007cae <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8007ccc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d0ef      	beq.n	8007c8e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8007cae:	7bfb      	ldrb	r3, [r7, #15]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d106      	bne.n	8007cc2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007cb4:	4b05      	ldr	r3, [pc, #20]	@ (8007ccc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007cb6:	691a      	ldr	r2, [r3, #16]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	699b      	ldr	r3, [r3, #24]
 8007cbc:	4903      	ldr	r1, [pc, #12]	@ (8007ccc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3710      	adds	r7, #16
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	40021000 	.word	0x40021000

08007cd0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007cde:	4b69      	ldr	r3, [pc, #420]	@ (8007e84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	f003 0303 	and.w	r3, r3, #3
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d018      	beq.n	8007d1c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007cea:	4b66      	ldr	r3, [pc, #408]	@ (8007e84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007cec:	68db      	ldr	r3, [r3, #12]
 8007cee:	f003 0203 	and.w	r2, r3, #3
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d10d      	bne.n	8007d16 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
       ||
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d009      	beq.n	8007d16 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8007d02:	4b60      	ldr	r3, [pc, #384]	@ (8007e84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	091b      	lsrs	r3, r3, #4
 8007d08:	f003 0307 	and.w	r3, r3, #7
 8007d0c:	1c5a      	adds	r2, r3, #1
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	685b      	ldr	r3, [r3, #4]
       ||
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d047      	beq.n	8007da6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	73fb      	strb	r3, [r7, #15]
 8007d1a:	e044      	b.n	8007da6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	2b03      	cmp	r3, #3
 8007d22:	d018      	beq.n	8007d56 <RCCEx_PLLSAI2_Config+0x86>
 8007d24:	2b03      	cmp	r3, #3
 8007d26:	d825      	bhi.n	8007d74 <RCCEx_PLLSAI2_Config+0xa4>
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d002      	beq.n	8007d32 <RCCEx_PLLSAI2_Config+0x62>
 8007d2c:	2b02      	cmp	r3, #2
 8007d2e:	d009      	beq.n	8007d44 <RCCEx_PLLSAI2_Config+0x74>
 8007d30:	e020      	b.n	8007d74 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007d32:	4b54      	ldr	r3, [pc, #336]	@ (8007e84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f003 0302 	and.w	r3, r3, #2
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d11d      	bne.n	8007d7a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007d42:	e01a      	b.n	8007d7a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007d44:	4b4f      	ldr	r3, [pc, #316]	@ (8007e84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d116      	bne.n	8007d7e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8007d50:	2301      	movs	r3, #1
 8007d52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007d54:	e013      	b.n	8007d7e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007d56:	4b4b      	ldr	r3, [pc, #300]	@ (8007e84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d10f      	bne.n	8007d82 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007d62:	4b48      	ldr	r3, [pc, #288]	@ (8007e84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d109      	bne.n	8007d82 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007d72:	e006      	b.n	8007d82 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007d74:	2301      	movs	r3, #1
 8007d76:	73fb      	strb	r3, [r7, #15]
      break;
 8007d78:	e004      	b.n	8007d84 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007d7a:	bf00      	nop
 8007d7c:	e002      	b.n	8007d84 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007d7e:	bf00      	nop
 8007d80:	e000      	b.n	8007d84 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007d82:	bf00      	nop
    }

    if(status == HAL_OK)
 8007d84:	7bfb      	ldrb	r3, [r7, #15]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d10d      	bne.n	8007da6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007d8a:	4b3e      	ldr	r3, [pc, #248]	@ (8007e84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007d8c:	68db      	ldr	r3, [r3, #12]
 8007d8e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6819      	ldr	r1, [r3, #0]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	3b01      	subs	r3, #1
 8007d9c:	011b      	lsls	r3, r3, #4
 8007d9e:	430b      	orrs	r3, r1
 8007da0:	4938      	ldr	r1, [pc, #224]	@ (8007e84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007da2:	4313      	orrs	r3, r2
 8007da4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007da6:	7bfb      	ldrb	r3, [r7, #15]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d166      	bne.n	8007e7a <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007dac:	4b35      	ldr	r3, [pc, #212]	@ (8007e84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a34      	ldr	r2, [pc, #208]	@ (8007e84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007db2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007db6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007db8:	f7fb fa20 	bl	80031fc <HAL_GetTick>
 8007dbc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007dbe:	e009      	b.n	8007dd4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007dc0:	f7fb fa1c 	bl	80031fc <HAL_GetTick>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	1ad3      	subs	r3, r2, r3
 8007dca:	2b02      	cmp	r3, #2
 8007dcc:	d902      	bls.n	8007dd4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007dce:	2303      	movs	r3, #3
 8007dd0:	73fb      	strb	r3, [r7, #15]
        break;
 8007dd2:	e005      	b.n	8007de0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007dd4:	4b2b      	ldr	r3, [pc, #172]	@ (8007e84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d1ef      	bne.n	8007dc0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007de0:	7bfb      	ldrb	r3, [r7, #15]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d149      	bne.n	8007e7a <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d110      	bne.n	8007e0e <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007dec:	4b25      	ldr	r3, [pc, #148]	@ (8007e84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007dee:	695b      	ldr	r3, [r3, #20]
 8007df0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8007df4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	6892      	ldr	r2, [r2, #8]
 8007dfc:	0211      	lsls	r1, r2, #8
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	68d2      	ldr	r2, [r2, #12]
 8007e02:	06d2      	lsls	r2, r2, #27
 8007e04:	430a      	orrs	r2, r1
 8007e06:	491f      	ldr	r1, [pc, #124]	@ (8007e84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	614b      	str	r3, [r1, #20]
 8007e0c:	e011      	b.n	8007e32 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007e0e:	4b1d      	ldr	r3, [pc, #116]	@ (8007e84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007e10:	695b      	ldr	r3, [r3, #20]
 8007e12:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007e16:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007e1a:	687a      	ldr	r2, [r7, #4]
 8007e1c:	6892      	ldr	r2, [r2, #8]
 8007e1e:	0211      	lsls	r1, r2, #8
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	6912      	ldr	r2, [r2, #16]
 8007e24:	0852      	lsrs	r2, r2, #1
 8007e26:	3a01      	subs	r2, #1
 8007e28:	0652      	lsls	r2, r2, #25
 8007e2a:	430a      	orrs	r2, r1
 8007e2c:	4915      	ldr	r1, [pc, #84]	@ (8007e84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007e32:	4b14      	ldr	r3, [pc, #80]	@ (8007e84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a13      	ldr	r2, [pc, #76]	@ (8007e84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007e38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e3c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e3e:	f7fb f9dd 	bl	80031fc <HAL_GetTick>
 8007e42:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007e44:	e009      	b.n	8007e5a <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007e46:	f7fb f9d9 	bl	80031fc <HAL_GetTick>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	1ad3      	subs	r3, r2, r3
 8007e50:	2b02      	cmp	r3, #2
 8007e52:	d902      	bls.n	8007e5a <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8007e54:	2303      	movs	r3, #3
 8007e56:	73fb      	strb	r3, [r7, #15]
          break;
 8007e58:	e005      	b.n	8007e66 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8007e84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d0ef      	beq.n	8007e46 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8007e66:	7bfb      	ldrb	r3, [r7, #15]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d106      	bne.n	8007e7a <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007e6c:	4b05      	ldr	r3, [pc, #20]	@ (8007e84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007e6e:	695a      	ldr	r2, [r3, #20]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	695b      	ldr	r3, [r3, #20]
 8007e74:	4903      	ldr	r1, [pc, #12]	@ (8007e84 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007e76:	4313      	orrs	r3, r2
 8007e78:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3710      	adds	r7, #16
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}
 8007e84:	40021000 	.word	0x40021000

08007e88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d101      	bne.n	8007e9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e96:	2301      	movs	r3, #1
 8007e98:	e049      	b.n	8007f2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d106      	bne.n	8007eb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 f841 	bl	8007f36 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2202      	movs	r2, #2
 8007eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	3304      	adds	r3, #4
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	4610      	mov	r0, r2
 8007ec8:	f000 f9e0 	bl	800828c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2201      	movs	r2, #1
 8007f00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2201      	movs	r2, #1
 8007f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3708      	adds	r7, #8
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}

08007f36 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007f36:	b480      	push	{r7}
 8007f38:	b083      	sub	sp, #12
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007f3e:	bf00      	nop
 8007f40:	370c      	adds	r7, #12
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr
	...

08007f4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b085      	sub	sp, #20
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d001      	beq.n	8007f64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	e04f      	b.n	8008004 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2202      	movs	r2, #2
 8007f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	68da      	ldr	r2, [r3, #12]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f042 0201 	orr.w	r2, r2, #1
 8007f7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a23      	ldr	r2, [pc, #140]	@ (8008010 <HAL_TIM_Base_Start_IT+0xc4>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d01d      	beq.n	8007fc2 <HAL_TIM_Base_Start_IT+0x76>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f8e:	d018      	beq.n	8007fc2 <HAL_TIM_Base_Start_IT+0x76>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a1f      	ldr	r2, [pc, #124]	@ (8008014 <HAL_TIM_Base_Start_IT+0xc8>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d013      	beq.n	8007fc2 <HAL_TIM_Base_Start_IT+0x76>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a1e      	ldr	r2, [pc, #120]	@ (8008018 <HAL_TIM_Base_Start_IT+0xcc>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d00e      	beq.n	8007fc2 <HAL_TIM_Base_Start_IT+0x76>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a1c      	ldr	r2, [pc, #112]	@ (800801c <HAL_TIM_Base_Start_IT+0xd0>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d009      	beq.n	8007fc2 <HAL_TIM_Base_Start_IT+0x76>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a1b      	ldr	r2, [pc, #108]	@ (8008020 <HAL_TIM_Base_Start_IT+0xd4>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d004      	beq.n	8007fc2 <HAL_TIM_Base_Start_IT+0x76>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a19      	ldr	r2, [pc, #100]	@ (8008024 <HAL_TIM_Base_Start_IT+0xd8>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d115      	bne.n	8007fee <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	689a      	ldr	r2, [r3, #8]
 8007fc8:	4b17      	ldr	r3, [pc, #92]	@ (8008028 <HAL_TIM_Base_Start_IT+0xdc>)
 8007fca:	4013      	ands	r3, r2
 8007fcc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2b06      	cmp	r3, #6
 8007fd2:	d015      	beq.n	8008000 <HAL_TIM_Base_Start_IT+0xb4>
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fda:	d011      	beq.n	8008000 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f042 0201 	orr.w	r2, r2, #1
 8007fea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fec:	e008      	b.n	8008000 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f042 0201 	orr.w	r2, r2, #1
 8007ffc:	601a      	str	r2, [r3, #0]
 8007ffe:	e000      	b.n	8008002 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008000:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008002:	2300      	movs	r3, #0
}
 8008004:	4618      	mov	r0, r3
 8008006:	3714      	adds	r7, #20
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr
 8008010:	40012c00 	.word	0x40012c00
 8008014:	40000400 	.word	0x40000400
 8008018:	40000800 	.word	0x40000800
 800801c:	40000c00 	.word	0x40000c00
 8008020:	40013400 	.word	0x40013400
 8008024:	40014000 	.word	0x40014000
 8008028:	00010007 	.word	0x00010007

0800802c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b084      	sub	sp, #16
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	68db      	ldr	r3, [r3, #12]
 800803a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	691b      	ldr	r3, [r3, #16]
 8008042:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	f003 0302 	and.w	r3, r3, #2
 800804a:	2b00      	cmp	r3, #0
 800804c:	d020      	beq.n	8008090 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f003 0302 	and.w	r3, r3, #2
 8008054:	2b00      	cmp	r3, #0
 8008056:	d01b      	beq.n	8008090 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f06f 0202 	mvn.w	r2, #2
 8008060:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2201      	movs	r2, #1
 8008066:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	699b      	ldr	r3, [r3, #24]
 800806e:	f003 0303 	and.w	r3, r3, #3
 8008072:	2b00      	cmp	r3, #0
 8008074:	d003      	beq.n	800807e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 f8e9 	bl	800824e <HAL_TIM_IC_CaptureCallback>
 800807c:	e005      	b.n	800808a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 f8db 	bl	800823a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 f8ec 	bl	8008262 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	f003 0304 	and.w	r3, r3, #4
 8008096:	2b00      	cmp	r3, #0
 8008098:	d020      	beq.n	80080dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f003 0304 	and.w	r3, r3, #4
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d01b      	beq.n	80080dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f06f 0204 	mvn.w	r2, #4
 80080ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2202      	movs	r2, #2
 80080b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	699b      	ldr	r3, [r3, #24]
 80080ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d003      	beq.n	80080ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 f8c3 	bl	800824e <HAL_TIM_IC_CaptureCallback>
 80080c8:	e005      	b.n	80080d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 f8b5 	bl	800823a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 f8c6 	bl	8008262 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2200      	movs	r2, #0
 80080da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	f003 0308 	and.w	r3, r3, #8
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d020      	beq.n	8008128 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f003 0308 	and.w	r3, r3, #8
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d01b      	beq.n	8008128 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f06f 0208 	mvn.w	r2, #8
 80080f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2204      	movs	r2, #4
 80080fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	69db      	ldr	r3, [r3, #28]
 8008106:	f003 0303 	and.w	r3, r3, #3
 800810a:	2b00      	cmp	r3, #0
 800810c:	d003      	beq.n	8008116 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 f89d 	bl	800824e <HAL_TIM_IC_CaptureCallback>
 8008114:	e005      	b.n	8008122 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 f88f 	bl	800823a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 f8a0 	bl	8008262 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	f003 0310 	and.w	r3, r3, #16
 800812e:	2b00      	cmp	r3, #0
 8008130:	d020      	beq.n	8008174 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f003 0310 	and.w	r3, r3, #16
 8008138:	2b00      	cmp	r3, #0
 800813a:	d01b      	beq.n	8008174 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f06f 0210 	mvn.w	r2, #16
 8008144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2208      	movs	r2, #8
 800814a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	69db      	ldr	r3, [r3, #28]
 8008152:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008156:	2b00      	cmp	r3, #0
 8008158:	d003      	beq.n	8008162 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 f877 	bl	800824e <HAL_TIM_IC_CaptureCallback>
 8008160:	e005      	b.n	800816e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 f869 	bl	800823a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 f87a 	bl	8008262 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	f003 0301 	and.w	r3, r3, #1
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00c      	beq.n	8008198 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f003 0301 	and.w	r3, r3, #1
 8008184:	2b00      	cmp	r3, #0
 8008186:	d007      	beq.n	8008198 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f06f 0201 	mvn.w	r2, #1
 8008190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f7f9 fc64 	bl	8001a60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d104      	bne.n	80081ac <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d00c      	beq.n	80081c6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d007      	beq.n	80081c6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80081be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 f913 	bl	80083ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d00c      	beq.n	80081ea <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d007      	beq.n	80081ea <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80081e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f000 f90b 	bl	8008400 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d00c      	beq.n	800820e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d007      	beq.n	800820e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008206:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 f834 	bl	8008276 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	f003 0320 	and.w	r3, r3, #32
 8008214:	2b00      	cmp	r3, #0
 8008216:	d00c      	beq.n	8008232 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f003 0320 	and.w	r3, r3, #32
 800821e:	2b00      	cmp	r3, #0
 8008220:	d007      	beq.n	8008232 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f06f 0220 	mvn.w	r2, #32
 800822a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f000 f8d3 	bl	80083d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008232:	bf00      	nop
 8008234:	3710      	adds	r7, #16
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}

0800823a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800823a:	b480      	push	{r7}
 800823c:	b083      	sub	sp, #12
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008242:	bf00      	nop
 8008244:	370c      	adds	r7, #12
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr

0800824e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800824e:	b480      	push	{r7}
 8008250:	b083      	sub	sp, #12
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008256:	bf00      	nop
 8008258:	370c      	adds	r7, #12
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr

08008262 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008262:	b480      	push	{r7}
 8008264:	b083      	sub	sp, #12
 8008266:	af00      	add	r7, sp, #0
 8008268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800826a:	bf00      	nop
 800826c:	370c      	adds	r7, #12
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr

08008276 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008276:	b480      	push	{r7}
 8008278:	b083      	sub	sp, #12
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800827e:	bf00      	nop
 8008280:	370c      	adds	r7, #12
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr
	...

0800828c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800828c:	b480      	push	{r7}
 800828e:	b085      	sub	sp, #20
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	4a46      	ldr	r2, [pc, #280]	@ (80083b8 <TIM_Base_SetConfig+0x12c>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d013      	beq.n	80082cc <TIM_Base_SetConfig+0x40>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082aa:	d00f      	beq.n	80082cc <TIM_Base_SetConfig+0x40>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	4a43      	ldr	r2, [pc, #268]	@ (80083bc <TIM_Base_SetConfig+0x130>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d00b      	beq.n	80082cc <TIM_Base_SetConfig+0x40>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	4a42      	ldr	r2, [pc, #264]	@ (80083c0 <TIM_Base_SetConfig+0x134>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d007      	beq.n	80082cc <TIM_Base_SetConfig+0x40>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	4a41      	ldr	r2, [pc, #260]	@ (80083c4 <TIM_Base_SetConfig+0x138>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d003      	beq.n	80082cc <TIM_Base_SetConfig+0x40>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	4a40      	ldr	r2, [pc, #256]	@ (80083c8 <TIM_Base_SetConfig+0x13c>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d108      	bne.n	80082de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	68fa      	ldr	r2, [r7, #12]
 80082da:	4313      	orrs	r3, r2
 80082dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4a35      	ldr	r2, [pc, #212]	@ (80083b8 <TIM_Base_SetConfig+0x12c>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d01f      	beq.n	8008326 <TIM_Base_SetConfig+0x9a>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082ec:	d01b      	beq.n	8008326 <TIM_Base_SetConfig+0x9a>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4a32      	ldr	r2, [pc, #200]	@ (80083bc <TIM_Base_SetConfig+0x130>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d017      	beq.n	8008326 <TIM_Base_SetConfig+0x9a>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	4a31      	ldr	r2, [pc, #196]	@ (80083c0 <TIM_Base_SetConfig+0x134>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d013      	beq.n	8008326 <TIM_Base_SetConfig+0x9a>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	4a30      	ldr	r2, [pc, #192]	@ (80083c4 <TIM_Base_SetConfig+0x138>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d00f      	beq.n	8008326 <TIM_Base_SetConfig+0x9a>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	4a2f      	ldr	r2, [pc, #188]	@ (80083c8 <TIM_Base_SetConfig+0x13c>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d00b      	beq.n	8008326 <TIM_Base_SetConfig+0x9a>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	4a2e      	ldr	r2, [pc, #184]	@ (80083cc <TIM_Base_SetConfig+0x140>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d007      	beq.n	8008326 <TIM_Base_SetConfig+0x9a>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	4a2d      	ldr	r2, [pc, #180]	@ (80083d0 <TIM_Base_SetConfig+0x144>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d003      	beq.n	8008326 <TIM_Base_SetConfig+0x9a>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	4a2c      	ldr	r2, [pc, #176]	@ (80083d4 <TIM_Base_SetConfig+0x148>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d108      	bne.n	8008338 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800832c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	68db      	ldr	r3, [r3, #12]
 8008332:	68fa      	ldr	r2, [r7, #12]
 8008334:	4313      	orrs	r3, r2
 8008336:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	695b      	ldr	r3, [r3, #20]
 8008342:	4313      	orrs	r3, r2
 8008344:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	68fa      	ldr	r2, [r7, #12]
 800834a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	689a      	ldr	r2, [r3, #8]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	681a      	ldr	r2, [r3, #0]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	4a16      	ldr	r2, [pc, #88]	@ (80083b8 <TIM_Base_SetConfig+0x12c>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d00f      	beq.n	8008384 <TIM_Base_SetConfig+0xf8>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	4a18      	ldr	r2, [pc, #96]	@ (80083c8 <TIM_Base_SetConfig+0x13c>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d00b      	beq.n	8008384 <TIM_Base_SetConfig+0xf8>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	4a17      	ldr	r2, [pc, #92]	@ (80083cc <TIM_Base_SetConfig+0x140>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d007      	beq.n	8008384 <TIM_Base_SetConfig+0xf8>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4a16      	ldr	r2, [pc, #88]	@ (80083d0 <TIM_Base_SetConfig+0x144>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d003      	beq.n	8008384 <TIM_Base_SetConfig+0xf8>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	4a15      	ldr	r2, [pc, #84]	@ (80083d4 <TIM_Base_SetConfig+0x148>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d103      	bne.n	800838c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	691a      	ldr	r2, [r3, #16]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2201      	movs	r2, #1
 8008390:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	691b      	ldr	r3, [r3, #16]
 8008396:	f003 0301 	and.w	r3, r3, #1
 800839a:	2b01      	cmp	r3, #1
 800839c:	d105      	bne.n	80083aa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	691b      	ldr	r3, [r3, #16]
 80083a2:	f023 0201 	bic.w	r2, r3, #1
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	611a      	str	r2, [r3, #16]
  }
}
 80083aa:	bf00      	nop
 80083ac:	3714      	adds	r7, #20
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr
 80083b6:	bf00      	nop
 80083b8:	40012c00 	.word	0x40012c00
 80083bc:	40000400 	.word	0x40000400
 80083c0:	40000800 	.word	0x40000800
 80083c4:	40000c00 	.word	0x40000c00
 80083c8:	40013400 	.word	0x40013400
 80083cc:	40014000 	.word	0x40014000
 80083d0:	40014400 	.word	0x40014400
 80083d4:	40014800 	.word	0x40014800

080083d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80083d8:	b480      	push	{r7}
 80083da:	b083      	sub	sp, #12
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80083e0:	bf00      	nop
 80083e2:	370c      	adds	r7, #12
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80083f4:	bf00      	nop
 80083f6:	370c      	adds	r7, #12
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008408:	bf00      	nop
 800840a:	370c      	adds	r7, #12
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr

08008414 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d101      	bne.n	8008426 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008422:	2301      	movs	r3, #1
 8008424:	e040      	b.n	80084a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800842a:	2b00      	cmp	r3, #0
 800842c:	d106      	bne.n	800843c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2200      	movs	r2, #0
 8008432:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f7f9 fcf2 	bl	8001e20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2224      	movs	r2, #36	@ 0x24
 8008440:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f022 0201 	bic.w	r2, r2, #1
 8008450:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008456:	2b00      	cmp	r3, #0
 8008458:	d002      	beq.n	8008460 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 fe52 	bl	8009104 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 fb97 	bl	8008b94 <UART_SetConfig>
 8008466:	4603      	mov	r3, r0
 8008468:	2b01      	cmp	r3, #1
 800846a:	d101      	bne.n	8008470 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800846c:	2301      	movs	r3, #1
 800846e:	e01b      	b.n	80084a8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	685a      	ldr	r2, [r3, #4]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800847e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	689a      	ldr	r2, [r3, #8]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800848e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f042 0201 	orr.w	r2, r2, #1
 800849e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f000 fed1 	bl	8009248 <UART_CheckIdleState>
 80084a6:	4603      	mov	r3, r0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3708      	adds	r7, #8
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b08a      	sub	sp, #40	@ 0x28
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	60f8      	str	r0, [r7, #12]
 80084b8:	60b9      	str	r1, [r7, #8]
 80084ba:	4613      	mov	r3, r2
 80084bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084c4:	2b20      	cmp	r3, #32
 80084c6:	d137      	bne.n	8008538 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d002      	beq.n	80084d4 <HAL_UART_Receive_IT+0x24>
 80084ce:	88fb      	ldrh	r3, [r7, #6]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d101      	bne.n	80084d8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80084d4:	2301      	movs	r3, #1
 80084d6:	e030      	b.n	800853a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2200      	movs	r2, #0
 80084dc:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a18      	ldr	r2, [pc, #96]	@ (8008544 <HAL_UART_Receive_IT+0x94>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d01f      	beq.n	8008528 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d018      	beq.n	8008528 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	e853 3f00 	ldrex	r3, [r3]
 8008502:	613b      	str	r3, [r7, #16]
   return(result);
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800850a:	627b      	str	r3, [r7, #36]	@ 0x24
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	461a      	mov	r2, r3
 8008512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008514:	623b      	str	r3, [r7, #32]
 8008516:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008518:	69f9      	ldr	r1, [r7, #28]
 800851a:	6a3a      	ldr	r2, [r7, #32]
 800851c:	e841 2300 	strex	r3, r2, [r1]
 8008520:	61bb      	str	r3, [r7, #24]
   return(result);
 8008522:	69bb      	ldr	r3, [r7, #24]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d1e6      	bne.n	80084f6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008528:	88fb      	ldrh	r3, [r7, #6]
 800852a:	461a      	mov	r2, r3
 800852c:	68b9      	ldr	r1, [r7, #8]
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	f000 ffa0 	bl	8009474 <UART_Start_Receive_IT>
 8008534:	4603      	mov	r3, r0
 8008536:	e000      	b.n	800853a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008538:	2302      	movs	r3, #2
  }
}
 800853a:	4618      	mov	r0, r3
 800853c:	3728      	adds	r7, #40	@ 0x28
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	40008000 	.word	0x40008000

08008548 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b0ba      	sub	sp, #232	@ 0xe8
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	69db      	ldr	r3, [r3, #28]
 8008556:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800856e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008572:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008576:	4013      	ands	r3, r2
 8008578:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800857c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008580:	2b00      	cmp	r3, #0
 8008582:	d115      	bne.n	80085b0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008588:	f003 0320 	and.w	r3, r3, #32
 800858c:	2b00      	cmp	r3, #0
 800858e:	d00f      	beq.n	80085b0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008594:	f003 0320 	and.w	r3, r3, #32
 8008598:	2b00      	cmp	r3, #0
 800859a:	d009      	beq.n	80085b0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	f000 82ca 	beq.w	8008b3a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	4798      	blx	r3
      }
      return;
 80085ae:	e2c4      	b.n	8008b3a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80085b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	f000 8117 	beq.w	80087e8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80085ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085be:	f003 0301 	and.w	r3, r3, #1
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d106      	bne.n	80085d4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80085c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80085ca:	4b85      	ldr	r3, [pc, #532]	@ (80087e0 <HAL_UART_IRQHandler+0x298>)
 80085cc:	4013      	ands	r3, r2
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	f000 810a 	beq.w	80087e8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80085d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085d8:	f003 0301 	and.w	r3, r3, #1
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d011      	beq.n	8008604 <HAL_UART_IRQHandler+0xbc>
 80085e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d00b      	beq.n	8008604 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2201      	movs	r2, #1
 80085f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085fa:	f043 0201 	orr.w	r2, r3, #1
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008608:	f003 0302 	and.w	r3, r3, #2
 800860c:	2b00      	cmp	r3, #0
 800860e:	d011      	beq.n	8008634 <HAL_UART_IRQHandler+0xec>
 8008610:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008614:	f003 0301 	and.w	r3, r3, #1
 8008618:	2b00      	cmp	r3, #0
 800861a:	d00b      	beq.n	8008634 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2202      	movs	r2, #2
 8008622:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800862a:	f043 0204 	orr.w	r2, r3, #4
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008638:	f003 0304 	and.w	r3, r3, #4
 800863c:	2b00      	cmp	r3, #0
 800863e:	d011      	beq.n	8008664 <HAL_UART_IRQHandler+0x11c>
 8008640:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008644:	f003 0301 	and.w	r3, r3, #1
 8008648:	2b00      	cmp	r3, #0
 800864a:	d00b      	beq.n	8008664 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2204      	movs	r2, #4
 8008652:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800865a:	f043 0202 	orr.w	r2, r3, #2
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008668:	f003 0308 	and.w	r3, r3, #8
 800866c:	2b00      	cmp	r3, #0
 800866e:	d017      	beq.n	80086a0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008674:	f003 0320 	and.w	r3, r3, #32
 8008678:	2b00      	cmp	r3, #0
 800867a:	d105      	bne.n	8008688 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800867c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008680:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008684:	2b00      	cmp	r3, #0
 8008686:	d00b      	beq.n	80086a0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	2208      	movs	r2, #8
 800868e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008696:	f043 0208 	orr.w	r2, r3, #8
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80086a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d012      	beq.n	80086d2 <HAL_UART_IRQHandler+0x18a>
 80086ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d00c      	beq.n	80086d2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80086c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086c8:	f043 0220 	orr.w	r2, r3, #32
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086d8:	2b00      	cmp	r3, #0
 80086da:	f000 8230 	beq.w	8008b3e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80086de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086e2:	f003 0320 	and.w	r3, r3, #32
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00d      	beq.n	8008706 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80086ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086ee:	f003 0320 	and.w	r3, r3, #32
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d007      	beq.n	8008706 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d003      	beq.n	8008706 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800870c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800871a:	2b40      	cmp	r3, #64	@ 0x40
 800871c:	d005      	beq.n	800872a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800871e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008722:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008726:	2b00      	cmp	r3, #0
 8008728:	d04f      	beq.n	80087ca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 ff68 	bl	8009600 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800873a:	2b40      	cmp	r3, #64	@ 0x40
 800873c:	d141      	bne.n	80087c2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	3308      	adds	r3, #8
 8008744:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008748:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800874c:	e853 3f00 	ldrex	r3, [r3]
 8008750:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008754:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008758:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800875c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	3308      	adds	r3, #8
 8008766:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800876a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800876e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008772:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008776:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800877a:	e841 2300 	strex	r3, r2, [r1]
 800877e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008782:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008786:	2b00      	cmp	r3, #0
 8008788:	d1d9      	bne.n	800873e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800878e:	2b00      	cmp	r3, #0
 8008790:	d013      	beq.n	80087ba <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008796:	4a13      	ldr	r2, [pc, #76]	@ (80087e4 <HAL_UART_IRQHandler+0x29c>)
 8008798:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800879e:	4618      	mov	r0, r3
 80087a0:	f7fc feb4 	bl	800550c <HAL_DMA_Abort_IT>
 80087a4:	4603      	mov	r3, r0
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d017      	beq.n	80087da <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80087b4:	4610      	mov	r0, r2
 80087b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087b8:	e00f      	b.n	80087da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 f9d4 	bl	8008b68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087c0:	e00b      	b.n	80087da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 f9d0 	bl	8008b68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087c8:	e007      	b.n	80087da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 f9cc 	bl	8008b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80087d8:	e1b1      	b.n	8008b3e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087da:	bf00      	nop
    return;
 80087dc:	e1af      	b.n	8008b3e <HAL_UART_IRQHandler+0x5f6>
 80087de:	bf00      	nop
 80087e0:	04000120 	.word	0x04000120
 80087e4:	080096c9 	.word	0x080096c9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	f040 816a 	bne.w	8008ac6 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80087f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087f6:	f003 0310 	and.w	r3, r3, #16
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	f000 8163 	beq.w	8008ac6 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008800:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008804:	f003 0310 	and.w	r3, r3, #16
 8008808:	2b00      	cmp	r3, #0
 800880a:	f000 815c 	beq.w	8008ac6 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	2210      	movs	r2, #16
 8008814:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008820:	2b40      	cmp	r3, #64	@ 0x40
 8008822:	f040 80d4 	bne.w	80089ce <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008832:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008836:	2b00      	cmp	r3, #0
 8008838:	f000 80ad 	beq.w	8008996 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008842:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008846:	429a      	cmp	r2, r3
 8008848:	f080 80a5 	bcs.w	8008996 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008852:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f003 0320 	and.w	r3, r3, #32
 8008862:	2b00      	cmp	r3, #0
 8008864:	f040 8086 	bne.w	8008974 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008870:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008874:	e853 3f00 	ldrex	r3, [r3]
 8008878:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800887c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008880:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008884:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	461a      	mov	r2, r3
 800888e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008892:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008896:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800889a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800889e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80088a2:	e841 2300 	strex	r3, r2, [r1]
 80088a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80088aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d1da      	bne.n	8008868 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	3308      	adds	r3, #8
 80088b8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80088bc:	e853 3f00 	ldrex	r3, [r3]
 80088c0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80088c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80088c4:	f023 0301 	bic.w	r3, r3, #1
 80088c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	3308      	adds	r3, #8
 80088d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80088d6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80088da:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088dc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80088de:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80088e2:	e841 2300 	strex	r3, r2, [r1]
 80088e6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80088e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d1e1      	bne.n	80088b2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	3308      	adds	r3, #8
 80088f4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80088f8:	e853 3f00 	ldrex	r3, [r3]
 80088fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80088fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008900:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008904:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	3308      	adds	r3, #8
 800890e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008912:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008914:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008916:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008918:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800891a:	e841 2300 	strex	r3, r2, [r1]
 800891e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008920:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008922:	2b00      	cmp	r3, #0
 8008924:	d1e3      	bne.n	80088ee <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2220      	movs	r2, #32
 800892a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2200      	movs	r2, #0
 8008932:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800893a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800893c:	e853 3f00 	ldrex	r3, [r3]
 8008940:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008942:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008944:	f023 0310 	bic.w	r3, r3, #16
 8008948:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	461a      	mov	r2, r3
 8008952:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008956:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008958:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800895a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800895c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800895e:	e841 2300 	strex	r3, r2, [r1]
 8008962:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008964:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008966:	2b00      	cmp	r3, #0
 8008968:	d1e4      	bne.n	8008934 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800896e:	4618      	mov	r0, r3
 8008970:	f7fc fd8e 	bl	8005490 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2202      	movs	r2, #2
 8008978:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008986:	b29b      	uxth	r3, r3
 8008988:	1ad3      	subs	r3, r2, r3
 800898a:	b29b      	uxth	r3, r3
 800898c:	4619      	mov	r1, r3
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 f8f4 	bl	8008b7c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008994:	e0d5      	b.n	8008b42 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800899c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80089a0:	429a      	cmp	r2, r3
 80089a2:	f040 80ce 	bne.w	8008b42 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f003 0320 	and.w	r3, r3, #32
 80089b2:	2b20      	cmp	r3, #32
 80089b4:	f040 80c5 	bne.w	8008b42 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2202      	movs	r2, #2
 80089bc:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80089c4:	4619      	mov	r1, r3
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 f8d8 	bl	8008b7c <HAL_UARTEx_RxEventCallback>
      return;
 80089cc:	e0b9      	b.n	8008b42 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80089da:	b29b      	uxth	r3, r3
 80089dc:	1ad3      	subs	r3, r2, r3
 80089de:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	f000 80ab 	beq.w	8008b46 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80089f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	f000 80a6 	beq.w	8008b46 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a02:	e853 3f00 	ldrex	r3, [r3]
 8008a06:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a0e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	461a      	mov	r2, r3
 8008a18:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008a1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a1e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008a22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a24:	e841 2300 	strex	r3, r2, [r1]
 8008a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008a2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d1e4      	bne.n	80089fa <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	3308      	adds	r3, #8
 8008a36:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a3a:	e853 3f00 	ldrex	r3, [r3]
 8008a3e:	623b      	str	r3, [r7, #32]
   return(result);
 8008a40:	6a3b      	ldr	r3, [r7, #32]
 8008a42:	f023 0301 	bic.w	r3, r3, #1
 8008a46:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	3308      	adds	r3, #8
 8008a50:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008a54:	633a      	str	r2, [r7, #48]	@ 0x30
 8008a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a58:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a5c:	e841 2300 	strex	r3, r2, [r1]
 8008a60:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d1e3      	bne.n	8008a30 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2220      	movs	r2, #32
 8008a6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2200      	movs	r2, #0
 8008a74:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	e853 3f00 	ldrex	r3, [r3]
 8008a88:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f023 0310 	bic.w	r3, r3, #16
 8008a90:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	461a      	mov	r2, r3
 8008a9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008a9e:	61fb      	str	r3, [r7, #28]
 8008aa0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa2:	69b9      	ldr	r1, [r7, #24]
 8008aa4:	69fa      	ldr	r2, [r7, #28]
 8008aa6:	e841 2300 	strex	r3, r2, [r1]
 8008aaa:	617b      	str	r3, [r7, #20]
   return(result);
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d1e4      	bne.n	8008a7c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2202      	movs	r2, #2
 8008ab6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008ab8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008abc:	4619      	mov	r1, r3
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 f85c 	bl	8008b7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008ac4:	e03f      	b.n	8008b46 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008aca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d00e      	beq.n	8008af0 <HAL_UART_IRQHandler+0x5a8>
 8008ad2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ad6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d008      	beq.n	8008af0 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008ae6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 ffe9 	bl	8009ac0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008aee:	e02d      	b.n	8008b4c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008af4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d00e      	beq.n	8008b1a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d008      	beq.n	8008b1a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d01c      	beq.n	8008b4a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	4798      	blx	r3
    }
    return;
 8008b18:	e017      	b.n	8008b4a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d012      	beq.n	8008b4c <HAL_UART_IRQHandler+0x604>
 8008b26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d00c      	beq.n	8008b4c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 fdde 	bl	80096f4 <UART_EndTransmit_IT>
    return;
 8008b38:	e008      	b.n	8008b4c <HAL_UART_IRQHandler+0x604>
      return;
 8008b3a:	bf00      	nop
 8008b3c:	e006      	b.n	8008b4c <HAL_UART_IRQHandler+0x604>
    return;
 8008b3e:	bf00      	nop
 8008b40:	e004      	b.n	8008b4c <HAL_UART_IRQHandler+0x604>
      return;
 8008b42:	bf00      	nop
 8008b44:	e002      	b.n	8008b4c <HAL_UART_IRQHandler+0x604>
      return;
 8008b46:	bf00      	nop
 8008b48:	e000      	b.n	8008b4c <HAL_UART_IRQHandler+0x604>
    return;
 8008b4a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008b4c:	37e8      	adds	r7, #232	@ 0xe8
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop

08008b54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b083      	sub	sp, #12
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008b5c:	bf00      	nop
 8008b5e:	370c      	adds	r7, #12
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b083      	sub	sp, #12
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008b70:	bf00      	nop
 8008b72:	370c      	adds	r7, #12
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr

08008b7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b083      	sub	sp, #12
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	460b      	mov	r3, r1
 8008b86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b88:	bf00      	nop
 8008b8a:	370c      	adds	r7, #12
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b98:	b08a      	sub	sp, #40	@ 0x28
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	689a      	ldr	r2, [r3, #8]
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	691b      	ldr	r3, [r3, #16]
 8008bac:	431a      	orrs	r2, r3
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	695b      	ldr	r3, [r3, #20]
 8008bb2:	431a      	orrs	r2, r3
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	69db      	ldr	r3, [r3, #28]
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	4ba4      	ldr	r3, [pc, #656]	@ (8008e54 <UART_SetConfig+0x2c0>)
 8008bc4:	4013      	ands	r3, r2
 8008bc6:	68fa      	ldr	r2, [r7, #12]
 8008bc8:	6812      	ldr	r2, [r2, #0]
 8008bca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008bcc:	430b      	orrs	r3, r1
 8008bce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	68da      	ldr	r2, [r3, #12]
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	430a      	orrs	r2, r1
 8008be4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	699b      	ldr	r3, [r3, #24]
 8008bea:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a99      	ldr	r2, [pc, #612]	@ (8008e58 <UART_SetConfig+0x2c4>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d004      	beq.n	8008c00 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	6a1b      	ldr	r3, [r3, #32]
 8008bfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	689b      	ldr	r3, [r3, #8]
 8008c06:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c10:	430a      	orrs	r2, r1
 8008c12:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a90      	ldr	r2, [pc, #576]	@ (8008e5c <UART_SetConfig+0x2c8>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d126      	bne.n	8008c6c <UART_SetConfig+0xd8>
 8008c1e:	4b90      	ldr	r3, [pc, #576]	@ (8008e60 <UART_SetConfig+0x2cc>)
 8008c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c24:	f003 0303 	and.w	r3, r3, #3
 8008c28:	2b03      	cmp	r3, #3
 8008c2a:	d81b      	bhi.n	8008c64 <UART_SetConfig+0xd0>
 8008c2c:	a201      	add	r2, pc, #4	@ (adr r2, 8008c34 <UART_SetConfig+0xa0>)
 8008c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c32:	bf00      	nop
 8008c34:	08008c45 	.word	0x08008c45
 8008c38:	08008c55 	.word	0x08008c55
 8008c3c:	08008c4d 	.word	0x08008c4d
 8008c40:	08008c5d 	.word	0x08008c5d
 8008c44:	2301      	movs	r3, #1
 8008c46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c4a:	e116      	b.n	8008e7a <UART_SetConfig+0x2e6>
 8008c4c:	2302      	movs	r3, #2
 8008c4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c52:	e112      	b.n	8008e7a <UART_SetConfig+0x2e6>
 8008c54:	2304      	movs	r3, #4
 8008c56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c5a:	e10e      	b.n	8008e7a <UART_SetConfig+0x2e6>
 8008c5c:	2308      	movs	r3, #8
 8008c5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c62:	e10a      	b.n	8008e7a <UART_SetConfig+0x2e6>
 8008c64:	2310      	movs	r3, #16
 8008c66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c6a:	e106      	b.n	8008e7a <UART_SetConfig+0x2e6>
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a7c      	ldr	r2, [pc, #496]	@ (8008e64 <UART_SetConfig+0x2d0>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d138      	bne.n	8008ce8 <UART_SetConfig+0x154>
 8008c76:	4b7a      	ldr	r3, [pc, #488]	@ (8008e60 <UART_SetConfig+0x2cc>)
 8008c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c7c:	f003 030c 	and.w	r3, r3, #12
 8008c80:	2b0c      	cmp	r3, #12
 8008c82:	d82d      	bhi.n	8008ce0 <UART_SetConfig+0x14c>
 8008c84:	a201      	add	r2, pc, #4	@ (adr r2, 8008c8c <UART_SetConfig+0xf8>)
 8008c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c8a:	bf00      	nop
 8008c8c:	08008cc1 	.word	0x08008cc1
 8008c90:	08008ce1 	.word	0x08008ce1
 8008c94:	08008ce1 	.word	0x08008ce1
 8008c98:	08008ce1 	.word	0x08008ce1
 8008c9c:	08008cd1 	.word	0x08008cd1
 8008ca0:	08008ce1 	.word	0x08008ce1
 8008ca4:	08008ce1 	.word	0x08008ce1
 8008ca8:	08008ce1 	.word	0x08008ce1
 8008cac:	08008cc9 	.word	0x08008cc9
 8008cb0:	08008ce1 	.word	0x08008ce1
 8008cb4:	08008ce1 	.word	0x08008ce1
 8008cb8:	08008ce1 	.word	0x08008ce1
 8008cbc:	08008cd9 	.word	0x08008cd9
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008cc6:	e0d8      	b.n	8008e7a <UART_SetConfig+0x2e6>
 8008cc8:	2302      	movs	r3, #2
 8008cca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008cce:	e0d4      	b.n	8008e7a <UART_SetConfig+0x2e6>
 8008cd0:	2304      	movs	r3, #4
 8008cd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008cd6:	e0d0      	b.n	8008e7a <UART_SetConfig+0x2e6>
 8008cd8:	2308      	movs	r3, #8
 8008cda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008cde:	e0cc      	b.n	8008e7a <UART_SetConfig+0x2e6>
 8008ce0:	2310      	movs	r3, #16
 8008ce2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008ce6:	e0c8      	b.n	8008e7a <UART_SetConfig+0x2e6>
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a5e      	ldr	r2, [pc, #376]	@ (8008e68 <UART_SetConfig+0x2d4>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d125      	bne.n	8008d3e <UART_SetConfig+0x1aa>
 8008cf2:	4b5b      	ldr	r3, [pc, #364]	@ (8008e60 <UART_SetConfig+0x2cc>)
 8008cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cf8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008cfc:	2b30      	cmp	r3, #48	@ 0x30
 8008cfe:	d016      	beq.n	8008d2e <UART_SetConfig+0x19a>
 8008d00:	2b30      	cmp	r3, #48	@ 0x30
 8008d02:	d818      	bhi.n	8008d36 <UART_SetConfig+0x1a2>
 8008d04:	2b20      	cmp	r3, #32
 8008d06:	d00a      	beq.n	8008d1e <UART_SetConfig+0x18a>
 8008d08:	2b20      	cmp	r3, #32
 8008d0a:	d814      	bhi.n	8008d36 <UART_SetConfig+0x1a2>
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d002      	beq.n	8008d16 <UART_SetConfig+0x182>
 8008d10:	2b10      	cmp	r3, #16
 8008d12:	d008      	beq.n	8008d26 <UART_SetConfig+0x192>
 8008d14:	e00f      	b.n	8008d36 <UART_SetConfig+0x1a2>
 8008d16:	2300      	movs	r3, #0
 8008d18:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d1c:	e0ad      	b.n	8008e7a <UART_SetConfig+0x2e6>
 8008d1e:	2302      	movs	r3, #2
 8008d20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d24:	e0a9      	b.n	8008e7a <UART_SetConfig+0x2e6>
 8008d26:	2304      	movs	r3, #4
 8008d28:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d2c:	e0a5      	b.n	8008e7a <UART_SetConfig+0x2e6>
 8008d2e:	2308      	movs	r3, #8
 8008d30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d34:	e0a1      	b.n	8008e7a <UART_SetConfig+0x2e6>
 8008d36:	2310      	movs	r3, #16
 8008d38:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d3c:	e09d      	b.n	8008e7a <UART_SetConfig+0x2e6>
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a4a      	ldr	r2, [pc, #296]	@ (8008e6c <UART_SetConfig+0x2d8>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d125      	bne.n	8008d94 <UART_SetConfig+0x200>
 8008d48:	4b45      	ldr	r3, [pc, #276]	@ (8008e60 <UART_SetConfig+0x2cc>)
 8008d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d4e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008d52:	2bc0      	cmp	r3, #192	@ 0xc0
 8008d54:	d016      	beq.n	8008d84 <UART_SetConfig+0x1f0>
 8008d56:	2bc0      	cmp	r3, #192	@ 0xc0
 8008d58:	d818      	bhi.n	8008d8c <UART_SetConfig+0x1f8>
 8008d5a:	2b80      	cmp	r3, #128	@ 0x80
 8008d5c:	d00a      	beq.n	8008d74 <UART_SetConfig+0x1e0>
 8008d5e:	2b80      	cmp	r3, #128	@ 0x80
 8008d60:	d814      	bhi.n	8008d8c <UART_SetConfig+0x1f8>
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d002      	beq.n	8008d6c <UART_SetConfig+0x1d8>
 8008d66:	2b40      	cmp	r3, #64	@ 0x40
 8008d68:	d008      	beq.n	8008d7c <UART_SetConfig+0x1e8>
 8008d6a:	e00f      	b.n	8008d8c <UART_SetConfig+0x1f8>
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d72:	e082      	b.n	8008e7a <UART_SetConfig+0x2e6>
 8008d74:	2302      	movs	r3, #2
 8008d76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d7a:	e07e      	b.n	8008e7a <UART_SetConfig+0x2e6>
 8008d7c:	2304      	movs	r3, #4
 8008d7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d82:	e07a      	b.n	8008e7a <UART_SetConfig+0x2e6>
 8008d84:	2308      	movs	r3, #8
 8008d86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d8a:	e076      	b.n	8008e7a <UART_SetConfig+0x2e6>
 8008d8c:	2310      	movs	r3, #16
 8008d8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d92:	e072      	b.n	8008e7a <UART_SetConfig+0x2e6>
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a35      	ldr	r2, [pc, #212]	@ (8008e70 <UART_SetConfig+0x2dc>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d12a      	bne.n	8008df4 <UART_SetConfig+0x260>
 8008d9e:	4b30      	ldr	r3, [pc, #192]	@ (8008e60 <UART_SetConfig+0x2cc>)
 8008da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008da4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008da8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008dac:	d01a      	beq.n	8008de4 <UART_SetConfig+0x250>
 8008dae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008db2:	d81b      	bhi.n	8008dec <UART_SetConfig+0x258>
 8008db4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008db8:	d00c      	beq.n	8008dd4 <UART_SetConfig+0x240>
 8008dba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008dbe:	d815      	bhi.n	8008dec <UART_SetConfig+0x258>
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d003      	beq.n	8008dcc <UART_SetConfig+0x238>
 8008dc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008dc8:	d008      	beq.n	8008ddc <UART_SetConfig+0x248>
 8008dca:	e00f      	b.n	8008dec <UART_SetConfig+0x258>
 8008dcc:	2300      	movs	r3, #0
 8008dce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008dd2:	e052      	b.n	8008e7a <UART_SetConfig+0x2e6>
 8008dd4:	2302      	movs	r3, #2
 8008dd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008dda:	e04e      	b.n	8008e7a <UART_SetConfig+0x2e6>
 8008ddc:	2304      	movs	r3, #4
 8008dde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008de2:	e04a      	b.n	8008e7a <UART_SetConfig+0x2e6>
 8008de4:	2308      	movs	r3, #8
 8008de6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008dea:	e046      	b.n	8008e7a <UART_SetConfig+0x2e6>
 8008dec:	2310      	movs	r3, #16
 8008dee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008df2:	e042      	b.n	8008e7a <UART_SetConfig+0x2e6>
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4a17      	ldr	r2, [pc, #92]	@ (8008e58 <UART_SetConfig+0x2c4>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d13a      	bne.n	8008e74 <UART_SetConfig+0x2e0>
 8008dfe:	4b18      	ldr	r3, [pc, #96]	@ (8008e60 <UART_SetConfig+0x2cc>)
 8008e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e04:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008e08:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008e0c:	d01a      	beq.n	8008e44 <UART_SetConfig+0x2b0>
 8008e0e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008e12:	d81b      	bhi.n	8008e4c <UART_SetConfig+0x2b8>
 8008e14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e18:	d00c      	beq.n	8008e34 <UART_SetConfig+0x2a0>
 8008e1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e1e:	d815      	bhi.n	8008e4c <UART_SetConfig+0x2b8>
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d003      	beq.n	8008e2c <UART_SetConfig+0x298>
 8008e24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e28:	d008      	beq.n	8008e3c <UART_SetConfig+0x2a8>
 8008e2a:	e00f      	b.n	8008e4c <UART_SetConfig+0x2b8>
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e32:	e022      	b.n	8008e7a <UART_SetConfig+0x2e6>
 8008e34:	2302      	movs	r3, #2
 8008e36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e3a:	e01e      	b.n	8008e7a <UART_SetConfig+0x2e6>
 8008e3c:	2304      	movs	r3, #4
 8008e3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e42:	e01a      	b.n	8008e7a <UART_SetConfig+0x2e6>
 8008e44:	2308      	movs	r3, #8
 8008e46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e4a:	e016      	b.n	8008e7a <UART_SetConfig+0x2e6>
 8008e4c:	2310      	movs	r3, #16
 8008e4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e52:	e012      	b.n	8008e7a <UART_SetConfig+0x2e6>
 8008e54:	efff69f3 	.word	0xefff69f3
 8008e58:	40008000 	.word	0x40008000
 8008e5c:	40013800 	.word	0x40013800
 8008e60:	40021000 	.word	0x40021000
 8008e64:	40004400 	.word	0x40004400
 8008e68:	40004800 	.word	0x40004800
 8008e6c:	40004c00 	.word	0x40004c00
 8008e70:	40005000 	.word	0x40005000
 8008e74:	2310      	movs	r3, #16
 8008e76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a9f      	ldr	r2, [pc, #636]	@ (80090fc <UART_SetConfig+0x568>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d17a      	bne.n	8008f7a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008e84:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008e88:	2b08      	cmp	r3, #8
 8008e8a:	d824      	bhi.n	8008ed6 <UART_SetConfig+0x342>
 8008e8c:	a201      	add	r2, pc, #4	@ (adr r2, 8008e94 <UART_SetConfig+0x300>)
 8008e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e92:	bf00      	nop
 8008e94:	08008eb9 	.word	0x08008eb9
 8008e98:	08008ed7 	.word	0x08008ed7
 8008e9c:	08008ec1 	.word	0x08008ec1
 8008ea0:	08008ed7 	.word	0x08008ed7
 8008ea4:	08008ec7 	.word	0x08008ec7
 8008ea8:	08008ed7 	.word	0x08008ed7
 8008eac:	08008ed7 	.word	0x08008ed7
 8008eb0:	08008ed7 	.word	0x08008ed7
 8008eb4:	08008ecf 	.word	0x08008ecf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008eb8:	f7fe fa5e 	bl	8007378 <HAL_RCC_GetPCLK1Freq>
 8008ebc:	61f8      	str	r0, [r7, #28]
        break;
 8008ebe:	e010      	b.n	8008ee2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ec0:	4b8f      	ldr	r3, [pc, #572]	@ (8009100 <UART_SetConfig+0x56c>)
 8008ec2:	61fb      	str	r3, [r7, #28]
        break;
 8008ec4:	e00d      	b.n	8008ee2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ec6:	f7fe f9bf 	bl	8007248 <HAL_RCC_GetSysClockFreq>
 8008eca:	61f8      	str	r0, [r7, #28]
        break;
 8008ecc:	e009      	b.n	8008ee2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ece:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ed2:	61fb      	str	r3, [r7, #28]
        break;
 8008ed4:	e005      	b.n	8008ee2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008eda:	2301      	movs	r3, #1
 8008edc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008ee0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008ee2:	69fb      	ldr	r3, [r7, #28]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	f000 80fb 	beq.w	80090e0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	685a      	ldr	r2, [r3, #4]
 8008eee:	4613      	mov	r3, r2
 8008ef0:	005b      	lsls	r3, r3, #1
 8008ef2:	4413      	add	r3, r2
 8008ef4:	69fa      	ldr	r2, [r7, #28]
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d305      	bcc.n	8008f06 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008f00:	69fa      	ldr	r2, [r7, #28]
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d903      	bls.n	8008f0e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008f06:	2301      	movs	r3, #1
 8008f08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008f0c:	e0e8      	b.n	80090e0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008f0e:	69fb      	ldr	r3, [r7, #28]
 8008f10:	2200      	movs	r2, #0
 8008f12:	461c      	mov	r4, r3
 8008f14:	4615      	mov	r5, r2
 8008f16:	f04f 0200 	mov.w	r2, #0
 8008f1a:	f04f 0300 	mov.w	r3, #0
 8008f1e:	022b      	lsls	r3, r5, #8
 8008f20:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008f24:	0222      	lsls	r2, r4, #8
 8008f26:	68f9      	ldr	r1, [r7, #12]
 8008f28:	6849      	ldr	r1, [r1, #4]
 8008f2a:	0849      	lsrs	r1, r1, #1
 8008f2c:	2000      	movs	r0, #0
 8008f2e:	4688      	mov	r8, r1
 8008f30:	4681      	mov	r9, r0
 8008f32:	eb12 0a08 	adds.w	sl, r2, r8
 8008f36:	eb43 0b09 	adc.w	fp, r3, r9
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	603b      	str	r3, [r7, #0]
 8008f42:	607a      	str	r2, [r7, #4]
 8008f44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f48:	4650      	mov	r0, sl
 8008f4a:	4659      	mov	r1, fp
 8008f4c:	f7f7 f950 	bl	80001f0 <__aeabi_uldivmod>
 8008f50:	4602      	mov	r2, r0
 8008f52:	460b      	mov	r3, r1
 8008f54:	4613      	mov	r3, r2
 8008f56:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008f58:	69bb      	ldr	r3, [r7, #24]
 8008f5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f5e:	d308      	bcc.n	8008f72 <UART_SetConfig+0x3de>
 8008f60:	69bb      	ldr	r3, [r7, #24]
 8008f62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008f66:	d204      	bcs.n	8008f72 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	69ba      	ldr	r2, [r7, #24]
 8008f6e:	60da      	str	r2, [r3, #12]
 8008f70:	e0b6      	b.n	80090e0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008f72:	2301      	movs	r3, #1
 8008f74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008f78:	e0b2      	b.n	80090e0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	69db      	ldr	r3, [r3, #28]
 8008f7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f82:	d15e      	bne.n	8009042 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008f84:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008f88:	2b08      	cmp	r3, #8
 8008f8a:	d828      	bhi.n	8008fde <UART_SetConfig+0x44a>
 8008f8c:	a201      	add	r2, pc, #4	@ (adr r2, 8008f94 <UART_SetConfig+0x400>)
 8008f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f92:	bf00      	nop
 8008f94:	08008fb9 	.word	0x08008fb9
 8008f98:	08008fc1 	.word	0x08008fc1
 8008f9c:	08008fc9 	.word	0x08008fc9
 8008fa0:	08008fdf 	.word	0x08008fdf
 8008fa4:	08008fcf 	.word	0x08008fcf
 8008fa8:	08008fdf 	.word	0x08008fdf
 8008fac:	08008fdf 	.word	0x08008fdf
 8008fb0:	08008fdf 	.word	0x08008fdf
 8008fb4:	08008fd7 	.word	0x08008fd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008fb8:	f7fe f9de 	bl	8007378 <HAL_RCC_GetPCLK1Freq>
 8008fbc:	61f8      	str	r0, [r7, #28]
        break;
 8008fbe:	e014      	b.n	8008fea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008fc0:	f7fe f9f0 	bl	80073a4 <HAL_RCC_GetPCLK2Freq>
 8008fc4:	61f8      	str	r0, [r7, #28]
        break;
 8008fc6:	e010      	b.n	8008fea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008fc8:	4b4d      	ldr	r3, [pc, #308]	@ (8009100 <UART_SetConfig+0x56c>)
 8008fca:	61fb      	str	r3, [r7, #28]
        break;
 8008fcc:	e00d      	b.n	8008fea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008fce:	f7fe f93b 	bl	8007248 <HAL_RCC_GetSysClockFreq>
 8008fd2:	61f8      	str	r0, [r7, #28]
        break;
 8008fd4:	e009      	b.n	8008fea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008fd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008fda:	61fb      	str	r3, [r7, #28]
        break;
 8008fdc:	e005      	b.n	8008fea <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008fe8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008fea:	69fb      	ldr	r3, [r7, #28]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d077      	beq.n	80090e0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008ff0:	69fb      	ldr	r3, [r7, #28]
 8008ff2:	005a      	lsls	r2, r3, #1
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	085b      	lsrs	r3, r3, #1
 8008ffa:	441a      	add	r2, r3
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	fbb2 f3f3 	udiv	r3, r2, r3
 8009004:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009006:	69bb      	ldr	r3, [r7, #24]
 8009008:	2b0f      	cmp	r3, #15
 800900a:	d916      	bls.n	800903a <UART_SetConfig+0x4a6>
 800900c:	69bb      	ldr	r3, [r7, #24]
 800900e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009012:	d212      	bcs.n	800903a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009014:	69bb      	ldr	r3, [r7, #24]
 8009016:	b29b      	uxth	r3, r3
 8009018:	f023 030f 	bic.w	r3, r3, #15
 800901c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800901e:	69bb      	ldr	r3, [r7, #24]
 8009020:	085b      	lsrs	r3, r3, #1
 8009022:	b29b      	uxth	r3, r3
 8009024:	f003 0307 	and.w	r3, r3, #7
 8009028:	b29a      	uxth	r2, r3
 800902a:	8afb      	ldrh	r3, [r7, #22]
 800902c:	4313      	orrs	r3, r2
 800902e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	8afa      	ldrh	r2, [r7, #22]
 8009036:	60da      	str	r2, [r3, #12]
 8009038:	e052      	b.n	80090e0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800903a:	2301      	movs	r3, #1
 800903c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009040:	e04e      	b.n	80090e0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009042:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009046:	2b08      	cmp	r3, #8
 8009048:	d827      	bhi.n	800909a <UART_SetConfig+0x506>
 800904a:	a201      	add	r2, pc, #4	@ (adr r2, 8009050 <UART_SetConfig+0x4bc>)
 800904c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009050:	08009075 	.word	0x08009075
 8009054:	0800907d 	.word	0x0800907d
 8009058:	08009085 	.word	0x08009085
 800905c:	0800909b 	.word	0x0800909b
 8009060:	0800908b 	.word	0x0800908b
 8009064:	0800909b 	.word	0x0800909b
 8009068:	0800909b 	.word	0x0800909b
 800906c:	0800909b 	.word	0x0800909b
 8009070:	08009093 	.word	0x08009093
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009074:	f7fe f980 	bl	8007378 <HAL_RCC_GetPCLK1Freq>
 8009078:	61f8      	str	r0, [r7, #28]
        break;
 800907a:	e014      	b.n	80090a6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800907c:	f7fe f992 	bl	80073a4 <HAL_RCC_GetPCLK2Freq>
 8009080:	61f8      	str	r0, [r7, #28]
        break;
 8009082:	e010      	b.n	80090a6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009084:	4b1e      	ldr	r3, [pc, #120]	@ (8009100 <UART_SetConfig+0x56c>)
 8009086:	61fb      	str	r3, [r7, #28]
        break;
 8009088:	e00d      	b.n	80090a6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800908a:	f7fe f8dd 	bl	8007248 <HAL_RCC_GetSysClockFreq>
 800908e:	61f8      	str	r0, [r7, #28]
        break;
 8009090:	e009      	b.n	80090a6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009092:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009096:	61fb      	str	r3, [r7, #28]
        break;
 8009098:	e005      	b.n	80090a6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800909a:	2300      	movs	r3, #0
 800909c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800909e:	2301      	movs	r3, #1
 80090a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80090a4:	bf00      	nop
    }

    if (pclk != 0U)
 80090a6:	69fb      	ldr	r3, [r7, #28]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d019      	beq.n	80090e0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	085a      	lsrs	r2, r3, #1
 80090b2:	69fb      	ldr	r3, [r7, #28]
 80090b4:	441a      	add	r2, r3
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80090be:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090c0:	69bb      	ldr	r3, [r7, #24]
 80090c2:	2b0f      	cmp	r3, #15
 80090c4:	d909      	bls.n	80090da <UART_SetConfig+0x546>
 80090c6:	69bb      	ldr	r3, [r7, #24]
 80090c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090cc:	d205      	bcs.n	80090da <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80090ce:	69bb      	ldr	r3, [r7, #24]
 80090d0:	b29a      	uxth	r2, r3
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	60da      	str	r2, [r3, #12]
 80090d8:	e002      	b.n	80090e0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80090da:	2301      	movs	r3, #1
 80090dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2200      	movs	r2, #0
 80090e4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2200      	movs	r2, #0
 80090ea:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80090ec:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3728      	adds	r7, #40	@ 0x28
 80090f4:	46bd      	mov	sp, r7
 80090f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80090fa:	bf00      	nop
 80090fc:	40008000 	.word	0x40008000
 8009100:	00f42400 	.word	0x00f42400

08009104 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009104:	b480      	push	{r7}
 8009106:	b083      	sub	sp, #12
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009110:	f003 0308 	and.w	r3, r3, #8
 8009114:	2b00      	cmp	r3, #0
 8009116:	d00a      	beq.n	800912e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	430a      	orrs	r2, r1
 800912c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009132:	f003 0301 	and.w	r3, r3, #1
 8009136:	2b00      	cmp	r3, #0
 8009138:	d00a      	beq.n	8009150 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	430a      	orrs	r2, r1
 800914e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009154:	f003 0302 	and.w	r3, r3, #2
 8009158:	2b00      	cmp	r3, #0
 800915a:	d00a      	beq.n	8009172 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	430a      	orrs	r2, r1
 8009170:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009176:	f003 0304 	and.w	r3, r3, #4
 800917a:	2b00      	cmp	r3, #0
 800917c:	d00a      	beq.n	8009194 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	430a      	orrs	r2, r1
 8009192:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009198:	f003 0310 	and.w	r3, r3, #16
 800919c:	2b00      	cmp	r3, #0
 800919e:	d00a      	beq.n	80091b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	689b      	ldr	r3, [r3, #8]
 80091a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	430a      	orrs	r2, r1
 80091b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091ba:	f003 0320 	and.w	r3, r3, #32
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d00a      	beq.n	80091d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	689b      	ldr	r3, [r3, #8]
 80091c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	430a      	orrs	r2, r1
 80091d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d01a      	beq.n	800921a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	430a      	orrs	r2, r1
 80091f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009202:	d10a      	bne.n	800921a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	430a      	orrs	r2, r1
 8009218:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800921e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009222:	2b00      	cmp	r3, #0
 8009224:	d00a      	beq.n	800923c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	430a      	orrs	r2, r1
 800923a:	605a      	str	r2, [r3, #4]
  }
}
 800923c:	bf00      	nop
 800923e:	370c      	adds	r7, #12
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr

08009248 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b098      	sub	sp, #96	@ 0x60
 800924c:	af02      	add	r7, sp, #8
 800924e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2200      	movs	r2, #0
 8009254:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009258:	f7f9 ffd0 	bl	80031fc <HAL_GetTick>
 800925c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f003 0308 	and.w	r3, r3, #8
 8009268:	2b08      	cmp	r3, #8
 800926a:	d12e      	bne.n	80092ca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800926c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009270:	9300      	str	r3, [sp, #0]
 8009272:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009274:	2200      	movs	r2, #0
 8009276:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 f88c 	bl	8009398 <UART_WaitOnFlagUntilTimeout>
 8009280:	4603      	mov	r3, r0
 8009282:	2b00      	cmp	r3, #0
 8009284:	d021      	beq.n	80092ca <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800928c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800928e:	e853 3f00 	ldrex	r3, [r3]
 8009292:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009296:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800929a:	653b      	str	r3, [r7, #80]	@ 0x50
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	461a      	mov	r2, r3
 80092a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80092a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80092a6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80092aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80092ac:	e841 2300 	strex	r3, r2, [r1]
 80092b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80092b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d1e6      	bne.n	8009286 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2220      	movs	r2, #32
 80092bc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2200      	movs	r2, #0
 80092c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80092c6:	2303      	movs	r3, #3
 80092c8:	e062      	b.n	8009390 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f003 0304 	and.w	r3, r3, #4
 80092d4:	2b04      	cmp	r3, #4
 80092d6:	d149      	bne.n	800936c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80092d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80092dc:	9300      	str	r3, [sp, #0]
 80092de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092e0:	2200      	movs	r2, #0
 80092e2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 f856 	bl	8009398 <UART_WaitOnFlagUntilTimeout>
 80092ec:	4603      	mov	r3, r0
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d03c      	beq.n	800936c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092fa:	e853 3f00 	ldrex	r3, [r3]
 80092fe:	623b      	str	r3, [r7, #32]
   return(result);
 8009300:	6a3b      	ldr	r3, [r7, #32]
 8009302:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009306:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	461a      	mov	r2, r3
 800930e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009310:	633b      	str	r3, [r7, #48]	@ 0x30
 8009312:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009314:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009316:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009318:	e841 2300 	strex	r3, r2, [r1]
 800931c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800931e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009320:	2b00      	cmp	r3, #0
 8009322:	d1e6      	bne.n	80092f2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	3308      	adds	r3, #8
 800932a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	e853 3f00 	ldrex	r3, [r3]
 8009332:	60fb      	str	r3, [r7, #12]
   return(result);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f023 0301 	bic.w	r3, r3, #1
 800933a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	3308      	adds	r3, #8
 8009342:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009344:	61fa      	str	r2, [r7, #28]
 8009346:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009348:	69b9      	ldr	r1, [r7, #24]
 800934a:	69fa      	ldr	r2, [r7, #28]
 800934c:	e841 2300 	strex	r3, r2, [r1]
 8009350:	617b      	str	r3, [r7, #20]
   return(result);
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d1e5      	bne.n	8009324 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2220      	movs	r2, #32
 800935c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2200      	movs	r2, #0
 8009364:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009368:	2303      	movs	r3, #3
 800936a:	e011      	b.n	8009390 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2220      	movs	r2, #32
 8009370:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2220      	movs	r2, #32
 8009376:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2200      	movs	r2, #0
 800937e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2200      	movs	r2, #0
 8009384:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2200      	movs	r2, #0
 800938a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800938e:	2300      	movs	r3, #0
}
 8009390:	4618      	mov	r0, r3
 8009392:	3758      	adds	r7, #88	@ 0x58
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
 800939e:	60f8      	str	r0, [r7, #12]
 80093a0:	60b9      	str	r1, [r7, #8]
 80093a2:	603b      	str	r3, [r7, #0]
 80093a4:	4613      	mov	r3, r2
 80093a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093a8:	e04f      	b.n	800944a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093aa:	69bb      	ldr	r3, [r7, #24]
 80093ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093b0:	d04b      	beq.n	800944a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093b2:	f7f9 ff23 	bl	80031fc <HAL_GetTick>
 80093b6:	4602      	mov	r2, r0
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	1ad3      	subs	r3, r2, r3
 80093bc:	69ba      	ldr	r2, [r7, #24]
 80093be:	429a      	cmp	r2, r3
 80093c0:	d302      	bcc.n	80093c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80093c2:	69bb      	ldr	r3, [r7, #24]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d101      	bne.n	80093cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80093c8:	2303      	movs	r3, #3
 80093ca:	e04e      	b.n	800946a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f003 0304 	and.w	r3, r3, #4
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d037      	beq.n	800944a <UART_WaitOnFlagUntilTimeout+0xb2>
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	2b80      	cmp	r3, #128	@ 0x80
 80093de:	d034      	beq.n	800944a <UART_WaitOnFlagUntilTimeout+0xb2>
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	2b40      	cmp	r3, #64	@ 0x40
 80093e4:	d031      	beq.n	800944a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	69db      	ldr	r3, [r3, #28]
 80093ec:	f003 0308 	and.w	r3, r3, #8
 80093f0:	2b08      	cmp	r3, #8
 80093f2:	d110      	bne.n	8009416 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2208      	movs	r2, #8
 80093fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80093fc:	68f8      	ldr	r0, [r7, #12]
 80093fe:	f000 f8ff 	bl	8009600 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2208      	movs	r2, #8
 8009406:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2200      	movs	r2, #0
 800940e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8009412:	2301      	movs	r3, #1
 8009414:	e029      	b.n	800946a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	69db      	ldr	r3, [r3, #28]
 800941c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009420:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009424:	d111      	bne.n	800944a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800942e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009430:	68f8      	ldr	r0, [r7, #12]
 8009432:	f000 f8e5 	bl	8009600 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	2220      	movs	r2, #32
 800943a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	2200      	movs	r2, #0
 8009442:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8009446:	2303      	movs	r3, #3
 8009448:	e00f      	b.n	800946a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	69da      	ldr	r2, [r3, #28]
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	4013      	ands	r3, r2
 8009454:	68ba      	ldr	r2, [r7, #8]
 8009456:	429a      	cmp	r2, r3
 8009458:	bf0c      	ite	eq
 800945a:	2301      	moveq	r3, #1
 800945c:	2300      	movne	r3, #0
 800945e:	b2db      	uxtb	r3, r3
 8009460:	461a      	mov	r2, r3
 8009462:	79fb      	ldrb	r3, [r7, #7]
 8009464:	429a      	cmp	r2, r3
 8009466:	d0a0      	beq.n	80093aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009468:	2300      	movs	r3, #0
}
 800946a:	4618      	mov	r0, r3
 800946c:	3710      	adds	r7, #16
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
	...

08009474 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009474:	b480      	push	{r7}
 8009476:	b097      	sub	sp, #92	@ 0x5c
 8009478:	af00      	add	r7, sp, #0
 800947a:	60f8      	str	r0, [r7, #12]
 800947c:	60b9      	str	r1, [r7, #8]
 800947e:	4613      	mov	r3, r2
 8009480:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	68ba      	ldr	r2, [r7, #8]
 8009486:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	88fa      	ldrh	r2, [r7, #6]
 800948c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	88fa      	ldrh	r2, [r7, #6]
 8009494:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2200      	movs	r2, #0
 800949c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	689b      	ldr	r3, [r3, #8]
 80094a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094a6:	d10e      	bne.n	80094c6 <UART_Start_Receive_IT+0x52>
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	691b      	ldr	r3, [r3, #16]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d105      	bne.n	80094bc <UART_Start_Receive_IT+0x48>
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80094b6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80094ba:	e02d      	b.n	8009518 <UART_Start_Receive_IT+0xa4>
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	22ff      	movs	r2, #255	@ 0xff
 80094c0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80094c4:	e028      	b.n	8009518 <UART_Start_Receive_IT+0xa4>
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	689b      	ldr	r3, [r3, #8]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d10d      	bne.n	80094ea <UART_Start_Receive_IT+0x76>
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	691b      	ldr	r3, [r3, #16]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d104      	bne.n	80094e0 <UART_Start_Receive_IT+0x6c>
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	22ff      	movs	r2, #255	@ 0xff
 80094da:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80094de:	e01b      	b.n	8009518 <UART_Start_Receive_IT+0xa4>
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	227f      	movs	r2, #127	@ 0x7f
 80094e4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80094e8:	e016      	b.n	8009518 <UART_Start_Receive_IT+0xa4>
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80094f2:	d10d      	bne.n	8009510 <UART_Start_Receive_IT+0x9c>
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	691b      	ldr	r3, [r3, #16]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d104      	bne.n	8009506 <UART_Start_Receive_IT+0x92>
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	227f      	movs	r2, #127	@ 0x7f
 8009500:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009504:	e008      	b.n	8009518 <UART_Start_Receive_IT+0xa4>
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	223f      	movs	r2, #63	@ 0x3f
 800950a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800950e:	e003      	b.n	8009518 <UART_Start_Receive_IT+0xa4>
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	2200      	movs	r2, #0
 8009514:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2200      	movs	r2, #0
 800951c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2222      	movs	r2, #34	@ 0x22
 8009524:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	3308      	adds	r3, #8
 800952e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009530:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009532:	e853 3f00 	ldrex	r3, [r3]
 8009536:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800953a:	f043 0301 	orr.w	r3, r3, #1
 800953e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	3308      	adds	r3, #8
 8009546:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009548:	64ba      	str	r2, [r7, #72]	@ 0x48
 800954a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800954c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800954e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009550:	e841 2300 	strex	r3, r2, [r1]
 8009554:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009556:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009558:	2b00      	cmp	r3, #0
 800955a:	d1e5      	bne.n	8009528 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	689b      	ldr	r3, [r3, #8]
 8009560:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009564:	d107      	bne.n	8009576 <UART_Start_Receive_IT+0x102>
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	691b      	ldr	r3, [r3, #16]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d103      	bne.n	8009576 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	4a21      	ldr	r2, [pc, #132]	@ (80095f8 <UART_Start_Receive_IT+0x184>)
 8009572:	669a      	str	r2, [r3, #104]	@ 0x68
 8009574:	e002      	b.n	800957c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	4a20      	ldr	r2, [pc, #128]	@ (80095fc <UART_Start_Receive_IT+0x188>)
 800957a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	691b      	ldr	r3, [r3, #16]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d019      	beq.n	80095b8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800958a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800958c:	e853 3f00 	ldrex	r3, [r3]
 8009590:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009594:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8009598:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	461a      	mov	r2, r3
 80095a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80095a4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80095a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80095aa:	e841 2300 	strex	r3, r2, [r1]
 80095ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80095b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d1e6      	bne.n	8009584 <UART_Start_Receive_IT+0x110>
 80095b6:	e018      	b.n	80095ea <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	e853 3f00 	ldrex	r3, [r3]
 80095c4:	613b      	str	r3, [r7, #16]
   return(result);
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	f043 0320 	orr.w	r3, r3, #32
 80095cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	461a      	mov	r2, r3
 80095d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095d6:	623b      	str	r3, [r7, #32]
 80095d8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095da:	69f9      	ldr	r1, [r7, #28]
 80095dc:	6a3a      	ldr	r2, [r7, #32]
 80095de:	e841 2300 	strex	r3, r2, [r1]
 80095e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80095e4:	69bb      	ldr	r3, [r7, #24]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d1e6      	bne.n	80095b8 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80095ea:	2300      	movs	r3, #0
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	375c      	adds	r7, #92	@ 0x5c
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr
 80095f8:	08009905 	.word	0x08009905
 80095fc:	08009749 	.word	0x08009749

08009600 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009600:	b480      	push	{r7}
 8009602:	b095      	sub	sp, #84	@ 0x54
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800960e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009610:	e853 3f00 	ldrex	r3, [r3]
 8009614:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009618:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800961c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	461a      	mov	r2, r3
 8009624:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009626:	643b      	str	r3, [r7, #64]	@ 0x40
 8009628:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800962a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800962c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800962e:	e841 2300 	strex	r3, r2, [r1]
 8009632:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009636:	2b00      	cmp	r3, #0
 8009638:	d1e6      	bne.n	8009608 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	3308      	adds	r3, #8
 8009640:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009642:	6a3b      	ldr	r3, [r7, #32]
 8009644:	e853 3f00 	ldrex	r3, [r3]
 8009648:	61fb      	str	r3, [r7, #28]
   return(result);
 800964a:	69fb      	ldr	r3, [r7, #28]
 800964c:	f023 0301 	bic.w	r3, r3, #1
 8009650:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	3308      	adds	r3, #8
 8009658:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800965a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800965c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800965e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009660:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009662:	e841 2300 	strex	r3, r2, [r1]
 8009666:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800966a:	2b00      	cmp	r3, #0
 800966c:	d1e5      	bne.n	800963a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009672:	2b01      	cmp	r3, #1
 8009674:	d118      	bne.n	80096a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	e853 3f00 	ldrex	r3, [r3]
 8009682:	60bb      	str	r3, [r7, #8]
   return(result);
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	f023 0310 	bic.w	r3, r3, #16
 800968a:	647b      	str	r3, [r7, #68]	@ 0x44
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	461a      	mov	r2, r3
 8009692:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009694:	61bb      	str	r3, [r7, #24]
 8009696:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009698:	6979      	ldr	r1, [r7, #20]
 800969a:	69ba      	ldr	r2, [r7, #24]
 800969c:	e841 2300 	strex	r3, r2, [r1]
 80096a0:	613b      	str	r3, [r7, #16]
   return(result);
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d1e6      	bne.n	8009676 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2220      	movs	r2, #32
 80096ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2200      	movs	r2, #0
 80096ba:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80096bc:	bf00      	nop
 80096be:	3754      	adds	r7, #84	@ 0x54
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b084      	sub	sp, #16
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	2200      	movs	r2, #0
 80096da:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2200      	movs	r2, #0
 80096e2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80096e6:	68f8      	ldr	r0, [r7, #12]
 80096e8:	f7ff fa3e 	bl	8008b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096ec:	bf00      	nop
 80096ee:	3710      	adds	r7, #16
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b088      	sub	sp, #32
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	e853 3f00 	ldrex	r3, [r3]
 8009708:	60bb      	str	r3, [r7, #8]
   return(result);
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009710:	61fb      	str	r3, [r7, #28]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	461a      	mov	r2, r3
 8009718:	69fb      	ldr	r3, [r7, #28]
 800971a:	61bb      	str	r3, [r7, #24]
 800971c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800971e:	6979      	ldr	r1, [r7, #20]
 8009720:	69ba      	ldr	r2, [r7, #24]
 8009722:	e841 2300 	strex	r3, r2, [r1]
 8009726:	613b      	str	r3, [r7, #16]
   return(result);
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d1e6      	bne.n	80096fc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2220      	movs	r2, #32
 8009732:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2200      	movs	r2, #0
 8009738:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f7ff fa0a 	bl	8008b54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009740:	bf00      	nop
 8009742:	3720      	adds	r7, #32
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b09c      	sub	sp, #112	@ 0x70
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009756:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009760:	2b22      	cmp	r3, #34	@ 0x22
 8009762:	f040 80be 	bne.w	80098e2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800976c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009770:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009774:	b2d9      	uxtb	r1, r3
 8009776:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800977a:	b2da      	uxtb	r2, r3
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009780:	400a      	ands	r2, r1
 8009782:	b2d2      	uxtb	r2, r2
 8009784:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800978a:	1c5a      	adds	r2, r3, #1
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009796:	b29b      	uxth	r3, r3
 8009798:	3b01      	subs	r3, #1
 800979a:	b29a      	uxth	r2, r3
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	f040 80a3 	bne.w	80098f6 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097b8:	e853 3f00 	ldrex	r3, [r3]
 80097bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80097be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80097c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80097c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	461a      	mov	r2, r3
 80097cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80097ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 80097d0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80097d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80097d6:	e841 2300 	strex	r3, r2, [r1]
 80097da:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80097dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d1e6      	bne.n	80097b0 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	3308      	adds	r3, #8
 80097e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ec:	e853 3f00 	ldrex	r3, [r3]
 80097f0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80097f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097f4:	f023 0301 	bic.w	r3, r3, #1
 80097f8:	667b      	str	r3, [r7, #100]	@ 0x64
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	3308      	adds	r3, #8
 8009800:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009802:	647a      	str	r2, [r7, #68]	@ 0x44
 8009804:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009806:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009808:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800980a:	e841 2300 	strex	r3, r2, [r1]
 800980e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009810:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009812:	2b00      	cmp	r3, #0
 8009814:	d1e5      	bne.n	80097e2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2220      	movs	r2, #32
 800981a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2200      	movs	r2, #0
 8009822:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2200      	movs	r2, #0
 8009828:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4a34      	ldr	r2, [pc, #208]	@ (8009900 <UART_RxISR_8BIT+0x1b8>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d01f      	beq.n	8009874 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	685b      	ldr	r3, [r3, #4]
 800983a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800983e:	2b00      	cmp	r3, #0
 8009840:	d018      	beq.n	8009874 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800984a:	e853 3f00 	ldrex	r3, [r3]
 800984e:	623b      	str	r3, [r7, #32]
   return(result);
 8009850:	6a3b      	ldr	r3, [r7, #32]
 8009852:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009856:	663b      	str	r3, [r7, #96]	@ 0x60
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	461a      	mov	r2, r3
 800985e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009860:	633b      	str	r3, [r7, #48]	@ 0x30
 8009862:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009864:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009866:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009868:	e841 2300 	strex	r3, r2, [r1]
 800986c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800986e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009870:	2b00      	cmp	r3, #0
 8009872:	d1e6      	bne.n	8009842 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009878:	2b01      	cmp	r3, #1
 800987a:	d12e      	bne.n	80098da <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2200      	movs	r2, #0
 8009880:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	e853 3f00 	ldrex	r3, [r3]
 800988e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	f023 0310 	bic.w	r3, r3, #16
 8009896:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	461a      	mov	r2, r3
 800989e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80098a0:	61fb      	str	r3, [r7, #28]
 80098a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a4:	69b9      	ldr	r1, [r7, #24]
 80098a6:	69fa      	ldr	r2, [r7, #28]
 80098a8:	e841 2300 	strex	r3, r2, [r1]
 80098ac:	617b      	str	r3, [r7, #20]
   return(result);
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d1e6      	bne.n	8009882 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	69db      	ldr	r3, [r3, #28]
 80098ba:	f003 0310 	and.w	r3, r3, #16
 80098be:	2b10      	cmp	r3, #16
 80098c0:	d103      	bne.n	80098ca <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	2210      	movs	r2, #16
 80098c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80098d0:	4619      	mov	r1, r3
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f7ff f952 	bl	8008b7c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80098d8:	e00d      	b.n	80098f6 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f7f7 fcba 	bl	8001254 <HAL_UART_RxCpltCallback>
}
 80098e0:	e009      	b.n	80098f6 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	8b1b      	ldrh	r3, [r3, #24]
 80098e8:	b29a      	uxth	r2, r3
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f042 0208 	orr.w	r2, r2, #8
 80098f2:	b292      	uxth	r2, r2
 80098f4:	831a      	strh	r2, [r3, #24]
}
 80098f6:	bf00      	nop
 80098f8:	3770      	adds	r7, #112	@ 0x70
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	bf00      	nop
 8009900:	40008000 	.word	0x40008000

08009904 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b09c      	sub	sp, #112	@ 0x70
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009912:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800991c:	2b22      	cmp	r3, #34	@ 0x22
 800991e:	f040 80be 	bne.w	8009a9e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009928:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009930:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009932:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8009936:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800993a:	4013      	ands	r3, r2
 800993c:	b29a      	uxth	r2, r3
 800993e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009940:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009946:	1c9a      	adds	r2, r3, #2
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009952:	b29b      	uxth	r3, r3
 8009954:	3b01      	subs	r3, #1
 8009956:	b29a      	uxth	r2, r3
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009964:	b29b      	uxth	r3, r3
 8009966:	2b00      	cmp	r3, #0
 8009968:	f040 80a3 	bne.w	8009ab2 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009972:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009974:	e853 3f00 	ldrex	r3, [r3]
 8009978:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800997a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800997c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009980:	667b      	str	r3, [r7, #100]	@ 0x64
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	461a      	mov	r2, r3
 8009988:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800998a:	657b      	str	r3, [r7, #84]	@ 0x54
 800998c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800998e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009990:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009992:	e841 2300 	strex	r3, r2, [r1]
 8009996:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009998:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800999a:	2b00      	cmp	r3, #0
 800999c:	d1e6      	bne.n	800996c <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	3308      	adds	r3, #8
 80099a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099a8:	e853 3f00 	ldrex	r3, [r3]
 80099ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80099ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099b0:	f023 0301 	bic.w	r3, r3, #1
 80099b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	3308      	adds	r3, #8
 80099bc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80099be:	643a      	str	r2, [r7, #64]	@ 0x40
 80099c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80099c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80099c6:	e841 2300 	strex	r3, r2, [r1]
 80099ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80099cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d1e5      	bne.n	800999e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2220      	movs	r2, #32
 80099d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2200      	movs	r2, #0
 80099de:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2200      	movs	r2, #0
 80099e4:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a34      	ldr	r2, [pc, #208]	@ (8009abc <UART_RxISR_16BIT+0x1b8>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d01f      	beq.n	8009a30 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d018      	beq.n	8009a30 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a04:	6a3b      	ldr	r3, [r7, #32]
 8009a06:	e853 3f00 	ldrex	r3, [r3]
 8009a0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a0c:	69fb      	ldr	r3, [r7, #28]
 8009a0e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009a12:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	461a      	mov	r2, r3
 8009a1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a1e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009a22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a24:	e841 2300 	strex	r3, r2, [r1]
 8009a28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d1e6      	bne.n	80099fe <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d12e      	bne.n	8009a96 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	e853 3f00 	ldrex	r3, [r3]
 8009a4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	f023 0310 	bic.w	r3, r3, #16
 8009a52:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	461a      	mov	r2, r3
 8009a5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009a5c:	61bb      	str	r3, [r7, #24]
 8009a5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a60:	6979      	ldr	r1, [r7, #20]
 8009a62:	69ba      	ldr	r2, [r7, #24]
 8009a64:	e841 2300 	strex	r3, r2, [r1]
 8009a68:	613b      	str	r3, [r7, #16]
   return(result);
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d1e6      	bne.n	8009a3e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	69db      	ldr	r3, [r3, #28]
 8009a76:	f003 0310 	and.w	r3, r3, #16
 8009a7a:	2b10      	cmp	r3, #16
 8009a7c:	d103      	bne.n	8009a86 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	2210      	movs	r2, #16
 8009a84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f7ff f874 	bl	8008b7c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009a94:	e00d      	b.n	8009ab2 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f7f7 fbdc 	bl	8001254 <HAL_UART_RxCpltCallback>
}
 8009a9c:	e009      	b.n	8009ab2 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	8b1b      	ldrh	r3, [r3, #24]
 8009aa4:	b29a      	uxth	r2, r3
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f042 0208 	orr.w	r2, r2, #8
 8009aae:	b292      	uxth	r2, r2
 8009ab0:	831a      	strh	r2, [r3, #24]
}
 8009ab2:	bf00      	nop
 8009ab4:	3770      	adds	r7, #112	@ 0x70
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
 8009aba:	bf00      	nop
 8009abc:	40008000 	.word	0x40008000

08009ac0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b083      	sub	sp, #12
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009ac8:	bf00      	nop
 8009aca:	370c      	adds	r7, #12
 8009acc:	46bd      	mov	sp, r7
 8009ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad2:	4770      	bx	lr

08009ad4 <__NVIC_SetPriority>:
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b083      	sub	sp, #12
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	4603      	mov	r3, r0
 8009adc:	6039      	str	r1, [r7, #0]
 8009ade:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	db0a      	blt.n	8009afe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	b2da      	uxtb	r2, r3
 8009aec:	490c      	ldr	r1, [pc, #48]	@ (8009b20 <__NVIC_SetPriority+0x4c>)
 8009aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009af2:	0112      	lsls	r2, r2, #4
 8009af4:	b2d2      	uxtb	r2, r2
 8009af6:	440b      	add	r3, r1
 8009af8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009afc:	e00a      	b.n	8009b14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	b2da      	uxtb	r2, r3
 8009b02:	4908      	ldr	r1, [pc, #32]	@ (8009b24 <__NVIC_SetPriority+0x50>)
 8009b04:	79fb      	ldrb	r3, [r7, #7]
 8009b06:	f003 030f 	and.w	r3, r3, #15
 8009b0a:	3b04      	subs	r3, #4
 8009b0c:	0112      	lsls	r2, r2, #4
 8009b0e:	b2d2      	uxtb	r2, r2
 8009b10:	440b      	add	r3, r1
 8009b12:	761a      	strb	r2, [r3, #24]
}
 8009b14:	bf00      	nop
 8009b16:	370c      	adds	r7, #12
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr
 8009b20:	e000e100 	.word	0xe000e100
 8009b24:	e000ed00 	.word	0xe000ed00

08009b28 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009b2c:	4b05      	ldr	r3, [pc, #20]	@ (8009b44 <SysTick_Handler+0x1c>)
 8009b2e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009b30:	f001 fec6 	bl	800b8c0 <xTaskGetSchedulerState>
 8009b34:	4603      	mov	r3, r0
 8009b36:	2b01      	cmp	r3, #1
 8009b38:	d001      	beq.n	8009b3e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009b3a:	f002 fcbd 	bl	800c4b8 <xPortSysTickHandler>
  }
}
 8009b3e:	bf00      	nop
 8009b40:	bd80      	pop	{r7, pc}
 8009b42:	bf00      	nop
 8009b44:	e000e010 	.word	0xe000e010

08009b48 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009b4c:	2100      	movs	r1, #0
 8009b4e:	f06f 0004 	mvn.w	r0, #4
 8009b52:	f7ff ffbf 	bl	8009ad4 <__NVIC_SetPriority>
#endif
}
 8009b56:	bf00      	nop
 8009b58:	bd80      	pop	{r7, pc}
	...

08009b5c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009b5c:	b480      	push	{r7}
 8009b5e:	b083      	sub	sp, #12
 8009b60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b62:	f3ef 8305 	mrs	r3, IPSR
 8009b66:	603b      	str	r3, [r7, #0]
  return(result);
 8009b68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d003      	beq.n	8009b76 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009b6e:	f06f 0305 	mvn.w	r3, #5
 8009b72:	607b      	str	r3, [r7, #4]
 8009b74:	e00c      	b.n	8009b90 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009b76:	4b0a      	ldr	r3, [pc, #40]	@ (8009ba0 <osKernelInitialize+0x44>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d105      	bne.n	8009b8a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009b7e:	4b08      	ldr	r3, [pc, #32]	@ (8009ba0 <osKernelInitialize+0x44>)
 8009b80:	2201      	movs	r2, #1
 8009b82:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009b84:	2300      	movs	r3, #0
 8009b86:	607b      	str	r3, [r7, #4]
 8009b88:	e002      	b.n	8009b90 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8009b8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009b90:	687b      	ldr	r3, [r7, #4]
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	370c      	adds	r7, #12
 8009b96:	46bd      	mov	sp, r7
 8009b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9c:	4770      	bx	lr
 8009b9e:	bf00      	nop
 8009ba0:	20000388 	.word	0x20000388

08009ba4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b082      	sub	sp, #8
 8009ba8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009baa:	f3ef 8305 	mrs	r3, IPSR
 8009bae:	603b      	str	r3, [r7, #0]
  return(result);
 8009bb0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d003      	beq.n	8009bbe <osKernelStart+0x1a>
    stat = osErrorISR;
 8009bb6:	f06f 0305 	mvn.w	r3, #5
 8009bba:	607b      	str	r3, [r7, #4]
 8009bbc:	e010      	b.n	8009be0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8009bec <osKernelStart+0x48>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	2b01      	cmp	r3, #1
 8009bc4:	d109      	bne.n	8009bda <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009bc6:	f7ff ffbf 	bl	8009b48 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009bca:	4b08      	ldr	r3, [pc, #32]	@ (8009bec <osKernelStart+0x48>)
 8009bcc:	2202      	movs	r2, #2
 8009bce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009bd0:	f001 fa12 	bl	800aff8 <vTaskStartScheduler>
      stat = osOK;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	607b      	str	r3, [r7, #4]
 8009bd8:	e002      	b.n	8009be0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009bda:	f04f 33ff 	mov.w	r3, #4294967295
 8009bde:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009be0:	687b      	ldr	r3, [r7, #4]
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3708      	adds	r7, #8
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}
 8009bea:	bf00      	nop
 8009bec:	20000388 	.word	0x20000388

08009bf0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b08e      	sub	sp, #56	@ 0x38
 8009bf4:	af04      	add	r7, sp, #16
 8009bf6:	60f8      	str	r0, [r7, #12]
 8009bf8:	60b9      	str	r1, [r7, #8]
 8009bfa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c00:	f3ef 8305 	mrs	r3, IPSR
 8009c04:	617b      	str	r3, [r7, #20]
  return(result);
 8009c06:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d17e      	bne.n	8009d0a <osThreadNew+0x11a>
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d07b      	beq.n	8009d0a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009c12:	2380      	movs	r3, #128	@ 0x80
 8009c14:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009c16:	2318      	movs	r3, #24
 8009c18:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8009c22:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d045      	beq.n	8009cb6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d002      	beq.n	8009c38 <osThreadNew+0x48>
        name = attr->name;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	699b      	ldr	r3, [r3, #24]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d002      	beq.n	8009c46 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	699b      	ldr	r3, [r3, #24]
 8009c44:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009c46:	69fb      	ldr	r3, [r7, #28]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d008      	beq.n	8009c5e <osThreadNew+0x6e>
 8009c4c:	69fb      	ldr	r3, [r7, #28]
 8009c4e:	2b38      	cmp	r3, #56	@ 0x38
 8009c50:	d805      	bhi.n	8009c5e <osThreadNew+0x6e>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	685b      	ldr	r3, [r3, #4]
 8009c56:	f003 0301 	and.w	r3, r3, #1
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d001      	beq.n	8009c62 <osThreadNew+0x72>
        return (NULL);
 8009c5e:	2300      	movs	r3, #0
 8009c60:	e054      	b.n	8009d0c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	695b      	ldr	r3, [r3, #20]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d003      	beq.n	8009c72 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	695b      	ldr	r3, [r3, #20]
 8009c6e:	089b      	lsrs	r3, r3, #2
 8009c70:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	689b      	ldr	r3, [r3, #8]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d00e      	beq.n	8009c98 <osThreadNew+0xa8>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	68db      	ldr	r3, [r3, #12]
 8009c7e:	2ba7      	cmp	r3, #167	@ 0xa7
 8009c80:	d90a      	bls.n	8009c98 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d006      	beq.n	8009c98 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	695b      	ldr	r3, [r3, #20]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d002      	beq.n	8009c98 <osThreadNew+0xa8>
        mem = 1;
 8009c92:	2301      	movs	r3, #1
 8009c94:	61bb      	str	r3, [r7, #24]
 8009c96:	e010      	b.n	8009cba <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	689b      	ldr	r3, [r3, #8]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d10c      	bne.n	8009cba <osThreadNew+0xca>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	68db      	ldr	r3, [r3, #12]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d108      	bne.n	8009cba <osThreadNew+0xca>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	691b      	ldr	r3, [r3, #16]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d104      	bne.n	8009cba <osThreadNew+0xca>
          mem = 0;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	61bb      	str	r3, [r7, #24]
 8009cb4:	e001      	b.n	8009cba <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009cba:	69bb      	ldr	r3, [r7, #24]
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	d110      	bne.n	8009ce2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009cc4:	687a      	ldr	r2, [r7, #4]
 8009cc6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009cc8:	9202      	str	r2, [sp, #8]
 8009cca:	9301      	str	r3, [sp, #4]
 8009ccc:	69fb      	ldr	r3, [r7, #28]
 8009cce:	9300      	str	r3, [sp, #0]
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	6a3a      	ldr	r2, [r7, #32]
 8009cd4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009cd6:	68f8      	ldr	r0, [r7, #12]
 8009cd8:	f000 ff9a 	bl	800ac10 <xTaskCreateStatic>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	613b      	str	r3, [r7, #16]
 8009ce0:	e013      	b.n	8009d0a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009ce2:	69bb      	ldr	r3, [r7, #24]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d110      	bne.n	8009d0a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009ce8:	6a3b      	ldr	r3, [r7, #32]
 8009cea:	b29a      	uxth	r2, r3
 8009cec:	f107 0310 	add.w	r3, r7, #16
 8009cf0:	9301      	str	r3, [sp, #4]
 8009cf2:	69fb      	ldr	r3, [r7, #28]
 8009cf4:	9300      	str	r3, [sp, #0]
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009cfa:	68f8      	ldr	r0, [r7, #12]
 8009cfc:	f000 ffe8 	bl	800acd0 <xTaskCreate>
 8009d00:	4603      	mov	r3, r0
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d001      	beq.n	8009d0a <osThreadNew+0x11a>
            hTask = NULL;
 8009d06:	2300      	movs	r3, #0
 8009d08:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009d0a:	693b      	ldr	r3, [r7, #16]
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3728      	adds	r7, #40	@ 0x28
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b084      	sub	sp, #16
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d1c:	f3ef 8305 	mrs	r3, IPSR
 8009d20:	60bb      	str	r3, [r7, #8]
  return(result);
 8009d22:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d003      	beq.n	8009d30 <osDelay+0x1c>
    stat = osErrorISR;
 8009d28:	f06f 0305 	mvn.w	r3, #5
 8009d2c:	60fb      	str	r3, [r7, #12]
 8009d2e:	e007      	b.n	8009d40 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009d30:	2300      	movs	r3, #0
 8009d32:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d002      	beq.n	8009d40 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f001 f926 	bl	800af8c <vTaskDelay>
    }
  }

  return (stat);
 8009d40:	68fb      	ldr	r3, [r7, #12]
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3710      	adds	r7, #16
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}

08009d4a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009d4a:	b580      	push	{r7, lr}
 8009d4c:	b08a      	sub	sp, #40	@ 0x28
 8009d4e:	af02      	add	r7, sp, #8
 8009d50:	60f8      	str	r0, [r7, #12]
 8009d52:	60b9      	str	r1, [r7, #8]
 8009d54:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009d56:	2300      	movs	r3, #0
 8009d58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d5a:	f3ef 8305 	mrs	r3, IPSR
 8009d5e:	613b      	str	r3, [r7, #16]
  return(result);
 8009d60:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d175      	bne.n	8009e52 <osSemaphoreNew+0x108>
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d072      	beq.n	8009e52 <osSemaphoreNew+0x108>
 8009d6c:	68ba      	ldr	r2, [r7, #8]
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	429a      	cmp	r2, r3
 8009d72:	d86e      	bhi.n	8009e52 <osSemaphoreNew+0x108>
    mem = -1;
 8009d74:	f04f 33ff 	mov.w	r3, #4294967295
 8009d78:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d015      	beq.n	8009dac <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	689b      	ldr	r3, [r3, #8]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d006      	beq.n	8009d96 <osSemaphoreNew+0x4c>
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	68db      	ldr	r3, [r3, #12]
 8009d8c:	2b4f      	cmp	r3, #79	@ 0x4f
 8009d8e:	d902      	bls.n	8009d96 <osSemaphoreNew+0x4c>
        mem = 1;
 8009d90:	2301      	movs	r3, #1
 8009d92:	61bb      	str	r3, [r7, #24]
 8009d94:	e00c      	b.n	8009db0 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	689b      	ldr	r3, [r3, #8]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d108      	bne.n	8009db0 <osSemaphoreNew+0x66>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	68db      	ldr	r3, [r3, #12]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d104      	bne.n	8009db0 <osSemaphoreNew+0x66>
          mem = 0;
 8009da6:	2300      	movs	r3, #0
 8009da8:	61bb      	str	r3, [r7, #24]
 8009daa:	e001      	b.n	8009db0 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009dac:	2300      	movs	r3, #0
 8009dae:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009db0:	69bb      	ldr	r3, [r7, #24]
 8009db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009db6:	d04c      	beq.n	8009e52 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2b01      	cmp	r3, #1
 8009dbc:	d128      	bne.n	8009e10 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009dbe:	69bb      	ldr	r3, [r7, #24]
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	d10a      	bne.n	8009dda <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	689b      	ldr	r3, [r3, #8]
 8009dc8:	2203      	movs	r2, #3
 8009dca:	9200      	str	r2, [sp, #0]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	2100      	movs	r1, #0
 8009dd0:	2001      	movs	r0, #1
 8009dd2:	f000 f995 	bl	800a100 <xQueueGenericCreateStatic>
 8009dd6:	61f8      	str	r0, [r7, #28]
 8009dd8:	e005      	b.n	8009de6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009dda:	2203      	movs	r2, #3
 8009ddc:	2100      	movs	r1, #0
 8009dde:	2001      	movs	r0, #1
 8009de0:	f000 fa0b 	bl	800a1fa <xQueueGenericCreate>
 8009de4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009de6:	69fb      	ldr	r3, [r7, #28]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d022      	beq.n	8009e32 <osSemaphoreNew+0xe8>
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d01f      	beq.n	8009e32 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009df2:	2300      	movs	r3, #0
 8009df4:	2200      	movs	r2, #0
 8009df6:	2100      	movs	r1, #0
 8009df8:	69f8      	ldr	r0, [r7, #28]
 8009dfa:	f000 facb 	bl	800a394 <xQueueGenericSend>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	2b01      	cmp	r3, #1
 8009e02:	d016      	beq.n	8009e32 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009e04:	69f8      	ldr	r0, [r7, #28]
 8009e06:	f000 fd47 	bl	800a898 <vQueueDelete>
            hSemaphore = NULL;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	61fb      	str	r3, [r7, #28]
 8009e0e:	e010      	b.n	8009e32 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009e10:	69bb      	ldr	r3, [r7, #24]
 8009e12:	2b01      	cmp	r3, #1
 8009e14:	d108      	bne.n	8009e28 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	689b      	ldr	r3, [r3, #8]
 8009e1a:	461a      	mov	r2, r3
 8009e1c:	68b9      	ldr	r1, [r7, #8]
 8009e1e:	68f8      	ldr	r0, [r7, #12]
 8009e20:	f000 fa49 	bl	800a2b6 <xQueueCreateCountingSemaphoreStatic>
 8009e24:	61f8      	str	r0, [r7, #28]
 8009e26:	e004      	b.n	8009e32 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009e28:	68b9      	ldr	r1, [r7, #8]
 8009e2a:	68f8      	ldr	r0, [r7, #12]
 8009e2c:	f000 fa7c 	bl	800a328 <xQueueCreateCountingSemaphore>
 8009e30:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009e32:	69fb      	ldr	r3, [r7, #28]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d00c      	beq.n	8009e52 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d003      	beq.n	8009e46 <osSemaphoreNew+0xfc>
          name = attr->name;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	617b      	str	r3, [r7, #20]
 8009e44:	e001      	b.n	8009e4a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009e46:	2300      	movs	r3, #0
 8009e48:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009e4a:	6979      	ldr	r1, [r7, #20]
 8009e4c:	69f8      	ldr	r0, [r7, #28]
 8009e4e:	f000 fe57 	bl	800ab00 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009e52:	69fb      	ldr	r3, [r7, #28]
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3720      	adds	r7, #32
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}

08009e5c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009e5c:	b480      	push	{r7}
 8009e5e:	b085      	sub	sp, #20
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	60f8      	str	r0, [r7, #12]
 8009e64:	60b9      	str	r1, [r7, #8]
 8009e66:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	4a07      	ldr	r2, [pc, #28]	@ (8009e88 <vApplicationGetIdleTaskMemory+0x2c>)
 8009e6c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	4a06      	ldr	r2, [pc, #24]	@ (8009e8c <vApplicationGetIdleTaskMemory+0x30>)
 8009e72:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2280      	movs	r2, #128	@ 0x80
 8009e78:	601a      	str	r2, [r3, #0]
}
 8009e7a:	bf00      	nop
 8009e7c:	3714      	adds	r7, #20
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e84:	4770      	bx	lr
 8009e86:	bf00      	nop
 8009e88:	2000038c 	.word	0x2000038c
 8009e8c:	20000434 	.word	0x20000434

08009e90 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009e90:	b480      	push	{r7}
 8009e92:	b085      	sub	sp, #20
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	60b9      	str	r1, [r7, #8]
 8009e9a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	4a07      	ldr	r2, [pc, #28]	@ (8009ebc <vApplicationGetTimerTaskMemory+0x2c>)
 8009ea0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	4a06      	ldr	r2, [pc, #24]	@ (8009ec0 <vApplicationGetTimerTaskMemory+0x30>)
 8009ea6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009eae:	601a      	str	r2, [r3, #0]
}
 8009eb0:	bf00      	nop
 8009eb2:	3714      	adds	r7, #20
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr
 8009ebc:	20000634 	.word	0x20000634
 8009ec0:	200006dc 	.word	0x200006dc

08009ec4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b083      	sub	sp, #12
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f103 0208 	add.w	r2, r3, #8
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8009edc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f103 0208 	add.w	r2, r3, #8
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f103 0208 	add.w	r2, r3, #8
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009ef8:	bf00      	nop
 8009efa:	370c      	adds	r7, #12
 8009efc:	46bd      	mov	sp, r7
 8009efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f02:	4770      	bx	lr

08009f04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009f04:	b480      	push	{r7}
 8009f06:	b083      	sub	sp, #12
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009f12:	bf00      	nop
 8009f14:	370c      	adds	r7, #12
 8009f16:	46bd      	mov	sp, r7
 8009f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1c:	4770      	bx	lr

08009f1e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f1e:	b480      	push	{r7}
 8009f20:	b085      	sub	sp, #20
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	6078      	str	r0, [r7, #4]
 8009f26:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	68fa      	ldr	r2, [r7, #12]
 8009f32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	689a      	ldr	r2, [r3, #8]
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	689b      	ldr	r3, [r3, #8]
 8009f40:	683a      	ldr	r2, [r7, #0]
 8009f42:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	683a      	ldr	r2, [r7, #0]
 8009f48:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	687a      	ldr	r2, [r7, #4]
 8009f4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	1c5a      	adds	r2, r3, #1
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	601a      	str	r2, [r3, #0]
}
 8009f5a:	bf00      	nop
 8009f5c:	3714      	adds	r7, #20
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f64:	4770      	bx	lr

08009f66 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f66:	b480      	push	{r7}
 8009f68:	b085      	sub	sp, #20
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	6078      	str	r0, [r7, #4]
 8009f6e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f7c:	d103      	bne.n	8009f86 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	691b      	ldr	r3, [r3, #16]
 8009f82:	60fb      	str	r3, [r7, #12]
 8009f84:	e00c      	b.n	8009fa0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	3308      	adds	r3, #8
 8009f8a:	60fb      	str	r3, [r7, #12]
 8009f8c:	e002      	b.n	8009f94 <vListInsert+0x2e>
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	60fb      	str	r3, [r7, #12]
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	68ba      	ldr	r2, [r7, #8]
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d2f6      	bcs.n	8009f8e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	685a      	ldr	r2, [r3, #4]
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	683a      	ldr	r2, [r7, #0]
 8009fae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	68fa      	ldr	r2, [r7, #12]
 8009fb4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	683a      	ldr	r2, [r7, #0]
 8009fba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	687a      	ldr	r2, [r7, #4]
 8009fc0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	1c5a      	adds	r2, r3, #1
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	601a      	str	r2, [r3, #0]
}
 8009fcc:	bf00      	nop
 8009fce:	3714      	adds	r7, #20
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr

08009fd8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b085      	sub	sp, #20
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	691b      	ldr	r3, [r3, #16]
 8009fe4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	687a      	ldr	r2, [r7, #4]
 8009fec:	6892      	ldr	r2, [r2, #8]
 8009fee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	689b      	ldr	r3, [r3, #8]
 8009ff4:	687a      	ldr	r2, [r7, #4]
 8009ff6:	6852      	ldr	r2, [r2, #4]
 8009ff8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	685b      	ldr	r3, [r3, #4]
 8009ffe:	687a      	ldr	r2, [r7, #4]
 800a000:	429a      	cmp	r2, r3
 800a002:	d103      	bne.n	800a00c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	689a      	ldr	r2, [r3, #8]
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2200      	movs	r2, #0
 800a010:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	1e5a      	subs	r2, r3, #1
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
}
 800a020:	4618      	mov	r0, r3
 800a022:	3714      	adds	r7, #20
 800a024:	46bd      	mov	sp, r7
 800a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02a:	4770      	bx	lr

0800a02c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b084      	sub	sp, #16
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d10b      	bne.n	800a058 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a044:	f383 8811 	msr	BASEPRI, r3
 800a048:	f3bf 8f6f 	isb	sy
 800a04c:	f3bf 8f4f 	dsb	sy
 800a050:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a052:	bf00      	nop
 800a054:	bf00      	nop
 800a056:	e7fd      	b.n	800a054 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a058:	f002 f99e 	bl	800c398 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681a      	ldr	r2, [r3, #0]
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a064:	68f9      	ldr	r1, [r7, #12]
 800a066:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a068:	fb01 f303 	mul.w	r3, r1, r3
 800a06c:	441a      	add	r2, r3
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2200      	movs	r2, #0
 800a076:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681a      	ldr	r2, [r3, #0]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681a      	ldr	r2, [r3, #0]
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a088:	3b01      	subs	r3, #1
 800a08a:	68f9      	ldr	r1, [r7, #12]
 800a08c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a08e:	fb01 f303 	mul.w	r3, r1, r3
 800a092:	441a      	add	r2, r3
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	22ff      	movs	r2, #255	@ 0xff
 800a09c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	22ff      	movs	r2, #255	@ 0xff
 800a0a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d114      	bne.n	800a0d8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	691b      	ldr	r3, [r3, #16]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d01a      	beq.n	800a0ec <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	3310      	adds	r3, #16
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f001 fa3a 	bl	800b534 <xTaskRemoveFromEventList>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d012      	beq.n	800a0ec <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a0c6:	4b0d      	ldr	r3, [pc, #52]	@ (800a0fc <xQueueGenericReset+0xd0>)
 800a0c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0cc:	601a      	str	r2, [r3, #0]
 800a0ce:	f3bf 8f4f 	dsb	sy
 800a0d2:	f3bf 8f6f 	isb	sy
 800a0d6:	e009      	b.n	800a0ec <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	3310      	adds	r3, #16
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f7ff fef1 	bl	8009ec4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	3324      	adds	r3, #36	@ 0x24
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f7ff feec 	bl	8009ec4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a0ec:	f002 f986 	bl	800c3fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a0f0:	2301      	movs	r3, #1
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3710      	adds	r7, #16
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}
 800a0fa:	bf00      	nop
 800a0fc:	e000ed04 	.word	0xe000ed04

0800a100 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a100:	b580      	push	{r7, lr}
 800a102:	b08e      	sub	sp, #56	@ 0x38
 800a104:	af02      	add	r7, sp, #8
 800a106:	60f8      	str	r0, [r7, #12]
 800a108:	60b9      	str	r1, [r7, #8]
 800a10a:	607a      	str	r2, [r7, #4]
 800a10c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d10b      	bne.n	800a12c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a118:	f383 8811 	msr	BASEPRI, r3
 800a11c:	f3bf 8f6f 	isb	sy
 800a120:	f3bf 8f4f 	dsb	sy
 800a124:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a126:	bf00      	nop
 800a128:	bf00      	nop
 800a12a:	e7fd      	b.n	800a128 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d10b      	bne.n	800a14a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a136:	f383 8811 	msr	BASEPRI, r3
 800a13a:	f3bf 8f6f 	isb	sy
 800a13e:	f3bf 8f4f 	dsb	sy
 800a142:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a144:	bf00      	nop
 800a146:	bf00      	nop
 800a148:	e7fd      	b.n	800a146 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d002      	beq.n	800a156 <xQueueGenericCreateStatic+0x56>
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d001      	beq.n	800a15a <xQueueGenericCreateStatic+0x5a>
 800a156:	2301      	movs	r3, #1
 800a158:	e000      	b.n	800a15c <xQueueGenericCreateStatic+0x5c>
 800a15a:	2300      	movs	r3, #0
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d10b      	bne.n	800a178 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a164:	f383 8811 	msr	BASEPRI, r3
 800a168:	f3bf 8f6f 	isb	sy
 800a16c:	f3bf 8f4f 	dsb	sy
 800a170:	623b      	str	r3, [r7, #32]
}
 800a172:	bf00      	nop
 800a174:	bf00      	nop
 800a176:	e7fd      	b.n	800a174 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d102      	bne.n	800a184 <xQueueGenericCreateStatic+0x84>
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d101      	bne.n	800a188 <xQueueGenericCreateStatic+0x88>
 800a184:	2301      	movs	r3, #1
 800a186:	e000      	b.n	800a18a <xQueueGenericCreateStatic+0x8a>
 800a188:	2300      	movs	r3, #0
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d10b      	bne.n	800a1a6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a18e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a192:	f383 8811 	msr	BASEPRI, r3
 800a196:	f3bf 8f6f 	isb	sy
 800a19a:	f3bf 8f4f 	dsb	sy
 800a19e:	61fb      	str	r3, [r7, #28]
}
 800a1a0:	bf00      	nop
 800a1a2:	bf00      	nop
 800a1a4:	e7fd      	b.n	800a1a2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a1a6:	2350      	movs	r3, #80	@ 0x50
 800a1a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	2b50      	cmp	r3, #80	@ 0x50
 800a1ae:	d00b      	beq.n	800a1c8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a1b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1b4:	f383 8811 	msr	BASEPRI, r3
 800a1b8:	f3bf 8f6f 	isb	sy
 800a1bc:	f3bf 8f4f 	dsb	sy
 800a1c0:	61bb      	str	r3, [r7, #24]
}
 800a1c2:	bf00      	nop
 800a1c4:	bf00      	nop
 800a1c6:	e7fd      	b.n	800a1c4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a1c8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a1ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d00d      	beq.n	800a1f0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a1d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a1dc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a1e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1e2:	9300      	str	r3, [sp, #0]
 800a1e4:	4613      	mov	r3, r2
 800a1e6:	687a      	ldr	r2, [r7, #4]
 800a1e8:	68b9      	ldr	r1, [r7, #8]
 800a1ea:	68f8      	ldr	r0, [r7, #12]
 800a1ec:	f000 f840 	bl	800a270 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a1f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3730      	adds	r7, #48	@ 0x30
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}

0800a1fa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a1fa:	b580      	push	{r7, lr}
 800a1fc:	b08a      	sub	sp, #40	@ 0x28
 800a1fe:	af02      	add	r7, sp, #8
 800a200:	60f8      	str	r0, [r7, #12]
 800a202:	60b9      	str	r1, [r7, #8]
 800a204:	4613      	mov	r3, r2
 800a206:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d10b      	bne.n	800a226 <xQueueGenericCreate+0x2c>
	__asm volatile
 800a20e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a212:	f383 8811 	msr	BASEPRI, r3
 800a216:	f3bf 8f6f 	isb	sy
 800a21a:	f3bf 8f4f 	dsb	sy
 800a21e:	613b      	str	r3, [r7, #16]
}
 800a220:	bf00      	nop
 800a222:	bf00      	nop
 800a224:	e7fd      	b.n	800a222 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	68ba      	ldr	r2, [r7, #8]
 800a22a:	fb02 f303 	mul.w	r3, r2, r3
 800a22e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a230:	69fb      	ldr	r3, [r7, #28]
 800a232:	3350      	adds	r3, #80	@ 0x50
 800a234:	4618      	mov	r0, r3
 800a236:	f002 f9d1 	bl	800c5dc <pvPortMalloc>
 800a23a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a23c:	69bb      	ldr	r3, [r7, #24]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d011      	beq.n	800a266 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a242:	69bb      	ldr	r3, [r7, #24]
 800a244:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	3350      	adds	r3, #80	@ 0x50
 800a24a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a24c:	69bb      	ldr	r3, [r7, #24]
 800a24e:	2200      	movs	r2, #0
 800a250:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a254:	79fa      	ldrb	r2, [r7, #7]
 800a256:	69bb      	ldr	r3, [r7, #24]
 800a258:	9300      	str	r3, [sp, #0]
 800a25a:	4613      	mov	r3, r2
 800a25c:	697a      	ldr	r2, [r7, #20]
 800a25e:	68b9      	ldr	r1, [r7, #8]
 800a260:	68f8      	ldr	r0, [r7, #12]
 800a262:	f000 f805 	bl	800a270 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a266:	69bb      	ldr	r3, [r7, #24]
	}
 800a268:	4618      	mov	r0, r3
 800a26a:	3720      	adds	r7, #32
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b084      	sub	sp, #16
 800a274:	af00      	add	r7, sp, #0
 800a276:	60f8      	str	r0, [r7, #12]
 800a278:	60b9      	str	r1, [r7, #8]
 800a27a:	607a      	str	r2, [r7, #4]
 800a27c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d103      	bne.n	800a28c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a284:	69bb      	ldr	r3, [r7, #24]
 800a286:	69ba      	ldr	r2, [r7, #24]
 800a288:	601a      	str	r2, [r3, #0]
 800a28a:	e002      	b.n	800a292 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a28c:	69bb      	ldr	r3, [r7, #24]
 800a28e:	687a      	ldr	r2, [r7, #4]
 800a290:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a292:	69bb      	ldr	r3, [r7, #24]
 800a294:	68fa      	ldr	r2, [r7, #12]
 800a296:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a298:	69bb      	ldr	r3, [r7, #24]
 800a29a:	68ba      	ldr	r2, [r7, #8]
 800a29c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a29e:	2101      	movs	r1, #1
 800a2a0:	69b8      	ldr	r0, [r7, #24]
 800a2a2:	f7ff fec3 	bl	800a02c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a2a6:	69bb      	ldr	r3, [r7, #24]
 800a2a8:	78fa      	ldrb	r2, [r7, #3]
 800a2aa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a2ae:	bf00      	nop
 800a2b0:	3710      	adds	r7, #16
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}

0800a2b6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a2b6:	b580      	push	{r7, lr}
 800a2b8:	b08a      	sub	sp, #40	@ 0x28
 800a2ba:	af02      	add	r7, sp, #8
 800a2bc:	60f8      	str	r0, [r7, #12]
 800a2be:	60b9      	str	r1, [r7, #8]
 800a2c0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d10b      	bne.n	800a2e0 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800a2c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2cc:	f383 8811 	msr	BASEPRI, r3
 800a2d0:	f3bf 8f6f 	isb	sy
 800a2d4:	f3bf 8f4f 	dsb	sy
 800a2d8:	61bb      	str	r3, [r7, #24]
}
 800a2da:	bf00      	nop
 800a2dc:	bf00      	nop
 800a2de:	e7fd      	b.n	800a2dc <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a2e0:	68ba      	ldr	r2, [r7, #8]
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	429a      	cmp	r2, r3
 800a2e6:	d90b      	bls.n	800a300 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800a2e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2ec:	f383 8811 	msr	BASEPRI, r3
 800a2f0:	f3bf 8f6f 	isb	sy
 800a2f4:	f3bf 8f4f 	dsb	sy
 800a2f8:	617b      	str	r3, [r7, #20]
}
 800a2fa:	bf00      	nop
 800a2fc:	bf00      	nop
 800a2fe:	e7fd      	b.n	800a2fc <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a300:	2302      	movs	r3, #2
 800a302:	9300      	str	r3, [sp, #0]
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2200      	movs	r2, #0
 800a308:	2100      	movs	r1, #0
 800a30a:	68f8      	ldr	r0, [r7, #12]
 800a30c:	f7ff fef8 	bl	800a100 <xQueueGenericCreateStatic>
 800a310:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a312:	69fb      	ldr	r3, [r7, #28]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d002      	beq.n	800a31e <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a318:	69fb      	ldr	r3, [r7, #28]
 800a31a:	68ba      	ldr	r2, [r7, #8]
 800a31c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a31e:	69fb      	ldr	r3, [r7, #28]
	}
 800a320:	4618      	mov	r0, r3
 800a322:	3720      	adds	r7, #32
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}

0800a328 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b086      	sub	sp, #24
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
 800a330:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d10b      	bne.n	800a350 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800a338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a33c:	f383 8811 	msr	BASEPRI, r3
 800a340:	f3bf 8f6f 	isb	sy
 800a344:	f3bf 8f4f 	dsb	sy
 800a348:	613b      	str	r3, [r7, #16]
}
 800a34a:	bf00      	nop
 800a34c:	bf00      	nop
 800a34e:	e7fd      	b.n	800a34c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a350:	683a      	ldr	r2, [r7, #0]
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	429a      	cmp	r2, r3
 800a356:	d90b      	bls.n	800a370 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800a358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a35c:	f383 8811 	msr	BASEPRI, r3
 800a360:	f3bf 8f6f 	isb	sy
 800a364:	f3bf 8f4f 	dsb	sy
 800a368:	60fb      	str	r3, [r7, #12]
}
 800a36a:	bf00      	nop
 800a36c:	bf00      	nop
 800a36e:	e7fd      	b.n	800a36c <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a370:	2202      	movs	r2, #2
 800a372:	2100      	movs	r1, #0
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f7ff ff40 	bl	800a1fa <xQueueGenericCreate>
 800a37a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d002      	beq.n	800a388 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	683a      	ldr	r2, [r7, #0]
 800a386:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a388:	697b      	ldr	r3, [r7, #20]
	}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3718      	adds	r7, #24
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}
	...

0800a394 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b08e      	sub	sp, #56	@ 0x38
 800a398:	af00      	add	r7, sp, #0
 800a39a:	60f8      	str	r0, [r7, #12]
 800a39c:	60b9      	str	r1, [r7, #8]
 800a39e:	607a      	str	r2, [r7, #4]
 800a3a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a3aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d10b      	bne.n	800a3c8 <xQueueGenericSend+0x34>
	__asm volatile
 800a3b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3b4:	f383 8811 	msr	BASEPRI, r3
 800a3b8:	f3bf 8f6f 	isb	sy
 800a3bc:	f3bf 8f4f 	dsb	sy
 800a3c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a3c2:	bf00      	nop
 800a3c4:	bf00      	nop
 800a3c6:	e7fd      	b.n	800a3c4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d103      	bne.n	800a3d6 <xQueueGenericSend+0x42>
 800a3ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d101      	bne.n	800a3da <xQueueGenericSend+0x46>
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	e000      	b.n	800a3dc <xQueueGenericSend+0x48>
 800a3da:	2300      	movs	r3, #0
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d10b      	bne.n	800a3f8 <xQueueGenericSend+0x64>
	__asm volatile
 800a3e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3e4:	f383 8811 	msr	BASEPRI, r3
 800a3e8:	f3bf 8f6f 	isb	sy
 800a3ec:	f3bf 8f4f 	dsb	sy
 800a3f0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a3f2:	bf00      	nop
 800a3f4:	bf00      	nop
 800a3f6:	e7fd      	b.n	800a3f4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	2b02      	cmp	r3, #2
 800a3fc:	d103      	bne.n	800a406 <xQueueGenericSend+0x72>
 800a3fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a400:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a402:	2b01      	cmp	r3, #1
 800a404:	d101      	bne.n	800a40a <xQueueGenericSend+0x76>
 800a406:	2301      	movs	r3, #1
 800a408:	e000      	b.n	800a40c <xQueueGenericSend+0x78>
 800a40a:	2300      	movs	r3, #0
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d10b      	bne.n	800a428 <xQueueGenericSend+0x94>
	__asm volatile
 800a410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a414:	f383 8811 	msr	BASEPRI, r3
 800a418:	f3bf 8f6f 	isb	sy
 800a41c:	f3bf 8f4f 	dsb	sy
 800a420:	623b      	str	r3, [r7, #32]
}
 800a422:	bf00      	nop
 800a424:	bf00      	nop
 800a426:	e7fd      	b.n	800a424 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a428:	f001 fa4a 	bl	800b8c0 <xTaskGetSchedulerState>
 800a42c:	4603      	mov	r3, r0
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d102      	bne.n	800a438 <xQueueGenericSend+0xa4>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d101      	bne.n	800a43c <xQueueGenericSend+0xa8>
 800a438:	2301      	movs	r3, #1
 800a43a:	e000      	b.n	800a43e <xQueueGenericSend+0xaa>
 800a43c:	2300      	movs	r3, #0
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d10b      	bne.n	800a45a <xQueueGenericSend+0xc6>
	__asm volatile
 800a442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a446:	f383 8811 	msr	BASEPRI, r3
 800a44a:	f3bf 8f6f 	isb	sy
 800a44e:	f3bf 8f4f 	dsb	sy
 800a452:	61fb      	str	r3, [r7, #28]
}
 800a454:	bf00      	nop
 800a456:	bf00      	nop
 800a458:	e7fd      	b.n	800a456 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a45a:	f001 ff9d 	bl	800c398 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a45e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a460:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a464:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a466:	429a      	cmp	r2, r3
 800a468:	d302      	bcc.n	800a470 <xQueueGenericSend+0xdc>
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	2b02      	cmp	r3, #2
 800a46e:	d129      	bne.n	800a4c4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a470:	683a      	ldr	r2, [r7, #0]
 800a472:	68b9      	ldr	r1, [r7, #8]
 800a474:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a476:	f000 fa33 	bl	800a8e0 <prvCopyDataToQueue>
 800a47a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a47c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a47e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a480:	2b00      	cmp	r3, #0
 800a482:	d010      	beq.n	800a4a6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a486:	3324      	adds	r3, #36	@ 0x24
 800a488:	4618      	mov	r0, r3
 800a48a:	f001 f853 	bl	800b534 <xTaskRemoveFromEventList>
 800a48e:	4603      	mov	r3, r0
 800a490:	2b00      	cmp	r3, #0
 800a492:	d013      	beq.n	800a4bc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a494:	4b3f      	ldr	r3, [pc, #252]	@ (800a594 <xQueueGenericSend+0x200>)
 800a496:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a49a:	601a      	str	r2, [r3, #0]
 800a49c:	f3bf 8f4f 	dsb	sy
 800a4a0:	f3bf 8f6f 	isb	sy
 800a4a4:	e00a      	b.n	800a4bc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a4a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d007      	beq.n	800a4bc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a4ac:	4b39      	ldr	r3, [pc, #228]	@ (800a594 <xQueueGenericSend+0x200>)
 800a4ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4b2:	601a      	str	r2, [r3, #0]
 800a4b4:	f3bf 8f4f 	dsb	sy
 800a4b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a4bc:	f001 ff9e 	bl	800c3fc <vPortExitCritical>
				return pdPASS;
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	e063      	b.n	800a58c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d103      	bne.n	800a4d2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a4ca:	f001 ff97 	bl	800c3fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	e05c      	b.n	800a58c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a4d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d106      	bne.n	800a4e6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a4d8:	f107 0314 	add.w	r3, r7, #20
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f001 f88d 	bl	800b5fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a4e6:	f001 ff89 	bl	800c3fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a4ea:	f000 fdf5 	bl	800b0d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a4ee:	f001 ff53 	bl	800c398 <vPortEnterCritical>
 800a4f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a4f8:	b25b      	sxtb	r3, r3
 800a4fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4fe:	d103      	bne.n	800a508 <xQueueGenericSend+0x174>
 800a500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a502:	2200      	movs	r2, #0
 800a504:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a50a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a50e:	b25b      	sxtb	r3, r3
 800a510:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a514:	d103      	bne.n	800a51e <xQueueGenericSend+0x18a>
 800a516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a518:	2200      	movs	r2, #0
 800a51a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a51e:	f001 ff6d 	bl	800c3fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a522:	1d3a      	adds	r2, r7, #4
 800a524:	f107 0314 	add.w	r3, r7, #20
 800a528:	4611      	mov	r1, r2
 800a52a:	4618      	mov	r0, r3
 800a52c:	f001 f87c 	bl	800b628 <xTaskCheckForTimeOut>
 800a530:	4603      	mov	r3, r0
 800a532:	2b00      	cmp	r3, #0
 800a534:	d124      	bne.n	800a580 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a536:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a538:	f000 faca 	bl	800aad0 <prvIsQueueFull>
 800a53c:	4603      	mov	r3, r0
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d018      	beq.n	800a574 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a544:	3310      	adds	r3, #16
 800a546:	687a      	ldr	r2, [r7, #4]
 800a548:	4611      	mov	r1, r2
 800a54a:	4618      	mov	r0, r3
 800a54c:	f000 ffa0 	bl	800b490 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a550:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a552:	f000 fa55 	bl	800aa00 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a556:	f000 fdcd 	bl	800b0f4 <xTaskResumeAll>
 800a55a:	4603      	mov	r3, r0
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	f47f af7c 	bne.w	800a45a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a562:	4b0c      	ldr	r3, [pc, #48]	@ (800a594 <xQueueGenericSend+0x200>)
 800a564:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a568:	601a      	str	r2, [r3, #0]
 800a56a:	f3bf 8f4f 	dsb	sy
 800a56e:	f3bf 8f6f 	isb	sy
 800a572:	e772      	b.n	800a45a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a574:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a576:	f000 fa43 	bl	800aa00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a57a:	f000 fdbb 	bl	800b0f4 <xTaskResumeAll>
 800a57e:	e76c      	b.n	800a45a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a580:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a582:	f000 fa3d 	bl	800aa00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a586:	f000 fdb5 	bl	800b0f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a58a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3738      	adds	r7, #56	@ 0x38
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}
 800a594:	e000ed04 	.word	0xe000ed04

0800a598 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b090      	sub	sp, #64	@ 0x40
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	60f8      	str	r0, [r7, #12]
 800a5a0:	60b9      	str	r1, [r7, #8]
 800a5a2:	607a      	str	r2, [r7, #4]
 800a5a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a5aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d10b      	bne.n	800a5c8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a5b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5b4:	f383 8811 	msr	BASEPRI, r3
 800a5b8:	f3bf 8f6f 	isb	sy
 800a5bc:	f3bf 8f4f 	dsb	sy
 800a5c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a5c2:	bf00      	nop
 800a5c4:	bf00      	nop
 800a5c6:	e7fd      	b.n	800a5c4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d103      	bne.n	800a5d6 <xQueueGenericSendFromISR+0x3e>
 800a5ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d101      	bne.n	800a5da <xQueueGenericSendFromISR+0x42>
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	e000      	b.n	800a5dc <xQueueGenericSendFromISR+0x44>
 800a5da:	2300      	movs	r3, #0
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d10b      	bne.n	800a5f8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a5e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5e4:	f383 8811 	msr	BASEPRI, r3
 800a5e8:	f3bf 8f6f 	isb	sy
 800a5ec:	f3bf 8f4f 	dsb	sy
 800a5f0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a5f2:	bf00      	nop
 800a5f4:	bf00      	nop
 800a5f6:	e7fd      	b.n	800a5f4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	2b02      	cmp	r3, #2
 800a5fc:	d103      	bne.n	800a606 <xQueueGenericSendFromISR+0x6e>
 800a5fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a600:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a602:	2b01      	cmp	r3, #1
 800a604:	d101      	bne.n	800a60a <xQueueGenericSendFromISR+0x72>
 800a606:	2301      	movs	r3, #1
 800a608:	e000      	b.n	800a60c <xQueueGenericSendFromISR+0x74>
 800a60a:	2300      	movs	r3, #0
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d10b      	bne.n	800a628 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a614:	f383 8811 	msr	BASEPRI, r3
 800a618:	f3bf 8f6f 	isb	sy
 800a61c:	f3bf 8f4f 	dsb	sy
 800a620:	623b      	str	r3, [r7, #32]
}
 800a622:	bf00      	nop
 800a624:	bf00      	nop
 800a626:	e7fd      	b.n	800a624 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a628:	f001 ff96 	bl	800c558 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a62c:	f3ef 8211 	mrs	r2, BASEPRI
 800a630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a634:	f383 8811 	msr	BASEPRI, r3
 800a638:	f3bf 8f6f 	isb	sy
 800a63c:	f3bf 8f4f 	dsb	sy
 800a640:	61fa      	str	r2, [r7, #28]
 800a642:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a644:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a646:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a64a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a64c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a64e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a650:	429a      	cmp	r2, r3
 800a652:	d302      	bcc.n	800a65a <xQueueGenericSendFromISR+0xc2>
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	2b02      	cmp	r3, #2
 800a658:	d12f      	bne.n	800a6ba <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a65a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a65c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a660:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a668:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a66a:	683a      	ldr	r2, [r7, #0]
 800a66c:	68b9      	ldr	r1, [r7, #8]
 800a66e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a670:	f000 f936 	bl	800a8e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a674:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a67c:	d112      	bne.n	800a6a4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a67e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a682:	2b00      	cmp	r3, #0
 800a684:	d016      	beq.n	800a6b4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a688:	3324      	adds	r3, #36	@ 0x24
 800a68a:	4618      	mov	r0, r3
 800a68c:	f000 ff52 	bl	800b534 <xTaskRemoveFromEventList>
 800a690:	4603      	mov	r3, r0
 800a692:	2b00      	cmp	r3, #0
 800a694:	d00e      	beq.n	800a6b4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d00b      	beq.n	800a6b4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2201      	movs	r2, #1
 800a6a0:	601a      	str	r2, [r3, #0]
 800a6a2:	e007      	b.n	800a6b4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a6a4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a6a8:	3301      	adds	r3, #1
 800a6aa:	b2db      	uxtb	r3, r3
 800a6ac:	b25a      	sxtb	r2, r3
 800a6ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a6b8:	e001      	b.n	800a6be <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6c0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a6c8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a6ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3740      	adds	r7, #64	@ 0x40
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}

0800a6d4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b08c      	sub	sp, #48	@ 0x30
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	60f8      	str	r0, [r7, #12]
 800a6dc:	60b9      	str	r1, [r7, #8]
 800a6de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a6e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d10b      	bne.n	800a706 <xQueueReceive+0x32>
	__asm volatile
 800a6ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6f2:	f383 8811 	msr	BASEPRI, r3
 800a6f6:	f3bf 8f6f 	isb	sy
 800a6fa:	f3bf 8f4f 	dsb	sy
 800a6fe:	623b      	str	r3, [r7, #32]
}
 800a700:	bf00      	nop
 800a702:	bf00      	nop
 800a704:	e7fd      	b.n	800a702 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d103      	bne.n	800a714 <xQueueReceive+0x40>
 800a70c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a70e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a710:	2b00      	cmp	r3, #0
 800a712:	d101      	bne.n	800a718 <xQueueReceive+0x44>
 800a714:	2301      	movs	r3, #1
 800a716:	e000      	b.n	800a71a <xQueueReceive+0x46>
 800a718:	2300      	movs	r3, #0
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d10b      	bne.n	800a736 <xQueueReceive+0x62>
	__asm volatile
 800a71e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a722:	f383 8811 	msr	BASEPRI, r3
 800a726:	f3bf 8f6f 	isb	sy
 800a72a:	f3bf 8f4f 	dsb	sy
 800a72e:	61fb      	str	r3, [r7, #28]
}
 800a730:	bf00      	nop
 800a732:	bf00      	nop
 800a734:	e7fd      	b.n	800a732 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a736:	f001 f8c3 	bl	800b8c0 <xTaskGetSchedulerState>
 800a73a:	4603      	mov	r3, r0
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d102      	bne.n	800a746 <xQueueReceive+0x72>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d101      	bne.n	800a74a <xQueueReceive+0x76>
 800a746:	2301      	movs	r3, #1
 800a748:	e000      	b.n	800a74c <xQueueReceive+0x78>
 800a74a:	2300      	movs	r3, #0
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d10b      	bne.n	800a768 <xQueueReceive+0x94>
	__asm volatile
 800a750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a754:	f383 8811 	msr	BASEPRI, r3
 800a758:	f3bf 8f6f 	isb	sy
 800a75c:	f3bf 8f4f 	dsb	sy
 800a760:	61bb      	str	r3, [r7, #24]
}
 800a762:	bf00      	nop
 800a764:	bf00      	nop
 800a766:	e7fd      	b.n	800a764 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a768:	f001 fe16 	bl	800c398 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a76c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a76e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a770:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a774:	2b00      	cmp	r3, #0
 800a776:	d01f      	beq.n	800a7b8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a778:	68b9      	ldr	r1, [r7, #8]
 800a77a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a77c:	f000 f91a 	bl	800a9b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a782:	1e5a      	subs	r2, r3, #1
 800a784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a786:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a78a:	691b      	ldr	r3, [r3, #16]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d00f      	beq.n	800a7b0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a792:	3310      	adds	r3, #16
 800a794:	4618      	mov	r0, r3
 800a796:	f000 fecd 	bl	800b534 <xTaskRemoveFromEventList>
 800a79a:	4603      	mov	r3, r0
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d007      	beq.n	800a7b0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a7a0:	4b3c      	ldr	r3, [pc, #240]	@ (800a894 <xQueueReceive+0x1c0>)
 800a7a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a7a6:	601a      	str	r2, [r3, #0]
 800a7a8:	f3bf 8f4f 	dsb	sy
 800a7ac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a7b0:	f001 fe24 	bl	800c3fc <vPortExitCritical>
				return pdPASS;
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	e069      	b.n	800a88c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d103      	bne.n	800a7c6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a7be:	f001 fe1d 	bl	800c3fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	e062      	b.n	800a88c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a7c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d106      	bne.n	800a7da <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a7cc:	f107 0310 	add.w	r3, r7, #16
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f000 ff13 	bl	800b5fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a7da:	f001 fe0f 	bl	800c3fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a7de:	f000 fc7b 	bl	800b0d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a7e2:	f001 fdd9 	bl	800c398 <vPortEnterCritical>
 800a7e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a7ec:	b25b      	sxtb	r3, r3
 800a7ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7f2:	d103      	bne.n	800a7fc <xQueueReceive+0x128>
 800a7f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a7fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a802:	b25b      	sxtb	r3, r3
 800a804:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a808:	d103      	bne.n	800a812 <xQueueReceive+0x13e>
 800a80a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a80c:	2200      	movs	r2, #0
 800a80e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a812:	f001 fdf3 	bl	800c3fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a816:	1d3a      	adds	r2, r7, #4
 800a818:	f107 0310 	add.w	r3, r7, #16
 800a81c:	4611      	mov	r1, r2
 800a81e:	4618      	mov	r0, r3
 800a820:	f000 ff02 	bl	800b628 <xTaskCheckForTimeOut>
 800a824:	4603      	mov	r3, r0
 800a826:	2b00      	cmp	r3, #0
 800a828:	d123      	bne.n	800a872 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a82a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a82c:	f000 f93a 	bl	800aaa4 <prvIsQueueEmpty>
 800a830:	4603      	mov	r3, r0
 800a832:	2b00      	cmp	r3, #0
 800a834:	d017      	beq.n	800a866 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a838:	3324      	adds	r3, #36	@ 0x24
 800a83a:	687a      	ldr	r2, [r7, #4]
 800a83c:	4611      	mov	r1, r2
 800a83e:	4618      	mov	r0, r3
 800a840:	f000 fe26 	bl	800b490 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a844:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a846:	f000 f8db 	bl	800aa00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a84a:	f000 fc53 	bl	800b0f4 <xTaskResumeAll>
 800a84e:	4603      	mov	r3, r0
 800a850:	2b00      	cmp	r3, #0
 800a852:	d189      	bne.n	800a768 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a854:	4b0f      	ldr	r3, [pc, #60]	@ (800a894 <xQueueReceive+0x1c0>)
 800a856:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a85a:	601a      	str	r2, [r3, #0]
 800a85c:	f3bf 8f4f 	dsb	sy
 800a860:	f3bf 8f6f 	isb	sy
 800a864:	e780      	b.n	800a768 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a866:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a868:	f000 f8ca 	bl	800aa00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a86c:	f000 fc42 	bl	800b0f4 <xTaskResumeAll>
 800a870:	e77a      	b.n	800a768 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a872:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a874:	f000 f8c4 	bl	800aa00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a878:	f000 fc3c 	bl	800b0f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a87c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a87e:	f000 f911 	bl	800aaa4 <prvIsQueueEmpty>
 800a882:	4603      	mov	r3, r0
 800a884:	2b00      	cmp	r3, #0
 800a886:	f43f af6f 	beq.w	800a768 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a88a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	3730      	adds	r7, #48	@ 0x30
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}
 800a894:	e000ed04 	.word	0xe000ed04

0800a898 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b084      	sub	sp, #16
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d10b      	bne.n	800a8c2 <vQueueDelete+0x2a>
	__asm volatile
 800a8aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8ae:	f383 8811 	msr	BASEPRI, r3
 800a8b2:	f3bf 8f6f 	isb	sy
 800a8b6:	f3bf 8f4f 	dsb	sy
 800a8ba:	60bb      	str	r3, [r7, #8]
}
 800a8bc:	bf00      	nop
 800a8be:	bf00      	nop
 800a8c0:	e7fd      	b.n	800a8be <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a8c2:	68f8      	ldr	r0, [r7, #12]
 800a8c4:	f000 f946 	bl	800ab54 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d102      	bne.n	800a8d8 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800a8d2:	68f8      	ldr	r0, [r7, #12]
 800a8d4:	f001 ff50 	bl	800c778 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a8d8:	bf00      	nop
 800a8da:	3710      	adds	r7, #16
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}

0800a8e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b086      	sub	sp, #24
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	60f8      	str	r0, [r7, #12]
 800a8e8:	60b9      	str	r1, [r7, #8]
 800a8ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d10d      	bne.n	800a91a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d14d      	bne.n	800a9a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	689b      	ldr	r3, [r3, #8]
 800a90a:	4618      	mov	r0, r3
 800a90c:	f000 fff6 	bl	800b8fc <xTaskPriorityDisinherit>
 800a910:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	2200      	movs	r2, #0
 800a916:	609a      	str	r2, [r3, #8]
 800a918:	e043      	b.n	800a9a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d119      	bne.n	800a954 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	6858      	ldr	r0, [r3, #4]
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a928:	461a      	mov	r2, r3
 800a92a:	68b9      	ldr	r1, [r7, #8]
 800a92c:	f002 f8e0 	bl	800caf0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	685a      	ldr	r2, [r3, #4]
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a938:	441a      	add	r2, r3
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	685a      	ldr	r2, [r3, #4]
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	689b      	ldr	r3, [r3, #8]
 800a946:	429a      	cmp	r2, r3
 800a948:	d32b      	bcc.n	800a9a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681a      	ldr	r2, [r3, #0]
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	605a      	str	r2, [r3, #4]
 800a952:	e026      	b.n	800a9a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	68d8      	ldr	r0, [r3, #12]
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a95c:	461a      	mov	r2, r3
 800a95e:	68b9      	ldr	r1, [r7, #8]
 800a960:	f002 f8c6 	bl	800caf0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	68da      	ldr	r2, [r3, #12]
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a96c:	425b      	negs	r3, r3
 800a96e:	441a      	add	r2, r3
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	68da      	ldr	r2, [r3, #12]
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	429a      	cmp	r2, r3
 800a97e:	d207      	bcs.n	800a990 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	689a      	ldr	r2, [r3, #8]
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a988:	425b      	negs	r3, r3
 800a98a:	441a      	add	r2, r3
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2b02      	cmp	r3, #2
 800a994:	d105      	bne.n	800a9a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d002      	beq.n	800a9a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	3b01      	subs	r3, #1
 800a9a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	1c5a      	adds	r2, r3, #1
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a9aa:	697b      	ldr	r3, [r7, #20]
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3718      	adds	r7, #24
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}

0800a9b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b082      	sub	sp, #8
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
 800a9bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d018      	beq.n	800a9f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	68da      	ldr	r2, [r3, #12]
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9ce:	441a      	add	r2, r3
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	68da      	ldr	r2, [r3, #12]
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	689b      	ldr	r3, [r3, #8]
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d303      	bcc.n	800a9e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681a      	ldr	r2, [r3, #0]
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	68d9      	ldr	r1, [r3, #12]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9f0:	461a      	mov	r2, r3
 800a9f2:	6838      	ldr	r0, [r7, #0]
 800a9f4:	f002 f87c 	bl	800caf0 <memcpy>
	}
}
 800a9f8:	bf00      	nop
 800a9fa:	3708      	adds	r7, #8
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}

0800aa00 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b084      	sub	sp, #16
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800aa08:	f001 fcc6 	bl	800c398 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aa12:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aa14:	e011      	b.n	800aa3a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d012      	beq.n	800aa44 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	3324      	adds	r3, #36	@ 0x24
 800aa22:	4618      	mov	r0, r3
 800aa24:	f000 fd86 	bl	800b534 <xTaskRemoveFromEventList>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d001      	beq.n	800aa32 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800aa2e:	f000 fe5f 	bl	800b6f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aa32:	7bfb      	ldrb	r3, [r7, #15]
 800aa34:	3b01      	subs	r3, #1
 800aa36:	b2db      	uxtb	r3, r3
 800aa38:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aa3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	dce9      	bgt.n	800aa16 <prvUnlockQueue+0x16>
 800aa42:	e000      	b.n	800aa46 <prvUnlockQueue+0x46>
					break;
 800aa44:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	22ff      	movs	r2, #255	@ 0xff
 800aa4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800aa4e:	f001 fcd5 	bl	800c3fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800aa52:	f001 fca1 	bl	800c398 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aa5c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aa5e:	e011      	b.n	800aa84 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	691b      	ldr	r3, [r3, #16]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d012      	beq.n	800aa8e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	3310      	adds	r3, #16
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f000 fd61 	bl	800b534 <xTaskRemoveFromEventList>
 800aa72:	4603      	mov	r3, r0
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d001      	beq.n	800aa7c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800aa78:	f000 fe3a 	bl	800b6f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800aa7c:	7bbb      	ldrb	r3, [r7, #14]
 800aa7e:	3b01      	subs	r3, #1
 800aa80:	b2db      	uxtb	r3, r3
 800aa82:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aa84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	dce9      	bgt.n	800aa60 <prvUnlockQueue+0x60>
 800aa8c:	e000      	b.n	800aa90 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aa8e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	22ff      	movs	r2, #255	@ 0xff
 800aa94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800aa98:	f001 fcb0 	bl	800c3fc <vPortExitCritical>
}
 800aa9c:	bf00      	nop
 800aa9e:	3710      	adds	r7, #16
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b084      	sub	sp, #16
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aaac:	f001 fc74 	bl	800c398 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d102      	bne.n	800aabe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800aab8:	2301      	movs	r3, #1
 800aaba:	60fb      	str	r3, [r7, #12]
 800aabc:	e001      	b.n	800aac2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800aabe:	2300      	movs	r3, #0
 800aac0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aac2:	f001 fc9b 	bl	800c3fc <vPortExitCritical>

	return xReturn;
 800aac6:	68fb      	ldr	r3, [r7, #12]
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3710      	adds	r7, #16
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}

0800aad0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b084      	sub	sp, #16
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aad8:	f001 fc5e 	bl	800c398 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d102      	bne.n	800aaee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800aae8:	2301      	movs	r3, #1
 800aaea:	60fb      	str	r3, [r7, #12]
 800aaec:	e001      	b.n	800aaf2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aaf2:	f001 fc83 	bl	800c3fc <vPortExitCritical>

	return xReturn;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	3710      	adds	r7, #16
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}

0800ab00 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ab00:	b480      	push	{r7}
 800ab02:	b085      	sub	sp, #20
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	60fb      	str	r3, [r7, #12]
 800ab0e:	e014      	b.n	800ab3a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ab10:	4a0f      	ldr	r2, [pc, #60]	@ (800ab50 <vQueueAddToRegistry+0x50>)
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d10b      	bne.n	800ab34 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ab1c:	490c      	ldr	r1, [pc, #48]	@ (800ab50 <vQueueAddToRegistry+0x50>)
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	683a      	ldr	r2, [r7, #0]
 800ab22:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ab26:	4a0a      	ldr	r2, [pc, #40]	@ (800ab50 <vQueueAddToRegistry+0x50>)
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	00db      	lsls	r3, r3, #3
 800ab2c:	4413      	add	r3, r2
 800ab2e:	687a      	ldr	r2, [r7, #4]
 800ab30:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ab32:	e006      	b.n	800ab42 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	3301      	adds	r3, #1
 800ab38:	60fb      	str	r3, [r7, #12]
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	2b07      	cmp	r3, #7
 800ab3e:	d9e7      	bls.n	800ab10 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ab40:	bf00      	nop
 800ab42:	bf00      	nop
 800ab44:	3714      	adds	r7, #20
 800ab46:	46bd      	mov	sp, r7
 800ab48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4c:	4770      	bx	lr
 800ab4e:	bf00      	nop
 800ab50:	20000adc 	.word	0x20000adc

0800ab54 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ab54:	b480      	push	{r7}
 800ab56:	b085      	sub	sp, #20
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	60fb      	str	r3, [r7, #12]
 800ab60:	e016      	b.n	800ab90 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ab62:	4a10      	ldr	r2, [pc, #64]	@ (800aba4 <vQueueUnregisterQueue+0x50>)
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	00db      	lsls	r3, r3, #3
 800ab68:	4413      	add	r3, r2
 800ab6a:	685b      	ldr	r3, [r3, #4]
 800ab6c:	687a      	ldr	r2, [r7, #4]
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	d10b      	bne.n	800ab8a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ab72:	4a0c      	ldr	r2, [pc, #48]	@ (800aba4 <vQueueUnregisterQueue+0x50>)
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	2100      	movs	r1, #0
 800ab78:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ab7c:	4a09      	ldr	r2, [pc, #36]	@ (800aba4 <vQueueUnregisterQueue+0x50>)
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	00db      	lsls	r3, r3, #3
 800ab82:	4413      	add	r3, r2
 800ab84:	2200      	movs	r2, #0
 800ab86:	605a      	str	r2, [r3, #4]
				break;
 800ab88:	e006      	b.n	800ab98 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	3301      	adds	r3, #1
 800ab8e:	60fb      	str	r3, [r7, #12]
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	2b07      	cmp	r3, #7
 800ab94:	d9e5      	bls.n	800ab62 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ab96:	bf00      	nop
 800ab98:	bf00      	nop
 800ab9a:	3714      	adds	r7, #20
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba2:	4770      	bx	lr
 800aba4:	20000adc 	.word	0x20000adc

0800aba8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b086      	sub	sp, #24
 800abac:	af00      	add	r7, sp, #0
 800abae:	60f8      	str	r0, [r7, #12]
 800abb0:	60b9      	str	r1, [r7, #8]
 800abb2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800abb8:	f001 fbee 	bl	800c398 <vPortEnterCritical>
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800abc2:	b25b      	sxtb	r3, r3
 800abc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abc8:	d103      	bne.n	800abd2 <vQueueWaitForMessageRestricted+0x2a>
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	2200      	movs	r2, #0
 800abce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800abd8:	b25b      	sxtb	r3, r3
 800abda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abde:	d103      	bne.n	800abe8 <vQueueWaitForMessageRestricted+0x40>
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	2200      	movs	r2, #0
 800abe4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800abe8:	f001 fc08 	bl	800c3fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d106      	bne.n	800ac02 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	3324      	adds	r3, #36	@ 0x24
 800abf8:	687a      	ldr	r2, [r7, #4]
 800abfa:	68b9      	ldr	r1, [r7, #8]
 800abfc:	4618      	mov	r0, r3
 800abfe:	f000 fc6d 	bl	800b4dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ac02:	6978      	ldr	r0, [r7, #20]
 800ac04:	f7ff fefc 	bl	800aa00 <prvUnlockQueue>
	}
 800ac08:	bf00      	nop
 800ac0a:	3718      	adds	r7, #24
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}

0800ac10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b08e      	sub	sp, #56	@ 0x38
 800ac14:	af04      	add	r7, sp, #16
 800ac16:	60f8      	str	r0, [r7, #12]
 800ac18:	60b9      	str	r1, [r7, #8]
 800ac1a:	607a      	str	r2, [r7, #4]
 800ac1c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ac1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d10b      	bne.n	800ac3c <xTaskCreateStatic+0x2c>
	__asm volatile
 800ac24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac28:	f383 8811 	msr	BASEPRI, r3
 800ac2c:	f3bf 8f6f 	isb	sy
 800ac30:	f3bf 8f4f 	dsb	sy
 800ac34:	623b      	str	r3, [r7, #32]
}
 800ac36:	bf00      	nop
 800ac38:	bf00      	nop
 800ac3a:	e7fd      	b.n	800ac38 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ac3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d10b      	bne.n	800ac5a <xTaskCreateStatic+0x4a>
	__asm volatile
 800ac42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac46:	f383 8811 	msr	BASEPRI, r3
 800ac4a:	f3bf 8f6f 	isb	sy
 800ac4e:	f3bf 8f4f 	dsb	sy
 800ac52:	61fb      	str	r3, [r7, #28]
}
 800ac54:	bf00      	nop
 800ac56:	bf00      	nop
 800ac58:	e7fd      	b.n	800ac56 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ac5a:	23a8      	movs	r3, #168	@ 0xa8
 800ac5c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	2ba8      	cmp	r3, #168	@ 0xa8
 800ac62:	d00b      	beq.n	800ac7c <xTaskCreateStatic+0x6c>
	__asm volatile
 800ac64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac68:	f383 8811 	msr	BASEPRI, r3
 800ac6c:	f3bf 8f6f 	isb	sy
 800ac70:	f3bf 8f4f 	dsb	sy
 800ac74:	61bb      	str	r3, [r7, #24]
}
 800ac76:	bf00      	nop
 800ac78:	bf00      	nop
 800ac7a:	e7fd      	b.n	800ac78 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ac7c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ac7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d01e      	beq.n	800acc2 <xTaskCreateStatic+0xb2>
 800ac84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d01b      	beq.n	800acc2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ac8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac8c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ac8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ac92:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ac94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac96:	2202      	movs	r2, #2
 800ac98:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	9303      	str	r3, [sp, #12]
 800aca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aca2:	9302      	str	r3, [sp, #8]
 800aca4:	f107 0314 	add.w	r3, r7, #20
 800aca8:	9301      	str	r3, [sp, #4]
 800acaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acac:	9300      	str	r3, [sp, #0]
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	687a      	ldr	r2, [r7, #4]
 800acb2:	68b9      	ldr	r1, [r7, #8]
 800acb4:	68f8      	ldr	r0, [r7, #12]
 800acb6:	f000 f851 	bl	800ad5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800acba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800acbc:	f000 f8f6 	bl	800aeac <prvAddNewTaskToReadyList>
 800acc0:	e001      	b.n	800acc6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800acc2:	2300      	movs	r3, #0
 800acc4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800acc6:	697b      	ldr	r3, [r7, #20]
	}
 800acc8:	4618      	mov	r0, r3
 800acca:	3728      	adds	r7, #40	@ 0x28
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}

0800acd0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b08c      	sub	sp, #48	@ 0x30
 800acd4:	af04      	add	r7, sp, #16
 800acd6:	60f8      	str	r0, [r7, #12]
 800acd8:	60b9      	str	r1, [r7, #8]
 800acda:	603b      	str	r3, [r7, #0]
 800acdc:	4613      	mov	r3, r2
 800acde:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ace0:	88fb      	ldrh	r3, [r7, #6]
 800ace2:	009b      	lsls	r3, r3, #2
 800ace4:	4618      	mov	r0, r3
 800ace6:	f001 fc79 	bl	800c5dc <pvPortMalloc>
 800acea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d00e      	beq.n	800ad10 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800acf2:	20a8      	movs	r0, #168	@ 0xa8
 800acf4:	f001 fc72 	bl	800c5dc <pvPortMalloc>
 800acf8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800acfa:	69fb      	ldr	r3, [r7, #28]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d003      	beq.n	800ad08 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ad00:	69fb      	ldr	r3, [r7, #28]
 800ad02:	697a      	ldr	r2, [r7, #20]
 800ad04:	631a      	str	r2, [r3, #48]	@ 0x30
 800ad06:	e005      	b.n	800ad14 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ad08:	6978      	ldr	r0, [r7, #20]
 800ad0a:	f001 fd35 	bl	800c778 <vPortFree>
 800ad0e:	e001      	b.n	800ad14 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ad10:	2300      	movs	r3, #0
 800ad12:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ad14:	69fb      	ldr	r3, [r7, #28]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d017      	beq.n	800ad4a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ad1a:	69fb      	ldr	r3, [r7, #28]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ad22:	88fa      	ldrh	r2, [r7, #6]
 800ad24:	2300      	movs	r3, #0
 800ad26:	9303      	str	r3, [sp, #12]
 800ad28:	69fb      	ldr	r3, [r7, #28]
 800ad2a:	9302      	str	r3, [sp, #8]
 800ad2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad2e:	9301      	str	r3, [sp, #4]
 800ad30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad32:	9300      	str	r3, [sp, #0]
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	68b9      	ldr	r1, [r7, #8]
 800ad38:	68f8      	ldr	r0, [r7, #12]
 800ad3a:	f000 f80f 	bl	800ad5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ad3e:	69f8      	ldr	r0, [r7, #28]
 800ad40:	f000 f8b4 	bl	800aeac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ad44:	2301      	movs	r3, #1
 800ad46:	61bb      	str	r3, [r7, #24]
 800ad48:	e002      	b.n	800ad50 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ad4a:	f04f 33ff 	mov.w	r3, #4294967295
 800ad4e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ad50:	69bb      	ldr	r3, [r7, #24]
	}
 800ad52:	4618      	mov	r0, r3
 800ad54:	3720      	adds	r7, #32
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}
	...

0800ad5c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b088      	sub	sp, #32
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	60f8      	str	r0, [r7, #12]
 800ad64:	60b9      	str	r1, [r7, #8]
 800ad66:	607a      	str	r2, [r7, #4]
 800ad68:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ad6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad6c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	009b      	lsls	r3, r3, #2
 800ad72:	461a      	mov	r2, r3
 800ad74:	21a5      	movs	r1, #165	@ 0xa5
 800ad76:	f001 fe37 	bl	800c9e8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ad7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ad84:	3b01      	subs	r3, #1
 800ad86:	009b      	lsls	r3, r3, #2
 800ad88:	4413      	add	r3, r2
 800ad8a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ad8c:	69bb      	ldr	r3, [r7, #24]
 800ad8e:	f023 0307 	bic.w	r3, r3, #7
 800ad92:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ad94:	69bb      	ldr	r3, [r7, #24]
 800ad96:	f003 0307 	and.w	r3, r3, #7
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d00b      	beq.n	800adb6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ad9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ada2:	f383 8811 	msr	BASEPRI, r3
 800ada6:	f3bf 8f6f 	isb	sy
 800adaa:	f3bf 8f4f 	dsb	sy
 800adae:	617b      	str	r3, [r7, #20]
}
 800adb0:	bf00      	nop
 800adb2:	bf00      	nop
 800adb4:	e7fd      	b.n	800adb2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d01f      	beq.n	800adfc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800adbc:	2300      	movs	r3, #0
 800adbe:	61fb      	str	r3, [r7, #28]
 800adc0:	e012      	b.n	800ade8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800adc2:	68ba      	ldr	r2, [r7, #8]
 800adc4:	69fb      	ldr	r3, [r7, #28]
 800adc6:	4413      	add	r3, r2
 800adc8:	7819      	ldrb	r1, [r3, #0]
 800adca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800adcc:	69fb      	ldr	r3, [r7, #28]
 800adce:	4413      	add	r3, r2
 800add0:	3334      	adds	r3, #52	@ 0x34
 800add2:	460a      	mov	r2, r1
 800add4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800add6:	68ba      	ldr	r2, [r7, #8]
 800add8:	69fb      	ldr	r3, [r7, #28]
 800adda:	4413      	add	r3, r2
 800addc:	781b      	ldrb	r3, [r3, #0]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d006      	beq.n	800adf0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ade2:	69fb      	ldr	r3, [r7, #28]
 800ade4:	3301      	adds	r3, #1
 800ade6:	61fb      	str	r3, [r7, #28]
 800ade8:	69fb      	ldr	r3, [r7, #28]
 800adea:	2b0f      	cmp	r3, #15
 800adec:	d9e9      	bls.n	800adc2 <prvInitialiseNewTask+0x66>
 800adee:	e000      	b.n	800adf2 <prvInitialiseNewTask+0x96>
			{
				break;
 800adf0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800adf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adf4:	2200      	movs	r2, #0
 800adf6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800adfa:	e003      	b.n	800ae04 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800adfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adfe:	2200      	movs	r2, #0
 800ae00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ae04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae06:	2b37      	cmp	r3, #55	@ 0x37
 800ae08:	d901      	bls.n	800ae0e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ae0a:	2337      	movs	r3, #55	@ 0x37
 800ae0c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ae0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ae12:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ae14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ae18:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ae1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ae20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae22:	3304      	adds	r3, #4
 800ae24:	4618      	mov	r0, r3
 800ae26:	f7ff f86d 	bl	8009f04 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ae2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae2c:	3318      	adds	r3, #24
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f7ff f868 	bl	8009f04 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ae34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae38:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae3c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ae40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae42:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ae44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae48:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ae4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ae52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae54:	2200      	movs	r2, #0
 800ae56:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ae5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae5c:	3354      	adds	r3, #84	@ 0x54
 800ae5e:	224c      	movs	r2, #76	@ 0x4c
 800ae60:	2100      	movs	r1, #0
 800ae62:	4618      	mov	r0, r3
 800ae64:	f001 fdc0 	bl	800c9e8 <memset>
 800ae68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae6a:	4a0d      	ldr	r2, [pc, #52]	@ (800aea0 <prvInitialiseNewTask+0x144>)
 800ae6c:	659a      	str	r2, [r3, #88]	@ 0x58
 800ae6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae70:	4a0c      	ldr	r2, [pc, #48]	@ (800aea4 <prvInitialiseNewTask+0x148>)
 800ae72:	65da      	str	r2, [r3, #92]	@ 0x5c
 800ae74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae76:	4a0c      	ldr	r2, [pc, #48]	@ (800aea8 <prvInitialiseNewTask+0x14c>)
 800ae78:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ae7a:	683a      	ldr	r2, [r7, #0]
 800ae7c:	68f9      	ldr	r1, [r7, #12]
 800ae7e:	69b8      	ldr	r0, [r7, #24]
 800ae80:	f001 f95a 	bl	800c138 <pxPortInitialiseStack>
 800ae84:	4602      	mov	r2, r0
 800ae86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae88:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ae8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d002      	beq.n	800ae96 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ae90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae96:	bf00      	nop
 800ae98:	3720      	adds	r7, #32
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}
 800ae9e:	bf00      	nop
 800aea0:	200028e4 	.word	0x200028e4
 800aea4:	2000294c 	.word	0x2000294c
 800aea8:	200029b4 	.word	0x200029b4

0800aeac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b082      	sub	sp, #8
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800aeb4:	f001 fa70 	bl	800c398 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800aeb8:	4b2d      	ldr	r3, [pc, #180]	@ (800af70 <prvAddNewTaskToReadyList+0xc4>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	3301      	adds	r3, #1
 800aebe:	4a2c      	ldr	r2, [pc, #176]	@ (800af70 <prvAddNewTaskToReadyList+0xc4>)
 800aec0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800aec2:	4b2c      	ldr	r3, [pc, #176]	@ (800af74 <prvAddNewTaskToReadyList+0xc8>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d109      	bne.n	800aede <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800aeca:	4a2a      	ldr	r2, [pc, #168]	@ (800af74 <prvAddNewTaskToReadyList+0xc8>)
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800aed0:	4b27      	ldr	r3, [pc, #156]	@ (800af70 <prvAddNewTaskToReadyList+0xc4>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	2b01      	cmp	r3, #1
 800aed6:	d110      	bne.n	800aefa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800aed8:	f000 fc2e 	bl	800b738 <prvInitialiseTaskLists>
 800aedc:	e00d      	b.n	800aefa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800aede:	4b26      	ldr	r3, [pc, #152]	@ (800af78 <prvAddNewTaskToReadyList+0xcc>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d109      	bne.n	800aefa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800aee6:	4b23      	ldr	r3, [pc, #140]	@ (800af74 <prvAddNewTaskToReadyList+0xc8>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aef0:	429a      	cmp	r2, r3
 800aef2:	d802      	bhi.n	800aefa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800aef4:	4a1f      	ldr	r2, [pc, #124]	@ (800af74 <prvAddNewTaskToReadyList+0xc8>)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800aefa:	4b20      	ldr	r3, [pc, #128]	@ (800af7c <prvAddNewTaskToReadyList+0xd0>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	3301      	adds	r3, #1
 800af00:	4a1e      	ldr	r2, [pc, #120]	@ (800af7c <prvAddNewTaskToReadyList+0xd0>)
 800af02:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800af04:	4b1d      	ldr	r3, [pc, #116]	@ (800af7c <prvAddNewTaskToReadyList+0xd0>)
 800af06:	681a      	ldr	r2, [r3, #0]
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af10:	4b1b      	ldr	r3, [pc, #108]	@ (800af80 <prvAddNewTaskToReadyList+0xd4>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	429a      	cmp	r2, r3
 800af16:	d903      	bls.n	800af20 <prvAddNewTaskToReadyList+0x74>
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af1c:	4a18      	ldr	r2, [pc, #96]	@ (800af80 <prvAddNewTaskToReadyList+0xd4>)
 800af1e:	6013      	str	r3, [r2, #0]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af24:	4613      	mov	r3, r2
 800af26:	009b      	lsls	r3, r3, #2
 800af28:	4413      	add	r3, r2
 800af2a:	009b      	lsls	r3, r3, #2
 800af2c:	4a15      	ldr	r2, [pc, #84]	@ (800af84 <prvAddNewTaskToReadyList+0xd8>)
 800af2e:	441a      	add	r2, r3
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	3304      	adds	r3, #4
 800af34:	4619      	mov	r1, r3
 800af36:	4610      	mov	r0, r2
 800af38:	f7fe fff1 	bl	8009f1e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800af3c:	f001 fa5e 	bl	800c3fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800af40:	4b0d      	ldr	r3, [pc, #52]	@ (800af78 <prvAddNewTaskToReadyList+0xcc>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d00e      	beq.n	800af66 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800af48:	4b0a      	ldr	r3, [pc, #40]	@ (800af74 <prvAddNewTaskToReadyList+0xc8>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af52:	429a      	cmp	r2, r3
 800af54:	d207      	bcs.n	800af66 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800af56:	4b0c      	ldr	r3, [pc, #48]	@ (800af88 <prvAddNewTaskToReadyList+0xdc>)
 800af58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af5c:	601a      	str	r2, [r3, #0]
 800af5e:	f3bf 8f4f 	dsb	sy
 800af62:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af66:	bf00      	nop
 800af68:	3708      	adds	r7, #8
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}
 800af6e:	bf00      	nop
 800af70:	20000ff0 	.word	0x20000ff0
 800af74:	20000b1c 	.word	0x20000b1c
 800af78:	20000ffc 	.word	0x20000ffc
 800af7c:	2000100c 	.word	0x2000100c
 800af80:	20000ff8 	.word	0x20000ff8
 800af84:	20000b20 	.word	0x20000b20
 800af88:	e000ed04 	.word	0xe000ed04

0800af8c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b084      	sub	sp, #16
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800af94:	2300      	movs	r3, #0
 800af96:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d018      	beq.n	800afd0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800af9e:	4b14      	ldr	r3, [pc, #80]	@ (800aff0 <vTaskDelay+0x64>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d00b      	beq.n	800afbe <vTaskDelay+0x32>
	__asm volatile
 800afa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afaa:	f383 8811 	msr	BASEPRI, r3
 800afae:	f3bf 8f6f 	isb	sy
 800afb2:	f3bf 8f4f 	dsb	sy
 800afb6:	60bb      	str	r3, [r7, #8]
}
 800afb8:	bf00      	nop
 800afba:	bf00      	nop
 800afbc:	e7fd      	b.n	800afba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800afbe:	f000 f88b 	bl	800b0d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800afc2:	2100      	movs	r1, #0
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f000 fd09 	bl	800b9dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800afca:	f000 f893 	bl	800b0f4 <xTaskResumeAll>
 800afce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d107      	bne.n	800afe6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800afd6:	4b07      	ldr	r3, [pc, #28]	@ (800aff4 <vTaskDelay+0x68>)
 800afd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800afdc:	601a      	str	r2, [r3, #0]
 800afde:	f3bf 8f4f 	dsb	sy
 800afe2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800afe6:	bf00      	nop
 800afe8:	3710      	adds	r7, #16
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
 800afee:	bf00      	nop
 800aff0:	20001018 	.word	0x20001018
 800aff4:	e000ed04 	.word	0xe000ed04

0800aff8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b08a      	sub	sp, #40	@ 0x28
 800affc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800affe:	2300      	movs	r3, #0
 800b000:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b002:	2300      	movs	r3, #0
 800b004:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b006:	463a      	mov	r2, r7
 800b008:	1d39      	adds	r1, r7, #4
 800b00a:	f107 0308 	add.w	r3, r7, #8
 800b00e:	4618      	mov	r0, r3
 800b010:	f7fe ff24 	bl	8009e5c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b014:	6839      	ldr	r1, [r7, #0]
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	68ba      	ldr	r2, [r7, #8]
 800b01a:	9202      	str	r2, [sp, #8]
 800b01c:	9301      	str	r3, [sp, #4]
 800b01e:	2300      	movs	r3, #0
 800b020:	9300      	str	r3, [sp, #0]
 800b022:	2300      	movs	r3, #0
 800b024:	460a      	mov	r2, r1
 800b026:	4924      	ldr	r1, [pc, #144]	@ (800b0b8 <vTaskStartScheduler+0xc0>)
 800b028:	4824      	ldr	r0, [pc, #144]	@ (800b0bc <vTaskStartScheduler+0xc4>)
 800b02a:	f7ff fdf1 	bl	800ac10 <xTaskCreateStatic>
 800b02e:	4603      	mov	r3, r0
 800b030:	4a23      	ldr	r2, [pc, #140]	@ (800b0c0 <vTaskStartScheduler+0xc8>)
 800b032:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b034:	4b22      	ldr	r3, [pc, #136]	@ (800b0c0 <vTaskStartScheduler+0xc8>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d002      	beq.n	800b042 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b03c:	2301      	movs	r3, #1
 800b03e:	617b      	str	r3, [r7, #20]
 800b040:	e001      	b.n	800b046 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b042:	2300      	movs	r3, #0
 800b044:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b046:	697b      	ldr	r3, [r7, #20]
 800b048:	2b01      	cmp	r3, #1
 800b04a:	d102      	bne.n	800b052 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b04c:	f000 fd1a 	bl	800ba84 <xTimerCreateTimerTask>
 800b050:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b052:	697b      	ldr	r3, [r7, #20]
 800b054:	2b01      	cmp	r3, #1
 800b056:	d11b      	bne.n	800b090 <vTaskStartScheduler+0x98>
	__asm volatile
 800b058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b05c:	f383 8811 	msr	BASEPRI, r3
 800b060:	f3bf 8f6f 	isb	sy
 800b064:	f3bf 8f4f 	dsb	sy
 800b068:	613b      	str	r3, [r7, #16]
}
 800b06a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b06c:	4b15      	ldr	r3, [pc, #84]	@ (800b0c4 <vTaskStartScheduler+0xcc>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	3354      	adds	r3, #84	@ 0x54
 800b072:	4a15      	ldr	r2, [pc, #84]	@ (800b0c8 <vTaskStartScheduler+0xd0>)
 800b074:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b076:	4b15      	ldr	r3, [pc, #84]	@ (800b0cc <vTaskStartScheduler+0xd4>)
 800b078:	f04f 32ff 	mov.w	r2, #4294967295
 800b07c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b07e:	4b14      	ldr	r3, [pc, #80]	@ (800b0d0 <vTaskStartScheduler+0xd8>)
 800b080:	2201      	movs	r2, #1
 800b082:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b084:	4b13      	ldr	r3, [pc, #76]	@ (800b0d4 <vTaskStartScheduler+0xdc>)
 800b086:	2200      	movs	r2, #0
 800b088:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b08a:	f001 f8e1 	bl	800c250 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b08e:	e00f      	b.n	800b0b0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b096:	d10b      	bne.n	800b0b0 <vTaskStartScheduler+0xb8>
	__asm volatile
 800b098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b09c:	f383 8811 	msr	BASEPRI, r3
 800b0a0:	f3bf 8f6f 	isb	sy
 800b0a4:	f3bf 8f4f 	dsb	sy
 800b0a8:	60fb      	str	r3, [r7, #12]
}
 800b0aa:	bf00      	nop
 800b0ac:	bf00      	nop
 800b0ae:	e7fd      	b.n	800b0ac <vTaskStartScheduler+0xb4>
}
 800b0b0:	bf00      	nop
 800b0b2:	3718      	adds	r7, #24
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}
 800b0b8:	0800cc4c 	.word	0x0800cc4c
 800b0bc:	0800b709 	.word	0x0800b709
 800b0c0:	20001014 	.word	0x20001014
 800b0c4:	20000b1c 	.word	0x20000b1c
 800b0c8:	20000010 	.word	0x20000010
 800b0cc:	20001010 	.word	0x20001010
 800b0d0:	20000ffc 	.word	0x20000ffc
 800b0d4:	20000ff4 	.word	0x20000ff4

0800b0d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b0d8:	b480      	push	{r7}
 800b0da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b0dc:	4b04      	ldr	r3, [pc, #16]	@ (800b0f0 <vTaskSuspendAll+0x18>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	3301      	adds	r3, #1
 800b0e2:	4a03      	ldr	r2, [pc, #12]	@ (800b0f0 <vTaskSuspendAll+0x18>)
 800b0e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b0e6:	bf00      	nop
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ee:	4770      	bx	lr
 800b0f0:	20001018 	.word	0x20001018

0800b0f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b084      	sub	sp, #16
 800b0f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b0fe:	2300      	movs	r3, #0
 800b100:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b102:	4b42      	ldr	r3, [pc, #264]	@ (800b20c <xTaskResumeAll+0x118>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d10b      	bne.n	800b122 <xTaskResumeAll+0x2e>
	__asm volatile
 800b10a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b10e:	f383 8811 	msr	BASEPRI, r3
 800b112:	f3bf 8f6f 	isb	sy
 800b116:	f3bf 8f4f 	dsb	sy
 800b11a:	603b      	str	r3, [r7, #0]
}
 800b11c:	bf00      	nop
 800b11e:	bf00      	nop
 800b120:	e7fd      	b.n	800b11e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b122:	f001 f939 	bl	800c398 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b126:	4b39      	ldr	r3, [pc, #228]	@ (800b20c <xTaskResumeAll+0x118>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	3b01      	subs	r3, #1
 800b12c:	4a37      	ldr	r2, [pc, #220]	@ (800b20c <xTaskResumeAll+0x118>)
 800b12e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b130:	4b36      	ldr	r3, [pc, #216]	@ (800b20c <xTaskResumeAll+0x118>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d162      	bne.n	800b1fe <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b138:	4b35      	ldr	r3, [pc, #212]	@ (800b210 <xTaskResumeAll+0x11c>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d05e      	beq.n	800b1fe <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b140:	e02f      	b.n	800b1a2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b142:	4b34      	ldr	r3, [pc, #208]	@ (800b214 <xTaskResumeAll+0x120>)
 800b144:	68db      	ldr	r3, [r3, #12]
 800b146:	68db      	ldr	r3, [r3, #12]
 800b148:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	3318      	adds	r3, #24
 800b14e:	4618      	mov	r0, r3
 800b150:	f7fe ff42 	bl	8009fd8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	3304      	adds	r3, #4
 800b158:	4618      	mov	r0, r3
 800b15a:	f7fe ff3d 	bl	8009fd8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b162:	4b2d      	ldr	r3, [pc, #180]	@ (800b218 <xTaskResumeAll+0x124>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	429a      	cmp	r2, r3
 800b168:	d903      	bls.n	800b172 <xTaskResumeAll+0x7e>
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b16e:	4a2a      	ldr	r2, [pc, #168]	@ (800b218 <xTaskResumeAll+0x124>)
 800b170:	6013      	str	r3, [r2, #0]
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b176:	4613      	mov	r3, r2
 800b178:	009b      	lsls	r3, r3, #2
 800b17a:	4413      	add	r3, r2
 800b17c:	009b      	lsls	r3, r3, #2
 800b17e:	4a27      	ldr	r2, [pc, #156]	@ (800b21c <xTaskResumeAll+0x128>)
 800b180:	441a      	add	r2, r3
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	3304      	adds	r3, #4
 800b186:	4619      	mov	r1, r3
 800b188:	4610      	mov	r0, r2
 800b18a:	f7fe fec8 	bl	8009f1e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b192:	4b23      	ldr	r3, [pc, #140]	@ (800b220 <xTaskResumeAll+0x12c>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b198:	429a      	cmp	r2, r3
 800b19a:	d302      	bcc.n	800b1a2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b19c:	4b21      	ldr	r3, [pc, #132]	@ (800b224 <xTaskResumeAll+0x130>)
 800b19e:	2201      	movs	r2, #1
 800b1a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b1a2:	4b1c      	ldr	r3, [pc, #112]	@ (800b214 <xTaskResumeAll+0x120>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d1cb      	bne.n	800b142 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d001      	beq.n	800b1b4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b1b0:	f000 fb66 	bl	800b880 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b1b4:	4b1c      	ldr	r3, [pc, #112]	@ (800b228 <xTaskResumeAll+0x134>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d010      	beq.n	800b1e2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b1c0:	f000 f846 	bl	800b250 <xTaskIncrementTick>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d002      	beq.n	800b1d0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b1ca:	4b16      	ldr	r3, [pc, #88]	@ (800b224 <xTaskResumeAll+0x130>)
 800b1cc:	2201      	movs	r2, #1
 800b1ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	3b01      	subs	r3, #1
 800b1d4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d1f1      	bne.n	800b1c0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b1dc:	4b12      	ldr	r3, [pc, #72]	@ (800b228 <xTaskResumeAll+0x134>)
 800b1de:	2200      	movs	r2, #0
 800b1e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b1e2:	4b10      	ldr	r3, [pc, #64]	@ (800b224 <xTaskResumeAll+0x130>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d009      	beq.n	800b1fe <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b1ee:	4b0f      	ldr	r3, [pc, #60]	@ (800b22c <xTaskResumeAll+0x138>)
 800b1f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1f4:	601a      	str	r2, [r3, #0]
 800b1f6:	f3bf 8f4f 	dsb	sy
 800b1fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b1fe:	f001 f8fd 	bl	800c3fc <vPortExitCritical>

	return xAlreadyYielded;
 800b202:	68bb      	ldr	r3, [r7, #8]
}
 800b204:	4618      	mov	r0, r3
 800b206:	3710      	adds	r7, #16
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}
 800b20c:	20001018 	.word	0x20001018
 800b210:	20000ff0 	.word	0x20000ff0
 800b214:	20000fb0 	.word	0x20000fb0
 800b218:	20000ff8 	.word	0x20000ff8
 800b21c:	20000b20 	.word	0x20000b20
 800b220:	20000b1c 	.word	0x20000b1c
 800b224:	20001004 	.word	0x20001004
 800b228:	20001000 	.word	0x20001000
 800b22c:	e000ed04 	.word	0xe000ed04

0800b230 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b230:	b480      	push	{r7}
 800b232:	b083      	sub	sp, #12
 800b234:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b236:	4b05      	ldr	r3, [pc, #20]	@ (800b24c <xTaskGetTickCount+0x1c>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b23c:	687b      	ldr	r3, [r7, #4]
}
 800b23e:	4618      	mov	r0, r3
 800b240:	370c      	adds	r7, #12
 800b242:	46bd      	mov	sp, r7
 800b244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b248:	4770      	bx	lr
 800b24a:	bf00      	nop
 800b24c:	20000ff4 	.word	0x20000ff4

0800b250 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b086      	sub	sp, #24
 800b254:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b256:	2300      	movs	r3, #0
 800b258:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b25a:	4b4f      	ldr	r3, [pc, #316]	@ (800b398 <xTaskIncrementTick+0x148>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	f040 8090 	bne.w	800b384 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b264:	4b4d      	ldr	r3, [pc, #308]	@ (800b39c <xTaskIncrementTick+0x14c>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	3301      	adds	r3, #1
 800b26a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b26c:	4a4b      	ldr	r2, [pc, #300]	@ (800b39c <xTaskIncrementTick+0x14c>)
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b272:	693b      	ldr	r3, [r7, #16]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d121      	bne.n	800b2bc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b278:	4b49      	ldr	r3, [pc, #292]	@ (800b3a0 <xTaskIncrementTick+0x150>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d00b      	beq.n	800b29a <xTaskIncrementTick+0x4a>
	__asm volatile
 800b282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b286:	f383 8811 	msr	BASEPRI, r3
 800b28a:	f3bf 8f6f 	isb	sy
 800b28e:	f3bf 8f4f 	dsb	sy
 800b292:	603b      	str	r3, [r7, #0]
}
 800b294:	bf00      	nop
 800b296:	bf00      	nop
 800b298:	e7fd      	b.n	800b296 <xTaskIncrementTick+0x46>
 800b29a:	4b41      	ldr	r3, [pc, #260]	@ (800b3a0 <xTaskIncrementTick+0x150>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	60fb      	str	r3, [r7, #12]
 800b2a0:	4b40      	ldr	r3, [pc, #256]	@ (800b3a4 <xTaskIncrementTick+0x154>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	4a3e      	ldr	r2, [pc, #248]	@ (800b3a0 <xTaskIncrementTick+0x150>)
 800b2a6:	6013      	str	r3, [r2, #0]
 800b2a8:	4a3e      	ldr	r2, [pc, #248]	@ (800b3a4 <xTaskIncrementTick+0x154>)
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	6013      	str	r3, [r2, #0]
 800b2ae:	4b3e      	ldr	r3, [pc, #248]	@ (800b3a8 <xTaskIncrementTick+0x158>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	3301      	adds	r3, #1
 800b2b4:	4a3c      	ldr	r2, [pc, #240]	@ (800b3a8 <xTaskIncrementTick+0x158>)
 800b2b6:	6013      	str	r3, [r2, #0]
 800b2b8:	f000 fae2 	bl	800b880 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b2bc:	4b3b      	ldr	r3, [pc, #236]	@ (800b3ac <xTaskIncrementTick+0x15c>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	693a      	ldr	r2, [r7, #16]
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	d349      	bcc.n	800b35a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b2c6:	4b36      	ldr	r3, [pc, #216]	@ (800b3a0 <xTaskIncrementTick+0x150>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d104      	bne.n	800b2da <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2d0:	4b36      	ldr	r3, [pc, #216]	@ (800b3ac <xTaskIncrementTick+0x15c>)
 800b2d2:	f04f 32ff 	mov.w	r2, #4294967295
 800b2d6:	601a      	str	r2, [r3, #0]
					break;
 800b2d8:	e03f      	b.n	800b35a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2da:	4b31      	ldr	r3, [pc, #196]	@ (800b3a0 <xTaskIncrementTick+0x150>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	68db      	ldr	r3, [r3, #12]
 800b2e0:	68db      	ldr	r3, [r3, #12]
 800b2e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	685b      	ldr	r3, [r3, #4]
 800b2e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b2ea:	693a      	ldr	r2, [r7, #16]
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	429a      	cmp	r2, r3
 800b2f0:	d203      	bcs.n	800b2fa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b2f2:	4a2e      	ldr	r2, [pc, #184]	@ (800b3ac <xTaskIncrementTick+0x15c>)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b2f8:	e02f      	b.n	800b35a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	3304      	adds	r3, #4
 800b2fe:	4618      	mov	r0, r3
 800b300:	f7fe fe6a 	bl	8009fd8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d004      	beq.n	800b316 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	3318      	adds	r3, #24
 800b310:	4618      	mov	r0, r3
 800b312:	f7fe fe61 	bl	8009fd8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b31a:	4b25      	ldr	r3, [pc, #148]	@ (800b3b0 <xTaskIncrementTick+0x160>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	429a      	cmp	r2, r3
 800b320:	d903      	bls.n	800b32a <xTaskIncrementTick+0xda>
 800b322:	68bb      	ldr	r3, [r7, #8]
 800b324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b326:	4a22      	ldr	r2, [pc, #136]	@ (800b3b0 <xTaskIncrementTick+0x160>)
 800b328:	6013      	str	r3, [r2, #0]
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b32e:	4613      	mov	r3, r2
 800b330:	009b      	lsls	r3, r3, #2
 800b332:	4413      	add	r3, r2
 800b334:	009b      	lsls	r3, r3, #2
 800b336:	4a1f      	ldr	r2, [pc, #124]	@ (800b3b4 <xTaskIncrementTick+0x164>)
 800b338:	441a      	add	r2, r3
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	3304      	adds	r3, #4
 800b33e:	4619      	mov	r1, r3
 800b340:	4610      	mov	r0, r2
 800b342:	f7fe fdec 	bl	8009f1e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b34a:	4b1b      	ldr	r3, [pc, #108]	@ (800b3b8 <xTaskIncrementTick+0x168>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b350:	429a      	cmp	r2, r3
 800b352:	d3b8      	bcc.n	800b2c6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b354:	2301      	movs	r3, #1
 800b356:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b358:	e7b5      	b.n	800b2c6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b35a:	4b17      	ldr	r3, [pc, #92]	@ (800b3b8 <xTaskIncrementTick+0x168>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b360:	4914      	ldr	r1, [pc, #80]	@ (800b3b4 <xTaskIncrementTick+0x164>)
 800b362:	4613      	mov	r3, r2
 800b364:	009b      	lsls	r3, r3, #2
 800b366:	4413      	add	r3, r2
 800b368:	009b      	lsls	r3, r3, #2
 800b36a:	440b      	add	r3, r1
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	2b01      	cmp	r3, #1
 800b370:	d901      	bls.n	800b376 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b372:	2301      	movs	r3, #1
 800b374:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b376:	4b11      	ldr	r3, [pc, #68]	@ (800b3bc <xTaskIncrementTick+0x16c>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d007      	beq.n	800b38e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b37e:	2301      	movs	r3, #1
 800b380:	617b      	str	r3, [r7, #20]
 800b382:	e004      	b.n	800b38e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b384:	4b0e      	ldr	r3, [pc, #56]	@ (800b3c0 <xTaskIncrementTick+0x170>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	3301      	adds	r3, #1
 800b38a:	4a0d      	ldr	r2, [pc, #52]	@ (800b3c0 <xTaskIncrementTick+0x170>)
 800b38c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b38e:	697b      	ldr	r3, [r7, #20]
}
 800b390:	4618      	mov	r0, r3
 800b392:	3718      	adds	r7, #24
 800b394:	46bd      	mov	sp, r7
 800b396:	bd80      	pop	{r7, pc}
 800b398:	20001018 	.word	0x20001018
 800b39c:	20000ff4 	.word	0x20000ff4
 800b3a0:	20000fa8 	.word	0x20000fa8
 800b3a4:	20000fac 	.word	0x20000fac
 800b3a8:	20001008 	.word	0x20001008
 800b3ac:	20001010 	.word	0x20001010
 800b3b0:	20000ff8 	.word	0x20000ff8
 800b3b4:	20000b20 	.word	0x20000b20
 800b3b8:	20000b1c 	.word	0x20000b1c
 800b3bc:	20001004 	.word	0x20001004
 800b3c0:	20001000 	.word	0x20001000

0800b3c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b085      	sub	sp, #20
 800b3c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b3ca:	4b2b      	ldr	r3, [pc, #172]	@ (800b478 <vTaskSwitchContext+0xb4>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d003      	beq.n	800b3da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b3d2:	4b2a      	ldr	r3, [pc, #168]	@ (800b47c <vTaskSwitchContext+0xb8>)
 800b3d4:	2201      	movs	r2, #1
 800b3d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b3d8:	e047      	b.n	800b46a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800b3da:	4b28      	ldr	r3, [pc, #160]	@ (800b47c <vTaskSwitchContext+0xb8>)
 800b3dc:	2200      	movs	r2, #0
 800b3de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3e0:	4b27      	ldr	r3, [pc, #156]	@ (800b480 <vTaskSwitchContext+0xbc>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	60fb      	str	r3, [r7, #12]
 800b3e6:	e011      	b.n	800b40c <vTaskSwitchContext+0x48>
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d10b      	bne.n	800b406 <vTaskSwitchContext+0x42>
	__asm volatile
 800b3ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3f2:	f383 8811 	msr	BASEPRI, r3
 800b3f6:	f3bf 8f6f 	isb	sy
 800b3fa:	f3bf 8f4f 	dsb	sy
 800b3fe:	607b      	str	r3, [r7, #4]
}
 800b400:	bf00      	nop
 800b402:	bf00      	nop
 800b404:	e7fd      	b.n	800b402 <vTaskSwitchContext+0x3e>
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	3b01      	subs	r3, #1
 800b40a:	60fb      	str	r3, [r7, #12]
 800b40c:	491d      	ldr	r1, [pc, #116]	@ (800b484 <vTaskSwitchContext+0xc0>)
 800b40e:	68fa      	ldr	r2, [r7, #12]
 800b410:	4613      	mov	r3, r2
 800b412:	009b      	lsls	r3, r3, #2
 800b414:	4413      	add	r3, r2
 800b416:	009b      	lsls	r3, r3, #2
 800b418:	440b      	add	r3, r1
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d0e3      	beq.n	800b3e8 <vTaskSwitchContext+0x24>
 800b420:	68fa      	ldr	r2, [r7, #12]
 800b422:	4613      	mov	r3, r2
 800b424:	009b      	lsls	r3, r3, #2
 800b426:	4413      	add	r3, r2
 800b428:	009b      	lsls	r3, r3, #2
 800b42a:	4a16      	ldr	r2, [pc, #88]	@ (800b484 <vTaskSwitchContext+0xc0>)
 800b42c:	4413      	add	r3, r2
 800b42e:	60bb      	str	r3, [r7, #8]
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	685b      	ldr	r3, [r3, #4]
 800b434:	685a      	ldr	r2, [r3, #4]
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	605a      	str	r2, [r3, #4]
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	685a      	ldr	r2, [r3, #4]
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	3308      	adds	r3, #8
 800b442:	429a      	cmp	r2, r3
 800b444:	d104      	bne.n	800b450 <vTaskSwitchContext+0x8c>
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	685b      	ldr	r3, [r3, #4]
 800b44a:	685a      	ldr	r2, [r3, #4]
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	605a      	str	r2, [r3, #4]
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	685b      	ldr	r3, [r3, #4]
 800b454:	68db      	ldr	r3, [r3, #12]
 800b456:	4a0c      	ldr	r2, [pc, #48]	@ (800b488 <vTaskSwitchContext+0xc4>)
 800b458:	6013      	str	r3, [r2, #0]
 800b45a:	4a09      	ldr	r2, [pc, #36]	@ (800b480 <vTaskSwitchContext+0xbc>)
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b460:	4b09      	ldr	r3, [pc, #36]	@ (800b488 <vTaskSwitchContext+0xc4>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	3354      	adds	r3, #84	@ 0x54
 800b466:	4a09      	ldr	r2, [pc, #36]	@ (800b48c <vTaskSwitchContext+0xc8>)
 800b468:	6013      	str	r3, [r2, #0]
}
 800b46a:	bf00      	nop
 800b46c:	3714      	adds	r7, #20
 800b46e:	46bd      	mov	sp, r7
 800b470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b474:	4770      	bx	lr
 800b476:	bf00      	nop
 800b478:	20001018 	.word	0x20001018
 800b47c:	20001004 	.word	0x20001004
 800b480:	20000ff8 	.word	0x20000ff8
 800b484:	20000b20 	.word	0x20000b20
 800b488:	20000b1c 	.word	0x20000b1c
 800b48c:	20000010 	.word	0x20000010

0800b490 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b084      	sub	sp, #16
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d10b      	bne.n	800b4b8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b4a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4a4:	f383 8811 	msr	BASEPRI, r3
 800b4a8:	f3bf 8f6f 	isb	sy
 800b4ac:	f3bf 8f4f 	dsb	sy
 800b4b0:	60fb      	str	r3, [r7, #12]
}
 800b4b2:	bf00      	nop
 800b4b4:	bf00      	nop
 800b4b6:	e7fd      	b.n	800b4b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b4b8:	4b07      	ldr	r3, [pc, #28]	@ (800b4d8 <vTaskPlaceOnEventList+0x48>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	3318      	adds	r3, #24
 800b4be:	4619      	mov	r1, r3
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f7fe fd50 	bl	8009f66 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b4c6:	2101      	movs	r1, #1
 800b4c8:	6838      	ldr	r0, [r7, #0]
 800b4ca:	f000 fa87 	bl	800b9dc <prvAddCurrentTaskToDelayedList>
}
 800b4ce:	bf00      	nop
 800b4d0:	3710      	adds	r7, #16
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}
 800b4d6:	bf00      	nop
 800b4d8:	20000b1c 	.word	0x20000b1c

0800b4dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b086      	sub	sp, #24
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	60f8      	str	r0, [r7, #12]
 800b4e4:	60b9      	str	r1, [r7, #8]
 800b4e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d10b      	bne.n	800b506 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b4ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4f2:	f383 8811 	msr	BASEPRI, r3
 800b4f6:	f3bf 8f6f 	isb	sy
 800b4fa:	f3bf 8f4f 	dsb	sy
 800b4fe:	617b      	str	r3, [r7, #20]
}
 800b500:	bf00      	nop
 800b502:	bf00      	nop
 800b504:	e7fd      	b.n	800b502 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b506:	4b0a      	ldr	r3, [pc, #40]	@ (800b530 <vTaskPlaceOnEventListRestricted+0x54>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	3318      	adds	r3, #24
 800b50c:	4619      	mov	r1, r3
 800b50e:	68f8      	ldr	r0, [r7, #12]
 800b510:	f7fe fd05 	bl	8009f1e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d002      	beq.n	800b520 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b51a:	f04f 33ff 	mov.w	r3, #4294967295
 800b51e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b520:	6879      	ldr	r1, [r7, #4]
 800b522:	68b8      	ldr	r0, [r7, #8]
 800b524:	f000 fa5a 	bl	800b9dc <prvAddCurrentTaskToDelayedList>
	}
 800b528:	bf00      	nop
 800b52a:	3718      	adds	r7, #24
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}
 800b530:	20000b1c 	.word	0x20000b1c

0800b534 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b086      	sub	sp, #24
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	68db      	ldr	r3, [r3, #12]
 800b540:	68db      	ldr	r3, [r3, #12]
 800b542:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d10b      	bne.n	800b562 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b54a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b54e:	f383 8811 	msr	BASEPRI, r3
 800b552:	f3bf 8f6f 	isb	sy
 800b556:	f3bf 8f4f 	dsb	sy
 800b55a:	60fb      	str	r3, [r7, #12]
}
 800b55c:	bf00      	nop
 800b55e:	bf00      	nop
 800b560:	e7fd      	b.n	800b55e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b562:	693b      	ldr	r3, [r7, #16]
 800b564:	3318      	adds	r3, #24
 800b566:	4618      	mov	r0, r3
 800b568:	f7fe fd36 	bl	8009fd8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b56c:	4b1d      	ldr	r3, [pc, #116]	@ (800b5e4 <xTaskRemoveFromEventList+0xb0>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d11d      	bne.n	800b5b0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	3304      	adds	r3, #4
 800b578:	4618      	mov	r0, r3
 800b57a:	f7fe fd2d 	bl	8009fd8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b582:	4b19      	ldr	r3, [pc, #100]	@ (800b5e8 <xTaskRemoveFromEventList+0xb4>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	429a      	cmp	r2, r3
 800b588:	d903      	bls.n	800b592 <xTaskRemoveFromEventList+0x5e>
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b58e:	4a16      	ldr	r2, [pc, #88]	@ (800b5e8 <xTaskRemoveFromEventList+0xb4>)
 800b590:	6013      	str	r3, [r2, #0]
 800b592:	693b      	ldr	r3, [r7, #16]
 800b594:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b596:	4613      	mov	r3, r2
 800b598:	009b      	lsls	r3, r3, #2
 800b59a:	4413      	add	r3, r2
 800b59c:	009b      	lsls	r3, r3, #2
 800b59e:	4a13      	ldr	r2, [pc, #76]	@ (800b5ec <xTaskRemoveFromEventList+0xb8>)
 800b5a0:	441a      	add	r2, r3
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	3304      	adds	r3, #4
 800b5a6:	4619      	mov	r1, r3
 800b5a8:	4610      	mov	r0, r2
 800b5aa:	f7fe fcb8 	bl	8009f1e <vListInsertEnd>
 800b5ae:	e005      	b.n	800b5bc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	3318      	adds	r3, #24
 800b5b4:	4619      	mov	r1, r3
 800b5b6:	480e      	ldr	r0, [pc, #56]	@ (800b5f0 <xTaskRemoveFromEventList+0xbc>)
 800b5b8:	f7fe fcb1 	bl	8009f1e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5c0:	4b0c      	ldr	r3, [pc, #48]	@ (800b5f4 <xTaskRemoveFromEventList+0xc0>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	d905      	bls.n	800b5d6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b5ce:	4b0a      	ldr	r3, [pc, #40]	@ (800b5f8 <xTaskRemoveFromEventList+0xc4>)
 800b5d0:	2201      	movs	r2, #1
 800b5d2:	601a      	str	r2, [r3, #0]
 800b5d4:	e001      	b.n	800b5da <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b5da:	697b      	ldr	r3, [r7, #20]
}
 800b5dc:	4618      	mov	r0, r3
 800b5de:	3718      	adds	r7, #24
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}
 800b5e4:	20001018 	.word	0x20001018
 800b5e8:	20000ff8 	.word	0x20000ff8
 800b5ec:	20000b20 	.word	0x20000b20
 800b5f0:	20000fb0 	.word	0x20000fb0
 800b5f4:	20000b1c 	.word	0x20000b1c
 800b5f8:	20001004 	.word	0x20001004

0800b5fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b083      	sub	sp, #12
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b604:	4b06      	ldr	r3, [pc, #24]	@ (800b620 <vTaskInternalSetTimeOutState+0x24>)
 800b606:	681a      	ldr	r2, [r3, #0]
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b60c:	4b05      	ldr	r3, [pc, #20]	@ (800b624 <vTaskInternalSetTimeOutState+0x28>)
 800b60e:	681a      	ldr	r2, [r3, #0]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	605a      	str	r2, [r3, #4]
}
 800b614:	bf00      	nop
 800b616:	370c      	adds	r7, #12
 800b618:	46bd      	mov	sp, r7
 800b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61e:	4770      	bx	lr
 800b620:	20001008 	.word	0x20001008
 800b624:	20000ff4 	.word	0x20000ff4

0800b628 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b088      	sub	sp, #32
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
 800b630:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d10b      	bne.n	800b650 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b63c:	f383 8811 	msr	BASEPRI, r3
 800b640:	f3bf 8f6f 	isb	sy
 800b644:	f3bf 8f4f 	dsb	sy
 800b648:	613b      	str	r3, [r7, #16]
}
 800b64a:	bf00      	nop
 800b64c:	bf00      	nop
 800b64e:	e7fd      	b.n	800b64c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d10b      	bne.n	800b66e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b65a:	f383 8811 	msr	BASEPRI, r3
 800b65e:	f3bf 8f6f 	isb	sy
 800b662:	f3bf 8f4f 	dsb	sy
 800b666:	60fb      	str	r3, [r7, #12]
}
 800b668:	bf00      	nop
 800b66a:	bf00      	nop
 800b66c:	e7fd      	b.n	800b66a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b66e:	f000 fe93 	bl	800c398 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b672:	4b1d      	ldr	r3, [pc, #116]	@ (800b6e8 <xTaskCheckForTimeOut+0xc0>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	685b      	ldr	r3, [r3, #4]
 800b67c:	69ba      	ldr	r2, [r7, #24]
 800b67e:	1ad3      	subs	r3, r2, r3
 800b680:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b68a:	d102      	bne.n	800b692 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b68c:	2300      	movs	r3, #0
 800b68e:	61fb      	str	r3, [r7, #28]
 800b690:	e023      	b.n	800b6da <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681a      	ldr	r2, [r3, #0]
 800b696:	4b15      	ldr	r3, [pc, #84]	@ (800b6ec <xTaskCheckForTimeOut+0xc4>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d007      	beq.n	800b6ae <xTaskCheckForTimeOut+0x86>
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	69ba      	ldr	r2, [r7, #24]
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d302      	bcc.n	800b6ae <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	61fb      	str	r3, [r7, #28]
 800b6ac:	e015      	b.n	800b6da <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	697a      	ldr	r2, [r7, #20]
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d20b      	bcs.n	800b6d0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	681a      	ldr	r2, [r3, #0]
 800b6bc:	697b      	ldr	r3, [r7, #20]
 800b6be:	1ad2      	subs	r2, r2, r3
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f7ff ff99 	bl	800b5fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	61fb      	str	r3, [r7, #28]
 800b6ce:	e004      	b.n	800b6da <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b6da:	f000 fe8f 	bl	800c3fc <vPortExitCritical>

	return xReturn;
 800b6de:	69fb      	ldr	r3, [r7, #28]
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	3720      	adds	r7, #32
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}
 800b6e8:	20000ff4 	.word	0x20000ff4
 800b6ec:	20001008 	.word	0x20001008

0800b6f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b6f4:	4b03      	ldr	r3, [pc, #12]	@ (800b704 <vTaskMissedYield+0x14>)
 800b6f6:	2201      	movs	r2, #1
 800b6f8:	601a      	str	r2, [r3, #0]
}
 800b6fa:	bf00      	nop
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b702:	4770      	bx	lr
 800b704:	20001004 	.word	0x20001004

0800b708 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b082      	sub	sp, #8
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b710:	f000 f852 	bl	800b7b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b714:	4b06      	ldr	r3, [pc, #24]	@ (800b730 <prvIdleTask+0x28>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	2b01      	cmp	r3, #1
 800b71a:	d9f9      	bls.n	800b710 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b71c:	4b05      	ldr	r3, [pc, #20]	@ (800b734 <prvIdleTask+0x2c>)
 800b71e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b722:	601a      	str	r2, [r3, #0]
 800b724:	f3bf 8f4f 	dsb	sy
 800b728:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b72c:	e7f0      	b.n	800b710 <prvIdleTask+0x8>
 800b72e:	bf00      	nop
 800b730:	20000b20 	.word	0x20000b20
 800b734:	e000ed04 	.word	0xe000ed04

0800b738 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b082      	sub	sp, #8
 800b73c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b73e:	2300      	movs	r3, #0
 800b740:	607b      	str	r3, [r7, #4]
 800b742:	e00c      	b.n	800b75e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b744:	687a      	ldr	r2, [r7, #4]
 800b746:	4613      	mov	r3, r2
 800b748:	009b      	lsls	r3, r3, #2
 800b74a:	4413      	add	r3, r2
 800b74c:	009b      	lsls	r3, r3, #2
 800b74e:	4a12      	ldr	r2, [pc, #72]	@ (800b798 <prvInitialiseTaskLists+0x60>)
 800b750:	4413      	add	r3, r2
 800b752:	4618      	mov	r0, r3
 800b754:	f7fe fbb6 	bl	8009ec4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	3301      	adds	r3, #1
 800b75c:	607b      	str	r3, [r7, #4]
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2b37      	cmp	r3, #55	@ 0x37
 800b762:	d9ef      	bls.n	800b744 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b764:	480d      	ldr	r0, [pc, #52]	@ (800b79c <prvInitialiseTaskLists+0x64>)
 800b766:	f7fe fbad 	bl	8009ec4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b76a:	480d      	ldr	r0, [pc, #52]	@ (800b7a0 <prvInitialiseTaskLists+0x68>)
 800b76c:	f7fe fbaa 	bl	8009ec4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b770:	480c      	ldr	r0, [pc, #48]	@ (800b7a4 <prvInitialiseTaskLists+0x6c>)
 800b772:	f7fe fba7 	bl	8009ec4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b776:	480c      	ldr	r0, [pc, #48]	@ (800b7a8 <prvInitialiseTaskLists+0x70>)
 800b778:	f7fe fba4 	bl	8009ec4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b77c:	480b      	ldr	r0, [pc, #44]	@ (800b7ac <prvInitialiseTaskLists+0x74>)
 800b77e:	f7fe fba1 	bl	8009ec4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b782:	4b0b      	ldr	r3, [pc, #44]	@ (800b7b0 <prvInitialiseTaskLists+0x78>)
 800b784:	4a05      	ldr	r2, [pc, #20]	@ (800b79c <prvInitialiseTaskLists+0x64>)
 800b786:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b788:	4b0a      	ldr	r3, [pc, #40]	@ (800b7b4 <prvInitialiseTaskLists+0x7c>)
 800b78a:	4a05      	ldr	r2, [pc, #20]	@ (800b7a0 <prvInitialiseTaskLists+0x68>)
 800b78c:	601a      	str	r2, [r3, #0]
}
 800b78e:	bf00      	nop
 800b790:	3708      	adds	r7, #8
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}
 800b796:	bf00      	nop
 800b798:	20000b20 	.word	0x20000b20
 800b79c:	20000f80 	.word	0x20000f80
 800b7a0:	20000f94 	.word	0x20000f94
 800b7a4:	20000fb0 	.word	0x20000fb0
 800b7a8:	20000fc4 	.word	0x20000fc4
 800b7ac:	20000fdc 	.word	0x20000fdc
 800b7b0:	20000fa8 	.word	0x20000fa8
 800b7b4:	20000fac 	.word	0x20000fac

0800b7b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b082      	sub	sp, #8
 800b7bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b7be:	e019      	b.n	800b7f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b7c0:	f000 fdea 	bl	800c398 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7c4:	4b10      	ldr	r3, [pc, #64]	@ (800b808 <prvCheckTasksWaitingTermination+0x50>)
 800b7c6:	68db      	ldr	r3, [r3, #12]
 800b7c8:	68db      	ldr	r3, [r3, #12]
 800b7ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	3304      	adds	r3, #4
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f7fe fc01 	bl	8009fd8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b7d6:	4b0d      	ldr	r3, [pc, #52]	@ (800b80c <prvCheckTasksWaitingTermination+0x54>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	3b01      	subs	r3, #1
 800b7dc:	4a0b      	ldr	r2, [pc, #44]	@ (800b80c <prvCheckTasksWaitingTermination+0x54>)
 800b7de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b7e0:	4b0b      	ldr	r3, [pc, #44]	@ (800b810 <prvCheckTasksWaitingTermination+0x58>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	3b01      	subs	r3, #1
 800b7e6:	4a0a      	ldr	r2, [pc, #40]	@ (800b810 <prvCheckTasksWaitingTermination+0x58>)
 800b7e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b7ea:	f000 fe07 	bl	800c3fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f000 f810 	bl	800b814 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b7f4:	4b06      	ldr	r3, [pc, #24]	@ (800b810 <prvCheckTasksWaitingTermination+0x58>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d1e1      	bne.n	800b7c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b7fc:	bf00      	nop
 800b7fe:	bf00      	nop
 800b800:	3708      	adds	r7, #8
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}
 800b806:	bf00      	nop
 800b808:	20000fc4 	.word	0x20000fc4
 800b80c:	20000ff0 	.word	0x20000ff0
 800b810:	20000fd8 	.word	0x20000fd8

0800b814 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b814:	b580      	push	{r7, lr}
 800b816:	b084      	sub	sp, #16
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	3354      	adds	r3, #84	@ 0x54
 800b820:	4618      	mov	r0, r3
 800b822:	f001 f8e9 	bl	800c9f8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d108      	bne.n	800b842 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b834:	4618      	mov	r0, r3
 800b836:	f000 ff9f 	bl	800c778 <vPortFree>
				vPortFree( pxTCB );
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	f000 ff9c 	bl	800c778 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b840:	e019      	b.n	800b876 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b848:	2b01      	cmp	r3, #1
 800b84a:	d103      	bne.n	800b854 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f000 ff93 	bl	800c778 <vPortFree>
	}
 800b852:	e010      	b.n	800b876 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b85a:	2b02      	cmp	r3, #2
 800b85c:	d00b      	beq.n	800b876 <prvDeleteTCB+0x62>
	__asm volatile
 800b85e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b862:	f383 8811 	msr	BASEPRI, r3
 800b866:	f3bf 8f6f 	isb	sy
 800b86a:	f3bf 8f4f 	dsb	sy
 800b86e:	60fb      	str	r3, [r7, #12]
}
 800b870:	bf00      	nop
 800b872:	bf00      	nop
 800b874:	e7fd      	b.n	800b872 <prvDeleteTCB+0x5e>
	}
 800b876:	bf00      	nop
 800b878:	3710      	adds	r7, #16
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}
	...

0800b880 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b880:	b480      	push	{r7}
 800b882:	b083      	sub	sp, #12
 800b884:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b886:	4b0c      	ldr	r3, [pc, #48]	@ (800b8b8 <prvResetNextTaskUnblockTime+0x38>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d104      	bne.n	800b89a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b890:	4b0a      	ldr	r3, [pc, #40]	@ (800b8bc <prvResetNextTaskUnblockTime+0x3c>)
 800b892:	f04f 32ff 	mov.w	r2, #4294967295
 800b896:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b898:	e008      	b.n	800b8ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b89a:	4b07      	ldr	r3, [pc, #28]	@ (800b8b8 <prvResetNextTaskUnblockTime+0x38>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	68db      	ldr	r3, [r3, #12]
 800b8a0:	68db      	ldr	r3, [r3, #12]
 800b8a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	685b      	ldr	r3, [r3, #4]
 800b8a8:	4a04      	ldr	r2, [pc, #16]	@ (800b8bc <prvResetNextTaskUnblockTime+0x3c>)
 800b8aa:	6013      	str	r3, [r2, #0]
}
 800b8ac:	bf00      	nop
 800b8ae:	370c      	adds	r7, #12
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b6:	4770      	bx	lr
 800b8b8:	20000fa8 	.word	0x20000fa8
 800b8bc:	20001010 	.word	0x20001010

0800b8c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b083      	sub	sp, #12
 800b8c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b8c6:	4b0b      	ldr	r3, [pc, #44]	@ (800b8f4 <xTaskGetSchedulerState+0x34>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d102      	bne.n	800b8d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	607b      	str	r3, [r7, #4]
 800b8d2:	e008      	b.n	800b8e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b8d4:	4b08      	ldr	r3, [pc, #32]	@ (800b8f8 <xTaskGetSchedulerState+0x38>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d102      	bne.n	800b8e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b8dc:	2302      	movs	r3, #2
 800b8de:	607b      	str	r3, [r7, #4]
 800b8e0:	e001      	b.n	800b8e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b8e6:	687b      	ldr	r3, [r7, #4]
	}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	370c      	adds	r7, #12
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f2:	4770      	bx	lr
 800b8f4:	20000ffc 	.word	0x20000ffc
 800b8f8:	20001018 	.word	0x20001018

0800b8fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b086      	sub	sp, #24
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b908:	2300      	movs	r3, #0
 800b90a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d058      	beq.n	800b9c4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b912:	4b2f      	ldr	r3, [pc, #188]	@ (800b9d0 <xTaskPriorityDisinherit+0xd4>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	693a      	ldr	r2, [r7, #16]
 800b918:	429a      	cmp	r2, r3
 800b91a:	d00b      	beq.n	800b934 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b91c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b920:	f383 8811 	msr	BASEPRI, r3
 800b924:	f3bf 8f6f 	isb	sy
 800b928:	f3bf 8f4f 	dsb	sy
 800b92c:	60fb      	str	r3, [r7, #12]
}
 800b92e:	bf00      	nop
 800b930:	bf00      	nop
 800b932:	e7fd      	b.n	800b930 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d10b      	bne.n	800b954 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b93c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b940:	f383 8811 	msr	BASEPRI, r3
 800b944:	f3bf 8f6f 	isb	sy
 800b948:	f3bf 8f4f 	dsb	sy
 800b94c:	60bb      	str	r3, [r7, #8]
}
 800b94e:	bf00      	nop
 800b950:	bf00      	nop
 800b952:	e7fd      	b.n	800b950 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b958:	1e5a      	subs	r2, r3, #1
 800b95a:	693b      	ldr	r3, [r7, #16]
 800b95c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b95e:	693b      	ldr	r3, [r7, #16]
 800b960:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b962:	693b      	ldr	r3, [r7, #16]
 800b964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b966:	429a      	cmp	r2, r3
 800b968:	d02c      	beq.n	800b9c4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b96a:	693b      	ldr	r3, [r7, #16]
 800b96c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d128      	bne.n	800b9c4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	3304      	adds	r3, #4
 800b976:	4618      	mov	r0, r3
 800b978:	f7fe fb2e 	bl	8009fd8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b97c:	693b      	ldr	r3, [r7, #16]
 800b97e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b988:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b98c:	693b      	ldr	r3, [r7, #16]
 800b98e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b990:	693b      	ldr	r3, [r7, #16]
 800b992:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b994:	4b0f      	ldr	r3, [pc, #60]	@ (800b9d4 <xTaskPriorityDisinherit+0xd8>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	429a      	cmp	r2, r3
 800b99a:	d903      	bls.n	800b9a4 <xTaskPriorityDisinherit+0xa8>
 800b99c:	693b      	ldr	r3, [r7, #16]
 800b99e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9a0:	4a0c      	ldr	r2, [pc, #48]	@ (800b9d4 <xTaskPriorityDisinherit+0xd8>)
 800b9a2:	6013      	str	r3, [r2, #0]
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9a8:	4613      	mov	r3, r2
 800b9aa:	009b      	lsls	r3, r3, #2
 800b9ac:	4413      	add	r3, r2
 800b9ae:	009b      	lsls	r3, r3, #2
 800b9b0:	4a09      	ldr	r2, [pc, #36]	@ (800b9d8 <xTaskPriorityDisinherit+0xdc>)
 800b9b2:	441a      	add	r2, r3
 800b9b4:	693b      	ldr	r3, [r7, #16]
 800b9b6:	3304      	adds	r3, #4
 800b9b8:	4619      	mov	r1, r3
 800b9ba:	4610      	mov	r0, r2
 800b9bc:	f7fe faaf 	bl	8009f1e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b9c4:	697b      	ldr	r3, [r7, #20]
	}
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	3718      	adds	r7, #24
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}
 800b9ce:	bf00      	nop
 800b9d0:	20000b1c 	.word	0x20000b1c
 800b9d4:	20000ff8 	.word	0x20000ff8
 800b9d8:	20000b20 	.word	0x20000b20

0800b9dc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b084      	sub	sp, #16
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
 800b9e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b9e6:	4b21      	ldr	r3, [pc, #132]	@ (800ba6c <prvAddCurrentTaskToDelayedList+0x90>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b9ec:	4b20      	ldr	r3, [pc, #128]	@ (800ba70 <prvAddCurrentTaskToDelayedList+0x94>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	3304      	adds	r3, #4
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f7fe faf0 	bl	8009fd8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9fe:	d10a      	bne.n	800ba16 <prvAddCurrentTaskToDelayedList+0x3a>
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d007      	beq.n	800ba16 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba06:	4b1a      	ldr	r3, [pc, #104]	@ (800ba70 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	3304      	adds	r3, #4
 800ba0c:	4619      	mov	r1, r3
 800ba0e:	4819      	ldr	r0, [pc, #100]	@ (800ba74 <prvAddCurrentTaskToDelayedList+0x98>)
 800ba10:	f7fe fa85 	bl	8009f1e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ba14:	e026      	b.n	800ba64 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ba16:	68fa      	ldr	r2, [r7, #12]
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	4413      	add	r3, r2
 800ba1c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ba1e:	4b14      	ldr	r3, [pc, #80]	@ (800ba70 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	68ba      	ldr	r2, [r7, #8]
 800ba24:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ba26:	68ba      	ldr	r2, [r7, #8]
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	d209      	bcs.n	800ba42 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba2e:	4b12      	ldr	r3, [pc, #72]	@ (800ba78 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ba30:	681a      	ldr	r2, [r3, #0]
 800ba32:	4b0f      	ldr	r3, [pc, #60]	@ (800ba70 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	3304      	adds	r3, #4
 800ba38:	4619      	mov	r1, r3
 800ba3a:	4610      	mov	r0, r2
 800ba3c:	f7fe fa93 	bl	8009f66 <vListInsert>
}
 800ba40:	e010      	b.n	800ba64 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba42:	4b0e      	ldr	r3, [pc, #56]	@ (800ba7c <prvAddCurrentTaskToDelayedList+0xa0>)
 800ba44:	681a      	ldr	r2, [r3, #0]
 800ba46:	4b0a      	ldr	r3, [pc, #40]	@ (800ba70 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	3304      	adds	r3, #4
 800ba4c:	4619      	mov	r1, r3
 800ba4e:	4610      	mov	r0, r2
 800ba50:	f7fe fa89 	bl	8009f66 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ba54:	4b0a      	ldr	r3, [pc, #40]	@ (800ba80 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	68ba      	ldr	r2, [r7, #8]
 800ba5a:	429a      	cmp	r2, r3
 800ba5c:	d202      	bcs.n	800ba64 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ba5e:	4a08      	ldr	r2, [pc, #32]	@ (800ba80 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	6013      	str	r3, [r2, #0]
}
 800ba64:	bf00      	nop
 800ba66:	3710      	adds	r7, #16
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}
 800ba6c:	20000ff4 	.word	0x20000ff4
 800ba70:	20000b1c 	.word	0x20000b1c
 800ba74:	20000fdc 	.word	0x20000fdc
 800ba78:	20000fac 	.word	0x20000fac
 800ba7c:	20000fa8 	.word	0x20000fa8
 800ba80:	20001010 	.word	0x20001010

0800ba84 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b08a      	sub	sp, #40	@ 0x28
 800ba88:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ba8e:	f000 fb13 	bl	800c0b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ba92:	4b1d      	ldr	r3, [pc, #116]	@ (800bb08 <xTimerCreateTimerTask+0x84>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d021      	beq.n	800bade <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ba9e:	2300      	movs	r3, #0
 800baa0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800baa2:	1d3a      	adds	r2, r7, #4
 800baa4:	f107 0108 	add.w	r1, r7, #8
 800baa8:	f107 030c 	add.w	r3, r7, #12
 800baac:	4618      	mov	r0, r3
 800baae:	f7fe f9ef 	bl	8009e90 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bab2:	6879      	ldr	r1, [r7, #4]
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	68fa      	ldr	r2, [r7, #12]
 800bab8:	9202      	str	r2, [sp, #8]
 800baba:	9301      	str	r3, [sp, #4]
 800babc:	2302      	movs	r3, #2
 800babe:	9300      	str	r3, [sp, #0]
 800bac0:	2300      	movs	r3, #0
 800bac2:	460a      	mov	r2, r1
 800bac4:	4911      	ldr	r1, [pc, #68]	@ (800bb0c <xTimerCreateTimerTask+0x88>)
 800bac6:	4812      	ldr	r0, [pc, #72]	@ (800bb10 <xTimerCreateTimerTask+0x8c>)
 800bac8:	f7ff f8a2 	bl	800ac10 <xTaskCreateStatic>
 800bacc:	4603      	mov	r3, r0
 800bace:	4a11      	ldr	r2, [pc, #68]	@ (800bb14 <xTimerCreateTimerTask+0x90>)
 800bad0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bad2:	4b10      	ldr	r3, [pc, #64]	@ (800bb14 <xTimerCreateTimerTask+0x90>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d001      	beq.n	800bade <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bada:	2301      	movs	r3, #1
 800badc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bade:	697b      	ldr	r3, [r7, #20]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d10b      	bne.n	800bafc <xTimerCreateTimerTask+0x78>
	__asm volatile
 800bae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bae8:	f383 8811 	msr	BASEPRI, r3
 800baec:	f3bf 8f6f 	isb	sy
 800baf0:	f3bf 8f4f 	dsb	sy
 800baf4:	613b      	str	r3, [r7, #16]
}
 800baf6:	bf00      	nop
 800baf8:	bf00      	nop
 800bafa:	e7fd      	b.n	800baf8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bafc:	697b      	ldr	r3, [r7, #20]
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3718      	adds	r7, #24
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}
 800bb06:	bf00      	nop
 800bb08:	2000104c 	.word	0x2000104c
 800bb0c:	0800cc54 	.word	0x0800cc54
 800bb10:	0800bc51 	.word	0x0800bc51
 800bb14:	20001050 	.word	0x20001050

0800bb18 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b08a      	sub	sp, #40	@ 0x28
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	60f8      	str	r0, [r7, #12]
 800bb20:	60b9      	str	r1, [r7, #8]
 800bb22:	607a      	str	r2, [r7, #4]
 800bb24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bb26:	2300      	movs	r3, #0
 800bb28:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d10b      	bne.n	800bb48 <xTimerGenericCommand+0x30>
	__asm volatile
 800bb30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb34:	f383 8811 	msr	BASEPRI, r3
 800bb38:	f3bf 8f6f 	isb	sy
 800bb3c:	f3bf 8f4f 	dsb	sy
 800bb40:	623b      	str	r3, [r7, #32]
}
 800bb42:	bf00      	nop
 800bb44:	bf00      	nop
 800bb46:	e7fd      	b.n	800bb44 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bb48:	4b19      	ldr	r3, [pc, #100]	@ (800bbb0 <xTimerGenericCommand+0x98>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d02a      	beq.n	800bba6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	2b05      	cmp	r3, #5
 800bb60:	dc18      	bgt.n	800bb94 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bb62:	f7ff fead 	bl	800b8c0 <xTaskGetSchedulerState>
 800bb66:	4603      	mov	r3, r0
 800bb68:	2b02      	cmp	r3, #2
 800bb6a:	d109      	bne.n	800bb80 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bb6c:	4b10      	ldr	r3, [pc, #64]	@ (800bbb0 <xTimerGenericCommand+0x98>)
 800bb6e:	6818      	ldr	r0, [r3, #0]
 800bb70:	f107 0110 	add.w	r1, r7, #16
 800bb74:	2300      	movs	r3, #0
 800bb76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb78:	f7fe fc0c 	bl	800a394 <xQueueGenericSend>
 800bb7c:	6278      	str	r0, [r7, #36]	@ 0x24
 800bb7e:	e012      	b.n	800bba6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bb80:	4b0b      	ldr	r3, [pc, #44]	@ (800bbb0 <xTimerGenericCommand+0x98>)
 800bb82:	6818      	ldr	r0, [r3, #0]
 800bb84:	f107 0110 	add.w	r1, r7, #16
 800bb88:	2300      	movs	r3, #0
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	f7fe fc02 	bl	800a394 <xQueueGenericSend>
 800bb90:	6278      	str	r0, [r7, #36]	@ 0x24
 800bb92:	e008      	b.n	800bba6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bb94:	4b06      	ldr	r3, [pc, #24]	@ (800bbb0 <xTimerGenericCommand+0x98>)
 800bb96:	6818      	ldr	r0, [r3, #0]
 800bb98:	f107 0110 	add.w	r1, r7, #16
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	683a      	ldr	r2, [r7, #0]
 800bba0:	f7fe fcfa 	bl	800a598 <xQueueGenericSendFromISR>
 800bba4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bba8:	4618      	mov	r0, r3
 800bbaa:	3728      	adds	r7, #40	@ 0x28
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}
 800bbb0:	2000104c 	.word	0x2000104c

0800bbb4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b088      	sub	sp, #32
 800bbb8:	af02      	add	r7, sp, #8
 800bbba:	6078      	str	r0, [r7, #4]
 800bbbc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbbe:	4b23      	ldr	r3, [pc, #140]	@ (800bc4c <prvProcessExpiredTimer+0x98>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	68db      	ldr	r3, [r3, #12]
 800bbc4:	68db      	ldr	r3, [r3, #12]
 800bbc6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bbc8:	697b      	ldr	r3, [r7, #20]
 800bbca:	3304      	adds	r3, #4
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f7fe fa03 	bl	8009fd8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bbd2:	697b      	ldr	r3, [r7, #20]
 800bbd4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bbd8:	f003 0304 	and.w	r3, r3, #4
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d023      	beq.n	800bc28 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bbe0:	697b      	ldr	r3, [r7, #20]
 800bbe2:	699a      	ldr	r2, [r3, #24]
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	18d1      	adds	r1, r2, r3
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	683a      	ldr	r2, [r7, #0]
 800bbec:	6978      	ldr	r0, [r7, #20]
 800bbee:	f000 f8d5 	bl	800bd9c <prvInsertTimerInActiveList>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d020      	beq.n	800bc3a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	9300      	str	r3, [sp, #0]
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	687a      	ldr	r2, [r7, #4]
 800bc00:	2100      	movs	r1, #0
 800bc02:	6978      	ldr	r0, [r7, #20]
 800bc04:	f7ff ff88 	bl	800bb18 <xTimerGenericCommand>
 800bc08:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d114      	bne.n	800bc3a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800bc10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc14:	f383 8811 	msr	BASEPRI, r3
 800bc18:	f3bf 8f6f 	isb	sy
 800bc1c:	f3bf 8f4f 	dsb	sy
 800bc20:	60fb      	str	r3, [r7, #12]
}
 800bc22:	bf00      	nop
 800bc24:	bf00      	nop
 800bc26:	e7fd      	b.n	800bc24 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bc28:	697b      	ldr	r3, [r7, #20]
 800bc2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc2e:	f023 0301 	bic.w	r3, r3, #1
 800bc32:	b2da      	uxtb	r2, r3
 800bc34:	697b      	ldr	r3, [r7, #20]
 800bc36:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc3a:	697b      	ldr	r3, [r7, #20]
 800bc3c:	6a1b      	ldr	r3, [r3, #32]
 800bc3e:	6978      	ldr	r0, [r7, #20]
 800bc40:	4798      	blx	r3
}
 800bc42:	bf00      	nop
 800bc44:	3718      	adds	r7, #24
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}
 800bc4a:	bf00      	nop
 800bc4c:	20001044 	.word	0x20001044

0800bc50 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b084      	sub	sp, #16
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bc58:	f107 0308 	add.w	r3, r7, #8
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f000 f859 	bl	800bd14 <prvGetNextExpireTime>
 800bc62:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	4619      	mov	r1, r3
 800bc68:	68f8      	ldr	r0, [r7, #12]
 800bc6a:	f000 f805 	bl	800bc78 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bc6e:	f000 f8d7 	bl	800be20 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bc72:	bf00      	nop
 800bc74:	e7f0      	b.n	800bc58 <prvTimerTask+0x8>
	...

0800bc78 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b084      	sub	sp, #16
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
 800bc80:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bc82:	f7ff fa29 	bl	800b0d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bc86:	f107 0308 	add.w	r3, r7, #8
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f000 f866 	bl	800bd5c <prvSampleTimeNow>
 800bc90:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d130      	bne.n	800bcfa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d10a      	bne.n	800bcb4 <prvProcessTimerOrBlockTask+0x3c>
 800bc9e:	687a      	ldr	r2, [r7, #4]
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	429a      	cmp	r2, r3
 800bca4:	d806      	bhi.n	800bcb4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bca6:	f7ff fa25 	bl	800b0f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bcaa:	68f9      	ldr	r1, [r7, #12]
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f7ff ff81 	bl	800bbb4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bcb2:	e024      	b.n	800bcfe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d008      	beq.n	800bccc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bcba:	4b13      	ldr	r3, [pc, #76]	@ (800bd08 <prvProcessTimerOrBlockTask+0x90>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d101      	bne.n	800bcc8 <prvProcessTimerOrBlockTask+0x50>
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	e000      	b.n	800bcca <prvProcessTimerOrBlockTask+0x52>
 800bcc8:	2300      	movs	r3, #0
 800bcca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bccc:	4b0f      	ldr	r3, [pc, #60]	@ (800bd0c <prvProcessTimerOrBlockTask+0x94>)
 800bcce:	6818      	ldr	r0, [r3, #0]
 800bcd0:	687a      	ldr	r2, [r7, #4]
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	1ad3      	subs	r3, r2, r3
 800bcd6:	683a      	ldr	r2, [r7, #0]
 800bcd8:	4619      	mov	r1, r3
 800bcda:	f7fe ff65 	bl	800aba8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bcde:	f7ff fa09 	bl	800b0f4 <xTaskResumeAll>
 800bce2:	4603      	mov	r3, r0
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d10a      	bne.n	800bcfe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bce8:	4b09      	ldr	r3, [pc, #36]	@ (800bd10 <prvProcessTimerOrBlockTask+0x98>)
 800bcea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bcee:	601a      	str	r2, [r3, #0]
 800bcf0:	f3bf 8f4f 	dsb	sy
 800bcf4:	f3bf 8f6f 	isb	sy
}
 800bcf8:	e001      	b.n	800bcfe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bcfa:	f7ff f9fb 	bl	800b0f4 <xTaskResumeAll>
}
 800bcfe:	bf00      	nop
 800bd00:	3710      	adds	r7, #16
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd80      	pop	{r7, pc}
 800bd06:	bf00      	nop
 800bd08:	20001048 	.word	0x20001048
 800bd0c:	2000104c 	.word	0x2000104c
 800bd10:	e000ed04 	.word	0xe000ed04

0800bd14 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bd14:	b480      	push	{r7}
 800bd16:	b085      	sub	sp, #20
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bd1c:	4b0e      	ldr	r3, [pc, #56]	@ (800bd58 <prvGetNextExpireTime+0x44>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d101      	bne.n	800bd2a <prvGetNextExpireTime+0x16>
 800bd26:	2201      	movs	r2, #1
 800bd28:	e000      	b.n	800bd2c <prvGetNextExpireTime+0x18>
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d105      	bne.n	800bd44 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bd38:	4b07      	ldr	r3, [pc, #28]	@ (800bd58 <prvGetNextExpireTime+0x44>)
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	68db      	ldr	r3, [r3, #12]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	60fb      	str	r3, [r7, #12]
 800bd42:	e001      	b.n	800bd48 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bd44:	2300      	movs	r3, #0
 800bd46:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bd48:	68fb      	ldr	r3, [r7, #12]
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3714      	adds	r7, #20
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd54:	4770      	bx	lr
 800bd56:	bf00      	nop
 800bd58:	20001044 	.word	0x20001044

0800bd5c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b084      	sub	sp, #16
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bd64:	f7ff fa64 	bl	800b230 <xTaskGetTickCount>
 800bd68:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bd6a:	4b0b      	ldr	r3, [pc, #44]	@ (800bd98 <prvSampleTimeNow+0x3c>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	68fa      	ldr	r2, [r7, #12]
 800bd70:	429a      	cmp	r2, r3
 800bd72:	d205      	bcs.n	800bd80 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bd74:	f000 f93a 	bl	800bfec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2201      	movs	r2, #1
 800bd7c:	601a      	str	r2, [r3, #0]
 800bd7e:	e002      	b.n	800bd86 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2200      	movs	r2, #0
 800bd84:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bd86:	4a04      	ldr	r2, [pc, #16]	@ (800bd98 <prvSampleTimeNow+0x3c>)
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	3710      	adds	r7, #16
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}
 800bd96:	bf00      	nop
 800bd98:	20001054 	.word	0x20001054

0800bd9c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b086      	sub	sp, #24
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	60f8      	str	r0, [r7, #12]
 800bda4:	60b9      	str	r1, [r7, #8]
 800bda6:	607a      	str	r2, [r7, #4]
 800bda8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	68ba      	ldr	r2, [r7, #8]
 800bdb2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	68fa      	ldr	r2, [r7, #12]
 800bdb8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bdba:	68ba      	ldr	r2, [r7, #8]
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	429a      	cmp	r2, r3
 800bdc0:	d812      	bhi.n	800bde8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bdc2:	687a      	ldr	r2, [r7, #4]
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	1ad2      	subs	r2, r2, r3
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	699b      	ldr	r3, [r3, #24]
 800bdcc:	429a      	cmp	r2, r3
 800bdce:	d302      	bcc.n	800bdd6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	617b      	str	r3, [r7, #20]
 800bdd4:	e01b      	b.n	800be0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bdd6:	4b10      	ldr	r3, [pc, #64]	@ (800be18 <prvInsertTimerInActiveList+0x7c>)
 800bdd8:	681a      	ldr	r2, [r3, #0]
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	3304      	adds	r3, #4
 800bdde:	4619      	mov	r1, r3
 800bde0:	4610      	mov	r0, r2
 800bde2:	f7fe f8c0 	bl	8009f66 <vListInsert>
 800bde6:	e012      	b.n	800be0e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bde8:	687a      	ldr	r2, [r7, #4]
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	429a      	cmp	r2, r3
 800bdee:	d206      	bcs.n	800bdfe <prvInsertTimerInActiveList+0x62>
 800bdf0:	68ba      	ldr	r2, [r7, #8]
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	d302      	bcc.n	800bdfe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	617b      	str	r3, [r7, #20]
 800bdfc:	e007      	b.n	800be0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bdfe:	4b07      	ldr	r3, [pc, #28]	@ (800be1c <prvInsertTimerInActiveList+0x80>)
 800be00:	681a      	ldr	r2, [r3, #0]
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	3304      	adds	r3, #4
 800be06:	4619      	mov	r1, r3
 800be08:	4610      	mov	r0, r2
 800be0a:	f7fe f8ac 	bl	8009f66 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800be0e:	697b      	ldr	r3, [r7, #20]
}
 800be10:	4618      	mov	r0, r3
 800be12:	3718      	adds	r7, #24
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}
 800be18:	20001048 	.word	0x20001048
 800be1c:	20001044 	.word	0x20001044

0800be20 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b08e      	sub	sp, #56	@ 0x38
 800be24:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800be26:	e0ce      	b.n	800bfc6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	da19      	bge.n	800be62 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800be2e:	1d3b      	adds	r3, r7, #4
 800be30:	3304      	adds	r3, #4
 800be32:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800be34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be36:	2b00      	cmp	r3, #0
 800be38:	d10b      	bne.n	800be52 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800be3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be3e:	f383 8811 	msr	BASEPRI, r3
 800be42:	f3bf 8f6f 	isb	sy
 800be46:	f3bf 8f4f 	dsb	sy
 800be4a:	61fb      	str	r3, [r7, #28]
}
 800be4c:	bf00      	nop
 800be4e:	bf00      	nop
 800be50:	e7fd      	b.n	800be4e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800be52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be58:	6850      	ldr	r0, [r2, #4]
 800be5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be5c:	6892      	ldr	r2, [r2, #8]
 800be5e:	4611      	mov	r1, r2
 800be60:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2b00      	cmp	r3, #0
 800be66:	f2c0 80ae 	blt.w	800bfc6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800be6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be70:	695b      	ldr	r3, [r3, #20]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d004      	beq.n	800be80 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800be76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be78:	3304      	adds	r3, #4
 800be7a:	4618      	mov	r0, r3
 800be7c:	f7fe f8ac 	bl	8009fd8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800be80:	463b      	mov	r3, r7
 800be82:	4618      	mov	r0, r3
 800be84:	f7ff ff6a 	bl	800bd5c <prvSampleTimeNow>
 800be88:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2b09      	cmp	r3, #9
 800be8e:	f200 8097 	bhi.w	800bfc0 <prvProcessReceivedCommands+0x1a0>
 800be92:	a201      	add	r2, pc, #4	@ (adr r2, 800be98 <prvProcessReceivedCommands+0x78>)
 800be94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be98:	0800bec1 	.word	0x0800bec1
 800be9c:	0800bec1 	.word	0x0800bec1
 800bea0:	0800bec1 	.word	0x0800bec1
 800bea4:	0800bf37 	.word	0x0800bf37
 800bea8:	0800bf4b 	.word	0x0800bf4b
 800beac:	0800bf97 	.word	0x0800bf97
 800beb0:	0800bec1 	.word	0x0800bec1
 800beb4:	0800bec1 	.word	0x0800bec1
 800beb8:	0800bf37 	.word	0x0800bf37
 800bebc:	0800bf4b 	.word	0x0800bf4b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bec2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bec6:	f043 0301 	orr.w	r3, r3, #1
 800beca:	b2da      	uxtb	r2, r3
 800becc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bece:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bed2:	68ba      	ldr	r2, [r7, #8]
 800bed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bed6:	699b      	ldr	r3, [r3, #24]
 800bed8:	18d1      	adds	r1, r2, r3
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bede:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bee0:	f7ff ff5c 	bl	800bd9c <prvInsertTimerInActiveList>
 800bee4:	4603      	mov	r3, r0
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d06c      	beq.n	800bfc4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800beea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800beec:	6a1b      	ldr	r3, [r3, #32]
 800beee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bef0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bef4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bef8:	f003 0304 	and.w	r3, r3, #4
 800befc:	2b00      	cmp	r3, #0
 800befe:	d061      	beq.n	800bfc4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bf00:	68ba      	ldr	r2, [r7, #8]
 800bf02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf04:	699b      	ldr	r3, [r3, #24]
 800bf06:	441a      	add	r2, r3
 800bf08:	2300      	movs	r3, #0
 800bf0a:	9300      	str	r3, [sp, #0]
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	2100      	movs	r1, #0
 800bf10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf12:	f7ff fe01 	bl	800bb18 <xTimerGenericCommand>
 800bf16:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bf18:	6a3b      	ldr	r3, [r7, #32]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d152      	bne.n	800bfc4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800bf1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf22:	f383 8811 	msr	BASEPRI, r3
 800bf26:	f3bf 8f6f 	isb	sy
 800bf2a:	f3bf 8f4f 	dsb	sy
 800bf2e:	61bb      	str	r3, [r7, #24]
}
 800bf30:	bf00      	nop
 800bf32:	bf00      	nop
 800bf34:	e7fd      	b.n	800bf32 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bf36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf3c:	f023 0301 	bic.w	r3, r3, #1
 800bf40:	b2da      	uxtb	r2, r3
 800bf42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf44:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bf48:	e03d      	b.n	800bfc6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bf4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf50:	f043 0301 	orr.w	r3, r3, #1
 800bf54:	b2da      	uxtb	r2, r3
 800bf56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf58:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bf5c:	68ba      	ldr	r2, [r7, #8]
 800bf5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf60:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bf62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf64:	699b      	ldr	r3, [r3, #24]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d10b      	bne.n	800bf82 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800bf6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf6e:	f383 8811 	msr	BASEPRI, r3
 800bf72:	f3bf 8f6f 	isb	sy
 800bf76:	f3bf 8f4f 	dsb	sy
 800bf7a:	617b      	str	r3, [r7, #20]
}
 800bf7c:	bf00      	nop
 800bf7e:	bf00      	nop
 800bf80:	e7fd      	b.n	800bf7e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bf82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf84:	699a      	ldr	r2, [r3, #24]
 800bf86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf88:	18d1      	adds	r1, r2, r3
 800bf8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf90:	f7ff ff04 	bl	800bd9c <prvInsertTimerInActiveList>
					break;
 800bf94:	e017      	b.n	800bfc6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bf96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf9c:	f003 0302 	and.w	r3, r3, #2
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d103      	bne.n	800bfac <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800bfa4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bfa6:	f000 fbe7 	bl	800c778 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bfaa:	e00c      	b.n	800bfc6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bfac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bfb2:	f023 0301 	bic.w	r3, r3, #1
 800bfb6:	b2da      	uxtb	r2, r3
 800bfb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bfbe:	e002      	b.n	800bfc6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800bfc0:	bf00      	nop
 800bfc2:	e000      	b.n	800bfc6 <prvProcessReceivedCommands+0x1a6>
					break;
 800bfc4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bfc6:	4b08      	ldr	r3, [pc, #32]	@ (800bfe8 <prvProcessReceivedCommands+0x1c8>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	1d39      	adds	r1, r7, #4
 800bfcc:	2200      	movs	r2, #0
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f7fe fb80 	bl	800a6d4 <xQueueReceive>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	f47f af26 	bne.w	800be28 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bfdc:	bf00      	nop
 800bfde:	bf00      	nop
 800bfe0:	3730      	adds	r7, #48	@ 0x30
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}
 800bfe6:	bf00      	nop
 800bfe8:	2000104c 	.word	0x2000104c

0800bfec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b088      	sub	sp, #32
 800bff0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bff2:	e049      	b.n	800c088 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bff4:	4b2e      	ldr	r3, [pc, #184]	@ (800c0b0 <prvSwitchTimerLists+0xc4>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	68db      	ldr	r3, [r3, #12]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bffe:	4b2c      	ldr	r3, [pc, #176]	@ (800c0b0 <prvSwitchTimerLists+0xc4>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	68db      	ldr	r3, [r3, #12]
 800c004:	68db      	ldr	r3, [r3, #12]
 800c006:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	3304      	adds	r3, #4
 800c00c:	4618      	mov	r0, r3
 800c00e:	f7fd ffe3 	bl	8009fd8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	6a1b      	ldr	r3, [r3, #32]
 800c016:	68f8      	ldr	r0, [r7, #12]
 800c018:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c020:	f003 0304 	and.w	r3, r3, #4
 800c024:	2b00      	cmp	r3, #0
 800c026:	d02f      	beq.n	800c088 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	699b      	ldr	r3, [r3, #24]
 800c02c:	693a      	ldr	r2, [r7, #16]
 800c02e:	4413      	add	r3, r2
 800c030:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c032:	68ba      	ldr	r2, [r7, #8]
 800c034:	693b      	ldr	r3, [r7, #16]
 800c036:	429a      	cmp	r2, r3
 800c038:	d90e      	bls.n	800c058 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	68ba      	ldr	r2, [r7, #8]
 800c03e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	68fa      	ldr	r2, [r7, #12]
 800c044:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c046:	4b1a      	ldr	r3, [pc, #104]	@ (800c0b0 <prvSwitchTimerLists+0xc4>)
 800c048:	681a      	ldr	r2, [r3, #0]
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	3304      	adds	r3, #4
 800c04e:	4619      	mov	r1, r3
 800c050:	4610      	mov	r0, r2
 800c052:	f7fd ff88 	bl	8009f66 <vListInsert>
 800c056:	e017      	b.n	800c088 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c058:	2300      	movs	r3, #0
 800c05a:	9300      	str	r3, [sp, #0]
 800c05c:	2300      	movs	r3, #0
 800c05e:	693a      	ldr	r2, [r7, #16]
 800c060:	2100      	movs	r1, #0
 800c062:	68f8      	ldr	r0, [r7, #12]
 800c064:	f7ff fd58 	bl	800bb18 <xTimerGenericCommand>
 800c068:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d10b      	bne.n	800c088 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c074:	f383 8811 	msr	BASEPRI, r3
 800c078:	f3bf 8f6f 	isb	sy
 800c07c:	f3bf 8f4f 	dsb	sy
 800c080:	603b      	str	r3, [r7, #0]
}
 800c082:	bf00      	nop
 800c084:	bf00      	nop
 800c086:	e7fd      	b.n	800c084 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c088:	4b09      	ldr	r3, [pc, #36]	@ (800c0b0 <prvSwitchTimerLists+0xc4>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d1b0      	bne.n	800bff4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c092:	4b07      	ldr	r3, [pc, #28]	@ (800c0b0 <prvSwitchTimerLists+0xc4>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c098:	4b06      	ldr	r3, [pc, #24]	@ (800c0b4 <prvSwitchTimerLists+0xc8>)
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	4a04      	ldr	r2, [pc, #16]	@ (800c0b0 <prvSwitchTimerLists+0xc4>)
 800c09e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c0a0:	4a04      	ldr	r2, [pc, #16]	@ (800c0b4 <prvSwitchTimerLists+0xc8>)
 800c0a2:	697b      	ldr	r3, [r7, #20]
 800c0a4:	6013      	str	r3, [r2, #0]
}
 800c0a6:	bf00      	nop
 800c0a8:	3718      	adds	r7, #24
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}
 800c0ae:	bf00      	nop
 800c0b0:	20001044 	.word	0x20001044
 800c0b4:	20001048 	.word	0x20001048

0800c0b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b082      	sub	sp, #8
 800c0bc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c0be:	f000 f96b 	bl	800c398 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c0c2:	4b15      	ldr	r3, [pc, #84]	@ (800c118 <prvCheckForValidListAndQueue+0x60>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d120      	bne.n	800c10c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c0ca:	4814      	ldr	r0, [pc, #80]	@ (800c11c <prvCheckForValidListAndQueue+0x64>)
 800c0cc:	f7fd fefa 	bl	8009ec4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c0d0:	4813      	ldr	r0, [pc, #76]	@ (800c120 <prvCheckForValidListAndQueue+0x68>)
 800c0d2:	f7fd fef7 	bl	8009ec4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c0d6:	4b13      	ldr	r3, [pc, #76]	@ (800c124 <prvCheckForValidListAndQueue+0x6c>)
 800c0d8:	4a10      	ldr	r2, [pc, #64]	@ (800c11c <prvCheckForValidListAndQueue+0x64>)
 800c0da:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c0dc:	4b12      	ldr	r3, [pc, #72]	@ (800c128 <prvCheckForValidListAndQueue+0x70>)
 800c0de:	4a10      	ldr	r2, [pc, #64]	@ (800c120 <prvCheckForValidListAndQueue+0x68>)
 800c0e0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	9300      	str	r3, [sp, #0]
 800c0e6:	4b11      	ldr	r3, [pc, #68]	@ (800c12c <prvCheckForValidListAndQueue+0x74>)
 800c0e8:	4a11      	ldr	r2, [pc, #68]	@ (800c130 <prvCheckForValidListAndQueue+0x78>)
 800c0ea:	2110      	movs	r1, #16
 800c0ec:	200a      	movs	r0, #10
 800c0ee:	f7fe f807 	bl	800a100 <xQueueGenericCreateStatic>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	4a08      	ldr	r2, [pc, #32]	@ (800c118 <prvCheckForValidListAndQueue+0x60>)
 800c0f6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c0f8:	4b07      	ldr	r3, [pc, #28]	@ (800c118 <prvCheckForValidListAndQueue+0x60>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d005      	beq.n	800c10c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c100:	4b05      	ldr	r3, [pc, #20]	@ (800c118 <prvCheckForValidListAndQueue+0x60>)
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	490b      	ldr	r1, [pc, #44]	@ (800c134 <prvCheckForValidListAndQueue+0x7c>)
 800c106:	4618      	mov	r0, r3
 800c108:	f7fe fcfa 	bl	800ab00 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c10c:	f000 f976 	bl	800c3fc <vPortExitCritical>
}
 800c110:	bf00      	nop
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}
 800c116:	bf00      	nop
 800c118:	2000104c 	.word	0x2000104c
 800c11c:	2000101c 	.word	0x2000101c
 800c120:	20001030 	.word	0x20001030
 800c124:	20001044 	.word	0x20001044
 800c128:	20001048 	.word	0x20001048
 800c12c:	200010f8 	.word	0x200010f8
 800c130:	20001058 	.word	0x20001058
 800c134:	0800cc5c 	.word	0x0800cc5c

0800c138 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c138:	b480      	push	{r7}
 800c13a:	b085      	sub	sp, #20
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	60f8      	str	r0, [r7, #12]
 800c140:	60b9      	str	r1, [r7, #8]
 800c142:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	3b04      	subs	r3, #4
 800c148:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c150:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	3b04      	subs	r3, #4
 800c156:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	f023 0201 	bic.w	r2, r3, #1
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	3b04      	subs	r3, #4
 800c166:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c168:	4a0c      	ldr	r2, [pc, #48]	@ (800c19c <pxPortInitialiseStack+0x64>)
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	3b14      	subs	r3, #20
 800c172:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c174:	687a      	ldr	r2, [r7, #4]
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	3b04      	subs	r3, #4
 800c17e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	f06f 0202 	mvn.w	r2, #2
 800c186:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	3b20      	subs	r3, #32
 800c18c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c18e:	68fb      	ldr	r3, [r7, #12]
}
 800c190:	4618      	mov	r0, r3
 800c192:	3714      	adds	r7, #20
 800c194:	46bd      	mov	sp, r7
 800c196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19a:	4770      	bx	lr
 800c19c:	0800c1a1 	.word	0x0800c1a1

0800c1a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c1a0:	b480      	push	{r7}
 800c1a2:	b085      	sub	sp, #20
 800c1a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c1aa:	4b13      	ldr	r3, [pc, #76]	@ (800c1f8 <prvTaskExitError+0x58>)
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1b2:	d00b      	beq.n	800c1cc <prvTaskExitError+0x2c>
	__asm volatile
 800c1b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1b8:	f383 8811 	msr	BASEPRI, r3
 800c1bc:	f3bf 8f6f 	isb	sy
 800c1c0:	f3bf 8f4f 	dsb	sy
 800c1c4:	60fb      	str	r3, [r7, #12]
}
 800c1c6:	bf00      	nop
 800c1c8:	bf00      	nop
 800c1ca:	e7fd      	b.n	800c1c8 <prvTaskExitError+0x28>
	__asm volatile
 800c1cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1d0:	f383 8811 	msr	BASEPRI, r3
 800c1d4:	f3bf 8f6f 	isb	sy
 800c1d8:	f3bf 8f4f 	dsb	sy
 800c1dc:	60bb      	str	r3, [r7, #8]
}
 800c1de:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c1e0:	bf00      	nop
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d0fc      	beq.n	800c1e2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c1e8:	bf00      	nop
 800c1ea:	bf00      	nop
 800c1ec:	3714      	adds	r7, #20
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f4:	4770      	bx	lr
 800c1f6:	bf00      	nop
 800c1f8:	2000000c 	.word	0x2000000c
 800c1fc:	00000000 	.word	0x00000000

0800c200 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c200:	4b07      	ldr	r3, [pc, #28]	@ (800c220 <pxCurrentTCBConst2>)
 800c202:	6819      	ldr	r1, [r3, #0]
 800c204:	6808      	ldr	r0, [r1, #0]
 800c206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c20a:	f380 8809 	msr	PSP, r0
 800c20e:	f3bf 8f6f 	isb	sy
 800c212:	f04f 0000 	mov.w	r0, #0
 800c216:	f380 8811 	msr	BASEPRI, r0
 800c21a:	4770      	bx	lr
 800c21c:	f3af 8000 	nop.w

0800c220 <pxCurrentTCBConst2>:
 800c220:	20000b1c 	.word	0x20000b1c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c224:	bf00      	nop
 800c226:	bf00      	nop

0800c228 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c228:	4808      	ldr	r0, [pc, #32]	@ (800c24c <prvPortStartFirstTask+0x24>)
 800c22a:	6800      	ldr	r0, [r0, #0]
 800c22c:	6800      	ldr	r0, [r0, #0]
 800c22e:	f380 8808 	msr	MSP, r0
 800c232:	f04f 0000 	mov.w	r0, #0
 800c236:	f380 8814 	msr	CONTROL, r0
 800c23a:	b662      	cpsie	i
 800c23c:	b661      	cpsie	f
 800c23e:	f3bf 8f4f 	dsb	sy
 800c242:	f3bf 8f6f 	isb	sy
 800c246:	df00      	svc	0
 800c248:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c24a:	bf00      	nop
 800c24c:	e000ed08 	.word	0xe000ed08

0800c250 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b086      	sub	sp, #24
 800c254:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c256:	4b47      	ldr	r3, [pc, #284]	@ (800c374 <xPortStartScheduler+0x124>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	4a47      	ldr	r2, [pc, #284]	@ (800c378 <xPortStartScheduler+0x128>)
 800c25c:	4293      	cmp	r3, r2
 800c25e:	d10b      	bne.n	800c278 <xPortStartScheduler+0x28>
	__asm volatile
 800c260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c264:	f383 8811 	msr	BASEPRI, r3
 800c268:	f3bf 8f6f 	isb	sy
 800c26c:	f3bf 8f4f 	dsb	sy
 800c270:	613b      	str	r3, [r7, #16]
}
 800c272:	bf00      	nop
 800c274:	bf00      	nop
 800c276:	e7fd      	b.n	800c274 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c278:	4b3e      	ldr	r3, [pc, #248]	@ (800c374 <xPortStartScheduler+0x124>)
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	4a3f      	ldr	r2, [pc, #252]	@ (800c37c <xPortStartScheduler+0x12c>)
 800c27e:	4293      	cmp	r3, r2
 800c280:	d10b      	bne.n	800c29a <xPortStartScheduler+0x4a>
	__asm volatile
 800c282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c286:	f383 8811 	msr	BASEPRI, r3
 800c28a:	f3bf 8f6f 	isb	sy
 800c28e:	f3bf 8f4f 	dsb	sy
 800c292:	60fb      	str	r3, [r7, #12]
}
 800c294:	bf00      	nop
 800c296:	bf00      	nop
 800c298:	e7fd      	b.n	800c296 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c29a:	4b39      	ldr	r3, [pc, #228]	@ (800c380 <xPortStartScheduler+0x130>)
 800c29c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c29e:	697b      	ldr	r3, [r7, #20]
 800c2a0:	781b      	ldrb	r3, [r3, #0]
 800c2a2:	b2db      	uxtb	r3, r3
 800c2a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	22ff      	movs	r2, #255	@ 0xff
 800c2aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c2ac:	697b      	ldr	r3, [r7, #20]
 800c2ae:	781b      	ldrb	r3, [r3, #0]
 800c2b0:	b2db      	uxtb	r3, r3
 800c2b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c2b4:	78fb      	ldrb	r3, [r7, #3]
 800c2b6:	b2db      	uxtb	r3, r3
 800c2b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c2bc:	b2da      	uxtb	r2, r3
 800c2be:	4b31      	ldr	r3, [pc, #196]	@ (800c384 <xPortStartScheduler+0x134>)
 800c2c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c2c2:	4b31      	ldr	r3, [pc, #196]	@ (800c388 <xPortStartScheduler+0x138>)
 800c2c4:	2207      	movs	r2, #7
 800c2c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c2c8:	e009      	b.n	800c2de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c2ca:	4b2f      	ldr	r3, [pc, #188]	@ (800c388 <xPortStartScheduler+0x138>)
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	3b01      	subs	r3, #1
 800c2d0:	4a2d      	ldr	r2, [pc, #180]	@ (800c388 <xPortStartScheduler+0x138>)
 800c2d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c2d4:	78fb      	ldrb	r3, [r7, #3]
 800c2d6:	b2db      	uxtb	r3, r3
 800c2d8:	005b      	lsls	r3, r3, #1
 800c2da:	b2db      	uxtb	r3, r3
 800c2dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c2de:	78fb      	ldrb	r3, [r7, #3]
 800c2e0:	b2db      	uxtb	r3, r3
 800c2e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c2e6:	2b80      	cmp	r3, #128	@ 0x80
 800c2e8:	d0ef      	beq.n	800c2ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c2ea:	4b27      	ldr	r3, [pc, #156]	@ (800c388 <xPortStartScheduler+0x138>)
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	f1c3 0307 	rsb	r3, r3, #7
 800c2f2:	2b04      	cmp	r3, #4
 800c2f4:	d00b      	beq.n	800c30e <xPortStartScheduler+0xbe>
	__asm volatile
 800c2f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2fa:	f383 8811 	msr	BASEPRI, r3
 800c2fe:	f3bf 8f6f 	isb	sy
 800c302:	f3bf 8f4f 	dsb	sy
 800c306:	60bb      	str	r3, [r7, #8]
}
 800c308:	bf00      	nop
 800c30a:	bf00      	nop
 800c30c:	e7fd      	b.n	800c30a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c30e:	4b1e      	ldr	r3, [pc, #120]	@ (800c388 <xPortStartScheduler+0x138>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	021b      	lsls	r3, r3, #8
 800c314:	4a1c      	ldr	r2, [pc, #112]	@ (800c388 <xPortStartScheduler+0x138>)
 800c316:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c318:	4b1b      	ldr	r3, [pc, #108]	@ (800c388 <xPortStartScheduler+0x138>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c320:	4a19      	ldr	r2, [pc, #100]	@ (800c388 <xPortStartScheduler+0x138>)
 800c322:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	b2da      	uxtb	r2, r3
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c32c:	4b17      	ldr	r3, [pc, #92]	@ (800c38c <xPortStartScheduler+0x13c>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	4a16      	ldr	r2, [pc, #88]	@ (800c38c <xPortStartScheduler+0x13c>)
 800c332:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c336:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c338:	4b14      	ldr	r3, [pc, #80]	@ (800c38c <xPortStartScheduler+0x13c>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	4a13      	ldr	r2, [pc, #76]	@ (800c38c <xPortStartScheduler+0x13c>)
 800c33e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c342:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c344:	f000 f8da 	bl	800c4fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c348:	4b11      	ldr	r3, [pc, #68]	@ (800c390 <xPortStartScheduler+0x140>)
 800c34a:	2200      	movs	r2, #0
 800c34c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c34e:	f000 f8f9 	bl	800c544 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c352:	4b10      	ldr	r3, [pc, #64]	@ (800c394 <xPortStartScheduler+0x144>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	4a0f      	ldr	r2, [pc, #60]	@ (800c394 <xPortStartScheduler+0x144>)
 800c358:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c35c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c35e:	f7ff ff63 	bl	800c228 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c362:	f7ff f82f 	bl	800b3c4 <vTaskSwitchContext>
	prvTaskExitError();
 800c366:	f7ff ff1b 	bl	800c1a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c36a:	2300      	movs	r3, #0
}
 800c36c:	4618      	mov	r0, r3
 800c36e:	3718      	adds	r7, #24
 800c370:	46bd      	mov	sp, r7
 800c372:	bd80      	pop	{r7, pc}
 800c374:	e000ed00 	.word	0xe000ed00
 800c378:	410fc271 	.word	0x410fc271
 800c37c:	410fc270 	.word	0x410fc270
 800c380:	e000e400 	.word	0xe000e400
 800c384:	20001148 	.word	0x20001148
 800c388:	2000114c 	.word	0x2000114c
 800c38c:	e000ed20 	.word	0xe000ed20
 800c390:	2000000c 	.word	0x2000000c
 800c394:	e000ef34 	.word	0xe000ef34

0800c398 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c398:	b480      	push	{r7}
 800c39a:	b083      	sub	sp, #12
 800c39c:	af00      	add	r7, sp, #0
	__asm volatile
 800c39e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3a2:	f383 8811 	msr	BASEPRI, r3
 800c3a6:	f3bf 8f6f 	isb	sy
 800c3aa:	f3bf 8f4f 	dsb	sy
 800c3ae:	607b      	str	r3, [r7, #4]
}
 800c3b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c3b2:	4b10      	ldr	r3, [pc, #64]	@ (800c3f4 <vPortEnterCritical+0x5c>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	3301      	adds	r3, #1
 800c3b8:	4a0e      	ldr	r2, [pc, #56]	@ (800c3f4 <vPortEnterCritical+0x5c>)
 800c3ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c3bc:	4b0d      	ldr	r3, [pc, #52]	@ (800c3f4 <vPortEnterCritical+0x5c>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	2b01      	cmp	r3, #1
 800c3c2:	d110      	bne.n	800c3e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c3c4:	4b0c      	ldr	r3, [pc, #48]	@ (800c3f8 <vPortEnterCritical+0x60>)
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	b2db      	uxtb	r3, r3
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d00b      	beq.n	800c3e6 <vPortEnterCritical+0x4e>
	__asm volatile
 800c3ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3d2:	f383 8811 	msr	BASEPRI, r3
 800c3d6:	f3bf 8f6f 	isb	sy
 800c3da:	f3bf 8f4f 	dsb	sy
 800c3de:	603b      	str	r3, [r7, #0]
}
 800c3e0:	bf00      	nop
 800c3e2:	bf00      	nop
 800c3e4:	e7fd      	b.n	800c3e2 <vPortEnterCritical+0x4a>
	}
}
 800c3e6:	bf00      	nop
 800c3e8:	370c      	adds	r7, #12
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f0:	4770      	bx	lr
 800c3f2:	bf00      	nop
 800c3f4:	2000000c 	.word	0x2000000c
 800c3f8:	e000ed04 	.word	0xe000ed04

0800c3fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c3fc:	b480      	push	{r7}
 800c3fe:	b083      	sub	sp, #12
 800c400:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c402:	4b12      	ldr	r3, [pc, #72]	@ (800c44c <vPortExitCritical+0x50>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d10b      	bne.n	800c422 <vPortExitCritical+0x26>
	__asm volatile
 800c40a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c40e:	f383 8811 	msr	BASEPRI, r3
 800c412:	f3bf 8f6f 	isb	sy
 800c416:	f3bf 8f4f 	dsb	sy
 800c41a:	607b      	str	r3, [r7, #4]
}
 800c41c:	bf00      	nop
 800c41e:	bf00      	nop
 800c420:	e7fd      	b.n	800c41e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c422:	4b0a      	ldr	r3, [pc, #40]	@ (800c44c <vPortExitCritical+0x50>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	3b01      	subs	r3, #1
 800c428:	4a08      	ldr	r2, [pc, #32]	@ (800c44c <vPortExitCritical+0x50>)
 800c42a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c42c:	4b07      	ldr	r3, [pc, #28]	@ (800c44c <vPortExitCritical+0x50>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d105      	bne.n	800c440 <vPortExitCritical+0x44>
 800c434:	2300      	movs	r3, #0
 800c436:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	f383 8811 	msr	BASEPRI, r3
}
 800c43e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c440:	bf00      	nop
 800c442:	370c      	adds	r7, #12
 800c444:	46bd      	mov	sp, r7
 800c446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44a:	4770      	bx	lr
 800c44c:	2000000c 	.word	0x2000000c

0800c450 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c450:	f3ef 8009 	mrs	r0, PSP
 800c454:	f3bf 8f6f 	isb	sy
 800c458:	4b15      	ldr	r3, [pc, #84]	@ (800c4b0 <pxCurrentTCBConst>)
 800c45a:	681a      	ldr	r2, [r3, #0]
 800c45c:	f01e 0f10 	tst.w	lr, #16
 800c460:	bf08      	it	eq
 800c462:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c466:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c46a:	6010      	str	r0, [r2, #0]
 800c46c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c470:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c474:	f380 8811 	msr	BASEPRI, r0
 800c478:	f3bf 8f4f 	dsb	sy
 800c47c:	f3bf 8f6f 	isb	sy
 800c480:	f7fe ffa0 	bl	800b3c4 <vTaskSwitchContext>
 800c484:	f04f 0000 	mov.w	r0, #0
 800c488:	f380 8811 	msr	BASEPRI, r0
 800c48c:	bc09      	pop	{r0, r3}
 800c48e:	6819      	ldr	r1, [r3, #0]
 800c490:	6808      	ldr	r0, [r1, #0]
 800c492:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c496:	f01e 0f10 	tst.w	lr, #16
 800c49a:	bf08      	it	eq
 800c49c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c4a0:	f380 8809 	msr	PSP, r0
 800c4a4:	f3bf 8f6f 	isb	sy
 800c4a8:	4770      	bx	lr
 800c4aa:	bf00      	nop
 800c4ac:	f3af 8000 	nop.w

0800c4b0 <pxCurrentTCBConst>:
 800c4b0:	20000b1c 	.word	0x20000b1c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c4b4:	bf00      	nop
 800c4b6:	bf00      	nop

0800c4b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b082      	sub	sp, #8
 800c4bc:	af00      	add	r7, sp, #0
	__asm volatile
 800c4be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4c2:	f383 8811 	msr	BASEPRI, r3
 800c4c6:	f3bf 8f6f 	isb	sy
 800c4ca:	f3bf 8f4f 	dsb	sy
 800c4ce:	607b      	str	r3, [r7, #4]
}
 800c4d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c4d2:	f7fe febd 	bl	800b250 <xTaskIncrementTick>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d003      	beq.n	800c4e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c4dc:	4b06      	ldr	r3, [pc, #24]	@ (800c4f8 <xPortSysTickHandler+0x40>)
 800c4de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c4e2:	601a      	str	r2, [r3, #0]
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	f383 8811 	msr	BASEPRI, r3
}
 800c4ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c4f0:	bf00      	nop
 800c4f2:	3708      	adds	r7, #8
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bd80      	pop	{r7, pc}
 800c4f8:	e000ed04 	.word	0xe000ed04

0800c4fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c500:	4b0b      	ldr	r3, [pc, #44]	@ (800c530 <vPortSetupTimerInterrupt+0x34>)
 800c502:	2200      	movs	r2, #0
 800c504:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c506:	4b0b      	ldr	r3, [pc, #44]	@ (800c534 <vPortSetupTimerInterrupt+0x38>)
 800c508:	2200      	movs	r2, #0
 800c50a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c50c:	4b0a      	ldr	r3, [pc, #40]	@ (800c538 <vPortSetupTimerInterrupt+0x3c>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	4a0a      	ldr	r2, [pc, #40]	@ (800c53c <vPortSetupTimerInterrupt+0x40>)
 800c512:	fba2 2303 	umull	r2, r3, r2, r3
 800c516:	099b      	lsrs	r3, r3, #6
 800c518:	4a09      	ldr	r2, [pc, #36]	@ (800c540 <vPortSetupTimerInterrupt+0x44>)
 800c51a:	3b01      	subs	r3, #1
 800c51c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c51e:	4b04      	ldr	r3, [pc, #16]	@ (800c530 <vPortSetupTimerInterrupt+0x34>)
 800c520:	2207      	movs	r2, #7
 800c522:	601a      	str	r2, [r3, #0]
}
 800c524:	bf00      	nop
 800c526:	46bd      	mov	sp, r7
 800c528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52c:	4770      	bx	lr
 800c52e:	bf00      	nop
 800c530:	e000e010 	.word	0xe000e010
 800c534:	e000e018 	.word	0xe000e018
 800c538:	20000000 	.word	0x20000000
 800c53c:	10624dd3 	.word	0x10624dd3
 800c540:	e000e014 	.word	0xe000e014

0800c544 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c544:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c554 <vPortEnableVFP+0x10>
 800c548:	6801      	ldr	r1, [r0, #0]
 800c54a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c54e:	6001      	str	r1, [r0, #0]
 800c550:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c552:	bf00      	nop
 800c554:	e000ed88 	.word	0xe000ed88

0800c558 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c558:	b480      	push	{r7}
 800c55a:	b085      	sub	sp, #20
 800c55c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c55e:	f3ef 8305 	mrs	r3, IPSR
 800c562:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	2b0f      	cmp	r3, #15
 800c568:	d915      	bls.n	800c596 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c56a:	4a18      	ldr	r2, [pc, #96]	@ (800c5cc <vPortValidateInterruptPriority+0x74>)
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	4413      	add	r3, r2
 800c570:	781b      	ldrb	r3, [r3, #0]
 800c572:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c574:	4b16      	ldr	r3, [pc, #88]	@ (800c5d0 <vPortValidateInterruptPriority+0x78>)
 800c576:	781b      	ldrb	r3, [r3, #0]
 800c578:	7afa      	ldrb	r2, [r7, #11]
 800c57a:	429a      	cmp	r2, r3
 800c57c:	d20b      	bcs.n	800c596 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c57e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c582:	f383 8811 	msr	BASEPRI, r3
 800c586:	f3bf 8f6f 	isb	sy
 800c58a:	f3bf 8f4f 	dsb	sy
 800c58e:	607b      	str	r3, [r7, #4]
}
 800c590:	bf00      	nop
 800c592:	bf00      	nop
 800c594:	e7fd      	b.n	800c592 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c596:	4b0f      	ldr	r3, [pc, #60]	@ (800c5d4 <vPortValidateInterruptPriority+0x7c>)
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c59e:	4b0e      	ldr	r3, [pc, #56]	@ (800c5d8 <vPortValidateInterruptPriority+0x80>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	429a      	cmp	r2, r3
 800c5a4:	d90b      	bls.n	800c5be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c5a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5aa:	f383 8811 	msr	BASEPRI, r3
 800c5ae:	f3bf 8f6f 	isb	sy
 800c5b2:	f3bf 8f4f 	dsb	sy
 800c5b6:	603b      	str	r3, [r7, #0]
}
 800c5b8:	bf00      	nop
 800c5ba:	bf00      	nop
 800c5bc:	e7fd      	b.n	800c5ba <vPortValidateInterruptPriority+0x62>
	}
 800c5be:	bf00      	nop
 800c5c0:	3714      	adds	r7, #20
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c8:	4770      	bx	lr
 800c5ca:	bf00      	nop
 800c5cc:	e000e3f0 	.word	0xe000e3f0
 800c5d0:	20001148 	.word	0x20001148
 800c5d4:	e000ed0c 	.word	0xe000ed0c
 800c5d8:	2000114c 	.word	0x2000114c

0800c5dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b08a      	sub	sp, #40	@ 0x28
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c5e8:	f7fe fd76 	bl	800b0d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c5ec:	4b5c      	ldr	r3, [pc, #368]	@ (800c760 <pvPortMalloc+0x184>)
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d101      	bne.n	800c5f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c5f4:	f000 f924 	bl	800c840 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c5f8:	4b5a      	ldr	r3, [pc, #360]	@ (800c764 <pvPortMalloc+0x188>)
 800c5fa:	681a      	ldr	r2, [r3, #0]
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	4013      	ands	r3, r2
 800c600:	2b00      	cmp	r3, #0
 800c602:	f040 8095 	bne.w	800c730 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d01e      	beq.n	800c64a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c60c:	2208      	movs	r2, #8
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	4413      	add	r3, r2
 800c612:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f003 0307 	and.w	r3, r3, #7
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d015      	beq.n	800c64a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f023 0307 	bic.w	r3, r3, #7
 800c624:	3308      	adds	r3, #8
 800c626:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f003 0307 	and.w	r3, r3, #7
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d00b      	beq.n	800c64a <pvPortMalloc+0x6e>
	__asm volatile
 800c632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c636:	f383 8811 	msr	BASEPRI, r3
 800c63a:	f3bf 8f6f 	isb	sy
 800c63e:	f3bf 8f4f 	dsb	sy
 800c642:	617b      	str	r3, [r7, #20]
}
 800c644:	bf00      	nop
 800c646:	bf00      	nop
 800c648:	e7fd      	b.n	800c646 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d06f      	beq.n	800c730 <pvPortMalloc+0x154>
 800c650:	4b45      	ldr	r3, [pc, #276]	@ (800c768 <pvPortMalloc+0x18c>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	687a      	ldr	r2, [r7, #4]
 800c656:	429a      	cmp	r2, r3
 800c658:	d86a      	bhi.n	800c730 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c65a:	4b44      	ldr	r3, [pc, #272]	@ (800c76c <pvPortMalloc+0x190>)
 800c65c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c65e:	4b43      	ldr	r3, [pc, #268]	@ (800c76c <pvPortMalloc+0x190>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c664:	e004      	b.n	800c670 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c668:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c66a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c672:	685b      	ldr	r3, [r3, #4]
 800c674:	687a      	ldr	r2, [r7, #4]
 800c676:	429a      	cmp	r2, r3
 800c678:	d903      	bls.n	800c682 <pvPortMalloc+0xa6>
 800c67a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d1f1      	bne.n	800c666 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c682:	4b37      	ldr	r3, [pc, #220]	@ (800c760 <pvPortMalloc+0x184>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c688:	429a      	cmp	r2, r3
 800c68a:	d051      	beq.n	800c730 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c68c:	6a3b      	ldr	r3, [r7, #32]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	2208      	movs	r2, #8
 800c692:	4413      	add	r3, r2
 800c694:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c698:	681a      	ldr	r2, [r3, #0]
 800c69a:	6a3b      	ldr	r3, [r7, #32]
 800c69c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c69e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6a0:	685a      	ldr	r2, [r3, #4]
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	1ad2      	subs	r2, r2, r3
 800c6a6:	2308      	movs	r3, #8
 800c6a8:	005b      	lsls	r3, r3, #1
 800c6aa:	429a      	cmp	r2, r3
 800c6ac:	d920      	bls.n	800c6f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c6ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	4413      	add	r3, r2
 800c6b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c6b6:	69bb      	ldr	r3, [r7, #24]
 800c6b8:	f003 0307 	and.w	r3, r3, #7
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d00b      	beq.n	800c6d8 <pvPortMalloc+0xfc>
	__asm volatile
 800c6c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6c4:	f383 8811 	msr	BASEPRI, r3
 800c6c8:	f3bf 8f6f 	isb	sy
 800c6cc:	f3bf 8f4f 	dsb	sy
 800c6d0:	613b      	str	r3, [r7, #16]
}
 800c6d2:	bf00      	nop
 800c6d4:	bf00      	nop
 800c6d6:	e7fd      	b.n	800c6d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c6d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6da:	685a      	ldr	r2, [r3, #4]
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	1ad2      	subs	r2, r2, r3
 800c6e0:	69bb      	ldr	r3, [r7, #24]
 800c6e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c6e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6e6:	687a      	ldr	r2, [r7, #4]
 800c6e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c6ea:	69b8      	ldr	r0, [r7, #24]
 800c6ec:	f000 f90a 	bl	800c904 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c6f0:	4b1d      	ldr	r3, [pc, #116]	@ (800c768 <pvPortMalloc+0x18c>)
 800c6f2:	681a      	ldr	r2, [r3, #0]
 800c6f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6f6:	685b      	ldr	r3, [r3, #4]
 800c6f8:	1ad3      	subs	r3, r2, r3
 800c6fa:	4a1b      	ldr	r2, [pc, #108]	@ (800c768 <pvPortMalloc+0x18c>)
 800c6fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c6fe:	4b1a      	ldr	r3, [pc, #104]	@ (800c768 <pvPortMalloc+0x18c>)
 800c700:	681a      	ldr	r2, [r3, #0]
 800c702:	4b1b      	ldr	r3, [pc, #108]	@ (800c770 <pvPortMalloc+0x194>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	429a      	cmp	r2, r3
 800c708:	d203      	bcs.n	800c712 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c70a:	4b17      	ldr	r3, [pc, #92]	@ (800c768 <pvPortMalloc+0x18c>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	4a18      	ldr	r2, [pc, #96]	@ (800c770 <pvPortMalloc+0x194>)
 800c710:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c714:	685a      	ldr	r2, [r3, #4]
 800c716:	4b13      	ldr	r3, [pc, #76]	@ (800c764 <pvPortMalloc+0x188>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	431a      	orrs	r2, r3
 800c71c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c71e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c722:	2200      	movs	r2, #0
 800c724:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c726:	4b13      	ldr	r3, [pc, #76]	@ (800c774 <pvPortMalloc+0x198>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	3301      	adds	r3, #1
 800c72c:	4a11      	ldr	r2, [pc, #68]	@ (800c774 <pvPortMalloc+0x198>)
 800c72e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c730:	f7fe fce0 	bl	800b0f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c734:	69fb      	ldr	r3, [r7, #28]
 800c736:	f003 0307 	and.w	r3, r3, #7
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d00b      	beq.n	800c756 <pvPortMalloc+0x17a>
	__asm volatile
 800c73e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c742:	f383 8811 	msr	BASEPRI, r3
 800c746:	f3bf 8f6f 	isb	sy
 800c74a:	f3bf 8f4f 	dsb	sy
 800c74e:	60fb      	str	r3, [r7, #12]
}
 800c750:	bf00      	nop
 800c752:	bf00      	nop
 800c754:	e7fd      	b.n	800c752 <pvPortMalloc+0x176>
	return pvReturn;
 800c756:	69fb      	ldr	r3, [r7, #28]
}
 800c758:	4618      	mov	r0, r3
 800c75a:	3728      	adds	r7, #40	@ 0x28
 800c75c:	46bd      	mov	sp, r7
 800c75e:	bd80      	pop	{r7, pc}
 800c760:	200028c8 	.word	0x200028c8
 800c764:	200028dc 	.word	0x200028dc
 800c768:	200028cc 	.word	0x200028cc
 800c76c:	200028c0 	.word	0x200028c0
 800c770:	200028d0 	.word	0x200028d0
 800c774:	200028d4 	.word	0x200028d4

0800c778 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b086      	sub	sp, #24
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d04f      	beq.n	800c82a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c78a:	2308      	movs	r3, #8
 800c78c:	425b      	negs	r3, r3
 800c78e:	697a      	ldr	r2, [r7, #20]
 800c790:	4413      	add	r3, r2
 800c792:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c794:	697b      	ldr	r3, [r7, #20]
 800c796:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c798:	693b      	ldr	r3, [r7, #16]
 800c79a:	685a      	ldr	r2, [r3, #4]
 800c79c:	4b25      	ldr	r3, [pc, #148]	@ (800c834 <vPortFree+0xbc>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	4013      	ands	r3, r2
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d10b      	bne.n	800c7be <vPortFree+0x46>
	__asm volatile
 800c7a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7aa:	f383 8811 	msr	BASEPRI, r3
 800c7ae:	f3bf 8f6f 	isb	sy
 800c7b2:	f3bf 8f4f 	dsb	sy
 800c7b6:	60fb      	str	r3, [r7, #12]
}
 800c7b8:	bf00      	nop
 800c7ba:	bf00      	nop
 800c7bc:	e7fd      	b.n	800c7ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c7be:	693b      	ldr	r3, [r7, #16]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d00b      	beq.n	800c7de <vPortFree+0x66>
	__asm volatile
 800c7c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7ca:	f383 8811 	msr	BASEPRI, r3
 800c7ce:	f3bf 8f6f 	isb	sy
 800c7d2:	f3bf 8f4f 	dsb	sy
 800c7d6:	60bb      	str	r3, [r7, #8]
}
 800c7d8:	bf00      	nop
 800c7da:	bf00      	nop
 800c7dc:	e7fd      	b.n	800c7da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c7de:	693b      	ldr	r3, [r7, #16]
 800c7e0:	685a      	ldr	r2, [r3, #4]
 800c7e2:	4b14      	ldr	r3, [pc, #80]	@ (800c834 <vPortFree+0xbc>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	4013      	ands	r3, r2
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d01e      	beq.n	800c82a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c7ec:	693b      	ldr	r3, [r7, #16]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d11a      	bne.n	800c82a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c7f4:	693b      	ldr	r3, [r7, #16]
 800c7f6:	685a      	ldr	r2, [r3, #4]
 800c7f8:	4b0e      	ldr	r3, [pc, #56]	@ (800c834 <vPortFree+0xbc>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	43db      	mvns	r3, r3
 800c7fe:	401a      	ands	r2, r3
 800c800:	693b      	ldr	r3, [r7, #16]
 800c802:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c804:	f7fe fc68 	bl	800b0d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c808:	693b      	ldr	r3, [r7, #16]
 800c80a:	685a      	ldr	r2, [r3, #4]
 800c80c:	4b0a      	ldr	r3, [pc, #40]	@ (800c838 <vPortFree+0xc0>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	4413      	add	r3, r2
 800c812:	4a09      	ldr	r2, [pc, #36]	@ (800c838 <vPortFree+0xc0>)
 800c814:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c816:	6938      	ldr	r0, [r7, #16]
 800c818:	f000 f874 	bl	800c904 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c81c:	4b07      	ldr	r3, [pc, #28]	@ (800c83c <vPortFree+0xc4>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	3301      	adds	r3, #1
 800c822:	4a06      	ldr	r2, [pc, #24]	@ (800c83c <vPortFree+0xc4>)
 800c824:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c826:	f7fe fc65 	bl	800b0f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c82a:	bf00      	nop
 800c82c:	3718      	adds	r7, #24
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd80      	pop	{r7, pc}
 800c832:	bf00      	nop
 800c834:	200028dc 	.word	0x200028dc
 800c838:	200028cc 	.word	0x200028cc
 800c83c:	200028d8 	.word	0x200028d8

0800c840 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c840:	b480      	push	{r7}
 800c842:	b085      	sub	sp, #20
 800c844:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c846:	f241 7370 	movw	r3, #6000	@ 0x1770
 800c84a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c84c:	4b27      	ldr	r3, [pc, #156]	@ (800c8ec <prvHeapInit+0xac>)
 800c84e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	f003 0307 	and.w	r3, r3, #7
 800c856:	2b00      	cmp	r3, #0
 800c858:	d00c      	beq.n	800c874 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	3307      	adds	r3, #7
 800c85e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	f023 0307 	bic.w	r3, r3, #7
 800c866:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c868:	68ba      	ldr	r2, [r7, #8]
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	1ad3      	subs	r3, r2, r3
 800c86e:	4a1f      	ldr	r2, [pc, #124]	@ (800c8ec <prvHeapInit+0xac>)
 800c870:	4413      	add	r3, r2
 800c872:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c878:	4a1d      	ldr	r2, [pc, #116]	@ (800c8f0 <prvHeapInit+0xb0>)
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c87e:	4b1c      	ldr	r3, [pc, #112]	@ (800c8f0 <prvHeapInit+0xb0>)
 800c880:	2200      	movs	r2, #0
 800c882:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	68ba      	ldr	r2, [r7, #8]
 800c888:	4413      	add	r3, r2
 800c88a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c88c:	2208      	movs	r2, #8
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	1a9b      	subs	r3, r3, r2
 800c892:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	f023 0307 	bic.w	r3, r3, #7
 800c89a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	4a15      	ldr	r2, [pc, #84]	@ (800c8f4 <prvHeapInit+0xb4>)
 800c8a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c8a2:	4b14      	ldr	r3, [pc, #80]	@ (800c8f4 <prvHeapInit+0xb4>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c8aa:	4b12      	ldr	r3, [pc, #72]	@ (800c8f4 <prvHeapInit+0xb4>)
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	68fa      	ldr	r2, [r7, #12]
 800c8ba:	1ad2      	subs	r2, r2, r3
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c8c0:	4b0c      	ldr	r3, [pc, #48]	@ (800c8f4 <prvHeapInit+0xb4>)
 800c8c2:	681a      	ldr	r2, [r3, #0]
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	685b      	ldr	r3, [r3, #4]
 800c8cc:	4a0a      	ldr	r2, [pc, #40]	@ (800c8f8 <prvHeapInit+0xb8>)
 800c8ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	685b      	ldr	r3, [r3, #4]
 800c8d4:	4a09      	ldr	r2, [pc, #36]	@ (800c8fc <prvHeapInit+0xbc>)
 800c8d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c8d8:	4b09      	ldr	r3, [pc, #36]	@ (800c900 <prvHeapInit+0xc0>)
 800c8da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c8de:	601a      	str	r2, [r3, #0]
}
 800c8e0:	bf00      	nop
 800c8e2:	3714      	adds	r7, #20
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ea:	4770      	bx	lr
 800c8ec:	20001150 	.word	0x20001150
 800c8f0:	200028c0 	.word	0x200028c0
 800c8f4:	200028c8 	.word	0x200028c8
 800c8f8:	200028d0 	.word	0x200028d0
 800c8fc:	200028cc 	.word	0x200028cc
 800c900:	200028dc 	.word	0x200028dc

0800c904 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c904:	b480      	push	{r7}
 800c906:	b085      	sub	sp, #20
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c90c:	4b28      	ldr	r3, [pc, #160]	@ (800c9b0 <prvInsertBlockIntoFreeList+0xac>)
 800c90e:	60fb      	str	r3, [r7, #12]
 800c910:	e002      	b.n	800c918 <prvInsertBlockIntoFreeList+0x14>
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	60fb      	str	r3, [r7, #12]
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	687a      	ldr	r2, [r7, #4]
 800c91e:	429a      	cmp	r2, r3
 800c920:	d8f7      	bhi.n	800c912 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	685b      	ldr	r3, [r3, #4]
 800c92a:	68ba      	ldr	r2, [r7, #8]
 800c92c:	4413      	add	r3, r2
 800c92e:	687a      	ldr	r2, [r7, #4]
 800c930:	429a      	cmp	r2, r3
 800c932:	d108      	bne.n	800c946 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	685a      	ldr	r2, [r3, #4]
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	685b      	ldr	r3, [r3, #4]
 800c93c:	441a      	add	r2, r3
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	685b      	ldr	r3, [r3, #4]
 800c94e:	68ba      	ldr	r2, [r7, #8]
 800c950:	441a      	add	r2, r3
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	429a      	cmp	r2, r3
 800c958:	d118      	bne.n	800c98c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	681a      	ldr	r2, [r3, #0]
 800c95e:	4b15      	ldr	r3, [pc, #84]	@ (800c9b4 <prvInsertBlockIntoFreeList+0xb0>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	429a      	cmp	r2, r3
 800c964:	d00d      	beq.n	800c982 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	685a      	ldr	r2, [r3, #4]
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	685b      	ldr	r3, [r3, #4]
 800c970:	441a      	add	r2, r3
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	681a      	ldr	r2, [r3, #0]
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	601a      	str	r2, [r3, #0]
 800c980:	e008      	b.n	800c994 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c982:	4b0c      	ldr	r3, [pc, #48]	@ (800c9b4 <prvInsertBlockIntoFreeList+0xb0>)
 800c984:	681a      	ldr	r2, [r3, #0]
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	601a      	str	r2, [r3, #0]
 800c98a:	e003      	b.n	800c994 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	681a      	ldr	r2, [r3, #0]
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c994:	68fa      	ldr	r2, [r7, #12]
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	429a      	cmp	r2, r3
 800c99a:	d002      	beq.n	800c9a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	687a      	ldr	r2, [r7, #4]
 800c9a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c9a2:	bf00      	nop
 800c9a4:	3714      	adds	r7, #20
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ac:	4770      	bx	lr
 800c9ae:	bf00      	nop
 800c9b0:	200028c0 	.word	0x200028c0
 800c9b4:	200028c8 	.word	0x200028c8

0800c9b8 <_ZdlPvj>:
 800c9b8:	f000 b800 	b.w	800c9bc <_ZdlPv>

0800c9bc <_ZdlPv>:
 800c9bc:	f000 b800 	b.w	800c9c0 <free>

0800c9c0 <free>:
 800c9c0:	4b02      	ldr	r3, [pc, #8]	@ (800c9cc <free+0xc>)
 800c9c2:	4601      	mov	r1, r0
 800c9c4:	6818      	ldr	r0, [r3, #0]
 800c9c6:	f000 b8a1 	b.w	800cb0c <_free_r>
 800c9ca:	bf00      	nop
 800c9cc:	20000010 	.word	0x20000010

0800c9d0 <__malloc_lock>:
 800c9d0:	4801      	ldr	r0, [pc, #4]	@ (800c9d8 <__malloc_lock+0x8>)
 800c9d2:	f000 b88b 	b.w	800caec <__retarget_lock_acquire_recursive>
 800c9d6:	bf00      	nop
 800c9d8:	20002a1c 	.word	0x20002a1c

0800c9dc <__malloc_unlock>:
 800c9dc:	4801      	ldr	r0, [pc, #4]	@ (800c9e4 <__malloc_unlock+0x8>)
 800c9de:	f000 b886 	b.w	800caee <__retarget_lock_release_recursive>
 800c9e2:	bf00      	nop
 800c9e4:	20002a1c 	.word	0x20002a1c

0800c9e8 <memset>:
 800c9e8:	4402      	add	r2, r0
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	4293      	cmp	r3, r2
 800c9ee:	d100      	bne.n	800c9f2 <memset+0xa>
 800c9f0:	4770      	bx	lr
 800c9f2:	f803 1b01 	strb.w	r1, [r3], #1
 800c9f6:	e7f9      	b.n	800c9ec <memset+0x4>

0800c9f8 <_reclaim_reent>:
 800c9f8:	4b29      	ldr	r3, [pc, #164]	@ (800caa0 <_reclaim_reent+0xa8>)
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	4283      	cmp	r3, r0
 800c9fe:	b570      	push	{r4, r5, r6, lr}
 800ca00:	4604      	mov	r4, r0
 800ca02:	d04b      	beq.n	800ca9c <_reclaim_reent+0xa4>
 800ca04:	69c3      	ldr	r3, [r0, #28]
 800ca06:	b1ab      	cbz	r3, 800ca34 <_reclaim_reent+0x3c>
 800ca08:	68db      	ldr	r3, [r3, #12]
 800ca0a:	b16b      	cbz	r3, 800ca28 <_reclaim_reent+0x30>
 800ca0c:	2500      	movs	r5, #0
 800ca0e:	69e3      	ldr	r3, [r4, #28]
 800ca10:	68db      	ldr	r3, [r3, #12]
 800ca12:	5959      	ldr	r1, [r3, r5]
 800ca14:	2900      	cmp	r1, #0
 800ca16:	d13b      	bne.n	800ca90 <_reclaim_reent+0x98>
 800ca18:	3504      	adds	r5, #4
 800ca1a:	2d80      	cmp	r5, #128	@ 0x80
 800ca1c:	d1f7      	bne.n	800ca0e <_reclaim_reent+0x16>
 800ca1e:	69e3      	ldr	r3, [r4, #28]
 800ca20:	4620      	mov	r0, r4
 800ca22:	68d9      	ldr	r1, [r3, #12]
 800ca24:	f000 f872 	bl	800cb0c <_free_r>
 800ca28:	69e3      	ldr	r3, [r4, #28]
 800ca2a:	6819      	ldr	r1, [r3, #0]
 800ca2c:	b111      	cbz	r1, 800ca34 <_reclaim_reent+0x3c>
 800ca2e:	4620      	mov	r0, r4
 800ca30:	f000 f86c 	bl	800cb0c <_free_r>
 800ca34:	6961      	ldr	r1, [r4, #20]
 800ca36:	b111      	cbz	r1, 800ca3e <_reclaim_reent+0x46>
 800ca38:	4620      	mov	r0, r4
 800ca3a:	f000 f867 	bl	800cb0c <_free_r>
 800ca3e:	69e1      	ldr	r1, [r4, #28]
 800ca40:	b111      	cbz	r1, 800ca48 <_reclaim_reent+0x50>
 800ca42:	4620      	mov	r0, r4
 800ca44:	f000 f862 	bl	800cb0c <_free_r>
 800ca48:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ca4a:	b111      	cbz	r1, 800ca52 <_reclaim_reent+0x5a>
 800ca4c:	4620      	mov	r0, r4
 800ca4e:	f000 f85d 	bl	800cb0c <_free_r>
 800ca52:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ca54:	b111      	cbz	r1, 800ca5c <_reclaim_reent+0x64>
 800ca56:	4620      	mov	r0, r4
 800ca58:	f000 f858 	bl	800cb0c <_free_r>
 800ca5c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ca5e:	b111      	cbz	r1, 800ca66 <_reclaim_reent+0x6e>
 800ca60:	4620      	mov	r0, r4
 800ca62:	f000 f853 	bl	800cb0c <_free_r>
 800ca66:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ca68:	b111      	cbz	r1, 800ca70 <_reclaim_reent+0x78>
 800ca6a:	4620      	mov	r0, r4
 800ca6c:	f000 f84e 	bl	800cb0c <_free_r>
 800ca70:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800ca72:	b111      	cbz	r1, 800ca7a <_reclaim_reent+0x82>
 800ca74:	4620      	mov	r0, r4
 800ca76:	f000 f849 	bl	800cb0c <_free_r>
 800ca7a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ca7c:	b111      	cbz	r1, 800ca84 <_reclaim_reent+0x8c>
 800ca7e:	4620      	mov	r0, r4
 800ca80:	f000 f844 	bl	800cb0c <_free_r>
 800ca84:	6a23      	ldr	r3, [r4, #32]
 800ca86:	b14b      	cbz	r3, 800ca9c <_reclaim_reent+0xa4>
 800ca88:	4620      	mov	r0, r4
 800ca8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ca8e:	4718      	bx	r3
 800ca90:	680e      	ldr	r6, [r1, #0]
 800ca92:	4620      	mov	r0, r4
 800ca94:	f000 f83a 	bl	800cb0c <_free_r>
 800ca98:	4631      	mov	r1, r6
 800ca9a:	e7bb      	b.n	800ca14 <_reclaim_reent+0x1c>
 800ca9c:	bd70      	pop	{r4, r5, r6, pc}
 800ca9e:	bf00      	nop
 800caa0:	20000010 	.word	0x20000010

0800caa4 <__libc_init_array>:
 800caa4:	b570      	push	{r4, r5, r6, lr}
 800caa6:	4d0d      	ldr	r5, [pc, #52]	@ (800cadc <__libc_init_array+0x38>)
 800caa8:	4c0d      	ldr	r4, [pc, #52]	@ (800cae0 <__libc_init_array+0x3c>)
 800caaa:	1b64      	subs	r4, r4, r5
 800caac:	10a4      	asrs	r4, r4, #2
 800caae:	2600      	movs	r6, #0
 800cab0:	42a6      	cmp	r6, r4
 800cab2:	d109      	bne.n	800cac8 <__libc_init_array+0x24>
 800cab4:	4d0b      	ldr	r5, [pc, #44]	@ (800cae4 <__libc_init_array+0x40>)
 800cab6:	4c0c      	ldr	r4, [pc, #48]	@ (800cae8 <__libc_init_array+0x44>)
 800cab8:	f000 f872 	bl	800cba0 <_init>
 800cabc:	1b64      	subs	r4, r4, r5
 800cabe:	10a4      	asrs	r4, r4, #2
 800cac0:	2600      	movs	r6, #0
 800cac2:	42a6      	cmp	r6, r4
 800cac4:	d105      	bne.n	800cad2 <__libc_init_array+0x2e>
 800cac6:	bd70      	pop	{r4, r5, r6, pc}
 800cac8:	f855 3b04 	ldr.w	r3, [r5], #4
 800cacc:	4798      	blx	r3
 800cace:	3601      	adds	r6, #1
 800cad0:	e7ee      	b.n	800cab0 <__libc_init_array+0xc>
 800cad2:	f855 3b04 	ldr.w	r3, [r5], #4
 800cad6:	4798      	blx	r3
 800cad8:	3601      	adds	r6, #1
 800cada:	e7f2      	b.n	800cac2 <__libc_init_array+0x1e>
 800cadc:	0800d2ac 	.word	0x0800d2ac
 800cae0:	0800d2ac 	.word	0x0800d2ac
 800cae4:	0800d2ac 	.word	0x0800d2ac
 800cae8:	0800d2b4 	.word	0x0800d2b4

0800caec <__retarget_lock_acquire_recursive>:
 800caec:	4770      	bx	lr

0800caee <__retarget_lock_release_recursive>:
 800caee:	4770      	bx	lr

0800caf0 <memcpy>:
 800caf0:	440a      	add	r2, r1
 800caf2:	4291      	cmp	r1, r2
 800caf4:	f100 33ff 	add.w	r3, r0, #4294967295
 800caf8:	d100      	bne.n	800cafc <memcpy+0xc>
 800cafa:	4770      	bx	lr
 800cafc:	b510      	push	{r4, lr}
 800cafe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb02:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb06:	4291      	cmp	r1, r2
 800cb08:	d1f9      	bne.n	800cafe <memcpy+0xe>
 800cb0a:	bd10      	pop	{r4, pc}

0800cb0c <_free_r>:
 800cb0c:	b538      	push	{r3, r4, r5, lr}
 800cb0e:	4605      	mov	r5, r0
 800cb10:	2900      	cmp	r1, #0
 800cb12:	d041      	beq.n	800cb98 <_free_r+0x8c>
 800cb14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb18:	1f0c      	subs	r4, r1, #4
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	bfb8      	it	lt
 800cb1e:	18e4      	addlt	r4, r4, r3
 800cb20:	f7ff ff56 	bl	800c9d0 <__malloc_lock>
 800cb24:	4a1d      	ldr	r2, [pc, #116]	@ (800cb9c <_free_r+0x90>)
 800cb26:	6813      	ldr	r3, [r2, #0]
 800cb28:	b933      	cbnz	r3, 800cb38 <_free_r+0x2c>
 800cb2a:	6063      	str	r3, [r4, #4]
 800cb2c:	6014      	str	r4, [r2, #0]
 800cb2e:	4628      	mov	r0, r5
 800cb30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb34:	f7ff bf52 	b.w	800c9dc <__malloc_unlock>
 800cb38:	42a3      	cmp	r3, r4
 800cb3a:	d908      	bls.n	800cb4e <_free_r+0x42>
 800cb3c:	6820      	ldr	r0, [r4, #0]
 800cb3e:	1821      	adds	r1, r4, r0
 800cb40:	428b      	cmp	r3, r1
 800cb42:	bf01      	itttt	eq
 800cb44:	6819      	ldreq	r1, [r3, #0]
 800cb46:	685b      	ldreq	r3, [r3, #4]
 800cb48:	1809      	addeq	r1, r1, r0
 800cb4a:	6021      	streq	r1, [r4, #0]
 800cb4c:	e7ed      	b.n	800cb2a <_free_r+0x1e>
 800cb4e:	461a      	mov	r2, r3
 800cb50:	685b      	ldr	r3, [r3, #4]
 800cb52:	b10b      	cbz	r3, 800cb58 <_free_r+0x4c>
 800cb54:	42a3      	cmp	r3, r4
 800cb56:	d9fa      	bls.n	800cb4e <_free_r+0x42>
 800cb58:	6811      	ldr	r1, [r2, #0]
 800cb5a:	1850      	adds	r0, r2, r1
 800cb5c:	42a0      	cmp	r0, r4
 800cb5e:	d10b      	bne.n	800cb78 <_free_r+0x6c>
 800cb60:	6820      	ldr	r0, [r4, #0]
 800cb62:	4401      	add	r1, r0
 800cb64:	1850      	adds	r0, r2, r1
 800cb66:	4283      	cmp	r3, r0
 800cb68:	6011      	str	r1, [r2, #0]
 800cb6a:	d1e0      	bne.n	800cb2e <_free_r+0x22>
 800cb6c:	6818      	ldr	r0, [r3, #0]
 800cb6e:	685b      	ldr	r3, [r3, #4]
 800cb70:	6053      	str	r3, [r2, #4]
 800cb72:	4408      	add	r0, r1
 800cb74:	6010      	str	r0, [r2, #0]
 800cb76:	e7da      	b.n	800cb2e <_free_r+0x22>
 800cb78:	d902      	bls.n	800cb80 <_free_r+0x74>
 800cb7a:	230c      	movs	r3, #12
 800cb7c:	602b      	str	r3, [r5, #0]
 800cb7e:	e7d6      	b.n	800cb2e <_free_r+0x22>
 800cb80:	6820      	ldr	r0, [r4, #0]
 800cb82:	1821      	adds	r1, r4, r0
 800cb84:	428b      	cmp	r3, r1
 800cb86:	bf04      	itt	eq
 800cb88:	6819      	ldreq	r1, [r3, #0]
 800cb8a:	685b      	ldreq	r3, [r3, #4]
 800cb8c:	6063      	str	r3, [r4, #4]
 800cb8e:	bf04      	itt	eq
 800cb90:	1809      	addeq	r1, r1, r0
 800cb92:	6021      	streq	r1, [r4, #0]
 800cb94:	6054      	str	r4, [r2, #4]
 800cb96:	e7ca      	b.n	800cb2e <_free_r+0x22>
 800cb98:	bd38      	pop	{r3, r4, r5, pc}
 800cb9a:	bf00      	nop
 800cb9c:	200028e0 	.word	0x200028e0

0800cba0 <_init>:
 800cba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cba2:	bf00      	nop
 800cba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cba6:	bc08      	pop	{r3}
 800cba8:	469e      	mov	lr, r3
 800cbaa:	4770      	bx	lr

0800cbac <_fini>:
 800cbac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbae:	bf00      	nop
 800cbb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbb2:	bc08      	pop	{r3}
 800cbb4:	469e      	mov	lr, r3
 800cbb6:	4770      	bx	lr
